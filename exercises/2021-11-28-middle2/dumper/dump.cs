// Image 0: mscorlib.dll - 0
// Image 1: System.dll - 1452
// Image 2: System.Configuration.dll - 1551
// Image 3: Mono.Security.dll - 1561
// Image 4: System.Xml.dll - 1566
// Image 5: System.Core.dll - 1575
// Image 6: UnityEngine.SharedInternalsModule.dll - 1587
// Image 7: UnityEngine.CoreModule.dll - 1620
// Image 8: UnityEngine.TextRenderingModule.dll - 2031
// Image 9: UnityEngine.AnimationModule.dll - 2044
// Image 10: UnityEngine.AudioModule.dll - 2073
// Image 11: UnityEngine.IMGUIModule.dll - 2094
// Image 12: UnityEngine.Physics2DModule.dll - 2121
// Image 13: UnityEngine.PhysicsModule.dll - 2126
// Image 14: UnityEngine.UIModule.dll - 2130
// Image 15: System.Diagnostics.StackTrace.dll - 2140
// Image 16: System.Globalization.Extensions.dll - 2141
// Image 17: UnityEngine.dll - 2142
// Image 18: UnityEngine.UI.dll - 2143
// Image 19: netstandard.dll - 2332
// Image 20: Assembly-CSharp.dll - 2333

// Namespace: 
internal class <Module> // TypeDefIndex: 0
{}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6
internal sealed class <>f__AnonymousType0<<message>j__TPar> // TypeDefIndex: 1
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x536 Offset: 0x536 VA: 0x536
	private readonly <message>j__TPar <message>i__Field; // 0xFFFFFFFF

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0x5C8 Offset: 0x5C8 VA: 0x5C8
	// RVA: -1 Offset: -1
	public void .ctor(<message>j__TPar message) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7DC Offset: 0x7DC VA: 0x7DC
	|-<>f__AnonymousType0<object>..ctor
	|-<>f__AnonymousType0<string>..ctor
	*/

	[DebuggerHiddenAttribute] // RVA: 0x5C9 Offset: 0x5C9 VA: 0x5C9
	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x61C Offset: 0x61C VA: 0x61C
	|-<>f__AnonymousType0<object>.Equals
	*/

	[DebuggerHiddenAttribute] // RVA: 0x5CA Offset: 0x5CA VA: 0x5CA
	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xCFE Offset: 0xCFE VA: 0xCFE
	|-<>f__AnonymousType0<object>.GetHashCode
	*/

	[DebuggerHiddenAttribute] // RVA: 0x5CB Offset: 0x5CB VA: 0x5CB
	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xCFF Offset: 0xCFF VA: 0xCFF
	|-<>f__AnonymousType0<object>.ToString
	*/
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 2
{
	// Methods

	// RVA: 0xFD Offset: 0xFD VA: 0xFD
	public static string GetText(string msg) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: 
internal static class SR // TypeDefIndex: 3
{
	// Methods

	// RVA: 0xA3 Offset: 0xA3 VA: 0xA3
	internal static string Format(string resourceFormat, object p1) { }

	// RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	internal static string Format(string resourceFormat, object p1, object p2) { }
}

// Namespace: Mono
public static class Runtime // TypeDefIndex: 4
{
	// Methods

	// RVA: 0xE4E Offset: 0xE4E VA: 0xE4E
	private static void mono_runtime_install_handlers() { }

	// RVA: 0xE4F Offset: 0xE4F VA: 0xE4F
	public static void InstallSignalHandlers() { }

	// RVA: 0xE50 Offset: 0xE50 VA: 0xE50
	private static void mono_runtime_cleanup_handlers() { }

	// RVA: 0xE51 Offset: 0xE51 VA: 0xE51
	public static void RemoveSignalHandlers() { }

	// RVA: 0x181 Offset: 0x181 VA: 0x181
	public static string GetDisplayName() { }

	// RVA: 0x132 Offset: 0x132 VA: 0x132
	private static string GetNativeStackTrace(Exception exception) { }

	// RVA: 0x133 Offset: 0x133 VA: 0x133
	public static bool SetGCAllowSynchronousMajor(bool flag) { }
}

// Namespace: Mono
internal struct RuntimeClassHandle // TypeDefIndex: 5
{
	// Fields
	private RuntimeStructs.MonoClass* value; // 0x0

	// Properties
	internal RuntimeStructs.MonoClass* Value { get; }

	// Methods

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	internal void .ctor(RuntimeStructs.MonoClass* value) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80
	internal void .ctor(IntPtr ptr) { }

	// RVA: 0x134 Offset: 0x134 VA: 0x134
	internal RuntimeStructs.MonoClass* get_Value() { }

	// RVA: 0x97 Offset: 0x97 VA: 0x97 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x135 Offset: 0x135 VA: 0x135 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x136 Offset: 0x136 VA: 0x136
	internal static IntPtr GetTypeFromClass(RuntimeStructs.MonoClass* klass) { }

	// RVA: 0x137 Offset: 0x137 VA: 0x137
	internal RuntimeTypeHandle GetTypeHandle() { }
}

// Namespace: Mono
internal struct RuntimeRemoteClassHandle // TypeDefIndex: 6
{
	// Fields
	private RuntimeStructs.RemoteClass* value; // 0x0

	// Properties
	internal RuntimeClassHandle ProxyClass { get; }

	// Methods

	// RVA: 0x144 Offset: 0x144 VA: 0x144
	internal RuntimeClassHandle get_ProxyClass() { }
}

// Namespace: Mono
internal struct RuntimeGenericParamInfoHandle // TypeDefIndex: 7
{
	// Fields
	private RuntimeStructs.GenericParamInfo* value; // 0x0

	// Properties
	internal Type[] Constraints { get; }
	internal GenericParameterAttributes Attributes { get; }

	// Methods

	// RVA: 0x83 Offset: 0x83 VA: 0x83
	internal void .ctor(IntPtr ptr) { }

	// RVA: 0x13B Offset: 0x13B VA: 0x13B
	internal Type[] get_Constraints() { }

	// RVA: 0x13C Offset: 0x13C VA: 0x13C
	internal GenericParameterAttributes get_Attributes() { }

	// RVA: 0x13D Offset: 0x13D VA: 0x13D
	private Type[] GetConstraints() { }

	// RVA: 0x13E Offset: 0x13E VA: 0x13E
	private int GetConstraintsCount() { }
}

// Namespace: Mono
internal struct RuntimeEventHandle // TypeDefIndex: 8
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0x81 Offset: 0x81 VA: 0x81
	internal void .ctor(IntPtr v) { }

	// RVA: 0x138 Offset: 0x138 VA: 0x138
	public IntPtr get_Value() { }

	// RVA: 0x98 Offset: 0x98 VA: 0x98 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x139 Offset: 0x139 VA: 0x139 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Mono
internal struct RuntimePropertyHandle // TypeDefIndex: 9
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0x86 Offset: 0x86 VA: 0x86
	internal void .ctor(IntPtr v) { }

	// RVA: 0x142 Offset: 0x142 VA: 0x142
	public IntPtr get_Value() { }

	// RVA: 0x9C Offset: 0x9C VA: 0x9C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x143 Offset: 0x143 VA: 0x143 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Mono
[DefaultMemberAttribute] // RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7
internal struct RuntimeGPtrArrayHandle // TypeDefIndex: 10
{
	// Fields
	private RuntimeStructs.GPtrArray* value; // 0x0

	// Properties
	internal int Length { get; }
	internal IntPtr Item { get; }

	// Methods

	// RVA: 0x82 Offset: 0x82 VA: 0x82
	internal void .ctor(IntPtr ptr) { }

	// RVA: 0x13A Offset: 0x13A VA: 0x13A
	internal int get_Length() { }

	// RVA: 0x99 Offset: 0x99 VA: 0x99
	internal IntPtr get_Item(int i) { }

	// RVA: 0x9A Offset: 0x9A VA: 0x9A
	internal IntPtr Lookup(int i) { }

	// RVA: 0x284 Offset: 0x284 VA: 0x284
	private static void GPtrArrayFree(RuntimeStructs.GPtrArray* value) { }

	// RVA: 0x285 Offset: 0x285 VA: 0x285
	internal static void DestroyAndFree(ref RuntimeGPtrArrayHandle h) { }
}

// Namespace: Mono
internal static class RuntimeMarshal // TypeDefIndex: 11
{
	// Methods

	// RVA: 0x13F Offset: 0x13F VA: 0x13F
	internal static string PtrToUtf8String(IntPtr ptr) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84
	internal static SafeStringMarshal MarshalString(string str) { }

	// RVA: 0x9B Offset: 0x9B VA: 0x9B
	private static int DecodeBlobSize(IntPtr in_ptr, out IntPtr out_ptr) { }

	// RVA: 0x140 Offset: 0x140 VA: 0x140
	internal static byte[] DecodeBlobArray(IntPtr ptr) { }

	// RVA: 0x141 Offset: 0x141 VA: 0x141
	internal static int AsciHexDigitValue(int c) { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85
	internal static void FreeAssemblyName(ref MonoAssemblyName name, bool freeStruct) { }
}

// Namespace: Mono
internal static class RuntimeStructs // TypeDefIndex: 12
{}

// Namespace: 
internal struct RuntimeStructs.RemoteClass // TypeDefIndex: 13
{
	// Fields
	internal IntPtr default_vtable; // 0x0
	internal IntPtr xdomain_vtable; // 0x4
	internal RuntimeStructs.MonoClass* proxy_class; // 0x8
	internal IntPtr proxy_class_name; // 0xC
	internal uint interface_count; // 0x10
}

// Namespace: 
internal struct RuntimeStructs.MonoClass // TypeDefIndex: 14
{}

// Namespace: 
internal struct RuntimeStructs.GenericParamInfo // TypeDefIndex: 15
{
	// Fields
	internal RuntimeStructs.MonoClass* pklass; // 0x0
	internal IntPtr name; // 0x4
	internal ushort flags; // 0x8
	internal uint token; // 0xC
	internal RuntimeStructs.MonoClass** constraints; // 0x10
}

// Namespace: 
internal struct RuntimeStructs.GPtrArray // TypeDefIndex: 16
{
	// Fields
	internal IntPtr* data; // 0x0
	internal int len; // 0x4
}

// Namespace: 
private struct RuntimeStructs.HandleStackMark // TypeDefIndex: 17
{
	// Fields
	private int size; // 0x0
	private int interior_size; // 0x4
	private IntPtr chunk; // 0x8
}

// Namespace: 
private struct RuntimeStructs.MonoError // TypeDefIndex: 18
{
	// Fields
	private ushort error_code; // 0x0
	private ushort hidden_0; // 0x2
	private IntPtr hidden_1; // 0x4
	private IntPtr hidden_2; // 0x8
	private IntPtr hidden_3; // 0xC
	private IntPtr hidden_4; // 0x10
	private IntPtr hidden_5; // 0x14
	private IntPtr hidden_6; // 0x18
	private IntPtr hidden_7; // 0x1C
	private IntPtr hidden_8; // 0x20
	private IntPtr hidden_11; // 0x24
	private IntPtr hidden_12; // 0x28
	private IntPtr hidden_13; // 0x2C
	private IntPtr hidden_14; // 0x30
	private IntPtr hidden_15; // 0x34
	private IntPtr hidden_16; // 0x38
	private IntPtr hidden_17; // 0x3C
	private IntPtr hidden_18; // 0x40
}

// Namespace: Mono
internal struct MonoAssemblyName // TypeDefIndex: 19
{
	// Fields
	internal IntPtr name; // 0x0
	internal IntPtr culture; // 0x4
	internal IntPtr hash_value; // 0x8
	internal IntPtr public_key; // 0xC
	[FixedBufferAttribute] // RVA: 0x537 Offset: 0x537 VA: 0x537
	internal MonoAssemblyName.<public_key_token>e__FixedBuffer public_key_token; // 0x10
	internal uint hash_alg; // 0x24
	internal uint hash_len; // 0x28
	internal uint flags; // 0x2C
	internal ushort major; // 0x30
	internal ushort minor; // 0x32
	internal ushort build; // 0x34
	internal ushort revision; // 0x36
	internal ushort arch; // 0x38
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
[UnsafeValueTypeAttribute] // RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
public struct MonoAssemblyName.<public_key_token>e__FixedBuffer // TypeDefIndex: 20
{
	// Fields
	public byte FixedElementField; // 0x0
}

// Namespace: Mono
[DefaultMemberAttribute] // RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9
internal struct SafeGPtrArrayHandle : IDisposable // TypeDefIndex: 21
{
	// Fields
	private RuntimeGPtrArrayHandle handle; // 0x0

	// Properties
	internal int Length { get; }
	internal IntPtr Item { get; }

	// Methods

	// RVA: 0x87 Offset: 0x87 VA: 0x87
	internal void .ctor(IntPtr ptr) { }

	// RVA: 0x286 Offset: 0x286 VA: 0x286 Slot: 4
	public void Dispose() { }

	// RVA: 0x145 Offset: 0x145 VA: 0x145
	internal int get_Length() { }

	// RVA: 0x9D Offset: 0x9D VA: 0x9D
	internal IntPtr get_Item(int i) { }
}

// Namespace: Mono
internal struct SafeStringMarshal : IDisposable // TypeDefIndex: 22
{
	// Fields
	private readonly string str; // 0x0
	private IntPtr marshaled_string; // 0x4

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0x146 Offset: 0x146 VA: 0x146
	public static IntPtr StringToUtf8(string str) { }

	// RVA: 0x287 Offset: 0x287 VA: 0x287
	public static void GFree(IntPtr ptr) { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88
	public void .ctor(string str) { }

	// RVA: 0x147 Offset: 0x147 VA: 0x147
	public IntPtr get_Value() { }

	// RVA: 0x288 Offset: 0x288 VA: 0x288 Slot: 4
	public void Dispose() { }
}

// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, SmallXmlParser.IContentHandler // TypeDefIndex: 23
{
	// Fields
	private SecurityElement root; // 0x38
	private SecurityElement current; // 0x3C
	private Stack stack; // 0x40

	// Methods

	// RVA: 0x289 Offset: 0x289 VA: 0x289
	public void .ctor() { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89
	public void LoadXml(string xml) { }

	// RVA: 0x14A Offset: 0x14A VA: 0x14A
	public SecurityElement ToXml() { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F Slot: 8
	public void OnProcessingInstruction(string name, string text) { }

	// RVA: 0x8B Offset: 0x8B VA: 0x8B Slot: 10
	public void OnIgnorableWhitespace(string s) { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x8C Offset: 0x8C VA: 0x8C Slot: 7
	public void OnEndElement(string name) { }

	// RVA: 0x8D Offset: 0x8D VA: 0x8D Slot: 9
	public void OnChars(string ch) { }

	// RVA: 0x8E Offset: 0x8E VA: 0x8E Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }
}

// Namespace: Mono.Xml
internal class SmallXmlParser // TypeDefIndex: 24
{
	// Fields
	private SmallXmlParser.IContentHandler handler; // 0x8
	private TextReader reader; // 0xC
	private Stack elementNames; // 0x10
	private Stack xmlSpaces; // 0x14
	private string xmlSpace; // 0x18
	private StringBuilder buffer; // 0x1C
	private char[] nameBuffer; // 0x20
	private bool isWhitespace; // 0x24
	private SmallXmlParser.AttrListImpl attributes; // 0x28
	private int line; // 0x2C
	private int column; // 0x30
	private bool resetColumn; // 0x34

	// Methods

	// RVA: 0x28A Offset: 0x28A VA: 0x28A
	public void .ctor() { }

	// RVA: 0x9E Offset: 0x9E VA: 0x9E
	private Exception Error(string msg) { }

	// RVA: 0x14B Offset: 0x14B VA: 0x14B
	private Exception UnexpectedEndError() { }

	// RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8
	private bool IsNameChar(char c, bool start) { }

	// RVA: 0x9F Offset: 0x9F VA: 0x9F
	private bool IsWhitespace(int c) { }

	// RVA: 0x28B Offset: 0x28B VA: 0x28B
	public void SkipWhitespaces() { }

	// RVA: 0x28C Offset: 0x28C VA: 0x28C
	private void HandleWhitespaces() { }

	// RVA: 0x8F Offset: 0x8F VA: 0x8F
	public void SkipWhitespaces(bool expected) { }

	// RVA: 0x14C Offset: 0x14C VA: 0x14C
	private int Peek() { }

	// RVA: 0x14D Offset: 0x14D VA: 0x14D
	private int Read() { }

	// RVA: 0x90 Offset: 0x90 VA: 0x90
	public void Expect(int c) { }

	// RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9
	private string ReadUntil(char until, bool handleReferences) { }

	// RVA: 0x14E Offset: 0x14E VA: 0x14E
	public string ReadName() { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51
	public void Parse(TextReader input, SmallXmlParser.IContentHandler handler) { }

	// RVA: 0x28D Offset: 0x28D VA: 0x28D
	private void Cleanup() { }

	// RVA: 0x28E Offset: 0x28E VA: 0x28E
	public void ReadContent() { }

	// RVA: 0x28F Offset: 0x28F VA: 0x28F
	private void HandleBufferedContent() { }

	// RVA: 0x290 Offset: 0x290 VA: 0x290
	private void ReadCharacters() { }

	// RVA: 0x291 Offset: 0x291 VA: 0x291
	private void ReadReference() { }

	// RVA: 0x14F Offset: 0x14F VA: 0x14F
	private int ReadCharacterReference() { }

	// RVA: 0x91 Offset: 0x91 VA: 0x91
	private void ReadAttribute(SmallXmlParser.AttrListImpl a) { }

	// RVA: 0x292 Offset: 0x292 VA: 0x292
	private void ReadCDATASection() { }

	// RVA: 0x293 Offset: 0x293 VA: 0x293
	private void ReadComment() { }
}

// Namespace: 
public interface SmallXmlParser.IContentHandler // TypeDefIndex: 25
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnStartParsing(SmallXmlParser parser) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnEndParsing(SmallXmlParser parser) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnEndElement(string name) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnProcessingInstruction(string name, string text) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnChars(string text) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void OnIgnorableWhitespace(string text) { }
}

// Namespace: 
public interface SmallXmlParser.IAttrList // TypeDefIndex: 26
{
	// Properties
	public abstract int Length { get; }
	public abstract string[] Names { get; }
	public abstract string[] Values { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Length() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetName(int i) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string GetValue(int i) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract string GetValue(string name) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string[] get_Names() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string[] get_Values() { }
}

// Namespace: 
private class SmallXmlParser.AttrListImpl : SmallXmlParser.IAttrList // TypeDefIndex: 27
{
	// Fields
	private List<string> attrNames; // 0x8
	private List<string> attrValues; // 0xC

	// Properties
	public int Length { get; }
	public string[] Names { get; }
	public string[] Values { get; }

	// Methods

	// RVA: 0x150 Offset: 0x150 VA: 0x150 Slot: 4
	public int get_Length() { }

	// RVA: 0xA0 Offset: 0xA0 VA: 0xA0 Slot: 5
	public string GetName(int i) { }

	// RVA: 0xA1 Offset: 0xA1 VA: 0xA1 Slot: 6
	public string GetValue(int i) { }

	// RVA: 0xA2 Offset: 0xA2 VA: 0xA2 Slot: 7
	public string GetValue(string name) { }

	// RVA: 0x151 Offset: 0x151 VA: 0x151 Slot: 8
	public string[] get_Names() { }

	// RVA: 0x152 Offset: 0x152 VA: 0x152 Slot: 9
	public string[] get_Values() { }

	// RVA: 0x294 Offset: 0x294 VA: 0x294
	internal void Clear() { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52
	internal void Add(string name, string value) { }

	// RVA: 0x295 Offset: 0x295 VA: 0x295
	public void .ctor() { }
}

// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException // TypeDefIndex: 28
{
	// Fields
	private int line; // 0x44
	private int column; // 0x48

	// Methods

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	public void .ctor(string msg, int line, int column) { }
}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 29
{
	// Fields
	private readonly CodePointIndexer.TableRange[] ranges; // 0x8
	public readonly int TotalCount; // 0xC
	private int defaultIndex; // 0x10
	private int defaultCP; // 0x14

	// Methods

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public void .ctor(int[] starts, int[] ends, int defaultIndex, int defaultCP) { }

	// RVA: 0x8D Offset: 0x8D VA: 0x8D
	public int ToIndex(int cp) { }
}

// Namespace: 
[Serializable]
internal struct CodePointIndexer.TableRange // TypeDefIndex: 30
{
	// Fields
	public readonly int Start; // 0x0
	public readonly int End; // 0x4
	public readonly int Count; // 0x8
	public readonly int IndexStart; // 0xC
	public readonly int IndexEnd; // 0x10

	// Methods

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public void .ctor(int start, int end, int indexStart) { }
}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 31
{
	// Fields
	public readonly int LCID; // 0x8
	public readonly int TailoringIndex; // 0xC
	public readonly int TailoringCount; // 0x10
	public readonly bool FrenchSort; // 0x14

	// Methods

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	public void .ctor(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 32
{
	// Fields
	public int Index; // 0x8
	public readonly char[] Source; // 0xC
	public readonly string Replacement; // 0x10
	public readonly byte[] SortKey; // 0x14

	// Methods

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	public void .ctor(int index, char[] source, string replacement, byte[] sortkey) { }
}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer<Contraction> // TypeDefIndex: 33
{
	// Fields
	public static readonly ContractionComparer Instance; // 0xFFFFFFFF

	// Methods

	// RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2 Slot: 4
	public int Compare(Contraction c1, Contraction c2) { }

	// RVA: 0x281 Offset: 0x281 VA: 0x281
	public void .ctor() { }

	// RVA: 0xE48 Offset: 0xE48 VA: 0xE48
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 34
{
	// Fields
	public byte Source; // 0x8
	public byte Replace; // 0x9

	// Methods

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	public void .ctor(byte source, byte replace) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 35
{
	// Fields
	public static int MaxExpansionLength; // 0x0
	private static readonly byte* ignorableFlags; // 0x4
	private static readonly byte* categories; // 0x8
	private static readonly byte* level1; // 0xC
	private static readonly byte* level2; // 0x10
	private static readonly byte* level3; // 0x14
	private static byte* cjkCHScategory; // 0x18
	private static byte* cjkCHTcategory; // 0x1C
	private static byte* cjkJAcategory; // 0x20
	private static byte* cjkKOcategory; // 0x24
	private static byte* cjkCHSlv1; // 0x28
	private static byte* cjkCHTlv1; // 0x2C
	private static byte* cjkJAlv1; // 0x30
	private static byte* cjkKOlv1; // 0x34
	private static byte* cjkKOlv2; // 0x38
	private static readonly char[] tailoringArr; // 0x3C
	private static readonly TailoringInfo[] tailoringInfos; // 0x40
	private static object forLock; // 0x44
	public static readonly bool isReady; // 0x48

	// Properties
	public static bool IsReady { get; }

	// Methods

	// RVA: 0x120 Offset: 0x120 VA: 0x120
	public static TailoringInfo GetTailoringInfo(int lcid) { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private static void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x121 Offset: 0x121 VA: 0x121
	public static byte Category(int cp) { }

	// RVA: 0x122 Offset: 0x122 VA: 0x122
	public static byte Level1(int cp) { }

	// RVA: 0x123 Offset: 0x123 VA: 0x123
	public static byte Level2(int cp) { }

	// RVA: 0x124 Offset: 0x124 VA: 0x124
	public static byte Level3(int cp) { }

	// RVA: 0x8E Offset: 0x8E VA: 0x8E
	public static bool IsIgnorable(int cp, byte flag) { }

	// RVA: 0x125 Offset: 0x125 VA: 0x125
	public static bool IsIgnorableNonSpacing(int cp) { }

	// RVA: 0x126 Offset: 0x126 VA: 0x126
	public static int ToKanaTypeInsensitive(int i) { }

	// RVA: 0x127 Offset: 0x127 VA: 0x127
	public static int ToWidthCompat(int i) { }

	// RVA: 0x128 Offset: 0x128 VA: 0x128
	public static bool HasSpecialWeight(char c) { }

	// RVA: 0x129 Offset: 0x129 VA: 0x129
	public static bool IsHalfWidthKana(char c) { }

	// RVA: 0x12A Offset: 0x12A VA: 0x12A
	public static bool IsHiragana(char c) { }

	// RVA: 0x12B Offset: 0x12B VA: 0x12B
	public static bool IsJapaneseSmallLetter(char c) { }

	// RVA: 0x180 Offset: 0x180 VA: 0x180
	public static bool get_IsReady() { }

	// RVA: 0x12C Offset: 0x12C VA: 0x12C
	private static IntPtr GetResource(string name) { }

	// RVA: 0x8F Offset: 0x8F VA: 0x8F
	private static uint UInt32FromBytePtr(byte* raw, uint idx) { }

	// RVA: 0xE49 Offset: 0xE49 VA: 0xE49
	private static void .cctor() { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	private static void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x2AA Offset: 0x2AA VA: 0x2AA
[Serializable]
private sealed class MSCompatUnicodeTable.<>c // TypeDefIndex: 36
{
	// Fields
	public static readonly MSCompatUnicodeTable.<>c <>9; // 0x0
	public static Comparison<Level2Map> <>9__17_0; // 0x4

	// Methods

	// RVA: 0xE4A Offset: 0xE4A VA: 0xE4A
	private static void .cctor() { }

	// RVA: 0x282 Offset: 0x282 VA: 0x282
	public void .ctor() { }

	// RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3
	internal int <BuildTailoringTables>b__17_0(Level2Map a, Level2Map b) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 37
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x4
	public static readonly CodePointIndexer Level1; // 0x8
	public static readonly CodePointIndexer Level2; // 0xC
	public static readonly CodePointIndexer Level3; // 0x10
	public static readonly CodePointIndexer CjkCHS; // 0x14
	public static readonly CodePointIndexer Cjk; // 0x18

	// Methods

	// RVA: 0xE4B Offset: 0xE4B VA: 0xE4B
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class NormalizationTableUtil // TypeDefIndex: 38
{
	// Fields
	public static readonly CodePointIndexer Prop; // 0x0
	public static readonly CodePointIndexer Map; // 0x4
	public static readonly CodePointIndexer Combining; // 0x8
	public static readonly CodePointIndexer Composite; // 0xC
	public static readonly CodePointIndexer Helper; // 0x10

	// Methods

	// RVA: 0xE4C Offset: 0xE4C VA: 0xE4C
	private static void .cctor() { }

	// RVA: 0x12D Offset: 0x12D VA: 0x12D
	public static int PropIdx(int cp) { }

	// RVA: 0x12E Offset: 0x12E VA: 0x12E
	public static int MapIdx(int cp) { }
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 39
{
	// Fields
	private static bool QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x4
	private readonly TextInfo textInfo; // 0x8
	private readonly CodePointIndexer cjkIndexer; // 0xC
	private readonly Contraction[] contractions; // 0x10
	private readonly Level2Map[] level2Maps; // 0x14
	private readonly byte[] unsafeFlags; // 0x18
	private readonly byte* cjkCatTable; // 0x1C
	private readonly byte* cjkLv1Table; // 0x20
	private readonly byte* cjkLv2Table; // 0x24
	private readonly CodePointIndexer cjkLv2Indexer; // 0x28
	private readonly int lcid; // 0x2C
	private readonly bool frenchSort; // 0x30

	// Methods

	// RVA: 0x7C Offset: 0x7C VA: 0x7C
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	private void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x12F Offset: 0x12F VA: 0x12F
	private static CultureInfo GetNeutralCulture(CultureInfo info) { }

	// RVA: 0x90 Offset: 0x90 VA: 0x90
	private byte Category(int cp) { }

	// RVA: 0x91 Offset: 0x91 VA: 0x91
	private byte Level1(int cp) { }

	// RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4
	private byte Level2(int cp, SimpleCollator.ExtenderType ext) { }

	// RVA: 0x92 Offset: 0x92 VA: 0x92
	private static bool IsHalfKana(int cp, CompareOptions opt) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	private Contraction GetContraction(string s, int start, int end) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	private Contraction GetTailContraction(string s, int start, int end) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5
	private int FilterOptions(int i, CompareOptions opt) { }

	// RVA: 0x93 Offset: 0x93 VA: 0x93
	private SimpleCollator.ExtenderType GetExtenderType(int i) { }

	// RVA: 0x94 Offset: 0x94 VA: 0x94
	private static byte ToDashTypeValue(SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	private int FilterExtender(int i, SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x95 Offset: 0x95 VA: 0x95
	private static bool IsIgnorable(int i, CompareOptions opt) { }

	// RVA: 0x96 Offset: 0x96 VA: 0x96
	private bool IsSafe(int i) { }

	// RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6
	public SortKey GetSortKey(string s, CompareOptions options) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	private void FillSortKeyRaw(int i, SimpleCollator.ExtenderType ext, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	internal int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options) { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A
	private void ClearBuffer(byte* buffer, int size) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref SimpleCollator.Context ctx) { }

	// RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7
	private int CompareFlagPair(bool b1, bool b2) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	public bool IsPrefix(string src, string target, CompareOptions opt) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref SimpleCollator.Context ctx) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	public bool IsSuffix(string src, string target, CompareOptions opt) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	private int IndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	private int IndexOfOrdinal(string s, char target, int start, int length) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	private int LastIndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	private int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	private bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	private bool MatchesPrimitive(CompareOptions opt, byte* source, int si, SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }

	// RVA: 0xE4D Offset: 0xE4D VA: 0xE4D
	private static void .cctor() { }
}

// Namespace: 
internal struct SimpleCollator.Context // TypeDefIndex: 40
{
	// Fields
	public readonly CompareOptions Option; // 0x0
	public readonly byte* NeverMatchFlags; // 0x4
	public readonly byte* AlwaysMatchFlags; // 0x8
	public byte* Buffer1; // 0xC
	public byte* Buffer2; // 0x10
	public int PrevCode; // 0x14
	public byte* PrevSortKey; // 0x18

	// Methods

	// RVA: 0xA Offset: 0xA VA: 0xA
	public void .ctor(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1) { }
}

// Namespace: 
private struct SimpleCollator.PreviousInfo // TypeDefIndex: 41
{
	// Fields
	public int Code; // 0x0
	public byte* SortKey; // 0x4

	// Methods

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	public void .ctor(bool dummy) { }
}

// Namespace: 
private struct SimpleCollator.Escape // TypeDefIndex: 42
{
	// Fields
	public string Source; // 0x0
	public int Index; // 0x4
	public int Start; // 0x8
	public int End; // 0xC
	public int Optional; // 0x10
}

// Namespace: 
private enum SimpleCollator.ExtenderType // TypeDefIndex: 43
{
	// Fields
	public int value__; // 0x0
	public const SimpleCollator.ExtenderType None = 0;
	public const SimpleCollator.ExtenderType Simple = 1;
	public const SimpleCollator.ExtenderType Voiced = 2;
	public const SimpleCollator.ExtenderType Conditional = 3;
	public const SimpleCollator.ExtenderType Buggy = 4;
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 44
{
	// Fields
	private byte[] l1b; // 0x8
	private byte[] l2b; // 0xC
	private byte[] l3b; // 0x10
	private byte[] l4sb; // 0x14
	private byte[] l4tb; // 0x18
	private byte[] l4kb; // 0x1C
	private byte[] l4wb; // 0x20
	private byte[] l5b; // 0x24
	private string source; // 0x28
	private int l1; // 0x2C
	private int l2; // 0x30
	private int l3; // 0x34
	private int l4s; // 0x38
	private int l4t; // 0x3C
	private int l4k; // 0x40
	private int l4w; // 0x44
	private int l5; // 0x48
	private int lcid; // 0x4C
	private CompareOptions options; // 0x50
	private bool processLevel2; // 0x54
	private bool frenchSort; // 0x55
	private bool frenchSorted; // 0x56

	// Methods

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	public void .ctor(int lcid) { }

	// RVA: 0x283 Offset: 0x283 VA: 0x283
	public void Reset() { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort) { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3) { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C
	private void AppendLevel5(byte category, byte lv1) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx) { }

	// RVA: 0x130 Offset: 0x130 VA: 0x130
	public SortKey GetResultAndReset() { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue) { }

	// RVA: 0x131 Offset: 0x131 VA: 0x131
	public SortKey GetResult() { }
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 45
{
	// Methods

	// RVA: 0x148 Offset: 0x148 VA: 0x148
	private static byte[] GetUIntBytes(byte* bytes) { }

	// RVA: 0x149 Offset: 0x149 VA: 0x149
	private static byte[] GetULongBytes(byte* bytes) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static byte[] GetBytes(float value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static byte[] GetBytes(double value) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	private static void UIntFromBytes(byte* dst, byte[] src, int startIndex) { }

	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	private static void ULongFromBytes(byte* dst, byte[] src, int startIndex) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static float ToSingle(byte[] value, int startIndex) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static double ToDouble(byte[] value, int startIndex) { }
}

// Namespace: Microsoft.Reflection
[ExtensionAttribute] // RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
internal static class ReflectionExtensions // TypeDefIndex: 46
{
	// Methods

	[ExtensionAttribute] // RVA: 0x5CC Offset: 0x5CC VA: 0x5CC
	// RVA: 0xFE Offset: 0xFE VA: 0xFE
	public static bool IsEnum(Type type) { }

	[ExtensionAttribute] // RVA: 0x5CD Offset: 0x5CD VA: 0x5CD
	// RVA: 0xFF Offset: 0xFF VA: 0xFF
	public static bool IsAbstract(Type type) { }

	[ExtensionAttribute] // RVA: 0x5CE Offset: 0x5CE VA: 0x5CE
	// RVA: 0x100 Offset: 0x100 VA: 0x100
	public static bool IsSealed(Type type) { }

	[ExtensionAttribute] // RVA: 0x5CF Offset: 0x5CF VA: 0x5CF
	// RVA: 0x101 Offset: 0x101 VA: 0x101
	public static Type BaseType(Type type) { }

	[ExtensionAttribute] // RVA: 0x5D0 Offset: 0x5D0 VA: 0x5D0
	// RVA: 0x102 Offset: 0x102 VA: 0x102
	public static Assembly Assembly(Type type) { }

	[ExtensionAttribute] // RVA: 0x5D1 Offset: 0x5D1 VA: 0x5D1
	// RVA: 0x103 Offset: 0x103 VA: 0x103
	public static TypeCode GetTypeCode(Type type) { }

	[ExtensionAttribute] // RVA: 0x5D2 Offset: 0x5D2 VA: 0x5D2
	// RVA: 0x104 Offset: 0x104 VA: 0x104
	public static bool ReflectionOnly(Assembly assm) { }
}

// Namespace: Microsoft.Win32
internal static class UnsafeNativeMethods // TypeDefIndex: 47
{}

// Namespace: 
internal static class UnsafeNativeMethods.ManifestEtw // TypeDefIndex: 48
{
	// Methods

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	internal static extern uint EventRegister(in Guid providerId, [In] UnsafeNativeMethods.ManifestEtw.EtwEnableCallback enableCallback, [In] void* callbackContext, ref long registrationHandle) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static extern uint EventUnregister([In] long registrationHandle) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static int EventWriteTransferWrapper(long registrationHandle, ref EventDescriptor eventDescriptor, Guid* activityId, Guid* relatedActivityId, int userDataCount, EventProvider.EventData* userData) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static extern int EventWriteTransfer([In] long registrationHandle, in EventDescriptor eventDescriptor, [In] Guid* activityId, [In] Guid* relatedActivityId, [In] int userDataCount, [In] EventProvider.EventData* userData) { }

	// RVA: 0x87 Offset: 0x87 VA: 0x87
	internal static extern int EventActivityIdControl([In] UnsafeNativeMethods.ManifestEtw.ActivityControl ControlCode, ref Guid ActivityId) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static extern int EventSetInformation([In] long registrationHandle, [In] UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS informationClass, [In] void* eventInformation, [In] int informationLength) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	internal static extern int EnumerateTraceGuidsEx(UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS TraceQueryInfoClass, void* InBuffer, int InBufferSize, void* OutBuffer, int OutBufferSize, ref int ReturnLength) { }
}

// Namespace: 
internal sealed class UnsafeNativeMethods.ManifestEtw.EtwEnableCallback : MulticastDelegate // TypeDefIndex: 49
{
	// Methods

	// RVA: 0x46 Offset: 0x46 VA: 0x46
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 12
	public virtual void Invoke(in Guid sourceId, [In] int isEnabled, [In] byte level, [In] long matchAnyKeywords, [In] long matchAllKeywords, [In] UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData, [In] void* callbackContext) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 13
	public virtual IAsyncResult BeginInvoke(in Guid sourceId, [In] int isEnabled, [In] byte level, [In] long matchAnyKeywords, [In] long matchAllKeywords, [In] UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData, [In] void* callbackContext, AsyncCallback callback, object object) { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47 Slot: 14
	public virtual void EndInvoke(in Guid sourceId, IAsyncResult result) { }
}

// Namespace: 
internal struct UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR // TypeDefIndex: 50
{
	// Fields
	public long Ptr; // 0x0
	public int Size; // 0x8
	public int Type; // 0xC
}

// Namespace: 
internal enum UnsafeNativeMethods.ManifestEtw.ActivityControl // TypeDefIndex: 51
{
	// Fields
	public uint value__; // 0x0
	public const UnsafeNativeMethods.ManifestEtw.ActivityControl EVENT_ACTIVITY_CTRL_GET_ID = 1;
	public const UnsafeNativeMethods.ManifestEtw.ActivityControl EVENT_ACTIVITY_CTRL_SET_ID = 2;
	public const UnsafeNativeMethods.ManifestEtw.ActivityControl EVENT_ACTIVITY_CTRL_CREATE_ID = 3;
	public const UnsafeNativeMethods.ManifestEtw.ActivityControl EVENT_ACTIVITY_CTRL_GET_SET_ID = 4;
	public const UnsafeNativeMethods.ManifestEtw.ActivityControl EVENT_ACTIVITY_CTRL_CREATE_SET_ID = 5;
}

// Namespace: 
internal enum UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS // TypeDefIndex: 52
{
	// Fields
	public int value__; // 0x0
	public const UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS BinaryTrackInfo = 0;
	public const UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS SetEnableAllKeywords = 1;
	public const UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS SetTraits = 2;
}

// Namespace: 
internal enum UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS // TypeDefIndex: 53
{
	// Fields
	public int value__; // 0x0
	public const UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS TraceGuidQueryList = 0;
	public const UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS TraceGuidQueryInfo = 1;
	public const UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS TraceGuidQueryProcess = 2;
	public const UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS TraceStackTracingInfo = 3;
	public const UnsafeNativeMethods.ManifestEtw.TRACE_QUERY_INFO_CLASS MaxTraceSetInfoClass = 4;
}

// Namespace: 
internal struct UnsafeNativeMethods.ManifestEtw.TRACE_GUID_INFO // TypeDefIndex: 54
{
	// Fields
	public int InstanceCount; // 0x0
	public int Reserved; // 0x4
}

// Namespace: 
internal struct UnsafeNativeMethods.ManifestEtw.TRACE_PROVIDER_INSTANCE_INFO // TypeDefIndex: 55
{
	// Fields
	public int NextOffset; // 0x0
	public int EnableCount; // 0x4
	public int Pid; // 0x8
	public int Flags; // 0xC
}

// Namespace: 
internal struct UnsafeNativeMethods.ManifestEtw.TRACE_ENABLE_INFO // TypeDefIndex: 56
{
	// Fields
	public int IsEnabled; // 0x0
	public byte Level; // 0x4
	public byte Reserved1; // 0x5
	public ushort LoggerId; // 0x6
	public int EnableProperty; // 0x8
	public int Reserved2; // 0xC
	public long MatchAnyKeyword; // 0x10
	public long MatchAllKeyword; // 0x18
}

// Namespace: Microsoft.Win32
internal interface IRegistryApi // TypeDefIndex: 57
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Flush(RegistryKey rkey) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Close(RegistryKey rkey) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string[] GetSubKeyNames(RegistryKey rkey) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string ToString(RegistryKey rkey) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IntPtr GetHandle(RegistryKey key) { }
}

// Namespace: Microsoft.Win32
[ComVisibleAttribute] // RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
public static class Registry // TypeDefIndex: 58
{
	// Fields
	public static readonly RegistryKey ClassesRoot; // 0x0
	public static readonly RegistryKey CurrentConfig; // 0x4
	public static readonly RegistryKey CurrentUser; // 0x8
	[ObsoleteAttribute] // RVA: 0x538 Offset: 0x538 VA: 0x538
	public static readonly RegistryKey DynData; // 0xC
	public static readonly RegistryKey LocalMachine; // 0x10
	public static readonly RegistryKey PerformanceData; // 0x14
	public static readonly RegistryKey Users; // 0x18

	// Methods

	// RVA: 0xE46 Offset: 0xE46 VA: 0xE46
	private static void .cctor() { }
}

// Namespace: Microsoft.Win32
[ComVisibleAttribute] // RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
[Serializable]
public enum RegistryHive // TypeDefIndex: 59
{
	// Fields
	public int value__; // 0x0
	public const RegistryHive ClassesRoot = -2147483648;
	public const RegistryHive CurrentConfig = -2147483643;
	public const RegistryHive CurrentUser = -2147483647;
	public const RegistryHive DynData = -2147483642;
	public const RegistryHive LocalMachine = -2147483646;
	public const RegistryHive PerformanceData = -2147483644;
	public const RegistryHive Users = -2147483645;
}

// Namespace: Microsoft.Win32
[ComVisibleAttribute] // RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 60
{
	// Fields
	private object handle; // 0xC
	private SafeRegistryHandle safe_handle; // 0x10
	private object hive; // 0x14
	private readonly string qname; // 0x18
	private readonly bool isRemoteRoot; // 0x1C
	private readonly bool isWritable; // 0x1D
	private static readonly IRegistryApi RegistryApi; // 0x0

	// Properties
	public string Name { get; }
	[ComVisibleAttribute] // RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9
	[MonoTODOAttribute] // RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9
	public SafeRegistryHandle Handle { get; }
	internal bool IsRoot { get; }
	internal RegistryHive Hive { get; }
	internal object InternalHandle { get; }

	// Methods

	// RVA: 0xE47 Offset: 0xE47 VA: 0xE47
	private static void .cctor() { }

	// RVA: 0x73 Offset: 0x73 VA: 0x73
	internal void .ctor(RegistryHive hiveId) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	internal void .ctor(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	internal void .ctor(object data, string keyName, bool writable) { }

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	internal static bool IsEquals(RegistryKey a, RegistryKey b) { }

	// RVA: 0x279 Offset: 0x279 VA: 0x279 Slot: 6
	public void Dispose() { }

	// RVA: 0x10C Offset: 0x10C VA: 0x10C
	public string get_Name() { }

	// RVA: 0x27A Offset: 0x27A VA: 0x27A
	public void Flush() { }

	// RVA: 0x27B Offset: 0x27B VA: 0x27B
	public void Close() { }

	// RVA: 0x10D Offset: 0x10D VA: 0x10D
	public SafeRegistryHandle get_Handle() { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80
	public RegistryKey OpenSubKey(string name) { }

	// RVA: 0x7EF Offset: 0x7EF VA: 0x7EF
	public RegistryKey OpenSubKey(string name, bool writable) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81
	public object GetValue(string name) { }

	// RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0
	public object GetValue(string name, object defaultValue) { }

	// RVA: 0x10E Offset: 0x10E VA: 0x10E
	public string[] GetSubKeyNames() { }

	// RVA: 0x10F Offset: 0x10F VA: 0x10F Slot: 3
	public override string ToString() { }

	// RVA: 0x110 Offset: 0x110 VA: 0x110
	internal bool get_IsRoot() { }

	// RVA: 0x111 Offset: 0x111 VA: 0x111
	internal RegistryHive get_Hive() { }

	// RVA: 0x112 Offset: 0x112 VA: 0x112
	internal object get_InternalHandle() { }

	// RVA: 0x27C Offset: 0x27C VA: 0x27C
	private void AssertKeyStillValid() { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	private void AssertKeyNameLength(string name) { }

	// RVA: 0x113 Offset: 0x113 VA: 0x113
	internal static string DecodeString(byte[] data) { }

	// RVA: 0x17E Offset: 0x17E VA: 0x17E
	internal static IOException CreateMarkedForDeletionException() { }

	// RVA: 0x114 Offset: 0x114 VA: 0x114
	private static string GetHiveName(RegistryHive hive) { }
}

// Namespace: Microsoft.Win32
[ComVisibleAttribute] // RVA: 0x2AF Offset: 0x2AF VA: 0x2AF
public enum RegistryValueKind // TypeDefIndex: 61
{
	// Fields
	public int value__; // 0x0
	public const RegistryValueKind Unknown = 0;
	public const RegistryValueKind String = 1;
	public const RegistryValueKind ExpandString = 2;
	public const RegistryValueKind Binary = 3;
	public const RegistryValueKind DWord = 4;
	public const RegistryValueKind MultiString = 7;
	public const RegistryValueKind QWord = 11;
	public const RegistryValueKind None = -1;
}

// Namespace: Microsoft.Win32
[FlagsAttribute] // RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
public enum RegistryValueOptions // TypeDefIndex: 62
{
	// Fields
	public int value__; // 0x0
	public const RegistryValueOptions None = 0;
	public const RegistryValueOptions DoNotExpandEnvironmentNames = 1;
}

// Namespace: Microsoft.Win32
internal class ExpandString // TypeDefIndex: 63
{
	// Fields
	private string value; // 0x8

	// Methods

	// RVA: 0x71 Offset: 0x71 VA: 0x71
	public void .ctor(string s) { }

	// RVA: 0x105 Offset: 0x105 VA: 0x105 Slot: 3
	public override string ToString() { }

	// RVA: 0x106 Offset: 0x106 VA: 0x106
	public string Expand() { }
}

// Namespace: Microsoft.Win32
internal class RegistryKeyComparer : IEqualityComparer // TypeDefIndex: 64
{
	// Methods

	// RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1 Slot: 4
	public bool Equals(object x, object y) { }

	// RVA: 0x82 Offset: 0x82 VA: 0x82 Slot: 5
	public int GetHashCode(object obj) { }

	// RVA: 0x27D Offset: 0x27D VA: 0x27D
	public void .ctor() { }
}

// Namespace: Microsoft.Win32
internal class KeyHandler // TypeDefIndex: 65
{
	// Fields
	private static Hashtable key_to_handler; // 0x0
	private static Hashtable dir_to_handler; // 0x4
	public string Dir; // 0x8
	private string ActualDir; // 0xC
	public bool IsVolatile; // 0x10
	private Hashtable values; // 0x14
	private string file; // 0x18
	private bool dirty; // 0x1C
	private static string user_store; // 0x8
	private static string machine_store; // 0xC

	// Properties
	public bool IsMarkedForDeletion { get; }
	private static string UserStore { get; }
	private static string MachineStore { get; }

	// Methods

	// RVA: 0xE44 Offset: 0xE44 VA: 0xE44
	private static void .cctor() { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42
	private void .ctor(RegistryKey rkey, string basedir) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	private void .ctor(RegistryKey rkey, string basedir, bool is_volatile) { }

	// RVA: 0x274 Offset: 0x274 VA: 0x274
	public void Load() { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72
	private void LoadKey(SecurityElement se) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable, bool is_volatile) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	public RegistryKey Probe(RegistryKey rkey, string extra, bool writable) { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C
	private static string CombineName(RegistryKey rkey, string extra) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	private static long GetSystemBootTime() { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	private static long GetRegisteredBootTime(string path) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static void SaveRegisteredBootTime(string path, long btime) { }

	// RVA: 0xE45 Offset: 0xE45 VA: 0xE45
	private static void CleanVolatileKeys() { }

	// RVA: 0x107 Offset: 0x107 VA: 0x107
	public static bool VolatileKeyExists(string dir) { }

	// RVA: 0x108 Offset: 0x108 VA: 0x108
	public static string GetVolatileDir(string dir) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting) { }

	// RVA: 0x109 Offset: 0x109 VA: 0x109
	private static string GetRootFromDir(string dir) { }

	// RVA: 0x275 Offset: 0x275 VA: 0x275
	public static void Drop(RegistryKey rkey) { }

	// RVA: 0x7EE Offset: 0x7EE VA: 0x7EE
	public object GetValue(string name, RegistryValueOptions options) { }

	// RVA: 0x10A Offset: 0x10A VA: 0x10A
	public string[] GetSubKeyNames() { }

	// RVA: 0x276 Offset: 0x276 VA: 0x276
	public void Flush() { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	public bool ValueExists(string name) { }

	// RVA: 0x10B Offset: 0x10B VA: 0x10B
	public bool get_IsMarkedForDeletion() { }

	// RVA: 0x277 Offset: 0x277 VA: 0x277 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x278 Offset: 0x278 VA: 0x278
	private void Save() { }

	// RVA: 0x17C Offset: 0x17C VA: 0x17C
	private static string get_UserStore() { }

	// RVA: 0x17D Offset: 0x17D VA: 0x17D
	private static string get_MachineStore() { }
}

// Namespace: Microsoft.Win32
internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 66
{
	// Methods

	// RVA: 0x11A Offset: 0x11A VA: 0x11A
	private static string ToUnix(string keyname) { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83
	private static bool IsWellKnownKey(string parentKeyName, string keyname) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26 Slot: 4
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable) { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77 Slot: 5
	public void Flush(RegistryKey rkey) { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78 Slot: 6
	public void Close(RegistryKey rkey) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9 Slot: 7
	public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84 Slot: 8
	public string[] GetSubKeyNames(RegistryKey rkey) { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85 Slot: 9
	public string ToString(RegistryKey rkey) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable, bool is_volatile) { }

	// RVA: 0x86 Offset: 0x86 VA: 0x86 Slot: 10
	public IntPtr GetHandle(RegistryKey key) { }

	// RVA: 0x27E Offset: 0x27E VA: 0x27E
	public void .ctor() { }
}

// Namespace: Microsoft.Win32
internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 67
{
	// Fields
	private readonly int NativeBytesPerCharacter; // 0x8

	// Methods

	// RVA: 0x11D Offset: 0x11D VA: 0x11D
	private static extern int RegCloseKey(IntPtr keyHandle) { }

	// RVA: 0x11E Offset: 0x11E VA: 0x11E
	private static extern int RegFlushKey(IntPtr keyHandle) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	internal static extern int RegEnumKeyEx(IntPtr keyHandle, int dwIndex, char* lpName, ref int lpcbName, int[] lpReserved, [Out] StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, IntPtr zero, ref int dataSize) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, [Out] byte[] data, ref int dataSize) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref int data, ref int dataSize) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref long data, ref int dataSize) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static extern int RegQueryInfoKey(IntPtr hKey, [Out] StringBuilder lpClass, int[] lpcbClass, IntPtr lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime) { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88 Slot: 10
	public IntPtr GetHandle(RegistryKey key) { }

	// RVA: 0x11F Offset: 0x11F VA: 0x11F
	private static bool IsHandleValid(RegistryKey key) { }

	// RVA: 0xC Offset: 0xC VA: 0xC Slot: 7
	public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size) { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89 Slot: 11
	public int SubKeyCount(RegistryKey rkey) { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29 Slot: 4
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable) { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79 Slot: 5
	public void Flush(RegistryKey rkey) { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A Slot: 6
	public void Close(RegistryKey rkey) { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 8
	public string[] GetSubKeyNames(RegistryKey rkey) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	private void GenerateException(int errorCode) { }

	// RVA: 0x8B Offset: 0x8B VA: 0x8B Slot: 9
	public string ToString(RegistryKey rkey) { }

	// RVA: 0x8C Offset: 0x8C VA: 0x8C
	internal static string CombineName(RegistryKey rkey, string localName) { }

	// RVA: 0x280 Offset: 0x280 VA: 0x280
	public void .ctor() { }
}

// Namespace: Microsoft.Win32
internal static class Win32Native // TypeDefIndex: 68
{
	// Methods

	// RVA: 0x11B Offset: 0x11B VA: 0x11B
	public static string GetMessage(int hr) { }

	// RVA: 0x11C Offset: 0x11C VA: 0x11C
	public static int MakeHRFromErrorCode(int errorCode) { }

	// RVA: 0x17F Offset: 0x17F VA: 0x17F
	internal static extern uint GetCurrentProcessId() { }
}

// Namespace: 
internal class Win32Native.WIN32_FIND_DATA // TypeDefIndex: 69
{
	// Fields
	internal int dwFileAttributes; // 0x8
	internal string cFileName; // 0xC

	// Methods

	// RVA: 0x27F Offset: 0x27F VA: 0x27F
	public void .ctor() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 70
{
	// Methods

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	public void .ctor(IntPtr preexistingHandle, bool ownsHandle) { }

	// RVA: 0x115 Offset: 0x115 VA: 0x115 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
internal sealed class SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 71
{
	// Methods

	// RVA: 0x75 Offset: 0x75 VA: 0x75
	internal void .ctor(IntPtr preexistingHandle) { }

	// RVA: 0x116 Offset: 0x116 VA: 0x116 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 72
{
	// Methods

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	public void .ctor(IntPtr preexistingHandle, bool ownsHandle) { }

	// RVA: 0x118 Offset: 0x118 VA: 0x118 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 73
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x5D3 Offset: 0x5D3 VA: 0x5D3
	// RVA: 0x45 Offset: 0x45 VA: 0x45
	public void .ctor(IntPtr existingHandle, bool ownsHandle) { }

	// RVA: 0x119 Offset: 0x119 VA: 0x119 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle // TypeDefIndex: 74
{
	// Properties
	public override bool IsInvalid { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x5D4 Offset: 0x5D4 VA: 0x5D4
	// RVA: 0x76 Offset: 0x76 VA: 0x76
	protected void .ctor(bool ownsHandle) { }

	// RVA: 0x117 Offset: 0x117 VA: 0x117 Slot: 5
	public override bool get_IsInvalid() { }
}

// Namespace: System
internal static class ThrowHelper // TypeDefIndex: 75
{
	// Methods

	// RVA: 0x5DA Offset: 0x5DA VA: 0x5DA
	internal static void ThrowArgumentNullException(ExceptionArgument argument) { }

	// RVA: 0x938 Offset: 0x938 VA: 0x938
	private static Exception CreateArgumentNullException(ExceptionArgument argument) { }

	// RVA: 0xF12 Offset: 0xF12 VA: 0xF12
	internal static void ThrowArgumentOutOfRangeException() { }

	// RVA: 0x464 Offset: 0x464 VA: 0x464
	internal static void ThrowWrongValueTypeArgumentException(object value, Type targetType) { }

	// RVA: 0x5DB Offset: 0x5DB VA: 0x5DB
	internal static void ThrowArgumentException(ExceptionResource resource) { }

	// RVA: 0x465 Offset: 0x465 VA: 0x465
	internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource) { }

	// RVA: 0x5DC Offset: 0x5DC VA: 0x5DC
	internal static void ThrowInvalidOperationException(ExceptionResource resource) { }

	// RVA: 0x5DD Offset: 0x5DD VA: 0x5DD
	internal static void ThrowNotSupportedException(ExceptionResource resource) { }

	// RVA: -1 Offset: -1
	internal static void IfNullAndNullsAreIllegalThenThrow<T>(object value, ExceptionArgument argName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<byte>
	|
	|-RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<EventProvider.SessionInfo>
	|
	|-RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<int>
	|
	|-RVA: 0x7DD Offset: 0x7DD VA: 0x7DD
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<object>
	|
	|-RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<ulong>
	|
	|-RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<Color32>
	|
	|-RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<RaycastResult>
	|
	|-RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<UICharInfo>
	|
	|-RVA: 0x8EA Offset: 0x8EA VA: 0x8EA
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<UILineInfo>
	|
	|-RVA: 0x8EB Offset: 0x8EB VA: 0x8EB
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<UIVertex>
	|
	|-RVA: 0x8EC Offset: 0x8EC VA: 0x8EC
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x8ED Offset: 0x8ED VA: 0x8ED
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<Vector2>
	|
	|-RVA: 0x8EE Offset: 0x8EE VA: 0x8EE
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<Vector3>
	|
	|-RVA: 0x8EF Offset: 0x8EF VA: 0x8EF
	|-ThrowHelper.IfNullAndNullsAreIllegalThenThrow<Vector4>
	*/

	// RVA: 0x939 Offset: 0x939 VA: 0x939
	internal static string GetArgumentName(ExceptionArgument argument) { }

	// RVA: 0x93A Offset: 0x93A VA: 0x93A
	internal static string GetResourceName(ExceptionResource resource) { }
}

// Namespace: System
public abstract class Array : ICollection, IEnumerable, IList, IStructuralComparable, IStructuralEquatable, ICloneable // TypeDefIndex: 76
{
	// Properties
	private int System.Collections.ICollection.Count { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public long LongLength { get; }
	public bool IsFixedSize { get; }
	public bool IsReadOnly { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public int Length { get; }
	public int Rank { get; }

	// Methods

	// RVA: 0xA9 Offset: 0xA9 VA: 0xA9
	public static Array CreateInstance(Type elementType, long[] lengths) { }

	// RVA: -1 Offset: -1
	public static ReadOnlyCollection<T> AsReadOnly<T>(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD00 Offset: 0xD00 VA: 0xD00
	|-Array.AsReadOnly<object>
	|-Array.AsReadOnly<CustomAttributeData>
	|
	|-RVA: 0xDE8 Offset: 0xDE8 VA: 0xDE8
	|-Array.AsReadOnly<CustomAttributeNamedArgument>
	|
	|-RVA: 0xDE6 Offset: 0xDE6 VA: 0xDE6
	|-Array.AsReadOnly<CustomAttributeTypedArgument>
	*/

	// RVA: -1 Offset: -1
	public static void Resize<T>(ref T[] array, int newSize) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x85B Offset: 0x85B VA: 0x85B
	|-Array.Resize<byte>
	|
	|-RVA: 0x86D Offset: 0x86D VA: 0x86D
	|-Array.Resize<char>
	|
	|-RVA: 0x7DE Offset: 0x7DE VA: 0x7DE
	|-Array.Resize<object>
	|-Array.Resize<Camera>
	*/

	// RVA: 0x165 Offset: 0x165 VA: 0x165 Slot: 5
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x166 Offset: 0x166 VA: 0x166 Slot: 14
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0xAA Offset: 0xAA VA: 0xAA Slot: 9
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x69 Offset: 0x69 VA: 0x69 Slot: 10
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0xAB Offset: 0xAB VA: 0xAB Slot: 11
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0xAC Offset: 0xAC VA: 0xAC Slot: 12
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x2A2 Offset: 0x2A2 VA: 0x2A2 Slot: 13
	private void System.Collections.IList.Clear() { }

	// RVA: 0xAD Offset: 0xAD VA: 0xAD Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x6A Offset: 0x6A VA: 0x6A Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0xA2 Offset: 0xA2 VA: 0xA2 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0xA3 Offset: 0xA3 VA: 0xA3 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x6B Offset: 0x6B VA: 0x6B Slot: 4
	public void CopyTo(Array array, int index) { }

	// RVA: 0x167 Offset: 0x167 VA: 0x167 Slot: 23
	public object Clone() { }

	// RVA: 0x7FF Offset: 0x7FF VA: 0x7FF Slot: 20
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }

	// RVA: 0x800 Offset: 0x800 VA: 0x800 Slot: 21
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }

	// RVA: 0xAE Offset: 0xAE VA: 0xAE
	internal static int CombineHashCodes(int h1, int h2) { }

	// RVA: 0xAF Offset: 0xAF VA: 0xAF Slot: 22
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }

	// RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	public static int BinarySearch(Array array, object value) { }

	// RVA: -1 Offset: -1
	public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6C7 Offset: 0x6C7 VA: 0x6C7
	|-Array.ConvertAll<byte, sbyte>
	|
	|-RVA: 0x61D Offset: 0x61D VA: 0x61D
	|-Array.ConvertAll<object, object>
	*/

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static void Copy(Array sourceArray, Array destinationArray, long length) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void CopyTo(Array array, long index) { }

	// RVA: -1 Offset: -1
	public static void ForEach<T>(T[] array, Action<T> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7DF Offset: 0x7DF VA: 0x7DF
	|-Array.ForEach<object>
	*/

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public long get_LongLength() { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public long GetLongLength(int dimension) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public object GetValue(long index) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public object GetValue(long index1, long index2) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public object GetValue(long index1, long index2, long index3) { }

	// RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	public object GetValue(long[] indices) { }

	// RVA: 0x168 Offset: 0x168 VA: 0x168 Slot: 15
	public bool get_IsFixedSize() { }

	// RVA: 0x169 Offset: 0x169 VA: 0x169 Slot: 24
	public bool get_IsReadOnly() { }

	// RVA: 0x16A Offset: 0x16A VA: 0x16A Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x16B Offset: 0x16B VA: 0x16B Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34
	public static int BinarySearch(Array array, int index, int length, object value) { }

	// RVA: 0x801 Offset: 0x801 VA: 0x801
	public static int BinarySearch(Array array, object value, IComparer comparer) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer) { }

	// RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	private static int GetMedian(int low, int hi) { }

	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x61E Offset: 0x61E VA: 0x61E
	|-Array.BinarySearch<object>
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-Array.BinarySearch<ulong>
	*/

	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA37 Offset: 0xA37 VA: 0xA37
	|-Array.BinarySearch<object>
	*/

	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, int index, int length, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x150 Offset: 0x150 VA: 0x150
	|-Array.BinarySearch<object>
	*/

	// RVA: -1 Offset: -1
	public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8E Offset: 0x8E VA: 0x8E
	|-Array.BinarySearch<object>
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-Array.BinarySearch<ulong>
	*/

	// RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	public static int IndexOf(Array array, object value) { }

	// RVA: 0x802 Offset: 0x802 VA: 0x802
	public static int IndexOf(Array array, object value, int startIndex) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	public static int IndexOf(Array array, object value, int startIndex, int count) { }

	// RVA: -1 Offset: -1
	public static int IndexOf<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x61F Offset: 0x61F VA: 0x61F
	|-Array.IndexOf<object>
	|-Array.IndexOf<string>
	*/

	// RVA: -1 Offset: -1
	public static int IndexOf<T>(T[] array, T value, int startIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA38 Offset: 0xA38 VA: 0xA38
	|-Array.IndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static int IndexOf<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x166 Offset: 0x166 VA: 0x166
	|-Array.IndexOf<byte>
	|
	|-RVA: 0x167 Offset: 0x167 VA: 0x167
	|-Array.IndexOf<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x168 Offset: 0x168 VA: 0x168
	|-Array.IndexOf<EventProvider.SessionInfo>
	|
	|-RVA: 0x169 Offset: 0x169 VA: 0x169
	|-Array.IndexOf<int>
	|
	|-RVA: 0x151 Offset: 0x151 VA: 0x151
	|-Array.IndexOf<object>
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-Array.IndexOf<ulong>
	|
	|-RVA: 0x16A Offset: 0x16A VA: 0x16A
	|-Array.IndexOf<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x16B Offset: 0x16B VA: 0x16B
	|-Array.IndexOf<Color32>
	|
	|-RVA: 0x16C Offset: 0x16C VA: 0x16C
	|-Array.IndexOf<RaycastResult>
	|
	|-RVA: 0x16D Offset: 0x16D VA: 0x16D
	|-Array.IndexOf<UICharInfo>
	|
	|-RVA: 0x16E Offset: 0x16E VA: 0x16E
	|-Array.IndexOf<UILineInfo>
	|
	|-RVA: 0x16F Offset: 0x16F VA: 0x16F
	|-Array.IndexOf<UIVertex>
	|
	|-RVA: 0x170 Offset: 0x170 VA: 0x170
	|-Array.IndexOf<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x171 Offset: 0x171 VA: 0x171
	|-Array.IndexOf<Vector2>
	|
	|-RVA: 0x172 Offset: 0x172 VA: 0x172
	|-Array.IndexOf<Vector3>
	|
	|-RVA: 0x173 Offset: 0x173 VA: 0x173
	|-Array.IndexOf<Vector4>
	*/

	// RVA: 0xB4 Offset: 0xB4 VA: 0xB4
	public static int LastIndexOf(Array array, object value) { }

	// RVA: 0x803 Offset: 0x803 VA: 0x803
	public static int LastIndexOf(Array array, object value, int startIndex) { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	public static int LastIndexOf(Array array, object value, int startIndex, int count) { }

	// RVA: -1 Offset: -1
	public static int LastIndexOf<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x620 Offset: 0x620 VA: 0x620
	|-Array.LastIndexOf<Delegate>
	|-Array.LastIndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static int LastIndexOf<T>(T[] array, T value, int startIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA39 Offset: 0xA39 VA: 0xA39
	|-Array.LastIndexOf<object>
	*/

	// RVA: -1 Offset: -1
	public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x152 Offset: 0x152 VA: 0x152
	|-Array.LastIndexOf<object>
	*/

	// RVA: 0x2A3 Offset: 0x2A3 VA: 0x2A3
	public static void Reverse(Array array) { }

	// RVA: 0x6C Offset: 0x6C VA: 0x6C
	public static void Reverse(Array array, int index, int length) { }

	// RVA: -1 Offset: -1
	public static void Reverse<T>(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x932 Offset: 0x932 VA: 0x932
	|-Array.Reverse<byte>
	|
	|-RVA: 0x8BF Offset: 0x8BF VA: 0x8BF
	|-Array.Reverse<object>
	*/

	// RVA: -1 Offset: -1
	public static void Reverse<T>(T[] array, int index, int length) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x454 Offset: 0x454 VA: 0x454
	|-Array.Reverse<byte>
	|
	|-RVA: 0x54E Offset: 0x54E VA: 0x54E
	|-Array.Reverse<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x54F Offset: 0x54F VA: 0x54F
	|-Array.Reverse<EventProvider.SessionInfo>
	|
	|-RVA: 0x550 Offset: 0x550 VA: 0x550
	|-Array.Reverse<int>
	|
	|-RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6
	|-Array.Reverse<object>
	|
	|-RVA: 0x551 Offset: 0x551 VA: 0x551
	|-Array.Reverse<ulong>
	|
	|-RVA: 0x552 Offset: 0x552 VA: 0x552
	|-Array.Reverse<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x553 Offset: 0x553 VA: 0x553
	|-Array.Reverse<Color32>
	|
	|-RVA: 0x554 Offset: 0x554 VA: 0x554
	|-Array.Reverse<RaycastResult>
	|
	|-RVA: 0x555 Offset: 0x555 VA: 0x555
	|-Array.Reverse<UICharInfo>
	|
	|-RVA: 0x556 Offset: 0x556 VA: 0x556
	|-Array.Reverse<UILineInfo>
	|
	|-RVA: 0x557 Offset: 0x557 VA: 0x557
	|-Array.Reverse<UIVertex>
	|
	|-RVA: 0x558 Offset: 0x558 VA: 0x558
	|-Array.Reverse<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x559 Offset: 0x559 VA: 0x559
	|-Array.Reverse<Vector2>
	|
	|-RVA: 0x55A Offset: 0x55A VA: 0x55A
	|-Array.Reverse<Vector3>
	|
	|-RVA: 0x55B Offset: 0x55B VA: 0x55B
	|-Array.Reverse<Vector4>
	*/

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public void SetValue(object value, long index) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void SetValue(object value, long index1, long index2) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void SetValue(object value, long index1, long index2, long index3) { }

	// RVA: 0x6D Offset: 0x6D VA: 0x6D
	public void SetValue(object value, long[] indices) { }

	// RVA: 0x2A4 Offset: 0x2A4 VA: 0x2A4
	public static void Sort(Array array) { }

	// RVA: 0x6E Offset: 0x6E VA: 0x6E
	public static void Sort(Array array, int index, int length) { }

	// RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	public static void Sort(Array array, IComparer comparer) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	public static void Sort(Array array, int index, int length, IComparer comparer) { }

	// RVA: 0xA5 Offset: 0xA5 VA: 0xA5
	public static void Sort(Array keys, Array items) { }

	// RVA: 0x6F Offset: 0x6F VA: 0x6F
	public static void Sort(Array keys, Array items, IComparer comparer) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	public static void Sort(Array keys, Array items, int index, int length) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	public static void Sort(Array keys, Array items, int index, int length, IComparer comparer) { }

	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0
	|-Array.Sort<object>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, int index, int length) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3D7 Offset: 0x3D7 VA: 0x3D7
	|-Array.Sort<object>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E0 Offset: 0x7E0 VA: 0x7E0
	|-Array.Sort<object>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x140 Offset: 0x140 VA: 0x140
	|-Array.Sort<byte>
	|
	|-RVA: 0x141 Offset: 0x141 VA: 0x141
	|-Array.Sort<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x142 Offset: 0x142 VA: 0x142
	|-Array.Sort<EventProvider.SessionInfo>
	|
	|-RVA: 0x143 Offset: 0x143 VA: 0x143
	|-Array.Sort<int>
	|
	|-RVA: 0x11B Offset: 0x11B VA: 0x11B
	|-Array.Sort<object>
	|
	|-RVA: 0x144 Offset: 0x144 VA: 0x144
	|-Array.Sort<ulong>
	|
	|-RVA: 0x145 Offset: 0x145 VA: 0x145
	|-Array.Sort<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x146 Offset: 0x146 VA: 0x146
	|-Array.Sort<Color32>
	|
	|-RVA: 0x147 Offset: 0x147 VA: 0x147
	|-Array.Sort<RaycastResult>
	|
	|-RVA: 0x148 Offset: 0x148 VA: 0x148
	|-Array.Sort<UICharInfo>
	|
	|-RVA: 0x149 Offset: 0x149 VA: 0x149
	|-Array.Sort<UILineInfo>
	|
	|-RVA: 0x14A Offset: 0x14A VA: 0x14A
	|-Array.Sort<UIVertex>
	|
	|-RVA: 0x14B Offset: 0x14B VA: 0x14B
	|-Array.Sort<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x14C Offset: 0x14C VA: 0x14C
	|-Array.Sort<Vector2>
	|
	|-RVA: 0x14D Offset: 0x14D VA: 0x14D
	|-Array.Sort<Vector3>
	|
	|-RVA: 0x14E Offset: 0x14E VA: 0x14E
	|-Array.Sort<Vector4>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<T>(T[] array, Comparison<T> comparison) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x859 Offset: 0x859 VA: 0x859
	|-Array.Sort<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x7E1 Offset: 0x7E1 VA: 0x7E1
	|-Array.Sort<object>
	|
	|-RVA: 0x888 Offset: 0x888 VA: 0x888
	|-Array.Sort<RaycastHit>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E2 Offset: 0x7E2 VA: 0x7E2
	|-Array.Sort<object, object>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11C Offset: 0x11C VA: 0x11C
	|-Array.Sort<object, object>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3D8 Offset: 0x3D8 VA: 0x3D8
	|-Array.Sort<object, object>
	|
	|-RVA: 0x461 Offset: 0x461 VA: 0x461
	|-Array.Sort<ulong, object>
	|-Array.Sort<ulong, string>
	*/

	// RVA: -1 Offset: -1
	public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x86 Offset: 0x86 VA: 0x86
	|-Array.Sort<object, object>
	|
	|-RVA: 0x98 Offset: 0x98 VA: 0x98
	|-Array.Sort<ulong, object>
	*/

	// RVA: -1 Offset: -1
	public static bool Exists<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x621 Offset: 0x621 VA: 0x621
	|-Array.Exists<object>
	*/

	// RVA: -1 Offset: -1
	public static void Fill<T>(T[] array, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E3 Offset: 0x7E3 VA: 0x7E3
	|-Array.Fill<object>
	*/

	// RVA: -1 Offset: -1
	public static void Fill<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11D Offset: 0x11D VA: 0x11D
	|-Array.Fill<object>
	*/

	// RVA: -1 Offset: -1
	public static T Find<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x622 Offset: 0x622 VA: 0x622
	|-Array.Find<object>
	*/

	// RVA: -1 Offset: -1
	public static T[] FindAll<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x623 Offset: 0x623 VA: 0x623
	|-Array.FindAll<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindIndex<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x624 Offset: 0x624 VA: 0x624
	|-Array.FindIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA3A Offset: 0xA3A VA: 0xA3A
	|-Array.FindIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x153 Offset: 0x153 VA: 0x153
	|-Array.FindIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static T FindLast<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x625 Offset: 0x625 VA: 0x625
	|-Array.FindLast<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindLastIndex<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x626 Offset: 0x626 VA: 0x626
	|-Array.FindLastIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA3B Offset: 0xA3B VA: 0xA3B
	|-Array.FindLastIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x154 Offset: 0x154 VA: 0x154
	|-Array.FindLastIndex<object>
	*/

	// RVA: -1 Offset: -1
	public static bool TrueForAll<T>(T[] array, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x627 Offset: 0x627 VA: 0x627
	|-Array.TrueForAll<object>
	*/

	// RVA: 0x16C Offset: 0x16C VA: 0x16C Slot: 8
	public IEnumerator GetEnumerator() { }

	// RVA: 0x2A5 Offset: 0x2A5 VA: 0x2A5
	private void .ctor() { }

	// RVA: 0x16D Offset: 0x16D VA: 0x16D
	internal int InternalArray__ICollection_get_Count() { }

	// RVA: 0x16E Offset: 0x16E VA: 0x16E
	internal bool InternalArray__ICollection_get_IsReadOnly() { }

	// RVA: -1 Offset: -1
	internal IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE11 Offset: 0xE11 VA: 0xE11
	|-Array.InternalArray__IEnumerable_GetEnumerator<CodePointIndexer.TableRange>
	|
	|-RVA: 0xE12 Offset: 0xE12 VA: 0xE12
	|-Array.InternalArray__IEnumerable_GetEnumerator<bool>
	|
	|-RVA: 0xE13 Offset: 0xE13 VA: 0xE13
	|-Array.InternalArray__IEnumerable_GetEnumerator<byte>
	|
	|-RVA: 0xE14 Offset: 0xE14 VA: 0xE14
	|-Array.InternalArray__IEnumerable_GetEnumerator<char>
	|
	|-RVA: 0xE15 Offset: 0xE15 VA: 0xE15
	|-Array.InternalArray__IEnumerable_GetEnumerator<DictionaryEntry>
	|
	|-RVA: 0xE16 Offset: 0xE16 VA: 0xE16
	|-Array.InternalArray__IEnumerable_GetEnumerator<Dictionary.Entry<int, object>>
	|
	|-RVA: 0xE17 Offset: 0xE17 VA: 0xE17
	|-Array.InternalArray__IEnumerable_GetEnumerator<Dictionary.Entry<object, int>>
	|
	|-RVA: 0xE18 Offset: 0xE18 VA: 0xE18
	|-Array.InternalArray__IEnumerable_GetEnumerator<Dictionary.Entry<object, object>>
	|
	|-RVA: 0xE19 Offset: 0xE19 VA: 0xE19
	|-Array.InternalArray__IEnumerable_GetEnumerator<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0xE1A Offset: 0xE1A VA: 0xE1A
	|-Array.InternalArray__IEnumerable_GetEnumerator<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0xE1B Offset: 0xE1B VA: 0xE1B
	|-Array.InternalArray__IEnumerable_GetEnumerator<HashSet.Slot<object>>
	|
	|-RVA: 0xE1C Offset: 0xE1C VA: 0xE1C
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0xE1D Offset: 0xE1D VA: 0xE1D
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<Guid, int>>
	|
	|-RVA: 0xE1E Offset: 0xE1E VA: 0xE1E
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<Guid, object>>
	|
	|-RVA: 0xE1F Offset: 0xE1F VA: 0xE1F
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<int, object>>
	|
	|-RVA: 0xE20 Offset: 0xE20 VA: 0xE20
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<object, int>>
	|
	|-RVA: 0xE21 Offset: 0xE21 VA: 0xE21
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<object, object>>
	|
	|-RVA: 0xE22 Offset: 0xE22 VA: 0xE22
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0xE23 Offset: 0xE23 VA: 0xE23
	|-Array.InternalArray__IEnumerable_GetEnumerator<KeyValuePair<ulong, object>>
	|
	|-RVA: 0xE24 Offset: 0xE24 VA: 0xE24
	|-Array.InternalArray__IEnumerable_GetEnumerator<Hashtable.bucket>
	|
	|-RVA: 0xE25 Offset: 0xE25 VA: 0xE25
	|-Array.InternalArray__IEnumerable_GetEnumerator<DateTime>
	|
	|-RVA: 0xE26 Offset: 0xE26 VA: 0xE26
	|-Array.InternalArray__IEnumerable_GetEnumerator<Decimal>
	|
	|-RVA: 0xE27 Offset: 0xE27 VA: 0xE27
	|-Array.InternalArray__IEnumerable_GetEnumerator<EventProvider.SessionInfo>
	|
	|-RVA: 0xE28 Offset: 0xE28 VA: 0xE28
	|-Array.InternalArray__IEnumerable_GetEnumerator<EventSource.EventMetadata>
	|
	|-RVA: 0xE29 Offset: 0xE29 VA: 0xE29
	|-Array.InternalArray__IEnumerable_GetEnumerator<double>
	|
	|-RVA: 0xE2A Offset: 0xE2A VA: 0xE2A
	|-Array.InternalArray__IEnumerable_GetEnumerator<InternalCodePageDataItem>
	|
	|-RVA: 0xE2B Offset: 0xE2B VA: 0xE2B
	|-Array.InternalArray__IEnumerable_GetEnumerator<InternalEncodingDataItem>
	|
	|-RVA: 0xE2C Offset: 0xE2C VA: 0xE2C
	|-Array.InternalArray__IEnumerable_GetEnumerator<Guid>
	|
	|-RVA: 0xE2D Offset: 0xE2D VA: 0xE2D
	|-Array.InternalArray__IEnumerable_GetEnumerator<short>
	|
	|-RVA: 0xE2E Offset: 0xE2E VA: 0xE2E
	|-Array.InternalArray__IEnumerable_GetEnumerator<int>
	|
	|-RVA: 0xE2F Offset: 0xE2F VA: 0xE2F
	|-Array.InternalArray__IEnumerable_GetEnumerator<Int32Enum>
	|
	|-RVA: 0xE30 Offset: 0xE30 VA: 0xE30
	|-Array.InternalArray__IEnumerable_GetEnumerator<long>
	|
	|-RVA: 0xE31 Offset: 0xE31 VA: 0xE31
	|-Array.InternalArray__IEnumerable_GetEnumerator<IntPtr>
	|
	|-RVA: 0xD01 Offset: 0xD01 VA: 0xD01
	|-Array.InternalArray__IEnumerable_GetEnumerator<object>
	|
	|-RVA: 0xE32 Offset: 0xE32 VA: 0xE32
	|-Array.InternalArray__IEnumerable_GetEnumerator<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0xE33 Offset: 0xE33 VA: 0xE33
	|-Array.InternalArray__IEnumerable_GetEnumerator<CustomAttributeNamedArgument>
	|
	|-RVA: 0xE34 Offset: 0xE34 VA: 0xE34
	|-Array.InternalArray__IEnumerable_GetEnumerator<CustomAttributeTypedArgument>
	|
	|-RVA: 0xE35 Offset: 0xE35 VA: 0xE35
	|-Array.InternalArray__IEnumerable_GetEnumerator<ParameterModifier>
	|
	|-RVA: 0xE36 Offset: 0xE36 VA: 0xE36
	|-Array.InternalArray__IEnumerable_GetEnumerator<ResourceLocator>
	|
	|-RVA: 0xE37 Offset: 0xE37 VA: 0xE37
	|-Array.InternalArray__IEnumerable_GetEnumerator<Ephemeron>
	|
	|-RVA: 0xE38 Offset: 0xE38 VA: 0xE38
	|-Array.InternalArray__IEnumerable_GetEnumerator<GCHandle>
	|
	|-RVA: 0xE39 Offset: 0xE39 VA: 0xE39
	|-Array.InternalArray__IEnumerable_GetEnumerator<sbyte>
	|
	|-RVA: 0xE3A Offset: 0xE3A VA: 0xE3A
	|-Array.InternalArray__IEnumerable_GetEnumerator<float>
	|
	|-RVA: 0xE3B Offset: 0xE3B VA: 0xE3B
	|-Array.InternalArray__IEnumerable_GetEnumerator<CancellationTokenRegistration>
	|
	|-RVA: 0xE3C Offset: 0xE3C VA: 0xE3C
	|-Array.InternalArray__IEnumerable_GetEnumerator<TimeSpan>
	|
	|-RVA: 0xE3D Offset: 0xE3D VA: 0xE3D
	|-Array.InternalArray__IEnumerable_GetEnumerator<ushort>
	|
	|-RVA: 0xE3E Offset: 0xE3E VA: 0xE3E
	|-Array.InternalArray__IEnumerable_GetEnumerator<uint>
	|
	|-RVA: 0xE3F Offset: 0xE3F VA: 0xE3F
	|-Array.InternalArray__IEnumerable_GetEnumerator<ulong>
	|
	|-RVA: 0xE40 Offset: 0xE40 VA: 0xE40
	|-Array.InternalArray__IEnumerable_GetEnumerator<UIntPtr>
	|
	|-RVA: 0xE41 Offset: 0xE41 VA: 0xE41
	|-Array.InternalArray__IEnumerable_GetEnumerator<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0xE42 Offset: 0xE42 VA: 0xE42
	|-Array.InternalArray__IEnumerable_GetEnumerator<Color32>
	|
	|-RVA: 0xE43 Offset: 0xE43 VA: 0xE43
	|-Array.InternalArray__IEnumerable_GetEnumerator<RaycastResult>
	|
	|-RVA: 0xE44 Offset: 0xE44 VA: 0xE44
	|-Array.InternalArray__IEnumerable_GetEnumerator<PlayerLoopSystem>
	|
	|-RVA: 0xE45 Offset: 0xE45 VA: 0xE45
	|-Array.InternalArray__IEnumerable_GetEnumerator<Keyframe>
	|
	|-RVA: 0xE46 Offset: 0xE46 VA: 0xE46
	|-Array.InternalArray__IEnumerable_GetEnumerator<PlayableBinding>
	|
	|-RVA: 0xE47 Offset: 0xE47 VA: 0xE47
	|-Array.InternalArray__IEnumerable_GetEnumerator<RaycastHit2D>
	|
	|-RVA: 0xE48 Offset: 0xE48 VA: 0xE48
	|-Array.InternalArray__IEnumerable_GetEnumerator<RaycastHit>
	|
	|-RVA: 0xE49 Offset: 0xE49 VA: 0xE49
	|-Array.InternalArray__IEnumerable_GetEnumerator<SendMouseEvents.HitInfo>
	|
	|-RVA: 0xE4A Offset: 0xE4A VA: 0xE4A
	|-Array.InternalArray__IEnumerable_GetEnumerator<ColorBlock>
	|
	|-RVA: 0xE4B Offset: 0xE4B VA: 0xE4B
	|-Array.InternalArray__IEnumerable_GetEnumerator<Navigation>
	|
	|-RVA: 0xE4C Offset: 0xE4C VA: 0xE4C
	|-Array.InternalArray__IEnumerable_GetEnumerator<SpriteState>
	|
	|-RVA: 0xE4D Offset: 0xE4D VA: 0xE4D
	|-Array.InternalArray__IEnumerable_GetEnumerator<UICharInfo>
	|
	|-RVA: 0xE4E Offset: 0xE4E VA: 0xE4E
	|-Array.InternalArray__IEnumerable_GetEnumerator<UILineInfo>
	|
	|-RVA: 0xE4F Offset: 0xE4F VA: 0xE4F
	|-Array.InternalArray__IEnumerable_GetEnumerator<UIVertex>
	|
	|-RVA: 0xE50 Offset: 0xE50 VA: 0xE50
	|-Array.InternalArray__IEnumerable_GetEnumerator<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0xE51 Offset: 0xE51 VA: 0xE51
	|-Array.InternalArray__IEnumerable_GetEnumerator<Vector2>
	|
	|-RVA: 0xE52 Offset: 0xE52 VA: 0xE52
	|-Array.InternalArray__IEnumerable_GetEnumerator<Vector3>
	|
	|-RVA: 0xE53 Offset: 0xE53 VA: 0xE53
	|-Array.InternalArray__IEnumerable_GetEnumerator<Vector4>
	*/

	// RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6
	internal void InternalArray__ICollection_Clear() { }

	// RVA: -1 Offset: -1
	internal void InternalArray__ICollection_Add<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
	|-Array.InternalArray__ICollection_Add<CodePointIndexer.TableRange>
	|
	|-RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
	|-Array.InternalArray__ICollection_Add<bool>
	|
	|-RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
	|-Array.InternalArray__ICollection_Add<byte>
	|
	|-RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5
	|-Array.InternalArray__ICollection_Add<char>
	|
	|-RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6
	|-Array.InternalArray__ICollection_Add<DictionaryEntry>
	|
	|-RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7
	|-Array.InternalArray__ICollection_Add<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8
	|-Array.InternalArray__ICollection_Add<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9
	|-Array.InternalArray__ICollection_Add<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x8AA Offset: 0x8AA VA: 0x8AA
	|-Array.InternalArray__ICollection_Add<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x8AB Offset: 0x8AB VA: 0x8AB
	|-Array.InternalArray__ICollection_Add<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x8AC Offset: 0x8AC VA: 0x8AC
	|-Array.InternalArray__ICollection_Add<HashSet.Slot<object>>
	|
	|-RVA: 0x8AD Offset: 0x8AD VA: 0x8AD
	|-Array.InternalArray__ICollection_Add<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x8AE Offset: 0x8AE VA: 0x8AE
	|-Array.InternalArray__ICollection_Add<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x8AF Offset: 0x8AF VA: 0x8AF
	|-Array.InternalArray__ICollection_Add<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
	|-Array.InternalArray__ICollection_Add<KeyValuePair<int, object>>
	|
	|-RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
	|-Array.InternalArray__ICollection_Add<KeyValuePair<object, int>>
	|
	|-RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
	|-Array.InternalArray__ICollection_Add<KeyValuePair<object, object>>
	|
	|-RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
	|-Array.InternalArray__ICollection_Add<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
	|-Array.InternalArray__ICollection_Add<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
	|-Array.InternalArray__ICollection_Add<Hashtable.bucket>
	|
	|-RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
	|-Array.InternalArray__ICollection_Add<DateTime>
	|
	|-RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7
	|-Array.InternalArray__ICollection_Add<Decimal>
	|
	|-RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8
	|-Array.InternalArray__ICollection_Add<EventProvider.SessionInfo>
	|
	|-RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9
	|-Array.InternalArray__ICollection_Add<EventSource.EventMetadata>
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-Array.InternalArray__ICollection_Add<double>
	|
	|-RVA: 0x8BA Offset: 0x8BA VA: 0x8BA
	|-Array.InternalArray__ICollection_Add<InternalCodePageDataItem>
	|
	|-RVA: 0x8BB Offset: 0x8BB VA: 0x8BB
	|-Array.InternalArray__ICollection_Add<InternalEncodingDataItem>
	|
	|-RVA: 0x8BC Offset: 0x8BC VA: 0x8BC
	|-Array.InternalArray__ICollection_Add<Guid>
	|
	|-RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
	|-Array.InternalArray__ICollection_Add<short>
	|
	|-RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
	|-Array.InternalArray__ICollection_Add<int>
	|
	|-RVA: 0x8BF Offset: 0x8BF VA: 0x8BF
	|-Array.InternalArray__ICollection_Add<Int32Enum>
	|
	|-RVA: 0x23 Offset: 0x23 VA: 0x23
	|-Array.InternalArray__ICollection_Add<long>
	|
	|-RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0
	|-Array.InternalArray__ICollection_Add<IntPtr>
	|
	|-RVA: 0x7E4 Offset: 0x7E4 VA: 0x7E4
	|-Array.InternalArray__ICollection_Add<object>
	|
	|-RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1
	|-Array.InternalArray__ICollection_Add<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2
	|-Array.InternalArray__ICollection_Add<CustomAttributeNamedArgument>
	|
	|-RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3
	|-Array.InternalArray__ICollection_Add<CustomAttributeTypedArgument>
	|
	|-RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4
	|-Array.InternalArray__ICollection_Add<ParameterModifier>
	|
	|-RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5
	|-Array.InternalArray__ICollection_Add<ResourceLocator>
	|
	|-RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6
	|-Array.InternalArray__ICollection_Add<Ephemeron>
	|
	|-RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7
	|-Array.InternalArray__ICollection_Add<GCHandle>
	|
	|-RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8
	|-Array.InternalArray__ICollection_Add<sbyte>
	|
	|-RVA: 0x50 Offset: 0x50 VA: 0x50
	|-Array.InternalArray__ICollection_Add<float>
	|
	|-RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9
	|-Array.InternalArray__ICollection_Add<CancellationTokenRegistration>
	|
	|-RVA: 0x8CA Offset: 0x8CA VA: 0x8CA
	|-Array.InternalArray__ICollection_Add<TimeSpan>
	|
	|-RVA: 0x8CB Offset: 0x8CB VA: 0x8CB
	|-Array.InternalArray__ICollection_Add<ushort>
	|
	|-RVA: 0x8CC Offset: 0x8CC VA: 0x8CC
	|-Array.InternalArray__ICollection_Add<uint>
	|
	|-RVA: 0x24 Offset: 0x24 VA: 0x24
	|-Array.InternalArray__ICollection_Add<ulong>
	|
	|-RVA: 0x8CD Offset: 0x8CD VA: 0x8CD
	|-Array.InternalArray__ICollection_Add<UIntPtr>
	|
	|-RVA: 0x8CE Offset: 0x8CE VA: 0x8CE
	|-Array.InternalArray__ICollection_Add<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x8CF Offset: 0x8CF VA: 0x8CF
	|-Array.InternalArray__ICollection_Add<Color32>
	|
	|-RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0
	|-Array.InternalArray__ICollection_Add<RaycastResult>
	|
	|-RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1
	|-Array.InternalArray__ICollection_Add<PlayerLoopSystem>
	|
	|-RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2
	|-Array.InternalArray__ICollection_Add<Keyframe>
	|
	|-RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3
	|-Array.InternalArray__ICollection_Add<PlayableBinding>
	|
	|-RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4
	|-Array.InternalArray__ICollection_Add<RaycastHit2D>
	|
	|-RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5
	|-Array.InternalArray__ICollection_Add<RaycastHit>
	|
	|-RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6
	|-Array.InternalArray__ICollection_Add<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7
	|-Array.InternalArray__ICollection_Add<ColorBlock>
	|
	|-RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8
	|-Array.InternalArray__ICollection_Add<Navigation>
	|
	|-RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9
	|-Array.InternalArray__ICollection_Add<SpriteState>
	|
	|-RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
	|-Array.InternalArray__ICollection_Add<UICharInfo>
	|
	|-RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
	|-Array.InternalArray__ICollection_Add<UILineInfo>
	|
	|-RVA: 0x8DC Offset: 0x8DC VA: 0x8DC
	|-Array.InternalArray__ICollection_Add<UIVertex>
	|
	|-RVA: 0x8DD Offset: 0x8DD VA: 0x8DD
	|-Array.InternalArray__ICollection_Add<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
	|-Array.InternalArray__ICollection_Add<Vector2>
	|
	|-RVA: 0x8DF Offset: 0x8DF VA: 0x8DF
	|-Array.InternalArray__ICollection_Add<Vector3>
	|
	|-RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0
	|-Array.InternalArray__ICollection_Add<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal bool InternalArray__ICollection_Remove<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x707 Offset: 0x707 VA: 0x707
	|-Array.InternalArray__ICollection_Remove<CodePointIndexer.TableRange>
	|
	|-RVA: 0x708 Offset: 0x708 VA: 0x708
	|-Array.InternalArray__ICollection_Remove<bool>
	|
	|-RVA: 0x709 Offset: 0x709 VA: 0x709
	|-Array.InternalArray__ICollection_Remove<byte>
	|
	|-RVA: 0x70A Offset: 0x70A VA: 0x70A
	|-Array.InternalArray__ICollection_Remove<char>
	|
	|-RVA: 0x70B Offset: 0x70B VA: 0x70B
	|-Array.InternalArray__ICollection_Remove<DictionaryEntry>
	|
	|-RVA: 0x70C Offset: 0x70C VA: 0x70C
	|-Array.InternalArray__ICollection_Remove<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x70D Offset: 0x70D VA: 0x70D
	|-Array.InternalArray__ICollection_Remove<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x70E Offset: 0x70E VA: 0x70E
	|-Array.InternalArray__ICollection_Remove<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x70F Offset: 0x70F VA: 0x70F
	|-Array.InternalArray__ICollection_Remove<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x710 Offset: 0x710 VA: 0x710
	|-Array.InternalArray__ICollection_Remove<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x711 Offset: 0x711 VA: 0x711
	|-Array.InternalArray__ICollection_Remove<HashSet.Slot<object>>
	|
	|-RVA: 0x712 Offset: 0x712 VA: 0x712
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x713 Offset: 0x713 VA: 0x713
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x714 Offset: 0x714 VA: 0x714
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x715 Offset: 0x715 VA: 0x715
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<int, object>>
	|
	|-RVA: 0x716 Offset: 0x716 VA: 0x716
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<object, int>>
	|
	|-RVA: 0x717 Offset: 0x717 VA: 0x717
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<object, object>>
	|
	|-RVA: 0x718 Offset: 0x718 VA: 0x718
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x719 Offset: 0x719 VA: 0x719
	|-Array.InternalArray__ICollection_Remove<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x71A Offset: 0x71A VA: 0x71A
	|-Array.InternalArray__ICollection_Remove<Hashtable.bucket>
	|
	|-RVA: 0x71B Offset: 0x71B VA: 0x71B
	|-Array.InternalArray__ICollection_Remove<DateTime>
	|
	|-RVA: 0x71C Offset: 0x71C VA: 0x71C
	|-Array.InternalArray__ICollection_Remove<Decimal>
	|
	|-RVA: 0x71D Offset: 0x71D VA: 0x71D
	|-Array.InternalArray__ICollection_Remove<EventProvider.SessionInfo>
	|
	|-RVA: 0x71E Offset: 0x71E VA: 0x71E
	|-Array.InternalArray__ICollection_Remove<EventSource.EventMetadata>
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-Array.InternalArray__ICollection_Remove<double>
	|
	|-RVA: 0x71F Offset: 0x71F VA: 0x71F
	|-Array.InternalArray__ICollection_Remove<InternalCodePageDataItem>
	|
	|-RVA: 0x720 Offset: 0x720 VA: 0x720
	|-Array.InternalArray__ICollection_Remove<InternalEncodingDataItem>
	|
	|-RVA: 0x721 Offset: 0x721 VA: 0x721
	|-Array.InternalArray__ICollection_Remove<Guid>
	|
	|-RVA: 0x722 Offset: 0x722 VA: 0x722
	|-Array.InternalArray__ICollection_Remove<short>
	|
	|-RVA: 0x723 Offset: 0x723 VA: 0x723
	|-Array.InternalArray__ICollection_Remove<int>
	|
	|-RVA: 0x724 Offset: 0x724 VA: 0x724
	|-Array.InternalArray__ICollection_Remove<Int32Enum>
	|
	|-RVA: 0x17 Offset: 0x17 VA: 0x17
	|-Array.InternalArray__ICollection_Remove<long>
	|
	|-RVA: 0x725 Offset: 0x725 VA: 0x725
	|-Array.InternalArray__ICollection_Remove<IntPtr>
	|
	|-RVA: 0x628 Offset: 0x628 VA: 0x628
	|-Array.InternalArray__ICollection_Remove<object>
	|
	|-RVA: 0x726 Offset: 0x726 VA: 0x726
	|-Array.InternalArray__ICollection_Remove<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x727 Offset: 0x727 VA: 0x727
	|-Array.InternalArray__ICollection_Remove<CustomAttributeNamedArgument>
	|
	|-RVA: 0x728 Offset: 0x728 VA: 0x728
	|-Array.InternalArray__ICollection_Remove<CustomAttributeTypedArgument>
	|
	|-RVA: 0x729 Offset: 0x729 VA: 0x729
	|-Array.InternalArray__ICollection_Remove<ParameterModifier>
	|
	|-RVA: 0x72A Offset: 0x72A VA: 0x72A
	|-Array.InternalArray__ICollection_Remove<ResourceLocator>
	|
	|-RVA: 0x72B Offset: 0x72B VA: 0x72B
	|-Array.InternalArray__ICollection_Remove<Ephemeron>
	|
	|-RVA: 0x72C Offset: 0x72C VA: 0x72C
	|-Array.InternalArray__ICollection_Remove<GCHandle>
	|
	|-RVA: 0x72D Offset: 0x72D VA: 0x72D
	|-Array.InternalArray__ICollection_Remove<sbyte>
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-Array.InternalArray__ICollection_Remove<float>
	|
	|-RVA: 0x72E Offset: 0x72E VA: 0x72E
	|-Array.InternalArray__ICollection_Remove<CancellationTokenRegistration>
	|
	|-RVA: 0x72F Offset: 0x72F VA: 0x72F
	|-Array.InternalArray__ICollection_Remove<TimeSpan>
	|
	|-RVA: 0x730 Offset: 0x730 VA: 0x730
	|-Array.InternalArray__ICollection_Remove<ushort>
	|
	|-RVA: 0x731 Offset: 0x731 VA: 0x731
	|-Array.InternalArray__ICollection_Remove<uint>
	|
	|-RVA: 0x18 Offset: 0x18 VA: 0x18
	|-Array.InternalArray__ICollection_Remove<ulong>
	|
	|-RVA: 0x732 Offset: 0x732 VA: 0x732
	|-Array.InternalArray__ICollection_Remove<UIntPtr>
	|
	|-RVA: 0x733 Offset: 0x733 VA: 0x733
	|-Array.InternalArray__ICollection_Remove<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x734 Offset: 0x734 VA: 0x734
	|-Array.InternalArray__ICollection_Remove<Color32>
	|
	|-RVA: 0x735 Offset: 0x735 VA: 0x735
	|-Array.InternalArray__ICollection_Remove<RaycastResult>
	|
	|-RVA: 0x736 Offset: 0x736 VA: 0x736
	|-Array.InternalArray__ICollection_Remove<PlayerLoopSystem>
	|
	|-RVA: 0x737 Offset: 0x737 VA: 0x737
	|-Array.InternalArray__ICollection_Remove<Keyframe>
	|
	|-RVA: 0x738 Offset: 0x738 VA: 0x738
	|-Array.InternalArray__ICollection_Remove<PlayableBinding>
	|
	|-RVA: 0x739 Offset: 0x739 VA: 0x739
	|-Array.InternalArray__ICollection_Remove<RaycastHit2D>
	|
	|-RVA: 0x73A Offset: 0x73A VA: 0x73A
	|-Array.InternalArray__ICollection_Remove<RaycastHit>
	|
	|-RVA: 0x73B Offset: 0x73B VA: 0x73B
	|-Array.InternalArray__ICollection_Remove<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x73C Offset: 0x73C VA: 0x73C
	|-Array.InternalArray__ICollection_Remove<ColorBlock>
	|
	|-RVA: 0x73D Offset: 0x73D VA: 0x73D
	|-Array.InternalArray__ICollection_Remove<Navigation>
	|
	|-RVA: 0x73E Offset: 0x73E VA: 0x73E
	|-Array.InternalArray__ICollection_Remove<SpriteState>
	|
	|-RVA: 0x73F Offset: 0x73F VA: 0x73F
	|-Array.InternalArray__ICollection_Remove<UICharInfo>
	|
	|-RVA: 0x740 Offset: 0x740 VA: 0x740
	|-Array.InternalArray__ICollection_Remove<UILineInfo>
	|
	|-RVA: 0x741 Offset: 0x741 VA: 0x741
	|-Array.InternalArray__ICollection_Remove<UIVertex>
	|
	|-RVA: 0x742 Offset: 0x742 VA: 0x742
	|-Array.InternalArray__ICollection_Remove<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x743 Offset: 0x743 VA: 0x743
	|-Array.InternalArray__ICollection_Remove<Vector2>
	|
	|-RVA: 0x744 Offset: 0x744 VA: 0x744
	|-Array.InternalArray__ICollection_Remove<Vector3>
	|
	|-RVA: 0x745 Offset: 0x745 VA: 0x745
	|-Array.InternalArray__ICollection_Remove<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal bool InternalArray__ICollection_Contains<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6C8 Offset: 0x6C8 VA: 0x6C8
	|-Array.InternalArray__ICollection_Contains<CodePointIndexer.TableRange>
	|
	|-RVA: 0x6C9 Offset: 0x6C9 VA: 0x6C9
	|-Array.InternalArray__ICollection_Contains<bool>
	|
	|-RVA: 0x6CA Offset: 0x6CA VA: 0x6CA
	|-Array.InternalArray__ICollection_Contains<byte>
	|
	|-RVA: 0x6CB Offset: 0x6CB VA: 0x6CB
	|-Array.InternalArray__ICollection_Contains<char>
	|
	|-RVA: 0x6CC Offset: 0x6CC VA: 0x6CC
	|-Array.InternalArray__ICollection_Contains<DictionaryEntry>
	|
	|-RVA: 0x6CD Offset: 0x6CD VA: 0x6CD
	|-Array.InternalArray__ICollection_Contains<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	|-Array.InternalArray__ICollection_Contains<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x6CF Offset: 0x6CF VA: 0x6CF
	|-Array.InternalArray__ICollection_Contains<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	|-Array.InternalArray__ICollection_Contains<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1
	|-Array.InternalArray__ICollection_Contains<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2
	|-Array.InternalArray__ICollection_Contains<HashSet.Slot<object>>
	|
	|-RVA: 0x6D3 Offset: 0x6D3 VA: 0x6D3
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<int, object>>
	|
	|-RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<object, int>>
	|
	|-RVA: 0x6D8 Offset: 0x6D8 VA: 0x6D8
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<object, object>>
	|
	|-RVA: 0x6D9 Offset: 0x6D9 VA: 0x6D9
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x6DA Offset: 0x6DA VA: 0x6DA
	|-Array.InternalArray__ICollection_Contains<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x6DB Offset: 0x6DB VA: 0x6DB
	|-Array.InternalArray__ICollection_Contains<Hashtable.bucket>
	|
	|-RVA: 0x6DC Offset: 0x6DC VA: 0x6DC
	|-Array.InternalArray__ICollection_Contains<DateTime>
	|
	|-RVA: 0x6DD Offset: 0x6DD VA: 0x6DD
	|-Array.InternalArray__ICollection_Contains<Decimal>
	|
	|-RVA: 0x6DE Offset: 0x6DE VA: 0x6DE
	|-Array.InternalArray__ICollection_Contains<EventProvider.SessionInfo>
	|
	|-RVA: 0x6DF Offset: 0x6DF VA: 0x6DF
	|-Array.InternalArray__ICollection_Contains<EventSource.EventMetadata>
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-Array.InternalArray__ICollection_Contains<double>
	|
	|-RVA: 0x6E0 Offset: 0x6E0 VA: 0x6E0
	|-Array.InternalArray__ICollection_Contains<InternalCodePageDataItem>
	|
	|-RVA: 0x6E1 Offset: 0x6E1 VA: 0x6E1
	|-Array.InternalArray__ICollection_Contains<InternalEncodingDataItem>
	|
	|-RVA: 0x6E2 Offset: 0x6E2 VA: 0x6E2
	|-Array.InternalArray__ICollection_Contains<Guid>
	|
	|-RVA: 0x6E3 Offset: 0x6E3 VA: 0x6E3
	|-Array.InternalArray__ICollection_Contains<short>
	|
	|-RVA: 0x6E4 Offset: 0x6E4 VA: 0x6E4
	|-Array.InternalArray__ICollection_Contains<int>
	|
	|-RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5
	|-Array.InternalArray__ICollection_Contains<Int32Enum>
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-Array.InternalArray__ICollection_Contains<long>
	|
	|-RVA: 0x6E6 Offset: 0x6E6 VA: 0x6E6
	|-Array.InternalArray__ICollection_Contains<IntPtr>
	|
	|-RVA: 0x629 Offset: 0x629 VA: 0x629
	|-Array.InternalArray__ICollection_Contains<object>
	|
	|-RVA: 0x6E7 Offset: 0x6E7 VA: 0x6E7
	|-Array.InternalArray__ICollection_Contains<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x6E8 Offset: 0x6E8 VA: 0x6E8
	|-Array.InternalArray__ICollection_Contains<CustomAttributeNamedArgument>
	|
	|-RVA: 0x6E9 Offset: 0x6E9 VA: 0x6E9
	|-Array.InternalArray__ICollection_Contains<CustomAttributeTypedArgument>
	|
	|-RVA: 0x6EA Offset: 0x6EA VA: 0x6EA
	|-Array.InternalArray__ICollection_Contains<ParameterModifier>
	|
	|-RVA: 0x6EB Offset: 0x6EB VA: 0x6EB
	|-Array.InternalArray__ICollection_Contains<ResourceLocator>
	|
	|-RVA: 0x6EC Offset: 0x6EC VA: 0x6EC
	|-Array.InternalArray__ICollection_Contains<Ephemeron>
	|
	|-RVA: 0x6ED Offset: 0x6ED VA: 0x6ED
	|-Array.InternalArray__ICollection_Contains<GCHandle>
	|
	|-RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	|-Array.InternalArray__ICollection_Contains<sbyte>
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-Array.InternalArray__ICollection_Contains<float>
	|
	|-RVA: 0x6EF Offset: 0x6EF VA: 0x6EF
	|-Array.InternalArray__ICollection_Contains<CancellationTokenRegistration>
	|
	|-RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0
	|-Array.InternalArray__ICollection_Contains<TimeSpan>
	|
	|-RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1
	|-Array.InternalArray__ICollection_Contains<ushort>
	|
	|-RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2
	|-Array.InternalArray__ICollection_Contains<uint>
	|
	|-RVA: 0x16 Offset: 0x16 VA: 0x16
	|-Array.InternalArray__ICollection_Contains<ulong>
	|
	|-RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3
	|-Array.InternalArray__ICollection_Contains<UIntPtr>
	|
	|-RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4
	|-Array.InternalArray__ICollection_Contains<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x6F5 Offset: 0x6F5 VA: 0x6F5
	|-Array.InternalArray__ICollection_Contains<Color32>
	|
	|-RVA: 0x6F6 Offset: 0x6F6 VA: 0x6F6
	|-Array.InternalArray__ICollection_Contains<RaycastResult>
	|
	|-RVA: 0x6F7 Offset: 0x6F7 VA: 0x6F7
	|-Array.InternalArray__ICollection_Contains<PlayerLoopSystem>
	|
	|-RVA: 0x6F8 Offset: 0x6F8 VA: 0x6F8
	|-Array.InternalArray__ICollection_Contains<Keyframe>
	|
	|-RVA: 0x6F9 Offset: 0x6F9 VA: 0x6F9
	|-Array.InternalArray__ICollection_Contains<PlayableBinding>
	|
	|-RVA: 0x6FA Offset: 0x6FA VA: 0x6FA
	|-Array.InternalArray__ICollection_Contains<RaycastHit2D>
	|
	|-RVA: 0x6FB Offset: 0x6FB VA: 0x6FB
	|-Array.InternalArray__ICollection_Contains<RaycastHit>
	|
	|-RVA: 0x6FC Offset: 0x6FC VA: 0x6FC
	|-Array.InternalArray__ICollection_Contains<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x6FD Offset: 0x6FD VA: 0x6FD
	|-Array.InternalArray__ICollection_Contains<ColorBlock>
	|
	|-RVA: 0x6FE Offset: 0x6FE VA: 0x6FE
	|-Array.InternalArray__ICollection_Contains<Navigation>
	|
	|-RVA: 0x6FF Offset: 0x6FF VA: 0x6FF
	|-Array.InternalArray__ICollection_Contains<SpriteState>
	|
	|-RVA: 0x700 Offset: 0x700 VA: 0x700
	|-Array.InternalArray__ICollection_Contains<UICharInfo>
	|
	|-RVA: 0x701 Offset: 0x701 VA: 0x701
	|-Array.InternalArray__ICollection_Contains<UILineInfo>
	|
	|-RVA: 0x702 Offset: 0x702 VA: 0x702
	|-Array.InternalArray__ICollection_Contains<UIVertex>
	|
	|-RVA: 0x703 Offset: 0x703 VA: 0x703
	|-Array.InternalArray__ICollection_Contains<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x704 Offset: 0x704 VA: 0x704
	|-Array.InternalArray__ICollection_Contains<Vector2>
	|
	|-RVA: 0x705 Offset: 0x705 VA: 0x705
	|-Array.InternalArray__ICollection_Contains<Vector3>
	|
	|-RVA: 0x706 Offset: 0x706 VA: 0x706
	|-Array.InternalArray__ICollection_Contains<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x48D Offset: 0x48D VA: 0x48D
	|-Array.InternalArray__ICollection_CopyTo<CodePointIndexer.TableRange>
	|
	|-RVA: 0x48E Offset: 0x48E VA: 0x48E
	|-Array.InternalArray__ICollection_CopyTo<bool>
	|
	|-RVA: 0x48F Offset: 0x48F VA: 0x48F
	|-Array.InternalArray__ICollection_CopyTo<byte>
	|
	|-RVA: 0x490 Offset: 0x490 VA: 0x490
	|-Array.InternalArray__ICollection_CopyTo<char>
	|
	|-RVA: 0x491 Offset: 0x491 VA: 0x491
	|-Array.InternalArray__ICollection_CopyTo<DictionaryEntry>
	|
	|-RVA: 0x492 Offset: 0x492 VA: 0x492
	|-Array.InternalArray__ICollection_CopyTo<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x493 Offset: 0x493 VA: 0x493
	|-Array.InternalArray__ICollection_CopyTo<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x494 Offset: 0x494 VA: 0x494
	|-Array.InternalArray__ICollection_CopyTo<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x495 Offset: 0x495 VA: 0x495
	|-Array.InternalArray__ICollection_CopyTo<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x496 Offset: 0x496 VA: 0x496
	|-Array.InternalArray__ICollection_CopyTo<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x497 Offset: 0x497 VA: 0x497
	|-Array.InternalArray__ICollection_CopyTo<HashSet.Slot<object>>
	|
	|-RVA: 0x498 Offset: 0x498 VA: 0x498
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x499 Offset: 0x499 VA: 0x499
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x49A Offset: 0x49A VA: 0x49A
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x49B Offset: 0x49B VA: 0x49B
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<int, object>>
	|
	|-RVA: 0x49C Offset: 0x49C VA: 0x49C
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<object, int>>
	|
	|-RVA: 0x49D Offset: 0x49D VA: 0x49D
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<object, object>>
	|
	|-RVA: 0x49E Offset: 0x49E VA: 0x49E
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x49F Offset: 0x49F VA: 0x49F
	|-Array.InternalArray__ICollection_CopyTo<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x4A0 Offset: 0x4A0 VA: 0x4A0
	|-Array.InternalArray__ICollection_CopyTo<Hashtable.bucket>
	|
	|-RVA: 0x4A1 Offset: 0x4A1 VA: 0x4A1
	|-Array.InternalArray__ICollection_CopyTo<DateTime>
	|
	|-RVA: 0x4A2 Offset: 0x4A2 VA: 0x4A2
	|-Array.InternalArray__ICollection_CopyTo<Decimal>
	|
	|-RVA: 0x4A3 Offset: 0x4A3 VA: 0x4A3
	|-Array.InternalArray__ICollection_CopyTo<EventProvider.SessionInfo>
	|
	|-RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
	|-Array.InternalArray__ICollection_CopyTo<EventSource.EventMetadata>
	|
	|-RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
	|-Array.InternalArray__ICollection_CopyTo<double>
	|
	|-RVA: 0x4A6 Offset: 0x4A6 VA: 0x4A6
	|-Array.InternalArray__ICollection_CopyTo<InternalCodePageDataItem>
	|
	|-RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
	|-Array.InternalArray__ICollection_CopyTo<InternalEncodingDataItem>
	|
	|-RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8
	|-Array.InternalArray__ICollection_CopyTo<Guid>
	|
	|-RVA: 0x4A9 Offset: 0x4A9 VA: 0x4A9
	|-Array.InternalArray__ICollection_CopyTo<short>
	|
	|-RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
	|-Array.InternalArray__ICollection_CopyTo<int>
	|
	|-RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
	|-Array.InternalArray__ICollection_CopyTo<Int32Enum>
	|
	|-RVA: 0x4AC Offset: 0x4AC VA: 0x4AC
	|-Array.InternalArray__ICollection_CopyTo<long>
	|
	|-RVA: 0x4AD Offset: 0x4AD VA: 0x4AD
	|-Array.InternalArray__ICollection_CopyTo<IntPtr>
	|
	|-RVA: 0x3D9 Offset: 0x3D9 VA: 0x3D9
	|-Array.InternalArray__ICollection_CopyTo<object>
	|
	|-RVA: 0x4AE Offset: 0x4AE VA: 0x4AE
	|-Array.InternalArray__ICollection_CopyTo<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x4AF Offset: 0x4AF VA: 0x4AF
	|-Array.InternalArray__ICollection_CopyTo<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0
	|-Array.InternalArray__ICollection_CopyTo<CustomAttributeTypedArgument>
	|
	|-RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1
	|-Array.InternalArray__ICollection_CopyTo<ParameterModifier>
	|
	|-RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2
	|-Array.InternalArray__ICollection_CopyTo<ResourceLocator>
	|
	|-RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3
	|-Array.InternalArray__ICollection_CopyTo<Ephemeron>
	|
	|-RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4
	|-Array.InternalArray__ICollection_CopyTo<GCHandle>
	|
	|-RVA: 0x4B5 Offset: 0x4B5 VA: 0x4B5
	|-Array.InternalArray__ICollection_CopyTo<sbyte>
	|
	|-RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
	|-Array.InternalArray__ICollection_CopyTo<float>
	|
	|-RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7
	|-Array.InternalArray__ICollection_CopyTo<CancellationTokenRegistration>
	|
	|-RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
	|-Array.InternalArray__ICollection_CopyTo<TimeSpan>
	|
	|-RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9
	|-Array.InternalArray__ICollection_CopyTo<ushort>
	|
	|-RVA: 0x4BA Offset: 0x4BA VA: 0x4BA
	|-Array.InternalArray__ICollection_CopyTo<uint>
	|
	|-RVA: 0x4BB Offset: 0x4BB VA: 0x4BB
	|-Array.InternalArray__ICollection_CopyTo<ulong>
	|
	|-RVA: 0x4BC Offset: 0x4BC VA: 0x4BC
	|-Array.InternalArray__ICollection_CopyTo<UIntPtr>
	|
	|-RVA: 0x4BD Offset: 0x4BD VA: 0x4BD
	|-Array.InternalArray__ICollection_CopyTo<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x4BE Offset: 0x4BE VA: 0x4BE
	|-Array.InternalArray__ICollection_CopyTo<Color32>
	|
	|-RVA: 0x4BF Offset: 0x4BF VA: 0x4BF
	|-Array.InternalArray__ICollection_CopyTo<RaycastResult>
	|
	|-RVA: 0x4C0 Offset: 0x4C0 VA: 0x4C0
	|-Array.InternalArray__ICollection_CopyTo<PlayerLoopSystem>
	|
	|-RVA: 0x4C1 Offset: 0x4C1 VA: 0x4C1
	|-Array.InternalArray__ICollection_CopyTo<Keyframe>
	|
	|-RVA: 0x4C2 Offset: 0x4C2 VA: 0x4C2
	|-Array.InternalArray__ICollection_CopyTo<PlayableBinding>
	|
	|-RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3
	|-Array.InternalArray__ICollection_CopyTo<RaycastHit2D>
	|
	|-RVA: 0x4C4 Offset: 0x4C4 VA: 0x4C4
	|-Array.InternalArray__ICollection_CopyTo<RaycastHit>
	|
	|-RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
	|-Array.InternalArray__ICollection_CopyTo<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
	|-Array.InternalArray__ICollection_CopyTo<ColorBlock>
	|
	|-RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
	|-Array.InternalArray__ICollection_CopyTo<Navigation>
	|
	|-RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
	|-Array.InternalArray__ICollection_CopyTo<SpriteState>
	|
	|-RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
	|-Array.InternalArray__ICollection_CopyTo<UICharInfo>
	|
	|-RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
	|-Array.InternalArray__ICollection_CopyTo<UILineInfo>
	|
	|-RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
	|-Array.InternalArray__ICollection_CopyTo<UIVertex>
	|
	|-RVA: 0x4CC Offset: 0x4CC VA: 0x4CC
	|-Array.InternalArray__ICollection_CopyTo<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
	|-Array.InternalArray__ICollection_CopyTo<Vector2>
	|
	|-RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
	|-Array.InternalArray__ICollection_CopyTo<Vector3>
	|
	|-RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
	|-Array.InternalArray__ICollection_CopyTo<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal T InternalArray__IReadOnlyList_get_Item<T>(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x55C Offset: 0x55C VA: 0x55C
	|-Array.InternalArray__IReadOnlyList_get_Item<CodePointIndexer.TableRange>
	|
	|-RVA: 0x785 Offset: 0x785 VA: 0x785
	|-Array.InternalArray__IReadOnlyList_get_Item<bool>
	|
	|-RVA: 0x786 Offset: 0x786 VA: 0x786
	|-Array.InternalArray__IReadOnlyList_get_Item<byte>
	|
	|-RVA: 0x787 Offset: 0x787 VA: 0x787
	|-Array.InternalArray__IReadOnlyList_get_Item<char>
	|
	|-RVA: 0x55D Offset: 0x55D VA: 0x55D
	|-Array.InternalArray__IReadOnlyList_get_Item<DictionaryEntry>
	|
	|-RVA: 0x55E Offset: 0x55E VA: 0x55E
	|-Array.InternalArray__IReadOnlyList_get_Item<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x55F Offset: 0x55F VA: 0x55F
	|-Array.InternalArray__IReadOnlyList_get_Item<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x560 Offset: 0x560 VA: 0x560
	|-Array.InternalArray__IReadOnlyList_get_Item<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x561 Offset: 0x561 VA: 0x561
	|-Array.InternalArray__IReadOnlyList_get_Item<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x562 Offset: 0x562 VA: 0x562
	|-Array.InternalArray__IReadOnlyList_get_Item<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x563 Offset: 0x563 VA: 0x563
	|-Array.InternalArray__IReadOnlyList_get_Item<HashSet.Slot<object>>
	|
	|-RVA: 0x564 Offset: 0x564 VA: 0x564
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x565 Offset: 0x565 VA: 0x565
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x566 Offset: 0x566 VA: 0x566
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x567 Offset: 0x567 VA: 0x567
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<int, object>>
	|
	|-RVA: 0x568 Offset: 0x568 VA: 0x568
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<object, int>>
	|
	|-RVA: 0x569 Offset: 0x569 VA: 0x569
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<object, object>>
	|
	|-RVA: 0x56A Offset: 0x56A VA: 0x56A
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x56B Offset: 0x56B VA: 0x56B
	|-Array.InternalArray__IReadOnlyList_get_Item<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x56C Offset: 0x56C VA: 0x56C
	|-Array.InternalArray__IReadOnlyList_get_Item<Hashtable.bucket>
	|
	|-RVA: 0x5D Offset: 0x5D VA: 0x5D
	|-Array.InternalArray__IReadOnlyList_get_Item<DateTime>
	|
	|-RVA: 0x56D Offset: 0x56D VA: 0x56D
	|-Array.InternalArray__IReadOnlyList_get_Item<Decimal>
	|
	|-RVA: 0x56E Offset: 0x56E VA: 0x56E
	|-Array.InternalArray__IReadOnlyList_get_Item<EventProvider.SessionInfo>
	|
	|-RVA: 0x56F Offset: 0x56F VA: 0x56F
	|-Array.InternalArray__IReadOnlyList_get_Item<EventSource.EventMetadata>
	|
	|-RVA: 0x16 Offset: 0x16 VA: 0x16
	|-Array.InternalArray__IReadOnlyList_get_Item<double>
	|
	|-RVA: 0x570 Offset: 0x570 VA: 0x570
	|-Array.InternalArray__IReadOnlyList_get_Item<InternalCodePageDataItem>
	|
	|-RVA: 0x571 Offset: 0x571 VA: 0x571
	|-Array.InternalArray__IReadOnlyList_get_Item<InternalEncodingDataItem>
	|
	|-RVA: 0x572 Offset: 0x572 VA: 0x572
	|-Array.InternalArray__IReadOnlyList_get_Item<Guid>
	|
	|-RVA: 0x788 Offset: 0x788 VA: 0x788
	|-Array.InternalArray__IReadOnlyList_get_Item<short>
	|
	|-RVA: 0x789 Offset: 0x789 VA: 0x789
	|-Array.InternalArray__IReadOnlyList_get_Item<int>
	|
	|-RVA: 0x78A Offset: 0x78A VA: 0x78A
	|-Array.InternalArray__IReadOnlyList_get_Item<Int32Enum>
	|
	|-RVA: 0x5E Offset: 0x5E VA: 0x5E
	|-Array.InternalArray__IReadOnlyList_get_Item<long>
	|
	|-RVA: 0x78B Offset: 0x78B VA: 0x78B
	|-Array.InternalArray__IReadOnlyList_get_Item<IntPtr>
	|
	|-RVA: 0x62A Offset: 0x62A VA: 0x62A
	|-Array.InternalArray__IReadOnlyList_get_Item<object>
	|
	|-RVA: 0x573 Offset: 0x573 VA: 0x573
	|-Array.InternalArray__IReadOnlyList_get_Item<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x574 Offset: 0x574 VA: 0x574
	|-Array.InternalArray__IReadOnlyList_get_Item<CustomAttributeNamedArgument>
	|
	|-RVA: 0x575 Offset: 0x575 VA: 0x575
	|-Array.InternalArray__IReadOnlyList_get_Item<CustomAttributeTypedArgument>
	|
	|-RVA: 0x78C Offset: 0x78C VA: 0x78C
	|-Array.InternalArray__IReadOnlyList_get_Item<ParameterModifier>
	|
	|-RVA: 0x576 Offset: 0x576 VA: 0x576
	|-Array.InternalArray__IReadOnlyList_get_Item<ResourceLocator>
	|
	|-RVA: 0x577 Offset: 0x577 VA: 0x577
	|-Array.InternalArray__IReadOnlyList_get_Item<Ephemeron>
	|
	|-RVA: 0x78D Offset: 0x78D VA: 0x78D
	|-Array.InternalArray__IReadOnlyList_get_Item<GCHandle>
	|
	|-RVA: 0x78E Offset: 0x78E VA: 0x78E
	|-Array.InternalArray__IReadOnlyList_get_Item<sbyte>
	|
	|-RVA: 0x2D Offset: 0x2D VA: 0x2D
	|-Array.InternalArray__IReadOnlyList_get_Item<float>
	|
	|-RVA: 0x578 Offset: 0x578 VA: 0x578
	|-Array.InternalArray__IReadOnlyList_get_Item<CancellationTokenRegistration>
	|
	|-RVA: 0x5F Offset: 0x5F VA: 0x5F
	|-Array.InternalArray__IReadOnlyList_get_Item<TimeSpan>
	|
	|-RVA: 0x78F Offset: 0x78F VA: 0x78F
	|-Array.InternalArray__IReadOnlyList_get_Item<ushort>
	|
	|-RVA: 0x790 Offset: 0x790 VA: 0x790
	|-Array.InternalArray__IReadOnlyList_get_Item<uint>
	|
	|-RVA: 0x60 Offset: 0x60 VA: 0x60
	|-Array.InternalArray__IReadOnlyList_get_Item<ulong>
	|
	|-RVA: 0x791 Offset: 0x791 VA: 0x791
	|-Array.InternalArray__IReadOnlyList_get_Item<UIntPtr>
	|
	|-RVA: 0x579 Offset: 0x579 VA: 0x579
	|-Array.InternalArray__IReadOnlyList_get_Item<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x57A Offset: 0x57A VA: 0x57A
	|-Array.InternalArray__IReadOnlyList_get_Item<Color32>
	|
	|-RVA: 0x57B Offset: 0x57B VA: 0x57B
	|-Array.InternalArray__IReadOnlyList_get_Item<RaycastResult>
	|
	|-RVA: 0x57C Offset: 0x57C VA: 0x57C
	|-Array.InternalArray__IReadOnlyList_get_Item<PlayerLoopSystem>
	|
	|-RVA: 0x57D Offset: 0x57D VA: 0x57D
	|-Array.InternalArray__IReadOnlyList_get_Item<Keyframe>
	|
	|-RVA: 0x57E Offset: 0x57E VA: 0x57E
	|-Array.InternalArray__IReadOnlyList_get_Item<PlayableBinding>
	|
	|-RVA: 0x57F Offset: 0x57F VA: 0x57F
	|-Array.InternalArray__IReadOnlyList_get_Item<RaycastHit2D>
	|
	|-RVA: 0x580 Offset: 0x580 VA: 0x580
	|-Array.InternalArray__IReadOnlyList_get_Item<RaycastHit>
	|
	|-RVA: 0x581 Offset: 0x581 VA: 0x581
	|-Array.InternalArray__IReadOnlyList_get_Item<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x582 Offset: 0x582 VA: 0x582
	|-Array.InternalArray__IReadOnlyList_get_Item<ColorBlock>
	|
	|-RVA: 0x583 Offset: 0x583 VA: 0x583
	|-Array.InternalArray__IReadOnlyList_get_Item<Navigation>
	|
	|-RVA: 0x584 Offset: 0x584 VA: 0x584
	|-Array.InternalArray__IReadOnlyList_get_Item<SpriteState>
	|
	|-RVA: 0x585 Offset: 0x585 VA: 0x585
	|-Array.InternalArray__IReadOnlyList_get_Item<UICharInfo>
	|
	|-RVA: 0x586 Offset: 0x586 VA: 0x586
	|-Array.InternalArray__IReadOnlyList_get_Item<UILineInfo>
	|
	|-RVA: 0x587 Offset: 0x587 VA: 0x587
	|-Array.InternalArray__IReadOnlyList_get_Item<UIVertex>
	|
	|-RVA: 0x588 Offset: 0x588 VA: 0x588
	|-Array.InternalArray__IReadOnlyList_get_Item<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x589 Offset: 0x589 VA: 0x589
	|-Array.InternalArray__IReadOnlyList_get_Item<Vector2>
	|
	|-RVA: 0x58A Offset: 0x58A VA: 0x58A
	|-Array.InternalArray__IReadOnlyList_get_Item<Vector3>
	|
	|-RVA: 0x58B Offset: 0x58B VA: 0x58B
	|-Array.InternalArray__IReadOnlyList_get_Item<Vector4>
	*/

	// RVA: 0x16F Offset: 0x16F VA: 0x16F
	internal int InternalArray__IReadOnlyCollection_get_Count() { }

	// RVA: -1 Offset: -1
	internal void InternalArray__Insert<T>(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
	|-Array.InternalArray__Insert<CodePointIndexer.TableRange>
	|
	|-RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
	|-Array.InternalArray__Insert<bool>
	|
	|-RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
	|-Array.InternalArray__Insert<byte>
	|
	|-RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
	|-Array.InternalArray__Insert<char>
	|
	|-RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
	|-Array.InternalArray__Insert<DictionaryEntry>
	|
	|-RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
	|-Array.InternalArray__Insert<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
	|-Array.InternalArray__Insert<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
	|-Array.InternalArray__Insert<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x4D8 Offset: 0x4D8 VA: 0x4D8
	|-Array.InternalArray__Insert<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9
	|-Array.InternalArray__Insert<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x4DA Offset: 0x4DA VA: 0x4DA
	|-Array.InternalArray__Insert<HashSet.Slot<object>>
	|
	|-RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
	|-Array.InternalArray__Insert<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x4DC Offset: 0x4DC VA: 0x4DC
	|-Array.InternalArray__Insert<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x4DD Offset: 0x4DD VA: 0x4DD
	|-Array.InternalArray__Insert<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x4DE Offset: 0x4DE VA: 0x4DE
	|-Array.InternalArray__Insert<KeyValuePair<int, object>>
	|
	|-RVA: 0x4DF Offset: 0x4DF VA: 0x4DF
	|-Array.InternalArray__Insert<KeyValuePair<object, int>>
	|
	|-RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0
	|-Array.InternalArray__Insert<KeyValuePair<object, object>>
	|
	|-RVA: 0x4E1 Offset: 0x4E1 VA: 0x4E1
	|-Array.InternalArray__Insert<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2
	|-Array.InternalArray__Insert<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3
	|-Array.InternalArray__Insert<Hashtable.bucket>
	|
	|-RVA: 0x4E4 Offset: 0x4E4 VA: 0x4E4
	|-Array.InternalArray__Insert<DateTime>
	|
	|-RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5
	|-Array.InternalArray__Insert<Decimal>
	|
	|-RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6
	|-Array.InternalArray__Insert<EventProvider.SessionInfo>
	|
	|-RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7
	|-Array.InternalArray__Insert<EventSource.EventMetadata>
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-Array.InternalArray__Insert<double>
	|
	|-RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
	|-Array.InternalArray__Insert<InternalCodePageDataItem>
	|
	|-RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9
	|-Array.InternalArray__Insert<InternalEncodingDataItem>
	|
	|-RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
	|-Array.InternalArray__Insert<Guid>
	|
	|-RVA: 0x4EB Offset: 0x4EB VA: 0x4EB
	|-Array.InternalArray__Insert<short>
	|
	|-RVA: 0x4EC Offset: 0x4EC VA: 0x4EC
	|-Array.InternalArray__Insert<int>
	|
	|-RVA: 0x4ED Offset: 0x4ED VA: 0x4ED
	|-Array.InternalArray__Insert<Int32Enum>
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-Array.InternalArray__Insert<long>
	|
	|-RVA: 0x4EE Offset: 0x4EE VA: 0x4EE
	|-Array.InternalArray__Insert<IntPtr>
	|
	|-RVA: 0x3DA Offset: 0x3DA VA: 0x3DA
	|-Array.InternalArray__Insert<object>
	|
	|-RVA: 0x4EF Offset: 0x4EF VA: 0x4EF
	|-Array.InternalArray__Insert<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0
	|-Array.InternalArray__Insert<CustomAttributeNamedArgument>
	|
	|-RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1
	|-Array.InternalArray__Insert<CustomAttributeTypedArgument>
	|
	|-RVA: 0x4F2 Offset: 0x4F2 VA: 0x4F2
	|-Array.InternalArray__Insert<ParameterModifier>
	|
	|-RVA: 0x4F3 Offset: 0x4F3 VA: 0x4F3
	|-Array.InternalArray__Insert<ResourceLocator>
	|
	|-RVA: 0x4F4 Offset: 0x4F4 VA: 0x4F4
	|-Array.InternalArray__Insert<Ephemeron>
	|
	|-RVA: 0x4F5 Offset: 0x4F5 VA: 0x4F5
	|-Array.InternalArray__Insert<GCHandle>
	|
	|-RVA: 0x4F6 Offset: 0x4F6 VA: 0x4F6
	|-Array.InternalArray__Insert<sbyte>
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-Array.InternalArray__Insert<float>
	|-Array.InternalArray__Insert<ulong>
	|
	|-RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7
	|-Array.InternalArray__Insert<CancellationTokenRegistration>
	|
	|-RVA: 0x4F8 Offset: 0x4F8 VA: 0x4F8
	|-Array.InternalArray__Insert<TimeSpan>
	|
	|-RVA: 0x4F9 Offset: 0x4F9 VA: 0x4F9
	|-Array.InternalArray__Insert<ushort>
	|
	|-RVA: 0x4FA Offset: 0x4FA VA: 0x4FA
	|-Array.InternalArray__Insert<uint>
	|
	|-RVA: 0x4FB Offset: 0x4FB VA: 0x4FB
	|-Array.InternalArray__Insert<UIntPtr>
	|
	|-RVA: 0x4FC Offset: 0x4FC VA: 0x4FC
	|-Array.InternalArray__Insert<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x4FD Offset: 0x4FD VA: 0x4FD
	|-Array.InternalArray__Insert<Color32>
	|
	|-RVA: 0x4FE Offset: 0x4FE VA: 0x4FE
	|-Array.InternalArray__Insert<RaycastResult>
	|
	|-RVA: 0x4FF Offset: 0x4FF VA: 0x4FF
	|-Array.InternalArray__Insert<PlayerLoopSystem>
	|
	|-RVA: 0x500 Offset: 0x500 VA: 0x500
	|-Array.InternalArray__Insert<Keyframe>
	|
	|-RVA: 0x501 Offset: 0x501 VA: 0x501
	|-Array.InternalArray__Insert<PlayableBinding>
	|
	|-RVA: 0x502 Offset: 0x502 VA: 0x502
	|-Array.InternalArray__Insert<RaycastHit2D>
	|
	|-RVA: 0x503 Offset: 0x503 VA: 0x503
	|-Array.InternalArray__Insert<RaycastHit>
	|
	|-RVA: 0x504 Offset: 0x504 VA: 0x504
	|-Array.InternalArray__Insert<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x505 Offset: 0x505 VA: 0x505
	|-Array.InternalArray__Insert<ColorBlock>
	|
	|-RVA: 0x506 Offset: 0x506 VA: 0x506
	|-Array.InternalArray__Insert<Navigation>
	|
	|-RVA: 0x507 Offset: 0x507 VA: 0x507
	|-Array.InternalArray__Insert<SpriteState>
	|
	|-RVA: 0x508 Offset: 0x508 VA: 0x508
	|-Array.InternalArray__Insert<UICharInfo>
	|
	|-RVA: 0x509 Offset: 0x509 VA: 0x509
	|-Array.InternalArray__Insert<UILineInfo>
	|
	|-RVA: 0x50A Offset: 0x50A VA: 0x50A
	|-Array.InternalArray__Insert<UIVertex>
	|
	|-RVA: 0x50B Offset: 0x50B VA: 0x50B
	|-Array.InternalArray__Insert<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x50C Offset: 0x50C VA: 0x50C
	|-Array.InternalArray__Insert<Vector2>
	|
	|-RVA: 0x50D Offset: 0x50D VA: 0x50D
	|-Array.InternalArray__Insert<Vector3>
	|
	|-RVA: 0x50E Offset: 0x50E VA: 0x50E
	|-Array.InternalArray__Insert<Vector4>
	*/

	// RVA: 0xA6 Offset: 0xA6 VA: 0xA6
	internal void InternalArray__RemoveAt(int index) { }

	// RVA: -1 Offset: -1
	internal int InternalArray__IndexOf<T>(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x746 Offset: 0x746 VA: 0x746
	|-Array.InternalArray__IndexOf<CodePointIndexer.TableRange>
	|
	|-RVA: 0x747 Offset: 0x747 VA: 0x747
	|-Array.InternalArray__IndexOf<bool>
	|
	|-RVA: 0x748 Offset: 0x748 VA: 0x748
	|-Array.InternalArray__IndexOf<byte>
	|
	|-RVA: 0x749 Offset: 0x749 VA: 0x749
	|-Array.InternalArray__IndexOf<char>
	|
	|-RVA: 0x74A Offset: 0x74A VA: 0x74A
	|-Array.InternalArray__IndexOf<DictionaryEntry>
	|
	|-RVA: 0x74B Offset: 0x74B VA: 0x74B
	|-Array.InternalArray__IndexOf<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x74C Offset: 0x74C VA: 0x74C
	|-Array.InternalArray__IndexOf<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x74D Offset: 0x74D VA: 0x74D
	|-Array.InternalArray__IndexOf<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x74E Offset: 0x74E VA: 0x74E
	|-Array.InternalArray__IndexOf<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x74F Offset: 0x74F VA: 0x74F
	|-Array.InternalArray__IndexOf<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x750 Offset: 0x750 VA: 0x750
	|-Array.InternalArray__IndexOf<HashSet.Slot<object>>
	|
	|-RVA: 0x751 Offset: 0x751 VA: 0x751
	|-Array.InternalArray__IndexOf<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x752 Offset: 0x752 VA: 0x752
	|-Array.InternalArray__IndexOf<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x753 Offset: 0x753 VA: 0x753
	|-Array.InternalArray__IndexOf<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x754 Offset: 0x754 VA: 0x754
	|-Array.InternalArray__IndexOf<KeyValuePair<int, object>>
	|
	|-RVA: 0x755 Offset: 0x755 VA: 0x755
	|-Array.InternalArray__IndexOf<KeyValuePair<object, int>>
	|
	|-RVA: 0x756 Offset: 0x756 VA: 0x756
	|-Array.InternalArray__IndexOf<KeyValuePair<object, object>>
	|
	|-RVA: 0x757 Offset: 0x757 VA: 0x757
	|-Array.InternalArray__IndexOf<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x758 Offset: 0x758 VA: 0x758
	|-Array.InternalArray__IndexOf<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x759 Offset: 0x759 VA: 0x759
	|-Array.InternalArray__IndexOf<Hashtable.bucket>
	|
	|-RVA: 0x75A Offset: 0x75A VA: 0x75A
	|-Array.InternalArray__IndexOf<DateTime>
	|
	|-RVA: 0x75B Offset: 0x75B VA: 0x75B
	|-Array.InternalArray__IndexOf<Decimal>
	|
	|-RVA: 0x75C Offset: 0x75C VA: 0x75C
	|-Array.InternalArray__IndexOf<EventProvider.SessionInfo>
	|
	|-RVA: 0x75D Offset: 0x75D VA: 0x75D
	|-Array.InternalArray__IndexOf<EventSource.EventMetadata>
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-Array.InternalArray__IndexOf<double>
	|
	|-RVA: 0x75E Offset: 0x75E VA: 0x75E
	|-Array.InternalArray__IndexOf<InternalCodePageDataItem>
	|
	|-RVA: 0x75F Offset: 0x75F VA: 0x75F
	|-Array.InternalArray__IndexOf<InternalEncodingDataItem>
	|
	|-RVA: 0x760 Offset: 0x760 VA: 0x760
	|-Array.InternalArray__IndexOf<Guid>
	|
	|-RVA: 0x761 Offset: 0x761 VA: 0x761
	|-Array.InternalArray__IndexOf<short>
	|
	|-RVA: 0x762 Offset: 0x762 VA: 0x762
	|-Array.InternalArray__IndexOf<int>
	|
	|-RVA: 0x763 Offset: 0x763 VA: 0x763
	|-Array.InternalArray__IndexOf<Int32Enum>
	|
	|-RVA: 0x19 Offset: 0x19 VA: 0x19
	|-Array.InternalArray__IndexOf<long>
	|
	|-RVA: 0x764 Offset: 0x764 VA: 0x764
	|-Array.InternalArray__IndexOf<IntPtr>
	|
	|-RVA: 0x62B Offset: 0x62B VA: 0x62B
	|-Array.InternalArray__IndexOf<object>
	|
	|-RVA: 0x765 Offset: 0x765 VA: 0x765
	|-Array.InternalArray__IndexOf<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x766 Offset: 0x766 VA: 0x766
	|-Array.InternalArray__IndexOf<CustomAttributeNamedArgument>
	|
	|-RVA: 0x767 Offset: 0x767 VA: 0x767
	|-Array.InternalArray__IndexOf<CustomAttributeTypedArgument>
	|
	|-RVA: 0x768 Offset: 0x768 VA: 0x768
	|-Array.InternalArray__IndexOf<ParameterModifier>
	|
	|-RVA: 0x769 Offset: 0x769 VA: 0x769
	|-Array.InternalArray__IndexOf<ResourceLocator>
	|
	|-RVA: 0x76A Offset: 0x76A VA: 0x76A
	|-Array.InternalArray__IndexOf<Ephemeron>
	|
	|-RVA: 0x76B Offset: 0x76B VA: 0x76B
	|-Array.InternalArray__IndexOf<GCHandle>
	|
	|-RVA: 0x76C Offset: 0x76C VA: 0x76C
	|-Array.InternalArray__IndexOf<sbyte>
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-Array.InternalArray__IndexOf<float>
	|
	|-RVA: 0x76D Offset: 0x76D VA: 0x76D
	|-Array.InternalArray__IndexOf<CancellationTokenRegistration>
	|
	|-RVA: 0x76E Offset: 0x76E VA: 0x76E
	|-Array.InternalArray__IndexOf<TimeSpan>
	|
	|-RVA: 0x76F Offset: 0x76F VA: 0x76F
	|-Array.InternalArray__IndexOf<ushort>
	|
	|-RVA: 0x770 Offset: 0x770 VA: 0x770
	|-Array.InternalArray__IndexOf<uint>
	|
	|-RVA: 0x1A Offset: 0x1A VA: 0x1A
	|-Array.InternalArray__IndexOf<ulong>
	|
	|-RVA: 0x771 Offset: 0x771 VA: 0x771
	|-Array.InternalArray__IndexOf<UIntPtr>
	|
	|-RVA: 0x772 Offset: 0x772 VA: 0x772
	|-Array.InternalArray__IndexOf<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x773 Offset: 0x773 VA: 0x773
	|-Array.InternalArray__IndexOf<Color32>
	|
	|-RVA: 0x774 Offset: 0x774 VA: 0x774
	|-Array.InternalArray__IndexOf<RaycastResult>
	|
	|-RVA: 0x775 Offset: 0x775 VA: 0x775
	|-Array.InternalArray__IndexOf<PlayerLoopSystem>
	|
	|-RVA: 0x776 Offset: 0x776 VA: 0x776
	|-Array.InternalArray__IndexOf<Keyframe>
	|
	|-RVA: 0x777 Offset: 0x777 VA: 0x777
	|-Array.InternalArray__IndexOf<PlayableBinding>
	|
	|-RVA: 0x778 Offset: 0x778 VA: 0x778
	|-Array.InternalArray__IndexOf<RaycastHit2D>
	|
	|-RVA: 0x779 Offset: 0x779 VA: 0x779
	|-Array.InternalArray__IndexOf<RaycastHit>
	|
	|-RVA: 0x77A Offset: 0x77A VA: 0x77A
	|-Array.InternalArray__IndexOf<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x77B Offset: 0x77B VA: 0x77B
	|-Array.InternalArray__IndexOf<ColorBlock>
	|
	|-RVA: 0x77C Offset: 0x77C VA: 0x77C
	|-Array.InternalArray__IndexOf<Navigation>
	|
	|-RVA: 0x77D Offset: 0x77D VA: 0x77D
	|-Array.InternalArray__IndexOf<SpriteState>
	|
	|-RVA: 0x77E Offset: 0x77E VA: 0x77E
	|-Array.InternalArray__IndexOf<UICharInfo>
	|
	|-RVA: 0x77F Offset: 0x77F VA: 0x77F
	|-Array.InternalArray__IndexOf<UILineInfo>
	|
	|-RVA: 0x780 Offset: 0x780 VA: 0x780
	|-Array.InternalArray__IndexOf<UIVertex>
	|
	|-RVA: 0x781 Offset: 0x781 VA: 0x781
	|-Array.InternalArray__IndexOf<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x782 Offset: 0x782 VA: 0x782
	|-Array.InternalArray__IndexOf<Vector2>
	|
	|-RVA: 0x783 Offset: 0x783 VA: 0x783
	|-Array.InternalArray__IndexOf<Vector3>
	|
	|-RVA: 0x784 Offset: 0x784 VA: 0x784
	|-Array.InternalArray__IndexOf<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal T InternalArray__get_Item<T>(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x58C Offset: 0x58C VA: 0x58C
	|-Array.InternalArray__get_Item<CodePointIndexer.TableRange>
	|
	|-RVA: 0x792 Offset: 0x792 VA: 0x792
	|-Array.InternalArray__get_Item<bool>
	|
	|-RVA: 0x793 Offset: 0x793 VA: 0x793
	|-Array.InternalArray__get_Item<byte>
	|
	|-RVA: 0x794 Offset: 0x794 VA: 0x794
	|-Array.InternalArray__get_Item<char>
	|
	|-RVA: 0x58D Offset: 0x58D VA: 0x58D
	|-Array.InternalArray__get_Item<DictionaryEntry>
	|
	|-RVA: 0x58E Offset: 0x58E VA: 0x58E
	|-Array.InternalArray__get_Item<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x58F Offset: 0x58F VA: 0x58F
	|-Array.InternalArray__get_Item<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x590 Offset: 0x590 VA: 0x590
	|-Array.InternalArray__get_Item<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x591 Offset: 0x591 VA: 0x591
	|-Array.InternalArray__get_Item<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x592 Offset: 0x592 VA: 0x592
	|-Array.InternalArray__get_Item<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x593 Offset: 0x593 VA: 0x593
	|-Array.InternalArray__get_Item<HashSet.Slot<object>>
	|
	|-RVA: 0x594 Offset: 0x594 VA: 0x594
	|-Array.InternalArray__get_Item<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x595 Offset: 0x595 VA: 0x595
	|-Array.InternalArray__get_Item<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x596 Offset: 0x596 VA: 0x596
	|-Array.InternalArray__get_Item<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x597 Offset: 0x597 VA: 0x597
	|-Array.InternalArray__get_Item<KeyValuePair<int, object>>
	|
	|-RVA: 0x598 Offset: 0x598 VA: 0x598
	|-Array.InternalArray__get_Item<KeyValuePair<object, int>>
	|
	|-RVA: 0x599 Offset: 0x599 VA: 0x599
	|-Array.InternalArray__get_Item<KeyValuePair<object, object>>
	|
	|-RVA: 0x59A Offset: 0x59A VA: 0x59A
	|-Array.InternalArray__get_Item<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x59B Offset: 0x59B VA: 0x59B
	|-Array.InternalArray__get_Item<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x59C Offset: 0x59C VA: 0x59C
	|-Array.InternalArray__get_Item<Hashtable.bucket>
	|
	|-RVA: 0x61 Offset: 0x61 VA: 0x61
	|-Array.InternalArray__get_Item<DateTime>
	|
	|-RVA: 0x59D Offset: 0x59D VA: 0x59D
	|-Array.InternalArray__get_Item<Decimal>
	|
	|-RVA: 0x59E Offset: 0x59E VA: 0x59E
	|-Array.InternalArray__get_Item<EventProvider.SessionInfo>
	|
	|-RVA: 0x59F Offset: 0x59F VA: 0x59F
	|-Array.InternalArray__get_Item<EventSource.EventMetadata>
	|
	|-RVA: 0x17 Offset: 0x17 VA: 0x17
	|-Array.InternalArray__get_Item<double>
	|
	|-RVA: 0x5A0 Offset: 0x5A0 VA: 0x5A0
	|-Array.InternalArray__get_Item<InternalCodePageDataItem>
	|
	|-RVA: 0x5A1 Offset: 0x5A1 VA: 0x5A1
	|-Array.InternalArray__get_Item<InternalEncodingDataItem>
	|
	|-RVA: 0x5A2 Offset: 0x5A2 VA: 0x5A2
	|-Array.InternalArray__get_Item<Guid>
	|
	|-RVA: 0x795 Offset: 0x795 VA: 0x795
	|-Array.InternalArray__get_Item<short>
	|
	|-RVA: 0x796 Offset: 0x796 VA: 0x796
	|-Array.InternalArray__get_Item<int>
	|
	|-RVA: 0x797 Offset: 0x797 VA: 0x797
	|-Array.InternalArray__get_Item<Int32Enum>
	|
	|-RVA: 0x62 Offset: 0x62 VA: 0x62
	|-Array.InternalArray__get_Item<long>
	|
	|-RVA: 0x798 Offset: 0x798 VA: 0x798
	|-Array.InternalArray__get_Item<IntPtr>
	|
	|-RVA: 0x62C Offset: 0x62C VA: 0x62C
	|-Array.InternalArray__get_Item<object>
	|
	|-RVA: 0x5A3 Offset: 0x5A3 VA: 0x5A3
	|-Array.InternalArray__get_Item<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x5A4 Offset: 0x5A4 VA: 0x5A4
	|-Array.InternalArray__get_Item<CustomAttributeNamedArgument>
	|
	|-RVA: 0x5A5 Offset: 0x5A5 VA: 0x5A5
	|-Array.InternalArray__get_Item<CustomAttributeTypedArgument>
	|
	|-RVA: 0x799 Offset: 0x799 VA: 0x799
	|-Array.InternalArray__get_Item<ParameterModifier>
	|
	|-RVA: 0x5A6 Offset: 0x5A6 VA: 0x5A6
	|-Array.InternalArray__get_Item<ResourceLocator>
	|
	|-RVA: 0x5A7 Offset: 0x5A7 VA: 0x5A7
	|-Array.InternalArray__get_Item<Ephemeron>
	|
	|-RVA: 0x79A Offset: 0x79A VA: 0x79A
	|-Array.InternalArray__get_Item<GCHandle>
	|
	|-RVA: 0x79B Offset: 0x79B VA: 0x79B
	|-Array.InternalArray__get_Item<sbyte>
	|
	|-RVA: 0x2E Offset: 0x2E VA: 0x2E
	|-Array.InternalArray__get_Item<float>
	|
	|-RVA: 0x5A8 Offset: 0x5A8 VA: 0x5A8
	|-Array.InternalArray__get_Item<CancellationTokenRegistration>
	|
	|-RVA: 0x63 Offset: 0x63 VA: 0x63
	|-Array.InternalArray__get_Item<TimeSpan>
	|
	|-RVA: 0x79C Offset: 0x79C VA: 0x79C
	|-Array.InternalArray__get_Item<ushort>
	|
	|-RVA: 0x79D Offset: 0x79D VA: 0x79D
	|-Array.InternalArray__get_Item<uint>
	|
	|-RVA: 0x64 Offset: 0x64 VA: 0x64
	|-Array.InternalArray__get_Item<ulong>
	|
	|-RVA: 0x79E Offset: 0x79E VA: 0x79E
	|-Array.InternalArray__get_Item<UIntPtr>
	|
	|-RVA: 0x5A9 Offset: 0x5A9 VA: 0x5A9
	|-Array.InternalArray__get_Item<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x5AA Offset: 0x5AA VA: 0x5AA
	|-Array.InternalArray__get_Item<Color32>
	|
	|-RVA: 0x5AB Offset: 0x5AB VA: 0x5AB
	|-Array.InternalArray__get_Item<RaycastResult>
	|
	|-RVA: 0x5AC Offset: 0x5AC VA: 0x5AC
	|-Array.InternalArray__get_Item<PlayerLoopSystem>
	|
	|-RVA: 0x5AD Offset: 0x5AD VA: 0x5AD
	|-Array.InternalArray__get_Item<Keyframe>
	|
	|-RVA: 0x5AE Offset: 0x5AE VA: 0x5AE
	|-Array.InternalArray__get_Item<PlayableBinding>
	|
	|-RVA: 0x5AF Offset: 0x5AF VA: 0x5AF
	|-Array.InternalArray__get_Item<RaycastHit2D>
	|
	|-RVA: 0x5B0 Offset: 0x5B0 VA: 0x5B0
	|-Array.InternalArray__get_Item<RaycastHit>
	|
	|-RVA: 0x5B1 Offset: 0x5B1 VA: 0x5B1
	|-Array.InternalArray__get_Item<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x5B2 Offset: 0x5B2 VA: 0x5B2
	|-Array.InternalArray__get_Item<ColorBlock>
	|
	|-RVA: 0x5B3 Offset: 0x5B3 VA: 0x5B3
	|-Array.InternalArray__get_Item<Navigation>
	|
	|-RVA: 0x5B4 Offset: 0x5B4 VA: 0x5B4
	|-Array.InternalArray__get_Item<SpriteState>
	|
	|-RVA: 0x5B5 Offset: 0x5B5 VA: 0x5B5
	|-Array.InternalArray__get_Item<UICharInfo>
	|
	|-RVA: 0x5B6 Offset: 0x5B6 VA: 0x5B6
	|-Array.InternalArray__get_Item<UILineInfo>
	|
	|-RVA: 0x5B7 Offset: 0x5B7 VA: 0x5B7
	|-Array.InternalArray__get_Item<UIVertex>
	|
	|-RVA: 0x5B8 Offset: 0x5B8 VA: 0x5B8
	|-Array.InternalArray__get_Item<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x5B9 Offset: 0x5B9 VA: 0x5B9
	|-Array.InternalArray__get_Item<Vector2>
	|
	|-RVA: 0x5BA Offset: 0x5BA VA: 0x5BA
	|-Array.InternalArray__get_Item<Vector3>
	|
	|-RVA: 0x5BB Offset: 0x5BB VA: 0x5BB
	|-Array.InternalArray__get_Item<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal void InternalArray__set_Item<T>(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x50F Offset: 0x50F VA: 0x50F
	|-Array.InternalArray__set_Item<CodePointIndexer.TableRange>
	|
	|-RVA: 0x510 Offset: 0x510 VA: 0x510
	|-Array.InternalArray__set_Item<bool>
	|
	|-RVA: 0x511 Offset: 0x511 VA: 0x511
	|-Array.InternalArray__set_Item<byte>
	|
	|-RVA: 0x512 Offset: 0x512 VA: 0x512
	|-Array.InternalArray__set_Item<char>
	|
	|-RVA: 0x513 Offset: 0x513 VA: 0x513
	|-Array.InternalArray__set_Item<DictionaryEntry>
	|
	|-RVA: 0x514 Offset: 0x514 VA: 0x514
	|-Array.InternalArray__set_Item<Dictionary.Entry<int, object>>
	|
	|-RVA: 0x515 Offset: 0x515 VA: 0x515
	|-Array.InternalArray__set_Item<Dictionary.Entry<object, int>>
	|
	|-RVA: 0x516 Offset: 0x516 VA: 0x516
	|-Array.InternalArray__set_Item<Dictionary.Entry<object, object>>
	|
	|-RVA: 0x517 Offset: 0x517 VA: 0x517
	|-Array.InternalArray__set_Item<Dictionary.Entry<object, ResourceLocator>>
	|
	|-RVA: 0x518 Offset: 0x518 VA: 0x518
	|-Array.InternalArray__set_Item<Dictionary.Entry<ulong, object>>
	|
	|-RVA: 0x519 Offset: 0x519 VA: 0x519
	|-Array.InternalArray__set_Item<HashSet.Slot<object>>
	|
	|-RVA: 0x51A Offset: 0x51A VA: 0x51A
	|-Array.InternalArray__set_Item<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x51B Offset: 0x51B VA: 0x51B
	|-Array.InternalArray__set_Item<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x51C Offset: 0x51C VA: 0x51C
	|-Array.InternalArray__set_Item<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x51D Offset: 0x51D VA: 0x51D
	|-Array.InternalArray__set_Item<KeyValuePair<int, object>>
	|
	|-RVA: 0x51E Offset: 0x51E VA: 0x51E
	|-Array.InternalArray__set_Item<KeyValuePair<object, int>>
	|
	|-RVA: 0x51F Offset: 0x51F VA: 0x51F
	|-Array.InternalArray__set_Item<KeyValuePair<object, object>>
	|
	|-RVA: 0x520 Offset: 0x520 VA: 0x520
	|-Array.InternalArray__set_Item<KeyValuePair<object, ResourceLocator>>
	|
	|-RVA: 0x521 Offset: 0x521 VA: 0x521
	|-Array.InternalArray__set_Item<KeyValuePair<ulong, object>>
	|
	|-RVA: 0x522 Offset: 0x522 VA: 0x522
	|-Array.InternalArray__set_Item<Hashtable.bucket>
	|
	|-RVA: 0x523 Offset: 0x523 VA: 0x523
	|-Array.InternalArray__set_Item<DateTime>
	|
	|-RVA: 0x524 Offset: 0x524 VA: 0x524
	|-Array.InternalArray__set_Item<Decimal>
	|
	|-RVA: 0x525 Offset: 0x525 VA: 0x525
	|-Array.InternalArray__set_Item<EventProvider.SessionInfo>
	|
	|-RVA: 0x526 Offset: 0x526 VA: 0x526
	|-Array.InternalArray__set_Item<EventSource.EventMetadata>
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-Array.InternalArray__set_Item<double>
	|
	|-RVA: 0x527 Offset: 0x527 VA: 0x527
	|-Array.InternalArray__set_Item<InternalCodePageDataItem>
	|
	|-RVA: 0x528 Offset: 0x528 VA: 0x528
	|-Array.InternalArray__set_Item<InternalEncodingDataItem>
	|
	|-RVA: 0x529 Offset: 0x529 VA: 0x529
	|-Array.InternalArray__set_Item<Guid>
	|
	|-RVA: 0x52A Offset: 0x52A VA: 0x52A
	|-Array.InternalArray__set_Item<short>
	|
	|-RVA: 0x52B Offset: 0x52B VA: 0x52B
	|-Array.InternalArray__set_Item<int>
	|
	|-RVA: 0x52C Offset: 0x52C VA: 0x52C
	|-Array.InternalArray__set_Item<Int32Enum>
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-Array.InternalArray__set_Item<long>
	|-Array.InternalArray__set_Item<float>
	|
	|-RVA: 0x52D Offset: 0x52D VA: 0x52D
	|-Array.InternalArray__set_Item<IntPtr>
	|
	|-RVA: 0x3DB Offset: 0x3DB VA: 0x3DB
	|-Array.InternalArray__set_Item<object>
	|
	|-RVA: 0x52E Offset: 0x52E VA: 0x52E
	|-Array.InternalArray__set_Item<ParameterizedStrings.FormatParam>
	|
	|-RVA: 0x52F Offset: 0x52F VA: 0x52F
	|-Array.InternalArray__set_Item<CustomAttributeNamedArgument>
	|
	|-RVA: 0x530 Offset: 0x530 VA: 0x530
	|-Array.InternalArray__set_Item<CustomAttributeTypedArgument>
	|
	|-RVA: 0x531 Offset: 0x531 VA: 0x531
	|-Array.InternalArray__set_Item<ParameterModifier>
	|
	|-RVA: 0x532 Offset: 0x532 VA: 0x532
	|-Array.InternalArray__set_Item<ResourceLocator>
	|
	|-RVA: 0x533 Offset: 0x533 VA: 0x533
	|-Array.InternalArray__set_Item<Ephemeron>
	|
	|-RVA: 0x534 Offset: 0x534 VA: 0x534
	|-Array.InternalArray__set_Item<GCHandle>
	|
	|-RVA: 0x535 Offset: 0x535 VA: 0x535
	|-Array.InternalArray__set_Item<sbyte>
	|
	|-RVA: 0x536 Offset: 0x536 VA: 0x536
	|-Array.InternalArray__set_Item<CancellationTokenRegistration>
	|
	|-RVA: 0x537 Offset: 0x537 VA: 0x537
	|-Array.InternalArray__set_Item<TimeSpan>
	|
	|-RVA: 0x538 Offset: 0x538 VA: 0x538
	|-Array.InternalArray__set_Item<ushort>
	|
	|-RVA: 0x539 Offset: 0x539 VA: 0x539
	|-Array.InternalArray__set_Item<uint>
	|
	|-RVA: 0x16 Offset: 0x16 VA: 0x16
	|-Array.InternalArray__set_Item<ulong>
	|
	|-RVA: 0x53A Offset: 0x53A VA: 0x53A
	|-Array.InternalArray__set_Item<UIntPtr>
	|
	|-RVA: 0x53B Offset: 0x53B VA: 0x53B
	|-Array.InternalArray__set_Item<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x53C Offset: 0x53C VA: 0x53C
	|-Array.InternalArray__set_Item<Color32>
	|
	|-RVA: 0x53D Offset: 0x53D VA: 0x53D
	|-Array.InternalArray__set_Item<RaycastResult>
	|
	|-RVA: 0x53E Offset: 0x53E VA: 0x53E
	|-Array.InternalArray__set_Item<PlayerLoopSystem>
	|
	|-RVA: 0x53F Offset: 0x53F VA: 0x53F
	|-Array.InternalArray__set_Item<Keyframe>
	|
	|-RVA: 0x540 Offset: 0x540 VA: 0x540
	|-Array.InternalArray__set_Item<PlayableBinding>
	|
	|-RVA: 0x541 Offset: 0x541 VA: 0x541
	|-Array.InternalArray__set_Item<RaycastHit2D>
	|
	|-RVA: 0x542 Offset: 0x542 VA: 0x542
	|-Array.InternalArray__set_Item<RaycastHit>
	|
	|-RVA: 0x543 Offset: 0x543 VA: 0x543
	|-Array.InternalArray__set_Item<SendMouseEvents.HitInfo>
	|
	|-RVA: 0x544 Offset: 0x544 VA: 0x544
	|-Array.InternalArray__set_Item<ColorBlock>
	|
	|-RVA: 0x545 Offset: 0x545 VA: 0x545
	|-Array.InternalArray__set_Item<Navigation>
	|
	|-RVA: 0x546 Offset: 0x546 VA: 0x546
	|-Array.InternalArray__set_Item<SpriteState>
	|
	|-RVA: 0x547 Offset: 0x547 VA: 0x547
	|-Array.InternalArray__set_Item<UICharInfo>
	|
	|-RVA: 0x548 Offset: 0x548 VA: 0x548
	|-Array.InternalArray__set_Item<UILineInfo>
	|
	|-RVA: 0x549 Offset: 0x549 VA: 0x549
	|-Array.InternalArray__set_Item<UIVertex>
	|
	|-RVA: 0x54A Offset: 0x54A VA: 0x54A
	|-Array.InternalArray__set_Item<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x54B Offset: 0x54B VA: 0x54B
	|-Array.InternalArray__set_Item<Vector2>
	|
	|-RVA: 0x54C Offset: 0x54C VA: 0x54C
	|-Array.InternalArray__set_Item<Vector3>
	|
	|-RVA: 0x54D Offset: 0x54D VA: 0x54D
	|-Array.InternalArray__set_Item<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal void GetGenericValueImpl<T>(int pos, out T value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Array.GetGenericValueImpl<object>
	*/

	// RVA: -1 Offset: -1
	internal void SetGenericValueImpl<T>(int pos, ref T value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Array.SetGenericValueImpl<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x5D5 Offset: 0x5D5 VA: 0x5D5
	// RVA: 0x170 Offset: 0x170 VA: 0x170
	public int get_Length() { }

	[ReliabilityContractAttribute] // RVA: 0x5D6 Offset: 0x5D6 VA: 0x5D6
	// RVA: 0x171 Offset: 0x171 VA: 0x171
	public int get_Rank() { }

	// RVA: 0x172 Offset: 0x172 VA: 0x172
	private int GetRank() { }

	// RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	public int GetLength(int dimension) { }

	[ReliabilityContractAttribute] // RVA: 0x5D7 Offset: 0x5D7 VA: 0x5D7
	// RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	public int GetLowerBound(int dimension) { }

	// RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	public object GetValue(int[] indices) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70
	public void SetValue(object value, int[] indices) { }

	// RVA: 0xB8 Offset: 0xB8 VA: 0xB8
	internal object GetValueImpl(int pos) { }

	// RVA: 0x71 Offset: 0x71 VA: 0x71
	internal void SetValueImpl(object value, int pos) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length) { }

	// RVA: 0x804 Offset: 0x804 VA: 0x804
	internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds) { }

	[ReliabilityContractAttribute] // RVA: 0x5D8 Offset: 0x5D8 VA: 0x5D8
	// RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	public int GetUpperBound(int dimension) { }

	// RVA: 0xBA Offset: 0xBA VA: 0xBA
	public object GetValue(int index) { }

	// RVA: 0x805 Offset: 0x805 VA: 0x805
	public object GetValue(int index1, int index2) { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37
	public object GetValue(int index1, int index2, int index3) { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72
	public void SetValue(object value, int index) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	public void SetValue(object value, int index1, int index2) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	public void SetValue(object value, int index1, int index2, int index3) { }

	// RVA: 0x806 Offset: 0x806 VA: 0x806
	internal static Array UnsafeCreateInstance(Type elementType, int[] lengths, int[] lowerBounds) { }

	// RVA: 0x807 Offset: 0x807 VA: 0x807
	internal static Array UnsafeCreateInstance(Type elementType, int length1, int length2) { }

	// RVA: 0xBB Offset: 0xBB VA: 0xBB
	internal static Array UnsafeCreateInstance(Type elementType, int[] lengths) { }

	// RVA: 0xBC Offset: 0xBC VA: 0xBC
	public static Array CreateInstance(Type elementType, int length) { }

	// RVA: 0x808 Offset: 0x808 VA: 0x808
	public static Array CreateInstance(Type elementType, int length1, int length2) { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38
	public static Array CreateInstance(Type elementType, int length1, int length2, int length3) { }

	// RVA: 0xBD Offset: 0xBD VA: 0xBD
	public static Array CreateInstance(Type elementType, int[] lengths) { }

	// RVA: 0x809 Offset: 0x809 VA: 0x809
	public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds) { }

	[ReliabilityContractAttribute] // RVA: 0x5D9 Offset: 0x5D9 VA: 0x5D9
	// RVA: 0x73 Offset: 0x73 VA: 0x73
	public static void Clear(Array array, int index, int length) { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	private static void ClearInternal(Array a, int index, int count) { }

	[ReliabilityContractAttribute] // RVA: 0x5DA Offset: 0x5DA VA: 0x5DA
	// RVA: 0x75 Offset: 0x75 VA: 0x75
	public static void Copy(Array sourceArray, Array destinationArray, int length) { }

	[ReliabilityContractAttribute] // RVA: 0x5DB Offset: 0x5DB VA: 0x5DB
	// RVA: 0x25 Offset: 0x25 VA: 0x25
	public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) { }

	// RVA: 0x189 Offset: 0x189 VA: 0x189
	private static Exception CreateArrayTypeMismatchException() { }

	// RVA: 0xBE Offset: 0xBE VA: 0xBE
	private static bool CanAssignArrayElement(Type source, Type target) { }

	[ReliabilityContractAttribute] // RVA: 0x5DC Offset: 0x5DC VA: 0x5DC
	// RVA: 0x26 Offset: 0x26 VA: 0x26
	public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) { }

	// RVA: -1 Offset: -1
	public static T[] Empty<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
	|-Array.Empty<char>
	|
	|-RVA: 0x2BC Offset: 0x2BC VA: 0x2BC
	|-Array.Empty<KeyValuePair<Guid, int>>
	|
	|-RVA: 0x2BD Offset: 0x2BD VA: 0x2BD
	|-Array.Empty<KeyValuePair<Guid, object>>
	|
	|-RVA: 0x2BE Offset: 0x2BE VA: 0x2BE
	|-Array.Empty<KeyValuePair<object, object>>
	|
	|-RVA: 0x2A3 Offset: 0x2A3 VA: 0x2A3
	|-Array.Empty<object>
	|-Array.Empty<string>
	*/

	// RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7
	public void Initialize() { }

	// RVA: -1 Offset: -1
	private static int IndexOfImpl<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x174 Offset: 0x174 VA: 0x174
	|-Array.IndexOfImpl<byte>
	|
	|-RVA: 0x175 Offset: 0x175 VA: 0x175
	|-Array.IndexOfImpl<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x176 Offset: 0x176 VA: 0x176
	|-Array.IndexOfImpl<EventProvider.SessionInfo>
	|
	|-RVA: 0x177 Offset: 0x177 VA: 0x177
	|-Array.IndexOfImpl<int>
	|
	|-RVA: 0x155 Offset: 0x155 VA: 0x155
	|-Array.IndexOfImpl<object>
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-Array.IndexOfImpl<ulong>
	|
	|-RVA: 0x178 Offset: 0x178 VA: 0x178
	|-Array.IndexOfImpl<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x179 Offset: 0x179 VA: 0x179
	|-Array.IndexOfImpl<Color32>
	|
	|-RVA: 0x17A Offset: 0x17A VA: 0x17A
	|-Array.IndexOfImpl<RaycastResult>
	|
	|-RVA: 0x17B Offset: 0x17B VA: 0x17B
	|-Array.IndexOfImpl<UICharInfo>
	|
	|-RVA: 0x17C Offset: 0x17C VA: 0x17C
	|-Array.IndexOfImpl<UILineInfo>
	|
	|-RVA: 0x17D Offset: 0x17D VA: 0x17D
	|-Array.IndexOfImpl<UIVertex>
	|
	|-RVA: 0x17E Offset: 0x17E VA: 0x17E
	|-Array.IndexOfImpl<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x17F Offset: 0x17F VA: 0x17F
	|-Array.IndexOfImpl<Vector2>
	|
	|-RVA: 0x180 Offset: 0x180 VA: 0x180
	|-Array.IndexOfImpl<Vector3>
	|
	|-RVA: 0x181 Offset: 0x181 VA: 0x181
	|-Array.IndexOfImpl<Vector4>
	*/

	// RVA: -1 Offset: -1
	private static int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x156 Offset: 0x156 VA: 0x156
	|-Array.LastIndexOfImpl<object>
	*/

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	private static void SortImpl(Array keys, Array items, int index, int length, IComparer comparer) { }

	// RVA: -1 Offset: -1
	internal static T UnsafeLoad<T>(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x79F Offset: 0x79F VA: 0x79F
	|-Array.UnsafeLoad<byte>
	|
	|-RVA: 0x5BC Offset: 0x5BC VA: 0x5BC
	|-Array.UnsafeLoad<KeyValuePair<DateTime, object>>
	|
	|-RVA: 0x5BD Offset: 0x5BD VA: 0x5BD
	|-Array.UnsafeLoad<EventProvider.SessionInfo>
	|
	|-RVA: 0x7A0 Offset: 0x7A0 VA: 0x7A0
	|-Array.UnsafeLoad<int>
	|
	|-RVA: 0x62D Offset: 0x62D VA: 0x62D
	|-Array.UnsafeLoad<object>
	|
	|-RVA: 0x65 Offset: 0x65 VA: 0x65
	|-Array.UnsafeLoad<ulong>
	|
	|-RVA: 0x5BE Offset: 0x5BE VA: 0x5BE
	|-Array.UnsafeLoad<BeforeRenderHelper.OrderBlock>
	|
	|-RVA: 0x5BF Offset: 0x5BF VA: 0x5BF
	|-Array.UnsafeLoad<Color32>
	|
	|-RVA: 0x5C0 Offset: 0x5C0 VA: 0x5C0
	|-Array.UnsafeLoad<RaycastResult>
	|
	|-RVA: 0x5C1 Offset: 0x5C1 VA: 0x5C1
	|-Array.UnsafeLoad<UICharInfo>
	|
	|-RVA: 0x5C2 Offset: 0x5C2 VA: 0x5C2
	|-Array.UnsafeLoad<UILineInfo>
	|
	|-RVA: 0x5C3 Offset: 0x5C3 VA: 0x5C3
	|-Array.UnsafeLoad<UIVertex>
	|
	|-RVA: 0x5C4 Offset: 0x5C4 VA: 0x5C4
	|-Array.UnsafeLoad<UnitySynchronizationContext.WorkRequest>
	|
	|-RVA: 0x5C5 Offset: 0x5C5 VA: 0x5C5
	|-Array.UnsafeLoad<Vector2>
	|
	|-RVA: 0x5C6 Offset: 0x5C6 VA: 0x5C6
	|-Array.UnsafeLoad<Vector3>
	|
	|-RVA: 0x5C7 Offset: 0x5C7 VA: 0x5C7
	|-Array.UnsafeLoad<Vector4>
	*/

	// RVA: -1 Offset: -1
	internal static void UnsafeStore<T>(T[] array, int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3DC Offset: 0x3DC VA: 0x3DC
	|-Array.UnsafeStore<object>
	*/

	// RVA: -1 Offset: -1
	internal static R UnsafeMov<S, R>(S instance) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE10 Offset: 0xE10 VA: 0xE10
	|-Array.UnsafeMov<Int32Enum, int>
	|
	|-RVA: 0xD02 Offset: 0xD02 VA: 0xD02
	|-Array.UnsafeMov<object, object>
	*/
}

// Namespace: 
private sealed class Array.ArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 77
{
	// Fields
	private Array _array; // 0x8
	private int _index; // 0xC
	private int _endIndex; // 0x10

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0xA7 Offset: 0xA7 VA: 0xA7
	internal void .ctor(Array array) { }

	// RVA: 0x173 Offset: 0x173 VA: 0x173 Slot: 4
	public bool MoveNext() { }

	// RVA: 0x174 Offset: 0x174 VA: 0x174 Slot: 6
	public object Clone() { }

	// RVA: 0x175 Offset: 0x175 VA: 0x175 Slot: 5
	public object get_Current() { }
}

// Namespace: 
internal struct Array.InternalEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 78
{
	// Fields
	private readonly Array array; // 0xFFFFFFFF
	private int idx; // 0xFFFFFFFF

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Array array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x928 Offset: 0x928 VA: 0x928
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>..ctor
	|
	|-RVA: 0x92A Offset: 0x92A VA: 0x92A
	|-Array.InternalEnumerator<bool>..ctor
	|
	|-RVA: 0x92B Offset: 0x92B VA: 0x92B
	|-Array.InternalEnumerator<byte>..ctor
	|
	|-RVA: 0x92C Offset: 0x92C VA: 0x92C
	|-Array.InternalEnumerator<char>..ctor
	|
	|-RVA: 0x92D Offset: 0x92D VA: 0x92D
	|-Array.InternalEnumerator<DictionaryEntry>..ctor
	|
	|-RVA: 0x92F Offset: 0x92F VA: 0x92F
	|-Array.InternalEnumerator<Dictionary.Entry<int, object>>..ctor
	|
	|-RVA: 0x931 Offset: 0x931 VA: 0x931
	|-Array.InternalEnumerator<Dictionary.Entry<object, int>>..ctor
	|
	|-RVA: 0x933 Offset: 0x933 VA: 0x933
	|-Array.InternalEnumerator<Dictionary.Entry<object, object>>..ctor
	|
	|-RVA: 0x935 Offset: 0x935 VA: 0x935
	|-Array.InternalEnumerator<Dictionary.Entry<object, ResourceLocator>>..ctor
	|
	|-RVA: 0x937 Offset: 0x937 VA: 0x937
	|-Array.InternalEnumerator<Dictionary.Entry<ulong, object>>..ctor
	|
	|-RVA: 0x939 Offset: 0x939 VA: 0x939
	|-Array.InternalEnumerator<HashSet.Slot<object>>..ctor
	|
	|-RVA: 0x93B Offset: 0x93B VA: 0x93B
	|-Array.InternalEnumerator<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0x93D Offset: 0x93D VA: 0x93D
	|-Array.InternalEnumerator<KeyValuePair<Guid, int>>..ctor
	|
	|-RVA: 0x93F Offset: 0x93F VA: 0x93F
	|-Array.InternalEnumerator<KeyValuePair<Guid, object>>..ctor
	|
	|-RVA: 0x941 Offset: 0x941 VA: 0x941
	|-Array.InternalEnumerator<KeyValuePair<int, object>>..ctor
	|
	|-RVA: 0x943 Offset: 0x943 VA: 0x943
	|-Array.InternalEnumerator<KeyValuePair<object, int>>..ctor
	|
	|-RVA: 0x945 Offset: 0x945 VA: 0x945
	|-Array.InternalEnumerator<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x947 Offset: 0x947 VA: 0x947
	|-Array.InternalEnumerator<KeyValuePair<object, ResourceLocator>>..ctor
	|
	|-RVA: 0x949 Offset: 0x949 VA: 0x949
	|-Array.InternalEnumerator<KeyValuePair<ulong, object>>..ctor
	|
	|-RVA: 0x94B Offset: 0x94B VA: 0x94B
	|-Array.InternalEnumerator<Hashtable.bucket>..ctor
	|
	|-RVA: 0x94D Offset: 0x94D VA: 0x94D
	|-Array.InternalEnumerator<DateTime>..ctor
	|
	|-RVA: 0x94E Offset: 0x94E VA: 0x94E
	|-Array.InternalEnumerator<Decimal>..ctor
	|
	|-RVA: 0x950 Offset: 0x950 VA: 0x950
	|-Array.InternalEnumerator<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x952 Offset: 0x952 VA: 0x952
	|-Array.InternalEnumerator<EventSource.EventMetadata>..ctor
	|
	|-RVA: 0x954 Offset: 0x954 VA: 0x954
	|-Array.InternalEnumerator<double>..ctor
	|
	|-RVA: 0x955 Offset: 0x955 VA: 0x955
	|-Array.InternalEnumerator<InternalCodePageDataItem>..ctor
	|
	|-RVA: 0x957 Offset: 0x957 VA: 0x957
	|-Array.InternalEnumerator<InternalEncodingDataItem>..ctor
	|
	|-RVA: 0x959 Offset: 0x959 VA: 0x959
	|-Array.InternalEnumerator<Guid>..ctor
	|
	|-RVA: 0x95B Offset: 0x95B VA: 0x95B
	|-Array.InternalEnumerator<short>..ctor
	|
	|-RVA: 0x95C Offset: 0x95C VA: 0x95C
	|-Array.InternalEnumerator<int>..ctor
	|
	|-RVA: 0x95D Offset: 0x95D VA: 0x95D
	|-Array.InternalEnumerator<Int32Enum>..ctor
	|
	|-RVA: 0x95E Offset: 0x95E VA: 0x95E
	|-Array.InternalEnumerator<long>..ctor
	|
	|-RVA: 0x95F Offset: 0x95F VA: 0x95F
	|-Array.InternalEnumerator<IntPtr>..ctor
	|
	|-RVA: 0x7E5 Offset: 0x7E5 VA: 0x7E5
	|-Array.InternalEnumerator<object>..ctor
	|
	|-RVA: 0x960 Offset: 0x960 VA: 0x960
	|-Array.InternalEnumerator<ParameterizedStrings.FormatParam>..ctor
	|
	|-RVA: 0x962 Offset: 0x962 VA: 0x962
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x964 Offset: 0x964 VA: 0x964
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x966 Offset: 0x966 VA: 0x966
	|-Array.InternalEnumerator<ParameterModifier>..ctor
	|
	|-RVA: 0x967 Offset: 0x967 VA: 0x967
	|-Array.InternalEnumerator<ResourceLocator>..ctor
	|
	|-RVA: 0x969 Offset: 0x969 VA: 0x969
	|-Array.InternalEnumerator<Ephemeron>..ctor
	|
	|-RVA: 0x96B Offset: 0x96B VA: 0x96B
	|-Array.InternalEnumerator<GCHandle>..ctor
	|
	|-RVA: 0x96C Offset: 0x96C VA: 0x96C
	|-Array.InternalEnumerator<sbyte>..ctor
	|
	|-RVA: 0x96D Offset: 0x96D VA: 0x96D
	|-Array.InternalEnumerator<float>..ctor
	|
	|-RVA: 0x96E Offset: 0x96E VA: 0x96E
	|-Array.InternalEnumerator<CancellationTokenRegistration>..ctor
	|
	|-RVA: 0x970 Offset: 0x970 VA: 0x970
	|-Array.InternalEnumerator<TimeSpan>..ctor
	|
	|-RVA: 0x971 Offset: 0x971 VA: 0x971
	|-Array.InternalEnumerator<ushort>..ctor
	|
	|-RVA: 0x972 Offset: 0x972 VA: 0x972
	|-Array.InternalEnumerator<uint>..ctor
	|
	|-RVA: 0x973 Offset: 0x973 VA: 0x973
	|-Array.InternalEnumerator<ulong>..ctor
	|
	|-RVA: 0x974 Offset: 0x974 VA: 0x974
	|-Array.InternalEnumerator<UIntPtr>..ctor
	|
	|-RVA: 0x975 Offset: 0x975 VA: 0x975
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x977 Offset: 0x977 VA: 0x977
	|-Array.InternalEnumerator<Color32>..ctor
	|
	|-RVA: 0x979 Offset: 0x979 VA: 0x979
	|-Array.InternalEnumerator<RaycastResult>..ctor
	|
	|-RVA: 0x97B Offset: 0x97B VA: 0x97B
	|-Array.InternalEnumerator<PlayerLoopSystem>..ctor
	|
	|-RVA: 0x97D Offset: 0x97D VA: 0x97D
	|-Array.InternalEnumerator<Keyframe>..ctor
	|
	|-RVA: 0x97F Offset: 0x97F VA: 0x97F
	|-Array.InternalEnumerator<PlayableBinding>..ctor
	|
	|-RVA: 0x981 Offset: 0x981 VA: 0x981
	|-Array.InternalEnumerator<RaycastHit2D>..ctor
	|
	|-RVA: 0x983 Offset: 0x983 VA: 0x983
	|-Array.InternalEnumerator<RaycastHit>..ctor
	|
	|-RVA: 0x985 Offset: 0x985 VA: 0x985
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>..ctor
	|
	|-RVA: 0x987 Offset: 0x987 VA: 0x987
	|-Array.InternalEnumerator<ColorBlock>..ctor
	|
	|-RVA: 0x989 Offset: 0x989 VA: 0x989
	|-Array.InternalEnumerator<Navigation>..ctor
	|
	|-RVA: 0x98B Offset: 0x98B VA: 0x98B
	|-Array.InternalEnumerator<SpriteState>..ctor
	|
	|-RVA: 0x98D Offset: 0x98D VA: 0x98D
	|-Array.InternalEnumerator<UICharInfo>..ctor
	|
	|-RVA: 0x98F Offset: 0x98F VA: 0x98F
	|-Array.InternalEnumerator<UILineInfo>..ctor
	|
	|-RVA: 0x991 Offset: 0x991 VA: 0x991
	|-Array.InternalEnumerator<UIVertex>..ctor
	|
	|-RVA: 0x993 Offset: 0x993 VA: 0x993
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x995 Offset: 0x995 VA: 0x995
	|-Array.InternalEnumerator<Vector2>..ctor
	|
	|-RVA: 0x997 Offset: 0x997 VA: 0x997
	|-Array.InternalEnumerator<Vector3>..ctor
	|
	|-RVA: 0x999 Offset: 0x999 VA: 0x999
	|-Array.InternalEnumerator<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9DA Offset: 0x9DA VA: 0x9DA
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.Dispose
	|
	|-RVA: 0x9DB Offset: 0x9DB VA: 0x9DB
	|-Array.InternalEnumerator<bool>.Dispose
	|
	|-RVA: 0x9DC Offset: 0x9DC VA: 0x9DC
	|-Array.InternalEnumerator<byte>.Dispose
	|
	|-RVA: 0x9DD Offset: 0x9DD VA: 0x9DD
	|-Array.InternalEnumerator<char>.Dispose
	|
	|-RVA: 0x9DE Offset: 0x9DE VA: 0x9DE
	|-Array.InternalEnumerator<DictionaryEntry>.Dispose
	|
	|-RVA: 0x9DF Offset: 0x9DF VA: 0x9DF
	|-Array.InternalEnumerator<Dictionary.Entry<int, object>>.Dispose
	|
	|-RVA: 0x9E0 Offset: 0x9E0 VA: 0x9E0
	|-Array.InternalEnumerator<Dictionary.Entry<object, int>>.Dispose
	|
	|-RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1
	|-Array.InternalEnumerator<Dictionary.Entry<object, object>>.Dispose
	|
	|-RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2
	|-Array.InternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.Dispose
	|
	|-RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3
	|-Array.InternalEnumerator<Dictionary.Entry<ulong, object>>.Dispose
	|
	|-RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4
	|-Array.InternalEnumerator<HashSet.Slot<object>>.Dispose
	|
	|-RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5
	|-Array.InternalEnumerator<KeyValuePair<DateTime, object>>.Dispose
	|
	|-RVA: 0x9E6 Offset: 0x9E6 VA: 0x9E6
	|-Array.InternalEnumerator<KeyValuePair<Guid, int>>.Dispose
	|
	|-RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7
	|-Array.InternalEnumerator<KeyValuePair<Guid, object>>.Dispose
	|
	|-RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.Dispose
	|
	|-RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.Dispose
	|
	|-RVA: 0x9EA Offset: 0x9EA VA: 0x9EA
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.Dispose
	|
	|-RVA: 0x9EB Offset: 0x9EB VA: 0x9EB
	|-Array.InternalEnumerator<KeyValuePair<object, ResourceLocator>>.Dispose
	|
	|-RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	|-Array.InternalEnumerator<KeyValuePair<ulong, object>>.Dispose
	|
	|-RVA: 0x9ED Offset: 0x9ED VA: 0x9ED
	|-Array.InternalEnumerator<Hashtable.bucket>.Dispose
	|
	|-RVA: 0x9EE Offset: 0x9EE VA: 0x9EE
	|-Array.InternalEnumerator<DateTime>.Dispose
	|
	|-RVA: 0x9EF Offset: 0x9EF VA: 0x9EF
	|-Array.InternalEnumerator<Decimal>.Dispose
	|
	|-RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	|-Array.InternalEnumerator<EventProvider.SessionInfo>.Dispose
	|
	|-RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1
	|-Array.InternalEnumerator<EventSource.EventMetadata>.Dispose
	|
	|-RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2
	|-Array.InternalEnumerator<double>.Dispose
	|
	|-RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3
	|-Array.InternalEnumerator<InternalCodePageDataItem>.Dispose
	|
	|-RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	|-Array.InternalEnumerator<InternalEncodingDataItem>.Dispose
	|
	|-RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	|-Array.InternalEnumerator<Guid>.Dispose
	|
	|-RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	|-Array.InternalEnumerator<short>.Dispose
	|
	|-RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	|-Array.InternalEnumerator<int>.Dispose
	|
	|-RVA: 0x9F8 Offset: 0x9F8 VA: 0x9F8
	|-Array.InternalEnumerator<Int32Enum>.Dispose
	|
	|-RVA: 0x9F9 Offset: 0x9F9 VA: 0x9F9
	|-Array.InternalEnumerator<long>.Dispose
	|
	|-RVA: 0x9FA Offset: 0x9FA VA: 0x9FA
	|-Array.InternalEnumerator<IntPtr>.Dispose
	|
	|-RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1
	|-Array.InternalEnumerator<object>.Dispose
	|
	|-RVA: 0x9FB Offset: 0x9FB VA: 0x9FB
	|-Array.InternalEnumerator<ParameterizedStrings.FormatParam>.Dispose
	|
	|-RVA: 0x9FC Offset: 0x9FC VA: 0x9FC
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.Dispose
	|
	|-RVA: 0x9FD Offset: 0x9FD VA: 0x9FD
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.Dispose
	|
	|-RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	|-Array.InternalEnumerator<ParameterModifier>.Dispose
	|
	|-RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	|-Array.InternalEnumerator<ResourceLocator>.Dispose
	|
	|-RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	|-Array.InternalEnumerator<Ephemeron>.Dispose
	|
	|-RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	|-Array.InternalEnumerator<GCHandle>.Dispose
	|
	|-RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	|-Array.InternalEnumerator<sbyte>.Dispose
	|
	|-RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	|-Array.InternalEnumerator<float>.Dispose
	|
	|-RVA: 0xA04 Offset: 0xA04 VA: 0xA04
	|-Array.InternalEnumerator<CancellationTokenRegistration>.Dispose
	|
	|-RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	|-Array.InternalEnumerator<TimeSpan>.Dispose
	|
	|-RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	|-Array.InternalEnumerator<ushort>.Dispose
	|
	|-RVA: 0xA07 Offset: 0xA07 VA: 0xA07
	|-Array.InternalEnumerator<uint>.Dispose
	|
	|-RVA: 0xA08 Offset: 0xA08 VA: 0xA08
	|-Array.InternalEnumerator<ulong>.Dispose
	|
	|-RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	|-Array.InternalEnumerator<UIntPtr>.Dispose
	|
	|-RVA: 0xA0A Offset: 0xA0A VA: 0xA0A
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.Dispose
	|
	|-RVA: 0xA0B Offset: 0xA0B VA: 0xA0B
	|-Array.InternalEnumerator<Color32>.Dispose
	|
	|-RVA: 0xA0C Offset: 0xA0C VA: 0xA0C
	|-Array.InternalEnumerator<RaycastResult>.Dispose
	|
	|-RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	|-Array.InternalEnumerator<PlayerLoopSystem>.Dispose
	|
	|-RVA: 0xA0E Offset: 0xA0E VA: 0xA0E
	|-Array.InternalEnumerator<Keyframe>.Dispose
	|
	|-RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	|-Array.InternalEnumerator<PlayableBinding>.Dispose
	|
	|-RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	|-Array.InternalEnumerator<RaycastHit2D>.Dispose
	|
	|-RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	|-Array.InternalEnumerator<RaycastHit>.Dispose
	|
	|-RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.Dispose
	|
	|-RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	|-Array.InternalEnumerator<ColorBlock>.Dispose
	|
	|-RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	|-Array.InternalEnumerator<Navigation>.Dispose
	|
	|-RVA: 0xA15 Offset: 0xA15 VA: 0xA15
	|-Array.InternalEnumerator<SpriteState>.Dispose
	|
	|-RVA: 0xA16 Offset: 0xA16 VA: 0xA16
	|-Array.InternalEnumerator<UICharInfo>.Dispose
	|
	|-RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	|-Array.InternalEnumerator<UILineInfo>.Dispose
	|
	|-RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	|-Array.InternalEnumerator<UIVertex>.Dispose
	|
	|-RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.Dispose
	|
	|-RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	|-Array.InternalEnumerator<Vector2>.Dispose
	|
	|-RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	|-Array.InternalEnumerator<Vector3>.Dispose
	|
	|-RVA: 0xA1C Offset: 0xA1C VA: 0xA1C
	|-Array.InternalEnumerator<Vector4>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF6D Offset: 0xF6D VA: 0xF6D
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.MoveNext
	|
	|-RVA: 0xF6F Offset: 0xF6F VA: 0xF6F
	|-Array.InternalEnumerator<bool>.MoveNext
	|
	|-RVA: 0xF72 Offset: 0xF72 VA: 0xF72
	|-Array.InternalEnumerator<byte>.MoveNext
	|
	|-RVA: 0xF75 Offset: 0xF75 VA: 0xF75
	|-Array.InternalEnumerator<char>.MoveNext
	|
	|-RVA: 0xF78 Offset: 0xF78 VA: 0xF78
	|-Array.InternalEnumerator<DictionaryEntry>.MoveNext
	|
	|-RVA: 0xF7A Offset: 0xF7A VA: 0xF7A
	|-Array.InternalEnumerator<Dictionary.Entry<int, object>>.MoveNext
	|
	|-RVA: 0xF7C Offset: 0xF7C VA: 0xF7C
	|-Array.InternalEnumerator<Dictionary.Entry<object, int>>.MoveNext
	|
	|-RVA: 0xF7E Offset: 0xF7E VA: 0xF7E
	|-Array.InternalEnumerator<Dictionary.Entry<object, object>>.MoveNext
	|
	|-RVA: 0xF80 Offset: 0xF80 VA: 0xF80
	|-Array.InternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.MoveNext
	|
	|-RVA: 0xF82 Offset: 0xF82 VA: 0xF82
	|-Array.InternalEnumerator<Dictionary.Entry<ulong, object>>.MoveNext
	|
	|-RVA: 0xF84 Offset: 0xF84 VA: 0xF84
	|-Array.InternalEnumerator<HashSet.Slot<object>>.MoveNext
	|
	|-RVA: 0xF86 Offset: 0xF86 VA: 0xF86
	|-Array.InternalEnumerator<KeyValuePair<DateTime, object>>.MoveNext
	|
	|-RVA: 0xF88 Offset: 0xF88 VA: 0xF88
	|-Array.InternalEnumerator<KeyValuePair<Guid, int>>.MoveNext
	|
	|-RVA: 0xF8A Offset: 0xF8A VA: 0xF8A
	|-Array.InternalEnumerator<KeyValuePair<Guid, object>>.MoveNext
	|
	|-RVA: 0xF8C Offset: 0xF8C VA: 0xF8C
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.MoveNext
	|
	|-RVA: 0xF8E Offset: 0xF8E VA: 0xF8E
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.MoveNext
	|
	|-RVA: 0xF90 Offset: 0xF90 VA: 0xF90
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.MoveNext
	|
	|-RVA: 0xF92 Offset: 0xF92 VA: 0xF92
	|-Array.InternalEnumerator<KeyValuePair<object, ResourceLocator>>.MoveNext
	|
	|-RVA: 0xF94 Offset: 0xF94 VA: 0xF94
	|-Array.InternalEnumerator<KeyValuePair<ulong, object>>.MoveNext
	|
	|-RVA: 0xF96 Offset: 0xF96 VA: 0xF96
	|-Array.InternalEnumerator<Hashtable.bucket>.MoveNext
	|
	|-RVA: 0xF98 Offset: 0xF98 VA: 0xF98
	|-Array.InternalEnumerator<DateTime>.MoveNext
	|
	|-RVA: 0xF9A Offset: 0xF9A VA: 0xF9A
	|-Array.InternalEnumerator<Decimal>.MoveNext
	|
	|-RVA: 0xF9C Offset: 0xF9C VA: 0xF9C
	|-Array.InternalEnumerator<EventProvider.SessionInfo>.MoveNext
	|
	|-RVA: 0xF9E Offset: 0xF9E VA: 0xF9E
	|-Array.InternalEnumerator<EventSource.EventMetadata>.MoveNext
	|
	|-RVA: 0xFA0 Offset: 0xFA0 VA: 0xFA0
	|-Array.InternalEnumerator<double>.MoveNext
	|
	|-RVA: 0xFA2 Offset: 0xFA2 VA: 0xFA2
	|-Array.InternalEnumerator<InternalCodePageDataItem>.MoveNext
	|
	|-RVA: 0xFA4 Offset: 0xFA4 VA: 0xFA4
	|-Array.InternalEnumerator<InternalEncodingDataItem>.MoveNext
	|
	|-RVA: 0xFA6 Offset: 0xFA6 VA: 0xFA6
	|-Array.InternalEnumerator<Guid>.MoveNext
	|
	|-RVA: 0xFA8 Offset: 0xFA8 VA: 0xFA8
	|-Array.InternalEnumerator<short>.MoveNext
	|
	|-RVA: 0xFAB Offset: 0xFAB VA: 0xFAB
	|-Array.InternalEnumerator<int>.MoveNext
	|
	|-RVA: 0xFAE Offset: 0xFAE VA: 0xFAE
	|-Array.InternalEnumerator<Int32Enum>.MoveNext
	|
	|-RVA: 0xFB1 Offset: 0xFB1 VA: 0xFB1
	|-Array.InternalEnumerator<long>.MoveNext
	|
	|-RVA: 0xFB3 Offset: 0xFB3 VA: 0xFB3
	|-Array.InternalEnumerator<IntPtr>.MoveNext
	|
	|-RVA: 0xD05 Offset: 0xD05 VA: 0xD05
	|-Array.InternalEnumerator<object>.MoveNext
	|
	|-RVA: 0xFB6 Offset: 0xFB6 VA: 0xFB6
	|-Array.InternalEnumerator<ParameterizedStrings.FormatParam>.MoveNext
	|
	|-RVA: 0xFB8 Offset: 0xFB8 VA: 0xFB8
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.MoveNext
	|
	|-RVA: 0xFBA Offset: 0xFBA VA: 0xFBA
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.MoveNext
	|
	|-RVA: 0xFBC Offset: 0xFBC VA: 0xFBC
	|-Array.InternalEnumerator<ParameterModifier>.MoveNext
	|
	|-RVA: 0xFBF Offset: 0xFBF VA: 0xFBF
	|-Array.InternalEnumerator<ResourceLocator>.MoveNext
	|
	|-RVA: 0xFC1 Offset: 0xFC1 VA: 0xFC1
	|-Array.InternalEnumerator<Ephemeron>.MoveNext
	|
	|-RVA: 0xFC3 Offset: 0xFC3 VA: 0xFC3
	|-Array.InternalEnumerator<GCHandle>.MoveNext
	|
	|-RVA: 0xFC6 Offset: 0xFC6 VA: 0xFC6
	|-Array.InternalEnumerator<sbyte>.MoveNext
	|
	|-RVA: 0xFC9 Offset: 0xFC9 VA: 0xFC9
	|-Array.InternalEnumerator<float>.MoveNext
	|
	|-RVA: 0xFCB Offset: 0xFCB VA: 0xFCB
	|-Array.InternalEnumerator<CancellationTokenRegistration>.MoveNext
	|
	|-RVA: 0xFCD Offset: 0xFCD VA: 0xFCD
	|-Array.InternalEnumerator<TimeSpan>.MoveNext
	|
	|-RVA: 0xFCF Offset: 0xFCF VA: 0xFCF
	|-Array.InternalEnumerator<ushort>.MoveNext
	|
	|-RVA: 0xFD2 Offset: 0xFD2 VA: 0xFD2
	|-Array.InternalEnumerator<uint>.MoveNext
	|
	|-RVA: 0xFD5 Offset: 0xFD5 VA: 0xFD5
	|-Array.InternalEnumerator<ulong>.MoveNext
	|
	|-RVA: 0xFD7 Offset: 0xFD7 VA: 0xFD7
	|-Array.InternalEnumerator<UIntPtr>.MoveNext
	|
	|-RVA: 0xFDA Offset: 0xFDA VA: 0xFDA
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.MoveNext
	|
	|-RVA: 0xFDC Offset: 0xFDC VA: 0xFDC
	|-Array.InternalEnumerator<Color32>.MoveNext
	|
	|-RVA: 0xFDE Offset: 0xFDE VA: 0xFDE
	|-Array.InternalEnumerator<RaycastResult>.MoveNext
	|
	|-RVA: 0xFE0 Offset: 0xFE0 VA: 0xFE0
	|-Array.InternalEnumerator<PlayerLoopSystem>.MoveNext
	|
	|-RVA: 0xFE2 Offset: 0xFE2 VA: 0xFE2
	|-Array.InternalEnumerator<Keyframe>.MoveNext
	|
	|-RVA: 0xFE4 Offset: 0xFE4 VA: 0xFE4
	|-Array.InternalEnumerator<PlayableBinding>.MoveNext
	|
	|-RVA: 0xFE6 Offset: 0xFE6 VA: 0xFE6
	|-Array.InternalEnumerator<RaycastHit2D>.MoveNext
	|
	|-RVA: 0xFE8 Offset: 0xFE8 VA: 0xFE8
	|-Array.InternalEnumerator<RaycastHit>.MoveNext
	|
	|-RVA: 0xFEA Offset: 0xFEA VA: 0xFEA
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.MoveNext
	|
	|-RVA: 0xFEC Offset: 0xFEC VA: 0xFEC
	|-Array.InternalEnumerator<ColorBlock>.MoveNext
	|
	|-RVA: 0xFEE Offset: 0xFEE VA: 0xFEE
	|-Array.InternalEnumerator<Navigation>.MoveNext
	|
	|-RVA: 0xFF0 Offset: 0xFF0 VA: 0xFF0
	|-Array.InternalEnumerator<SpriteState>.MoveNext
	|
	|-RVA: 0xFF2 Offset: 0xFF2 VA: 0xFF2
	|-Array.InternalEnumerator<UICharInfo>.MoveNext
	|
	|-RVA: 0xFF4 Offset: 0xFF4 VA: 0xFF4
	|-Array.InternalEnumerator<UILineInfo>.MoveNext
	|
	|-RVA: 0xFF6 Offset: 0xFF6 VA: 0xFF6
	|-Array.InternalEnumerator<UIVertex>.MoveNext
	|
	|-RVA: 0xFF8 Offset: 0xFF8 VA: 0xFF8
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.MoveNext
	|
	|-RVA: 0xFFA Offset: 0xFFA VA: 0xFFA
	|-Array.InternalEnumerator<Vector2>.MoveNext
	|
	|-RVA: 0xFFC Offset: 0xFFC VA: 0xFFC
	|-Array.InternalEnumerator<Vector3>.MoveNext
	|
	|-RVA: 0xFFE Offset: 0xFFE VA: 0xFFE
	|-Array.InternalEnumerator<Vector4>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x929 Offset: 0x929 VA: 0x929
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.get_Current
	|
	|-RVA: 0xF70 Offset: 0xF70 VA: 0xF70
	|-Array.InternalEnumerator<bool>.get_Current
	|
	|-RVA: 0xF73 Offset: 0xF73 VA: 0xF73
	|-Array.InternalEnumerator<byte>.get_Current
	|
	|-RVA: 0xF76 Offset: 0xF76 VA: 0xF76
	|-Array.InternalEnumerator<char>.get_Current
	|
	|-RVA: 0x92E Offset: 0x92E VA: 0x92E
	|-Array.InternalEnumerator<DictionaryEntry>.get_Current
	|
	|-RVA: 0x930 Offset: 0x930 VA: 0x930
	|-Array.InternalEnumerator<Dictionary.Entry<int, object>>.get_Current
	|
	|-RVA: 0x932 Offset: 0x932 VA: 0x932
	|-Array.InternalEnumerator<Dictionary.Entry<object, int>>.get_Current
	|
	|-RVA: 0x934 Offset: 0x934 VA: 0x934
	|-Array.InternalEnumerator<Dictionary.Entry<object, object>>.get_Current
	|
	|-RVA: 0x936 Offset: 0x936 VA: 0x936
	|-Array.InternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.get_Current
	|
	|-RVA: 0x938 Offset: 0x938 VA: 0x938
	|-Array.InternalEnumerator<Dictionary.Entry<ulong, object>>.get_Current
	|
	|-RVA: 0x93A Offset: 0x93A VA: 0x93A
	|-Array.InternalEnumerator<HashSet.Slot<object>>.get_Current
	|
	|-RVA: 0x93C Offset: 0x93C VA: 0x93C
	|-Array.InternalEnumerator<KeyValuePair<DateTime, object>>.get_Current
	|
	|-RVA: 0x93E Offset: 0x93E VA: 0x93E
	|-Array.InternalEnumerator<KeyValuePair<Guid, int>>.get_Current
	|
	|-RVA: 0x940 Offset: 0x940 VA: 0x940
	|-Array.InternalEnumerator<KeyValuePair<Guid, object>>.get_Current
	|
	|-RVA: 0x942 Offset: 0x942 VA: 0x942
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.get_Current
	|
	|-RVA: 0x944 Offset: 0x944 VA: 0x944
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.get_Current
	|
	|-RVA: 0x946 Offset: 0x946 VA: 0x946
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.get_Current
	|
	|-RVA: 0x948 Offset: 0x948 VA: 0x948
	|-Array.InternalEnumerator<KeyValuePair<object, ResourceLocator>>.get_Current
	|
	|-RVA: 0x94A Offset: 0x94A VA: 0x94A
	|-Array.InternalEnumerator<KeyValuePair<ulong, object>>.get_Current
	|
	|-RVA: 0x94C Offset: 0x94C VA: 0x94C
	|-Array.InternalEnumerator<Hashtable.bucket>.get_Current
	|
	|-RVA: 0x95 Offset: 0x95 VA: 0x95
	|-Array.InternalEnumerator<DateTime>.get_Current
	|
	|-RVA: 0x94F Offset: 0x94F VA: 0x94F
	|-Array.InternalEnumerator<Decimal>.get_Current
	|
	|-RVA: 0x951 Offset: 0x951 VA: 0x951
	|-Array.InternalEnumerator<EventProvider.SessionInfo>.get_Current
	|
	|-RVA: 0x953 Offset: 0x953 VA: 0x953
	|-Array.InternalEnumerator<EventSource.EventMetadata>.get_Current
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-Array.InternalEnumerator<double>.get_Current
	|
	|-RVA: 0x956 Offset: 0x956 VA: 0x956
	|-Array.InternalEnumerator<InternalCodePageDataItem>.get_Current
	|
	|-RVA: 0x958 Offset: 0x958 VA: 0x958
	|-Array.InternalEnumerator<InternalEncodingDataItem>.get_Current
	|
	|-RVA: 0x95A Offset: 0x95A VA: 0x95A
	|-Array.InternalEnumerator<Guid>.get_Current
	|
	|-RVA: 0xFA9 Offset: 0xFA9 VA: 0xFA9
	|-Array.InternalEnumerator<short>.get_Current
	|
	|-RVA: 0xFAC Offset: 0xFAC VA: 0xFAC
	|-Array.InternalEnumerator<int>.get_Current
	|
	|-RVA: 0xFAF Offset: 0xFAF VA: 0xFAF
	|-Array.InternalEnumerator<Int32Enum>.get_Current
	|
	|-RVA: 0x96 Offset: 0x96 VA: 0x96
	|-Array.InternalEnumerator<long>.get_Current
	|
	|-RVA: 0xFB4 Offset: 0xFB4 VA: 0xFB4
	|-Array.InternalEnumerator<IntPtr>.get_Current
	|
	|-RVA: 0xD03 Offset: 0xD03 VA: 0xD03
	|-Array.InternalEnumerator<object>.get_Current
	|
	|-RVA: 0x961 Offset: 0x961 VA: 0x961
	|-Array.InternalEnumerator<ParameterizedStrings.FormatParam>.get_Current
	|
	|-RVA: 0x963 Offset: 0x963 VA: 0x963
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.get_Current
	|
	|-RVA: 0x965 Offset: 0x965 VA: 0x965
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.get_Current
	|
	|-RVA: 0xFBD Offset: 0xFBD VA: 0xFBD
	|-Array.InternalEnumerator<ParameterModifier>.get_Current
	|
	|-RVA: 0x968 Offset: 0x968 VA: 0x968
	|-Array.InternalEnumerator<ResourceLocator>.get_Current
	|
	|-RVA: 0x96A Offset: 0x96A VA: 0x96A
	|-Array.InternalEnumerator<Ephemeron>.get_Current
	|
	|-RVA: 0xFC4 Offset: 0xFC4 VA: 0xFC4
	|-Array.InternalEnumerator<GCHandle>.get_Current
	|
	|-RVA: 0xFC7 Offset: 0xFC7 VA: 0xFC7
	|-Array.InternalEnumerator<sbyte>.get_Current
	|
	|-RVA: 0x8C Offset: 0x8C VA: 0x8C
	|-Array.InternalEnumerator<float>.get_Current
	|
	|-RVA: 0x96F Offset: 0x96F VA: 0x96F
	|-Array.InternalEnumerator<CancellationTokenRegistration>.get_Current
	|
	|-RVA: 0x97 Offset: 0x97 VA: 0x97
	|-Array.InternalEnumerator<TimeSpan>.get_Current
	|
	|-RVA: 0xFD0 Offset: 0xFD0 VA: 0xFD0
	|-Array.InternalEnumerator<ushort>.get_Current
	|
	|-RVA: 0xFD3 Offset: 0xFD3 VA: 0xFD3
	|-Array.InternalEnumerator<uint>.get_Current
	|
	|-RVA: 0x98 Offset: 0x98 VA: 0x98
	|-Array.InternalEnumerator<ulong>.get_Current
	|
	|-RVA: 0xFD8 Offset: 0xFD8 VA: 0xFD8
	|-Array.InternalEnumerator<UIntPtr>.get_Current
	|
	|-RVA: 0x976 Offset: 0x976 VA: 0x976
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.get_Current
	|
	|-RVA: 0x978 Offset: 0x978 VA: 0x978
	|-Array.InternalEnumerator<Color32>.get_Current
	|
	|-RVA: 0x97A Offset: 0x97A VA: 0x97A
	|-Array.InternalEnumerator<RaycastResult>.get_Current
	|
	|-RVA: 0x97C Offset: 0x97C VA: 0x97C
	|-Array.InternalEnumerator<PlayerLoopSystem>.get_Current
	|
	|-RVA: 0x97E Offset: 0x97E VA: 0x97E
	|-Array.InternalEnumerator<Keyframe>.get_Current
	|
	|-RVA: 0x980 Offset: 0x980 VA: 0x980
	|-Array.InternalEnumerator<PlayableBinding>.get_Current
	|
	|-RVA: 0x982 Offset: 0x982 VA: 0x982
	|-Array.InternalEnumerator<RaycastHit2D>.get_Current
	|
	|-RVA: 0x984 Offset: 0x984 VA: 0x984
	|-Array.InternalEnumerator<RaycastHit>.get_Current
	|
	|-RVA: 0x986 Offset: 0x986 VA: 0x986
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.get_Current
	|
	|-RVA: 0x988 Offset: 0x988 VA: 0x988
	|-Array.InternalEnumerator<ColorBlock>.get_Current
	|
	|-RVA: 0x98A Offset: 0x98A VA: 0x98A
	|-Array.InternalEnumerator<Navigation>.get_Current
	|
	|-RVA: 0x98C Offset: 0x98C VA: 0x98C
	|-Array.InternalEnumerator<SpriteState>.get_Current
	|
	|-RVA: 0x98E Offset: 0x98E VA: 0x98E
	|-Array.InternalEnumerator<UICharInfo>.get_Current
	|
	|-RVA: 0x990 Offset: 0x990 VA: 0x990
	|-Array.InternalEnumerator<UILineInfo>.get_Current
	|
	|-RVA: 0x992 Offset: 0x992 VA: 0x992
	|-Array.InternalEnumerator<UIVertex>.get_Current
	|
	|-RVA: 0x994 Offset: 0x994 VA: 0x994
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.get_Current
	|
	|-RVA: 0x996 Offset: 0x996 VA: 0x996
	|-Array.InternalEnumerator<Vector2>.get_Current
	|
	|-RVA: 0x998 Offset: 0x998 VA: 0x998
	|-Array.InternalEnumerator<Vector3>.get_Current
	|
	|-RVA: 0x99A Offset: 0x99A VA: 0x99A
	|-Array.InternalEnumerator<Vector4>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF6E Offset: 0xF6E VA: 0xF6E
	|-Array.InternalEnumerator<CodePointIndexer.TableRange>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF71 Offset: 0xF71 VA: 0xF71
	|-Array.InternalEnumerator<bool>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF74 Offset: 0xF74 VA: 0xF74
	|-Array.InternalEnumerator<byte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF77 Offset: 0xF77 VA: 0xF77
	|-Array.InternalEnumerator<char>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF79 Offset: 0xF79 VA: 0xF79
	|-Array.InternalEnumerator<DictionaryEntry>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF7B Offset: 0xF7B VA: 0xF7B
	|-Array.InternalEnumerator<Dictionary.Entry<int, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF7D Offset: 0xF7D VA: 0xF7D
	|-Array.InternalEnumerator<Dictionary.Entry<object, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF7F Offset: 0xF7F VA: 0xF7F
	|-Array.InternalEnumerator<Dictionary.Entry<object, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF81 Offset: 0xF81 VA: 0xF81
	|-Array.InternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF83 Offset: 0xF83 VA: 0xF83
	|-Array.InternalEnumerator<Dictionary.Entry<ulong, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF85 Offset: 0xF85 VA: 0xF85
	|-Array.InternalEnumerator<HashSet.Slot<object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF87 Offset: 0xF87 VA: 0xF87
	|-Array.InternalEnumerator<KeyValuePair<DateTime, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF89 Offset: 0xF89 VA: 0xF89
	|-Array.InternalEnumerator<KeyValuePair<Guid, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF8B Offset: 0xF8B VA: 0xF8B
	|-Array.InternalEnumerator<KeyValuePair<Guid, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF8D Offset: 0xF8D VA: 0xF8D
	|-Array.InternalEnumerator<KeyValuePair<int, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF8F Offset: 0xF8F VA: 0xF8F
	|-Array.InternalEnumerator<KeyValuePair<object, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF91 Offset: 0xF91 VA: 0xF91
	|-Array.InternalEnumerator<KeyValuePair<object, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF93 Offset: 0xF93 VA: 0xF93
	|-Array.InternalEnumerator<KeyValuePair<object, ResourceLocator>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF95 Offset: 0xF95 VA: 0xF95
	|-Array.InternalEnumerator<KeyValuePair<ulong, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF97 Offset: 0xF97 VA: 0xF97
	|-Array.InternalEnumerator<Hashtable.bucket>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF99 Offset: 0xF99 VA: 0xF99
	|-Array.InternalEnumerator<DateTime>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF9B Offset: 0xF9B VA: 0xF9B
	|-Array.InternalEnumerator<Decimal>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF9D Offset: 0xF9D VA: 0xF9D
	|-Array.InternalEnumerator<EventProvider.SessionInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF9F Offset: 0xF9F VA: 0xF9F
	|-Array.InternalEnumerator<EventSource.EventMetadata>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFA1 Offset: 0xFA1 VA: 0xFA1
	|-Array.InternalEnumerator<double>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFA3 Offset: 0xFA3 VA: 0xFA3
	|-Array.InternalEnumerator<InternalCodePageDataItem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFA5 Offset: 0xFA5 VA: 0xFA5
	|-Array.InternalEnumerator<InternalEncodingDataItem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFA7 Offset: 0xFA7 VA: 0xFA7
	|-Array.InternalEnumerator<Guid>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFAA Offset: 0xFAA VA: 0xFAA
	|-Array.InternalEnumerator<short>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFAD Offset: 0xFAD VA: 0xFAD
	|-Array.InternalEnumerator<int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFB0 Offset: 0xFB0 VA: 0xFB0
	|-Array.InternalEnumerator<Int32Enum>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFB2 Offset: 0xFB2 VA: 0xFB2
	|-Array.InternalEnumerator<long>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFB5 Offset: 0xFB5 VA: 0xFB5
	|-Array.InternalEnumerator<IntPtr>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD04 Offset: 0xD04 VA: 0xD04
	|-Array.InternalEnumerator<object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFB7 Offset: 0xFB7 VA: 0xFB7
	|-Array.InternalEnumerator<ParameterizedStrings.FormatParam>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFB9 Offset: 0xFB9 VA: 0xFB9
	|-Array.InternalEnumerator<CustomAttributeNamedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFBB Offset: 0xFBB VA: 0xFBB
	|-Array.InternalEnumerator<CustomAttributeTypedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFBE Offset: 0xFBE VA: 0xFBE
	|-Array.InternalEnumerator<ParameterModifier>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFC0 Offset: 0xFC0 VA: 0xFC0
	|-Array.InternalEnumerator<ResourceLocator>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFC2 Offset: 0xFC2 VA: 0xFC2
	|-Array.InternalEnumerator<Ephemeron>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFC5 Offset: 0xFC5 VA: 0xFC5
	|-Array.InternalEnumerator<GCHandle>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFC8 Offset: 0xFC8 VA: 0xFC8
	|-Array.InternalEnumerator<sbyte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFCA Offset: 0xFCA VA: 0xFCA
	|-Array.InternalEnumerator<float>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFCC Offset: 0xFCC VA: 0xFCC
	|-Array.InternalEnumerator<CancellationTokenRegistration>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFCE Offset: 0xFCE VA: 0xFCE
	|-Array.InternalEnumerator<TimeSpan>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFD1 Offset: 0xFD1 VA: 0xFD1
	|-Array.InternalEnumerator<ushort>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFD4 Offset: 0xFD4 VA: 0xFD4
	|-Array.InternalEnumerator<uint>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFD6 Offset: 0xFD6 VA: 0xFD6
	|-Array.InternalEnumerator<ulong>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFD9 Offset: 0xFD9 VA: 0xFD9
	|-Array.InternalEnumerator<UIntPtr>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFDB Offset: 0xFDB VA: 0xFDB
	|-Array.InternalEnumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFDD Offset: 0xFDD VA: 0xFDD
	|-Array.InternalEnumerator<Color32>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFDF Offset: 0xFDF VA: 0xFDF
	|-Array.InternalEnumerator<RaycastResult>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFE1 Offset: 0xFE1 VA: 0xFE1
	|-Array.InternalEnumerator<PlayerLoopSystem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFE3 Offset: 0xFE3 VA: 0xFE3
	|-Array.InternalEnumerator<Keyframe>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFE5 Offset: 0xFE5 VA: 0xFE5
	|-Array.InternalEnumerator<PlayableBinding>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFE7 Offset: 0xFE7 VA: 0xFE7
	|-Array.InternalEnumerator<RaycastHit2D>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFE9 Offset: 0xFE9 VA: 0xFE9
	|-Array.InternalEnumerator<RaycastHit>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFEB Offset: 0xFEB VA: 0xFEB
	|-Array.InternalEnumerator<SendMouseEvents.HitInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFED Offset: 0xFED VA: 0xFED
	|-Array.InternalEnumerator<ColorBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFEF Offset: 0xFEF VA: 0xFEF
	|-Array.InternalEnumerator<Navigation>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFF1 Offset: 0xFF1 VA: 0xFF1
	|-Array.InternalEnumerator<SpriteState>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFF3 Offset: 0xFF3 VA: 0xFF3
	|-Array.InternalEnumerator<UICharInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFF5 Offset: 0xFF5 VA: 0xFF5
	|-Array.InternalEnumerator<UILineInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFF7 Offset: 0xFF7 VA: 0xFF7
	|-Array.InternalEnumerator<UIVertex>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFF9 Offset: 0xFF9 VA: 0xFF9
	|-Array.InternalEnumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFFB Offset: 0xFFB VA: 0xFFB
	|-Array.InternalEnumerator<Vector2>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFFD Offset: 0xFFD VA: 0xFFD
	|-Array.InternalEnumerator<Vector3>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xFFF Offset: 0xFFF VA: 0xFFF
	|-Array.InternalEnumerator<Vector4>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: 
internal class Array.EmptyInternalEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 79
{
	// Fields
	public static readonly Array.EmptyInternalEnumerator<T> Value; // 0xFFFFFFFF

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x954 Offset: 0x954 VA: 0x954
	|-Array.EmptyInternalEnumerator<CodePointIndexer.TableRange>.Dispose
	|
	|-RVA: 0x956 Offset: 0x956 VA: 0x956
	|-Array.EmptyInternalEnumerator<bool>.Dispose
	|
	|-RVA: 0x958 Offset: 0x958 VA: 0x958
	|-Array.EmptyInternalEnumerator<byte>.Dispose
	|
	|-RVA: 0x95A Offset: 0x95A VA: 0x95A
	|-Array.EmptyInternalEnumerator<char>.Dispose
	|
	|-RVA: 0x95C Offset: 0x95C VA: 0x95C
	|-Array.EmptyInternalEnumerator<DictionaryEntry>.Dispose
	|
	|-RVA: 0x95E Offset: 0x95E VA: 0x95E
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<int, object>>.Dispose
	|
	|-RVA: 0x960 Offset: 0x960 VA: 0x960
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, int>>.Dispose
	|
	|-RVA: 0x962 Offset: 0x962 VA: 0x962
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, object>>.Dispose
	|
	|-RVA: 0x964 Offset: 0x964 VA: 0x964
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.Dispose
	|
	|-RVA: 0x966 Offset: 0x966 VA: 0x966
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<ulong, object>>.Dispose
	|
	|-RVA: 0x968 Offset: 0x968 VA: 0x968
	|-Array.EmptyInternalEnumerator<HashSet.Slot<object>>.Dispose
	|
	|-RVA: 0x96A Offset: 0x96A VA: 0x96A
	|-Array.EmptyInternalEnumerator<KeyValuePair<DateTime, object>>.Dispose
	|
	|-RVA: 0x96C Offset: 0x96C VA: 0x96C
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, int>>.Dispose
	|
	|-RVA: 0x96E Offset: 0x96E VA: 0x96E
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, object>>.Dispose
	|
	|-RVA: 0x970 Offset: 0x970 VA: 0x970
	|-Array.EmptyInternalEnumerator<KeyValuePair<int, object>>.Dispose
	|
	|-RVA: 0x972 Offset: 0x972 VA: 0x972
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, int>>.Dispose
	|
	|-RVA: 0x974 Offset: 0x974 VA: 0x974
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, object>>.Dispose
	|
	|-RVA: 0x976 Offset: 0x976 VA: 0x976
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, ResourceLocator>>.Dispose
	|
	|-RVA: 0x978 Offset: 0x978 VA: 0x978
	|-Array.EmptyInternalEnumerator<KeyValuePair<ulong, object>>.Dispose
	|
	|-RVA: 0x97A Offset: 0x97A VA: 0x97A
	|-Array.EmptyInternalEnumerator<Hashtable.bucket>.Dispose
	|
	|-RVA: 0x97C Offset: 0x97C VA: 0x97C
	|-Array.EmptyInternalEnumerator<DateTime>.Dispose
	|
	|-RVA: 0x97E Offset: 0x97E VA: 0x97E
	|-Array.EmptyInternalEnumerator<Decimal>.Dispose
	|
	|-RVA: 0x980 Offset: 0x980 VA: 0x980
	|-Array.EmptyInternalEnumerator<EventProvider.SessionInfo>.Dispose
	|
	|-RVA: 0x982 Offset: 0x982 VA: 0x982
	|-Array.EmptyInternalEnumerator<EventSource.EventMetadata>.Dispose
	|
	|-RVA: 0x984 Offset: 0x984 VA: 0x984
	|-Array.EmptyInternalEnumerator<double>.Dispose
	|
	|-RVA: 0x986 Offset: 0x986 VA: 0x986
	|-Array.EmptyInternalEnumerator<InternalCodePageDataItem>.Dispose
	|
	|-RVA: 0x988 Offset: 0x988 VA: 0x988
	|-Array.EmptyInternalEnumerator<InternalEncodingDataItem>.Dispose
	|
	|-RVA: 0x98A Offset: 0x98A VA: 0x98A
	|-Array.EmptyInternalEnumerator<Guid>.Dispose
	|
	|-RVA: 0x98C Offset: 0x98C VA: 0x98C
	|-Array.EmptyInternalEnumerator<short>.Dispose
	|
	|-RVA: 0x98E Offset: 0x98E VA: 0x98E
	|-Array.EmptyInternalEnumerator<int>.Dispose
	|
	|-RVA: 0x990 Offset: 0x990 VA: 0x990
	|-Array.EmptyInternalEnumerator<Int32Enum>.Dispose
	|
	|-RVA: 0x992 Offset: 0x992 VA: 0x992
	|-Array.EmptyInternalEnumerator<long>.Dispose
	|
	|-RVA: 0x994 Offset: 0x994 VA: 0x994
	|-Array.EmptyInternalEnumerator<IntPtr>.Dispose
	|
	|-RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2
	|-Array.EmptyInternalEnumerator<object>.Dispose
	|
	|-RVA: 0x996 Offset: 0x996 VA: 0x996
	|-Array.EmptyInternalEnumerator<ParameterizedStrings.FormatParam>.Dispose
	|
	|-RVA: 0x998 Offset: 0x998 VA: 0x998
	|-Array.EmptyInternalEnumerator<CustomAttributeNamedArgument>.Dispose
	|
	|-RVA: 0x99A Offset: 0x99A VA: 0x99A
	|-Array.EmptyInternalEnumerator<CustomAttributeTypedArgument>.Dispose
	|
	|-RVA: 0x99C Offset: 0x99C VA: 0x99C
	|-Array.EmptyInternalEnumerator<ParameterModifier>.Dispose
	|
	|-RVA: 0x99E Offset: 0x99E VA: 0x99E
	|-Array.EmptyInternalEnumerator<ResourceLocator>.Dispose
	|
	|-RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	|-Array.EmptyInternalEnumerator<Ephemeron>.Dispose
	|
	|-RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	|-Array.EmptyInternalEnumerator<GCHandle>.Dispose
	|
	|-RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	|-Array.EmptyInternalEnumerator<sbyte>.Dispose
	|
	|-RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6
	|-Array.EmptyInternalEnumerator<float>.Dispose
	|
	|-RVA: 0x9A8 Offset: 0x9A8 VA: 0x9A8
	|-Array.EmptyInternalEnumerator<CancellationTokenRegistration>.Dispose
	|
	|-RVA: 0x9AA Offset: 0x9AA VA: 0x9AA
	|-Array.EmptyInternalEnumerator<TimeSpan>.Dispose
	|
	|-RVA: 0x9AC Offset: 0x9AC VA: 0x9AC
	|-Array.EmptyInternalEnumerator<ushort>.Dispose
	|
	|-RVA: 0x9AE Offset: 0x9AE VA: 0x9AE
	|-Array.EmptyInternalEnumerator<uint>.Dispose
	|
	|-RVA: 0x9B0 Offset: 0x9B0 VA: 0x9B0
	|-Array.EmptyInternalEnumerator<ulong>.Dispose
	|
	|-RVA: 0x9B2 Offset: 0x9B2 VA: 0x9B2
	|-Array.EmptyInternalEnumerator<UIntPtr>.Dispose
	|
	|-RVA: 0x9B4 Offset: 0x9B4 VA: 0x9B4
	|-Array.EmptyInternalEnumerator<BeforeRenderHelper.OrderBlock>.Dispose
	|
	|-RVA: 0x9B6 Offset: 0x9B6 VA: 0x9B6
	|-Array.EmptyInternalEnumerator<Color32>.Dispose
	|
	|-RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8
	|-Array.EmptyInternalEnumerator<RaycastResult>.Dispose
	|
	|-RVA: 0x9BA Offset: 0x9BA VA: 0x9BA
	|-Array.EmptyInternalEnumerator<PlayerLoopSystem>.Dispose
	|
	|-RVA: 0x9BC Offset: 0x9BC VA: 0x9BC
	|-Array.EmptyInternalEnumerator<Keyframe>.Dispose
	|
	|-RVA: 0x9BE Offset: 0x9BE VA: 0x9BE
	|-Array.EmptyInternalEnumerator<PlayableBinding>.Dispose
	|
	|-RVA: 0x9C0 Offset: 0x9C0 VA: 0x9C0
	|-Array.EmptyInternalEnumerator<RaycastHit2D>.Dispose
	|
	|-RVA: 0x9C2 Offset: 0x9C2 VA: 0x9C2
	|-Array.EmptyInternalEnumerator<RaycastHit>.Dispose
	|
	|-RVA: 0x9C4 Offset: 0x9C4 VA: 0x9C4
	|-Array.EmptyInternalEnumerator<SendMouseEvents.HitInfo>.Dispose
	|
	|-RVA: 0x9C6 Offset: 0x9C6 VA: 0x9C6
	|-Array.EmptyInternalEnumerator<ColorBlock>.Dispose
	|
	|-RVA: 0x9C8 Offset: 0x9C8 VA: 0x9C8
	|-Array.EmptyInternalEnumerator<Navigation>.Dispose
	|
	|-RVA: 0x9CA Offset: 0x9CA VA: 0x9CA
	|-Array.EmptyInternalEnumerator<SpriteState>.Dispose
	|
	|-RVA: 0x9CC Offset: 0x9CC VA: 0x9CC
	|-Array.EmptyInternalEnumerator<UICharInfo>.Dispose
	|
	|-RVA: 0x9CE Offset: 0x9CE VA: 0x9CE
	|-Array.EmptyInternalEnumerator<UILineInfo>.Dispose
	|
	|-RVA: 0x9D0 Offset: 0x9D0 VA: 0x9D0
	|-Array.EmptyInternalEnumerator<UIVertex>.Dispose
	|
	|-RVA: 0x9D2 Offset: 0x9D2 VA: 0x9D2
	|-Array.EmptyInternalEnumerator<UnitySynchronizationContext.WorkRequest>.Dispose
	|
	|-RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	|-Array.EmptyInternalEnumerator<Vector2>.Dispose
	|
	|-RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6
	|-Array.EmptyInternalEnumerator<Vector3>.Dispose
	|
	|-RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8
	|-Array.EmptyInternalEnumerator<Vector4>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xEDA Offset: 0xEDA VA: 0xEDA
	|-Array.EmptyInternalEnumerator<CodePointIndexer.TableRange>.MoveNext
	|
	|-RVA: 0xEDC Offset: 0xEDC VA: 0xEDC
	|-Array.EmptyInternalEnumerator<bool>.MoveNext
	|
	|-RVA: 0xEDF Offset: 0xEDF VA: 0xEDF
	|-Array.EmptyInternalEnumerator<byte>.MoveNext
	|
	|-RVA: 0xEE2 Offset: 0xEE2 VA: 0xEE2
	|-Array.EmptyInternalEnumerator<char>.MoveNext
	|
	|-RVA: 0xEE5 Offset: 0xEE5 VA: 0xEE5
	|-Array.EmptyInternalEnumerator<DictionaryEntry>.MoveNext
	|
	|-RVA: 0xEE7 Offset: 0xEE7 VA: 0xEE7
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<int, object>>.MoveNext
	|
	|-RVA: 0xEE9 Offset: 0xEE9 VA: 0xEE9
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, int>>.MoveNext
	|
	|-RVA: 0xEEB Offset: 0xEEB VA: 0xEEB
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, object>>.MoveNext
	|
	|-RVA: 0xEED Offset: 0xEED VA: 0xEED
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.MoveNext
	|
	|-RVA: 0xEEF Offset: 0xEEF VA: 0xEEF
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<ulong, object>>.MoveNext
	|
	|-RVA: 0xEF1 Offset: 0xEF1 VA: 0xEF1
	|-Array.EmptyInternalEnumerator<HashSet.Slot<object>>.MoveNext
	|
	|-RVA: 0xEF3 Offset: 0xEF3 VA: 0xEF3
	|-Array.EmptyInternalEnumerator<KeyValuePair<DateTime, object>>.MoveNext
	|
	|-RVA: 0xEF5 Offset: 0xEF5 VA: 0xEF5
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, int>>.MoveNext
	|
	|-RVA: 0xEF7 Offset: 0xEF7 VA: 0xEF7
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, object>>.MoveNext
	|
	|-RVA: 0xEF9 Offset: 0xEF9 VA: 0xEF9
	|-Array.EmptyInternalEnumerator<KeyValuePair<int, object>>.MoveNext
	|
	|-RVA: 0xEFB Offset: 0xEFB VA: 0xEFB
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, int>>.MoveNext
	|
	|-RVA: 0xEFD Offset: 0xEFD VA: 0xEFD
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, object>>.MoveNext
	|
	|-RVA: 0xEFF Offset: 0xEFF VA: 0xEFF
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, ResourceLocator>>.MoveNext
	|
	|-RVA: 0xF01 Offset: 0xF01 VA: 0xF01
	|-Array.EmptyInternalEnumerator<KeyValuePair<ulong, object>>.MoveNext
	|
	|-RVA: 0xF03 Offset: 0xF03 VA: 0xF03
	|-Array.EmptyInternalEnumerator<Hashtable.bucket>.MoveNext
	|
	|-RVA: 0xF05 Offset: 0xF05 VA: 0xF05
	|-Array.EmptyInternalEnumerator<DateTime>.MoveNext
	|
	|-RVA: 0xF07 Offset: 0xF07 VA: 0xF07
	|-Array.EmptyInternalEnumerator<Decimal>.MoveNext
	|
	|-RVA: 0xF09 Offset: 0xF09 VA: 0xF09
	|-Array.EmptyInternalEnumerator<EventProvider.SessionInfo>.MoveNext
	|
	|-RVA: 0xF0B Offset: 0xF0B VA: 0xF0B
	|-Array.EmptyInternalEnumerator<EventSource.EventMetadata>.MoveNext
	|
	|-RVA: 0xF0D Offset: 0xF0D VA: 0xF0D
	|-Array.EmptyInternalEnumerator<double>.MoveNext
	|
	|-RVA: 0xF0F Offset: 0xF0F VA: 0xF0F
	|-Array.EmptyInternalEnumerator<InternalCodePageDataItem>.MoveNext
	|
	|-RVA: 0xF11 Offset: 0xF11 VA: 0xF11
	|-Array.EmptyInternalEnumerator<InternalEncodingDataItem>.MoveNext
	|
	|-RVA: 0xF13 Offset: 0xF13 VA: 0xF13
	|-Array.EmptyInternalEnumerator<Guid>.MoveNext
	|
	|-RVA: 0xF15 Offset: 0xF15 VA: 0xF15
	|-Array.EmptyInternalEnumerator<short>.MoveNext
	|
	|-RVA: 0xF18 Offset: 0xF18 VA: 0xF18
	|-Array.EmptyInternalEnumerator<int>.MoveNext
	|
	|-RVA: 0xF1B Offset: 0xF1B VA: 0xF1B
	|-Array.EmptyInternalEnumerator<Int32Enum>.MoveNext
	|
	|-RVA: 0xF1E Offset: 0xF1E VA: 0xF1E
	|-Array.EmptyInternalEnumerator<long>.MoveNext
	|
	|-RVA: 0xF20 Offset: 0xF20 VA: 0xF20
	|-Array.EmptyInternalEnumerator<IntPtr>.MoveNext
	|
	|-RVA: 0xD08 Offset: 0xD08 VA: 0xD08
	|-Array.EmptyInternalEnumerator<object>.MoveNext
	|
	|-RVA: 0xF23 Offset: 0xF23 VA: 0xF23
	|-Array.EmptyInternalEnumerator<ParameterizedStrings.FormatParam>.MoveNext
	|
	|-RVA: 0xF25 Offset: 0xF25 VA: 0xF25
	|-Array.EmptyInternalEnumerator<CustomAttributeNamedArgument>.MoveNext
	|
	|-RVA: 0xF27 Offset: 0xF27 VA: 0xF27
	|-Array.EmptyInternalEnumerator<CustomAttributeTypedArgument>.MoveNext
	|
	|-RVA: 0xF29 Offset: 0xF29 VA: 0xF29
	|-Array.EmptyInternalEnumerator<ParameterModifier>.MoveNext
	|
	|-RVA: 0xF2C Offset: 0xF2C VA: 0xF2C
	|-Array.EmptyInternalEnumerator<ResourceLocator>.MoveNext
	|
	|-RVA: 0xF2E Offset: 0xF2E VA: 0xF2E
	|-Array.EmptyInternalEnumerator<Ephemeron>.MoveNext
	|
	|-RVA: 0xF30 Offset: 0xF30 VA: 0xF30
	|-Array.EmptyInternalEnumerator<GCHandle>.MoveNext
	|
	|-RVA: 0xF33 Offset: 0xF33 VA: 0xF33
	|-Array.EmptyInternalEnumerator<sbyte>.MoveNext
	|
	|-RVA: 0xF36 Offset: 0xF36 VA: 0xF36
	|-Array.EmptyInternalEnumerator<float>.MoveNext
	|
	|-RVA: 0xF38 Offset: 0xF38 VA: 0xF38
	|-Array.EmptyInternalEnumerator<CancellationTokenRegistration>.MoveNext
	|
	|-RVA: 0xF3A Offset: 0xF3A VA: 0xF3A
	|-Array.EmptyInternalEnumerator<TimeSpan>.MoveNext
	|
	|-RVA: 0xF3C Offset: 0xF3C VA: 0xF3C
	|-Array.EmptyInternalEnumerator<ushort>.MoveNext
	|
	|-RVA: 0xF3F Offset: 0xF3F VA: 0xF3F
	|-Array.EmptyInternalEnumerator<uint>.MoveNext
	|
	|-RVA: 0xF42 Offset: 0xF42 VA: 0xF42
	|-Array.EmptyInternalEnumerator<ulong>.MoveNext
	|
	|-RVA: 0xF44 Offset: 0xF44 VA: 0xF44
	|-Array.EmptyInternalEnumerator<UIntPtr>.MoveNext
	|
	|-RVA: 0xF47 Offset: 0xF47 VA: 0xF47
	|-Array.EmptyInternalEnumerator<BeforeRenderHelper.OrderBlock>.MoveNext
	|
	|-RVA: 0xF49 Offset: 0xF49 VA: 0xF49
	|-Array.EmptyInternalEnumerator<Color32>.MoveNext
	|
	|-RVA: 0xF4B Offset: 0xF4B VA: 0xF4B
	|-Array.EmptyInternalEnumerator<RaycastResult>.MoveNext
	|
	|-RVA: 0xF4D Offset: 0xF4D VA: 0xF4D
	|-Array.EmptyInternalEnumerator<PlayerLoopSystem>.MoveNext
	|
	|-RVA: 0xF4F Offset: 0xF4F VA: 0xF4F
	|-Array.EmptyInternalEnumerator<Keyframe>.MoveNext
	|
	|-RVA: 0xF51 Offset: 0xF51 VA: 0xF51
	|-Array.EmptyInternalEnumerator<PlayableBinding>.MoveNext
	|
	|-RVA: 0xF53 Offset: 0xF53 VA: 0xF53
	|-Array.EmptyInternalEnumerator<RaycastHit2D>.MoveNext
	|
	|-RVA: 0xF55 Offset: 0xF55 VA: 0xF55
	|-Array.EmptyInternalEnumerator<RaycastHit>.MoveNext
	|
	|-RVA: 0xF57 Offset: 0xF57 VA: 0xF57
	|-Array.EmptyInternalEnumerator<SendMouseEvents.HitInfo>.MoveNext
	|
	|-RVA: 0xF59 Offset: 0xF59 VA: 0xF59
	|-Array.EmptyInternalEnumerator<ColorBlock>.MoveNext
	|
	|-RVA: 0xF5B Offset: 0xF5B VA: 0xF5B
	|-Array.EmptyInternalEnumerator<Navigation>.MoveNext
	|
	|-RVA: 0xF5D Offset: 0xF5D VA: 0xF5D
	|-Array.EmptyInternalEnumerator<SpriteState>.MoveNext
	|
	|-RVA: 0xF5F Offset: 0xF5F VA: 0xF5F
	|-Array.EmptyInternalEnumerator<UICharInfo>.MoveNext
	|
	|-RVA: 0xF61 Offset: 0xF61 VA: 0xF61
	|-Array.EmptyInternalEnumerator<UILineInfo>.MoveNext
	|
	|-RVA: 0xF63 Offset: 0xF63 VA: 0xF63
	|-Array.EmptyInternalEnumerator<UIVertex>.MoveNext
	|
	|-RVA: 0xF65 Offset: 0xF65 VA: 0xF65
	|-Array.EmptyInternalEnumerator<UnitySynchronizationContext.WorkRequest>.MoveNext
	|
	|-RVA: 0xF67 Offset: 0xF67 VA: 0xF67
	|-Array.EmptyInternalEnumerator<Vector2>.MoveNext
	|
	|-RVA: 0xF69 Offset: 0xF69 VA: 0xF69
	|-Array.EmptyInternalEnumerator<Vector3>.MoveNext
	|
	|-RVA: 0xF6B Offset: 0xF6B VA: 0xF6B
	|-Array.EmptyInternalEnumerator<Vector4>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8
	|-Array.EmptyInternalEnumerator<CodePointIndexer.TableRange>.get_Current
	|
	|-RVA: 0xEDD Offset: 0xEDD VA: 0xEDD
	|-Array.EmptyInternalEnumerator<bool>.get_Current
	|
	|-RVA: 0xEE0 Offset: 0xEE0 VA: 0xEE0
	|-Array.EmptyInternalEnumerator<byte>.get_Current
	|
	|-RVA: 0xEE3 Offset: 0xEE3 VA: 0xEE3
	|-Array.EmptyInternalEnumerator<char>.get_Current
	|
	|-RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
	|-Array.EmptyInternalEnumerator<DictionaryEntry>.get_Current
	|
	|-RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<int, object>>.get_Current
	|
	|-RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, int>>.get_Current
	|
	|-RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, object>>.get_Current
	|
	|-RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.get_Current
	|
	|-RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<ulong, object>>.get_Current
	|
	|-RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
	|-Array.EmptyInternalEnumerator<HashSet.Slot<object>>.get_Current
	|
	|-RVA: 0x900 Offset: 0x900 VA: 0x900
	|-Array.EmptyInternalEnumerator<KeyValuePair<DateTime, object>>.get_Current
	|
	|-RVA: 0x901 Offset: 0x901 VA: 0x901
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, int>>.get_Current
	|
	|-RVA: 0x902 Offset: 0x902 VA: 0x902
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, object>>.get_Current
	|
	|-RVA: 0x903 Offset: 0x903 VA: 0x903
	|-Array.EmptyInternalEnumerator<KeyValuePair<int, object>>.get_Current
	|
	|-RVA: 0x904 Offset: 0x904 VA: 0x904
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, int>>.get_Current
	|
	|-RVA: 0x905 Offset: 0x905 VA: 0x905
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, object>>.get_Current
	|
	|-RVA: 0x906 Offset: 0x906 VA: 0x906
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, ResourceLocator>>.get_Current
	|
	|-RVA: 0x907 Offset: 0x907 VA: 0x907
	|-Array.EmptyInternalEnumerator<KeyValuePair<ulong, object>>.get_Current
	|
	|-RVA: 0x908 Offset: 0x908 VA: 0x908
	|-Array.EmptyInternalEnumerator<Hashtable.bucket>.get_Current
	|
	|-RVA: 0x91 Offset: 0x91 VA: 0x91
	|-Array.EmptyInternalEnumerator<DateTime>.get_Current
	|
	|-RVA: 0x909 Offset: 0x909 VA: 0x909
	|-Array.EmptyInternalEnumerator<Decimal>.get_Current
	|
	|-RVA: 0x90A Offset: 0x90A VA: 0x90A
	|-Array.EmptyInternalEnumerator<EventProvider.SessionInfo>.get_Current
	|
	|-RVA: 0x90B Offset: 0x90B VA: 0x90B
	|-Array.EmptyInternalEnumerator<EventSource.EventMetadata>.get_Current
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-Array.EmptyInternalEnumerator<double>.get_Current
	|
	|-RVA: 0x90C Offset: 0x90C VA: 0x90C
	|-Array.EmptyInternalEnumerator<InternalCodePageDataItem>.get_Current
	|
	|-RVA: 0x90D Offset: 0x90D VA: 0x90D
	|-Array.EmptyInternalEnumerator<InternalEncodingDataItem>.get_Current
	|
	|-RVA: 0x90E Offset: 0x90E VA: 0x90E
	|-Array.EmptyInternalEnumerator<Guid>.get_Current
	|
	|-RVA: 0xF16 Offset: 0xF16 VA: 0xF16
	|-Array.EmptyInternalEnumerator<short>.get_Current
	|
	|-RVA: 0xF19 Offset: 0xF19 VA: 0xF19
	|-Array.EmptyInternalEnumerator<int>.get_Current
	|
	|-RVA: 0xF1C Offset: 0xF1C VA: 0xF1C
	|-Array.EmptyInternalEnumerator<Int32Enum>.get_Current
	|
	|-RVA: 0x92 Offset: 0x92 VA: 0x92
	|-Array.EmptyInternalEnumerator<long>.get_Current
	|
	|-RVA: 0xF21 Offset: 0xF21 VA: 0xF21
	|-Array.EmptyInternalEnumerator<IntPtr>.get_Current
	|
	|-RVA: 0xD06 Offset: 0xD06 VA: 0xD06
	|-Array.EmptyInternalEnumerator<object>.get_Current
	|
	|-RVA: 0x90F Offset: 0x90F VA: 0x90F
	|-Array.EmptyInternalEnumerator<ParameterizedStrings.FormatParam>.get_Current
	|
	|-RVA: 0x910 Offset: 0x910 VA: 0x910
	|-Array.EmptyInternalEnumerator<CustomAttributeNamedArgument>.get_Current
	|
	|-RVA: 0x911 Offset: 0x911 VA: 0x911
	|-Array.EmptyInternalEnumerator<CustomAttributeTypedArgument>.get_Current
	|
	|-RVA: 0xF2A Offset: 0xF2A VA: 0xF2A
	|-Array.EmptyInternalEnumerator<ParameterModifier>.get_Current
	|
	|-RVA: 0x912 Offset: 0x912 VA: 0x912
	|-Array.EmptyInternalEnumerator<ResourceLocator>.get_Current
	|
	|-RVA: 0x913 Offset: 0x913 VA: 0x913
	|-Array.EmptyInternalEnumerator<Ephemeron>.get_Current
	|
	|-RVA: 0xF31 Offset: 0xF31 VA: 0xF31
	|-Array.EmptyInternalEnumerator<GCHandle>.get_Current
	|
	|-RVA: 0xF34 Offset: 0xF34 VA: 0xF34
	|-Array.EmptyInternalEnumerator<sbyte>.get_Current
	|
	|-RVA: 0x8B Offset: 0x8B VA: 0x8B
	|-Array.EmptyInternalEnumerator<float>.get_Current
	|
	|-RVA: 0x914 Offset: 0x914 VA: 0x914
	|-Array.EmptyInternalEnumerator<CancellationTokenRegistration>.get_Current
	|
	|-RVA: 0x93 Offset: 0x93 VA: 0x93
	|-Array.EmptyInternalEnumerator<TimeSpan>.get_Current
	|
	|-RVA: 0xF3D Offset: 0xF3D VA: 0xF3D
	|-Array.EmptyInternalEnumerator<ushort>.get_Current
	|
	|-RVA: 0xF40 Offset: 0xF40 VA: 0xF40
	|-Array.EmptyInternalEnumerator<uint>.get_Current
	|
	|-RVA: 0x94 Offset: 0x94 VA: 0x94
	|-Array.EmptyInternalEnumerator<ulong>.get_Current
	|
	|-RVA: 0xF45 Offset: 0xF45 VA: 0xF45
	|-Array.EmptyInternalEnumerator<UIntPtr>.get_Current
	|
	|-RVA: 0x915 Offset: 0x915 VA: 0x915
	|-Array.EmptyInternalEnumerator<BeforeRenderHelper.OrderBlock>.get_Current
	|
	|-RVA: 0x916 Offset: 0x916 VA: 0x916
	|-Array.EmptyInternalEnumerator<Color32>.get_Current
	|
	|-RVA: 0x917 Offset: 0x917 VA: 0x917
	|-Array.EmptyInternalEnumerator<RaycastResult>.get_Current
	|
	|-RVA: 0x918 Offset: 0x918 VA: 0x918
	|-Array.EmptyInternalEnumerator<PlayerLoopSystem>.get_Current
	|
	|-RVA: 0x919 Offset: 0x919 VA: 0x919
	|-Array.EmptyInternalEnumerator<Keyframe>.get_Current
	|
	|-RVA: 0x91A Offset: 0x91A VA: 0x91A
	|-Array.EmptyInternalEnumerator<PlayableBinding>.get_Current
	|
	|-RVA: 0x91B Offset: 0x91B VA: 0x91B
	|-Array.EmptyInternalEnumerator<RaycastHit2D>.get_Current
	|
	|-RVA: 0x91C Offset: 0x91C VA: 0x91C
	|-Array.EmptyInternalEnumerator<RaycastHit>.get_Current
	|
	|-RVA: 0x91D Offset: 0x91D VA: 0x91D
	|-Array.EmptyInternalEnumerator<SendMouseEvents.HitInfo>.get_Current
	|
	|-RVA: 0x91E Offset: 0x91E VA: 0x91E
	|-Array.EmptyInternalEnumerator<ColorBlock>.get_Current
	|
	|-RVA: 0x91F Offset: 0x91F VA: 0x91F
	|-Array.EmptyInternalEnumerator<Navigation>.get_Current
	|
	|-RVA: 0x920 Offset: 0x920 VA: 0x920
	|-Array.EmptyInternalEnumerator<SpriteState>.get_Current
	|
	|-RVA: 0x921 Offset: 0x921 VA: 0x921
	|-Array.EmptyInternalEnumerator<UICharInfo>.get_Current
	|
	|-RVA: 0x922 Offset: 0x922 VA: 0x922
	|-Array.EmptyInternalEnumerator<UILineInfo>.get_Current
	|
	|-RVA: 0x923 Offset: 0x923 VA: 0x923
	|-Array.EmptyInternalEnumerator<UIVertex>.get_Current
	|
	|-RVA: 0x924 Offset: 0x924 VA: 0x924
	|-Array.EmptyInternalEnumerator<UnitySynchronizationContext.WorkRequest>.get_Current
	|
	|-RVA: 0x925 Offset: 0x925 VA: 0x925
	|-Array.EmptyInternalEnumerator<Vector2>.get_Current
	|
	|-RVA: 0x926 Offset: 0x926 VA: 0x926
	|-Array.EmptyInternalEnumerator<Vector3>.get_Current
	|
	|-RVA: 0x927 Offset: 0x927 VA: 0x927
	|-Array.EmptyInternalEnumerator<Vector4>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xEDB Offset: 0xEDB VA: 0xEDB
	|-Array.EmptyInternalEnumerator<CodePointIndexer.TableRange>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEDE Offset: 0xEDE VA: 0xEDE
	|-Array.EmptyInternalEnumerator<bool>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEE1 Offset: 0xEE1 VA: 0xEE1
	|-Array.EmptyInternalEnumerator<byte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEE4 Offset: 0xEE4 VA: 0xEE4
	|-Array.EmptyInternalEnumerator<char>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEE6 Offset: 0xEE6 VA: 0xEE6
	|-Array.EmptyInternalEnumerator<DictionaryEntry>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEE8 Offset: 0xEE8 VA: 0xEE8
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<int, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEEA Offset: 0xEEA VA: 0xEEA
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEEC Offset: 0xEEC VA: 0xEEC
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEEE Offset: 0xEEE VA: 0xEEE
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, ResourceLocator>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEF0 Offset: 0xEF0 VA: 0xEF0
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<ulong, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEF2 Offset: 0xEF2 VA: 0xEF2
	|-Array.EmptyInternalEnumerator<HashSet.Slot<object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEF4 Offset: 0xEF4 VA: 0xEF4
	|-Array.EmptyInternalEnumerator<KeyValuePair<DateTime, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEF6 Offset: 0xEF6 VA: 0xEF6
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEF8 Offset: 0xEF8 VA: 0xEF8
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEFA Offset: 0xEFA VA: 0xEFA
	|-Array.EmptyInternalEnumerator<KeyValuePair<int, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEFC Offset: 0xEFC VA: 0xEFC
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, int>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xEFE Offset: 0xEFE VA: 0xEFE
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF00 Offset: 0xF00 VA: 0xF00
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, ResourceLocator>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF02 Offset: 0xF02 VA: 0xF02
	|-Array.EmptyInternalEnumerator<KeyValuePair<ulong, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF04 Offset: 0xF04 VA: 0xF04
	|-Array.EmptyInternalEnumerator<Hashtable.bucket>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF06 Offset: 0xF06 VA: 0xF06
	|-Array.EmptyInternalEnumerator<DateTime>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF08 Offset: 0xF08 VA: 0xF08
	|-Array.EmptyInternalEnumerator<Decimal>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0A Offset: 0xF0A VA: 0xF0A
	|-Array.EmptyInternalEnumerator<EventProvider.SessionInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0C Offset: 0xF0C VA: 0xF0C
	|-Array.EmptyInternalEnumerator<EventSource.EventMetadata>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF0E Offset: 0xF0E VA: 0xF0E
	|-Array.EmptyInternalEnumerator<double>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF10 Offset: 0xF10 VA: 0xF10
	|-Array.EmptyInternalEnumerator<InternalCodePageDataItem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF12 Offset: 0xF12 VA: 0xF12
	|-Array.EmptyInternalEnumerator<InternalEncodingDataItem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF14 Offset: 0xF14 VA: 0xF14
	|-Array.EmptyInternalEnumerator<Guid>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF17 Offset: 0xF17 VA: 0xF17
	|-Array.EmptyInternalEnumerator<short>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF1A Offset: 0xF1A VA: 0xF1A
	|-Array.EmptyInternalEnumerator<int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF1D Offset: 0xF1D VA: 0xF1D
	|-Array.EmptyInternalEnumerator<Int32Enum>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF1F Offset: 0xF1F VA: 0xF1F
	|-Array.EmptyInternalEnumerator<long>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF22 Offset: 0xF22 VA: 0xF22
	|-Array.EmptyInternalEnumerator<IntPtr>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD07 Offset: 0xD07 VA: 0xD07
	|-Array.EmptyInternalEnumerator<object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF24 Offset: 0xF24 VA: 0xF24
	|-Array.EmptyInternalEnumerator<ParameterizedStrings.FormatParam>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF26 Offset: 0xF26 VA: 0xF26
	|-Array.EmptyInternalEnumerator<CustomAttributeNamedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF28 Offset: 0xF28 VA: 0xF28
	|-Array.EmptyInternalEnumerator<CustomAttributeTypedArgument>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF2B Offset: 0xF2B VA: 0xF2B
	|-Array.EmptyInternalEnumerator<ParameterModifier>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF2D Offset: 0xF2D VA: 0xF2D
	|-Array.EmptyInternalEnumerator<ResourceLocator>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF2F Offset: 0xF2F VA: 0xF2F
	|-Array.EmptyInternalEnumerator<Ephemeron>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF32 Offset: 0xF32 VA: 0xF32
	|-Array.EmptyInternalEnumerator<GCHandle>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF35 Offset: 0xF35 VA: 0xF35
	|-Array.EmptyInternalEnumerator<sbyte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF37 Offset: 0xF37 VA: 0xF37
	|-Array.EmptyInternalEnumerator<float>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF39 Offset: 0xF39 VA: 0xF39
	|-Array.EmptyInternalEnumerator<CancellationTokenRegistration>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF3B Offset: 0xF3B VA: 0xF3B
	|-Array.EmptyInternalEnumerator<TimeSpan>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF3E Offset: 0xF3E VA: 0xF3E
	|-Array.EmptyInternalEnumerator<ushort>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF41 Offset: 0xF41 VA: 0xF41
	|-Array.EmptyInternalEnumerator<uint>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF43 Offset: 0xF43 VA: 0xF43
	|-Array.EmptyInternalEnumerator<ulong>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF46 Offset: 0xF46 VA: 0xF46
	|-Array.EmptyInternalEnumerator<UIntPtr>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF48 Offset: 0xF48 VA: 0xF48
	|-Array.EmptyInternalEnumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF4A Offset: 0xF4A VA: 0xF4A
	|-Array.EmptyInternalEnumerator<Color32>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF4C Offset: 0xF4C VA: 0xF4C
	|-Array.EmptyInternalEnumerator<RaycastResult>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF4E Offset: 0xF4E VA: 0xF4E
	|-Array.EmptyInternalEnumerator<PlayerLoopSystem>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF50 Offset: 0xF50 VA: 0xF50
	|-Array.EmptyInternalEnumerator<Keyframe>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF52 Offset: 0xF52 VA: 0xF52
	|-Array.EmptyInternalEnumerator<PlayableBinding>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF54 Offset: 0xF54 VA: 0xF54
	|-Array.EmptyInternalEnumerator<RaycastHit2D>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF56 Offset: 0xF56 VA: 0xF56
	|-Array.EmptyInternalEnumerator<RaycastHit>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF58 Offset: 0xF58 VA: 0xF58
	|-Array.EmptyInternalEnumerator<SendMouseEvents.HitInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF5A Offset: 0xF5A VA: 0xF5A
	|-Array.EmptyInternalEnumerator<ColorBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF5C Offset: 0xF5C VA: 0xF5C
	|-Array.EmptyInternalEnumerator<Navigation>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF5E Offset: 0xF5E VA: 0xF5E
	|-Array.EmptyInternalEnumerator<SpriteState>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF60 Offset: 0xF60 VA: 0xF60
	|-Array.EmptyInternalEnumerator<UICharInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF62 Offset: 0xF62 VA: 0xF62
	|-Array.EmptyInternalEnumerator<UILineInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF64 Offset: 0xF64 VA: 0xF64
	|-Array.EmptyInternalEnumerator<UIVertex>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF66 Offset: 0xF66 VA: 0xF66
	|-Array.EmptyInternalEnumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF68 Offset: 0xF68 VA: 0xF68
	|-Array.EmptyInternalEnumerator<Vector2>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF6A Offset: 0xF6A VA: 0xF6A
	|-Array.EmptyInternalEnumerator<Vector3>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xF6C Offset: 0xF6C VA: 0xF6C
	|-Array.EmptyInternalEnumerator<Vector4>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x955 Offset: 0x955 VA: 0x955
	|-Array.EmptyInternalEnumerator<CodePointIndexer.TableRange>..ctor
	|
	|-RVA: 0x957 Offset: 0x957 VA: 0x957
	|-Array.EmptyInternalEnumerator<bool>..ctor
	|
	|-RVA: 0x959 Offset: 0x959 VA: 0x959
	|-Array.EmptyInternalEnumerator<byte>..ctor
	|
	|-RVA: 0x95B Offset: 0x95B VA: 0x95B
	|-Array.EmptyInternalEnumerator<char>..ctor
	|
	|-RVA: 0x95D Offset: 0x95D VA: 0x95D
	|-Array.EmptyInternalEnumerator<DictionaryEntry>..ctor
	|
	|-RVA: 0x95F Offset: 0x95F VA: 0x95F
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<int, object>>..ctor
	|
	|-RVA: 0x961 Offset: 0x961 VA: 0x961
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, int>>..ctor
	|
	|-RVA: 0x963 Offset: 0x963 VA: 0x963
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, object>>..ctor
	|
	|-RVA: 0x965 Offset: 0x965 VA: 0x965
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, ResourceLocator>>..ctor
	|
	|-RVA: 0x967 Offset: 0x967 VA: 0x967
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<ulong, object>>..ctor
	|
	|-RVA: 0x969 Offset: 0x969 VA: 0x969
	|-Array.EmptyInternalEnumerator<HashSet.Slot<object>>..ctor
	|
	|-RVA: 0x96B Offset: 0x96B VA: 0x96B
	|-Array.EmptyInternalEnumerator<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0x96D Offset: 0x96D VA: 0x96D
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, int>>..ctor
	|
	|-RVA: 0x96F Offset: 0x96F VA: 0x96F
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, object>>..ctor
	|
	|-RVA: 0x971 Offset: 0x971 VA: 0x971
	|-Array.EmptyInternalEnumerator<KeyValuePair<int, object>>..ctor
	|
	|-RVA: 0x973 Offset: 0x973 VA: 0x973
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, int>>..ctor
	|
	|-RVA: 0x975 Offset: 0x975 VA: 0x975
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x977 Offset: 0x977 VA: 0x977
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, ResourceLocator>>..ctor
	|
	|-RVA: 0x979 Offset: 0x979 VA: 0x979
	|-Array.EmptyInternalEnumerator<KeyValuePair<ulong, object>>..ctor
	|
	|-RVA: 0x97B Offset: 0x97B VA: 0x97B
	|-Array.EmptyInternalEnumerator<Hashtable.bucket>..ctor
	|
	|-RVA: 0x97D Offset: 0x97D VA: 0x97D
	|-Array.EmptyInternalEnumerator<DateTime>..ctor
	|
	|-RVA: 0x97F Offset: 0x97F VA: 0x97F
	|-Array.EmptyInternalEnumerator<Decimal>..ctor
	|
	|-RVA: 0x981 Offset: 0x981 VA: 0x981
	|-Array.EmptyInternalEnumerator<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x983 Offset: 0x983 VA: 0x983
	|-Array.EmptyInternalEnumerator<EventSource.EventMetadata>..ctor
	|
	|-RVA: 0x985 Offset: 0x985 VA: 0x985
	|-Array.EmptyInternalEnumerator<double>..ctor
	|
	|-RVA: 0x987 Offset: 0x987 VA: 0x987
	|-Array.EmptyInternalEnumerator<InternalCodePageDataItem>..ctor
	|
	|-RVA: 0x989 Offset: 0x989 VA: 0x989
	|-Array.EmptyInternalEnumerator<InternalEncodingDataItem>..ctor
	|
	|-RVA: 0x98B Offset: 0x98B VA: 0x98B
	|-Array.EmptyInternalEnumerator<Guid>..ctor
	|
	|-RVA: 0x98D Offset: 0x98D VA: 0x98D
	|-Array.EmptyInternalEnumerator<short>..ctor
	|
	|-RVA: 0x98F Offset: 0x98F VA: 0x98F
	|-Array.EmptyInternalEnumerator<int>..ctor
	|
	|-RVA: 0x991 Offset: 0x991 VA: 0x991
	|-Array.EmptyInternalEnumerator<Int32Enum>..ctor
	|
	|-RVA: 0x993 Offset: 0x993 VA: 0x993
	|-Array.EmptyInternalEnumerator<long>..ctor
	|
	|-RVA: 0x995 Offset: 0x995 VA: 0x995
	|-Array.EmptyInternalEnumerator<IntPtr>..ctor
	|
	|-RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3
	|-Array.EmptyInternalEnumerator<object>..ctor
	|
	|-RVA: 0x997 Offset: 0x997 VA: 0x997
	|-Array.EmptyInternalEnumerator<ParameterizedStrings.FormatParam>..ctor
	|
	|-RVA: 0x999 Offset: 0x999 VA: 0x999
	|-Array.EmptyInternalEnumerator<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x99B Offset: 0x99B VA: 0x99B
	|-Array.EmptyInternalEnumerator<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0x99D Offset: 0x99D VA: 0x99D
	|-Array.EmptyInternalEnumerator<ParameterModifier>..ctor
	|
	|-RVA: 0x99F Offset: 0x99F VA: 0x99F
	|-Array.EmptyInternalEnumerator<ResourceLocator>..ctor
	|
	|-RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	|-Array.EmptyInternalEnumerator<Ephemeron>..ctor
	|
	|-RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	|-Array.EmptyInternalEnumerator<GCHandle>..ctor
	|
	|-RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5
	|-Array.EmptyInternalEnumerator<sbyte>..ctor
	|
	|-RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7
	|-Array.EmptyInternalEnumerator<float>..ctor
	|
	|-RVA: 0x9A9 Offset: 0x9A9 VA: 0x9A9
	|-Array.EmptyInternalEnumerator<CancellationTokenRegistration>..ctor
	|
	|-RVA: 0x9AB Offset: 0x9AB VA: 0x9AB
	|-Array.EmptyInternalEnumerator<TimeSpan>..ctor
	|
	|-RVA: 0x9AD Offset: 0x9AD VA: 0x9AD
	|-Array.EmptyInternalEnumerator<ushort>..ctor
	|
	|-RVA: 0x9AF Offset: 0x9AF VA: 0x9AF
	|-Array.EmptyInternalEnumerator<uint>..ctor
	|
	|-RVA: 0x9B1 Offset: 0x9B1 VA: 0x9B1
	|-Array.EmptyInternalEnumerator<ulong>..ctor
	|
	|-RVA: 0x9B3 Offset: 0x9B3 VA: 0x9B3
	|-Array.EmptyInternalEnumerator<UIntPtr>..ctor
	|
	|-RVA: 0x9B5 Offset: 0x9B5 VA: 0x9B5
	|-Array.EmptyInternalEnumerator<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x9B7 Offset: 0x9B7 VA: 0x9B7
	|-Array.EmptyInternalEnumerator<Color32>..ctor
	|
	|-RVA: 0x9B9 Offset: 0x9B9 VA: 0x9B9
	|-Array.EmptyInternalEnumerator<RaycastResult>..ctor
	|
	|-RVA: 0x9BB Offset: 0x9BB VA: 0x9BB
	|-Array.EmptyInternalEnumerator<PlayerLoopSystem>..ctor
	|
	|-RVA: 0x9BD Offset: 0x9BD VA: 0x9BD
	|-Array.EmptyInternalEnumerator<Keyframe>..ctor
	|
	|-RVA: 0x9BF Offset: 0x9BF VA: 0x9BF
	|-Array.EmptyInternalEnumerator<PlayableBinding>..ctor
	|
	|-RVA: 0x9C1 Offset: 0x9C1 VA: 0x9C1
	|-Array.EmptyInternalEnumerator<RaycastHit2D>..ctor
	|
	|-RVA: 0x9C3 Offset: 0x9C3 VA: 0x9C3
	|-Array.EmptyInternalEnumerator<RaycastHit>..ctor
	|
	|-RVA: 0x9C5 Offset: 0x9C5 VA: 0x9C5
	|-Array.EmptyInternalEnumerator<SendMouseEvents.HitInfo>..ctor
	|
	|-RVA: 0x9C7 Offset: 0x9C7 VA: 0x9C7
	|-Array.EmptyInternalEnumerator<ColorBlock>..ctor
	|
	|-RVA: 0x9C9 Offset: 0x9C9 VA: 0x9C9
	|-Array.EmptyInternalEnumerator<Navigation>..ctor
	|
	|-RVA: 0x9CB Offset: 0x9CB VA: 0x9CB
	|-Array.EmptyInternalEnumerator<SpriteState>..ctor
	|
	|-RVA: 0x9CD Offset: 0x9CD VA: 0x9CD
	|-Array.EmptyInternalEnumerator<UICharInfo>..ctor
	|
	|-RVA: 0x9CF Offset: 0x9CF VA: 0x9CF
	|-Array.EmptyInternalEnumerator<UILineInfo>..ctor
	|
	|-RVA: 0x9D1 Offset: 0x9D1 VA: 0x9D1
	|-Array.EmptyInternalEnumerator<UIVertex>..ctor
	|
	|-RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3
	|-Array.EmptyInternalEnumerator<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5
	|-Array.EmptyInternalEnumerator<Vector2>..ctor
	|
	|-RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7
	|-Array.EmptyInternalEnumerator<Vector3>..ctor
	|
	|-RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9
	|-Array.EmptyInternalEnumerator<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF93 Offset: 0xF93 VA: 0xF93
	|-Array.EmptyInternalEnumerator<CodePointIndexer.TableRange>..cctor
	|
	|-RVA: 0xF94 Offset: 0xF94 VA: 0xF94
	|-Array.EmptyInternalEnumerator<bool>..cctor
	|
	|-RVA: 0xF95 Offset: 0xF95 VA: 0xF95
	|-Array.EmptyInternalEnumerator<byte>..cctor
	|
	|-RVA: 0xF96 Offset: 0xF96 VA: 0xF96
	|-Array.EmptyInternalEnumerator<char>..cctor
	|
	|-RVA: 0xF97 Offset: 0xF97 VA: 0xF97
	|-Array.EmptyInternalEnumerator<DictionaryEntry>..cctor
	|
	|-RVA: 0xF98 Offset: 0xF98 VA: 0xF98
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<int, object>>..cctor
	|
	|-RVA: 0xF99 Offset: 0xF99 VA: 0xF99
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, int>>..cctor
	|
	|-RVA: 0xF9A Offset: 0xF9A VA: 0xF9A
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, object>>..cctor
	|
	|-RVA: 0xF9B Offset: 0xF9B VA: 0xF9B
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<object, ResourceLocator>>..cctor
	|
	|-RVA: 0xF9C Offset: 0xF9C VA: 0xF9C
	|-Array.EmptyInternalEnumerator<Dictionary.Entry<ulong, object>>..cctor
	|
	|-RVA: 0xF9D Offset: 0xF9D VA: 0xF9D
	|-Array.EmptyInternalEnumerator<HashSet.Slot<object>>..cctor
	|
	|-RVA: 0xF9E Offset: 0xF9E VA: 0xF9E
	|-Array.EmptyInternalEnumerator<KeyValuePair<DateTime, object>>..cctor
	|
	|-RVA: 0xF9F Offset: 0xF9F VA: 0xF9F
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, int>>..cctor
	|
	|-RVA: 0xFA0 Offset: 0xFA0 VA: 0xFA0
	|-Array.EmptyInternalEnumerator<KeyValuePair<Guid, object>>..cctor
	|
	|-RVA: 0xFA1 Offset: 0xFA1 VA: 0xFA1
	|-Array.EmptyInternalEnumerator<KeyValuePair<int, object>>..cctor
	|
	|-RVA: 0xFA2 Offset: 0xFA2 VA: 0xFA2
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, int>>..cctor
	|
	|-RVA: 0xFA3 Offset: 0xFA3 VA: 0xFA3
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0xFA4 Offset: 0xFA4 VA: 0xFA4
	|-Array.EmptyInternalEnumerator<KeyValuePair<object, ResourceLocator>>..cctor
	|
	|-RVA: 0xFA5 Offset: 0xFA5 VA: 0xFA5
	|-Array.EmptyInternalEnumerator<KeyValuePair<ulong, object>>..cctor
	|
	|-RVA: 0xFA6 Offset: 0xFA6 VA: 0xFA6
	|-Array.EmptyInternalEnumerator<Hashtable.bucket>..cctor
	|
	|-RVA: 0xFA7 Offset: 0xFA7 VA: 0xFA7
	|-Array.EmptyInternalEnumerator<DateTime>..cctor
	|
	|-RVA: 0xFA8 Offset: 0xFA8 VA: 0xFA8
	|-Array.EmptyInternalEnumerator<Decimal>..cctor
	|
	|-RVA: 0xFA9 Offset: 0xFA9 VA: 0xFA9
	|-Array.EmptyInternalEnumerator<EventProvider.SessionInfo>..cctor
	|
	|-RVA: 0xFAA Offset: 0xFAA VA: 0xFAA
	|-Array.EmptyInternalEnumerator<EventSource.EventMetadata>..cctor
	|
	|-RVA: 0xFAB Offset: 0xFAB VA: 0xFAB
	|-Array.EmptyInternalEnumerator<double>..cctor
	|
	|-RVA: 0xFAC Offset: 0xFAC VA: 0xFAC
	|-Array.EmptyInternalEnumerator<InternalCodePageDataItem>..cctor
	|
	|-RVA: 0xFAD Offset: 0xFAD VA: 0xFAD
	|-Array.EmptyInternalEnumerator<InternalEncodingDataItem>..cctor
	|
	|-RVA: 0xFAE Offset: 0xFAE VA: 0xFAE
	|-Array.EmptyInternalEnumerator<Guid>..cctor
	|
	|-RVA: 0xFAF Offset: 0xFAF VA: 0xFAF
	|-Array.EmptyInternalEnumerator<short>..cctor
	|
	|-RVA: 0xFB0 Offset: 0xFB0 VA: 0xFB0
	|-Array.EmptyInternalEnumerator<int>..cctor
	|
	|-RVA: 0xFB1 Offset: 0xFB1 VA: 0xFB1
	|-Array.EmptyInternalEnumerator<Int32Enum>..cctor
	|
	|-RVA: 0xFB2 Offset: 0xFB2 VA: 0xFB2
	|-Array.EmptyInternalEnumerator<long>..cctor
	|
	|-RVA: 0xFB3 Offset: 0xFB3 VA: 0xFB3
	|-Array.EmptyInternalEnumerator<IntPtr>..cctor
	|
	|-RVA: 0xF88 Offset: 0xF88 VA: 0xF88
	|-Array.EmptyInternalEnumerator<object>..cctor
	|
	|-RVA: 0xFB4 Offset: 0xFB4 VA: 0xFB4
	|-Array.EmptyInternalEnumerator<ParameterizedStrings.FormatParam>..cctor
	|
	|-RVA: 0xFB5 Offset: 0xFB5 VA: 0xFB5
	|-Array.EmptyInternalEnumerator<CustomAttributeNamedArgument>..cctor
	|
	|-RVA: 0xFB6 Offset: 0xFB6 VA: 0xFB6
	|-Array.EmptyInternalEnumerator<CustomAttributeTypedArgument>..cctor
	|
	|-RVA: 0xFB7 Offset: 0xFB7 VA: 0xFB7
	|-Array.EmptyInternalEnumerator<ParameterModifier>..cctor
	|
	|-RVA: 0xFB8 Offset: 0xFB8 VA: 0xFB8
	|-Array.EmptyInternalEnumerator<ResourceLocator>..cctor
	|
	|-RVA: 0xFB9 Offset: 0xFB9 VA: 0xFB9
	|-Array.EmptyInternalEnumerator<Ephemeron>..cctor
	|
	|-RVA: 0xFBA Offset: 0xFBA VA: 0xFBA
	|-Array.EmptyInternalEnumerator<GCHandle>..cctor
	|
	|-RVA: 0xFBB Offset: 0xFBB VA: 0xFBB
	|-Array.EmptyInternalEnumerator<sbyte>..cctor
	|
	|-RVA: 0xFBC Offset: 0xFBC VA: 0xFBC
	|-Array.EmptyInternalEnumerator<float>..cctor
	|
	|-RVA: 0xFBD Offset: 0xFBD VA: 0xFBD
	|-Array.EmptyInternalEnumerator<CancellationTokenRegistration>..cctor
	|
	|-RVA: 0xFBE Offset: 0xFBE VA: 0xFBE
	|-Array.EmptyInternalEnumerator<TimeSpan>..cctor
	|
	|-RVA: 0xFBF Offset: 0xFBF VA: 0xFBF
	|-Array.EmptyInternalEnumerator<ushort>..cctor
	|
	|-RVA: 0xFC0 Offset: 0xFC0 VA: 0xFC0
	|-Array.EmptyInternalEnumerator<uint>..cctor
	|
	|-RVA: 0xFC1 Offset: 0xFC1 VA: 0xFC1
	|-Array.EmptyInternalEnumerator<ulong>..cctor
	|
	|-RVA: 0xFC2 Offset: 0xFC2 VA: 0xFC2
	|-Array.EmptyInternalEnumerator<UIntPtr>..cctor
	|
	|-RVA: 0xFC3 Offset: 0xFC3 VA: 0xFC3
	|-Array.EmptyInternalEnumerator<BeforeRenderHelper.OrderBlock>..cctor
	|
	|-RVA: 0xFC4 Offset: 0xFC4 VA: 0xFC4
	|-Array.EmptyInternalEnumerator<Color32>..cctor
	|
	|-RVA: 0xFC5 Offset: 0xFC5 VA: 0xFC5
	|-Array.EmptyInternalEnumerator<RaycastResult>..cctor
	|
	|-RVA: 0xFC6 Offset: 0xFC6 VA: 0xFC6
	|-Array.EmptyInternalEnumerator<PlayerLoopSystem>..cctor
	|
	|-RVA: 0xFC7 Offset: 0xFC7 VA: 0xFC7
	|-Array.EmptyInternalEnumerator<Keyframe>..cctor
	|
	|-RVA: 0xFC8 Offset: 0xFC8 VA: 0xFC8
	|-Array.EmptyInternalEnumerator<PlayableBinding>..cctor
	|
	|-RVA: 0xFC9 Offset: 0xFC9 VA: 0xFC9
	|-Array.EmptyInternalEnumerator<RaycastHit2D>..cctor
	|
	|-RVA: 0xFCA Offset: 0xFCA VA: 0xFCA
	|-Array.EmptyInternalEnumerator<RaycastHit>..cctor
	|
	|-RVA: 0xFCB Offset: 0xFCB VA: 0xFCB
	|-Array.EmptyInternalEnumerator<SendMouseEvents.HitInfo>..cctor
	|
	|-RVA: 0xFCC Offset: 0xFCC VA: 0xFCC
	|-Array.EmptyInternalEnumerator<ColorBlock>..cctor
	|
	|-RVA: 0xFCD Offset: 0xFCD VA: 0xFCD
	|-Array.EmptyInternalEnumerator<Navigation>..cctor
	|
	|-RVA: 0xFCE Offset: 0xFCE VA: 0xFCE
	|-Array.EmptyInternalEnumerator<SpriteState>..cctor
	|
	|-RVA: 0xFCF Offset: 0xFCF VA: 0xFCF
	|-Array.EmptyInternalEnumerator<UICharInfo>..cctor
	|
	|-RVA: 0xFD0 Offset: 0xFD0 VA: 0xFD0
	|-Array.EmptyInternalEnumerator<UILineInfo>..cctor
	|
	|-RVA: 0xFD1 Offset: 0xFD1 VA: 0xFD1
	|-Array.EmptyInternalEnumerator<UIVertex>..cctor
	|
	|-RVA: 0xFD2 Offset: 0xFD2 VA: 0xFD2
	|-Array.EmptyInternalEnumerator<UnitySynchronizationContext.WorkRequest>..cctor
	|
	|-RVA: 0xFD3 Offset: 0xFD3 VA: 0xFD3
	|-Array.EmptyInternalEnumerator<Vector2>..cctor
	|
	|-RVA: 0xFD4 Offset: 0xFD4 VA: 0xFD4
	|-Array.EmptyInternalEnumerator<Vector3>..cctor
	|
	|-RVA: 0xFD5 Offset: 0xFD5 VA: 0xFD5
	|-Array.EmptyInternalEnumerator<Vector4>..cctor
	*/
}

// Namespace: 
private struct Array.SorterObjectArray // TypeDefIndex: 80
{
	// Fields
	private object[] keys; // 0x0
	private object[] items; // 0x4
	private IComparer comparer; // 0x8

	// Methods

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	internal void .ctor(object[] keys, object[] items, IComparer comparer) { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C
	internal void SwapIfGreaterWithItems(int a, int b) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	private void Swap(int i, int j) { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	internal void Sort(int left, int length) { }

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	private void IntrospectiveSort(int left, int length) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	private void IntroSort(int lo, int hi, int depthLimit) { }

	// RVA: 0x80B Offset: 0x80B VA: 0x80B
	private int PickPivotAndPartition(int lo, int hi) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80
	private void Heapsort(int lo, int hi) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	private void DownHeap(int i, int n, int lo) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81
	private void InsertionSort(int lo, int hi) { }
}

// Namespace: 
private struct Array.SorterGenericArray // TypeDefIndex: 81
{
	// Fields
	private Array keys; // 0x0
	private Array items; // 0x4
	private IComparer comparer; // 0x8

	// Methods

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	internal void .ctor(Array keys, Array items, IComparer comparer) { }

	// RVA: 0x76 Offset: 0x76 VA: 0x76
	internal void SwapIfGreaterWithItems(int a, int b) { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77
	private void Swap(int i, int j) { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78
	internal void Sort(int left, int length) { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79
	private void IntrospectiveSort(int left, int length) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	private void IntroSort(int lo, int hi, int depthLimit) { }

	// RVA: 0x80A Offset: 0x80A VA: 0x80A
	private int PickPivotAndPartition(int lo, int hi) { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A
	private void Heapsort(int lo, int hi) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	private void DownHeap(int i, int n, int lo) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	private void InsertionSort(int lo, int hi) { }
}

// Namespace: System
internal interface ITupleInternal : ITuple // TypeDefIndex: 82
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(StringBuilder sb) { }
}

// Namespace: System
public static class Tuple // TypeDefIndex: 83
{
	// Methods

	// RVA: -1 Offset: -1
	public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	|-Tuple.Create<EventProvider.SessionInfo, bool>
	|
	|-RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	|-Tuple.Create<Guid, int>
	|
	|-RVA: 0x62E Offset: 0x62E VA: 0x62E
	|-Tuple.Create<Stream, Stream.ReadWriteTask>
	|-Tuple.Create<object, object>
	|
	|-RVA: 0x6B0 Offset: 0x6B0 VA: 0x6B0
	|-Tuple.Create<int, int>
	*/

	// RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
	internal static int CombineHashCodes(int h1, int h2) { }

	// RVA: 0x9DE Offset: 0x9DE VA: 0x9DE
	internal static int CombineHashCodes(int h1, int h2, int h3) { }

	// RVA: 0x11F Offset: 0x11F VA: 0x11F
	internal static int CombineHashCodes(int h1, int h2, int h3, int h4) { }
}

// Namespace: System
[Serializable]
public class Tuple<T1, T2> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal, ITuple // TypeDefIndex: 84
{
	// Fields
	private readonly T1 m_Item1; // 0xFFFFFFFF
	private readonly T2 m_Item2; // 0xFFFFFFFF

	// Properties
	public T1 Item1 { get; }
	public T2 Item2 { get; }

	// Methods

	// RVA: -1 Offset: -1
	public T1 get_Item1() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x85C Offset: 0x85C VA: 0x85C
	|-Tuple<EventProvider.SessionInfo, bool>.get_Item1
	|
	|-RVA: 0x858 Offset: 0x858 VA: 0x858
	|-Tuple<Guid, int>.get_Item1
	|
	|-RVA: 0xD09 Offset: 0xD09 VA: 0xD09
	|-Tuple<Stream, Stream.ReadWriteTask>.get_Item1
	|-Tuple<TextWriter, string>.get_Item1
	|-Tuple<object, object>.get_Item1
	|
	|-RVA: 0xDE3 Offset: 0xDE3 VA: 0xDE3
	|-Tuple<TextWriter, char>.get_Item1
	|-Tuple<object, char>.get_Item1
	|
	|-RVA: 0xDD0 Offset: 0xDD0 VA: 0xDD0
	|-Tuple<int, int>.get_Item1
	*/

	// RVA: -1 Offset: -1
	public T2 get_Item2() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDCA Offset: 0xDCA VA: 0xDCA
	|-Tuple<EventProvider.SessionInfo, bool>.get_Item2
	|
	|-RVA: 0xDC5 Offset: 0xDC5 VA: 0xDC5
	|-Tuple<Guid, int>.get_Item2
	|
	|-RVA: 0xD0A Offset: 0xD0A VA: 0xD0A
	|-Tuple<Stream, Stream.ReadWriteTask>.get_Item2
	|-Tuple<TextWriter, string>.get_Item2
	|-Tuple<object, object>.get_Item2
	|
	|-RVA: 0xDE4 Offset: 0xDE4 VA: 0xDE4
	|-Tuple<TextWriter, char>.get_Item2
	|-Tuple<object, char>.get_Item2
	|
	|-RVA: 0xDD1 Offset: 0xDD1 VA: 0xDD1
	|-Tuple<int, int>.get_Item2
	*/

	// RVA: -1 Offset: -1
	public void .ctor(T1 item1, T2 item2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x99A Offset: 0x99A VA: 0x99A
	|-Tuple<EventProvider.SessionInfo, bool>..ctor
	|
	|-RVA: 0x99B Offset: 0x99B VA: 0x99B
	|-Tuple<Guid, int>..ctor
	|
	|-RVA: 0x99C Offset: 0x99C VA: 0x99C
	|-Tuple<int, int>..ctor
	|
	|-RVA: 0x99D Offset: 0x99D VA: 0x99D
	|-Tuple<object, char>..ctor
	|
	|-RVA: 0x3DD Offset: 0x3DD VA: 0x3DD
	|-Tuple<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBBA Offset: 0xBBA VA: 0xBBA
	|-Tuple<EventProvider.SessionInfo, bool>.Equals
	|
	|-RVA: 0xBBE Offset: 0xBBE VA: 0xBBE
	|-Tuple<Guid, int>.Equals
	|
	|-RVA: 0xBC2 Offset: 0xBC2 VA: 0xBC2
	|-Tuple<int, int>.Equals
	|
	|-RVA: 0xBC6 Offset: 0xBC6 VA: 0xBC6
	|-Tuple<object, char>.Equals
	|
	|-RVA: 0x62F Offset: 0x62F VA: 0x62F
	|-Tuple<object, object>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAE3 Offset: 0xAE3 VA: 0xAE3
	|-Tuple<EventProvider.SessionInfo, bool>.System.Collections.IStructuralEquatable.Equals
	|
	|-RVA: 0xAE5 Offset: 0xAE5 VA: 0xAE5
	|-Tuple<Guid, int>.System.Collections.IStructuralEquatable.Equals
	|
	|-RVA: 0xAE7 Offset: 0xAE7 VA: 0xAE7
	|-Tuple<int, int>.System.Collections.IStructuralEquatable.Equals
	|
	|-RVA: 0xAE9 Offset: 0xAE9 VA: 0xAE9
	|-Tuple<object, char>.System.Collections.IStructuralEquatable.Equals
	|
	|-RVA: 0xA3C Offset: 0xA3C VA: 0xA3C
	|-Tuple<object, object>.System.Collections.IStructuralEquatable.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private int System.IComparable.CompareTo(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBBB Offset: 0xBBB VA: 0xBBB
	|-Tuple<EventProvider.SessionInfo, bool>.System.IComparable.CompareTo
	|
	|-RVA: 0xBBF Offset: 0xBBF VA: 0xBBF
	|-Tuple<Guid, int>.System.IComparable.CompareTo
	|
	|-RVA: 0xBC3 Offset: 0xBC3 VA: 0xBC3
	|-Tuple<int, int>.System.IComparable.CompareTo
	|
	|-RVA: 0xBC7 Offset: 0xBC7 VA: 0xBC7
	|-Tuple<object, char>.System.IComparable.CompareTo
	|
	|-RVA: 0x630 Offset: 0x630 VA: 0x630
	|-Tuple<object, object>.System.IComparable.CompareTo
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAE4 Offset: 0xAE4 VA: 0xAE4
	|-Tuple<EventProvider.SessionInfo, bool>.System.Collections.IStructuralComparable.CompareTo
	|
	|-RVA: 0xAE6 Offset: 0xAE6 VA: 0xAE6
	|-Tuple<Guid, int>.System.Collections.IStructuralComparable.CompareTo
	|
	|-RVA: 0xAE8 Offset: 0xAE8 VA: 0xAE8
	|-Tuple<int, int>.System.Collections.IStructuralComparable.CompareTo
	|
	|-RVA: 0xAEA Offset: 0xAEA VA: 0xAEA
	|-Tuple<object, char>.System.Collections.IStructuralComparable.CompareTo
	|
	|-RVA: 0xA3D Offset: 0xA3D VA: 0xA3D
	|-Tuple<object, object>.System.Collections.IStructuralComparable.CompareTo
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x127A Offset: 0x127A VA: 0x127A
	|-Tuple<EventProvider.SessionInfo, bool>.GetHashCode
	|
	|-RVA: 0x127C Offset: 0x127C VA: 0x127C
	|-Tuple<Guid, int>.GetHashCode
	|
	|-RVA: 0x127E Offset: 0x127E VA: 0x127E
	|-Tuple<int, int>.GetHashCode
	|
	|-RVA: 0x1280 Offset: 0x1280 VA: 0x1280
	|-Tuple<object, char>.GetHashCode
	|
	|-RVA: 0xD0B Offset: 0xD0B VA: 0xD0B
	|-Tuple<object, object>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBBC Offset: 0xBBC VA: 0xBBC
	|-Tuple<EventProvider.SessionInfo, bool>.System.Collections.IStructuralEquatable.GetHashCode
	|
	|-RVA: 0xBC0 Offset: 0xBC0 VA: 0xBC0
	|-Tuple<Guid, int>.System.Collections.IStructuralEquatable.GetHashCode
	|
	|-RVA: 0xBC4 Offset: 0xBC4 VA: 0xBC4
	|-Tuple<int, int>.System.Collections.IStructuralEquatable.GetHashCode
	|
	|-RVA: 0xBC8 Offset: 0xBC8 VA: 0xBC8
	|-Tuple<object, char>.System.Collections.IStructuralEquatable.GetHashCode
	|
	|-RVA: 0x631 Offset: 0x631 VA: 0x631
	|-Tuple<object, object>.System.Collections.IStructuralEquatable.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x127B Offset: 0x127B VA: 0x127B
	|-Tuple<EventProvider.SessionInfo, bool>.ToString
	|
	|-RVA: 0x127D Offset: 0x127D VA: 0x127D
	|-Tuple<Guid, int>.ToString
	|
	|-RVA: 0x127F Offset: 0x127F VA: 0x127F
	|-Tuple<int, int>.ToString
	|
	|-RVA: 0x1281 Offset: 0x1281 VA: 0x1281
	|-Tuple<object, char>.ToString
	|
	|-RVA: 0xD0C Offset: 0xD0C VA: 0xD0C
	|-Tuple<object, object>.ToString
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private string System.ITupleInternal.ToString(StringBuilder sb) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBBD Offset: 0xBBD VA: 0xBBD
	|-Tuple<EventProvider.SessionInfo, bool>.System.ITupleInternal.ToString
	|
	|-RVA: 0xBC1 Offset: 0xBC1 VA: 0xBC1
	|-Tuple<Guid, int>.System.ITupleInternal.ToString
	|
	|-RVA: 0xBC5 Offset: 0xBC5 VA: 0xBC5
	|-Tuple<int, int>.System.ITupleInternal.ToString
	|
	|-RVA: 0xBC9 Offset: 0xBC9 VA: 0xBC9
	|-Tuple<object, char>.System.ITupleInternal.ToString
	|
	|-RVA: 0x632 Offset: 0x632 VA: 0x632
	|-Tuple<object, object>.System.ITupleInternal.ToString
	*/
}

// Namespace: System
[Serializable]
public class Tuple<T1, T2, T3> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal, ITuple // TypeDefIndex: 85
{
	// Fields
	private readonly T1 m_Item1; // 0xFFFFFFFF
	private readonly T2 m_Item2; // 0xFFFFFFFF
	private readonly T3 m_Item3; // 0xFFFFFFFF

	// Properties
	public T1 Item1 { get; }
	public T2 Item2 { get; }
	public T3 Item3 { get; }

	// Methods

	// RVA: -1 Offset: -1
	public T1 get_Item1() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD0D Offset: 0xD0D VA: 0xD0D
	|-Tuple<object, object, object>.get_Item1
	|-Tuple<Task, Task, TaskContinuation>.get_Item1
	*/

	// RVA: -1 Offset: -1
	public T2 get_Item2() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD0E Offset: 0xD0E VA: 0xD0E
	|-Tuple<object, object, object>.get_Item2
	|-Tuple<Task, Task, TaskContinuation>.get_Item2
	*/

	// RVA: -1 Offset: -1
	public T3 get_Item3() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD0F Offset: 0xD0F VA: 0xD0F
	|-Tuple<object, object, object>.get_Item3
	|-Tuple<Task, Task, TaskContinuation>.get_Item3
	*/

	// RVA: -1 Offset: -1
	public void .ctor(T1 item1, T2 item2, T3 item3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11E Offset: 0x11E VA: 0x11E
	|-Tuple<object, object, object>..ctor
	|-Tuple<Task, Task, TaskContinuation>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x633 Offset: 0x633 VA: 0x633
	|-Tuple<object, object, object>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA3E Offset: 0xA3E VA: 0xA3E
	|-Tuple<object, object, object>.System.Collections.IStructuralEquatable.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private int System.IComparable.CompareTo(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x634 Offset: 0x634 VA: 0x634
	|-Tuple<object, object, object>.System.IComparable.CompareTo
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA3F Offset: 0xA3F VA: 0xA3F
	|-Tuple<object, object, object>.System.Collections.IStructuralComparable.CompareTo
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD10 Offset: 0xD10 VA: 0xD10
	|-Tuple<object, object, object>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x635 Offset: 0x635 VA: 0x635
	|-Tuple<object, object, object>.System.Collections.IStructuralEquatable.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD11 Offset: 0xD11 VA: 0xD11
	|-Tuple<object, object, object>.ToString
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private string System.ITupleInternal.ToString(StringBuilder sb) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x636 Offset: 0x636 VA: 0x636
	|-Tuple<object, object, object>.System.ITupleInternal.ToString
	*/
}

// Namespace: System
[Serializable]
public class Tuple<T1, T2, T3, T4> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal, ITuple // TypeDefIndex: 86
{
	// Fields
	private readonly T1 m_Item1; // 0xFFFFFFFF
	private readonly T2 m_Item2; // 0xFFFFFFFF
	private readonly T3 m_Item3; // 0xFFFFFFFF
	private readonly T4 m_Item4; // 0xFFFFFFFF

	// Properties
	public T1 Item1 { get; }
	public T2 Item2 { get; }
	public T3 Item3 { get; }
	public T4 Item4 { get; }

	// Methods

	// RVA: -1 Offset: -1
	public T1 get_Item1() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDDF Offset: 0xDDF VA: 0xDDF
	|-Tuple<TextReader, char[], int, int>.get_Item1
	|-Tuple<TextWriter, char[], int, int>.get_Item1
	|-Tuple<object, object, int, int>.get_Item1
	|
	|-RVA: 0xD12 Offset: 0xD12 VA: 0xD12
	|-Tuple<object, object, object, object>.get_Item1
	*/

	// RVA: -1 Offset: -1
	public T2 get_Item2() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDE0 Offset: 0xDE0 VA: 0xDE0
	|-Tuple<TextReader, char[], int, int>.get_Item2
	|-Tuple<TextWriter, char[], int, int>.get_Item2
	|-Tuple<object, object, int, int>.get_Item2
	|
	|-RVA: 0xD13 Offset: 0xD13 VA: 0xD13
	|-Tuple<object, object, object, object>.get_Item2
	*/

	// RVA: -1 Offset: -1
	public T3 get_Item3() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDE1 Offset: 0xDE1 VA: 0xDE1
	|-Tuple<TextReader, char[], int, int>.get_Item3
	|-Tuple<TextWriter, char[], int, int>.get_Item3
	|-Tuple<object, object, int, int>.get_Item3
	|
	|-RVA: 0xD14 Offset: 0xD14 VA: 0xD14
	|-Tuple<object, object, object, object>.get_Item3
	*/

	// RVA: -1 Offset: -1
	public T4 get_Item4() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDE2 Offset: 0xDE2 VA: 0xDE2
	|-Tuple<TextReader, char[], int, int>.get_Item4
	|-Tuple<TextWriter, char[], int, int>.get_Item4
	|-Tuple<object, object, int, int>.get_Item4
	|
	|-RVA: 0xD15 Offset: 0xD15 VA: 0xD15
	|-Tuple<object, object, object, object>.get_Item4
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBCA Offset: 0xBCA VA: 0xBCA
	|-Tuple<object, object, int, int>.Equals
	|
	|-RVA: 0x637 Offset: 0x637 VA: 0x637
	|-Tuple<object, object, object, object>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAEB Offset: 0xAEB VA: 0xAEB
	|-Tuple<object, object, int, int>.System.Collections.IStructuralEquatable.Equals
	|
	|-RVA: 0xA40 Offset: 0xA40 VA: 0xA40
	|-Tuple<object, object, object, object>.System.Collections.IStructuralEquatable.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private int System.IComparable.CompareTo(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBCB Offset: 0xBCB VA: 0xBCB
	|-Tuple<object, object, int, int>.System.IComparable.CompareTo
	|
	|-RVA: 0x638 Offset: 0x638 VA: 0x638
	|-Tuple<object, object, object, object>.System.IComparable.CompareTo
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAEC Offset: 0xAEC VA: 0xAEC
	|-Tuple<object, object, int, int>.System.Collections.IStructuralComparable.CompareTo
	|
	|-RVA: 0xA41 Offset: 0xA41 VA: 0xA41
	|-Tuple<object, object, object, object>.System.Collections.IStructuralComparable.CompareTo
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1282 Offset: 0x1282 VA: 0x1282
	|-Tuple<object, object, int, int>.GetHashCode
	|
	|-RVA: 0xD16 Offset: 0xD16 VA: 0xD16
	|-Tuple<object, object, object, object>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBCC Offset: 0xBCC VA: 0xBCC
	|-Tuple<object, object, int, int>.System.Collections.IStructuralEquatable.GetHashCode
	|
	|-RVA: 0x639 Offset: 0x639 VA: 0x639
	|-Tuple<object, object, object, object>.System.Collections.IStructuralEquatable.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1283 Offset: 0x1283 VA: 0x1283
	|-Tuple<object, object, int, int>.ToString
	|
	|-RVA: 0xD17 Offset: 0xD17 VA: 0xD17
	|-Tuple<object, object, object, object>.ToString
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private string System.ITupleInternal.ToString(StringBuilder sb) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBCD Offset: 0xBCD VA: 0xBCD
	|-Tuple<object, object, int, int>.System.ITupleInternal.ToString
	|
	|-RVA: 0x63A Offset: 0x63A VA: 0x63A
	|-Tuple<object, object, object, object>.System.ITupleInternal.ToString
	*/
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 87
{
	// Fields
	private string comment; // 0x8

	// Methods

	// RVA: 0x3B9 Offset: 0x3B9 VA: 0x3B9
	public void .ctor() { }

	// RVA: 0x212 Offset: 0x212 VA: 0x212
	public void .ctor(string comment) { }
}

// Namespace: System
[DebuggerDisplayAttribute] // RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2
[Serializable]
public class AggregateException : Exception // TypeDefIndex: 88
{
	// Fields
	private ReadOnlyCollection<Exception> m_innerExceptions; // 0x44

	// Properties
	public ReadOnlyCollection<Exception> InnerExceptions { get; }

	// Methods

	// RVA: 0x297 Offset: 0x297 VA: 0x297
	public void .ctor() { }

	// RVA: 0x93 Offset: 0x93 VA: 0x93
	public void .ctor(IEnumerable<Exception> innerExceptions) { }

	// RVA: 0x94 Offset: 0x94 VA: 0x94
	public void .ctor(Exception[] innerExceptions) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54
	public void .ctor(string message, IEnumerable<Exception> innerExceptions) { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55
	public void .ctor(string message, Exception[] innerExceptions) { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56
	private void .ctor(string message, IList<Exception> innerExceptions) { }

	// RVA: 0x95 Offset: 0x95 VA: 0x95
	internal void .ctor(IEnumerable<ExceptionDispatchInfo> innerExceptionInfos) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57
	internal void .ctor(string message, IEnumerable<ExceptionDispatchInfo> innerExceptionInfos) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58
	private void .ctor(string message, IList<ExceptionDispatchInfo> innerExceptionInfos) { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x154 Offset: 0x154 VA: 0x154
	public ReadOnlyCollection<Exception> get_InnerExceptions() { }

	// RVA: 0x155 Offset: 0x155 VA: 0x155
	public AggregateException Flatten() { }

	// RVA: 0x156 Offset: 0x156 VA: 0x156 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal static class AppContextSwitches // TypeDefIndex: 89
{
	// Fields
	public static readonly bool ThrowExceptionIfDisposedCancellationTokenSource; // 0x0
	public static readonly bool PreserveEventListnerObjectIdentity; // 0x1

	// Methods

	// RVA: 0xE52 Offset: 0xE52 VA: 0xE52
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal class __Filters // TypeDefIndex: 90
{
	// Fields
	internal static readonly __Filters Instance; // 0xFFFFFFFF

	// Methods

	// RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1 Slot: 4
	internal virtual bool FilterAttribute(MemberInfo m, object filterCriteria) { }

	// RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2 Slot: 5
	internal virtual bool FilterName(MemberInfo m, object filterCriteria) { }

	// RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3 Slot: 6
	internal virtual bool FilterIgnoreCase(MemberInfo m, object filterCriteria) { }

	// RVA: 0x5F3 Offset: 0x5F3 VA: 0x5F3
	public void .ctor() { }

	// RVA: 0xF1B Offset: 0xF1B VA: 0xF1B
	private static void .cctor() { }
}

// Namespace: System
internal sealed class LocalDataStoreHolder // TypeDefIndex: 91
{
	// Fields
	private LocalDataStore m_Store; // 0x8

	// Properties
	public LocalDataStore Store { get; }

	// Methods

	// RVA: 0x208 Offset: 0x208 VA: 0x208
	public void .ctor(LocalDataStore store) { }

	// RVA: 0x3AF Offset: 0x3AF VA: 0x3AF Slot: 1
	protected override void Finalize() { }

	// RVA: 0x460 Offset: 0x460 VA: 0x460
	public LocalDataStore get_Store() { }
}

// Namespace: System
internal sealed class LocalDataStoreElement // TypeDefIndex: 92
{
	// Fields
	private object m_value; // 0x8
	private long m_cookie; // 0x10

	// Properties
	public object Value { get; set; }
	public long Cookie { get; }

	// Methods

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	public void .ctor(long cookie) { }

	// RVA: 0x45F Offset: 0x45F VA: 0x45F
	public object get_Value() { }

	// RVA: 0x207 Offset: 0x207 VA: 0x207
	public void set_Value(object value) { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50
	public long get_Cookie() { }
}

// Namespace: System
internal sealed class LocalDataStore // TypeDefIndex: 93
{
	// Fields
	private LocalDataStoreElement[] m_DataTable; // 0x8
	private LocalDataStoreMgr m_Manager; // 0xC

	// Methods

	// RVA: 0x179 Offset: 0x179 VA: 0x179
	public void .ctor(LocalDataStoreMgr mgr, int InitialCapacity) { }

	// RVA: 0x3AE Offset: 0x3AE VA: 0x3AE
	internal void Dispose() { }

	// RVA: 0x29E Offset: 0x29E VA: 0x29E
	public object GetData(LocalDataStoreSlot slot) { }

	// RVA: 0x17A Offset: 0x17A VA: 0x17A
	public void SetData(LocalDataStoreSlot slot, object data) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	internal void FreeData(int slot, long cookie) { }

	// RVA: 0x29F Offset: 0x29F VA: 0x29F
	private LocalDataStoreElement PopulateElement(LocalDataStoreSlot slot) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3
public sealed class LocalDataStoreSlot // TypeDefIndex: 94
{
	// Fields
	private LocalDataStoreMgr m_mgr; // 0x8
	private int m_slot; // 0xC
	private long m_cookie; // 0x10

	// Properties
	internal LocalDataStoreMgr Manager { get; }
	internal int Slot { get; }
	internal long Cookie { get; }

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal void .ctor(LocalDataStoreMgr mgr, int slot, long cookie) { }

	// RVA: 0x464 Offset: 0x464 VA: 0x464
	internal LocalDataStoreMgr get_Manager() { }

	// RVA: 0x465 Offset: 0x465 VA: 0x465
	internal int get_Slot() { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51
	internal long get_Cookie() { }

	// RVA: 0x3B1 Offset: 0x3B1 VA: 0x3B1 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
internal sealed class LocalDataStoreMgr // TypeDefIndex: 95
{
	// Fields
	private bool[] m_SlotInfoTable; // 0x8
	private int m_FirstAvailableSlot; // 0xC
	private List<LocalDataStore> m_ManagedLocalDataStores; // 0x10
	private Dictionary<string, LocalDataStoreSlot> m_KeyToSlotMap; // 0x14
	private long m_CookieGenerator; // 0x18

	// Methods

	// RVA: 0x461 Offset: 0x461 VA: 0x461
	public LocalDataStoreHolder CreateLocalDataStore() { }

	// RVA: 0x209 Offset: 0x209 VA: 0x209
	public void DeleteLocalDataStore(LocalDataStore store) { }

	// RVA: 0x462 Offset: 0x462 VA: 0x462
	public LocalDataStoreSlot AllocateDataSlot() { }

	// RVA: 0x2A0 Offset: 0x2A0 VA: 0x2A0
	public LocalDataStoreSlot AllocateNamedDataSlot(string name) { }

	// RVA: 0x2A1 Offset: 0x2A1 VA: 0x2A1
	public LocalDataStoreSlot GetNamedDataSlot(string name) { }

	// RVA: 0x20A Offset: 0x20A VA: 0x20A
	public void FreeNamedDataSlot(string name) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	internal void FreeDataSlot(int slot, long cookie) { }

	// RVA: 0x20B Offset: 0x20B VA: 0x20B
	public void ValidateSlot(LocalDataStoreSlot slot) { }

	// RVA: 0x463 Offset: 0x463 VA: 0x463
	internal int GetSlotTableLength() { }

	// RVA: 0x3B0 Offset: 0x3B0 VA: 0x3B0
	public void .ctor() { }
}

// Namespace: System
public sealed class Action<T> : MulticastDelegate // TypeDefIndex: 96
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5C8 Offset: 0x5C8 VA: 0x5C8
	|-Action<bool>..ctor
	|
	|-RVA: 0x457 Offset: 0x457 VA: 0x457
	|-Action<Guid>..ctor
	|
	|-RVA: 0x3DE Offset: 0x3DE VA: 0x3DE
	|-Action<object>..ctor
	|-Action<Font>..ctor
	|-Action<SpriteAtlas>..ctor
	|
	|-RVA: 0x459 Offset: 0x459 VA: 0x459
	|-Action<AsyncLocalValueChangedArgs<ActivityTracker.ActivityInfo>>..ctor
	|-Action<AsyncLocalValueChangedArgs<object>>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x879 Offset: 0x879 VA: 0x879
	|-Action<bool>.Invoke
	|
	|-RVA: 0x867 Offset: 0x867 VA: 0x867
	|-Action<Guid>.Invoke
	|
	|-RVA: 0x7E6 Offset: 0x7E6 VA: 0x7E6
	|-Action<object>.Invoke
	|-Action<Task>.Invoke
	|-Action<AsyncOperation>.Invoke
	|-Action<Cubemap>.Invoke
	|-Action<Font>.Invoke
	|-Action<MetaData>.Invoke
	|-Action<SpriteAtlas>.Invoke
	|
	|-RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
	|-Action<AsyncLocalValueChangedArgs<object>>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x185 Offset: 0x185 VA: 0x185
	|-Action<bool>.BeginInvoke
	|
	|-RVA: 0x186 Offset: 0x186 VA: 0x186
	|-Action<Guid>.BeginInvoke
	|
	|-RVA: 0x157 Offset: 0x157 VA: 0x157
	|-Action<object>.BeginInvoke
	|
	|-RVA: 0x187 Offset: 0x187 VA: 0x187
	|-Action<AsyncLocalValueChangedArgs<object>>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0
	|-Action<bool>.EndInvoke
	|
	|-RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
	|-Action<Guid>.EndInvoke
	|
	|-RVA: 0x7E7 Offset: 0x7E7 VA: 0x7E7
	|-Action<object>.EndInvoke
	|
	|-RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3
	|-Action<AsyncLocalValueChangedArgs<object>>.EndInvoke
	*/
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4
public sealed class Action : MulticastDelegate // TypeDefIndex: 97
{
	// Methods

	// RVA: 0x53 Offset: 0x53 VA: 0x53
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x296 Offset: 0x296 VA: 0x296 Slot: 12
	public virtual void Invoke() { }

	// RVA: 0x7FB Offset: 0x7FB VA: 0x7FB Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x92 Offset: 0x92 VA: 0x92 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
public sealed class Action<T1, T2> : MulticastDelegate // TypeDefIndex: 98
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x45E Offset: 0x45E VA: 0x45E
	|-Action<char, object>..ctor
	|-Action<char, string>..ctor
	|
	|-RVA: 0x45A Offset: 0x45A VA: 0x45A
	|-Action<int, long>..ctor
	|
	|-RVA: 0x5C9 Offset: 0x5C9 VA: 0x5C9
	|-Action<object, bool>..ctor
	|
	|-RVA: 0x5CA Offset: 0x5CA VA: 0x5CA
	|-Action<object, Int32Enum>..ctor
	|
	|-RVA: 0x3DF Offset: 0x3DF VA: 0x3DF
	|-Action<object, object>..ctor
	|-Action<Task, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x45F Offset: 0x45F VA: 0x45F
	|-Action<char, object>.Invoke
	|-Action<char, string>.Invoke
	|
	|-RVA: 0x12 Offset: 0x12 VA: 0x12
	|-Action<int, long>.Invoke
	|
	|-RVA: 0x473 Offset: 0x473 VA: 0x473
	|-Action<object, bool>.Invoke
	|-Action<string, bool>.Invoke
	|
	|-RVA: 0x474 Offset: 0x474 VA: 0x474
	|-Action<object, Int32Enum>.Invoke
	|-Action<ReflectionProbe, ReflectionProbe.ReflectionProbeEvent>.Invoke
	|
	|-RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0
	|-Action<object, object>.Invoke
	|-Action<string, Action<SpriteAtlas>>.Invoke
	|-Action<Task, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9F Offset: 0x9F VA: 0x9F
	|-Action<char, object>.BeginInvoke
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-Action<int, long>.BeginInvoke
	|
	|-RVA: 0xA0 Offset: 0xA0 VA: 0xA0
	|-Action<object, bool>.BeginInvoke
	|
	|-RVA: 0xA1 Offset: 0xA1 VA: 0xA1
	|-Action<object, Int32Enum>.BeginInvoke
	|
	|-RVA: 0x8F Offset: 0x8F VA: 0x8F
	|-Action<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4
	|-Action<char, object>.EndInvoke
	|
	|-RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5
	|-Action<int, long>.EndInvoke
	|
	|-RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6
	|-Action<object, bool>.EndInvoke
	|
	|-RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7
	|-Action<object, Int32Enum>.EndInvoke
	|
	|-RVA: 0x7E8 Offset: 0x7E8 VA: 0x7E8
	|-Action<object, object>.EndInvoke
	*/
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6
public sealed class Func<TResult> : MulticastDelegate // TypeDefIndex: 99
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x978 Offset: 0x978 VA: 0x978
	|-Func<bool>..ctor
	|
	|-RVA: 0x979 Offset: 0x979 VA: 0x979
	|-Func<int>..ctor
	|
	|-RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
	|-Func<object>..ctor
	|-Func<ManualResetEvent>..ctor
	|-Func<SemaphoreSlim>..ctor
	|-Func<Task.ContingentProperties>..ctor
	|
	|-RVA: 0x97A Offset: 0x97A VA: 0x97A
	|-Func<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual TResult Invoke() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDF7 Offset: 0xDF7 VA: 0xDF7
	|-Func<bool>.Invoke
	|
	|-RVA: 0x126B Offset: 0x126B VA: 0x126B
	|-Func<int>.Invoke
	|
	|-RVA: 0xD18 Offset: 0xD18 VA: 0xD18
	|-Func<object>.Invoke
	|
	|-RVA: 0xB4D Offset: 0xB4D VA: 0xB4D
	|-Func<VoidTaskResult>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xADD Offset: 0xADD VA: 0xADD
	|-Func<bool>.BeginInvoke
	|
	|-RVA: 0xADE Offset: 0xADE VA: 0xADE
	|-Func<int>.BeginInvoke
	|
	|-RVA: 0xA42 Offset: 0xA42 VA: 0xA42
	|-Func<object>.BeginInvoke
	|
	|-RVA: 0xADF Offset: 0xADF VA: 0xADF
	|-Func<VoidTaskResult>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB82 Offset: 0xB82 VA: 0xB82
	|-Func<bool>.EndInvoke
	|
	|-RVA: 0xB83 Offset: 0xB83 VA: 0xB83
	|-Func<int>.EndInvoke
	|
	|-RVA: 0x63B Offset: 0x63B VA: 0x63B
	|-Func<object>.EndInvoke
	|
	|-RVA: 0x97B Offset: 0x97B VA: 0x97B
	|-Func<VoidTaskResult>.EndInvoke
	*/
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
public sealed class Func<T, TResult> : MulticastDelegate // TypeDefIndex: 100
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x97C Offset: 0x97C VA: 0x97C
	|-Func<Guid, int>..ctor
	|
	|-RVA: 0x97D Offset: 0x97D VA: 0x97D
	|-Func<Guid, object>..ctor
	|
	|-RVA: 0x472 Offset: 0x472 VA: 0x472
	|-Func<object, bool>..ctor
	|-Func<PlayerEditorConnectionEvents.MessageTypeSubscribers, bool>..ctor
	|-Func<Toggle, bool>..ctor
	|
	|-RVA: 0x462 Offset: 0x462 VA: 0x462
	|-Func<object, int>..ctor
	|
	|-RVA: 0x3E2 Offset: 0x3E2 VA: 0x3E2
	|-Func<object, object>..ctor
	|-Func<object, string>..ctor
	|-Func<AssemblyName, Assembly>..ctor
	|-Func<MemberHolder, MemberInfo[]>..ctor
	|
	|-RVA: 0x481 Offset: 0x481 VA: 0x481
	|-Func<object, float>..ctor
	|-Func<ILayoutElement, float>..ctor
	|
	|-RVA: 0x97E Offset: 0x97E VA: 0x97E
	|-Func<object, VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual TResult Invoke(T arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6BF Offset: 0x6BF VA: 0x6BF
	|-Func<Exception, bool>.Invoke
	|-Func<object, bool>.Invoke
	|
	|-RVA: 0x2C Offset: 0x2C VA: 0x2C
	|-Func<ILayoutElement, float>.Invoke
	|-Func<object, float>.Invoke
	|
	|-RVA: 0xB84 Offset: 0xB84 VA: 0xB84
	|-Func<Guid, int>.Invoke
	|
	|-RVA: 0xB86 Offset: 0xB86 VA: 0xB86
	|-Func<Guid, object>.Invoke
	|
	|-RVA: 0xB89 Offset: 0xB89 VA: 0xB89
	|-Func<object, int>.Invoke
	|
	|-RVA: 0x63C Offset: 0x63C VA: 0x63C
	|-Func<object, object>.Invoke
	|-Func<AssemblyName, Assembly>.Invoke
	|
	|-RVA: 0x97F Offset: 0x97F VA: 0x97F
	|-Func<object, VoidTaskResult>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T arg, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x264 Offset: 0x264 VA: 0x264
	|-Func<Guid, int>.BeginInvoke
	|
	|-RVA: 0x265 Offset: 0x265 VA: 0x265
	|-Func<Guid, object>.BeginInvoke
	|
	|-RVA: 0x266 Offset: 0x266 VA: 0x266
	|-Func<object, bool>.BeginInvoke
	|
	|-RVA: 0x267 Offset: 0x267 VA: 0x267
	|-Func<object, int>.BeginInvoke
	|
	|-RVA: 0x158 Offset: 0x158 VA: 0x158
	|-Func<object, object>.BeginInvoke
	|
	|-RVA: 0x268 Offset: 0x268 VA: 0x268
	|-Func<object, float>.BeginInvoke
	|
	|-RVA: 0x269 Offset: 0x269 VA: 0x269
	|-Func<object, VoidTaskResult>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB85 Offset: 0xB85 VA: 0xB85
	|-Func<Guid, int>.EndInvoke
	|
	|-RVA: 0xB87 Offset: 0xB87 VA: 0xB87
	|-Func<Guid, object>.EndInvoke
	|
	|-RVA: 0xB88 Offset: 0xB88 VA: 0xB88
	|-Func<object, bool>.EndInvoke
	|
	|-RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
	|-Func<object, int>.EndInvoke
	|
	|-RVA: 0x63D Offset: 0x63D VA: 0x63D
	|-Func<object, object>.EndInvoke
	|
	|-RVA: 0x2F Offset: 0x2F VA: 0x2F
	|-Func<object, float>.EndInvoke
	|
	|-RVA: 0x980 Offset: 0x980 VA: 0x980
	|-Func<object, VoidTaskResult>.EndInvoke
	*/
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
public sealed class Func<T1, T2, TResult> : MulticastDelegate // TypeDefIndex: 101
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x981 Offset: 0x981 VA: 0x981
	|-Func<int, IntPtr, bool>..ctor
	|
	|-RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
	|-Func<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual TResult Invoke(T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA6A Offset: 0xA6A VA: 0xA6A
	|-Func<int, IntPtr, bool>.Invoke
	|
	|-RVA: 0xA43 Offset: 0xA43 VA: 0xA43
	|-Func<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x143 Offset: 0x143 VA: 0x143
	|-Func<int, IntPtr, bool>.BeginInvoke
	|
	|-RVA: 0x90 Offset: 0x90 VA: 0x90
	|-Func<object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
	|-Func<int, IntPtr, bool>.EndInvoke
	|
	|-RVA: 0x63E Offset: 0x63E VA: 0x63E
	|-Func<object, object, object>.EndInvoke
	*/
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
public sealed class Func<T1, T2, T3, TResult> : MulticastDelegate // TypeDefIndex: 102
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x465 Offset: 0x465 VA: 0x465
	|-Func<object, object, bool, object>..ctor
	|-Func<Assembly, string, bool, Type>..ctor
	|
	|-RVA: 0x3E4 Offset: 0x3E4 VA: 0x3E4
	|-Func<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x164 Offset: 0x164 VA: 0x164
	|-Func<object, object, bool, object>.Invoke
	|-Func<Assembly, string, bool, Type>.Invoke
	|
	|-RVA: 0x159 Offset: 0x159 VA: 0x159
	|-Func<object, object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x80 Offset: 0x80 VA: 0x80
	|-Func<object, object, bool, object>.BeginInvoke
	|
	|-RVA: 0x7E Offset: 0x7E VA: 0x7E
	|-Func<object, object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB8C Offset: 0xB8C VA: 0xB8C
	|-Func<object, object, bool, object>.EndInvoke
	|
	|-RVA: 0x63F Offset: 0x63F VA: 0x63F
	|-Func<object, object, object, object>.EndInvoke
	*/
}

// Namespace: System
public sealed class Comparison<T> : MulticastDelegate // TypeDefIndex: 103
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3E5 Offset: 0x3E5 VA: 0x3E5
	|-Comparison<Level2Map>..ctor
	|-Comparison<object>..ctor
	|-Comparison<string>..ctor
	|-Comparison<TimeZoneInfo.AdjustmentRule>..ctor
	|-Comparison<Graphic>..ctor
	|-Comparison<ICanvasElement>..ctor
	|
	|-RVA: 0x73B Offset: 0x73B VA: 0x73B
	|-Comparison<byte>..ctor
	|
	|-RVA: 0x73C Offset: 0x73C VA: 0x73C
	|-Comparison<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0x458 Offset: 0x458 VA: 0x458
	|-Comparison<KeyValuePair<Guid, int>>..ctor
	|
	|-RVA: 0x73D Offset: 0x73D VA: 0x73D
	|-Comparison<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x73E Offset: 0x73E VA: 0x73E
	|-Comparison<int>..ctor
	|
	|-RVA: 0x73F Offset: 0x73F VA: 0x73F
	|-Comparison<ulong>..ctor
	|
	|-RVA: 0x740 Offset: 0x740 VA: 0x740
	|-Comparison<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x741 Offset: 0x741 VA: 0x741
	|-Comparison<Color32>..ctor
	|
	|-RVA: 0x478 Offset: 0x478 VA: 0x478
	|-Comparison<RaycastResult>..ctor
	|
	|-RVA: 0x479 Offset: 0x479 VA: 0x479
	|-Comparison<RaycastHit>..ctor
	|
	|-RVA: 0x742 Offset: 0x742 VA: 0x742
	|-Comparison<UICharInfo>..ctor
	|
	|-RVA: 0x743 Offset: 0x743 VA: 0x743
	|-Comparison<UILineInfo>..ctor
	|
	|-RVA: 0x744 Offset: 0x744 VA: 0x744
	|-Comparison<UIVertex>..ctor
	|
	|-RVA: 0x745 Offset: 0x745 VA: 0x745
	|-Comparison<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x746 Offset: 0x746 VA: 0x746
	|-Comparison<Vector2>..ctor
	|
	|-RVA: 0x747 Offset: 0x747 VA: 0x747
	|-Comparison<Vector3>..ctor
	|
	|-RVA: 0x748 Offset: 0x748 VA: 0x748
	|-Comparison<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual int Invoke(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xACD Offset: 0xACD VA: 0xACD
	|-Comparison<byte>.Invoke
	|
	|-RVA: 0xACE Offset: 0xACE VA: 0xACE
	|-Comparison<KeyValuePair<DateTime, object>>.Invoke
	|
	|-RVA: 0xACF Offset: 0xACF VA: 0xACF
	|-Comparison<KeyValuePair<Guid, int>>.Invoke
	|
	|-RVA: 0xAD0 Offset: 0xAD0 VA: 0xAD0
	|-Comparison<EventProvider.SessionInfo>.Invoke
	|
	|-RVA: 0xAD1 Offset: 0xAD1 VA: 0xAD1
	|-Comparison<int>.Invoke
	|
	|-RVA: 0xA44 Offset: 0xA44 VA: 0xA44
	|-Comparison<object>.Invoke
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-Comparison<ulong>.Invoke
	|
	|-RVA: 0xAD2 Offset: 0xAD2 VA: 0xAD2
	|-Comparison<BeforeRenderHelper.OrderBlock>.Invoke
	|
	|-RVA: 0xAD3 Offset: 0xAD3 VA: 0xAD3
	|-Comparison<Color32>.Invoke
	|
	|-RVA: 0xAD4 Offset: 0xAD4 VA: 0xAD4
	|-Comparison<RaycastResult>.Invoke
	|
	|-RVA: 0xAD5 Offset: 0xAD5 VA: 0xAD5
	|-Comparison<RaycastHit>.Invoke
	|
	|-RVA: 0xAD6 Offset: 0xAD6 VA: 0xAD6
	|-Comparison<UICharInfo>.Invoke
	|
	|-RVA: 0xAD7 Offset: 0xAD7 VA: 0xAD7
	|-Comparison<UILineInfo>.Invoke
	|
	|-RVA: 0xAD8 Offset: 0xAD8 VA: 0xAD8
	|-Comparison<UIVertex>.Invoke
	|
	|-RVA: 0xAD9 Offset: 0xAD9 VA: 0xAD9
	|-Comparison<UnitySynchronizationContext.WorkRequest>.Invoke
	|
	|-RVA: 0xADA Offset: 0xADA VA: 0xADA
	|-Comparison<Vector2>.Invoke
	|
	|-RVA: 0xADB Offset: 0xADB VA: 0xADB
	|-Comparison<Vector3>.Invoke
	|
	|-RVA: 0xADC Offset: 0xADC VA: 0xADC
	|-Comparison<Vector4>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T x, T y, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x133 Offset: 0x133 VA: 0x133
	|-Comparison<byte>.BeginInvoke
	|
	|-RVA: 0x134 Offset: 0x134 VA: 0x134
	|-Comparison<KeyValuePair<DateTime, object>>.BeginInvoke
	|
	|-RVA: 0x135 Offset: 0x135 VA: 0x135
	|-Comparison<KeyValuePair<Guid, int>>.BeginInvoke
	|
	|-RVA: 0x136 Offset: 0x136 VA: 0x136
	|-Comparison<EventProvider.SessionInfo>.BeginInvoke
	|
	|-RVA: 0x137 Offset: 0x137 VA: 0x137
	|-Comparison<int>.BeginInvoke
	|
	|-RVA: 0x91 Offset: 0x91 VA: 0x91
	|-Comparison<object>.BeginInvoke
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-Comparison<ulong>.BeginInvoke
	|
	|-RVA: 0x138 Offset: 0x138 VA: 0x138
	|-Comparison<BeforeRenderHelper.OrderBlock>.BeginInvoke
	|
	|-RVA: 0x139 Offset: 0x139 VA: 0x139
	|-Comparison<Color32>.BeginInvoke
	|
	|-RVA: 0x13A Offset: 0x13A VA: 0x13A
	|-Comparison<RaycastResult>.BeginInvoke
	|
	|-RVA: 0x13B Offset: 0x13B VA: 0x13B
	|-Comparison<RaycastHit>.BeginInvoke
	|
	|-RVA: 0x13C Offset: 0x13C VA: 0x13C
	|-Comparison<UICharInfo>.BeginInvoke
	|
	|-RVA: 0x13D Offset: 0x13D VA: 0x13D
	|-Comparison<UILineInfo>.BeginInvoke
	|
	|-RVA: 0x13E Offset: 0x13E VA: 0x13E
	|-Comparison<UIVertex>.BeginInvoke
	|
	|-RVA: 0x13F Offset: 0x13F VA: 0x13F
	|-Comparison<UnitySynchronizationContext.WorkRequest>.BeginInvoke
	|
	|-RVA: 0x140 Offset: 0x140 VA: 0x140
	|-Comparison<Vector2>.BeginInvoke
	|
	|-RVA: 0x141 Offset: 0x141 VA: 0x141
	|-Comparison<Vector3>.BeginInvoke
	|
	|-RVA: 0x142 Offset: 0x142 VA: 0x142
	|-Comparison<Vector4>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x92D Offset: 0x92D VA: 0x92D
	|-Comparison<byte>.EndInvoke
	|
	|-RVA: 0x92E Offset: 0x92E VA: 0x92E
	|-Comparison<KeyValuePair<DateTime, object>>.EndInvoke
	|
	|-RVA: 0x92F Offset: 0x92F VA: 0x92F
	|-Comparison<KeyValuePair<Guid, int>>.EndInvoke
	|
	|-RVA: 0x930 Offset: 0x930 VA: 0x930
	|-Comparison<EventProvider.SessionInfo>.EndInvoke
	|
	|-RVA: 0x931 Offset: 0x931 VA: 0x931
	|-Comparison<int>.EndInvoke
	|
	|-RVA: 0x640 Offset: 0x640 VA: 0x640
	|-Comparison<object>.EndInvoke
	|
	|-RVA: 0x932 Offset: 0x932 VA: 0x932
	|-Comparison<ulong>.EndInvoke
	|
	|-RVA: 0x933 Offset: 0x933 VA: 0x933
	|-Comparison<BeforeRenderHelper.OrderBlock>.EndInvoke
	|
	|-RVA: 0x934 Offset: 0x934 VA: 0x934
	|-Comparison<Color32>.EndInvoke
	|
	|-RVA: 0x935 Offset: 0x935 VA: 0x935
	|-Comparison<RaycastResult>.EndInvoke
	|
	|-RVA: 0x936 Offset: 0x936 VA: 0x936
	|-Comparison<RaycastHit>.EndInvoke
	|
	|-RVA: 0x937 Offset: 0x937 VA: 0x937
	|-Comparison<UICharInfo>.EndInvoke
	|
	|-RVA: 0x938 Offset: 0x938 VA: 0x938
	|-Comparison<UILineInfo>.EndInvoke
	|
	|-RVA: 0x939 Offset: 0x939 VA: 0x939
	|-Comparison<UIVertex>.EndInvoke
	|
	|-RVA: 0x93A Offset: 0x93A VA: 0x93A
	|-Comparison<UnitySynchronizationContext.WorkRequest>.EndInvoke
	|
	|-RVA: 0x93B Offset: 0x93B VA: 0x93B
	|-Comparison<Vector2>.EndInvoke
	|
	|-RVA: 0x93C Offset: 0x93C VA: 0x93C
	|-Comparison<Vector3>.EndInvoke
	|
	|-RVA: 0x93D Offset: 0x93D VA: 0x93D
	|-Comparison<Vector4>.EndInvoke
	*/
}

// Namespace: System
public sealed class Converter<TInput, TOutput> : MulticastDelegate // TypeDefIndex: 104
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x48C Offset: 0x48C VA: 0x48C
	|-Converter<byte, sbyte>..ctor
	|
	|-RVA: 0x3E6 Offset: 0x3E6 VA: 0x3E6
	|-Converter<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual TOutput Invoke(TInput input) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x93E Offset: 0x93E VA: 0x93E
	|-Converter<byte, sbyte>.Invoke
	|
	|-RVA: 0x641 Offset: 0x641 VA: 0x641
	|-Converter<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(TInput input, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x19E Offset: 0x19E VA: 0x19E
	|-Converter<byte, sbyte>.BeginInvoke
	|
	|-RVA: 0x15A Offset: 0x15A VA: 0x15A
	|-Converter<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual TOutput EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x93F Offset: 0x93F VA: 0x93F
	|-Converter<byte, sbyte>.EndInvoke
	|
	|-RVA: 0x642 Offset: 0x642 VA: 0x642
	|-Converter<object, object>.EndInvoke
	*/
}

// Namespace: System
public sealed class Predicate<T> : MulticastDelegate // TypeDefIndex: 105
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x982 Offset: 0x982 VA: 0x982
	|-Predicate<byte>..ctor
	|
	|-RVA: 0x983 Offset: 0x983 VA: 0x983
	|-Predicate<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0x984 Offset: 0x984 VA: 0x984
	|-Predicate<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x985 Offset: 0x985 VA: 0x985
	|-Predicate<int>..ctor
	|
	|-RVA: 0x3E7 Offset: 0x3E7 VA: 0x3E7
	|-Predicate<object>..ctor
	|-Predicate<Task>..ctor
	|-Predicate<Type>..ctor
	|-Predicate<WeakReference<EtwSession>>..ctor
	|-Predicate<Component>..ctor
	|-Predicate<BaseInvokableCall>..ctor
	|-Predicate<Toggle>..ctor
	|
	|-RVA: 0x986 Offset: 0x986 VA: 0x986
	|-Predicate<ulong>..ctor
	|
	|-RVA: 0x987 Offset: 0x987 VA: 0x987
	|-Predicate<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x988 Offset: 0x988 VA: 0x988
	|-Predicate<Color32>..ctor
	|
	|-RVA: 0x989 Offset: 0x989 VA: 0x989
	|-Predicate<RaycastResult>..ctor
	|
	|-RVA: 0x98A Offset: 0x98A VA: 0x98A
	|-Predicate<UICharInfo>..ctor
	|
	|-RVA: 0x98B Offset: 0x98B VA: 0x98B
	|-Predicate<UILineInfo>..ctor
	|
	|-RVA: 0x98C Offset: 0x98C VA: 0x98C
	|-Predicate<UIVertex>..ctor
	|
	|-RVA: 0x98D Offset: 0x98D VA: 0x98D
	|-Predicate<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x98E Offset: 0x98E VA: 0x98E
	|-Predicate<Vector2>..ctor
	|
	|-RVA: 0x98F Offset: 0x98F VA: 0x98F
	|-Predicate<Vector3>..ctor
	|
	|-RVA: 0x990 Offset: 0x990 VA: 0x990
	|-Predicate<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual bool Invoke(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB91 Offset: 0xB91 VA: 0xB91
	|-Predicate<byte>.Invoke
	|
	|-RVA: 0xB93 Offset: 0xB93 VA: 0xB93
	|-Predicate<KeyValuePair<DateTime, object>>.Invoke
	|
	|-RVA: 0xB95 Offset: 0xB95 VA: 0xB95
	|-Predicate<EventProvider.SessionInfo>.Invoke
	|
	|-RVA: 0xB97 Offset: 0xB97 VA: 0xB97
	|-Predicate<int>.Invoke
	|
	|-RVA: 0x643 Offset: 0x643 VA: 0x643
	|-Predicate<object>.Invoke
	|
	|-RVA: 0x40 Offset: 0x40 VA: 0x40
	|-Predicate<ulong>.Invoke
	|
	|-RVA: 0xB9A Offset: 0xB9A VA: 0xB9A
	|-Predicate<BeforeRenderHelper.OrderBlock>.Invoke
	|
	|-RVA: 0xB9C Offset: 0xB9C VA: 0xB9C
	|-Predicate<Color32>.Invoke
	|
	|-RVA: 0xB9E Offset: 0xB9E VA: 0xB9E
	|-Predicate<RaycastResult>.Invoke
	|
	|-RVA: 0xBA0 Offset: 0xBA0 VA: 0xBA0
	|-Predicate<UICharInfo>.Invoke
	|
	|-RVA: 0xBA2 Offset: 0xBA2 VA: 0xBA2
	|-Predicate<UILineInfo>.Invoke
	|
	|-RVA: 0xBA4 Offset: 0xBA4 VA: 0xBA4
	|-Predicate<UIVertex>.Invoke
	|
	|-RVA: 0xBA6 Offset: 0xBA6 VA: 0xBA6
	|-Predicate<UnitySynchronizationContext.WorkRequest>.Invoke
	|
	|-RVA: 0xBA8 Offset: 0xBA8 VA: 0xBA8
	|-Predicate<Vector2>.Invoke
	|
	|-RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
	|-Predicate<Vector3>.Invoke
	|
	|-RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
	|-Predicate<Vector4>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26A Offset: 0x26A VA: 0x26A
	|-Predicate<byte>.BeginInvoke
	|
	|-RVA: 0x26B Offset: 0x26B VA: 0x26B
	|-Predicate<KeyValuePair<DateTime, object>>.BeginInvoke
	|
	|-RVA: 0x26C Offset: 0x26C VA: 0x26C
	|-Predicate<EventProvider.SessionInfo>.BeginInvoke
	|
	|-RVA: 0x26D Offset: 0x26D VA: 0x26D
	|-Predicate<int>.BeginInvoke
	|
	|-RVA: 0x15B Offset: 0x15B VA: 0x15B
	|-Predicate<object>.BeginInvoke
	|
	|-RVA: 0x1C Offset: 0x1C VA: 0x1C
	|-Predicate<ulong>.BeginInvoke
	|
	|-RVA: 0x26E Offset: 0x26E VA: 0x26E
	|-Predicate<BeforeRenderHelper.OrderBlock>.BeginInvoke
	|
	|-RVA: 0x26F Offset: 0x26F VA: 0x26F
	|-Predicate<Color32>.BeginInvoke
	|
	|-RVA: 0x270 Offset: 0x270 VA: 0x270
	|-Predicate<RaycastResult>.BeginInvoke
	|
	|-RVA: 0x271 Offset: 0x271 VA: 0x271
	|-Predicate<UICharInfo>.BeginInvoke
	|
	|-RVA: 0x272 Offset: 0x272 VA: 0x272
	|-Predicate<UILineInfo>.BeginInvoke
	|
	|-RVA: 0x273 Offset: 0x273 VA: 0x273
	|-Predicate<UIVertex>.BeginInvoke
	|
	|-RVA: 0x274 Offset: 0x274 VA: 0x274
	|-Predicate<UnitySynchronizationContext.WorkRequest>.BeginInvoke
	|
	|-RVA: 0x275 Offset: 0x275 VA: 0x275
	|-Predicate<Vector2>.BeginInvoke
	|
	|-RVA: 0x276 Offset: 0x276 VA: 0x276
	|-Predicate<Vector3>.BeginInvoke
	|
	|-RVA: 0x277 Offset: 0x277 VA: 0x277
	|-Predicate<Vector4>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB92 Offset: 0xB92 VA: 0xB92
	|-Predicate<byte>.EndInvoke
	|
	|-RVA: 0xB94 Offset: 0xB94 VA: 0xB94
	|-Predicate<KeyValuePair<DateTime, object>>.EndInvoke
	|
	|-RVA: 0xB96 Offset: 0xB96 VA: 0xB96
	|-Predicate<EventProvider.SessionInfo>.EndInvoke
	|
	|-RVA: 0xB98 Offset: 0xB98 VA: 0xB98
	|-Predicate<int>.EndInvoke
	|
	|-RVA: 0x644 Offset: 0x644 VA: 0x644
	|-Predicate<object>.EndInvoke
	|
	|-RVA: 0xB99 Offset: 0xB99 VA: 0xB99
	|-Predicate<ulong>.EndInvoke
	|
	|-RVA: 0xB9B Offset: 0xB9B VA: 0xB9B
	|-Predicate<BeforeRenderHelper.OrderBlock>.EndInvoke
	|
	|-RVA: 0xB9D Offset: 0xB9D VA: 0xB9D
	|-Predicate<Color32>.EndInvoke
	|
	|-RVA: 0xB9F Offset: 0xB9F VA: 0xB9F
	|-Predicate<RaycastResult>.EndInvoke
	|
	|-RVA: 0xBA1 Offset: 0xBA1 VA: 0xBA1
	|-Predicate<UICharInfo>.EndInvoke
	|
	|-RVA: 0xBA3 Offset: 0xBA3 VA: 0xBA3
	|-Predicate<UILineInfo>.EndInvoke
	|
	|-RVA: 0xBA5 Offset: 0xBA5 VA: 0xBA5
	|-Predicate<UIVertex>.EndInvoke
	|
	|-RVA: 0xBA7 Offset: 0xBA7 VA: 0xBA7
	|-Predicate<UnitySynchronizationContext.WorkRequest>.EndInvoke
	|
	|-RVA: 0xBA9 Offset: 0xBA9 VA: 0xBA9
	|-Predicate<Vector2>.EndInvoke
	|
	|-RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
	|-Predicate<Vector3>.EndInvoke
	|
	|-RVA: 0xBAD Offset: 0xBAD VA: 0xBAD
	|-Predicate<Vector4>.EndInvoke
	*/
}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
[ComVisibleAttribute] // RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
[ComDefaultInterfaceAttribute] // RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
public sealed class Activator : _Activator // TypeDefIndex: 106
{
	// Methods

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes) { }

	// RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	public static object CreateInstance(Type type, object[] args) { }

	// RVA: 0x7FC Offset: 0x7FC VA: 0x7FC
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes) { }

	// RVA: 0x153 Offset: 0x153 VA: 0x153
	public static object CreateInstance(Type type) { }

	// RVA: 0xA5 Offset: 0xA5 VA: 0xA5
	public static object CreateInstance(Type type, bool nonPublic) { }

	// RVA: -1 Offset: -1
	public static T CreateInstance<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2A4 Offset: 0x2A4 VA: 0x2A4
	|-Activator.CreateInstance<object>
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2BB Offset: 0x2BB VA: 0x2BB
[Serializable]
public class AppDomainUnloadedException : SystemException // TypeDefIndex: 107
{
	// Methods

	// RVA: 0x29C Offset: 0x29C VA: 0x29C
	public void .ctor() { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2BC Offset: 0x2BC VA: 0x2BC
[Serializable]
public class ApplicationException : Exception // TypeDefIndex: 108
{
	// Methods

	// RVA: 0x29D Offset: 0x29D VA: 0x29D
	public void .ctor() { }

	// RVA: 0x9D Offset: 0x9D VA: 0x9D
	public void .ctor(string message) { }

	// RVA: 0x5C Offset: 0x5C VA: 0x5C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x5D Offset: 0x5D VA: 0x5D
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2BD Offset: 0x2BD VA: 0x2BD
[Serializable]
public class ArgumentException : SystemException, ISerializable // TypeDefIndex: 109
{
	// Fields
	private string m_paramName; // 0x44

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x29E Offset: 0x29E VA: 0x29E
	public void .ctor() { }

	// RVA: 0x9E Offset: 0x9E VA: 0x9E
	public void .ctor(string message) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F
	public void .ctor(string message, string paramName) { }

	// RVA: 0x60 Offset: 0x60 VA: 0x60
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x163 Offset: 0x163 VA: 0x163 Slot: 5
	public override string get_Message() { }

	// RVA: 0x61 Offset: 0x61 VA: 0x61 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2BE Offset: 0x2BE VA: 0x2BE
[Serializable]
public class ArgumentNullException : ArgumentException // TypeDefIndex: 110
{
	// Methods

	// RVA: 0x29F Offset: 0x29F VA: 0x29F
	public void .ctor() { }

	// RVA: 0x9F Offset: 0x9F VA: 0x9F
	public void .ctor(string paramName) { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62
	public void .ctor(string paramName, string message) { }

	// RVA: 0x63 Offset: 0x63 VA: 0x63
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2BF Offset: 0x2BF VA: 0x2BF
[Serializable]
public class ArgumentOutOfRangeException : ArgumentException, ISerializable // TypeDefIndex: 111
{
	// Fields
	private static string _rangeMessage; // 0x0
	private object m_actualValue; // 0x48

	// Properties
	private static string RangeMessage { get; }
	public override string Message { get; }

	// Methods

	// RVA: 0x188 Offset: 0x188 VA: 0x188
	private static string get_RangeMessage() { }

	// RVA: 0x2A0 Offset: 0x2A0 VA: 0x2A0
	public void .ctor() { }

	// RVA: 0xA0 Offset: 0xA0 VA: 0xA0
	public void .ctor(string paramName) { }

	// RVA: 0x64 Offset: 0x64 VA: 0x64
	public void .ctor(string paramName, string message) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	public void .ctor(string paramName, object actualValue, string message) { }

	// RVA: 0x164 Offset: 0x164 VA: 0x164 Slot: 5
	public override string get_Message() { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x66 Offset: 0x66 VA: 0x66
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
[Serializable]
public class ArithmeticException : SystemException // TypeDefIndex: 112
{
	// Methods

	// RVA: 0x2A1 Offset: 0x2A1 VA: 0x2A1
	public void .ctor() { }

	// RVA: 0xA1 Offset: 0xA1 VA: 0xA1
	public void .ctor(string message) { }

	// RVA: 0x67 Offset: 0x67 VA: 0x67
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x68 Offset: 0x68 VA: 0x68
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1
[Serializable]
public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 113
{
	// Methods

	// RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
	public void .ctor() { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2
[Serializable]
public sealed class AsyncCallback : MulticastDelegate // TypeDefIndex: 114
{
	// Methods

	// RVA: 0x86 Offset: 0x86 VA: 0x86
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xAA Offset: 0xAA VA: 0xAA Slot: 12
	public virtual void Invoke(IAsyncResult ar) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39 Slot: 13
	public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object) { }

	// RVA: 0xAB Offset: 0xAB VA: 0xAB Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
[Serializable]
public abstract class Attribute : _Attribute // TypeDefIndex: 115
{
	// Methods

	// RVA: 0x80C Offset: 0x80C VA: 0x80C
	private static Attribute[] InternalGetCustomAttributes(PropertyInfo element, Type type, bool inherit) { }

	// RVA: 0x80D Offset: 0x80D VA: 0x80D
	private static Attribute[] InternalGetCustomAttributes(EventInfo element, Type type, bool inherit) { }

	// RVA: 0x80E Offset: 0x80E VA: 0x80E
	private static bool InternalIsDefined(PropertyInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x80F Offset: 0x80F VA: 0x80F
	private static bool InternalIsDefined(EventInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x810 Offset: 0x810 VA: 0x810
	public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit) { }

	// RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	public static bool IsDefined(MemberInfo element, Type attributeType) { }

	// RVA: 0x811 Offset: 0x811 VA: 0x811
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x812 Offset: 0x812 VA: 0x812
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x813 Offset: 0x813 VA: 0x813
	public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType, bool inherit) { }

	// RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType) { }

	// RVA: 0x814 Offset: 0x814 VA: 0x814
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType, bool inherit) { }

	// RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9
	protected void .ctor() { }

	// RVA: 0xC3 Offset: 0xC3 VA: 0xC3 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC4 Offset: 0xC4 VA: 0xC4
	private static bool AreFieldValuesEqual(object thisValue, object thatValue) { }

	// RVA: 0x177 Offset: 0x177 VA: 0x177 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4
[ComVisibleAttribute] // RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4
[Serializable]
public enum AttributeTargets // TypeDefIndex: 116
{
	// Fields
	public int value__; // 0x0
	public const AttributeTargets Assembly = 1;
	public const AttributeTargets Module = 2;
	public const AttributeTargets Class = 4;
	public const AttributeTargets Struct = 8;
	public const AttributeTargets Enum = 16;
	public const AttributeTargets Constructor = 32;
	public const AttributeTargets Method = 64;
	public const AttributeTargets Property = 128;
	public const AttributeTargets Field = 256;
	public const AttributeTargets Event = 512;
	public const AttributeTargets Interface = 1024;
	public const AttributeTargets Parameter = 2048;
	public const AttributeTargets Delegate = 4096;
	public const AttributeTargets ReturnValue = 8192;
	public const AttributeTargets GenericParameter = 16384;
	public const AttributeTargets All = 32767;
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5
[ComVisibleAttribute] // RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 117
{
	// Fields
	internal AttributeTargets m_attributeTarget; // 0x8
	internal bool m_allowMultiple; // 0xC
	internal bool m_inherited; // 0xD
	internal static AttributeUsageAttribute Default; // 0x0

	// Properties
	public bool AllowMultiple { get; set; }
	public bool Inherited { get; set; }

	// Methods

	// RVA: 0xAC Offset: 0xAC VA: 0xAC
	public void .ctor(AttributeTargets validOn) { }

	// RVA: 0x178 Offset: 0x178 VA: 0x178
	public bool get_AllowMultiple() { }

	// RVA: 0xAD Offset: 0xAD VA: 0xAD
	public void set_AllowMultiple(bool value) { }

	// RVA: 0x179 Offset: 0x179 VA: 0x179
	public bool get_Inherited() { }

	// RVA: 0xAE Offset: 0xAE VA: 0xAE
	public void set_Inherited(bool value) { }

	// RVA: 0xE54 Offset: 0xE54 VA: 0xE54
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6
[Serializable]
public class BadImageFormatException : SystemException // TypeDefIndex: 118
{
	// Fields
	private string _fileName; // 0x44
	private string _fusionLog; // 0x48

	// Properties
	public override string Message { get; }
	public string FusionLog { get; }

	// Methods

	// RVA: 0x2AA Offset: 0x2AA VA: 0x2AA
	public void .ctor() { }

	// RVA: 0xAF Offset: 0xAF VA: 0xAF
	public void .ctor(string message) { }

	// RVA: 0x87 Offset: 0x87 VA: 0x87
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88
	public void .ctor(string message, string fileName) { }

	// RVA: 0x17A Offset: 0x17A VA: 0x17A Slot: 5
	public override string get_Message() { }

	// RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
	private void SetMessageField() { }

	// RVA: 0x17B Offset: 0x17B VA: 0x17B Slot: 3
	public override string ToString() { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x17C Offset: 0x17C VA: 0x17C
	public string get_FusionLog() { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public static class BitConverter // TypeDefIndex: 119
{
	// Fields
	public static readonly bool IsLittleEndian; // 0xFFFFFFFF

	// Methods

	// RVA: 0x18A Offset: 0x18A VA: 0x18A
	private static bool AmILittleEndian() { }

	// RVA: 0x17D Offset: 0x17D VA: 0x17D
	public static byte[] GetBytes(short value) { }

	// RVA: 0x17E Offset: 0x17E VA: 0x17E
	public static byte[] GetBytes(int value) { }

	// RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	public static short ToInt16(byte[] value, int startIndex) { }

	// RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	public static int ToInt32(byte[] value, int startIndex) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static long ToInt64(byte[] value, int startIndex) { }

	[CLSCompliantAttribute] // RVA: 0x5DD Offset: 0x5DD VA: 0x5DD
	// RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	public static ushort ToUInt16(byte[] value, int startIndex) { }

	[CLSCompliantAttribute] // RVA: 0x5DE Offset: 0x5DE VA: 0x5DE
	// RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	public static uint ToUInt32(byte[] value, int startIndex) { }

	[CLSCompliantAttribute] // RVA: 0x5DF Offset: 0x5DF VA: 0x5DF
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static ulong ToUInt64(byte[] value, int startIndex) { }

	// RVA: 0x17F Offset: 0x17F VA: 0x17F
	private static char GetHexValue(int i) { }

	// RVA: 0x815 Offset: 0x815 VA: 0x815
	public static string ToString(byte[] value, int startIndex, int length) { }

	// RVA: 0x180 Offset: 0x180 VA: 0x180
	public static string ToString(byte[] value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static long DoubleToInt64Bits(double value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double Int64BitsToDouble(long value) { }

	// RVA: 0xE55 Offset: 0xE55 VA: 0xE55
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7
[Serializable]
public struct Boolean : IComparable, IConvertible, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 120
{
	// Fields
	private bool m_value; // 0x0
	internal const int True = 1;
	internal const int False = 0;
	internal const string TrueLiteral = "True";
	internal const string FalseLiteral = "False";
	public static readonly string TrueString; // 0x0
	public static readonly string FalseString; // 0x4

	// Methods

	// RVA: 0x181 Offset: 0x181 VA: 0x181 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x182 Offset: 0x182 VA: 0x182 Slot: 3
	public override string ToString() { }

	// RVA: 0xC9 Offset: 0xC9 VA: 0xC9 Slot: 20
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xCA Offset: 0xCA VA: 0xCA Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xCB Offset: 0xCB VA: 0xCB Slot: 23
	public bool Equals(bool obj) { }

	// RVA: 0xCC Offset: 0xCC VA: 0xCC Slot: 4
	public int CompareTo(object obj) { }

	// RVA: 0xCD Offset: 0xCD VA: 0xCD Slot: 22
	public int CompareTo(bool value) { }

	// RVA: 0x183 Offset: 0x183 VA: 0x183
	public static bool Parse(string value) { }

	// RVA: 0xCE Offset: 0xCE VA: 0xCE
	public static bool TryParse(string value, out bool result) { }

	// RVA: 0x184 Offset: 0x184 VA: 0x184
	private static string TrimWhiteSpaceAndNull(string value) { }

	// RVA: 0x185 Offset: 0x185 VA: 0x185 Slot: 5
	public TypeCode GetTypeCode() { }

	// RVA: 0xCF Offset: 0xCF VA: 0xCF Slot: 6
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD0 Offset: 0xD0 VA: 0xD0 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD1 Offset: 0xD1 VA: 0xD1 Slot: 8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD2 Offset: 0xD2 VA: 0xD2 Slot: 9
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD3 Offset: 0xD3 VA: 0xD3 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD4 Offset: 0xD4 VA: 0xD4 Slot: 11
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD5 Offset: 0xD5 VA: 0xD5 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD6 Offset: 0xD6 VA: 0xD6 Slot: 13
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 14
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5 Slot: 15
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 16
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 17
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x8B Offset: 0x8B VA: 0x8B Slot: 18
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6 Slot: 19
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x816 Offset: 0x816 VA: 0x816 Slot: 21
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0xE56 Offset: 0xE56 VA: 0xE56
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8
public static class Buffer // TypeDefIndex: 121
{
	// Methods

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	internal static bool InternalBlockCopy(Array src, int srcOffsetBytes, Array dst, int dstOffsetBytes, int byteCount) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A
	internal static int IndexOfByte(byte* src, byte value, int index, int count) { }

	// RVA: 0x186 Offset: 0x186 VA: 0x186
	private static int _ByteLength(Array array) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	internal static void ZeroMemory(byte* src, long len) { }

	[ReliabilityContractAttribute] // RVA: 0x5E0 Offset: 0x5E0 VA: 0x5E0
	// RVA: 0x28 Offset: 0x28 VA: 0x28
	internal static void Memcpy(byte[] dest, int destIndex, byte* src, int srcIndex, int len) { }

	[ReliabilityContractAttribute] // RVA: 0x5E1 Offset: 0x5E1 VA: 0x5E1
	// RVA: 0x29 Offset: 0x29 VA: 0x29
	internal static void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len) { }

	// RVA: 0x187 Offset: 0x187 VA: 0x187
	public static int ByteLength(Array array) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count) { }

	// RVA: 0x8C Offset: 0x8C VA: 0x8C
	internal static void memcpy4(byte* dest, byte* src, int size) { }

	// RVA: 0x8D Offset: 0x8D VA: 0x8D
	internal static void memcpy2(byte* dest, byte* src, int size) { }

	// RVA: 0x8E Offset: 0x8E VA: 0x8E
	private static void memcpy1(byte* dest, byte* src, int size) { }

	// RVA: 0x8F Offset: 0x8F VA: 0x8F
	internal static void Memcpy(byte* dest, byte* src, int size) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9
[Serializable]
public struct Byte : IComparable, IFormattable, IConvertible, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 122
{
	// Fields
	private byte m_value; // 0x0
	public const byte MaxValue = 255;
	public const byte MinValue = 0;

	// Methods

	// RVA: 0xD7 Offset: 0xD7 VA: 0xD7 Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0xD8 Offset: 0xD8 VA: 0xD8 Slot: 23
	public int CompareTo(byte value) { }

	// RVA: 0xD9 Offset: 0xD9 VA: 0xD9 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDA Offset: 0xDA VA: 0xDA Slot: 24
	public bool Equals(byte obj) { }

	// RVA: 0x188 Offset: 0x188 VA: 0x188 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDB Offset: 0xDB VA: 0xDB
	public static byte Parse(string s, IFormatProvider provider) { }

	// RVA: 0x817 Offset: 0x817 VA: 0x817
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x818 Offset: 0x818 VA: 0x818
	private static byte Parse(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0xDC Offset: 0xDC VA: 0xDC
	public static bool TryParse(string s, out byte result) { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B
	private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out byte result) { }

	// RVA: 0x189 Offset: 0x189 VA: 0x189 Slot: 3
	public override string ToString() { }

	// RVA: 0xDD Offset: 0xDD VA: 0xDD
	public string ToString(string format) { }

	// RVA: 0xDE Offset: 0xDE VA: 0xDE Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x819 Offset: 0x819 VA: 0x819 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x18A Offset: 0x18A VA: 0x18A Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0xDF Offset: 0xDF VA: 0xDF Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xE0 Offset: 0xE0 VA: 0xE0 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xE1 Offset: 0xE1 VA: 0xE1 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xE2 Offset: 0xE2 VA: 0xE2 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xE3 Offset: 0xE3 VA: 0xE3 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xE4 Offset: 0xE4 VA: 0xE4 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xE5 Offset: 0xE5 VA: 0xE5 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xE6 Offset: 0xE6 VA: 0xE6 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x90 Offset: 0x90 VA: 0x90 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x81A Offset: 0x81A VA: 0x81A Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2CA Offset: 0x2CA VA: 0x2CA
[Serializable]
public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 123
{
	// Methods

	// RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
	public void .ctor() { }

	// RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	public void .ctor(string message) { }

	// RVA: 0x92 Offset: 0x92 VA: 0x92
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2CB Offset: 0x2CB VA: 0x2CB
[Serializable]
public struct Char : IComparable, IConvertible, IComparable<char>, IEquatable<char> // TypeDefIndex: 124
{
	// Fields
	internal char m_value; // 0x0
	public const char MaxValue = '\xffff';
	public const char MinValue = '\x0';
	private static readonly byte[] categoryForLatin1; // 0x0
	internal const int UNICODE_PLANE00_END = 65535;
	internal const int UNICODE_PLANE01_START = 65536;
	internal const int UNICODE_PLANE16_END = 1114111;
	internal const int HIGH_SURROGATE_START = 55296;
	internal const int LOW_SURROGATE_END = 57343;

	// Methods

	// RVA: 0x18B Offset: 0x18B VA: 0x18B
	private static bool IsLatin1(char ch) { }

	// RVA: 0x18C Offset: 0x18C VA: 0x18C
	private static bool IsAscii(char ch) { }

	// RVA: 0x18D Offset: 0x18D VA: 0x18D
	private static UnicodeCategory GetLatin1UnicodeCategory(char ch) { }

	// RVA: 0x18E Offset: 0x18E VA: 0x18E Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xE8 Offset: 0xE8 VA: 0xE8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xE9 Offset: 0xE9 VA: 0xE9 Slot: 23
	public bool Equals(char obj) { }

	// RVA: 0xEA Offset: 0xEA VA: 0xEA Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0xEB Offset: 0xEB VA: 0xEB Slot: 22
	public int CompareTo(char value) { }

	// RVA: 0x18F Offset: 0x18F VA: 0x18F Slot: 3
	public override string ToString() { }

	// RVA: 0xEC Offset: 0xEC VA: 0xEC Slot: 20
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x190 Offset: 0x190 VA: 0x190
	public static string ToString(char c) { }

	// RVA: 0x191 Offset: 0x191 VA: 0x191
	public static char Parse(string s) { }

	// RVA: 0x192 Offset: 0x192 VA: 0x192
	public static bool IsDigit(char c) { }

	// RVA: 0x193 Offset: 0x193 VA: 0x193
	internal static bool CheckLetter(UnicodeCategory uc) { }

	// RVA: 0x194 Offset: 0x194 VA: 0x194
	public static bool IsLetter(char c) { }

	// RVA: 0x195 Offset: 0x195 VA: 0x195
	private static bool IsWhiteSpaceLatin1(char c) { }

	// RVA: 0x196 Offset: 0x196 VA: 0x196
	public static bool IsWhiteSpace(char c) { }

	// RVA: 0x197 Offset: 0x197 VA: 0x197
	public static bool IsUpper(char c) { }

	// RVA: 0x198 Offset: 0x198 VA: 0x198
	public static bool IsLower(char c) { }

	// RVA: 0x199 Offset: 0x199 VA: 0x199
	internal static bool CheckLetterOrDigit(UnicodeCategory uc) { }

	// RVA: 0x19A Offset: 0x19A VA: 0x19A
	public static bool IsLetterOrDigit(char c) { }

	// RVA: 0xED Offset: 0xED VA: 0xED
	public static char ToUpper(char c, CultureInfo culture) { }

	// RVA: 0x19B Offset: 0x19B VA: 0x19B
	public static char ToUpper(char c) { }

	// RVA: 0x19C Offset: 0x19C VA: 0x19C
	public static char ToUpperInvariant(char c) { }

	// RVA: 0xEE Offset: 0xEE VA: 0xEE
	public static char ToLower(char c, CultureInfo culture) { }

	// RVA: 0x19D Offset: 0x19D VA: 0x19D
	public static char ToLower(char c) { }

	// RVA: 0x19E Offset: 0x19E VA: 0x19E
	public static char ToLowerInvariant(char c) { }

	// RVA: 0x19F Offset: 0x19F VA: 0x19F Slot: 5
	public TypeCode GetTypeCode() { }

	// RVA: 0xEF Offset: 0xEF VA: 0xEF Slot: 6
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xF0 Offset: 0xF0 VA: 0xF0 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xF1 Offset: 0xF1 VA: 0xF1 Slot: 8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xF2 Offset: 0xF2 VA: 0xF2 Slot: 9
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xF3 Offset: 0xF3 VA: 0xF3 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xF4 Offset: 0xF4 VA: 0xF4 Slot: 11
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xF5 Offset: 0xF5 VA: 0xF5 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xF6 Offset: 0xF6 VA: 0xF6 Slot: 13
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xA Offset: 0xA VA: 0xA Slot: 14
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xB Offset: 0xB VA: 0xB Slot: 15
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 16
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 17
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x93 Offset: 0x93 VA: 0x93 Slot: 18
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xC Offset: 0xC VA: 0xC Slot: 19
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x81B Offset: 0x81B VA: 0x81B Slot: 21
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0
	internal static bool CheckNumber(UnicodeCategory uc) { }

	// RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1
	public static bool IsNumber(char c) { }

	// RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2
	public static bool IsSurrogate(char c) { }

	// RVA: 0xF7 Offset: 0xF7 VA: 0xF7
	public static bool IsSurrogate(string s, int index) { }

	// RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3
	public static UnicodeCategory GetUnicodeCategory(char c) { }

	// RVA: 0xF8 Offset: 0xF8 VA: 0xF8
	public static UnicodeCategory GetUnicodeCategory(string s, int index) { }

	// RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4
	public static bool IsHighSurrogate(char c) { }

	// RVA: 0xF9 Offset: 0xF9 VA: 0xF9
	public static bool IsHighSurrogate(string s, int index) { }

	// RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5
	public static bool IsLowSurrogate(char c) { }

	// RVA: 0xFA Offset: 0xFA VA: 0xFA
	public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate) { }

	// RVA: 0xFB Offset: 0xFB VA: 0xFB
	public static int ConvertToUtf32(char highSurrogate, char lowSurrogate) { }

	// RVA: 0xE57 Offset: 0xE57 VA: 0xE57
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2CC Offset: 0x2CC VA: 0x2CC
[Serializable]
public sealed class CharEnumerator : IEnumerator, ICloneable, IEnumerator<char>, IDisposable // TypeDefIndex: 125
{
	// Fields
	private string str; // 0x8
	private int index; // 0xC
	private char currentElement; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public char Current { get; }

	// Methods

	// RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	internal void .ctor(string str) { }

	// RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6 Slot: 6
	public object Clone() { }

	// RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7 Slot: 4
	public bool MoveNext() { }

	// RVA: 0x2AF Offset: 0x2AF VA: 0x2AF Slot: 8
	public void Dispose() { }

	// RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9 Slot: 7
	public char get_Current() { }

	// RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
	internal void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
[AttributeUsageAttribute] // RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
[Serializable]
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 126
{
	// Fields
	private bool m_compliant; // 0x8

	// Methods

	// RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	public void .ctor(bool isCompliant) { }
}

// Namespace: System
public sealed class ConsoleCancelEventHandler : MulticastDelegate // TypeDefIndex: 127
{
	// Methods

	// RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xB8 Offset: 0xB8 VA: 0xB8 Slot: 12
	public virtual void Invoke(object sender, ConsoleCancelEventArgs e) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, ConsoleCancelEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0xDC Offset: 0xDC VA: 0xDC Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 128
{
	// Fields
	private ConsoleSpecialKey _type; // 0x8
	private bool _cancel; // 0xC

	// Properties
	public bool Cancel { get; }

	// Methods

	// RVA: 0xDB Offset: 0xDB VA: 0xDB
	internal void .ctor(ConsoleSpecialKey type) { }

	// RVA: 0x1FA Offset: 0x1FA VA: 0x1FA
	public bool get_Cancel() { }

	// RVA: 0x2CB Offset: 0x2CB VA: 0x2CB
	internal void .ctor() { }
}

// Namespace: System
[Serializable]
public enum ConsoleColor // TypeDefIndex: 129
{
	// Fields
	public int value__; // 0x0
	public const ConsoleColor Black = 0;
	public const ConsoleColor DarkBlue = 1;
	public const ConsoleColor DarkGreen = 2;
	public const ConsoleColor DarkCyan = 3;
	public const ConsoleColor DarkRed = 4;
	public const ConsoleColor DarkMagenta = 5;
	public const ConsoleColor DarkYellow = 6;
	public const ConsoleColor Gray = 7;
	public const ConsoleColor DarkGray = 8;
	public const ConsoleColor Blue = 9;
	public const ConsoleColor Green = 10;
	public const ConsoleColor Cyan = 11;
	public const ConsoleColor Red = 12;
	public const ConsoleColor Magenta = 13;
	public const ConsoleColor Yellow = 14;
	public const ConsoleColor White = 15;
}

// Namespace: System
[Serializable]
public enum ConsoleKey // TypeDefIndex: 130
{
	// Fields
	public int value__; // 0x0
	public const ConsoleKey Backspace = 8;
	public const ConsoleKey Tab = 9;
	public const ConsoleKey Clear = 12;
	public const ConsoleKey Enter = 13;
	public const ConsoleKey Pause = 19;
	public const ConsoleKey Escape = 27;
	public const ConsoleKey Spacebar = 32;
	public const ConsoleKey PageUp = 33;
	public const ConsoleKey PageDown = 34;
	public const ConsoleKey End = 35;
	public const ConsoleKey Home = 36;
	public const ConsoleKey LeftArrow = 37;
	public const ConsoleKey UpArrow = 38;
	public const ConsoleKey RightArrow = 39;
	public const ConsoleKey DownArrow = 40;
	public const ConsoleKey Select = 41;
	public const ConsoleKey Print = 42;
	public const ConsoleKey Execute = 43;
	public const ConsoleKey PrintScreen = 44;
	public const ConsoleKey Insert = 45;
	public const ConsoleKey Delete = 46;
	public const ConsoleKey Help = 47;
	public const ConsoleKey D0 = 48;
	public const ConsoleKey D1 = 49;
	public const ConsoleKey D2 = 50;
	public const ConsoleKey D3 = 51;
	public const ConsoleKey D4 = 52;
	public const ConsoleKey D5 = 53;
	public const ConsoleKey D6 = 54;
	public const ConsoleKey D7 = 55;
	public const ConsoleKey D8 = 56;
	public const ConsoleKey D9 = 57;
	public const ConsoleKey A = 65;
	public const ConsoleKey B = 66;
	public const ConsoleKey C = 67;
	public const ConsoleKey D = 68;
	public const ConsoleKey E = 69;
	public const ConsoleKey F = 70;
	public const ConsoleKey G = 71;
	public const ConsoleKey H = 72;
	public const ConsoleKey I = 73;
	public const ConsoleKey J = 74;
	public const ConsoleKey K = 75;
	public const ConsoleKey L = 76;
	public const ConsoleKey M = 77;
	public const ConsoleKey N = 78;
	public const ConsoleKey O = 79;
	public const ConsoleKey P = 80;
	public const ConsoleKey Q = 81;
	public const ConsoleKey R = 82;
	public const ConsoleKey S = 83;
	public const ConsoleKey T = 84;
	public const ConsoleKey U = 85;
	public const ConsoleKey V = 86;
	public const ConsoleKey W = 87;
	public const ConsoleKey X = 88;
	public const ConsoleKey Y = 89;
	public const ConsoleKey Z = 90;
	public const ConsoleKey LeftWindows = 91;
	public const ConsoleKey RightWindows = 92;
	public const ConsoleKey Applications = 93;
	public const ConsoleKey Sleep = 95;
	public const ConsoleKey NumPad0 = 96;
	public const ConsoleKey NumPad1 = 97;
	public const ConsoleKey NumPad2 = 98;
	public const ConsoleKey NumPad3 = 99;
	public const ConsoleKey NumPad4 = 100;
	public const ConsoleKey NumPad5 = 101;
	public const ConsoleKey NumPad6 = 102;
	public const ConsoleKey NumPad7 = 103;
	public const ConsoleKey NumPad8 = 104;
	public const ConsoleKey NumPad9 = 105;
	public const ConsoleKey Multiply = 106;
	public const ConsoleKey Add = 107;
	public const ConsoleKey Separator = 108;
	public const ConsoleKey Subtract = 109;
	public const ConsoleKey Decimal = 110;
	public const ConsoleKey Divide = 111;
	public const ConsoleKey F1 = 112;
	public const ConsoleKey F2 = 113;
	public const ConsoleKey F3 = 114;
	public const ConsoleKey F4 = 115;
	public const ConsoleKey F5 = 116;
	public const ConsoleKey F6 = 117;
	public const ConsoleKey F7 = 118;
	public const ConsoleKey F8 = 119;
	public const ConsoleKey F9 = 120;
	public const ConsoleKey F10 = 121;
	public const ConsoleKey F11 = 122;
	public const ConsoleKey F12 = 123;
	public const ConsoleKey F13 = 124;
	public const ConsoleKey F14 = 125;
	public const ConsoleKey F15 = 126;
	public const ConsoleKey F16 = 127;
	public const ConsoleKey F17 = 128;
	public const ConsoleKey F18 = 129;
	public const ConsoleKey F19 = 130;
	public const ConsoleKey F20 = 131;
	public const ConsoleKey F21 = 132;
	public const ConsoleKey F22 = 133;
	public const ConsoleKey F23 = 134;
	public const ConsoleKey F24 = 135;
	public const ConsoleKey BrowserBack = 166;
	public const ConsoleKey BrowserForward = 167;
	public const ConsoleKey BrowserRefresh = 168;
	public const ConsoleKey BrowserStop = 169;
	public const ConsoleKey BrowserSearch = 170;
	public const ConsoleKey BrowserFavorites = 171;
	public const ConsoleKey BrowserHome = 172;
	public const ConsoleKey VolumeMute = 173;
	public const ConsoleKey VolumeDown = 174;
	public const ConsoleKey VolumeUp = 175;
	public const ConsoleKey MediaNext = 176;
	public const ConsoleKey MediaPrevious = 177;
	public const ConsoleKey MediaStop = 178;
	public const ConsoleKey MediaPlay = 179;
	public const ConsoleKey LaunchMail = 180;
	public const ConsoleKey LaunchMediaSelect = 181;
	public const ConsoleKey LaunchApp1 = 182;
	public const ConsoleKey LaunchApp2 = 183;
	public const ConsoleKey Oem1 = 186;
	public const ConsoleKey OemPlus = 187;
	public const ConsoleKey OemComma = 188;
	public const ConsoleKey OemMinus = 189;
	public const ConsoleKey OemPeriod = 190;
	public const ConsoleKey Oem2 = 191;
	public const ConsoleKey Oem3 = 192;
	public const ConsoleKey Oem4 = 219;
	public const ConsoleKey Oem5 = 220;
	public const ConsoleKey Oem6 = 221;
	public const ConsoleKey Oem7 = 222;
	public const ConsoleKey Oem8 = 223;
	public const ConsoleKey Oem102 = 226;
	public const ConsoleKey Process = 229;
	public const ConsoleKey Packet = 231;
	public const ConsoleKey Attention = 246;
	public const ConsoleKey CrSel = 247;
	public const ConsoleKey ExSel = 248;
	public const ConsoleKey EraseEndOfFile = 249;
	public const ConsoleKey Play = 250;
	public const ConsoleKey Zoom = 251;
	public const ConsoleKey NoName = 252;
	public const ConsoleKey Pa1 = 253;
	public const ConsoleKey OemClear = 254;
}

// Namespace: System
[Serializable]
public struct ConsoleKeyInfo // TypeDefIndex: 131
{
	// Fields
	private char _keyChar; // 0x0
	private ConsoleKey _key; // 0x4
	private ConsoleModifiers _mods; // 0x8

	// Properties
	public char KeyChar { get; }
	public ConsoleKey Key { get; }

	// Methods

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public void .ctor(char keyChar, ConsoleKey key, bool shift, bool alt, bool control) { }

	// RVA: 0x1FF Offset: 0x1FF VA: 0x1FF
	public char get_KeyChar() { }

	// RVA: 0x200 Offset: 0x200 VA: 0x200
	public ConsoleKey get_Key() { }

	// RVA: 0x116 Offset: 0x116 VA: 0x116 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x117 Offset: 0x117 VA: 0x117
	public bool Equals(ConsoleKeyInfo obj) { }

	// RVA: 0x201 Offset: 0x201 VA: 0x201 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x2CE Offset: 0x2CE VA: 0x2CE
[Serializable]
public enum ConsoleModifiers // TypeDefIndex: 132
{
	// Fields
	public int value__; // 0x0
	public const ConsoleModifiers Alt = 1;
	public const ConsoleModifiers Shift = 2;
	public const ConsoleModifiers Control = 4;
}

// Namespace: System
[Serializable]
public enum ConsoleSpecialKey // TypeDefIndex: 133
{
	// Fields
	public int value__; // 0x0
	public const ConsoleSpecialKey ControlC = 0;
	public const ConsoleSpecialKey ControlBreak = 1;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2CF Offset: 0x2CF VA: 0x2CF
[Serializable]
public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 134
{
	// Methods

	// RVA: 0x2CC Offset: 0x2CC VA: 0x2CC
	protected void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
[ComVisibleAttribute] // RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
[Serializable]
public class ContextStaticAttribute : Attribute // TypeDefIndex: 135
{
	// Methods

	// RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
	public void .ctor() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1
public enum Base64FormattingOptions // TypeDefIndex: 136
{
	// Fields
	public int value__; // 0x0
	public const Base64FormattingOptions None = 0;
	public const Base64FormattingOptions InsertLineBreaks = 1;
}

// Namespace: System
public static class Convert // TypeDefIndex: 137
{
	// Fields
	internal static readonly RuntimeType[] ConvertTypes; // 0x0
	private static readonly RuntimeType EnumType; // 0x4
	internal static readonly char[] base64Table; // 0x8
	public static readonly object DBNull; // 0xC

	// Methods

	// RVA: 0x202 Offset: 0x202 VA: 0x202
	public static TypeCode GetTypeCode(object value) { }

	// RVA: 0x828 Offset: 0x828 VA: 0x828
	public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider) { }

	// RVA: 0x829 Offset: 0x829 VA: 0x829
	internal static object DefaultToType(IConvertible value, Type targetType, IFormatProvider provider) { }

	// RVA: 0x82A Offset: 0x82A VA: 0x82A
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { }

	// RVA: 0x118 Offset: 0x118 VA: 0x118
	public static bool ToBoolean(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x5E2 Offset: 0x5E2 VA: 0x5E2
	// RVA: 0x203 Offset: 0x203 VA: 0x203
	public static bool ToBoolean(sbyte value) { }

	// RVA: 0x204 Offset: 0x204 VA: 0x204
	public static bool ToBoolean(byte value) { }

	// RVA: 0x205 Offset: 0x205 VA: 0x205
	public static bool ToBoolean(short value) { }

	[CLSCompliantAttribute] // RVA: 0x5E3 Offset: 0x5E3 VA: 0x5E3
	// RVA: 0x206 Offset: 0x206 VA: 0x206
	public static bool ToBoolean(ushort value) { }

	// RVA: 0x207 Offset: 0x207 VA: 0x207
	public static bool ToBoolean(int value) { }

	[CLSCompliantAttribute] // RVA: 0x5E4 Offset: 0x5E4 VA: 0x5E4
	// RVA: 0x208 Offset: 0x208 VA: 0x208
	public static bool ToBoolean(uint value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static bool ToBoolean(long value) { }

	[CLSCompliantAttribute] // RVA: 0x5E5 Offset: 0x5E5 VA: 0x5E5
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static bool ToBoolean(ulong value) { }

	// RVA: 0x119 Offset: 0x119 VA: 0x119
	public static bool ToBoolean(string value, IFormatProvider provider) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static bool ToBoolean(float value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static bool ToBoolean(double value) { }

	// RVA: 0x209 Offset: 0x209 VA: 0x209
	public static bool ToBoolean(Decimal value) { }

	// RVA: 0x11A Offset: 0x11A VA: 0x11A
	public static char ToChar(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x5E6 Offset: 0x5E6 VA: 0x5E6
	// RVA: 0x20A Offset: 0x20A VA: 0x20A
	public static char ToChar(sbyte value) { }

	// RVA: 0x20B Offset: 0x20B VA: 0x20B
	public static char ToChar(byte value) { }

	// RVA: 0x20C Offset: 0x20C VA: 0x20C
	public static char ToChar(short value) { }

	[CLSCompliantAttribute] // RVA: 0x5E7 Offset: 0x5E7 VA: 0x5E7
	// RVA: 0x20D Offset: 0x20D VA: 0x20D
	public static char ToChar(ushort value) { }

	// RVA: 0x20E Offset: 0x20E VA: 0x20E
	public static char ToChar(int value) { }

	[CLSCompliantAttribute] // RVA: 0x5E8 Offset: 0x5E8 VA: 0x5E8
	// RVA: 0x20F Offset: 0x20F VA: 0x20F
	public static char ToChar(uint value) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static char ToChar(long value) { }

	[CLSCompliantAttribute] // RVA: 0x5E9 Offset: 0x5E9 VA: 0x5E9
	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static char ToChar(ulong value) { }

	// RVA: 0x11B Offset: 0x11B VA: 0x11B
	public static char ToChar(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x5EA Offset: 0x5EA VA: 0x5EA
	// RVA: 0x11C Offset: 0x11C VA: 0x11C
	public static sbyte ToSByte(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x5EB Offset: 0x5EB VA: 0x5EB
	// RVA: 0x210 Offset: 0x210 VA: 0x210
	public static sbyte ToSByte(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x5EC Offset: 0x5EC VA: 0x5EC
	// RVA: 0x211 Offset: 0x211 VA: 0x211
	public static sbyte ToSByte(char value) { }

	[CLSCompliantAttribute] // RVA: 0x5ED Offset: 0x5ED VA: 0x5ED
	// RVA: 0x212 Offset: 0x212 VA: 0x212
	public static sbyte ToSByte(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x5EE Offset: 0x5EE VA: 0x5EE
	// RVA: 0x213 Offset: 0x213 VA: 0x213
	public static sbyte ToSByte(short value) { }

	[CLSCompliantAttribute] // RVA: 0x5EF Offset: 0x5EF VA: 0x5EF
	// RVA: 0x214 Offset: 0x214 VA: 0x214
	public static sbyte ToSByte(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x5F0 Offset: 0x5F0 VA: 0x5F0
	// RVA: 0x215 Offset: 0x215 VA: 0x215
	public static sbyte ToSByte(int value) { }

	[CLSCompliantAttribute] // RVA: 0x5F1 Offset: 0x5F1 VA: 0x5F1
	// RVA: 0x216 Offset: 0x216 VA: 0x216
	public static sbyte ToSByte(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x5F2 Offset: 0x5F2 VA: 0x5F2
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static sbyte ToSByte(long value) { }

	[CLSCompliantAttribute] // RVA: 0x5F3 Offset: 0x5F3 VA: 0x5F3
	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static sbyte ToSByte(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x5F4 Offset: 0x5F4 VA: 0x5F4
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static sbyte ToSByte(float value) { }

	[CLSCompliantAttribute] // RVA: 0x5F5 Offset: 0x5F5 VA: 0x5F5
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static sbyte ToSByte(double value) { }

	[CLSCompliantAttribute] // RVA: 0x5F6 Offset: 0x5F6 VA: 0x5F6
	// RVA: 0x217 Offset: 0x217 VA: 0x217
	public static sbyte ToSByte(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x5F7 Offset: 0x5F7 VA: 0x5F7
	// RVA: 0x11D Offset: 0x11D VA: 0x11D
	public static sbyte ToSByte(string value, IFormatProvider provider) { }

	// RVA: 0x11E Offset: 0x11E VA: 0x11E
	public static byte ToByte(object value, IFormatProvider provider) { }

	// RVA: 0x218 Offset: 0x218 VA: 0x218
	public static byte ToByte(bool value) { }

	// RVA: 0x219 Offset: 0x219 VA: 0x219
	public static byte ToByte(char value) { }

	[CLSCompliantAttribute] // RVA: 0x5F8 Offset: 0x5F8 VA: 0x5F8
	// RVA: 0x21A Offset: 0x21A VA: 0x21A
	public static byte ToByte(sbyte value) { }

	// RVA: 0x21B Offset: 0x21B VA: 0x21B
	public static byte ToByte(short value) { }

	[CLSCompliantAttribute] // RVA: 0x5F9 Offset: 0x5F9 VA: 0x5F9
	// RVA: 0x21C Offset: 0x21C VA: 0x21C
	public static byte ToByte(ushort value) { }

	// RVA: 0x21D Offset: 0x21D VA: 0x21D
	public static byte ToByte(int value) { }

	[CLSCompliantAttribute] // RVA: 0x5FA Offset: 0x5FA VA: 0x5FA
	// RVA: 0x21E Offset: 0x21E VA: 0x21E
	public static byte ToByte(uint value) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static byte ToByte(long value) { }

	[CLSCompliantAttribute] // RVA: 0x5FB Offset: 0x5FB VA: 0x5FB
	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static byte ToByte(ulong value) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static byte ToByte(float value) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static byte ToByte(double value) { }

	// RVA: 0x21F Offset: 0x21F VA: 0x21F
	public static byte ToByte(Decimal value) { }

	// RVA: 0x220 Offset: 0x220 VA: 0x220
	public static byte ToByte(string value) { }

	// RVA: 0x11F Offset: 0x11F VA: 0x11F
	public static byte ToByte(string value, IFormatProvider provider) { }

	// RVA: 0x120 Offset: 0x120 VA: 0x120
	public static short ToInt16(object value, IFormatProvider provider) { }

	// RVA: 0x221 Offset: 0x221 VA: 0x221
	public static short ToInt16(bool value) { }

	// RVA: 0x222 Offset: 0x222 VA: 0x222
	public static short ToInt16(char value) { }

	[CLSCompliantAttribute] // RVA: 0x5FC Offset: 0x5FC VA: 0x5FC
	// RVA: 0x223 Offset: 0x223 VA: 0x223
	public static short ToInt16(sbyte value) { }

	// RVA: 0x224 Offset: 0x224 VA: 0x224
	public static short ToInt16(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x5FD Offset: 0x5FD VA: 0x5FD
	// RVA: 0x225 Offset: 0x225 VA: 0x225
	public static short ToInt16(ushort value) { }

	// RVA: 0x226 Offset: 0x226 VA: 0x226
	public static short ToInt16(int value) { }

	[CLSCompliantAttribute] // RVA: 0x5FE Offset: 0x5FE VA: 0x5FE
	// RVA: 0x227 Offset: 0x227 VA: 0x227
	public static short ToInt16(uint value) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	public static short ToInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0x5FF Offset: 0x5FF VA: 0x5FF
	// RVA: 0xB Offset: 0xB VA: 0xB
	public static short ToInt16(ulong value) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static short ToInt16(float value) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static short ToInt16(double value) { }

	// RVA: 0x228 Offset: 0x228 VA: 0x228
	public static short ToInt16(Decimal value) { }

	// RVA: 0x121 Offset: 0x121 VA: 0x121
	public static short ToInt16(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x600 Offset: 0x600 VA: 0x600
	// RVA: 0x122 Offset: 0x122 VA: 0x122
	public static ushort ToUInt16(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x601 Offset: 0x601 VA: 0x601
	// RVA: 0x229 Offset: 0x229 VA: 0x229
	public static ushort ToUInt16(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x602 Offset: 0x602 VA: 0x602
	// RVA: 0x22A Offset: 0x22A VA: 0x22A
	public static ushort ToUInt16(char value) { }

	[CLSCompliantAttribute] // RVA: 0x603 Offset: 0x603 VA: 0x603
	// RVA: 0x22B Offset: 0x22B VA: 0x22B
	public static ushort ToUInt16(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x604 Offset: 0x604 VA: 0x604
	// RVA: 0x22C Offset: 0x22C VA: 0x22C
	public static ushort ToUInt16(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x605 Offset: 0x605 VA: 0x605
	// RVA: 0x22D Offset: 0x22D VA: 0x22D
	public static ushort ToUInt16(short value) { }

	[CLSCompliantAttribute] // RVA: 0x606 Offset: 0x606 VA: 0x606
	// RVA: 0x22E Offset: 0x22E VA: 0x22E
	public static ushort ToUInt16(int value) { }

	[CLSCompliantAttribute] // RVA: 0x607 Offset: 0x607 VA: 0x607
	// RVA: 0x22F Offset: 0x22F VA: 0x22F
	public static ushort ToUInt16(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x608 Offset: 0x608 VA: 0x608
	// RVA: 0xC Offset: 0xC VA: 0xC
	public static ushort ToUInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0x609 Offset: 0x609 VA: 0x609
	// RVA: 0xD Offset: 0xD VA: 0xD
	public static ushort ToUInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x60A Offset: 0x60A VA: 0x60A
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static ushort ToUInt16(float value) { }

	[CLSCompliantAttribute] // RVA: 0x60B Offset: 0x60B VA: 0x60B
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static ushort ToUInt16(double value) { }

	[CLSCompliantAttribute] // RVA: 0x60C Offset: 0x60C VA: 0x60C
	// RVA: 0x230 Offset: 0x230 VA: 0x230
	public static ushort ToUInt16(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x60D Offset: 0x60D VA: 0x60D
	// RVA: 0x123 Offset: 0x123 VA: 0x123
	public static ushort ToUInt16(string value, IFormatProvider provider) { }

	// RVA: 0x231 Offset: 0x231 VA: 0x231
	public static int ToInt32(object value) { }

	// RVA: 0x124 Offset: 0x124 VA: 0x124
	public static int ToInt32(object value, IFormatProvider provider) { }

	// RVA: 0x232 Offset: 0x232 VA: 0x232
	public static int ToInt32(bool value) { }

	// RVA: 0x233 Offset: 0x233 VA: 0x233
	public static int ToInt32(char value) { }

	// RVA: 0x234 Offset: 0x234 VA: 0x234
	public static int ToInt32(byte value) { }

	// RVA: 0x235 Offset: 0x235 VA: 0x235
	public static int ToInt32(short value) { }

	[CLSCompliantAttribute] // RVA: 0x60E Offset: 0x60E VA: 0x60E
	// RVA: 0x236 Offset: 0x236 VA: 0x236
	public static int ToInt32(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x60F Offset: 0x60F VA: 0x60F
	// RVA: 0x237 Offset: 0x237 VA: 0x237
	public static int ToInt32(uint value) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public static int ToInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0x610 Offset: 0x610 VA: 0x610
	// RVA: 0xF Offset: 0xF VA: 0xF
	public static int ToInt32(ulong value) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static int ToInt32(float value) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static int ToInt32(double value) { }

	// RVA: 0x238 Offset: 0x238 VA: 0x238
	public static int ToInt32(Decimal value) { }

	// RVA: 0x125 Offset: 0x125 VA: 0x125
	public static int ToInt32(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x611 Offset: 0x611 VA: 0x611
	// RVA: 0x126 Offset: 0x126 VA: 0x126
	public static uint ToUInt32(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x612 Offset: 0x612 VA: 0x612
	// RVA: 0x239 Offset: 0x239 VA: 0x239
	public static uint ToUInt32(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x613 Offset: 0x613 VA: 0x613
	// RVA: 0x23A Offset: 0x23A VA: 0x23A
	public static uint ToUInt32(char value) { }

	[CLSCompliantAttribute] // RVA: 0x614 Offset: 0x614 VA: 0x614
	// RVA: 0x23B Offset: 0x23B VA: 0x23B
	public static uint ToUInt32(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x615 Offset: 0x615 VA: 0x615
	// RVA: 0x23C Offset: 0x23C VA: 0x23C
	public static uint ToUInt32(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x616 Offset: 0x616 VA: 0x616
	// RVA: 0x23D Offset: 0x23D VA: 0x23D
	public static uint ToUInt32(short value) { }

	[CLSCompliantAttribute] // RVA: 0x617 Offset: 0x617 VA: 0x617
	// RVA: 0x23E Offset: 0x23E VA: 0x23E
	public static uint ToUInt32(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x618 Offset: 0x618 VA: 0x618
	// RVA: 0x23F Offset: 0x23F VA: 0x23F
	public static uint ToUInt32(int value) { }

	[CLSCompliantAttribute] // RVA: 0x619 Offset: 0x619 VA: 0x619
	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public static uint ToUInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0x61A Offset: 0x61A VA: 0x61A
	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public static uint ToUInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0x61B Offset: 0x61B VA: 0x61B
	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static uint ToUInt32(float value) { }

	[CLSCompliantAttribute] // RVA: 0x61C Offset: 0x61C VA: 0x61C
	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static uint ToUInt32(double value) { }

	[CLSCompliantAttribute] // RVA: 0x61D Offset: 0x61D VA: 0x61D
	// RVA: 0x240 Offset: 0x240 VA: 0x240
	public static uint ToUInt32(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x61E Offset: 0x61E VA: 0x61E
	// RVA: 0x127 Offset: 0x127 VA: 0x127
	public static uint ToUInt32(string value, IFormatProvider provider) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public static long ToInt64(object value, IFormatProvider provider) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public static long ToInt64(bool value) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public static long ToInt64(char value) { }

	[CLSCompliantAttribute] // RVA: 0x61F Offset: 0x61F VA: 0x61F
	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public static long ToInt64(sbyte value) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	public static long ToInt64(byte value) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	public static long ToInt64(short value) { }

	[CLSCompliantAttribute] // RVA: 0x620 Offset: 0x620 VA: 0x620
	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public static long ToInt64(ushort value) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	public static long ToInt64(int value) { }

	[CLSCompliantAttribute] // RVA: 0x621 Offset: 0x621 VA: 0x621
	// RVA: 0x18 Offset: 0x18 VA: 0x18
	public static long ToInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x622 Offset: 0x622 VA: 0x622
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static long ToInt64(ulong value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static long ToInt64(float value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static long ToInt64(double value) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	public static long ToInt64(Decimal value) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	public static long ToInt64(string value) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public static long ToInt64(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x623 Offset: 0x623 VA: 0x623
	// RVA: 0xF Offset: 0xF VA: 0xF
	public static ulong ToUInt64(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x624 Offset: 0x624 VA: 0x624
	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public static ulong ToUInt64(bool value) { }

	[CLSCompliantAttribute] // RVA: 0x625 Offset: 0x625 VA: 0x625
	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public static ulong ToUInt64(char value) { }

	[CLSCompliantAttribute] // RVA: 0x626 Offset: 0x626 VA: 0x626
	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	public static ulong ToUInt64(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0x627 Offset: 0x627 VA: 0x627
	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	public static ulong ToUInt64(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x628 Offset: 0x628 VA: 0x628
	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	public static ulong ToUInt64(short value) { }

	[CLSCompliantAttribute] // RVA: 0x629 Offset: 0x629 VA: 0x629
	// RVA: 0x20 Offset: 0x20 VA: 0x20
	public static ulong ToUInt64(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0x62A Offset: 0x62A VA: 0x62A
	// RVA: 0x21 Offset: 0x21 VA: 0x21
	public static ulong ToUInt64(int value) { }

	[CLSCompliantAttribute] // RVA: 0x62B Offset: 0x62B VA: 0x62B
	// RVA: 0x22 Offset: 0x22 VA: 0x22
	public static ulong ToUInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x62C Offset: 0x62C VA: 0x62C
	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static ulong ToUInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0x62D Offset: 0x62D VA: 0x62D
	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static ulong ToUInt64(float value) { }

	[CLSCompliantAttribute] // RVA: 0x62E Offset: 0x62E VA: 0x62E
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static ulong ToUInt64(double value) { }

	[CLSCompliantAttribute] // RVA: 0x62F Offset: 0x62F VA: 0x62F
	// RVA: 0x23 Offset: 0x23 VA: 0x23
	public static ulong ToUInt64(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x630 Offset: 0x630 VA: 0x630
	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public static ulong ToUInt64(string value, IFormatProvider provider) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static float ToSingle(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x631 Offset: 0x631 VA: 0x631
	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static float ToSingle(sbyte value) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static float ToSingle(byte value) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static float ToSingle(short value) { }

	[CLSCompliantAttribute] // RVA: 0x632 Offset: 0x632 VA: 0x632
	// RVA: 0xA Offset: 0xA VA: 0xA
	public static float ToSingle(ushort value) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public static float ToSingle(int value) { }

	[CLSCompliantAttribute] // RVA: 0x633 Offset: 0x633 VA: 0x633
	// RVA: 0xC Offset: 0xC VA: 0xC
	public static float ToSingle(uint value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float ToSingle(long value) { }

	[CLSCompliantAttribute] // RVA: 0x634 Offset: 0x634 VA: 0x634
	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static float ToSingle(ulong value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float ToSingle(double value) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public static float ToSingle(Decimal value) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static float ToSingle(string value, IFormatProvider provider) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public static float ToSingle(bool value) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static double ToDouble(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x635 Offset: 0x635 VA: 0x635
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double ToDouble(sbyte value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static double ToDouble(byte value) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static double ToDouble(short value) { }

	[CLSCompliantAttribute] // RVA: 0x636 Offset: 0x636 VA: 0x636
	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static double ToDouble(ushort value) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static double ToDouble(int value) { }

	[CLSCompliantAttribute] // RVA: 0x637 Offset: 0x637 VA: 0x637
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static double ToDouble(uint value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static double ToDouble(long value) { }

	[CLSCompliantAttribute] // RVA: 0x638 Offset: 0x638 VA: 0x638
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static double ToDouble(ulong value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double ToDouble(float value) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static double ToDouble(Decimal value) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static double ToDouble(string value, IFormatProvider provider) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static double ToDouble(bool value) { }

	// RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	public static Decimal ToDecimal(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x639 Offset: 0x639 VA: 0x639
	// RVA: 0xDE Offset: 0xDE VA: 0xDE
	public static Decimal ToDecimal(sbyte value) { }

	// RVA: 0xDF Offset: 0xDF VA: 0xDF
	public static Decimal ToDecimal(byte value) { }

	// RVA: 0xE0 Offset: 0xE0 VA: 0xE0
	public static Decimal ToDecimal(short value) { }

	[CLSCompliantAttribute] // RVA: 0x63A Offset: 0x63A VA: 0x63A
	// RVA: 0xE1 Offset: 0xE1 VA: 0xE1
	public static Decimal ToDecimal(ushort value) { }

	// RVA: 0xE2 Offset: 0xE2 VA: 0xE2
	public static Decimal ToDecimal(int value) { }

	[CLSCompliantAttribute] // RVA: 0x63B Offset: 0x63B VA: 0x63B
	// RVA: 0xE3 Offset: 0xE3 VA: 0xE3
	public static Decimal ToDecimal(uint value) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static Decimal ToDecimal(long value) { }

	[CLSCompliantAttribute] // RVA: 0x63C Offset: 0x63C VA: 0x63C
	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static Decimal ToDecimal(ulong value) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static Decimal ToDecimal(float value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static Decimal ToDecimal(double value) { }

	// RVA: 0xBA Offset: 0xBA VA: 0xBA
	public static Decimal ToDecimal(string value, IFormatProvider provider) { }

	// RVA: 0xE4 Offset: 0xE4 VA: 0xE4
	public static Decimal ToDecimal(bool value) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public static DateTime ToDateTime(string value, IFormatProvider provider) { }

	// RVA: 0x128 Offset: 0x128 VA: 0x128
	public static string ToString(object value, IFormatProvider provider) { }

	// RVA: 0x129 Offset: 0x129 VA: 0x129
	public static byte ToByte(string value, int fromBase) { }

	// RVA: 0x12A Offset: 0x12A VA: 0x12A
	public static int ToInt32(string value, int fromBase) { }

	// RVA: 0x241 Offset: 0x241 VA: 0x241
	public static string ToBase64String(byte[] inArray) { }

	[ComVisibleAttribute] // RVA: 0x63D Offset: 0x63D VA: 0x63D
	// RVA: 0x3E Offset: 0x3E VA: 0x3E
	public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	private static int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks) { }

	// RVA: 0x12B Offset: 0x12B VA: 0x12B
	private static int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks) { }

	// RVA: 0x242 Offset: 0x242 VA: 0x242
	public static byte[] FromBase64String(string s) { }

	// RVA: 0x12C Offset: 0x12C VA: 0x12C
	private static byte[] FromBase64CharPtr(char* inputPtr, int inputLength) { }

	// RVA: 0x3F Offset: 0x3F VA: 0x3F
	private static int FromBase64_Decode(char* startInputPtr, int inputLength, byte* startDestPtr, int destLength) { }

	// RVA: 0x12D Offset: 0x12D VA: 0x12D
	private static int FromBase64_ComputeResultLength(char* inputPtr, int inputLength) { }

	// RVA: 0xE67 Offset: 0xE67 VA: 0xE67
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public struct DateTime : IComparable, IFormattable, IConvertible, ISerializable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 138
{
	// Fields
	private const long TicksPerMillisecond = 10000;
	private const long TicksPerSecond = 10000000;
	private const long TicksPerMinute = 600000000;
	private const long TicksPerHour = 36000000000;
	private const long TicksPerDay = 864000000000;
	private const int MillisPerSecond = 1000;
	private const int MillisPerMinute = 60000;
	private const int MillisPerHour = 3600000;
	private const int MillisPerDay = 86400000;
	private const int DaysPerYear = 365;
	private const int DaysPer4Years = 1461;
	private const int DaysPer100Years = 36524;
	private const int DaysPer400Years = 146097;
	private const int DaysTo1601 = 584388;
	private const int DaysTo1899 = 693593;
	internal const int DaysTo1970 = 719162;
	private const int DaysTo10000 = 3652059;
	internal const long MinTicks = 0;
	internal const long MaxTicks = 3155378975999999999;
	private const long MaxMillis = 315537897600000;
	private const long FileTimeOffset = 504911232000000000;
	private const long DoubleDateOffset = 599264352000000000;
	private const long OADateMinAsTicks = 31241376000000000;
	private const double OADateMinAsDouble = -657435;
	private const double OADateMaxAsDouble = 2958466;
	private const int DatePartYear = 0;
	private const int DatePartDayOfYear = 1;
	private const int DatePartMonth = 2;
	private const int DatePartDay = 3;
	private static readonly int[] DaysToMonth365; // 0x0
	private static readonly int[] DaysToMonth366; // 0x4
	public static readonly DateTime MinValue; // 0x8
	public static readonly DateTime MaxValue; // 0x10
	private const ulong TicksMask = 4611686018427387903;
	private const ulong FlagsMask = 13835058055282163712;
	private const ulong LocalMask = 9223372036854775808;
	private const long TicksCeiling = 4611686018427387904;
	private const ulong KindUnspecified = 0;
	private const ulong KindUtc = 4611686018427387904;
	private const ulong KindLocal = 9223372036854775808;
	private const ulong KindLocalAmbiguousDst = 13835058055282163712;
	private const int KindShift = 62;
	private const string TicksField = "ticks";
	private const string DateDataField = "dateData";
	private ulong dateData; // 0x0

	// Properties
	internal long InternalTicks { get; }
	private ulong InternalKind { get; }
	public DateTime Date { get; }
	public int Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public int Hour { get; }
	public DateTimeKind Kind { get; }
	public int Minute { get; }
	public int Month { get; }
	public static DateTime Now { get; }
	public static DateTime UtcNow { get; }
	public int Second { get; }
	public long Ticks { get; }
	public TimeSpan TimeOfDay { get; }
	public int Year { get; }

	// Methods

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public void .ctor(long ticks) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	private void .ctor(ulong dateData) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(long ticks, DateTimeKind kind) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(long ticks, DateTimeKind kind, bool isAmbiguousDst) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	public void .ctor(int year, int month, int day) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond) { }

	// RVA: 0xBF Offset: 0xBF VA: 0xBF
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	internal long get_InternalTicks() { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	private ulong get_InternalKind() { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	public DateTime Add(TimeSpan value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private DateTime Add(double value, int scale) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public DateTime AddDays(double value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public DateTime AddMilliseconds(double value) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public DateTime AddMonths(int months) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public DateTime AddSeconds(double value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public DateTime AddTicks(long value) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	public DateTime AddYears(int value) { }

	// RVA: 0x13A Offset: 0x13A VA: 0x13A Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x13B Offset: 0x13B VA: 0x13B Slot: 24
	public int CompareTo(DateTime value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static long DateToTicks(int year, int month, int day) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static long TimeToTicks(int hour, int minute, int second) { }

	// RVA: 0x13C Offset: 0x13C VA: 0x13C
	public static int DaysInMonth(int year, int month) { }

	// RVA: 0x13D Offset: 0x13D VA: 0x13D Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x13E Offset: 0x13E VA: 0x13E Slot: 25
	public bool Equals(DateTime value) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static DateTime FromBinary(long dateData) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	internal static DateTime FromBinaryRaw(long dateData) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static DateTime FromFileTimeUtc(long fileTime) { }

	// RVA: 0xC0 Offset: 0xC0 VA: 0xC0 Slot: 23
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	internal long ToBinaryRaw() { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	public DateTime get_Date() { }

	// RVA: 0x13F Offset: 0x13F VA: 0x13F
	private int GetDatePart(int part) { }

	// RVA: 0x246 Offset: 0x246 VA: 0x246
	public int get_Day() { }

	// RVA: 0x247 Offset: 0x247 VA: 0x247
	public DayOfWeek get_DayOfWeek() { }

	// RVA: 0x248 Offset: 0x248 VA: 0x248 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x249 Offset: 0x249 VA: 0x249
	public int get_Hour() { }

	// RVA: 0x24A Offset: 0x24A VA: 0x24A
	internal bool IsAmbiguousDaylightSavingTime() { }

	// RVA: 0x24B Offset: 0x24B VA: 0x24B
	public DateTimeKind get_Kind() { }

	// RVA: 0x24C Offset: 0x24C VA: 0x24C
	public int get_Minute() { }

	// RVA: 0x24D Offset: 0x24D VA: 0x24D
	public int get_Month() { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public static DateTime get_Now() { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	public static DateTime get_UtcNow() { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	internal static long GetSystemTimeAsFileTime() { }

	// RVA: 0x24E Offset: 0x24E VA: 0x24E
	public int get_Second() { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	public long get_Ticks() { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	public TimeSpan get_TimeOfDay() { }

	// RVA: 0x24F Offset: 0x24F VA: 0x24F
	public int get_Year() { }

	// RVA: 0x250 Offset: 0x250 VA: 0x250
	public static bool IsLeapYear(int year) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	public static DateTime Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	public long ToFileTimeUtc() { }

	// RVA: 0x251 Offset: 0x251 VA: 0x251 Slot: 3
	public override string ToString() { }

	// RVA: 0x140 Offset: 0x140 VA: 0x140 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x82E Offset: 0x82E VA: 0x82E Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	public DateTime ToUniversalTime() { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	public static DateTime op_Addition(DateTime d, TimeSpan t) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public static DateTime op_Subtraction(DateTime d, TimeSpan t) { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2) { }

	// RVA: 0x141 Offset: 0x141 VA: 0x141
	public static bool op_Equality(DateTime d1, DateTime d2) { }

	// RVA: 0x142 Offset: 0x142 VA: 0x142
	public static bool op_LessThan(DateTime t1, DateTime t2) { }

	// RVA: 0x143 Offset: 0x143 VA: 0x143
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x144 Offset: 0x144 VA: 0x144
	public static bool op_GreaterThan(DateTime t1, DateTime t2) { }

	// RVA: 0x145 Offset: 0x145 VA: 0x145
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x252 Offset: 0x252 VA: 0x252 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x146 Offset: 0x146 VA: 0x146 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x147 Offset: 0x147 VA: 0x147 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x148 Offset: 0x148 VA: 0x148 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x149 Offset: 0x149 VA: 0x149 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x14A Offset: 0x14A VA: 0x14A Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x14B Offset: 0x14B VA: 0x14B Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x14C Offset: 0x14C VA: 0x14C Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x14D Offset: 0x14D VA: 0x14D Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xC1 Offset: 0xC1 VA: 0xC1 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x82F Offset: 0x82F VA: 0x82F Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	internal static bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, out DateTime result) { }

	// RVA: 0xE69 Offset: 0xE69 VA: 0xE69
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2
[Serializable]
public enum DateTimeKind // TypeDefIndex: 139
{
	// Fields
	public int value__; // 0x0
	public const DateTimeKind Unspecified = 0;
	public const DateTimeKind Utc = 1;
	public const DateTimeKind Local = 2;
}

// Namespace: System
[Serializable]
public struct DateTimeOffset : IComparable, IFormattable, ISerializable, IDeserializationCallback, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset> // TypeDefIndex: 140
{
	// Fields
	public static readonly DateTimeOffset MinValue; // 0x0
	public static readonly DateTimeOffset MaxValue; // 0x10
	private DateTime m_dateTime; // 0x0
	private short m_offsetMinutes; // 0x8

	// Properties
	public DateTime UtcDateTime { get; }
	private DateTime ClockDateTime { get; }
	public TimeSpan Offset { get; }
	public long Ticks { get; }

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(long ticks, TimeSpan offset) { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	public DateTime get_UtcDateTime() { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	private DateTime get_ClockDateTime() { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	public TimeSpan get_Offset() { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	public long get_Ticks() { }

	// RVA: 0x150 Offset: 0x150 VA: 0x150 Slot: 4
	private int System.IComparable.CompareTo(object obj) { }

	// RVA: 0x151 Offset: 0x151 VA: 0x151 Slot: 8
	public int CompareTo(DateTimeOffset other) { }

	// RVA: 0x152 Offset: 0x152 VA: 0x152 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x153 Offset: 0x153 VA: 0x153 Slot: 9
	public bool Equals(DateTimeOffset other) { }

	// RVA: 0xE8 Offset: 0xE8 VA: 0xE8 Slot: 7
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0xC4 Offset: 0xC4 VA: 0xC4 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x253 Offset: 0x253 VA: 0x253 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x254 Offset: 0x254 VA: 0x254 Slot: 3
	public override string ToString() { }

	// RVA: 0x835 Offset: 0x835 VA: 0x835 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }

	// RVA: 0x255 Offset: 0x255 VA: 0x255
	private static short ValidateOffset(TimeSpan offset) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	private static DateTime ValidateDate(DateTime dateTime, TimeSpan offset) { }

	// RVA: 0xE6B Offset: 0xE6B VA: 0xE6B
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3
[Serializable]
public enum DayOfWeek // TypeDefIndex: 141
{
	// Fields
	public int value__; // 0x0
	public const DayOfWeek Sunday = 0;
	public const DayOfWeek Monday = 1;
	public const DayOfWeek Tuesday = 2;
	public const DayOfWeek Wednesday = 3;
	public const DayOfWeek Thursday = 4;
	public const DayOfWeek Friday = 5;
	public const DayOfWeek Saturday = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4
[Serializable]
public sealed class DBNull : ISerializable, IConvertible // TypeDefIndex: 142
{
	// Fields
	public static readonly DBNull Value; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2CF Offset: 0x2CF VA: 0x2CF
	private void .ctor() { }

	// RVA: 0xBC Offset: 0xBC VA: 0xBC
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xBD Offset: 0xBD VA: 0xBD Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x244 Offset: 0x244 VA: 0x244 Slot: 3
	public override string ToString() { }

	// RVA: 0x130 Offset: 0x130 VA: 0x130 Slot: 20
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x245 Offset: 0x245 VA: 0x245 Slot: 5
	public TypeCode GetTypeCode() { }

	// RVA: 0x131 Offset: 0x131 VA: 0x131 Slot: 6
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x132 Offset: 0x132 VA: 0x132 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x133 Offset: 0x133 VA: 0x133 Slot: 8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x134 Offset: 0x134 VA: 0x134 Slot: 9
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x135 Offset: 0x135 VA: 0x135 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x136 Offset: 0x136 VA: 0x136 Slot: 11
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x137 Offset: 0x137 VA: 0x137 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x138 Offset: 0x138 VA: 0x138 Slot: 13
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12 Slot: 14
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13 Slot: 15
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 16
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 17
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBE Offset: 0xBE VA: 0xBE Slot: 18
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14 Slot: 19
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x82D Offset: 0x82D VA: 0x82D Slot: 21
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0xE68 Offset: 0xE68 VA: 0xE68
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
[Serializable]
public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<Decimal>, IEquatable<Decimal> // TypeDefIndex: 143
{
	// Fields
	private const int SignMask = -2147483648;
	private const byte DECIMAL_NEG = 128;
	private const byte DECIMAL_ADD = 0;
	private const int ScaleMask = 16711680;
	private const int ScaleShift = 16;
	private const int MaxInt32Scale = 9;
	private static uint[] Powers10; // 0x0
	[DecimalConstantAttribute] // RVA: 0x539 Offset: 0x539 VA: 0x539
	public static readonly Decimal Zero; // 0x4
	[DecimalConstantAttribute] // RVA: 0x53A Offset: 0x53A VA: 0x53A
	public static readonly Decimal One; // 0x14
	[DecimalConstantAttribute] // RVA: 0x53B Offset: 0x53B VA: 0x53B
	public static readonly Decimal MinusOne; // 0x24
	[DecimalConstantAttribute] // RVA: 0x53C Offset: 0x53C VA: 0x53C
	public static readonly Decimal MaxValue; // 0x34
	[DecimalConstantAttribute] // RVA: 0x53D Offset: 0x53D VA: 0x53D
	public static readonly Decimal MinValue; // 0x44
	[DecimalConstantAttribute] // RVA: 0x53E Offset: 0x53E VA: 0x53E
	private static readonly Decimal NearNegativeZero; // 0x54
	[DecimalConstantAttribute] // RVA: 0x53F Offset: 0x53F VA: 0x53F
	private static readonly Decimal NearPositiveZero; // 0x64
	private int flags; // 0x0
	private int hi; // 0x4
	private int lo; // 0x8
	private int mid; // 0xC

	// Methods

	// RVA: 0xED Offset: 0xED VA: 0xED
	public void .ctor(int value) { }

	[CLSCompliantAttribute] // RVA: 0x63E Offset: 0x63E VA: 0x63E
	// RVA: 0xEE Offset: 0xEE VA: 0xEE
	public void .ctor(uint value) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public void .ctor(long value) { }

	[CLSCompliantAttribute] // RVA: 0x63F Offset: 0x63F VA: 0x63F
	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public void .ctor(ulong value) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public void .ctor(float value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(double value) { }

	// RVA: 0xEF Offset: 0xEF VA: 0xEF
	public void .ctor(int[] bits) { }

	// RVA: 0xF0 Offset: 0xF0 VA: 0xF0
	private void SetBits(int[] bits) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public void .ctor(int lo, int mid, int hi, bool isNegative, byte scale) { }

	[OnSerializingAttribute] // RVA: 0x640 Offset: 0x640 VA: 0x640
	// RVA: 0xF1 Offset: 0xF1 VA: 0xF1
	private void OnSerializing(StreamingContext ctx) { }

	// RVA: 0xF2 Offset: 0xF2 VA: 0xF2 Slot: 23
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	private void .ctor(int lo, int mid, int hi, int flags) { }

	[ReliabilityContractAttribute] // RVA: 0x641 Offset: 0x641 VA: 0x641
	// RVA: 0x15D Offset: 0x15D VA: 0x15D
	private static int FCallCompare(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x15E Offset: 0x15E VA: 0x15E Slot: 5
	public int CompareTo(object value) { }

	// RVA: 0x15F Offset: 0x15F VA: 0x15F Slot: 24
	public int CompareTo(Decimal value) { }

	// RVA: 0x160 Offset: 0x160 VA: 0x160 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x161 Offset: 0x161 VA: 0x161 Slot: 25
	public bool Equals(Decimal value) { }

	// RVA: 0x25A Offset: 0x25A VA: 0x25A Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x25B Offset: 0x25B VA: 0x25B Slot: 3
	public override string ToString() { }

	// RVA: 0x162 Offset: 0x162 VA: 0x162 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x84B Offset: 0x84B VA: 0x84B Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	public static Decimal Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x25C Offset: 0x25C VA: 0x25C
	public static int[] GetBits(Decimal d) { }

	// RVA: 0xF3 Offset: 0xF3 VA: 0xF3
	internal static Decimal ToDecimal(byte[] buffer) { }

	// RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	public static Decimal Round(Decimal d, int decimals) { }

	// RVA: 0xF4 Offset: 0xF4 VA: 0xF4
	private static void FCallRound(ref Decimal d, int decimals) { }

	// RVA: 0x25D Offset: 0x25D VA: 0x25D
	public static byte ToByte(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x642 Offset: 0x642 VA: 0x642
	// RVA: 0x25E Offset: 0x25E VA: 0x25E
	public static sbyte ToSByte(Decimal value) { }

	// RVA: 0x25F Offset: 0x25F VA: 0x25F
	public static short ToInt16(Decimal value) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static double ToDouble(Decimal d) { }

	// RVA: 0x260 Offset: 0x260 VA: 0x260
	internal static int FCallToInt32(Decimal d) { }

	// RVA: 0x261 Offset: 0x261 VA: 0x261
	public static int ToInt32(Decimal d) { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30
	public static long ToInt64(Decimal d) { }

	[CLSCompliantAttribute] // RVA: 0x643 Offset: 0x643 VA: 0x643
	// RVA: 0x262 Offset: 0x262 VA: 0x262
	public static ushort ToUInt16(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0x644 Offset: 0x644 VA: 0x644
	// RVA: 0x263 Offset: 0x263 VA: 0x263
	public static uint ToUInt32(Decimal d) { }

	[CLSCompliantAttribute] // RVA: 0x645 Offset: 0x645 VA: 0x645
	// RVA: 0x31 Offset: 0x31 VA: 0x31
	public static ulong ToUInt64(Decimal d) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public static float ToSingle(Decimal d) { }

	// RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1
	private static void FCallTruncate(ref Decimal d) { }

	// RVA: 0xF5 Offset: 0xF5 VA: 0xF5
	public static Decimal op_Implicit(byte value) { }

	[CLSCompliantAttribute] // RVA: 0x646 Offset: 0x646 VA: 0x646
	// RVA: 0xF6 Offset: 0xF6 VA: 0xF6
	public static Decimal op_Implicit(sbyte value) { }

	// RVA: 0xF7 Offset: 0xF7 VA: 0xF7
	public static Decimal op_Implicit(short value) { }

	[CLSCompliantAttribute] // RVA: 0x647 Offset: 0x647 VA: 0x647
	// RVA: 0xF8 Offset: 0xF8 VA: 0xF8
	public static Decimal op_Implicit(ushort value) { }

	// RVA: 0xF9 Offset: 0xF9 VA: 0xF9
	public static Decimal op_Implicit(int value) { }

	[CLSCompliantAttribute] // RVA: 0x648 Offset: 0x648 VA: 0x648
	// RVA: 0xFA Offset: 0xFA VA: 0xFA
	public static Decimal op_Implicit(uint value) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	public static Decimal op_Implicit(long value) { }

	[CLSCompliantAttribute] // RVA: 0x649 Offset: 0x649 VA: 0x649
	// RVA: 0xB Offset: 0xB VA: 0xB
	public static Decimal op_Implicit(ulong value) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static Decimal op_Explicit(float value) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static Decimal op_Explicit(double value) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public static float op_Explicit(Decimal value) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	public static double op_Explicit(Decimal value) { }

	// RVA: 0x163 Offset: 0x163 VA: 0x163
	public static bool op_Equality(Decimal d1, Decimal d2) { }

	// RVA: 0x164 Offset: 0x164 VA: 0x164
	public static bool op_Inequality(Decimal d1, Decimal d2) { }

	// RVA: 0x264 Offset: 0x264 VA: 0x264 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x165 Offset: 0x165 VA: 0x165 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x166 Offset: 0x166 VA: 0x166 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x167 Offset: 0x167 VA: 0x167 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x168 Offset: 0x168 VA: 0x168 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x169 Offset: 0x169 VA: 0x169 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x16A Offset: 0x16A VA: 0x16A Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x16B Offset: 0x16B VA: 0x16B Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x16C Offset: 0x16C VA: 0x16C Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xC9 Offset: 0xC9 VA: 0xC9 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x84C Offset: 0x84C VA: 0x84C Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0xE6D Offset: 0xE6D VA: 0xE6D
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal class DefaultBinder : Binder // TypeDefIndex: 144
{
	// Methods

	// RVA: 0xB Offset: 0xB VA: 0xB Slot: 4
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo cultureInfo, string[] names, out object state) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21 Slot: 5
	public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo cultureInfo) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22 Slot: 6
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19 Slot: 7
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52 Slot: 8
	public override object ChangeType(object value, Type type, CultureInfo cultureInfo) { }

	// RVA: 0xCA Offset: 0xCA VA: 0xCA Slot: 9
	public override void ReorderArgumentArray(ref object[] args, object state) { }

	// RVA: 0x84D Offset: 0x84D VA: 0x84D
	public static MethodBase ExactBinding(MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53
	public static PropertyInfo ExactPropertyBinding(PropertyInfo[] match, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	private static int FindMostSpecific(ParameterInfo[] p1, int[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args) { }

	// RVA: 0x84E Offset: 0x84E VA: 0x84E
	private static int FindMostSpecificType(Type c1, Type c2, Type t) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	private static int FindMostSpecificMethod(MethodBase m1, int[] paramOrder1, Type paramArrayType1, MethodBase m2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args) { }

	// RVA: 0x16D Offset: 0x16D VA: 0x16D
	private static int FindMostSpecificField(FieldInfo cur1, FieldInfo cur2) { }

	// RVA: 0x16E Offset: 0x16E VA: 0x16E
	private static int FindMostSpecificProperty(PropertyInfo cur1, PropertyInfo cur2) { }

	// RVA: 0x16F Offset: 0x16F VA: 0x16F
	internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2) { }

	// RVA: 0x265 Offset: 0x265 VA: 0x265
	internal static int GetHierarchyDepth(Type t) { }

	// RVA: 0x170 Offset: 0x170 VA: 0x170
	internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches) { }

	// RVA: 0xFB Offset: 0xFB VA: 0xFB
	private static void ReorderParams(int[] paramOrder, object[] vars) { }

	// RVA: 0x84F Offset: 0x84F VA: 0x84F
	private static bool CreateParamOrder(int[] paramOrder, ParameterInfo[] pars, string[] names) { }

	// RVA: 0x171 Offset: 0x171 VA: 0x171
	private static bool CanConvertPrimitive(RuntimeType source, RuntimeType target) { }

	// RVA: 0x172 Offset: 0x172 VA: 0x172
	private static bool CanConvertPrimitiveObjectToType(object source, RuntimeType type) { }

	// RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2
	public void .ctor() { }
}

// Namespace: 
internal class DefaultBinder.BinderState // TypeDefIndex: 145
{
	// Fields
	internal int[] m_argsMap; // 0x8
	internal int m_originalSize; // 0xC
	internal bool m_isParamArray; // 0x10

	// Methods

	// RVA: 0x30 Offset: 0x30 VA: 0x30
	internal void .ctor(int[] argsMap, int originalSize, bool isParamArray) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
[Serializable]
private sealed class DefaultBinder.<>c // TypeDefIndex: 146
{
	// Fields
	public static readonly DefaultBinder.<>c <>9; // 0x0
	public static Predicate<Type> <>9__3_0; // 0x4

	// Methods

	// RVA: 0xE6E Offset: 0xE6E VA: 0xE6E
	private static void .cctor() { }

	// RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3
	public void .ctor() { }

	// RVA: 0x173 Offset: 0x173 VA: 0x173
	internal bool <SelectProperty>b__3_0(Type t) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7
[Serializable]
public class DivideByZeroException : ArithmeticException // TypeDefIndex: 147
{
	// Methods

	// RVA: 0x338 Offset: 0x338 VA: 0x338
	public void .ctor() { }

	// RVA: 0x122 Offset: 0x122 VA: 0x122
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8
[Serializable]
public class DllNotFoundException : TypeLoadException // TypeDefIndex: 148
{
	// Methods

	// RVA: 0x339 Offset: 0x339 VA: 0x339
	public void .ctor() { }

	// RVA: 0x15B Offset: 0x15B VA: 0x15B
	public void .ctor(string message) { }

	// RVA: 0x123 Offset: 0x123 VA: 0x123
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
[Serializable]
public struct Double : IComparable, IFormattable, IConvertible, IComparable<double>, IEquatable<double> // TypeDefIndex: 149
{
	// Fields
	internal double m_value; // 0x0
	public const double MinValue = -1.79769313486232E+308;
	public const double MaxValue = 1.79769313486232E+308;
	public const double Epsilon = 4.94065645841247E-324;
	public const double NegativeInfinity = -∞;
	public const double PositiveInfinity = ∞;
	public const double NaN = NaN;
	internal static double NegativeZero; // 0x0

	// Methods

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static bool IsPositiveInfinity(double d) { }

	[ReliabilityContractAttribute] // RVA: 0x64A Offset: 0x64A VA: 0x64A
	// RVA: 0xA Offset: 0xA VA: 0xA
	public static bool IsNaN(double d) { }

	// RVA: 0x1AB Offset: 0x1AB VA: 0x1AB Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 23
	public int CompareTo(double value) { }

	// RVA: 0x1AC Offset: 0x1AC VA: 0x1AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 24
	public bool Equals(double obj) { }

	// RVA: 0x2DD Offset: 0x2DD VA: 0x2DD Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2DE Offset: 0x2DE VA: 0x2DE Slot: 3
	public override string ToString() { }

	// RVA: 0x1AD Offset: 0x1AD VA: 0x1AD Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x865 Offset: 0x865 VA: 0x865 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public static double Parse(string s) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	public static double Parse(string s, IFormatProvider provider) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static double Parse(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0x2DF Offset: 0x2DF VA: 0x2DF Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x1AE Offset: 0x1AE VA: 0x1AE Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x1AF Offset: 0x1AF VA: 0x1AF Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xA Offset: 0xA VA: 0xA Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xB Offset: 0xB VA: 0xB Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x124 Offset: 0x124 VA: 0x124 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x866 Offset: 0x866 VA: 0x866 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0xE7C Offset: 0xE7C VA: 0xE7C
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal sealed class Empty : ISerializable // TypeDefIndex: 150
{
	// Fields
	public static readonly Empty Value; // 0xFFFFFFFF

	// Methods

	// RVA: 0x33A Offset: 0x33A VA: 0x33A
	private void .ctor() { }

	// RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0 Slot: 3
	public override string ToString() { }

	// RVA: 0x125 Offset: 0x125 VA: 0x125 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xE7D Offset: 0xE7D VA: 0xE7D
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2DA Offset: 0x2DA VA: 0x2DA
[Serializable]
public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 151
{
	// Methods

	// RVA: 0x33B Offset: 0x33B VA: 0x33B
	public void .ctor() { }

	// RVA: 0x15C Offset: 0x15C VA: 0x15C
	public void .ctor(string message) { }

	// RVA: 0x126 Offset: 0x126 VA: 0x126
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2DB Offset: 0x2DB VA: 0x2DB
[Serializable]
public abstract class Enum : ValueType, IComparable, IFormattable, IConvertible // TypeDefIndex: 152
{
	// Fields
	private static readonly char[] enumSeperatorCharArray; // 0xFFFFFFFF
	private const string enumSeperator = ", ";

	// Methods

	// RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	private static Enum.ValuesAndNames GetCachedValuesAndNames(RuntimeType enumType, bool getNames) { }

	// RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
	private static string InternalFormattedHexString(object value) { }

	// RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	private static string InternalFormat(RuntimeType eT, object value) { }

	// RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8
	private static string InternalFlagsFormat(RuntimeType eT, object value) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A
	internal static ulong ToUInt64(object value) { }

	// RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9
	private static int InternalCompareTo(object o1, object o2) { }

	// RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2
	internal static RuntimeType InternalGetUnderlyingType(RuntimeType enumType) { }

	// RVA: 0x867 Offset: 0x867 VA: 0x867
	private static bool GetEnumValuesAndNames(RuntimeType enumType, out ulong[] values, out string[] names) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	private static object InternalBoxEnum(RuntimeType enumType, long value) { }

	[ComVisibleAttribute] // RVA: 0x64B Offset: 0x64B VA: 0x64B
	// RVA: 0x1BA Offset: 0x1BA VA: 0x1BA
	public static object Parse(Type enumType, string value) { }

	[ComVisibleAttribute] // RVA: 0x64C Offset: 0x64C VA: 0x64C
	// RVA: 0x868 Offset: 0x868 VA: 0x868
	public static object Parse(Type enumType, string value, bool ignoreCase) { }

	// RVA: 0x61 Offset: 0x61 VA: 0x61
	private static bool TryParseEnum(Type enumType, string value, bool ignoreCase, ref Enum.EnumResult parseResult) { }

	[ComVisibleAttribute] // RVA: 0x64D Offset: 0x64D VA: 0x64D
	// RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3
	public static Type GetUnderlyingType(Type enumType) { }

	// RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4
	internal static ulong[] InternalGetValues(RuntimeType enumType) { }

	[ComVisibleAttribute] // RVA: 0x64E Offset: 0x64E VA: 0x64E
	// RVA: 0x1BB Offset: 0x1BB VA: 0x1BB
	public static string GetName(Type enumType, object value) { }

	// RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5
	internal static string[] InternalGetNames(RuntimeType enumType) { }

	[ComVisibleAttribute] // RVA: 0x64F Offset: 0x64F VA: 0x64F
	// RVA: 0x1BC Offset: 0x1BC VA: 0x1BC
	public static object ToObject(Type enumType, object value) { }

	[ComVisibleAttribute] // RVA: 0x650 Offset: 0x650 VA: 0x650
	// RVA: 0x1BD Offset: 0x1BD VA: 0x1BD
	public static bool IsDefined(Type enumType, object value) { }

	// RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6
	private object get_value() { }

	// RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
	internal object GetValue() { }

	// RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
	private int get_hashcode() { }

	// RVA: 0x1BE Offset: 0x1BE VA: 0x1BE Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2EA Offset: 0x2EA VA: 0x2EA Slot: 3
	public override string ToString() { }

	[ObsoleteAttribute] // RVA: 0x651 Offset: 0x651 VA: 0x651
	// RVA: 0x869 Offset: 0x869 VA: 0x869 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1BF Offset: 0x1BF VA: 0x1BF Slot: 4
	public int CompareTo(object target) { }

	// RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0
	public string ToString(string format) { }

	[ObsoleteAttribute] // RVA: 0x652 Offset: 0x652 VA: 0x652
	// RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x2EB Offset: 0x2EB VA: 0x2EB Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xB Offset: 0xB VA: 0xB Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xC Offset: 0xC VA: 0xC Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x127 Offset: 0x127 VA: 0x127 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x86A Offset: 0x86A VA: 0x86A Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	[ComVisibleAttribute] // RVA: 0x653 Offset: 0x653 VA: 0x653
	[CLSCompliantAttribute] // RVA: 0x653 Offset: 0x653 VA: 0x653
	// RVA: 0x1CA Offset: 0x1CA VA: 0x1CA
	public static object ToObject(Type enumType, sbyte value) { }

	[ComVisibleAttribute] // RVA: 0x654 Offset: 0x654 VA: 0x654
	// RVA: 0x1CB Offset: 0x1CB VA: 0x1CB
	public static object ToObject(Type enumType, short value) { }

	[ComVisibleAttribute] // RVA: 0x655 Offset: 0x655 VA: 0x655
	// RVA: 0x1CC Offset: 0x1CC VA: 0x1CC
	public static object ToObject(Type enumType, int value) { }

	[ComVisibleAttribute] // RVA: 0x656 Offset: 0x656 VA: 0x656
	// RVA: 0x1CD Offset: 0x1CD VA: 0x1CD
	public static object ToObject(Type enumType, byte value) { }

	[CLSCompliantAttribute] // RVA: 0x657 Offset: 0x657 VA: 0x657
	[ComVisibleAttribute] // RVA: 0x657 Offset: 0x657 VA: 0x657
	// RVA: 0x1CE Offset: 0x1CE VA: 0x1CE
	public static object ToObject(Type enumType, ushort value) { }

	[ComVisibleAttribute] // RVA: 0x658 Offset: 0x658 VA: 0x658
	[CLSCompliantAttribute] // RVA: 0x658 Offset: 0x658 VA: 0x658
	// RVA: 0x1CF Offset: 0x1CF VA: 0x1CF
	public static object ToObject(Type enumType, uint value) { }

	[ComVisibleAttribute] // RVA: 0x659 Offset: 0x659 VA: 0x659
	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static object ToObject(Type enumType, long value) { }

	[CLSCompliantAttribute] // RVA: 0x65A Offset: 0x65A VA: 0x65A
	[ComVisibleAttribute] // RVA: 0x65A Offset: 0x65A VA: 0x65A
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static object ToObject(Type enumType, ulong value) { }

	// RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0
	private static object ToObject(Type enumType, char value) { }

	// RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1
	private static object ToObject(Type enumType, bool value) { }

	// RVA: 0x33C Offset: 0x33C VA: 0x33C
	protected void .ctor() { }

	// RVA: 0xE7E Offset: 0xE7E VA: 0xE7E
	private static void .cctor() { }
}

// Namespace: 
private enum Enum.ParseFailureKind // TypeDefIndex: 153
{
	// Fields
	public int value__; // 0x0
	public const Enum.ParseFailureKind None = 0;
	public const Enum.ParseFailureKind Argument = 1;
	public const Enum.ParseFailureKind ArgumentNull = 2;
	public const Enum.ParseFailureKind ArgumentWithParameter = 3;
	public const Enum.ParseFailureKind UnhandledException = 4;
}

// Namespace: 
private struct Enum.EnumResult // TypeDefIndex: 154
{
	// Fields
	internal object parsedEnum; // 0x0
	internal bool canThrow; // 0x4
	internal Enum.ParseFailureKind m_failure; // 0x8
	internal string m_failureMessageID; // 0xC
	internal string m_failureParameter; // 0x10
	internal object m_failureMessageFormatArgument; // 0x14
	internal Exception m_innerException; // 0x18

	// Methods

	// RVA: 0x15D Offset: 0x15D VA: 0x15D
	internal void Init(bool canMethodThrow) { }

	// RVA: 0x15E Offset: 0x15E VA: 0x15E
	internal void SetFailure(Exception unhandledException) { }

	// RVA: 0x128 Offset: 0x128 VA: 0x128
	internal void SetFailure(Enum.ParseFailureKind failure, string failureParameter) { }

	// RVA: 0x68 Offset: 0x68 VA: 0x68
	internal void SetFailure(Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument) { }

	// RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
	internal Exception GetEnumParseException() { }
}

// Namespace: 
private class Enum.ValuesAndNames // TypeDefIndex: 155
{
	// Fields
	public ulong[] Values; // 0x8
	public string[] Names; // 0xC

	// Methods

	// RVA: 0x129 Offset: 0x129 VA: 0x129
	public void .ctor(ulong[] values, string[] names) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
[Serializable]
public class EventArgs // TypeDefIndex: 156
{
	// Fields
	public static readonly EventArgs Empty; // 0xFFFFFFFF

	// Methods

	// RVA: 0x33F Offset: 0x33F VA: 0x33F
	public void .ctor() { }

	// RVA: 0xE7F Offset: 0xE7F VA: 0xE7F
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2DD Offset: 0x2DD VA: 0x2DD
[Serializable]
public sealed class EventHandler : MulticastDelegate // TypeDefIndex: 157
{
	// Methods

	// RVA: 0x12A Offset: 0x12A VA: 0x12A
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x12B Offset: 0x12B VA: 0x12B Slot: 12
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x160 Offset: 0x160 VA: 0x160 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
public sealed class EventHandler<TEventArgs> : MulticastDelegate // TypeDefIndex: 158
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3E8 Offset: 0x3E8 VA: 0x3E8
	|-EventHandler<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(object sender, TEventArgs e) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3E9 Offset: 0x3E9 VA: 0x3E9
	|-EventHandler<EventCommandEventArgs>.Invoke
	|-EventHandler<EventSourceCreatedEventArgs>.Invoke
	|-EventHandler<EventWrittenEventArgs>.Invoke
	|-EventHandler<object>.Invoke
	|-EventHandler<SafeSerializationEventArgs>.Invoke
	|-EventHandler<UnobservedTaskExceptionEventArgs>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, TEventArgs e, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x92 Offset: 0x92 VA: 0x92
	|-EventHandler<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9
	|-EventHandler<object>.EndInvoke
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
[ClassInterfaceAttribute] // RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
[ComDefaultInterfaceAttribute] // RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
[Serializable]
public class Exception : ISerializable, _Exception // TypeDefIndex: 159
{
	// Fields
	[OptionalFieldAttribute] // RVA: 0x540 Offset: 0x540 VA: 0x540
	private static object s_EDILock; // 0x0
	private string _className; // 0x8
	internal string _message; // 0xC
	private IDictionary _data; // 0x10
	private Exception _innerException; // 0x14
	private string _helpURL; // 0x18
	private object _stackTrace; // 0x1C
	private string _stackTraceString; // 0x20
	private string _remoteStackTraceString; // 0x24
	private int _remoteStackIndex; // 0x28
	private object _dynamicMethods; // 0x2C
	internal int _HResult; // 0x30
	private string _source; // 0x34
	[OptionalFieldAttribute] // RVA: 0x541 Offset: 0x541 VA: 0x541
	private SafeSerializationManager _safeSerializationManager; // 0x38
	internal StackTrace[] captured_traces; // 0x3C
	private IntPtr[] native_trace_ips; // 0x40
	private const int _COMPlusExceptionCode = -532462766;

	// Properties
	public virtual string Message { get; }
	public Exception InnerException { get; }
	public virtual string StackTrace { get; }
	public virtual string Source { get; }
	public int HResult { get; set; }

	// Methods

	// RVA: 0x340 Offset: 0x340 VA: 0x340
	private void Init() { }

	// RVA: 0x341 Offset: 0x341 VA: 0x341
	public void .ctor() { }

	// RVA: 0x161 Offset: 0x161 VA: 0x161
	public void .ctor(string message) { }

	// RVA: 0x12C Offset: 0x12C VA: 0x12C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x12D Offset: 0x12D VA: 0x12D
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6 Slot: 5
	public virtual string get_Message() { }

	// RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
	private string GetClassName() { }

	// RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8 Slot: 6
	public Exception get_InnerException() { }

	// RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9 Slot: 7
	public virtual string get_StackTrace() { }

	// RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6
	private string GetStackTrace(bool needFileInfo) { }

	[FriendAccessAllowedAttribute] // RVA: 0x65B Offset: 0x65B VA: 0x65B
	// RVA: 0x162 Offset: 0x162 VA: 0x162
	internal void SetErrorCode(int hr) { }

	// RVA: 0x2FA Offset: 0x2FA VA: 0x2FA Slot: 8
	public virtual string get_Source() { }

	// RVA: 0x2FB Offset: 0x2FB VA: 0x2FB Slot: 3
	public override string ToString() { }

	// RVA: 0x86B Offset: 0x86B VA: 0x86B
	private string ToString(bool needFileLineInfo, bool needMessage) { }

	// RVA: 0x12E Offset: 0x12E VA: 0x12E Slot: 9
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[OnDeserializedAttribute] // RVA: 0x65C Offset: 0x65C VA: 0x65C
	// RVA: 0x163 Offset: 0x163 VA: 0x163
	private void OnDeserialized(StreamingContext context) { }

	// RVA: 0x86C Offset: 0x86C VA: 0x86C
	private string StripFileInfo(string stackTrace, bool isRemoteStackTrace) { }

	// RVA: 0x164 Offset: 0x164 VA: 0x164
	internal void RestoreExceptionDispatchInfo(ExceptionDispatchInfo exceptionDispatchInfo) { }

	// RVA: 0x2FC Offset: 0x2FC VA: 0x2FC
	public int get_HResult() { }

	// RVA: 0x165 Offset: 0x165 VA: 0x165
	protected void set_HResult(int value) { }

	// RVA: 0x2FD Offset: 0x2FD VA: 0x2FD Slot: 10
	public Type GetType() { }

	// RVA: 0x2FE Offset: 0x2FE VA: 0x2FE
	internal static string GetMessageFromNativeResources(Exception.ExceptionMessageKind kind) { }

	// RVA: 0x2FF Offset: 0x2FF VA: 0x2FF
	internal Exception FixRemotingException() { }

	// RVA: 0xE80 Offset: 0xE80 VA: 0xE80
	private static void .cctor() { }
}

// Namespace: 
internal enum Exception.ExceptionMessageKind // TypeDefIndex: 160
{
	// Fields
	public int value__; // 0x0
	public const Exception.ExceptionMessageKind ThreadAbort = 1;
	public const Exception.ExceptionMessageKind ThreadInterrupted = 2;
	public const Exception.ExceptionMessageKind OutOfMemory = 3;
}

// Namespace: System
[ObsoleteAttribute] // RVA: 0x2DF Offset: 0x2DF VA: 0x2DF
[ComVisibleAttribute] // RVA: 0x2DF Offset: 0x2DF VA: 0x2DF
[Serializable]
public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 161
{
	// Methods

	// RVA: 0x342 Offset: 0x342 VA: 0x342
	public void .ctor() { }

	// RVA: 0x166 Offset: 0x166 VA: 0x166
	public void .ctor(string message) { }

	// RVA: 0x12F Offset: 0x12F VA: 0x12F
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x130 Offset: 0x130 VA: 0x130
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0
[Serializable]
public class FieldAccessException : MemberAccessException // TypeDefIndex: 162
{
	// Methods

	// RVA: 0x343 Offset: 0x343 VA: 0x343
	public void .ctor() { }

	// RVA: 0x167 Offset: 0x167 VA: 0x167
	public void .ctor(string message) { }

	// RVA: 0x131 Offset: 0x131 VA: 0x131
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
[AttributeUsageAttribute] // RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
[Serializable]
public class FlagsAttribute : Attribute // TypeDefIndex: 163
{
	// Methods

	// RVA: 0x344 Offset: 0x344 VA: 0x344
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2
[Serializable]
public class FormatException : SystemException // TypeDefIndex: 164
{
	// Methods

	// RVA: 0x345 Offset: 0x345 VA: 0x345
	public void .ctor() { }

	// RVA: 0x168 Offset: 0x168 VA: 0x168
	public void .ctor(string message) { }

	// RVA: 0x132 Offset: 0x132 VA: 0x132
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x133 Offset: 0x133 VA: 0x133
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public static class GC // TypeDefIndex: 165
{
	// Fields
	internal static readonly object EPHEMERON_TOMBSTONE; // 0xFFFFFFFF

	// Methods

	// RVA: 0x346 Offset: 0x346 VA: 0x346
	internal static void register_ephemeron_array(Ephemeron[] array) { }

	// RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2
	private static object get_ephemeron_tombstone() { }

	[ReliabilityContractAttribute] // RVA: 0x65D Offset: 0x65D VA: 0x65D
	// RVA: 0x347 Offset: 0x347 VA: 0x347
	public static void KeepAlive(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0x65E Offset: 0x65E VA: 0x65E
	// RVA: 0x348 Offset: 0x348 VA: 0x348
	private static void _SuppressFinalize(object o) { }

	[ReliabilityContractAttribute] // RVA: 0x65F Offset: 0x65F VA: 0x65F
	// RVA: 0x349 Offset: 0x349 VA: 0x349
	public static void SuppressFinalize(object obj) { }

	// RVA: 0x34A Offset: 0x34A VA: 0x34A
	private static void _ReRegisterForFinalize(object o) { }

	// RVA: 0x34B Offset: 0x34B VA: 0x34B
	public static void ReRegisterForFinalize(object obj) { }

	// RVA: 0xE81 Offset: 0xE81 VA: 0xE81
	private static void .cctor() { }
}

// Namespace: System
internal static class DateTimeFormat // TypeDefIndex: 166
{
	// Fields
	internal static readonly TimeSpan NullOffset; // 0x0
	internal static char[] allStandardFormats; // 0x8
	internal static string[] fixedNumberFormats; // 0xC

	// Methods

	// RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	internal static void FormatDigits(StringBuilder outputBuffer, int value, int len) { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	internal static void FormatDigits(StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit) { }

	// RVA: 0xE5 Offset: 0xE5 VA: 0xE5
	private static void HebrewFormatDigits(StringBuilder outputBuffer, int digits) { }

	// RVA: 0x830 Offset: 0x830 VA: 0x830
	internal static int ParseRepeatPattern(string format, int pos, char patternChar) { }

	// RVA: 0x831 Offset: 0x831 VA: 0x831
	private static string FormatDayOfWeek(int dayOfWeek, int repeat, DateTimeFormatInfo dtfi) { }

	// RVA: 0x832 Offset: 0x832 VA: 0x832
	private static string FormatMonth(int month, int repeatCount, DateTimeFormatInfo dtfi) { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41
	private static string FormatHebrewMonthName(DateTime time, int month, int repeatCount, DateTimeFormatInfo dtfi) { }

	// RVA: 0x833 Offset: 0x833 VA: 0x833
	internal static int ParseQuoteString(string format, int pos, StringBuilder result) { }

	// RVA: 0x14E Offset: 0x14E VA: 0x14E
	internal static int ParseNextChar(string format, int pos) { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42
	private static bool IsUseGenitiveForm(string format, int index, int tokenLen, char patternToMatch) { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	private static string FormatCustomized(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	private static void FormatCustomizedTimeZone(DateTime dateTime, TimeSpan offset, string format, int tokenLen, bool timeOnly, StringBuilder result) { }

	// RVA: 0xC3 Offset: 0xC3 VA: 0xC3
	private static void FormatCustomizedRoundripTimeZone(DateTime dateTime, TimeSpan offset, StringBuilder result) { }

	// RVA: 0x14F Offset: 0x14F VA: 0x14F
	internal static string GetRealFormat(string format, DateTimeFormatInfo dtfi) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	private static string ExpandPredefinedFormat(string format, ref DateTime dateTime, ref DateTimeFormatInfo dtfi, ref TimeSpan offset) { }

	// RVA: 0x834 Offset: 0x834 VA: 0x834
	internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45
	internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset) { }

	// RVA: 0xE6 Offset: 0xE6 VA: 0xE6
	internal static void InvalidFormatForLocal(string format, DateTime dateTime) { }

	// RVA: 0xE7 Offset: 0xE7 VA: 0xE7
	internal static void InvalidFormatForUtc(string format, DateTime dateTime) { }

	// RVA: 0xE6A Offset: 0xE6A VA: 0xE6A
	private static void .cctor() { }
}

// Namespace: System
internal static class DateTimeParse // TypeDefIndex: 167
{
	// Fields
	internal static DateTimeParse.MatchNumberDelegate m_hebrewNumberParser; // 0x0
	private static DateTimeParse.DS[][] dateParsingStates; // 0x4

	// Methods

	// RVA: 0x256 Offset: 0x256 VA: 0x256
	internal static bool IsDigit(char ch) { }

	// RVA: 0x154 Offset: 0x154 VA: 0x154
	private static bool ParseFraction(ref __DTString str, out double result) { }

	// RVA: 0x155 Offset: 0x155 VA: 0x155
	private static bool ParseTimeZone(ref __DTString str, ref TimeSpan result) { }

	// RVA: 0x156 Offset: 0x156 VA: 0x156
	private static bool HandleTimeZone(ref __DTString str, ref DateTimeResult result) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private static bool Lex(DateTimeParse.DS dps, ref __DTString str, ref DateTimeToken dtok, ref DateTimeRawInfo raw, ref DateTimeResult result, ref DateTimeFormatInfo dtfi, DateTimeStyles styles) { }

	// RVA: 0x257 Offset: 0x257 VA: 0x257
	private static bool VerifyValidPunctuation(ref __DTString str) { }

	// RVA: 0x836 Offset: 0x836 VA: 0x836
	private static bool GetYearMonthDayOrder(string datePattern, DateTimeFormatInfo dtfi, out int order) { }

	// RVA: 0x837 Offset: 0x837 VA: 0x837
	private static bool GetYearMonthOrder(string pattern, DateTimeFormatInfo dtfi, out int order) { }

	// RVA: 0x838 Offset: 0x838 VA: 0x838
	private static bool GetMonthDayOrder(string pattern, DateTimeFormatInfo dtfi, out int order) { }

	// RVA: 0x839 Offset: 0x839 VA: 0x839
	private static bool TryAdjustYear(ref DateTimeResult result, int year, out int adjustedYear) { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46
	private static bool SetDateYMD(ref DateTimeResult result, int year, int month, int day) { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47
	private static bool SetDateMDY(ref DateTimeResult result, int month, int day, int year) { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	private static bool SetDateDMY(ref DateTimeResult result, int day, int month, int year) { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49
	private static bool SetDateYDM(ref DateTimeResult result, int year, int day, int month) { }

	// RVA: 0xE9 Offset: 0xE9 VA: 0xE9
	private static void GetDefaultYear(ref DateTimeResult result, ref DateTimeStyles styles) { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A
	private static bool GetDayOfNN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x83A Offset: 0x83A VA: 0x83A
	private static bool GetDayOfNNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B
	private static bool GetDayOfMN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x83B Offset: 0x83B VA: 0x83B
	private static bool GetHebrewDayOfNM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C
	private static bool GetDayOfNM(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x83C Offset: 0x83C VA: 0x83C
	private static bool GetDayOfMNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x83D Offset: 0x83D VA: 0x83D
	private static bool GetDayOfYNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x83E Offset: 0x83E VA: 0x83E
	private static bool GetDayOfNNY(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x83F Offset: 0x83F VA: 0x83F
	private static bool GetDayOfYMN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x840 Offset: 0x840 VA: 0x840
	private static bool GetDayOfYN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x841 Offset: 0x841 VA: 0x841
	private static bool GetDayOfYM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0xEA Offset: 0xEA VA: 0xEA
	private static void AdjustTimeMark(DateTimeFormatInfo dtfi, ref DateTimeRawInfo raw) { }

	// RVA: 0x157 Offset: 0x157 VA: 0x157
	private static bool AdjustHour(ref int hour, DateTimeParse.TM timeMark) { }

	// RVA: 0x842 Offset: 0x842 VA: 0x842
	private static bool GetTimeOfN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw) { }

	// RVA: 0x843 Offset: 0x843 VA: 0x843
	private static bool GetTimeOfNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw) { }

	// RVA: 0x844 Offset: 0x844 VA: 0x844
	private static bool GetTimeOfNNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw) { }

	// RVA: 0x158 Offset: 0x158 VA: 0x158
	private static bool GetDateOfDSN(ref DateTimeResult result, ref DateTimeRawInfo raw) { }

	// RVA: 0x159 Offset: 0x159 VA: 0x159
	private static bool GetDateOfNDS(ref DateTimeResult result, ref DateTimeRawInfo raw) { }

	// RVA: 0x845 Offset: 0x845 VA: 0x845
	private static bool GetDateOfNNDS(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x846 Offset: 0x846 VA: 0x846
	private static bool ProcessDateTimeSuffix(ref DateTimeResult result, ref DateTimeRawInfo raw, ref DateTimeToken dtok) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	internal static bool ProcessHebrewTerminalState(DateTimeParse.DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	internal static bool ProcessTerminaltState(DateTimeParse.DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	internal static DateTime Parse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	internal static bool TryParse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles, ref DateTimeResult result) { }

	// RVA: 0x847 Offset: 0x847 VA: 0x847
	private static bool DetermineTimeZoneAdjustments(ref DateTimeResult result, DateTimeStyles styles, bool bTimeOnly) { }

	// RVA: 0x15A Offset: 0x15A VA: 0x15A
	private static bool DateTimeOffsetTimeZonePostProcessing(ref DateTimeResult result, DateTimeStyles styles) { }

	// RVA: 0x258 Offset: 0x258 VA: 0x258
	private static bool AdjustTimeZoneToUniversal(ref DateTimeResult result) { }

	// RVA: 0x15B Offset: 0x15B VA: 0x15B
	private static bool AdjustTimeZoneToLocal(ref DateTimeResult result, bool bTimeOnly) { }

	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	private static bool ParseISO8601(ref DateTimeRawInfo raw, ref __DTString str, DateTimeStyles styles, ref DateTimeResult result) { }

	// RVA: 0x848 Offset: 0x848 VA: 0x848
	internal static bool MatchHebrewDigits(ref __DTString str, int digitLen, out int number) { }

	// RVA: 0x849 Offset: 0x849 VA: 0x849
	internal static bool ParseDigits(ref __DTString str, int digitLen, out int result) { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F
	internal static bool ParseDigits(ref __DTString str, int minDigitLen, int maxDigitLen, out int result) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	private static DateTime GetDateTimeNow(ref DateTimeResult result, ref DateTimeStyles styles) { }

	// RVA: 0x84A Offset: 0x84A VA: 0x84A
	private static bool CheckDefaultDateTime(ref DateTimeResult result, ref Calendar cal, DateTimeStyles styles) { }

	// RVA: 0x259 Offset: 0x259 VA: 0x259
	private static Exception GetDateTimeParseException(ref DateTimeResult result) { }

	// RVA: 0xE6C Offset: 0xE6C VA: 0xE6C
	private static void .cctor() { }
}

// Namespace: 
internal sealed class DateTimeParse.MatchNumberDelegate : MulticastDelegate // TypeDefIndex: 168
{
	// Methods

	// RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50 Slot: 12
	public virtual bool Invoke(ref __DTString str, int digitLen, out int result) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18 Slot: 13
	public virtual IAsyncResult BeginInvoke(ref __DTString str, int digitLen, out int result, AsyncCallback callback, object object) { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51 Slot: 14
	public virtual bool EndInvoke(ref __DTString str, out int result, IAsyncResult __result) { }
}

// Namespace: 
internal enum DateTimeParse.DTT // TypeDefIndex: 169
{
	// Fields
	public int value__; // 0x0
	public const DateTimeParse.DTT End = 0;
	public const DateTimeParse.DTT NumEnd = 1;
	public const DateTimeParse.DTT NumAmpm = 2;
	public const DateTimeParse.DTT NumSpace = 3;
	public const DateTimeParse.DTT NumDatesep = 4;
	public const DateTimeParse.DTT NumTimesep = 5;
	public const DateTimeParse.DTT MonthEnd = 6;
	public const DateTimeParse.DTT MonthSpace = 7;
	public const DateTimeParse.DTT MonthDatesep = 8;
	public const DateTimeParse.DTT NumDatesuff = 9;
	public const DateTimeParse.DTT NumTimesuff = 10;
	public const DateTimeParse.DTT DayOfWeek = 11;
	public const DateTimeParse.DTT YearSpace = 12;
	public const DateTimeParse.DTT YearDateSep = 13;
	public const DateTimeParse.DTT YearEnd = 14;
	public const DateTimeParse.DTT TimeZone = 15;
	public const DateTimeParse.DTT Era = 16;
	public const DateTimeParse.DTT NumUTCTimeMark = 17;
	public const DateTimeParse.DTT Unk = 18;
	public const DateTimeParse.DTT NumLocalTimeMark = 19;
	public const DateTimeParse.DTT Max = 20;
}

// Namespace: 
internal enum DateTimeParse.TM // TypeDefIndex: 170
{
	// Fields
	public int value__; // 0x0
	public const DateTimeParse.TM NotSet = -1;
	public const DateTimeParse.TM AM = 0;
	public const DateTimeParse.TM PM = 1;
}

// Namespace: 
internal enum DateTimeParse.DS // TypeDefIndex: 171
{
	// Fields
	public int value__; // 0x0
	public const DateTimeParse.DS BEGIN = 0;
	public const DateTimeParse.DS N = 1;
	public const DateTimeParse.DS NN = 2;
	public const DateTimeParse.DS D_Nd = 3;
	public const DateTimeParse.DS D_NN = 4;
	public const DateTimeParse.DS D_NNd = 5;
	public const DateTimeParse.DS D_M = 6;
	public const DateTimeParse.DS D_MN = 7;
	public const DateTimeParse.DS D_NM = 8;
	public const DateTimeParse.DS D_MNd = 9;
	public const DateTimeParse.DS D_NDS = 10;
	public const DateTimeParse.DS D_Y = 11;
	public const DateTimeParse.DS D_YN = 12;
	public const DateTimeParse.DS D_YNd = 13;
	public const DateTimeParse.DS D_YM = 14;
	public const DateTimeParse.DS D_YMd = 15;
	public const DateTimeParse.DS D_S = 16;
	public const DateTimeParse.DS T_S = 17;
	public const DateTimeParse.DS T_Nt = 18;
	public const DateTimeParse.DS T_NNt = 19;
	public const DateTimeParse.DS ERROR = 20;
	public const DateTimeParse.DS DX_NN = 21;
	public const DateTimeParse.DS DX_NNN = 22;
	public const DateTimeParse.DS DX_MN = 23;
	public const DateTimeParse.DS DX_NM = 24;
	public const DateTimeParse.DS DX_MNN = 25;
	public const DateTimeParse.DS DX_DS = 26;
	public const DateTimeParse.DS DX_DSN = 27;
	public const DateTimeParse.DS DX_NDS = 28;
	public const DateTimeParse.DS DX_NNDS = 29;
	public const DateTimeParse.DS DX_YNN = 30;
	public const DateTimeParse.DS DX_YMN = 31;
	public const DateTimeParse.DS DX_YN = 32;
	public const DateTimeParse.DS DX_YM = 33;
	public const DateTimeParse.DS TX_N = 34;
	public const DateTimeParse.DS TX_NN = 35;
	public const DateTimeParse.DS TX_NNN = 36;
	public const DateTimeParse.DS TX_TS = 37;
	public const DateTimeParse.DS DX_NNY = 38;
}

// Namespace: System
internal struct __DTString // TypeDefIndex: 172
{
	// Fields
	internal string Value; // 0x0
	internal int Index; // 0x4
	internal int len; // 0x8
	internal char m_current; // 0xC
	private CompareInfo m_info; // 0x10
	private bool m_checkDigitToken; // 0x14
	private static char[] WhiteSpaceChecks; // 0x0

	// Methods

	// RVA: 0x30E Offset: 0x30E VA: 0x30E
	internal void .ctor(string str, DateTimeFormatInfo dtfi) { }

	// RVA: 0x9C1 Offset: 0x9C1 VA: 0x9C1
	internal bool GetNext() { }

	// RVA: 0x9C2 Offset: 0x9C2 VA: 0x9C2
	internal bool AtEnd() { }

	// RVA: 0x51D Offset: 0x51D VA: 0x51D
	internal bool Advance(int count) { }

	// RVA: 0xE9 Offset: 0xE9 VA: 0xE9
	internal void GetRegularToken(out TokenType tokenType, out int tokenValue, DateTimeFormatInfo dtfi) { }

	// RVA: 0x126 Offset: 0x126 VA: 0x126
	internal TokenType GetSeparatorToken(DateTimeFormatInfo dtfi, out int indexBeforeSeparator, out char charBeforeSeparator) { }

	// RVA: 0x127 Offset: 0x127 VA: 0x127
	internal bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength) { }

	// RVA: 0x51E Offset: 0x51E VA: 0x51E
	internal bool Match(char ch) { }

	// RVA: 0x9C3 Offset: 0x9C3 VA: 0x9C3
	internal bool GetNextDigit() { }

	// RVA: 0x9C4 Offset: 0x9C4 VA: 0x9C4
	internal char GetChar() { }

	// RVA: 0x9C5 Offset: 0x9C5 VA: 0x9C5
	internal int GetDigit() { }

	// RVA: 0x5F2 Offset: 0x5F2 VA: 0x5F2
	internal void SkipWhiteSpaces() { }

	// RVA: 0x9C6 Offset: 0x9C6 VA: 0x9C6
	internal bool SkipWhiteSpaceCurrent() { }

	// RVA: 0x480 Offset: 0x480 VA: 0x480
	internal DTSubString GetSubString() { }

	// RVA: 0x481 Offset: 0x481 VA: 0x481
	internal void ConsumeSubString(DTSubString sub) { }

	// RVA: 0xF1A Offset: 0xF1A VA: 0xF1A
	private static void .cctor() { }
}

// Namespace: System
internal enum DTSubStringType // TypeDefIndex: 173
{
	// Fields
	public int value__; // 0x0
	public const DTSubStringType Unknown = 0;
	public const DTSubStringType Invalid = 1;
	public const DTSubStringType Number = 2;
	public const DTSubStringType End = 3;
	public const DTSubStringType Other = 4;
}

// Namespace: System
[DefaultMemberAttribute] // RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3
internal struct DTSubString // TypeDefIndex: 174
{
	// Fields
	internal string s; // 0x0
	internal int index; // 0x4
	internal int length; // 0x8
	internal DTSubStringType type; // 0xC
	internal int value; // 0x10

	// Properties
	internal char Item { get; }

	// Methods

	// RVA: 0x139 Offset: 0x139 VA: 0x139
	internal char get_Item(int relativeIndex) { }
}

// Namespace: System
internal struct DateTimeToken // TypeDefIndex: 175
{
	// Fields
	internal DateTimeParse.DTT dtt; // 0x0
	internal TokenType suffix; // 0x4
	internal int num; // 0x8
}

// Namespace: System
internal struct DateTimeRawInfo // TypeDefIndex: 176
{
	// Fields
	private int* num; // 0x0
	internal int numCount; // 0x4
	internal int month; // 0x8
	internal int year; // 0xC
	internal int dayOfWeek; // 0x10
	internal int era; // 0x14
	internal DateTimeParse.TM timeMark; // 0x18
	internal double fraction; // 0x20
	internal bool hasSameDateAndTimeSeparators; // 0x28
	internal bool timeZone; // 0x29

	// Methods

	// RVA: 0xEB Offset: 0xEB VA: 0xEB
	internal void Init(int* numberBuffer) { }

	// RVA: 0xEC Offset: 0xEC VA: 0xEC
	internal void AddNumber(int value) { }

	// RVA: 0x15C Offset: 0x15C VA: 0x15C
	internal int GetNumber(int index) { }
}

// Namespace: System
internal enum ParseFailureKind // TypeDefIndex: 177
{
	// Fields
	public int value__; // 0x0
	public const ParseFailureKind None = 0;
	public const ParseFailureKind ArgumentNull = 1;
	public const ParseFailureKind Format = 2;
	public const ParseFailureKind FormatWithParameter = 3;
	public const ParseFailureKind FormatBadDateTimeCalendar = 4;
}

// Namespace: System
[FlagsAttribute] // RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4
internal enum ParseFlags // TypeDefIndex: 178
{
	// Fields
	public int value__; // 0x0
	public const ParseFlags HaveYear = 1;
	public const ParseFlags HaveMonth = 2;
	public const ParseFlags HaveDay = 4;
	public const ParseFlags HaveHour = 8;
	public const ParseFlags HaveMinute = 16;
	public const ParseFlags HaveSecond = 32;
	public const ParseFlags HaveTime = 64;
	public const ParseFlags HaveDate = 128;
	public const ParseFlags TimeZoneUsed = 256;
	public const ParseFlags TimeZoneUtc = 512;
	public const ParseFlags ParsedMonthName = 1024;
	public const ParseFlags CaptureOffset = 2048;
	public const ParseFlags YearDefault = 4096;
	public const ParseFlags Rfc1123Pattern = 8192;
	public const ParseFlags UtcSortPattern = 16384;
}

// Namespace: System
internal struct DateTimeResult // TypeDefIndex: 179
{
	// Fields
	internal int Year; // 0x0
	internal int Month; // 0x4
	internal int Day; // 0x8
	internal int Hour; // 0xC
	internal int Minute; // 0x10
	internal int Second; // 0x14
	internal double fraction; // 0x18
	internal int era; // 0x20
	internal ParseFlags flags; // 0x24
	internal TimeSpan timeZoneOffset; // 0x28
	internal Calendar calendar; // 0x30
	internal DateTime parsedDate; // 0x38
	internal ParseFailureKind failure; // 0x40
	internal string failureMessageID; // 0x44
	internal object failureMessageFormatArgument; // 0x48
	internal string failureArgumentName; // 0x4C

	// Methods

	// RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
	internal void Init() { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	internal void SetDate(int year, int month, int day) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName) { }
}

// Namespace: System
internal enum TokenType // TypeDefIndex: 180
{
	// Fields
	public int value__; // 0x0
	public const TokenType NumberToken = 1;
	public const TokenType YearNumberToken = 2;
	public const TokenType Am = 3;
	public const TokenType Pm = 4;
	public const TokenType MonthToken = 5;
	public const TokenType EndOfString = 6;
	public const TokenType DayOfWeekToken = 7;
	public const TokenType TimeZoneToken = 8;
	public const TokenType EraToken = 9;
	public const TokenType DateWordToken = 10;
	public const TokenType UnknownToken = 11;
	public const TokenType HebrewNumber = 12;
	public const TokenType JapaneseEraToken = 13;
	public const TokenType TEraToken = 14;
	public const TokenType IgnorableSymbol = 15;
	public const TokenType SEP_Unk = 256;
	public const TokenType SEP_End = 512;
	public const TokenType SEP_Space = 768;
	public const TokenType SEP_Am = 1024;
	public const TokenType SEP_Pm = 1280;
	public const TokenType SEP_Date = 1536;
	public const TokenType SEP_Time = 1792;
	public const TokenType SEP_YearSuff = 2048;
	public const TokenType SEP_MonthSuff = 2304;
	public const TokenType SEP_DaySuff = 2560;
	public const TokenType SEP_HourSuff = 2816;
	public const TokenType SEP_MinuteSuff = 3072;
	public const TokenType SEP_SecondSuff = 3328;
	public const TokenType SEP_LocalTimeMark = 3584;
	public const TokenType SEP_DateOrOffset = 3840;
	public const TokenType RegularTokenMask = 255;
	public const TokenType SeparatorTokenMask = 65280;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5
[Serializable]
public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid> // TypeDefIndex: 181
{
	// Fields
	public static readonly Guid Empty; // 0x0
	private int _a; // 0x0
	private short _b; // 0x4
	private short _c; // 0x6
	private byte _d; // 0x8
	private byte _e; // 0x9
	private byte _f; // 0xA
	private byte _g; // 0xB
	private byte _h; // 0xC
	private byte _i; // 0xD
	private byte _j; // 0xE
	private byte _k; // 0xF
	private static object _rngAccess; // 0x10
	private static RandomNumberGenerator _rng; // 0x14

	// Methods

	// RVA: 0x198 Offset: 0x198 VA: 0x198
	public void .ctor(byte[] b) { }

	[CLSCompliantAttribute] // RVA: 0x660 Offset: 0x660 VA: 0x660
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) { }

	// RVA: 0x199 Offset: 0x199 VA: 0x199
	public void .ctor(string g) { }

	// RVA: 0x19A Offset: 0x19A VA: 0x19A
	public static Guid Parse(string input) { }

	// RVA: 0x23A Offset: 0x23A VA: 0x23A
	public static bool TryParse(string input, out Guid result) { }

	// RVA: 0x88C Offset: 0x88C VA: 0x88C
	private static bool TryParseGuid(string g, Guid.GuidStyles flags, ref Guid.GuidResult result) { }

	// RVA: 0x23B Offset: 0x23B VA: 0x23B
	private static bool TryParseGuidWithHexPrefix(string guidString, ref Guid.GuidResult result) { }

	// RVA: 0x23C Offset: 0x23C VA: 0x23C
	private static bool TryParseGuidWithNoStyle(string guidString, ref Guid.GuidResult result) { }

	// RVA: 0x23D Offset: 0x23D VA: 0x23D
	private static bool TryParseGuidWithDashes(string guidString, ref Guid.GuidResult result) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	private static bool StringToShort(string str, int requiredLength, int flags, out short result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	private static bool StringToShort(string str, int* parsePos, int requiredLength, int flags, out short result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	private static bool StringToInt(string str, int requiredLength, int flags, out int result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	private static bool StringToInt(string str, ref int parsePos, int requiredLength, int flags, out int result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	private static bool StringToInt(string str, int* parsePos, int requiredLength, int flags, out int result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30
	private static bool StringToLong(string str, ref int parsePos, int flags, out long result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	private static bool StringToLong(string str, int* parsePos, int flags, out long result, ref Guid.GuidResult parseResult) { }

	// RVA: 0x3CA Offset: 0x3CA VA: 0x3CA
	private static string EatAllWhitespace(string str) { }

	// RVA: 0x23E Offset: 0x23E VA: 0x23E
	private static bool IsHexPrefix(string str, int i) { }

	// RVA: 0x3CB Offset: 0x3CB VA: 0x3CB
	public byte[] ToByteArray() { }

	// RVA: 0x3CC Offset: 0x3CC VA: 0x3CC Slot: 3
	public override string ToString() { }

	// RVA: 0x3CD Offset: 0x3CD VA: 0x3CD Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23F Offset: 0x23F VA: 0x23F Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x240 Offset: 0x240 VA: 0x240 Slot: 7
	public bool Equals(Guid g) { }

	// RVA: 0x88D Offset: 0x88D VA: 0x88D
	private int GetResult(uint me, uint them) { }

	// RVA: 0x241 Offset: 0x241 VA: 0x241 Slot: 5
	public int CompareTo(object value) { }

	// RVA: 0x242 Offset: 0x242 VA: 0x242 Slot: 6
	public int CompareTo(Guid value) { }

	// RVA: 0x243 Offset: 0x243 VA: 0x243
	public static bool op_Equality(Guid a, Guid b) { }

	// RVA: 0x244 Offset: 0x244 VA: 0x244
	public static bool op_Inequality(Guid a, Guid b) { }

	// RVA: 0x245 Offset: 0x245 VA: 0x245
	public string ToString(string format) { }

	// RVA: 0x3CE Offset: 0x3CE VA: 0x3CE
	private static char HexToChar(int a) { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77
	private static int HexsToChars(char* guidChars, int offset, int a, int b) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	private static int HexsToChars(char* guidChars, int offset, int a, int b, bool hex) { }

	// RVA: 0x88E Offset: 0x88E VA: 0x88E Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x363 Offset: 0x363 VA: 0x363
	public static Guid NewGuid() { }

	// RVA: 0xE91 Offset: 0xE91 VA: 0xE91
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6
private enum Guid.GuidStyles // TypeDefIndex: 182
{
	// Fields
	public int value__; // 0x0
	public const Guid.GuidStyles None = 0;
	public const Guid.GuidStyles AllowParenthesis = 1;
	public const Guid.GuidStyles AllowBraces = 2;
	public const Guid.GuidStyles AllowDashes = 4;
	public const Guid.GuidStyles AllowHexPrefix = 8;
	public const Guid.GuidStyles RequireParenthesis = 16;
	public const Guid.GuidStyles RequireBraces = 32;
	public const Guid.GuidStyles RequireDashes = 64;
	public const Guid.GuidStyles RequireHexPrefix = 128;
	public const Guid.GuidStyles HexFormat = 160;
	public const Guid.GuidStyles NumberFormat = 0;
	public const Guid.GuidStyles DigitFormat = 64;
	public const Guid.GuidStyles BraceFormat = 96;
	public const Guid.GuidStyles ParenthesisFormat = 80;
	public const Guid.GuidStyles Any = 15;
}

// Namespace: 
private enum Guid.GuidParseThrowStyle // TypeDefIndex: 183
{
	// Fields
	public int value__; // 0x0
	public const Guid.GuidParseThrowStyle None = 0;
	public const Guid.GuidParseThrowStyle All = 1;
	public const Guid.GuidParseThrowStyle AllButOverflow = 2;
}

// Namespace: 
private enum Guid.ParseFailureKind // TypeDefIndex: 184
{
	// Fields
	public int value__; // 0x0
	public const Guid.ParseFailureKind None = 0;
	public const Guid.ParseFailureKind ArgumentNull = 1;
	public const Guid.ParseFailureKind Format = 2;
	public const Guid.ParseFailureKind FormatWithParameter = 3;
	public const Guid.ParseFailureKind NativeException = 4;
	public const Guid.ParseFailureKind FormatWithInnerException = 5;
}

// Namespace: 
private struct Guid.GuidResult // TypeDefIndex: 185
{
	// Fields
	internal Guid parsedGuid; // 0x0
	internal Guid.GuidParseThrowStyle throwStyle; // 0x10
	internal Guid.ParseFailureKind m_failure; // 0x14
	internal string m_failureMessageID; // 0x18
	internal object m_failureMessageFormatArgument; // 0x1C
	internal string m_failureArgumentName; // 0x20
	internal Exception m_innerException; // 0x24

	// Methods

	// RVA: 0x19B Offset: 0x19B VA: 0x19B
	internal void Init(Guid.GuidParseThrowStyle canThrow) { }

	// RVA: 0x19C Offset: 0x19C VA: 0x19C
	internal void SetFailure(Exception nativeException) { }

	// RVA: 0x146 Offset: 0x146 VA: 0x146
	internal void SetFailure(Guid.ParseFailureKind failure, string failureMessageID) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70
	internal void SetFailure(Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	internal void SetFailure(Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, Exception innerException) { }

	// RVA: 0x3CF Offset: 0x3CF VA: 0x3CF
	internal Exception GetGuidParseException() { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
[ComVisibleAttribute] // RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
[GuidAttribute] // RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
[InterfaceTypeAttribute] // RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
public interface _AppDomain // TypeDefIndex: 186
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
[InterfaceTypeAttribute] // RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
[GuidAttribute] // RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
public interface IAppDomainSetup // TypeDefIndex: 187
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9
public interface IAsyncResult // TypeDefIndex: 188
{
	// Properties
	public abstract WaitHandle AsyncWaitHandle { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract WaitHandle get_AsyncWaitHandle() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2EA Offset: 0x2EA VA: 0x2EA
public interface ICloneable // TypeDefIndex: 189
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Clone() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2EB Offset: 0x2EB VA: 0x2EB
public interface IComparable // TypeDefIndex: 190
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object obj) { }
}

// Namespace: System
public interface IComparable<T> // TypeDefIndex: 191
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(T other) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IComparable<object>.CompareTo
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
[CLSCompliantAttribute] // RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
public interface IConvertible // TypeDefIndex: 192
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TypeCode GetTypeCode() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool ToBoolean(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract char ToChar(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract sbyte ToSByte(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte ToByte(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract short ToInt16(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract ushort ToUInt16(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int ToInt32(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract uint ToUInt32(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long ToInt64(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract ulong ToUInt64(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract float ToSingle(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract double ToDouble(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract Decimal ToDecimal(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract DateTime ToDateTime(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract string ToString(IFormatProvider provider) { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract object ToType(Type conversionType, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2ED Offset: 0x2ED VA: 0x2ED
public interface ICustomFormatter // TypeDefIndex: 193
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string Format(string format, object arg, IFormatProvider formatProvider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2EE Offset: 0x2EE VA: 0x2EE
public interface IDisposable // TypeDefIndex: 194
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Dispose() { }
}

// Namespace: System
public interface IEquatable<T> // TypeDefIndex: 195
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T other) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEquatable<object>.Equals
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2EF Offset: 0x2EF VA: 0x2EF
public interface IFormatProvider // TypeDefIndex: 196
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetFormat(Type formatType) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0
public interface IFormattable // TypeDefIndex: 197
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(string format, IFormatProvider formatProvider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1
[Serializable]
public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 198
{
	// Methods

	// RVA: 0x3A9 Offset: 0x3A9 VA: 0x3A9
	public void .ctor() { }

	// RVA: 0x200 Offset: 0x200 VA: 0x200
	public void .ctor(string message) { }

	// RVA: 0x16D Offset: 0x16D VA: 0x16D
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2
[Serializable]
public struct Int16 : IComparable, IFormattable, IConvertible, IComparable<short>, IEquatable<short> // TypeDefIndex: 199
{
	// Fields
	internal short m_value; // 0x0
	public const short MaxValue = 32767;
	public const short MinValue = -32768;

	// Methods

	// RVA: 0x270 Offset: 0x270 VA: 0x270 Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x271 Offset: 0x271 VA: 0x271 Slot: 23
	public int CompareTo(short value) { }

	// RVA: 0x272 Offset: 0x272 VA: 0x272 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x273 Offset: 0x273 VA: 0x273 Slot: 24
	public bool Equals(short obj) { }

	// RVA: 0x44D Offset: 0x44D VA: 0x44D Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x44E Offset: 0x44E VA: 0x44E Slot: 3
	public override string ToString() { }

	// RVA: 0x274 Offset: 0x274 VA: 0x274 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x896 Offset: 0x896 VA: 0x896 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x897 Offset: 0x897 VA: 0x897
	private string ToString(string format, NumberFormatInfo info) { }

	// RVA: 0x275 Offset: 0x275 VA: 0x275
	public static short Parse(string s, IFormatProvider provider) { }

	// RVA: 0x898 Offset: 0x898 VA: 0x898
	public static short Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x899 Offset: 0x899 VA: 0x899
	private static short Parse(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0x44F Offset: 0x44F VA: 0x44F Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x276 Offset: 0x276 VA: 0x276 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x277 Offset: 0x277 VA: 0x277 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x278 Offset: 0x278 VA: 0x278 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x279 Offset: 0x279 VA: 0x279 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x27A Offset: 0x27A VA: 0x27A Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x27B Offset: 0x27B VA: 0x27B Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x27C Offset: 0x27C VA: 0x27C Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x27D Offset: 0x27D VA: 0x27D Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xC Offset: 0xC VA: 0xC Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD Offset: 0xD VA: 0xD Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x16E Offset: 0x16E VA: 0x16E Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x89A Offset: 0x89A VA: 0x89A Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3
[Serializable]
public struct Int32 : IComparable, IFormattable, IConvertible, IComparable<int>, IEquatable<int> // TypeDefIndex: 200
{
	// Fields
	internal int m_value; // 0x0
	public const int MaxValue = 2147483647;
	public const int MinValue = -2147483648;

	// Methods

	// RVA: 0x27E Offset: 0x27E VA: 0x27E Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x27F Offset: 0x27F VA: 0x27F Slot: 23
	public int CompareTo(int value) { }

	// RVA: 0x280 Offset: 0x280 VA: 0x280 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x281 Offset: 0x281 VA: 0x281 Slot: 24
	public bool Equals(int obj) { }

	// RVA: 0x450 Offset: 0x450 VA: 0x450 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x451 Offset: 0x451 VA: 0x451 Slot: 3
	public override string ToString() { }

	// RVA: 0x282 Offset: 0x282 VA: 0x282
	public string ToString(string format) { }

	// RVA: 0x283 Offset: 0x283 VA: 0x283 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x89B Offset: 0x89B VA: 0x89B Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x452 Offset: 0x452 VA: 0x452
	public static int Parse(string s) { }

	// RVA: 0x284 Offset: 0x284 VA: 0x284
	public static int Parse(string s, IFormatProvider provider) { }

	// RVA: 0x89C Offset: 0x89C VA: 0x89C
	public static int Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x285 Offset: 0x285 VA: 0x285
	public static bool TryParse(string s, out int result) { }

	// RVA: 0x8F Offset: 0x8F VA: 0x8F
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result) { }

	// RVA: 0x453 Offset: 0x453 VA: 0x453 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x286 Offset: 0x286 VA: 0x286 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x287 Offset: 0x287 VA: 0x287 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x288 Offset: 0x288 VA: 0x288 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x289 Offset: 0x289 VA: 0x289 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x28A Offset: 0x28A VA: 0x28A Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x28B Offset: 0x28B VA: 0x28B Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x28C Offset: 0x28C VA: 0x28C Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x28D Offset: 0x28D VA: 0x28D Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD Offset: 0xD VA: 0xD Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xE Offset: 0xE VA: 0xE Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x16F Offset: 0x16F VA: 0x16F Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x89D Offset: 0x89D VA: 0x89D Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4
[Serializable]
public struct Int64 : IComparable, IFormattable, IConvertible, IComparable<long>, IEquatable<long> // TypeDefIndex: 201
{
	// Fields
	internal long m_value; // 0x0
	public const long MaxValue = 9223372036854775807;
	public const long MinValue = -9223372036854775808;

	// Methods

	// RVA: 0x28E Offset: 0x28E VA: 0x28E Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 23
	public int CompareTo(long value) { }

	// RVA: 0x28F Offset: 0x28F VA: 0x28F Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8 Slot: 24
	public bool Equals(long obj) { }

	// RVA: 0x454 Offset: 0x454 VA: 0x454 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x455 Offset: 0x455 VA: 0x455 Slot: 3
	public override string ToString() { }

	// RVA: 0x290 Offset: 0x290 VA: 0x290 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x89E Offset: 0x89E VA: 0x89E Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	public static long Parse(string s) { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	public static long Parse(string s, IFormatProvider provider) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static long Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x291 Offset: 0x291 VA: 0x291
	public static bool TryParse(string s, out long result) { }

	// RVA: 0x456 Offset: 0x456 VA: 0x456 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x292 Offset: 0x292 VA: 0x292 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x293 Offset: 0x293 VA: 0x293 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x294 Offset: 0x294 VA: 0x294 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x295 Offset: 0x295 VA: 0x295 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x296 Offset: 0x296 VA: 0x296 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x297 Offset: 0x297 VA: 0x297 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x298 Offset: 0x298 VA: 0x298 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x299 Offset: 0x299 VA: 0x299 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xE Offset: 0xE VA: 0xE Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xF Offset: 0xF VA: 0xF Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x170 Offset: 0x170 VA: 0x170 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x89F Offset: 0x89F VA: 0x89F Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5
[Serializable]
public class InvalidCastException : SystemException // TypeDefIndex: 202
{
	// Methods

	// RVA: 0x3AA Offset: 0x3AA VA: 0x3AA
	public void .ctor() { }

	// RVA: 0x203 Offset: 0x203 VA: 0x203
	public void .ctor(string message) { }

	// RVA: 0x173 Offset: 0x173 VA: 0x173
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6
[Serializable]
public class InvalidOperationException : SystemException // TypeDefIndex: 203
{
	// Methods

	// RVA: 0x3AB Offset: 0x3AB VA: 0x3AB
	public void .ctor() { }

	// RVA: 0x204 Offset: 0x204 VA: 0x204
	public void .ctor(string message) { }

	// RVA: 0x174 Offset: 0x174 VA: 0x174
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x175 Offset: 0x175 VA: 0x175
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
[Serializable]
public sealed class InvalidProgramException : SystemException // TypeDefIndex: 204
{
	// Methods

	// RVA: 0x3AC Offset: 0x3AC VA: 0x3AC
	public void .ctor() { }

	// RVA: 0x205 Offset: 0x205 VA: 0x205
	public void .ctor(string message) { }

	// RVA: 0x176 Offset: 0x176 VA: 0x176
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8
[Serializable]
public class InvalidTimeZoneException : Exception // TypeDefIndex: 205
{
	// Methods

	// RVA: 0x206 Offset: 0x206 VA: 0x206
	public void .ctor(string message) { }

	// RVA: 0x177 Offset: 0x177 VA: 0x177
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x178 Offset: 0x178 VA: 0x178
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3AD Offset: 0x3AD VA: 0x3AD
	public void .ctor() { }
}

// Namespace: System
public static class Math // TypeDefIndex: 206
{
	// Fields
	private static double doubleRoundLimit; // 0x0
	private const int maxRoundingDigits = 15;
	private static double[] roundPower10Double; // 0x8
	public const double PI = 3.14159265358979;
	public const double E = 2.71828182845905;

	// Methods

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double Ceiling(double a) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static double Cos(double d) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static double Floor(double d) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static double Sin(double a) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static double Round(double a) { }

	[ReliabilityContractAttribute] // RVA: 0x661 Offset: 0x661 VA: 0x661
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static double Sqrt(double d) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static double Log(double d) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double Pow(double x, double y) { }

	// RVA: 0x468 Offset: 0x468 VA: 0x468
	public static int Abs(int value) { }

	// RVA: 0x469 Offset: 0x469 VA: 0x469
	private static int AbsHelper(int value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float Abs(float value) { }

	[ReliabilityContractAttribute] // RVA: 0x662 Offset: 0x662 VA: 0x662
	// RVA: 0x2A3 Offset: 0x2A3 VA: 0x2A3
	public static int Max(int val1, int val2) { }

	[ReliabilityContractAttribute] // RVA: 0x663 Offset: 0x663 VA: 0x663
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float Max(float val1, float val2) { }

	[ReliabilityContractAttribute] // RVA: 0x664 Offset: 0x664 VA: 0x664
	// RVA: 0x2A4 Offset: 0x2A4 VA: 0x2A4
	public static int Min(int val1, int val2) { }

	[ReliabilityContractAttribute] // RVA: 0x665 Offset: 0x665 VA: 0x665
	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static float Min(float val1, float val2) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static double Log(double a, double newBase) { }

	// RVA: 0xEAC Offset: 0xEAC VA: 0xEAC
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9
[Serializable]
public class MemberAccessException : SystemException // TypeDefIndex: 207
{
	// Methods

	// RVA: 0x3B3 Offset: 0x3B3 VA: 0x3B3
	public void .ctor() { }

	// RVA: 0x20D Offset: 0x20D VA: 0x20D
	public void .ctor(string message) { }

	// RVA: 0x17B Offset: 0x17B VA: 0x17B
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2FA Offset: 0x2FA VA: 0x2FA
[Serializable]
public class MethodAccessException : MemberAccessException // TypeDefIndex: 208
{
	// Methods

	// RVA: 0x3B4 Offset: 0x3B4 VA: 0x3B4
	public void .ctor() { }

	// RVA: 0x20E Offset: 0x20E VA: 0x20E
	public void .ctor(string message) { }

	// RVA: 0x17C Offset: 0x17C VA: 0x17C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2FB Offset: 0x2FB VA: 0x2FB
[Serializable]
public class MissingFieldException : MissingMemberException, ISerializable // TypeDefIndex: 209
{
	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x3B5 Offset: 0x3B5 VA: 0x3B5
	public void .ctor() { }

	// RVA: 0x20F Offset: 0x20F VA: 0x20F
	public void .ctor(string message) { }

	// RVA: 0x17D Offset: 0x17D VA: 0x17D
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x46A Offset: 0x46A VA: 0x46A Slot: 5
	public override string get_Message() { }

	// RVA: 0x17E Offset: 0x17E VA: 0x17E
	public void .ctor(string className, string fieldName) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2FC Offset: 0x2FC VA: 0x2FC
[Serializable]
public class MissingMemberException : MemberAccessException, ISerializable // TypeDefIndex: 210
{
	// Fields
	protected string ClassName; // 0x44
	protected string MemberName; // 0x48
	protected byte[] Signature; // 0x4C

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x3B6 Offset: 0x3B6 VA: 0x3B6
	public void .ctor() { }

	// RVA: 0x210 Offset: 0x210 VA: 0x210
	public void .ctor(string message) { }

	// RVA: 0x17F Offset: 0x17F VA: 0x17F
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x46B Offset: 0x46B VA: 0x46B Slot: 5
	public override string get_Message() { }

	// RVA: 0x46C Offset: 0x46C VA: 0x46C
	internal static string FormatSignature(byte[] signature) { }

	// RVA: 0x180 Offset: 0x180 VA: 0x180 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2FD Offset: 0x2FD VA: 0x2FD
[Serializable]
public class MissingMethodException : MissingMemberException, ISerializable // TypeDefIndex: 211
{
	// Fields
	private string signature; // 0x50

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x3B7 Offset: 0x3B7 VA: 0x3B7
	public void .ctor() { }

	// RVA: 0x211 Offset: 0x211 VA: 0x211
	public void .ctor(string message) { }

	// RVA: 0x181 Offset: 0x181 VA: 0x181
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x46D Offset: 0x46D VA: 0x46D Slot: 5
	public override string get_Message() { }

	// RVA: 0x182 Offset: 0x182 VA: 0x182
	public void .ctor(string className, string methodName) { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40
	private void .ctor(string className, string methodName, string signature, string message) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2FE Offset: 0x2FE VA: 0x2FE
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 212
{
	// Methods

	// RVA: 0x3BB Offset: 0x3BB VA: 0x3BB
	public void .ctor() { }

	// RVA: 0x213 Offset: 0x213 VA: 0x213
	public void .ctor(string message) { }

	// RVA: 0x185 Offset: 0x185 VA: 0x185
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x2FF Offset: 0x2FF VA: 0x2FF
[AttributeUsageAttribute] // RVA: 0x2FF Offset: 0x2FF VA: 0x2FF
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 213
{
	// Methods

	// RVA: 0x3BC Offset: 0x3BC VA: 0x3BC
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x300 Offset: 0x300 VA: 0x300
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 214
{
	// Methods

	// RVA: 0x3BD Offset: 0x3BD VA: 0x3BD
	public void .ctor() { }

	// RVA: 0x214 Offset: 0x214 VA: 0x214
	public void .ctor(string message) { }

	// RVA: 0x186 Offset: 0x186 VA: 0x186
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x301 Offset: 0x301 VA: 0x301
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 215
{
	// Methods

	// RVA: 0x3BE Offset: 0x3BE VA: 0x3BE
	public void .ctor() { }

	// RVA: 0x215 Offset: 0x215 VA: 0x215
	public void .ctor(string message) { }

	// RVA: 0x187 Offset: 0x187 VA: 0x187
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x302 Offset: 0x302 VA: 0x302
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 216
{
	// Methods

	// RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0
	public void .ctor() { }

	// RVA: 0x216 Offset: 0x216 VA: 0x216
	public void .ctor(string message) { }

	// RVA: 0x189 Offset: 0x189 VA: 0x189
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[FriendAccessAllowedAttribute] // RVA: 0x303 Offset: 0x303 VA: 0x303
internal class Number // TypeDefIndex: 217
{
	// Methods

	// RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
	public static bool NumberBufferToDecimal(byte* number, ref Decimal value) { }

	// RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
	internal static bool NumberBufferToDouble(byte* number, ref double value) { }

	// RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5
	public static string FormatDecimal(Decimal value, string format, NumberFormatInfo info) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static string FormatDouble(double value, string format, NumberFormatInfo info) { }

	// RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6
	public static string FormatInt32(int value, string format, NumberFormatInfo info) { }

	// RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7
	public static string FormatUInt32(uint value, string format, NumberFormatInfo info) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static string FormatInt64(long value, string format, NumberFormatInfo info) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static string FormatUInt64(ulong value, string format, NumberFormatInfo info) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static string FormatSingle(float value, string format, NumberFormatInfo info) { }

	// RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
	private static bool HexNumberToInt32(ref Number.NumberBuffer number, ref int value) { }

	// RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
	private static bool HexNumberToInt64(ref Number.NumberBuffer number, ref long value) { }

	// RVA: 0x2AF Offset: 0x2AF VA: 0x2AF
	private static bool HexNumberToUInt32(ref Number.NumberBuffer number, ref uint value) { }

	// RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
	private static bool HexNumberToUInt64(ref Number.NumberBuffer number, ref ulong value) { }

	// RVA: 0x47D Offset: 0x47D VA: 0x47D
	private static bool IsWhite(char ch) { }

	// RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1
	private static bool NumberToInt32(ref Number.NumberBuffer number, ref int value) { }

	// RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2
	private static bool NumberToInt64(ref Number.NumberBuffer number, ref long value) { }

	// RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3
	private static bool NumberToUInt32(ref Number.NumberBuffer number, ref uint value) { }

	// RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4
	private static bool NumberToUInt64(ref Number.NumberBuffer number, ref ulong value) { }

	// RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
	private static char* MatchChars(char* p, string str) { }

	// RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6
	private static char* MatchChars(char* p, char* str) { }

	// RVA: 0x8B Offset: 0x8B VA: 0x8B
	internal static Decimal ParseDecimal(string value, NumberStyles options, NumberFormatInfo numfmt) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	internal static double ParseDouble(string value, NumberStyles options, NumberFormatInfo numfmt) { }

	// RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8
	internal static int ParseInt32(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	internal static long ParseInt64(string value, NumberStyles options, NumberFormatInfo numfmt) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	private static bool ParseNumber(ref char* str, NumberStyles options, ref Number.NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static float ParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt) { }

	// RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9
	internal static uint ParseUInt32(string value, NumberStyles options, NumberFormatInfo numfmt) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	internal static ulong ParseUInt64(string value, NumberStyles options, NumberFormatInfo numfmt) { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41
	private static void StringToNumber(string str, NumberStyles options, ref Number.NumberBuffer number, NumberFormatInfo info, bool parseDecimal) { }

	// RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
	private static bool TrailingZeros(string s, int index) { }

	// RVA: 0x90 Offset: 0x90 VA: 0x90
	internal static bool TryParseInt32(string s, NumberStyles style, NumberFormatInfo info, out int result) { }

	// RVA: 0x91 Offset: 0x91 VA: 0x91
	internal static bool TryParseInt64(string s, NumberStyles style, NumberFormatInfo info, out long result) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39
	internal static bool TryStringToNumber(string str, NumberStyles options, ref Number.NumberBuffer number, NumberFormatInfo numfmt, bool parseDecimal) { }

	[FriendAccessAllowedAttribute] // RVA: 0x666 Offset: 0x666 VA: 0x666
	// RVA: 0x33 Offset: 0x33 VA: 0x33
	internal static bool TryStringToNumber(string str, NumberStyles options, ref Number.NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal) { }
}

// Namespace: 
[FriendAccessAllowedAttribute] // RVA: 0x304 Offset: 0x304 VA: 0x304
internal struct Number.NumberBuffer // TypeDefIndex: 218
{
	// Fields
	public static readonly int NumberBufferBytes; // 0x0
	private byte* baseAddress; // 0x0
	public char* digits; // 0x4
	public int precision; // 0x8
	public int scale; // 0xC
	public bool sign; // 0x10

	// Methods

	// RVA: 0x217 Offset: 0x217 VA: 0x217
	public void .ctor(byte* stackBuffer) { }

	// RVA: 0x47E Offset: 0x47E VA: 0x47E
	public byte* PackForNative() { }

	// RVA: 0xEAF Offset: 0xEAF VA: 0xEAF
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x305 Offset: 0x305 VA: 0x305
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 219
{
	// Fields
	private string objectName; // 0x44

	// Properties
	public override string Message { get; }
	public string ObjectName { get; }

	// Methods

	// RVA: 0x3C7 Offset: 0x3C7 VA: 0x3C7
	private void .ctor() { }

	// RVA: 0x228 Offset: 0x228 VA: 0x228
	public void .ctor(string objectName) { }

	// RVA: 0x190 Offset: 0x190 VA: 0x190
	public void .ctor(string objectName, string message) { }

	// RVA: 0x496 Offset: 0x496 VA: 0x496 Slot: 5
	public override string get_Message() { }

	// RVA: 0x497 Offset: 0x497 VA: 0x497
	public string get_ObjectName() { }

	// RVA: 0x191 Offset: 0x191 VA: 0x191
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x192 Offset: 0x192 VA: 0x192 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x306 Offset: 0x306 VA: 0x306
[ComVisibleAttribute] // RVA: 0x306 Offset: 0x306 VA: 0x306
[Serializable]
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 220
{
	// Fields
	private string _message; // 0x8
	private bool _error; // 0xC

	// Methods

	// RVA: 0x3C8 Offset: 0x3C8 VA: 0x3C8
	public void .ctor() { }

	// RVA: 0x229 Offset: 0x229 VA: 0x229
	public void .ctor(string message) { }

	// RVA: 0x193 Offset: 0x193 VA: 0x193
	public void .ctor(string message, bool error) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x307 Offset: 0x307 VA: 0x307
[Serializable]
public class OperationCanceledException : SystemException // TypeDefIndex: 221
{
	// Fields
	private CancellationToken _cancellationToken; // 0x44

	// Properties
	public CancellationToken CancellationToken { get; set; }

	// Methods

	// RVA: 0x49D Offset: 0x49D VA: 0x49D
	public CancellationToken get_CancellationToken() { }

	// RVA: 0x22A Offset: 0x22A VA: 0x22A
	private void set_CancellationToken(CancellationToken value) { }

	// RVA: 0x3C9 Offset: 0x3C9 VA: 0x3C9
	public void .ctor() { }

	// RVA: 0x22B Offset: 0x22B VA: 0x22B
	public void .ctor(string message) { }

	// RVA: 0x197 Offset: 0x197 VA: 0x197
	public void .ctor(string message, CancellationToken token) { }

	// RVA: 0x198 Offset: 0x198 VA: 0x198
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x308 Offset: 0x308 VA: 0x308
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 222
{
	// Methods

	// RVA: 0x3CA Offset: 0x3CA VA: 0x3CA
	public void .ctor() { }

	// RVA: 0x22D Offset: 0x22D VA: 0x22D
	public void .ctor(string message) { }

	// RVA: 0x199 Offset: 0x199 VA: 0x199
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x309 Offset: 0x309 VA: 0x309
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 223
{
	// Methods

	// RVA: 0x3CB Offset: 0x3CB VA: 0x3CB
	public void .ctor() { }

	// RVA: 0x22E Offset: 0x22E VA: 0x22E
	public void .ctor(string message) { }

	// RVA: 0x19A Offset: 0x19A VA: 0x19A
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x19B Offset: 0x19B VA: 0x19B
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x30A Offset: 0x30A VA: 0x30A
[ComVisibleAttribute] // RVA: 0x30A Offset: 0x30A VA: 0x30A
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 224
{
	// Methods

	// RVA: 0x3CC Offset: 0x3CC VA: 0x3CC
	public void .ctor() { }
}

// Namespace: System
[DefaultMemberAttribute] // RVA: 0x30B Offset: 0x30B VA: 0x30B
internal struct ParamsArray // TypeDefIndex: 225
{
	// Fields
	private static readonly object[] oneArgArray; // 0x0
	private static readonly object[] twoArgArray; // 0x4
	private static readonly object[] threeArgArray; // 0x8
	private readonly object arg0; // 0x0
	private readonly object arg1; // 0x4
	private readonly object arg2; // 0x8
	private readonly object[] args; // 0xC

	// Properties
	public int Length { get; }
	public object Item { get; }

	// Methods

	// RVA: 0x233 Offset: 0x233 VA: 0x233
	public void .ctor(object arg0) { }

	// RVA: 0x19D Offset: 0x19D VA: 0x19D
	public void .ctor(object arg0, object arg1) { }

	// RVA: 0x92 Offset: 0x92 VA: 0x92
	public void .ctor(object arg0, object arg1, object arg2) { }

	// RVA: 0x234 Offset: 0x234 VA: 0x234
	public void .ctor(object[] args) { }

	// RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
	public int get_Length() { }

	// RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2
	public object get_Item(int index) { }

	// RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
	private object GetAtSlow(int index) { }

	// RVA: 0xEB1 Offset: 0xEB1 VA: 0xEB1
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x30C Offset: 0x30C VA: 0x30C
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 226
{
	// Methods

	// RVA: 0x3D0 Offset: 0x3D0 VA: 0x3D0
	public void .ctor() { }

	// RVA: 0x19E Offset: 0x19E VA: 0x19E
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x30D Offset: 0x30D VA: 0x30D
[Serializable]
public class Random // TypeDefIndex: 227
{
	// Fields
	private int inext; // 0x8
	private int inextp; // 0xC
	private int[] SeedArray; // 0x10

	// Methods

	// RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1
	public void .ctor() { }

	// RVA: 0x236 Offset: 0x236 VA: 0x236
	public void .ctor(int Seed) { }

	// RVA: 0xD Offset: 0xD VA: 0xD Slot: 4
	protected virtual double Sample() { }

	// RVA: 0x4A9 Offset: 0x4A9 VA: 0x4A9
	private int InternalSample() { }

	// RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6 Slot: 5
	public virtual int Next(int maxValue) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x30E Offset: 0x30E VA: 0x30E
[Serializable]
public class RankException : SystemException // TypeDefIndex: 228
{
	// Methods

	// RVA: 0x3D2 Offset: 0x3D2 VA: 0x3D2
	public void .ctor() { }

	// RVA: 0x237 Offset: 0x237 VA: 0x237
	public void .ctor(string message) { }

	// RVA: 0x19F Offset: 0x19F VA: 0x19F
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
internal enum TypeNameFormatFlags // TypeDefIndex: 229
{
	// Fields
	public int value__; // 0x0
	public const TypeNameFormatFlags FormatBasic = 0;
	public const TypeNameFormatFlags FormatNamespace = 1;
	public const TypeNameFormatFlags FormatFullInst = 2;
	public const TypeNameFormatFlags FormatAssembly = 4;
	public const TypeNameFormatFlags FormatSignature = 8;
	public const TypeNameFormatFlags FormatNoVersion = 16;
	public const TypeNameFormatFlags FormatAngleBrackets = 64;
	public const TypeNameFormatFlags FormatStubInfo = 128;
	public const TypeNameFormatFlags FormatGenericParam = 256;
	public const TypeNameFormatFlags FormatSerialization = 259;
}

// Namespace: System
internal enum TypeNameKind // TypeDefIndex: 230
{
	// Fields
	public int value__; // 0x0
	public const TypeNameKind Name = 0;
	public const TypeNameKind ToString = 1;
	public const TypeNameKind SerializationName = 2;
	public const TypeNameKind FullName = 3;
}

// Namespace: System
[Serializable]
internal class RuntimeType : TypeInfo, ISerializable, ICloneable // TypeDefIndex: 231
{
	// Fields
	internal static readonly RuntimeType ValueType; // 0x0
	internal static readonly RuntimeType EnumType; // 0x4
	private static readonly RuntimeType ObjectType; // 0x8
	private static readonly RuntimeType StringType; // 0xC
	private static readonly RuntimeType DelegateType; // 0x10
	private static Type[] s_SICtorParamTypes; // 0x14
	private const BindingFlags MemberBindingMask = 255;
	private const BindingFlags InvocationMask = 65280;
	private const BindingFlags BinderNonCreateInstance = 15616;
	private const BindingFlags BinderGetSetProperty = 12288;
	private const BindingFlags BinderSetInvokeProperty = 8448;
	private const BindingFlags BinderGetSetField = 3072;
	private const BindingFlags BinderSetInvokeField = 2304;
	private const BindingFlags BinderNonFieldGetSet = 16773888;
	private const BindingFlags ClassicBindingMask = 61696;
	private static RuntimeType s_typedRef; // 0x18
	private MonoTypeInfo type_info; // 0xC
	internal object GenericCache; // 0x10
	private RuntimeConstructorInfo m_serializationCtor; // 0x14

	// Properties
	public override Module Module { get; }
	public override Assembly Assembly { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type BaseType { get; }
	public override Type UnderlyingSystemType { get; }
	public override bool IsEnum { get; }
	public override GenericParameterAttributes GenericParameterAttributes { get; }
	internal override bool IsSzArray { get; }
	public override bool IsGenericTypeDefinition { get; }
	public override bool IsGenericParameter { get; }
	public override int GenericParameterPosition { get; }
	public override bool IsGenericType { get; }
	public override MemberTypes MemberType { get; }
	public override Type ReflectedType { get; }
	public override int MetadataToken { get; }
	public override bool ContainsGenericParameters { get; }
	public override MethodBase DeclaringMethod { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override string FullName { get; }

	// Methods

	// RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0
	private static void ThrowIfTypeNeverValidGenericArgument(RuntimeType type) { }

	// RVA: 0x39D Offset: 0x39D VA: 0x39D
	internal static void SanityCheckGenericArguments(RuntimeType[] genericArguments, RuntimeType[] genericParamters) { }

	// RVA: 0x25B Offset: 0x25B VA: 0x25B
	private static void SplitName(string fullname, out string name, out string ns) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	private static void FilterHelper(BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, out bool prefixLookup, out bool ignoreCase, out RuntimeType.MemberListType listType) { }

	// RVA: 0xCA Offset: 0xCA VA: 0xCA
	private static void FilterHelper(BindingFlags bindingFlags, ref string name, out bool ignoreCase, out RuntimeType.MemberListType listType) { }

	// RVA: 0x955 Offset: 0x955 VA: 0x955
	private static bool FilterApplyPrefixLookup(MemberInfo memberInfo, string name, bool ignoreCase) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	private static bool FilterApplyBase(MemberInfo memberInfo, BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup) { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C
	private static bool FilterApplyType(Type type, BindingFlags bindingFlags, string name, bool prefixLookup, string ns) { }

	// RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	private static bool FilterApplyMethodInfo(RuntimeMethodInfo method, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes) { }

	// RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	private static bool FilterApplyConstructorInfo(RuntimeConstructorInfo constructor, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	private static bool FilterApplyMethodBase(MethodBase methodBase, BindingFlags methodFlags, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes) { }

	// RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1
	internal void .ctor() { }

	// RVA: 0x7BC Offset: 0x7BC VA: 0x7BC
	internal bool IsSpecialSerializableType() { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	private RuntimeType.ListBuilder<MethodInfo> GetMethodCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	private RuntimeType.ListBuilder<ConstructorInfo> GetConstructorCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	private RuntimeType.ListBuilder<PropertyInfo> GetPropertyCandidates(string name, BindingFlags bindingAttr, Type[] types, bool allowPrefixLookup) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58
	private RuntimeType.ListBuilder<EventInfo> GetEventCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup) { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59
	private RuntimeType.ListBuilder<FieldInfo> GetFieldCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup) { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A
	private RuntimeType.ListBuilder<Type> GetNestedTypeCandidates(string fullname, BindingFlags bindingAttr, bool allowPrefixLookup) { }

	// RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1 Slot: 41
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	[ComVisibleAttribute] // RVA: 0x667 Offset: 0x667 VA: 0x667
	// RVA: 0x3D2 Offset: 0x3D2 VA: 0x3D2 Slot: 34
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x3D3 Offset: 0x3D3 VA: 0x3D3 Slot: 51
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x3D4 Offset: 0x3D4 VA: 0x3D4 Slot: 43
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16 Slot: 39
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46 Slot: 33
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17 Slot: 50
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x956 Offset: 0x956 VA: 0x956 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x957 Offset: 0x957 VA: 0x957 Slot: 42
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x958 Offset: 0x958 VA: 0x958 Slot: 54
	public override Type GetNestedType(string fullname, BindingFlags bindingAttr) { }

	// RVA: 0xB7 Offset: 0xB7 VA: 0xB7 Slot: 57
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr) { }

	// RVA: 0x7BD Offset: 0x7BD VA: 0x7BD Slot: 15
	public override Module get_Module() { }

	// RVA: 0x7BE Offset: 0x7BE VA: 0x7BE
	internal RuntimeModule GetRuntimeModule() { }

	// RVA: 0x7BF Offset: 0x7BF VA: 0x7BF Slot: 23
	public override Assembly get_Assembly() { }

	// RVA: 0x7C0 Offset: 0x7C0 VA: 0x7C0
	internal RuntimeAssembly GetRuntimeAssembly() { }

	// RVA: 0x7C1 Offset: 0x7C1 VA: 0x7C1 Slot: 24
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x3D5 Offset: 0x3D5 VA: 0x3D5 Slot: 107
	public override bool IsInstanceOfType(object o) { }

	[ComVisibleAttribute] // RVA: 0x668 Offset: 0x668 VA: 0x668
	// RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6 Slot: 106
	public override bool IsSubclassOf(Type type) { }

	// RVA: 0x3D7 Offset: 0x3D7 VA: 0x3D7 Slot: 108
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x3D8 Offset: 0x3D8 VA: 0x3D8 Slot: 109
	public override bool IsEquivalentTo(Type other) { }

	// RVA: 0x7C2 Offset: 0x7C2 VA: 0x7C2 Slot: 29
	public override Type get_BaseType() { }

	// RVA: 0x7C3 Offset: 0x7C3 VA: 0x7C3
	private RuntimeType GetBaseType() { }

	// RVA: 0x7C4 Offset: 0x7C4 VA: 0x7C4 Slot: 105
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x7C5 Offset: 0x7C5 VA: 0x7C5 Slot: 88
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x7C6 Offset: 0x7C6 VA: 0x7C6 Slot: 95
	protected override bool IsContextfulImpl() { }

	// RVA: 0x7C7 Offset: 0x7C7 VA: 0x7C7 Slot: 90
	protected override bool IsByRefImpl() { }

	// RVA: 0x7C8 Offset: 0x7C8 VA: 0x7C8 Slot: 92
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x7C9 Offset: 0x7C9 VA: 0x7C9 Slot: 91
	protected override bool IsPointerImpl() { }

	// RVA: 0x7CA Offset: 0x7CA VA: 0x7CA Slot: 93
	protected override bool IsCOMObjectImpl() { }

	// RVA: 0x7CB Offset: 0x7CB VA: 0x7CB Slot: 87
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x7CC Offset: 0x7CC VA: 0x7CC Slot: 70
	public override bool get_IsEnum() { }

	// RVA: 0x7CD Offset: 0x7CD VA: 0x7CD Slot: 100
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x7CE Offset: 0x7CE VA: 0x7CE Slot: 59
	public override GenericParameterAttributes get_GenericParameterAttributes() { }

	// RVA: 0x7CF Offset: 0x7CF VA: 0x7CF Slot: 73
	internal override bool get_IsSzArray() { }

	// RVA: 0x7D0 Offset: 0x7D0 VA: 0x7D0 Slot: 89
	protected override bool IsArrayImpl() { }

	// RVA: 0x7D1 Offset: 0x7D1 VA: 0x7D1 Slot: 28
	public override int GetArrayRank() { }

	// RVA: 0x7D2 Offset: 0x7D2 VA: 0x7D2 Slot: 97
	public override Type GetElementType() { }

	// RVA: 0x7D3 Offset: 0x7D3 VA: 0x7D3 Slot: 101
	public override string[] GetEnumNames() { }

	// RVA: 0x7D4 Offset: 0x7D4 VA: 0x7D4 Slot: 102
	public override Type GetEnumUnderlyingType() { }

	// RVA: 0x3D9 Offset: 0x3D9 VA: 0x3D9 Slot: 103
	public override bool IsEnumDefined(object value) { }

	// RVA: 0x3DA Offset: 0x3DA VA: 0x3DA Slot: 104
	public override string GetEnumName(object value) { }

	// RVA: 0x7D5 Offset: 0x7D5 VA: 0x7D5
	internal RuntimeType[] GetGenericArgumentsInternal() { }

	// RVA: 0x7D6 Offset: 0x7D6 VA: 0x7D6 Slot: 98
	public override Type[] GetGenericArguments() { }

	// RVA: 0x3DB Offset: 0x3DB VA: 0x3DB Slot: 94
	public override Type MakeGenericType(Type[] instantiation) { }

	// RVA: 0x7D7 Offset: 0x7D7 VA: 0x7D7 Slot: 75
	public override bool get_IsGenericTypeDefinition() { }

	// RVA: 0x7D8 Offset: 0x7D8 VA: 0x7D8 Slot: 76
	public override bool get_IsGenericParameter() { }

	// RVA: 0x7D9 Offset: 0x7D9 VA: 0x7D9 Slot: 77
	public override int get_GenericParameterPosition() { }

	// RVA: 0x7DA Offset: 0x7DA VA: 0x7DA Slot: 99
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x7DB Offset: 0x7DB VA: 0x7DB Slot: 74
	public override bool get_IsGenericType() { }

	[DebuggerHiddenAttribute] // RVA: 0x669 Offset: 0x669 VA: 0x669
	[DebuggerStepThroughAttribute] // RVA: 0x669 Offset: 0x669 VA: 0x669
	// RVA: 0xA Offset: 0xA VA: 0xA Slot: 22
	public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams) { }

	// RVA: 0x3DC Offset: 0x3DC VA: 0x3DC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x3DD Offset: 0x3DD VA: 0x3DD
	public static bool op_Equality(RuntimeType left, RuntimeType right) { }

	// RVA: 0x3DE Offset: 0x3DE VA: 0x3DE
	public static bool op_Inequality(RuntimeType left, RuntimeType right) { }

	// RVA: 0x7DC Offset: 0x7DC VA: 0x7DC Slot: 114
	public object Clone() { }

	// RVA: 0x25C Offset: 0x25C VA: 0x25C Slot: 113
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3DF Offset: 0x3DF VA: 0x3DF Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x959 Offset: 0x959 VA: 0x959 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x95A Offset: 0x95A VA: 0x95A Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x7DD Offset: 0x7DD VA: 0x7DD Slot: 13
	public override IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0 Slot: 110
	internal override string FormatTypeName(bool serialization) { }

	// RVA: 0x7DE Offset: 0x7DE VA: 0x7DE Slot: 6
	public override MemberTypes get_MemberType() { }

	// RVA: 0x7DF Offset: 0x7DF VA: 0x7DF Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x7E0 Offset: 0x7E0 VA: 0x7E0 Slot: 14
	public override int get_MetadataToken() { }

	// RVA: 0x4F2 Offset: 0x4F2 VA: 0x4F2
	private void CreateInstanceCheckThis() { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	internal object CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, ref StackCrawlMark stackMark) { }

	[DebuggerHiddenAttribute] // RVA: 0x66A Offset: 0x66A VA: 0x66A
	[DebuggerStepThroughAttribute] // RVA: 0x66A Offset: 0x66A VA: 0x66A
	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	internal object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark) { }

	// RVA: 0x7E1 Offset: 0x7E1 VA: 0x7E1
	internal MonoCMethod GetDefaultConstructor() { }

	// RVA: 0x7E2 Offset: 0x7E2 VA: 0x7E2
	private string GetDefaultMemberName() { }

	// RVA: 0x7E3 Offset: 0x7E3 VA: 0x7E3
	internal RuntimeConstructorInfo GetSerializationCtor() { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F
	internal object CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark) { }

	// RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
	private object CreateInstanceMono(bool nonPublic) { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50
	internal object CheckValue(object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr) { }

	// RVA: 0x95B Offset: 0x95B VA: 0x95B
	private object TryConvertToType(object value, ref bool failed) { }

	// RVA: 0x3E2 Offset: 0x3E2 VA: 0x3E2
	private static object IsConvertibleToPrimitiveType(object value, Type targetType) { }

	// RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
	private string GetCachedName(TypeNameKind kind) { }

	// RVA: 0x3E4 Offset: 0x3E4 VA: 0x3E4
	private Type make_array_type(int rank) { }

	// RVA: 0x7E4 Offset: 0x7E4 VA: 0x7E4 Slot: 19
	public override Type MakeArrayType() { }

	// RVA: 0x3E5 Offset: 0x3E5 VA: 0x3E5 Slot: 20
	public override Type MakeArrayType(int rank) { }

	// RVA: 0x7E5 Offset: 0x7E5 VA: 0x7E5
	private Type make_byref_type() { }

	// RVA: 0x7E6 Offset: 0x7E6 VA: 0x7E6 Slot: 18
	public override Type MakeByRefType() { }

	// RVA: 0x7E7 Offset: 0x7E7 VA: 0x7E7
	private static Type MakePointerType(Type type) { }

	// RVA: 0x7E8 Offset: 0x7E8 VA: 0x7E8 Slot: 17
	public override Type MakePointerType() { }

	// RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9 Slot: 78
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x7EA Offset: 0x7EA VA: 0x7EA Slot: 79
	public override Type[] GetGenericParameterConstraints() { }

	// RVA: 0x3E6 Offset: 0x3E6 VA: 0x3E6
	internal static object CreateInstanceForAnotherGenericParameter(Type genericType, RuntimeType genericArgument) { }

	// RVA: 0x3E7 Offset: 0x3E7 VA: 0x3E7
	private static Type MakeGenericType(Type gt, Type[] types) { }

	// RVA: 0xB8 Offset: 0xB8 VA: 0xB8
	internal IntPtr GetMethodsByName_native(IntPtr namePtr, BindingFlags bindingAttr, bool ignoreCase) { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51
	internal RuntimeMethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, RuntimeType reflectedType) { }

	// RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	private IntPtr GetPropertiesByName_native(IntPtr name, BindingFlags bindingAttr, bool icase) { }

	// RVA: 0x3E8 Offset: 0x3E8 VA: 0x3E8
	private IntPtr GetConstructors_native(BindingFlags bindingAttr) { }

	// RVA: 0x95C Offset: 0x95C VA: 0x95C
	private RuntimeConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, RuntimeType reflectedType) { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52
	private RuntimePropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, RuntimeType reflectedType) { }

	// RVA: 0x7EB Offset: 0x7EB VA: 0x7EB Slot: 21
	protected override TypeCode GetTypeCodeImpl() { }

	// RVA: 0x7EC Offset: 0x7EC VA: 0x7EC
	private static TypeCode GetTypeCodeImplInternal(Type type) { }

	// RVA: 0x7ED Offset: 0x7ED VA: 0x7ED Slot: 3
	public override string ToString() { }

	// RVA: 0x7EE Offset: 0x7EE VA: 0x7EE
	private bool IsGenericCOMObjectImpl() { }

	// RVA: 0x7EF Offset: 0x7EF VA: 0x7EF
	private static object CreateInstanceInternal(Type type) { }

	// RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0 Slot: 16
	public override MethodBase get_DeclaringMethod() { }

	// RVA: 0x95D Offset: 0x95D VA: 0x95D
	internal string getFullName(bool full_name, bool assembly_qualified) { }

	// RVA: 0x3E9 Offset: 0x3E9 VA: 0x3E9
	private Type[] GetGenericArgumentsInternal(bool runtimeArray) { }

	// RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1
	private GenericParameterAttributes GetGenericParameterAttributes() { }

	// RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2
	private int GetGenericParameterPosition() { }

	// RVA: 0x95E Offset: 0x95E VA: 0x95E
	private IntPtr GetEvents_native(IntPtr name, BindingFlags bindingAttr) { }

	// RVA: 0x95F Offset: 0x95F VA: 0x95F
	private IntPtr GetFields_native(IntPtr name, BindingFlags bindingAttr) { }

	// RVA: 0xBA Offset: 0xBA VA: 0xBA
	private RuntimeFieldInfo[] GetFields_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType) { }

	// RVA: 0xBB Offset: 0xBB VA: 0xBB
	private RuntimeEventInfo[] GetEvents_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType) { }

	// RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3 Slot: 44
	public override Type[] GetInterfaces() { }

	// RVA: 0x960 Offset: 0x960 VA: 0x960
	private IntPtr GetNestedTypes_native(IntPtr name, BindingFlags bindingAttr) { }

	// RVA: 0x961 Offset: 0x961 VA: 0x961
	private RuntimeType[] GetNestedTypes_internal(string displayName, BindingFlags bindingAttr) { }

	// RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4 Slot: 27
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6 Slot: 7
	public override string get_Name() { }

	// RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7 Slot: 26
	public override string get_Namespace() { }

	// RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9 Slot: 25
	public override string get_FullName() { }

	// RVA: 0xEE4 Offset: 0xEE4 VA: 0xEE4
	private static void .cctor() { }
}

// Namespace: 
internal enum RuntimeType.MemberListType // TypeDefIndex: 232
{
	// Fields
	public int value__; // 0x0
	public const RuntimeType.MemberListType All = 0;
	public const RuntimeType.MemberListType CaseSensitive = 1;
	public const RuntimeType.MemberListType CaseInsensitive = 2;
	public const RuntimeType.MemberListType HandleToInfo = 3;
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x30F Offset: 0x30F VA: 0x30F
private struct RuntimeType.ListBuilder<T> // TypeDefIndex: 233
{
	// Fields
	private T[] _items; // 0xFFFFFFFF
	private T _item; // 0xFFFFFFFF
	private int _count; // 0xFFFFFFFF
	private int _capacity; // 0xFFFFFFFF

	// Properties
	public T Item { get; }
	public int Count { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7EA Offset: 0x7EA VA: 0x7EA
	|-RuntimeType.ListBuilder<object>..ctor
	|-RuntimeType.ListBuilder<ConstructorInfo>..ctor
	|-RuntimeType.ListBuilder<EventInfo>..ctor
	|-RuntimeType.ListBuilder<FieldInfo>..ctor
	|-RuntimeType.ListBuilder<MethodInfo>..ctor
	|-RuntimeType.ListBuilder<PropertyInfo>..ctor
	|-RuntimeType.ListBuilder<Type>..ctor
	*/

	// RVA: -1 Offset: -1
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x645 Offset: 0x645 VA: 0x645
	|-RuntimeType.ListBuilder<object>.get_Item
	|-RuntimeType.ListBuilder<ConstructorInfo>.get_Item
	|-RuntimeType.ListBuilder<MethodInfo>.get_Item
	|-RuntimeType.ListBuilder<PropertyInfo>.get_Item
	*/

	// RVA: -1 Offset: -1
	public T[] ToArray() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD1A Offset: 0xD1A VA: 0xD1A
	|-RuntimeType.ListBuilder<object>.ToArray
	|-RuntimeType.ListBuilder<ConstructorInfo>.ToArray
	|-RuntimeType.ListBuilder<EventInfo>.ToArray
	|-RuntimeType.ListBuilder<FieldInfo>.ToArray
	|-RuntimeType.ListBuilder<MethodInfo>.ToArray
	|-RuntimeType.ListBuilder<PropertyInfo>.ToArray
	|-RuntimeType.ListBuilder<Type>.ToArray
	*/

	// RVA: -1 Offset: -1
	public void CopyTo(object[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3EA Offset: 0x3EA VA: 0x3EA
	|-RuntimeType.ListBuilder<object>.CopyTo
	|-RuntimeType.ListBuilder<ConstructorInfo>.CopyTo
	|-RuntimeType.ListBuilder<EventInfo>.CopyTo
	|-RuntimeType.ListBuilder<FieldInfo>.CopyTo
	|-RuntimeType.ListBuilder<MethodInfo>.CopyTo
	|-RuntimeType.ListBuilder<PropertyInfo>.CopyTo
	|-RuntimeType.ListBuilder<Type>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD19 Offset: 0xD19 VA: 0xD19
	|-RuntimeType.ListBuilder<object>.get_Count
	|-RuntimeType.ListBuilder<ConstructorInfo>.get_Count
	|-RuntimeType.ListBuilder<EventInfo>.get_Count
	|-RuntimeType.ListBuilder<FieldInfo>.get_Count
	|-RuntimeType.ListBuilder<MethodInfo>.get_Count
	|-RuntimeType.ListBuilder<PropertyInfo>.get_Count
	|-RuntimeType.ListBuilder<Type>.get_Count
	*/

	// RVA: -1 Offset: -1
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7EB Offset: 0x7EB VA: 0x7EB
	|-RuntimeType.ListBuilder<object>.Add
	|-RuntimeType.ListBuilder<ConstructorInfo>.Add
	|-RuntimeType.ListBuilder<EventInfo>.Add
	|-RuntimeType.ListBuilder<FieldInfo>.Add
	|-RuntimeType.ListBuilder<MethodInfo>.Add
	|-RuntimeType.ListBuilder<PropertyInfo>.Add
	|-RuntimeType.ListBuilder<Type>.Add
	*/
}

// Namespace: System
[Serializable]
internal class ReflectionOnlyType : RuntimeType // TypeDefIndex: 234
{
	// Properties
	public override RuntimeTypeHandle TypeHandle { get; }

	// Methods

	// RVA: 0x400 Offset: 0x400 VA: 0x400
	private void .ctor() { }

	// RVA: 0x5ED Offset: 0x5ED VA: 0x5ED Slot: 24
	public override RuntimeTypeHandle get_TypeHandle() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x310 Offset: 0x310 VA: 0x310
[CLSCompliantAttribute] // RVA: 0x310 Offset: 0x310 VA: 0x310
[Serializable]
public struct SByte : IComparable, IFormattable, IConvertible, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 235
{
	// Fields
	private sbyte m_value; // 0x0
	public const sbyte MaxValue = 127;
	public const sbyte MinValue = -128;

	// Methods

	// RVA: 0x3F0 Offset: 0x3F0 VA: 0x3F0 Slot: 4
	public int CompareTo(object obj) { }

	// RVA: 0x3F1 Offset: 0x3F1 VA: 0x3F1 Slot: 23
	public int CompareTo(sbyte value) { }

	// RVA: 0x3F2 Offset: 0x3F2 VA: 0x3F2 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x3F3 Offset: 0x3F3 VA: 0x3F3 Slot: 24
	public bool Equals(sbyte obj) { }

	// RVA: 0x814 Offset: 0x814 VA: 0x814 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x815 Offset: 0x815 VA: 0x815 Slot: 3
	public override string ToString() { }

	// RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x962 Offset: 0x962 VA: 0x962 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x963 Offset: 0x963 VA: 0x963
	private string ToString(string format, NumberFormatInfo info) { }

	[CLSCompliantAttribute] // RVA: 0x66B Offset: 0x66B VA: 0x66B
	// RVA: 0x3F5 Offset: 0x3F5 VA: 0x3F5
	public static sbyte Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x66C Offset: 0x66C VA: 0x66C
	// RVA: 0x964 Offset: 0x964 VA: 0x964
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x965 Offset: 0x965 VA: 0x965
	private static sbyte Parse(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0x816 Offset: 0x816 VA: 0x816 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x3F6 Offset: 0x3F6 VA: 0x3F6 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x3F7 Offset: 0x3F7 VA: 0x3F7 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x3F8 Offset: 0x3F8 VA: 0x3F8 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x3F9 Offset: 0x3F9 VA: 0x3F9 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x3FA Offset: 0x3FA VA: 0x3FA Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x3FB Offset: 0x3FB VA: 0x3FB Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x3FC Offset: 0x3FC VA: 0x3FC Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x3FD Offset: 0x3FD VA: 0x3FD Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x3F Offset: 0x3F VA: 0x3F Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x25F Offset: 0x25F VA: 0x25F Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x966 Offset: 0x966 VA: 0x966 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x311 Offset: 0x311 VA: 0x311
[ComVisibleAttribute] // RVA: 0x311 Offset: 0x311 VA: 0x311
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 236
{
	// Methods

	// RVA: 0x50A Offset: 0x50A VA: 0x50A
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x312 Offset: 0x312 VA: 0x312
[Serializable]
public struct Single : IComparable, IFormattable, IConvertible, IComparable<float>, IEquatable<float> // TypeDefIndex: 237
{
	// Fields
	internal float m_value; // 0x0
	public const float MinValue = -3.402823E+38;
	public const float Epsilon = 1.401298E-45;
	public const float MaxValue = 3.402823E+38;
	public const float PositiveInfinity = ∞;
	public const float NegativeInfinity = -∞;
	public const float NaN = NaN;

	// Methods

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static bool IsInfinity(float f) { }

	[ReliabilityContractAttribute] // RVA: 0x66D Offset: 0x66D VA: 0x66D
	// RVA: 0xA Offset: 0xA VA: 0xA
	public static bool IsNaN(float f) { }

	// RVA: 0x401 Offset: 0x401 VA: 0x401 Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 23
	public int CompareTo(float value) { }

	// RVA: 0x402 Offset: 0x402 VA: 0x402 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 24
	public bool Equals(float obj) { }

	// RVA: 0x830 Offset: 0x830 VA: 0x830 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x831 Offset: 0x831 VA: 0x831 Slot: 3
	public override string ToString() { }

	// RVA: 0x403 Offset: 0x403 VA: 0x403 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x967 Offset: 0x967 VA: 0x967 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public static float Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static float Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private static float Parse(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0x832 Offset: 0x832 VA: 0x832 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x404 Offset: 0x404 VA: 0x404 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x405 Offset: 0x405 VA: 0x405 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x406 Offset: 0x406 VA: 0x406 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x407 Offset: 0x407 VA: 0x407 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x408 Offset: 0x408 VA: 0x408 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x409 Offset: 0x409 VA: 0x409 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x40A Offset: 0x40A VA: 0x40A Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x40B Offset: 0x40B VA: 0x40B Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x26F Offset: 0x26F VA: 0x26F Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x968 Offset: 0x968 VA: 0x968 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x313 Offset: 0x313 VA: 0x313
[Serializable]
public sealed class StackOverflowException : SystemException // TypeDefIndex: 238
{
	// Methods

	// RVA: 0x50B Offset: 0x50B VA: 0x50B
	public void .ctor() { }

	// RVA: 0x3AF Offset: 0x3AF VA: 0x3AF
	public void .ctor(string message) { }

	// RVA: 0x270 Offset: 0x270 VA: 0x270
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[DefaultMemberAttribute] // RVA: 0x314 Offset: 0x314 VA: 0x314
[ComVisibleAttribute] // RVA: 0x314 Offset: 0x314 VA: 0x314
[Serializable]
public sealed class String : IComparable, ICloneable, IConvertible, IEnumerable, IComparable<string>, IEnumerable<char>, IEquatable<string> // TypeDefIndex: 239
{
	// Fields
	private int m_stringLength; // 0x8
	private char m_firstChar; // 0xC
	private const int TrimHead = 0;
	private const int TrimTail = 1;
	private const int TrimBoth = 2;
	public static readonly string Empty; // 0x0
	private const int charPtrAlignConst = 1;
	private const int alignConst = 3;

	// Properties
	public char Chars { get; }
	public int Length { get; }

	// Methods

	// RVA: 0x40C Offset: 0x40C VA: 0x40C
	public static string Join(string separator, string[] value) { }

	// RVA: 0xBC Offset: 0xBC VA: 0xBC
	public static string Join(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0x40D Offset: 0x40D VA: 0x40D
	private static int CompareOrdinalIgnoreCaseHelper(string strA, string strB) { }

	[ReliabilityContractAttribute] // RVA: 0x66E Offset: 0x66E VA: 0x66E
	// RVA: 0x40E Offset: 0x40E VA: 0x40E
	private static bool EqualsHelper(string strA, string strB) { }

	// RVA: 0x40F Offset: 0x40F VA: 0x40F
	private static int CompareOrdinalHelper(string strA, string strB) { }

	[ReliabilityContractAttribute] // RVA: 0x66F Offset: 0x66F VA: 0x66F
	// RVA: 0x410 Offset: 0x410 VA: 0x410 Slot: 0
	public override bool Equals(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0x670 Offset: 0x670 VA: 0x670
	// RVA: 0x411 Offset: 0x411 VA: 0x411 Slot: 26
	public bool Equals(string value) { }

	// RVA: 0x969 Offset: 0x969 VA: 0x969
	public bool Equals(string value, StringComparison comparisonType) { }

	// RVA: 0x412 Offset: 0x412 VA: 0x412
	public static bool Equals(string a, string b) { }

	// RVA: 0x96A Offset: 0x96A VA: 0x96A
	public static bool Equals(string a, string b, StringComparison comparisonType) { }

	// RVA: 0x413 Offset: 0x413 VA: 0x413
	public static bool op_Equality(string a, string b) { }

	// RVA: 0x414 Offset: 0x414 VA: 0x414
	public static bool op_Inequality(string a, string b) { }

	// RVA: 0x415 Offset: 0x415 VA: 0x415
	public char get_Chars(int index) { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }

	// RVA: 0x833 Offset: 0x833 VA: 0x833
	public char[] ToCharArray() { }

	// RVA: 0x834 Offset: 0x834 VA: 0x834
	public static bool IsNullOrEmpty(string value) { }

	// RVA: 0x835 Offset: 0x835 VA: 0x835
	public static bool IsNullOrWhiteSpace(string value) { }

	[ReliabilityContractAttribute] // RVA: 0x671 Offset: 0x671 VA: 0x671
	// RVA: 0x836 Offset: 0x836 VA: 0x836 Slot: 2
	public override int GetHashCode() { }

	[ReliabilityContractAttribute] // RVA: 0x672 Offset: 0x672 VA: 0x672
	// RVA: 0x837 Offset: 0x837 VA: 0x837
	internal int GetLegacyNonRandomizedHashCode() { }

	// RVA: 0x416 Offset: 0x416 VA: 0x416
	public string[] Split(char[] separator) { }

	[ComVisibleAttribute] // RVA: 0x673 Offset: 0x673 VA: 0x673
	// RVA: 0xBD Offset: 0xBD VA: 0xBD
	internal string[] SplitInternal(char[] separator, int count, StringSplitOptions options) { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53
	private string[] InternalSplitKeepEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54
	private string[] InternalSplitOmitEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count) { }

	// RVA: 0x96B Offset: 0x96B VA: 0x96B
	private int MakeSeparatorList(char[] separator, ref int[] sepList) { }

	// RVA: 0x417 Offset: 0x417 VA: 0x417
	public string Substring(int startIndex) { }

	// RVA: 0x96C Offset: 0x96C VA: 0x96C
	public string Substring(int startIndex, int length) { }

	// RVA: 0x96D Offset: 0x96D VA: 0x96D
	private string InternalSubString(int startIndex, int length) { }

	// RVA: 0x418 Offset: 0x418 VA: 0x418
	public string Trim(char[] trimChars) { }

	// RVA: 0x419 Offset: 0x419 VA: 0x419
	public string TrimEnd(char[] trimChars) { }

	[CLSCompliantAttribute] // RVA: 0x674 Offset: 0x674 VA: 0x674
	// RVA: 0x3B0 Offset: 0x3B0 VA: 0x3B0
	public void .ctor(char* value) { }

	[CLSCompliantAttribute] // RVA: 0x675 Offset: 0x675 VA: 0x675
	// RVA: 0xCE Offset: 0xCE VA: 0xCE
	public void .ctor(char* value, int startIndex, int length) { }

	[CLSCompliantAttribute] // RVA: 0x676 Offset: 0x676 VA: 0x676
	// RVA: 0x5C Offset: 0x5C VA: 0x5C
	public void .ctor(sbyte* value, int startIndex, int length, Encoding enc) { }

	// RVA: 0x96E Offset: 0x96E VA: 0x96E
	internal static string CreateStringFromEncoding(byte* bytes, int byteLength, Encoding encoding) { }

	// RVA: 0x41A Offset: 0x41A VA: 0x41A
	public string Normalize(NormalizationForm normalizationForm) { }

	// RVA: 0x838 Offset: 0x838 VA: 0x838
	internal static string FastAllocateString(int length) { }

	// RVA: 0x271 Offset: 0x271 VA: 0x271
	private static void FillStringChecked(string dest, int destPos, string src) { }

	// RVA: 0xCF Offset: 0xCF VA: 0xCF
	public void .ctor(char[] value, int startIndex, int length) { }

	// RVA: 0x3B1 Offset: 0x3B1 VA: 0x3B1
	public void .ctor(char[] value) { }

	// RVA: 0x272 Offset: 0x272 VA: 0x272
	internal static void wstrcpy(char* dmem, char* smem, int charCount) { }

	// RVA: 0x41B Offset: 0x41B VA: 0x41B
	private string CtorCharArray(char[] value) { }

	// RVA: 0xBE Offset: 0xBE VA: 0xBE
	private string CtorCharArrayStartLength(char[] value, int startIndex, int length) { }

	// RVA: 0x839 Offset: 0x839 VA: 0x839
	private static int wcslen(char* ptr) { }

	// RVA: 0x41C Offset: 0x41C VA: 0x41C
	private string CtorCharPtr(char* ptr) { }

	// RVA: 0xBF Offset: 0xBF VA: 0xBF
	private string CtorCharPtrStartLength(char* ptr, int startIndex, int length) { }

	// RVA: 0x273 Offset: 0x273 VA: 0x273
	public void .ctor(char c, int count) { }

	// RVA: 0x96F Offset: 0x96F VA: 0x96F
	public static int Compare(string strA, string strB, StringComparison comparisonType) { }

	// RVA: 0xC0 Offset: 0xC0 VA: 0xC0
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55
	public static int Compare(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options) { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType) { }

	// RVA: 0x41D Offset: 0x41D VA: 0x41D Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x41E Offset: 0x41E VA: 0x41E Slot: 24
	public int CompareTo(string strB) { }

	// RVA: 0x41F Offset: 0x41F VA: 0x41F
	public static int CompareOrdinal(string strA, string strB) { }

	// RVA: 0x420 Offset: 0x420 VA: 0x420
	public bool Contains(string value) { }

	// RVA: 0x421 Offset: 0x421 VA: 0x421
	public bool EndsWith(string value) { }

	[ComVisibleAttribute] // RVA: 0x677 Offset: 0x677 VA: 0x677
	// RVA: 0x970 Offset: 0x970 VA: 0x970
	public bool EndsWith(string value, StringComparison comparisonType) { }

	// RVA: 0x422 Offset: 0x422 VA: 0x422
	internal bool EndsWith(char value) { }

	// RVA: 0x423 Offset: 0x423 VA: 0x423
	public int IndexOf(char value) { }

	// RVA: 0x971 Offset: 0x971 VA: 0x971
	public int IndexOf(char value, int startIndex) { }

	// RVA: 0x424 Offset: 0x424 VA: 0x424
	public int IndexOfAny(char[] anyOf) { }

	// RVA: 0x972 Offset: 0x972 VA: 0x972
	public int IndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0x425 Offset: 0x425 VA: 0x425
	public int IndexOf(string value) { }

	// RVA: 0x973 Offset: 0x973 VA: 0x973
	public int IndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0x426 Offset: 0x426 VA: 0x426
	public int LastIndexOf(char value) { }

	// RVA: 0x974 Offset: 0x974 VA: 0x974
	public int LastIndexOf(char value, int startIndex) { }

	// RVA: 0x427 Offset: 0x427 VA: 0x427
	public int LastIndexOfAny(char[] anyOf) { }

	// RVA: 0x975 Offset: 0x975 VA: 0x975
	public int LastIndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0x976 Offset: 0x976 VA: 0x976
	public int LastIndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57
	public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0x428 Offset: 0x428 VA: 0x428
	public bool StartsWith(string value) { }

	[ComVisibleAttribute] // RVA: 0x678 Offset: 0x678 VA: 0x678
	// RVA: 0x977 Offset: 0x977 VA: 0x977
	public bool StartsWith(string value, StringComparison comparisonType) { }

	// RVA: 0x83A Offset: 0x83A VA: 0x83A
	public string ToLower() { }

	// RVA: 0x429 Offset: 0x429 VA: 0x429
	public string ToLower(CultureInfo culture) { }

	// RVA: 0x83B Offset: 0x83B VA: 0x83B
	public string ToLowerInvariant() { }

	// RVA: 0x42A Offset: 0x42A VA: 0x42A
	public string ToUpper(CultureInfo culture) { }

	// RVA: 0x83C Offset: 0x83C VA: 0x83C
	public string ToUpperInvariant() { }

	// RVA: 0x83D Offset: 0x83D VA: 0x83D Slot: 3
	public override string ToString() { }

	// RVA: 0x42B Offset: 0x42B VA: 0x42B Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x83E Offset: 0x83E VA: 0x83E Slot: 5
	public object Clone() { }

	// RVA: 0x83F Offset: 0x83F VA: 0x83F
	private static bool IsBOMWhitespace(char c) { }

	// RVA: 0x840 Offset: 0x840 VA: 0x840
	public string Trim() { }

	// RVA: 0x42C Offset: 0x42C VA: 0x42C
	private string TrimHelper(int trimType) { }

	// RVA: 0x978 Offset: 0x978 VA: 0x978
	private string TrimHelper(char[] trimChars, int trimType) { }

	// RVA: 0x979 Offset: 0x979 VA: 0x979
	private string CreateTrimmedString(int start, int end) { }

	// RVA: 0x97A Offset: 0x97A VA: 0x97A
	public string Insert(int startIndex, string value) { }

	// RVA: 0x97B Offset: 0x97B VA: 0x97B
	public string Replace(char oldChar, char newChar) { }

	// RVA: 0x97C Offset: 0x97C VA: 0x97C
	public string Replace(string oldValue, string newValue) { }

	// RVA: 0x97D Offset: 0x97D VA: 0x97D
	public string Remove(int startIndex, int count) { }

	// RVA: 0x42D Offset: 0x42D VA: 0x42D
	public static string Format(string format, object arg0) { }

	// RVA: 0x97E Offset: 0x97E VA: 0x97E
	public static string Format(string format, object arg0, object arg1) { }

	// RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	public static string Format(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x42E Offset: 0x42E VA: 0x42E
	public static string Format(string format, object[] args) { }

	// RVA: 0x97F Offset: 0x97F VA: 0x97F
	public static string Format(IFormatProvider provider, string format, object arg0) { }

	// RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	public static string Format(IFormatProvider provider, string format, object arg0, object arg1) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58
	public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x980 Offset: 0x980 VA: 0x980
	public static string Format(IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x981 Offset: 0x981 VA: 0x981
	private static string FormatHelper(IFormatProvider provider, string format, ParamsArray args) { }

	// RVA: 0x841 Offset: 0x841 VA: 0x841
	public static string Copy(string str) { }

	// RVA: 0x42F Offset: 0x42F VA: 0x42F
	public static string Concat(object arg0, object arg1) { }

	// RVA: 0x982 Offset: 0x982 VA: 0x982
	public static string Concat(object arg0, object arg1, object arg2) { }

	// RVA: 0x842 Offset: 0x842 VA: 0x842
	public static string Concat(object[] args) { }

	// RVA: 0x430 Offset: 0x430 VA: 0x430
	public static string Concat(string str0, string str1) { }

	// RVA: 0x983 Offset: 0x983 VA: 0x983
	public static string Concat(string str0, string str1, string str2) { }

	// RVA: 0xC3 Offset: 0xC3 VA: 0xC3
	public static string Concat(string str0, string str1, string str2, string str3) { }

	// RVA: 0x431 Offset: 0x431 VA: 0x431
	private static string ConcatArray(string[] values, int totalLength) { }

	// RVA: 0x843 Offset: 0x843 VA: 0x843
	public static string Concat(string[] values) { }

	// RVA: 0x844 Offset: 0x844 VA: 0x844 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x432 Offset: 0x432 VA: 0x432 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x433 Offset: 0x433 VA: 0x433 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x434 Offset: 0x434 VA: 0x434 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x435 Offset: 0x435 VA: 0x435 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x436 Offset: 0x436 VA: 0x436 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x437 Offset: 0x437 VA: 0x437 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x438 Offset: 0x438 VA: 0x438 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x439 Offset: 0x439 VA: 0x439 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x274 Offset: 0x274 VA: 0x274 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x984 Offset: 0x984 VA: 0x984 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }

	// RVA: 0x845 Offset: 0x845 VA: 0x845 Slot: 25
	private IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator() { }

	// RVA: 0x846 Offset: 0x846 VA: 0x846 Slot: 23
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x847 Offset: 0x847 VA: 0x847
	public int get_Length() { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0xC4 Offset: 0xC4 VA: 0xC4
	public int IndexOf(char value, int startIndex, int count) { }

	// RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	internal int IndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	internal int IndexOfUnchecked(string value, int startIndex, int count) { }

	// RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	public int IndexOfAny(char[] anyOf, int startIndex, int count) { }

	// RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0xC9 Offset: 0xC9 VA: 0xC9
	public int LastIndexOf(char value, int startIndex, int count) { }

	// RVA: 0xCA Offset: 0xCA VA: 0xCA
	internal int LastIndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0xCB Offset: 0xCB VA: 0xCB
	public int LastIndexOfAny(char[] anyOf, int startIndex, int count) { }

	// RVA: 0xCC Offset: 0xCC VA: 0xCC
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59
	internal static int nativeCompareOrdinalEx(string strA, int indexA, string strB, int indexB, int count) { }

	// RVA: 0x985 Offset: 0x985 VA: 0x985
	private string ReplaceInternal(char oldChar, char newChar) { }

	// RVA: 0x986 Offset: 0x986 VA: 0x986
	internal string ReplaceInternal(string oldValue, string newValue) { }

	// RVA: 0x987 Offset: 0x987 VA: 0x987
	private string ReplaceUnchecked(string oldValue, string newValue) { }

	// RVA: 0xCD Offset: 0xCD VA: 0xCD
	private string ReplaceFallback(string oldValue, string newValue, int testedCount) { }

	// RVA: 0x43A Offset: 0x43A VA: 0x43A
	internal bool StartsWithOrdinalUnchecked(string value) { }

	// RVA: 0x848 Offset: 0x848 VA: 0x848
	internal bool IsAscii() { }

	// RVA: 0x275 Offset: 0x275 VA: 0x275
	internal static void CharCopy(char* dest, char* src, int count) { }

	// RVA: 0x276 Offset: 0x276 VA: 0x276
	private static void memset(byte* dest, int val, int len) { }

	// RVA: 0x277 Offset: 0x277 VA: 0x277
	private static void memcpy(byte* dest, byte* src, int size) { }

	// RVA: 0x3B2 Offset: 0x3B2 VA: 0x3B2
	internal static void bzero(byte* dest, int len) { }

	// RVA: 0x3B3 Offset: 0x3B3 VA: 0x3B3
	internal static void bzero_aligned_1(byte* dest, int len) { }

	// RVA: 0x3B4 Offset: 0x3B4 VA: 0x3B4
	internal static void bzero_aligned_2(byte* dest, int len) { }

	// RVA: 0x3B5 Offset: 0x3B5 VA: 0x3B5
	internal static void bzero_aligned_4(byte* dest, int len) { }

	// RVA: 0x3B6 Offset: 0x3B6 VA: 0x3B6
	internal static void bzero_aligned_8(byte* dest, int len) { }

	// RVA: 0x278 Offset: 0x278 VA: 0x278
	internal static void memcpy_aligned_1(byte* dest, byte* src, int size) { }

	// RVA: 0x279 Offset: 0x279 VA: 0x279
	internal static void memcpy_aligned_2(byte* dest, byte* src, int size) { }

	// RVA: 0x27A Offset: 0x27A VA: 0x27A
	internal static void memcpy_aligned_4(byte* dest, byte* src, int size) { }

	// RVA: 0x27B Offset: 0x27B VA: 0x27B
	internal static void memcpy_aligned_8(byte* dest, byte* src, int size) { }

	// RVA: 0x43B Offset: 0x43B VA: 0x43B
	private string CreateString(sbyte* value) { }

	// RVA: 0xCE Offset: 0xCE VA: 0xCE
	private string CreateString(sbyte* value, int startIndex, int length) { }

	// RVA: 0x43C Offset: 0x43C VA: 0x43C
	private string CreateString(char* value) { }

	// RVA: 0xCF Offset: 0xCF VA: 0xCF
	private string CreateString(char* value, int startIndex, int length) { }

	// RVA: 0xD0 Offset: 0xD0 VA: 0xD0
	private string CreateString(char[] val, int startIndex, int length) { }

	// RVA: 0x43D Offset: 0x43D VA: 0x43D
	private string CreateString(char[] val) { }

	// RVA: 0x988 Offset: 0x988 VA: 0x988
	private string CreateString(char c, int count) { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A
	private string CreateString(sbyte* value, int startIndex, int length, Encoding enc) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x315 Offset: 0x315 VA: 0x315
[FlagsAttribute] // RVA: 0x315 Offset: 0x315 VA: 0x315
public enum StringSplitOptions // TypeDefIndex: 240
{
	// Fields
	public int value__; // 0x0
	public const StringSplitOptions None = 0;
	public const StringSplitOptions RemoveEmptyEntries = 1;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x316 Offset: 0x316 VA: 0x316
[Serializable]
public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 241
{
	// Fields
	private static readonly StringComparer _invariantCulture; // 0x0
	private static readonly StringComparer _invariantCultureIgnoreCase; // 0x4
	private static readonly StringComparer _ordinal; // 0x8
	private static readonly StringComparer _ordinalIgnoreCase; // 0xC

	// Properties
	public static StringComparer InvariantCultureIgnoreCase { get; }
	public static StringComparer CurrentCultureIgnoreCase { get; }
	public static StringComparer Ordinal { get; }
	public static StringComparer OrdinalIgnoreCase { get; }

	// Methods

	// RVA: 0x203 Offset: 0x203 VA: 0x203
	public static StringComparer get_InvariantCultureIgnoreCase() { }

	// RVA: 0x204 Offset: 0x204 VA: 0x204
	public static StringComparer get_CurrentCultureIgnoreCase() { }

	// RVA: 0x205 Offset: 0x205 VA: 0x205
	public static StringComparer get_Ordinal() { }

	// RVA: 0x206 Offset: 0x206 VA: 0x206
	public static StringComparer get_OrdinalIgnoreCase() { }

	// RVA: 0x989 Offset: 0x989 VA: 0x989 Slot: 4
	public int Compare(object x, object y) { }

	// RVA: 0x98A Offset: 0x98A VA: 0x98A Slot: 5
	public bool Equals(object x, object y) { }

	// RVA: 0x43E Offset: 0x43E VA: 0x43E Slot: 6
	public int GetHashCode(object obj) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int Compare(string x, string y) { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool Equals(string x, string y) { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract int GetHashCode(string obj) { }

	// RVA: 0x50C Offset: 0x50C VA: 0x50C
	protected void .ctor() { }

	// RVA: 0xEE8 Offset: 0xEE8 VA: 0xEE8
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 242
{
	// Fields
	private CompareInfo _compareInfo; // 0x8
	private bool _ignoreCase; // 0xC
	[OptionalFieldAttribute] // RVA: 0x542 Offset: 0x542 VA: 0x542
	private CompareOptions _options; // 0x10

	// Methods

	// RVA: 0xBB Offset: 0xBB VA: 0xBB
	internal void .ctor(CultureInfo culture, bool ignoreCase) { }

	// RVA: 0x82B Offset: 0x82B VA: 0x82B Slot: 10
	public override int Compare(string x, string y) { }

	// RVA: 0x82C Offset: 0x82C VA: 0x82C Slot: 11
	public override bool Equals(string x, string y) { }

	// RVA: 0x12E Offset: 0x12E VA: 0x12E Slot: 12
	public override int GetHashCode(string obj) { }

	// RVA: 0x12F Offset: 0x12F VA: 0x12F Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x243 Offset: 0x243 VA: 0x243 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 243
{
	// Fields
	private bool _ignoreCase; // 0x8

	// Methods

	// RVA: 0x22C Offset: 0x22C VA: 0x22C
	internal void .ctor(bool ignoreCase) { }

	// RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7 Slot: 10
	public override int Compare(string x, string y) { }

	// RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8 Slot: 11
	public override bool Equals(string x, string y) { }

	// RVA: 0x2BE Offset: 0x2BE VA: 0x2BE Slot: 12
	public override int GetHashCode(string obj) { }

	// RVA: 0x2BF Offset: 0x2BF VA: 0x2BF Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x49E Offset: 0x49E VA: 0x49E Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x317 Offset: 0x317 VA: 0x317
[Serializable]
public class SystemException : Exception // TypeDefIndex: 244
{
	// Methods

	// RVA: 0x50D Offset: 0x50D VA: 0x50D
	public void .ctor() { }

	// RVA: 0x3B7 Offset: 0x3B7 VA: 0x3B7
	public void .ctor(string message) { }

	// RVA: 0x27C Offset: 0x27C VA: 0x27C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x27D Offset: 0x27D VA: 0x27D
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x318 Offset: 0x318 VA: 0x318
[AttributeUsageAttribute] // RVA: 0x318 Offset: 0x318 VA: 0x318
public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 245
{
	// Methods

	// RVA: 0x4F3 Offset: 0x4F3 VA: 0x4F3
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0x319 Offset: 0x319 VA: 0x319
[ComVisibleAttribute] // RVA: 0x319 Offset: 0x319 VA: 0x319
[Serializable]
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 246
{
	// Methods

	// RVA: 0x550 Offset: 0x550 VA: 0x550
	public void .ctor() { }
}

// Namespace: System
internal enum ExceptionArgument // TypeDefIndex: 247
{
	// Fields
	public int value__; // 0x0
	public const ExceptionArgument obj = 0;
	public const ExceptionArgument dictionary = 1;
	public const ExceptionArgument dictionaryCreationThreshold = 2;
	public const ExceptionArgument array = 3;
	public const ExceptionArgument info = 4;
	public const ExceptionArgument key = 5;
	public const ExceptionArgument collection = 6;
	public const ExceptionArgument list = 7;
	public const ExceptionArgument match = 8;
	public const ExceptionArgument converter = 9;
	public const ExceptionArgument queue = 10;
	public const ExceptionArgument stack = 11;
	public const ExceptionArgument capacity = 12;
	public const ExceptionArgument index = 13;
	public const ExceptionArgument startIndex = 14;
	public const ExceptionArgument value = 15;
	public const ExceptionArgument count = 16;
	public const ExceptionArgument arrayIndex = 17;
	public const ExceptionArgument name = 18;
	public const ExceptionArgument mode = 19;
	public const ExceptionArgument item = 20;
	public const ExceptionArgument options = 21;
	public const ExceptionArgument view = 22;
	public const ExceptionArgument sourceBytesToCopy = 23;
	public const ExceptionArgument start = 24;
	public const ExceptionArgument pointer = 25;
	public const ExceptionArgument ownedMemory = 26;
	public const ExceptionArgument text = 27;
}

// Namespace: System
internal enum ExceptionResource // TypeDefIndex: 248
{
	// Fields
	public int value__; // 0x0
	public const ExceptionResource Argument_ImplementIComparable = 0;
	public const ExceptionResource Argument_InvalidType = 1;
	public const ExceptionResource Argument_InvalidArgumentForComparison = 2;
	public const ExceptionResource Argument_InvalidRegistryKeyPermissionCheck = 3;
	public const ExceptionResource ArgumentOutOfRange_NeedNonNegNum = 4;
	public const ExceptionResource Arg_ArrayPlusOffTooSmall = 5;
	public const ExceptionResource Arg_NonZeroLowerBound = 6;
	public const ExceptionResource Arg_RankMultiDimNotSupported = 7;
	public const ExceptionResource Arg_RegKeyDelHive = 8;
	public const ExceptionResource Arg_RegKeyStrLenBug = 9;
	public const ExceptionResource Arg_RegSetStrArrNull = 10;
	public const ExceptionResource Arg_RegSetMismatchedKind = 11;
	public const ExceptionResource Arg_RegSubKeyAbsent = 12;
	public const ExceptionResource Arg_RegSubKeyValueAbsent = 13;
	public const ExceptionResource Argument_AddingDuplicate = 14;
	public const ExceptionResource Serialization_InvalidOnDeser = 15;
	public const ExceptionResource Serialization_MissingKeys = 16;
	public const ExceptionResource Serialization_NullKey = 17;
	public const ExceptionResource Argument_InvalidArrayType = 18;
	public const ExceptionResource NotSupported_KeyCollectionSet = 19;
	public const ExceptionResource NotSupported_ValueCollectionSet = 20;
	public const ExceptionResource ArgumentOutOfRange_SmallCapacity = 21;
	public const ExceptionResource ArgumentOutOfRange_Index = 22;
	public const ExceptionResource Argument_InvalidOffLen = 23;
	public const ExceptionResource Argument_ItemNotExist = 24;
	public const ExceptionResource ArgumentOutOfRange_Count = 25;
	public const ExceptionResource ArgumentOutOfRange_InvalidThreshold = 26;
	public const ExceptionResource ArgumentOutOfRange_ListInsert = 27;
	public const ExceptionResource NotSupported_ReadOnlyCollection = 28;
	public const ExceptionResource InvalidOperation_CannotRemoveFromStackOrQueue = 29;
	public const ExceptionResource InvalidOperation_EmptyQueue = 30;
	public const ExceptionResource InvalidOperation_EnumOpCantHappen = 31;
	public const ExceptionResource InvalidOperation_EnumFailedVersion = 32;
	public const ExceptionResource InvalidOperation_EmptyStack = 33;
	public const ExceptionResource ArgumentOutOfRange_BiggerThanCollection = 34;
	public const ExceptionResource InvalidOperation_EnumNotStarted = 35;
	public const ExceptionResource InvalidOperation_EnumEnded = 36;
	public const ExceptionResource NotSupported_SortedListNestedWrite = 37;
	public const ExceptionResource InvalidOperation_NoValue = 38;
	public const ExceptionResource InvalidOperation_RegRemoveSubKey = 39;
	public const ExceptionResource Security_RegistryPermission = 40;
	public const ExceptionResource UnauthorizedAccess_RegistryNoWrite = 41;
	public const ExceptionResource ObjectDisposed_RegKeyClosed = 42;
	public const ExceptionResource NotSupported_InComparableType = 43;
	public const ExceptionResource Argument_InvalidRegistryOptionsCheck = 44;
	public const ExceptionResource Argument_InvalidRegistryViewCheck = 45;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x31A Offset: 0x31A VA: 0x31A
[Serializable]
public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable // TypeDefIndex: 249
{
	// Fields
	public static readonly TimeSpan Zero; // 0x0
	public static readonly TimeSpan MaxValue; // 0x8
	public static readonly TimeSpan MinValue; // 0x10
	internal long _ticks; // 0x0
	private static bool _legacyConfigChecked; // 0x18
	private static bool _legacyMode; // 0x19

	// Properties
	public long Ticks { get; }
	public int Hours { get; }
	public int Minutes { get; }
	public double TotalHours { get; }
	public double TotalMilliseconds { get; }
	public double TotalMinutes { get; }
	public double TotalSeconds { get; }
	private static bool LegacyMode { get; }

	// Methods

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	public void .ctor(long ticks) { }

	// RVA: 0xE3 Offset: 0xE3 VA: 0xE3
	public void .ctor(int hours, int minutes, int seconds) { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	public void .ctor(int days, int hours, int minutes, int seconds, int milliseconds) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E
	public long get_Ticks() { }

	// RVA: 0x93B Offset: 0x93B VA: 0x93B
	public int get_Hours() { }

	// RVA: 0x93C Offset: 0x93C VA: 0x93C
	public int get_Minutes() { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public double get_TotalHours() { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public double get_TotalMilliseconds() { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public double get_TotalMinutes() { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public double get_TotalSeconds() { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47
	public TimeSpan Add(TimeSpan ts) { }

	// RVA: 0x4AF Offset: 0x4AF VA: 0x4AF Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0 Slot: 5
	public int CompareTo(TimeSpan value) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static TimeSpan FromDays(double value) { }

	// RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2 Slot: 6
	public bool Equals(TimeSpan obj) { }

	// RVA: 0x93D Offset: 0x93D VA: 0x93D Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static TimeSpan FromHours(double value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static TimeSpan Interval(double value, int scale) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static TimeSpan FromMilliseconds(double value) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static TimeSpan FromMinutes(double value) { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F
	public TimeSpan Negate() { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static TimeSpan FromSeconds(double value) { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	public TimeSpan Subtract(TimeSpan ts) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static TimeSpan FromTicks(long value) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	internal static long TimeToTicks(int hour, int minute, int second) { }

	// RVA: 0x93E Offset: 0x93E VA: 0x93E Slot: 3
	public override string ToString() { }

	// RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3
	public string ToString(string format) { }

	// RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5 Slot: 7
	public string ToString(string format, IFormatProvider formatProvider) { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4
	public static bool op_Equality(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x4B5 Offset: 0x4B5 VA: 0x4B5
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x23F Offset: 0x23F VA: 0x23F
	private static bool GetLegacyFormatMode() { }

	// RVA: 0x240 Offset: 0x240 VA: 0x240
	private static bool get_LegacyMode() { }

	// RVA: 0xF13 Offset: 0xF13 VA: 0xF13
	private static void .cctor() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x31B Offset: 0x31B VA: 0x31B
internal enum TimeZoneInfoOptions // TypeDefIndex: 250
{
	// Fields
	public int value__; // 0x0
	public const TimeZoneInfoOptions None = 1;
	public const TimeZoneInfoOptions NoThrowOnInvalidTime = 2;
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x31C Offset: 0x31C VA: 0x31C
[Serializable]
public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback // TypeDefIndex: 251
{
	// Fields
	private TimeSpan baseUtcOffset; // 0x8
	private string daylightDisplayName; // 0x10
	private string displayName; // 0x14
	private string id; // 0x18
	private static TimeZoneInfo local; // 0x0
	private List<KeyValuePair<DateTime, TimeType>> transitions; // 0x1C
	private static bool readlinkNotFound; // 0x4
	private string standardDisplayName; // 0x20
	private bool supportsDaylightSavingTime; // 0x24
	private static TimeZoneInfo utc; // 0x8
	private static string timeZoneDirectory; // 0xC
	private TimeZoneInfo.AdjustmentRule[] adjustmentRules; // 0x28
	private static RegistryKey timeZoneKey; // 0x10
	private static RegistryKey localZoneKey; // 0x14
	private static ReadOnlyCollection<TimeZoneInfo> systemTimeZones; // 0x18

	// Properties
	public TimeSpan BaseUtcOffset { get; }
	public string DisplayName { get; }
	public string Id { get; }
	public static TimeZoneInfo Local { get; }
	public bool SupportsDaylightSavingTime { get; }
	public static TimeZoneInfo Utc { get; }
	private static string TimeZoneDirectory { get; }
	private static bool IsWindows { get; }
	private static RegistryKey TimeZoneKey { get; }
	private static RegistryKey LocalZoneKey { get; }

	// Methods

	// RVA: 0x940 Offset: 0x940 VA: 0x940
	internal static bool UtcOffsetOutOfRange(TimeSpan offset) { }

	// RVA: 0x76 Offset: 0x76 VA: 0x76
	private static List<TimeZoneInfo.AdjustmentRule> CreateAdjustmentRule(int year, out long[] data, out string[] names, string standardNameCurrentYear, string daylightNameCurrentYear) { }

	// RVA: 0x241 Offset: 0x241 VA: 0x241
	private static TimeZoneInfo CreateLocalUnity() { }

	// RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9
	internal static extern uint EnumDynamicTimeZoneInformation(uint dwIndex, out TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation) { }

	// RVA: 0x941 Offset: 0x941 VA: 0x941
	internal static extern uint GetDynamicTimeZoneInformation(out TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) { }

	// RVA: 0x942 Offset: 0x942 VA: 0x942
	internal static extern uint GetDynamicTimeZoneInformationWin32(out TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) { }

	// RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6
	internal static extern uint GetDynamicTimeZoneInformationEffectiveYears(ref TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out uint FirstYear, out uint LastYear) { }

	// RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7
	internal static extern bool GetTimeZoneInformationForYear(ushort wYear, ref TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out TimeZoneInfo.TIME_ZONE_INFORMATION ptzi) { }

	// RVA: 0x11A Offset: 0x11A VA: 0x11A
	internal static TimeZoneInfo.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, DateTime startDate, DateTime endDate, int defaultBaseUtcOffset) { }

	// RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8
	private static bool TransitionTimeFromTimeZoneInformation(TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, out TimeZoneInfo.TransitionTime transitionTime, bool readStartDate) { }

	// RVA: 0x943 Offset: 0x943 VA: 0x943
	internal static TimeZoneInfo TryCreateTimeZone(TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation) { }

	// RVA: 0x242 Offset: 0x242 VA: 0x242
	internal static TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback() { }

	// RVA: 0x243 Offset: 0x243 VA: 0x243
	internal static string GetLocalTimeZoneKeyNameWin32Fallback() { }

	// RVA: 0x944 Offset: 0x944 VA: 0x944
	internal static TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id) { }

	// RVA: 0x244 Offset: 0x244 VA: 0x244
	internal static List<TimeZoneInfo> GetSystemTimeZonesWinRTFallback() { }

	// RVA: 0x60 Offset: 0x60 VA: 0x60
	public TimeSpan get_BaseUtcOffset() { }

	// RVA: 0x945 Offset: 0x945 VA: 0x945
	public string get_DisplayName() { }

	// RVA: 0x946 Offset: 0x946 VA: 0x946
	public string get_Id() { }

	// RVA: 0x245 Offset: 0x245 VA: 0x245
	public static TimeZoneInfo get_Local() { }

	// RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9
	private static extern int readlink(string path, byte[] buffer, int buflen) { }

	// RVA: 0x947 Offset: 0x947 VA: 0x947
	private static string readlink(string path) { }

	// RVA: 0x4BA Offset: 0x4BA VA: 0x4BA
	private static bool TryGetNameFromPath(string path, out string name) { }

	// RVA: 0x246 Offset: 0x246 VA: 0x246
	private static TimeZoneInfo CreateLocal() { }

	// RVA: 0x948 Offset: 0x948 VA: 0x948
	private static TimeZoneInfo FindSystemTimeZoneByIdCore(string id) { }

	// RVA: 0x5DF Offset: 0x5DF VA: 0x5DF
	private static void GetSystemTimeZonesCore(List<TimeZoneInfo> systemTimeZones) { }

	// RVA: 0x949 Offset: 0x949 VA: 0x949
	public bool get_SupportsDaylightSavingTime() { }

	// RVA: 0x247 Offset: 0x247 VA: 0x247
	public static TimeZoneInfo get_Utc() { }

	// RVA: 0x248 Offset: 0x248 VA: 0x248
	private static string get_TimeZoneDirectory() { }

	// RVA: 0x249 Offset: 0x249 VA: 0x249
	private static bool get_IsWindows() { }

	// RVA: 0x94A Offset: 0x94A VA: 0x94A
	private static string TrimSpecial(string str) { }

	// RVA: 0x24A Offset: 0x24A VA: 0x24A
	private static RegistryKey get_TimeZoneKey() { }

	// RVA: 0x24B Offset: 0x24B VA: 0x24B
	private static RegistryKey get_LocalZoneKey() { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static bool TryAddTicks(DateTime date, long ticks, out DateTime result, DateTimeKind kind = 0) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone) { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B
	private DateTime ConvertTimeFromUtc(DateTime dateTime) { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C
	public static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo destinationTimeZone) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	internal static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfoOptions flags) { }

	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	private static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfoOptions flags) { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F
	internal static TimeSpan GetDateTimeNowUtcOffsetFromUtc(DateTime time, out bool isAmbiguousLocalDst) { }

	// RVA: 0x11B Offset: 0x11B VA: 0x11B
	public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName) { }

	// RVA: 0x73 Offset: 0x73 VA: 0x73
	public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) { }

	// RVA: 0x4BB Offset: 0x4BB VA: 0x4BB Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4BC Offset: 0x4BC VA: 0x4BC Slot: 4
	public bool Equals(TimeZoneInfo other) { }

	// RVA: 0x94B Offset: 0x94B VA: 0x94B
	public static TimeZoneInfo FindSystemTimeZoneById(string id) { }

	// RVA: 0x4BD Offset: 0x4BD VA: 0x4BD
	private static TimeZoneInfo FindSystemTimeZoneByFileName(string id, string filepath) { }

	// RVA: 0x4BE Offset: 0x4BE VA: 0x4BE
	private static TimeZoneInfo FromRegistryKey(string id, RegistryKey key) { }

	// RVA: 0xE5 Offset: 0xE5 VA: 0xE5
	private static void ParseRegTzi(List<TimeZoneInfo.AdjustmentRule> adjustmentRules, int start_year, int end_year, byte[] buffer) { }

	// RVA: 0x94C Offset: 0x94C VA: 0x94C
	public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules() { }

	// RVA: 0x94D Offset: 0x94D VA: 0x94D Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2EA Offset: 0x2EA VA: 0x2EA Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x24C Offset: 0x24C VA: 0x24C
	public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones() { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50
	public TimeSpan GetUtcOffset(DateTime dateTime) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	private TimeSpan GetUtcOffset(DateTime dateTime, out bool isDST, bool forOffset = False) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private static TimeSpan GetUtcOffsetHelper(DateTime dateTime, TimeZoneInfo tz, out bool isDST, bool forOffset = False) { }

	// RVA: 0x4BF Offset: 0x4BF VA: 0x4BF
	public bool HasSameRules(TimeZoneInfo other) { }

	// RVA: 0x4C0 Offset: 0x4C0 VA: 0x4C0
	public bool IsAmbiguousTime(DateTime dateTime) { }

	// RVA: 0x4C1 Offset: 0x4C1 VA: 0x4C1
	private bool IsAmbiguousLocalDstFromUtc(DateTime dateTime) { }

	// RVA: 0x9DA Offset: 0x9DA VA: 0x9DA
	private bool IsInDST(TimeZoneInfo.AdjustmentRule rule, DateTime dateTime) { }

	// RVA: 0x11C Offset: 0x11C VA: 0x11C
	private bool IsInDSTForYear(TimeZoneInfo.AdjustmentRule rule, DateTime dateTime, int year) { }

	// RVA: 0x4C2 Offset: 0x4C2 VA: 0x4C2
	public bool IsInvalidTime(DateTime dateTime) { }

	// RVA: 0x466 Offset: 0x466 VA: 0x466 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x2EB Offset: 0x2EB VA: 0x2EB
	private static void Validate(string id, TimeSpan baseUtcOffset, TimeZoneInfo.AdjustmentRule[] adjustmentRules) { }

	// RVA: 0x94E Offset: 0x94E VA: 0x94E Slot: 3
	public override string ToString() { }

	// RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	private void .ctor(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) { }

	// RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3
	private TimeZoneInfo.AdjustmentRule GetApplicableRule(DateTime dateTime) { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77
	private bool TryGetTransitionOffset(DateTime dateTime, out TimeSpan offset, out bool isDst, bool forOffset = False) { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51
	private static DateTime TransitionPoint(TimeZoneInfo.TransitionTime transition, int year) { }

	// RVA: 0x94F Offset: 0x94F VA: 0x94F
	private static TimeZoneInfo.AdjustmentRule[] ValidateRules(List<TimeZoneInfo.AdjustmentRule> adjustmentRules) { }

	// RVA: 0x4C4 Offset: 0x4C4 VA: 0x4C4
	private static TimeZoneInfo BuildFromStream(string id, Stream stream) { }

	// RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
	private static bool ValidTZFile(byte[] buffer, int length) { }

	// RVA: 0x950 Offset: 0x950 VA: 0x950
	private static int SwapInt32(int i) { }

	// RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
	private static int ReadBigEndianInt32(byte[] buffer, int start) { }

	// RVA: 0x9DB Offset: 0x9DB VA: 0x9DB
	private static TimeZoneInfo ParseTZBuffer(string id, byte[] buffer, int length) { }

	// RVA: 0x9DC Offset: 0x9DC VA: 0x9DC
	private static Dictionary<int, string> ParseAbbreviations(byte[] buffer, int index, int count) { }

	// RVA: 0x11D Offset: 0x11D VA: 0x11D
	private static Dictionary<int, TimeType> ParseTimesTypes(byte[] buffer, int index, int count, Dictionary<int, string> abbreviations) { }

	// RVA: 0x11E Offset: 0x11E VA: 0x11E
	private static List<KeyValuePair<DateTime, TimeType>> ParseTransitions(byte[] buffer, int index, int count, Dictionary<int, TimeType> time_types) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	private static DateTime DateTimeFromUnixTime(long unix_time) { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52
	internal static TimeSpan GetLocalUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	internal TimeSpan GetUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	internal static TimeSpan GetUtcOffsetFromUtc(DateTime time, TimeZoneInfo zone, out bool isDaylightSavings, out bool isAmbiguousLocalDst) { }

	// RVA: 0x5E0 Offset: 0x5E0 VA: 0x5E0
	internal void .ctor() { }
}

// Namespace: 
[TypeForwardedFromAttribute] // RVA: 0x31D Offset: 0x31D VA: 0x31D
[Serializable]
public sealed class TimeZoneInfo.AdjustmentRule : IEquatable<TimeZoneInfo.AdjustmentRule>, ISerializable, IDeserializationCallback // TypeDefIndex: 252
{
	// Fields
	private DateTime m_dateStart; // 0x8
	private DateTime m_dateEnd; // 0x10
	private TimeSpan m_daylightDelta; // 0x18
	private TimeZoneInfo.TransitionTime m_daylightTransitionStart; // 0x20
	private TimeZoneInfo.TransitionTime m_daylightTransitionEnd; // 0x38
	private TimeSpan m_baseUtcOffsetDelta; // 0x50

	// Properties
	public DateTime DateStart { get; }
	public DateTime DateEnd { get; }
	public TimeSpan DaylightDelta { get; }
	public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }
	public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }

	// Methods

	// RVA: 0x61 Offset: 0x61 VA: 0x61
	public DateTime get_DateStart() { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62
	public DateTime get_DateEnd() { }

	// RVA: 0x63 Offset: 0x63 VA: 0x63
	public TimeSpan get_DaylightDelta() { }

	// RVA: 0x467 Offset: 0x467 VA: 0x467
	public TimeZoneInfo.TransitionTime get_DaylightTransitionStart() { }

	// RVA: 0x468 Offset: 0x468 VA: 0x468
	public TimeZoneInfo.TransitionTime get_DaylightTransitionEnd() { }

	// RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7 Slot: 4
	public bool Equals(TimeZoneInfo.AdjustmentRule other) { }

	// RVA: 0x951 Offset: 0x951 VA: 0x951 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5E2 Offset: 0x5E2 VA: 0x5E2
	private void .ctor() { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78
	public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd) { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	internal static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd, TimeSpan baseUtcOffsetDelta) { }

	// RVA: 0x6B Offset: 0x6B VA: 0x6B
	private static void ValidateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd) { }

	// RVA: 0x469 Offset: 0x469 VA: 0x469 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x2ED Offset: 0x2ED VA: 0x2ED Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2EE Offset: 0x2EE VA: 0x2EE
	private void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: 
[TypeForwardedFromAttribute] // RVA: 0x31E Offset: 0x31E VA: 0x31E
[Serializable]
public struct TimeZoneInfo.TransitionTime : IEquatable<TimeZoneInfo.TransitionTime>, ISerializable, IDeserializationCallback // TypeDefIndex: 253
{
	// Fields
	private DateTime m_timeOfDay; // 0x0
	private byte m_month; // 0x8
	private byte m_week; // 0x9
	private byte m_day; // 0xA
	private DayOfWeek m_dayOfWeek; // 0xC
	private bool m_isFixedDateRule; // 0x10

	// Properties
	public DateTime TimeOfDay { get; }
	public int Month { get; }
	public int Week { get; }
	public int Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public bool IsFixedDateRule { get; }

	// Methods

	// RVA: 0x64 Offset: 0x64 VA: 0x64
	public DateTime get_TimeOfDay() { }

	// RVA: 0x952 Offset: 0x952 VA: 0x952
	public int get_Month() { }

	// RVA: 0x953 Offset: 0x953 VA: 0x953
	public int get_Week() { }

	// RVA: 0x954 Offset: 0x954 VA: 0x954
	public int get_Day() { }

	// RVA: 0x955 Offset: 0x955 VA: 0x955
	public DayOfWeek get_DayOfWeek() { }

	// RVA: 0x956 Offset: 0x956 VA: 0x956
	public bool get_IsFixedDateRule() { }

	// RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
	public static bool op_Inequality(TimeZoneInfo.TransitionTime t1, TimeZoneInfo.TransitionTime t2) { }

	// RVA: 0x4CA Offset: 0x4CA VA: 0x4CA Slot: 4
	public bool Equals(TimeZoneInfo.TransitionTime other) { }

	// RVA: 0x957 Offset: 0x957 VA: 0x957 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xE6 Offset: 0xE6 VA: 0xE6
	public static TimeZoneInfo.TransitionTime CreateFixedDateRule(DateTime timeOfDay, int month, int day) { }

	// RVA: 0x6C Offset: 0x6C VA: 0x6C
	public static TimeZoneInfo.TransitionTime CreateFloatingDateRule(DateTime timeOfDay, int month, int week, DayOfWeek dayOfWeek) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	private static TimeZoneInfo.TransitionTime CreateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek, bool isFixedDateRule) { }

	// RVA: 0x6D Offset: 0x6D VA: 0x6D
	private static void ValidateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek) { }

	// RVA: 0x46A Offset: 0x46A VA: 0x46A Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x2EF Offset: 0x2EF VA: 0x2EF Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: 
internal struct TimeZoneInfo.SYSTEMTIME // TypeDefIndex: 254
{
	// Fields
	internal ushort wYear; // 0x0
	internal ushort wMonth; // 0x2
	internal ushort wDayOfWeek; // 0x4
	internal ushort wDay; // 0x6
	internal ushort wHour; // 0x8
	internal ushort wMinute; // 0xA
	internal ushort wSecond; // 0xC
	internal ushort wMilliseconds; // 0xE
}

// Namespace: 
internal struct TimeZoneInfo.TIME_ZONE_INFORMATION // TypeDefIndex: 255
{
	// Fields
	internal int Bias; // 0x0
	internal string StandardName; // 0x4
	internal TimeZoneInfo.SYSTEMTIME StandardDate; // 0x8
	internal int StandardBias; // 0x18
	internal string DaylightName; // 0x1C
	internal TimeZoneInfo.SYSTEMTIME DaylightDate; // 0x20
	internal int DaylightBias; // 0x30
}

// Namespace: 
internal struct TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION // TypeDefIndex: 256
{
	// Fields
	internal TimeZoneInfo.TIME_ZONE_INFORMATION TZI; // 0x0
	internal string TimeZoneKeyName; // 0x34
	internal byte DynamicDaylightTimeDisabled; // 0x38
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x31F Offset: 0x31F VA: 0x31F
[Serializable]
private sealed class TimeZoneInfo.<>c // TypeDefIndex: 257
{
	// Fields
	public static readonly TimeZoneInfo.<>c <>9; // 0x0
	public static Comparison<TimeZoneInfo.AdjustmentRule> <>9__19_0; // 0x4

	// Methods

	// RVA: 0xF15 Offset: 0xF15 VA: 0xF15
	private static void .cctor() { }

	// RVA: 0x5E1 Offset: 0x5E1 VA: 0x5E1
	public void .ctor() { }

	// RVA: 0x9DD Offset: 0x9DD VA: 0x9DD
	internal int <CreateLocalUnity>b__19_0(TimeZoneInfo.AdjustmentRule rule1, TimeZoneInfo.AdjustmentRule rule2) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0x320 Offset: 0x320 VA: 0x320
[Serializable]
public class TimeZoneNotFoundException : Exception // TypeDefIndex: 258
{
	// Methods

	// RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5E3 Offset: 0x5E3 VA: 0x5E3
	public void .ctor() { }
}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x321 Offset: 0x321 VA: 0x321
[ComVisibleAttribute] // RVA: 0x321 Offset: 0x321 VA: 0x321
[ComDefaultInterfaceAttribute] // RVA: 0x321 Offset: 0x321 VA: 0x321
[Serializable]
public abstract class Type : MemberInfo, _Type, IReflect // TypeDefIndex: 259
{
	// Fields
	public static readonly MemberFilter FilterAttribute; // 0x0
	public static readonly MemberFilter FilterName; // 0x4
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x8
	public static readonly object Missing; // 0xC
	public static readonly char Delimiter; // 0x10
	public static readonly Type[] EmptyTypes; // 0x14
	private static Binder defaultBinder; // 0x18
	private const BindingFlags DefaultLookup = 28;
	internal const BindingFlags DeclaredOnlyLookup = 62;
	internal RuntimeTypeHandle _impl; // 0x8

	// Properties
	public override MemberTypes MemberType { get; }
	public override Type DeclaringType { get; }
	public virtual MethodBase DeclaringMethod { get; }
	public override Type ReflectedType { get; }
	public static Binder DefaultBinder { get; }
	public abstract override Module Module { get; }
	public abstract Assembly Assembly { get; }
	public virtual RuntimeTypeHandle TypeHandle { get; }
	public abstract string FullName { get; }
	public abstract string Namespace { get; }
	public abstract string AssemblyQualifiedName { get; }
	public abstract Type BaseType { get; }
	public bool IsNested { get; }
	public TypeAttributes Attributes { get; }
	public virtual GenericParameterAttributes GenericParameterAttributes { get; }
	public bool IsNotPublic { get; }
	public bool IsPublic { get; }
	public bool IsNestedPublic { get; }
	public bool IsNestedAssembly { get; }
	public bool IsExplicitLayout { get; }
	public bool IsClass { get; }
	public bool IsInterface { get; }
	public bool IsValueType { get; }
	public bool IsAbstract { get; }
	public bool IsSealed { get; }
	public virtual bool IsEnum { get; }
	public virtual bool IsSerializable { get; }
	public bool IsArray { get; }
	internal virtual bool IsSzArray { get; }
	public virtual bool IsGenericType { get; }
	public virtual bool IsGenericTypeDefinition { get; }
	public virtual bool IsGenericParameter { get; }
	public virtual int GenericParameterPosition { get; }
	public virtual bool ContainsGenericParameters { get; }
	public bool IsByRef { get; }
	public bool IsPointer { get; }
	public bool IsPrimitive { get; }
	public bool IsCOMObject { get; }
	public bool HasElementType { get; }
	public bool IsContextful { get; }
	public bool IsMarshalByRef { get; }
	public abstract Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x5E4 Offset: 0x5E4 VA: 0x5E4
	protected void .ctor() { }

	// RVA: 0x958 Offset: 0x958 VA: 0x958 Slot: 6
	public override MemberTypes get_MemberType() { }

	// RVA: 0x959 Offset: 0x959 VA: 0x959 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x95A Offset: 0x95A VA: 0x95A Slot: 16
	public virtual MethodBase get_DeclaringMethod() { }

	// RVA: 0x95B Offset: 0x95B VA: 0x95B Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x120 Offset: 0x120 VA: 0x120
	public static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError) { }

	// RVA: 0x95C Offset: 0x95C VA: 0x95C Slot: 17
	public virtual Type MakePointerType() { }

	// RVA: 0x95D Offset: 0x95D VA: 0x95D Slot: 18
	public virtual Type MakeByRefType() { }

	// RVA: 0x95E Offset: 0x95E VA: 0x95E Slot: 19
	public virtual Type MakeArrayType() { }

	// RVA: 0x4CC Offset: 0x4CC VA: 0x4CC Slot: 20
	public virtual Type MakeArrayType(int rank) { }

	// RVA: 0x95F Offset: 0x95F VA: 0x95F
	public static TypeCode GetTypeCode(Type type) { }

	// RVA: 0x960 Offset: 0x960 VA: 0x960 Slot: 21
	protected virtual TypeCode GetTypeCodeImpl() { }

	// RVA: 0x24D Offset: 0x24D VA: 0x24D
	public static Binder get_DefaultBinder() { }

	// RVA: 0xF16 Offset: 0xF16 VA: 0xF16
	private static void CreateBinder() { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract override Module get_Module() { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract Assembly get_Assembly() { }

	// RVA: 0x961 Offset: 0x961 VA: 0x961 Slot: 24
	public virtual RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x962 Offset: 0x962 VA: 0x962
	public static RuntimeTypeHandle GetTypeHandle(object o) { }

	// RVA: -1 Offset: -1 Slot: 25
	public abstract string get_FullName() { }

	// RVA: -1 Offset: -1 Slot: 26
	public abstract string get_Namespace() { }

	// RVA: -1 Offset: -1 Slot: 27
	public abstract string get_AssemblyQualifiedName() { }

	// RVA: 0x963 Offset: 0x963 VA: 0x963 Slot: 28
	public virtual int GetArrayRank() { }

	// RVA: -1 Offset: -1 Slot: 29
	public abstract Type get_BaseType() { }

	[ComVisibleAttribute] // RVA: 0x679 Offset: 0x679 VA: 0x679
	// RVA: 0x75 Offset: 0x75 VA: 0x75 Slot: 30
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x67A Offset: 0x67A VA: 0x67A
	// RVA: 0x79 Offset: 0x79 VA: 0x79 Slot: 31
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x67B Offset: 0x67B VA: 0x67B
	// RVA: 0x4CD Offset: 0x4CD VA: 0x4CD Slot: 32
	public ConstructorInfo GetConstructor(Type[] types) { }

	// RVA: -1 Offset: -1 Slot: 33
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x67C Offset: 0x67C VA: 0x67C
	// RVA: -1 Offset: -1 Slot: 34
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x76 Offset: 0x76 VA: 0x76 Slot: 35
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x9DF Offset: 0x9DF VA: 0x9DF Slot: 36
	public MethodInfo GetMethod(string name, Type[] types) { }

	// RVA: 0x9E0 Offset: 0x9E0 VA: 0x9E0 Slot: 37
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr) { }

	// RVA: 0x4CE Offset: 0x4CE VA: 0x4CE Slot: 38
	public MethodInfo GetMethod(string name) { }

	// RVA: -1 Offset: -1 Slot: 39
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x964 Offset: 0x964 VA: 0x964 Slot: 40
	public MethodInfo[] GetMethods() { }

	// RVA: -1 Offset: -1 Slot: 41
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: -1 Offset: -1 Slot: 42
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: -1 Offset: -1 Slot: 43
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: -1 Offset: -1 Slot: 44
	public abstract Type[] GetInterfaces() { }

	// RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1 Slot: 45
	public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria) { }

	// RVA: -1 Offset: -1 Slot: 46
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2 Slot: 47
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr) { }

	// RVA: 0x121 Offset: 0x121 VA: 0x121 Slot: 48
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types) { }

	// RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3 Slot: 49
	public PropertyInfo GetProperty(string name, Type returnType) { }

	// RVA: -1 Offset: -1 Slot: 50
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 51
	public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x965 Offset: 0x965 VA: 0x965 Slot: 52
	public PropertyInfo[] GetProperties() { }

	// RVA: 0x4CF Offset: 0x4CF VA: 0x4CF Slot: 53
	public Type GetNestedType(string name) { }

	// RVA: -1 Offset: -1 Slot: 54
	public abstract Type GetNestedType(string name, BindingFlags bindingAttr) { }

	// RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0 Slot: 55
	public MemberInfo[] GetMember(string name) { }

	// RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4 Slot: 56
	public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr) { }

	// RVA: 0x122 Offset: 0x122 VA: 0x122 Slot: 57
	public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr) { }

	// RVA: 0x966 Offset: 0x966 VA: 0x966
	public bool get_IsNested() { }

	// RVA: 0x967 Offset: 0x967 VA: 0x967 Slot: 58
	public TypeAttributes get_Attributes() { }

	// RVA: 0x968 Offset: 0x968 VA: 0x968 Slot: 59
	public virtual GenericParameterAttributes get_GenericParameterAttributes() { }

	// RVA: 0x969 Offset: 0x969 VA: 0x969 Slot: 60
	public bool get_IsNotPublic() { }

	// RVA: 0x96A Offset: 0x96A VA: 0x96A Slot: 61
	public bool get_IsPublic() { }

	// RVA: 0x96B Offset: 0x96B VA: 0x96B Slot: 62
	public bool get_IsNestedPublic() { }

	// RVA: 0x96C Offset: 0x96C VA: 0x96C Slot: 63
	public bool get_IsNestedAssembly() { }

	// RVA: 0x96D Offset: 0x96D VA: 0x96D Slot: 64
	public bool get_IsExplicitLayout() { }

	// RVA: 0x96E Offset: 0x96E VA: 0x96E Slot: 65
	public bool get_IsClass() { }

	// RVA: 0x96F Offset: 0x96F VA: 0x96F Slot: 66
	public bool get_IsInterface() { }

	// RVA: 0x970 Offset: 0x970 VA: 0x970 Slot: 67
	public bool get_IsValueType() { }

	// RVA: 0x971 Offset: 0x971 VA: 0x971 Slot: 68
	public bool get_IsAbstract() { }

	// RVA: 0x972 Offset: 0x972 VA: 0x972 Slot: 69
	public bool get_IsSealed() { }

	// RVA: 0x973 Offset: 0x973 VA: 0x973 Slot: 70
	public virtual bool get_IsEnum() { }

	// RVA: 0x974 Offset: 0x974 VA: 0x974 Slot: 71
	public virtual bool get_IsSerializable() { }

	// RVA: 0x975 Offset: 0x975 VA: 0x975 Slot: 72
	public bool get_IsArray() { }

	// RVA: 0x976 Offset: 0x976 VA: 0x976 Slot: 73
	internal virtual bool get_IsSzArray() { }

	// RVA: 0x977 Offset: 0x977 VA: 0x977 Slot: 74
	public virtual bool get_IsGenericType() { }

	// RVA: 0x978 Offset: 0x978 VA: 0x978 Slot: 75
	public virtual bool get_IsGenericTypeDefinition() { }

	// RVA: 0x979 Offset: 0x979 VA: 0x979 Slot: 76
	public virtual bool get_IsGenericParameter() { }

	// RVA: 0x97A Offset: 0x97A VA: 0x97A Slot: 77
	public virtual int get_GenericParameterPosition() { }

	// RVA: 0x97B Offset: 0x97B VA: 0x97B Slot: 78
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x97C Offset: 0x97C VA: 0x97C Slot: 79
	public virtual Type[] GetGenericParameterConstraints() { }

	// RVA: 0x97D Offset: 0x97D VA: 0x97D Slot: 80
	public bool get_IsByRef() { }

	// RVA: 0x97E Offset: 0x97E VA: 0x97E Slot: 81
	public bool get_IsPointer() { }

	// RVA: 0x97F Offset: 0x97F VA: 0x97F Slot: 82
	public bool get_IsPrimitive() { }

	// RVA: 0x980 Offset: 0x980 VA: 0x980 Slot: 83
	public bool get_IsCOMObject() { }

	// RVA: 0x981 Offset: 0x981 VA: 0x981 Slot: 84
	public bool get_HasElementType() { }

	// RVA: 0x982 Offset: 0x982 VA: 0x982 Slot: 85
	public bool get_IsContextful() { }

	// RVA: 0x983 Offset: 0x983 VA: 0x983 Slot: 86
	public bool get_IsMarshalByRef() { }

	// RVA: 0x984 Offset: 0x984 VA: 0x984 Slot: 87
	protected virtual bool IsValueTypeImpl() { }

	// RVA: -1 Offset: -1 Slot: 88
	protected abstract TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: -1 Offset: -1 Slot: 89
	protected abstract bool IsArrayImpl() { }

	// RVA: -1 Offset: -1 Slot: 90
	protected abstract bool IsByRefImpl() { }

	// RVA: -1 Offset: -1 Slot: 91
	protected abstract bool IsPointerImpl() { }

	// RVA: -1 Offset: -1 Slot: 92
	protected abstract bool IsPrimitiveImpl() { }

	// RVA: -1 Offset: -1 Slot: 93
	protected abstract bool IsCOMObjectImpl() { }

	// RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1 Slot: 94
	public virtual Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x985 Offset: 0x985 VA: 0x985 Slot: 95
	protected virtual bool IsContextfulImpl() { }

	// RVA: 0x986 Offset: 0x986 VA: 0x986 Slot: 96
	protected virtual bool IsMarshalByRefImpl() { }

	// RVA: -1 Offset: -1 Slot: 97
	public abstract Type GetElementType() { }

	// RVA: 0x987 Offset: 0x987 VA: 0x987 Slot: 98
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x988 Offset: 0x988 VA: 0x988 Slot: 99
	public virtual Type GetGenericTypeDefinition() { }

	// RVA: -1 Offset: -1 Slot: 100
	protected abstract bool HasElementTypeImpl() { }

	// RVA: 0x989 Offset: 0x989 VA: 0x989
	internal Type GetRootElementType() { }

	// RVA: 0x98A Offset: 0x98A VA: 0x98A Slot: 101
	public virtual string[] GetEnumNames() { }

	// RVA: 0x98B Offset: 0x98B VA: 0x98B
	private Array GetEnumRawConstantValues() { }

	// RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3
	private void GetEnumData(out string[] enumNames, out Array enumValues) { }

	// RVA: 0x98C Offset: 0x98C VA: 0x98C Slot: 102
	public virtual Type GetEnumUnderlyingType() { }

	// RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2 Slot: 103
	public virtual bool IsEnumDefined(object value) { }

	// RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3 Slot: 104
	public virtual string GetEnumName(object value) { }

	// RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
	private static int BinarySearch(Array array, object value) { }

	// RVA: 0x98D Offset: 0x98D VA: 0x98D
	internal static bool IsIntegerType(Type t) { }

	// RVA: -1 Offset: -1 Slot: 105
	public abstract Type get_UnderlyingSystemType() { }

	[ComVisibleAttribute] // RVA: 0x67D Offset: 0x67D VA: 0x67D
	// RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5 Slot: 106
	public virtual bool IsSubclassOf(Type c) { }

	// RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6 Slot: 107
	public virtual bool IsInstanceOfType(object o) { }

	// RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7 Slot: 108
	public virtual bool IsAssignableFrom(Type c) { }

	// RVA: 0x4D8 Offset: 0x4D8 VA: 0x4D8 Slot: 109
	public virtual bool IsEquivalentTo(Type other) { }

	// RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9
	internal bool ImplementInterface(Type ifaceType) { }

	// RVA: 0x98E Offset: 0x98E VA: 0x98E
	internal string FormatTypeName() { }

	// RVA: 0x4DA Offset: 0x4DA VA: 0x4DA Slot: 110
	internal virtual string FormatTypeName(bool serialization) { }

	// RVA: 0x98F Offset: 0x98F VA: 0x98F Slot: 3
	public override string ToString() { }

	// RVA: 0x4DB Offset: 0x4DB VA: 0x4DB Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x4DC Offset: 0x4DC VA: 0x4DC Slot: 111
	public virtual bool Equals(Type o) { }

	// RVA: 0x4DD Offset: 0x4DD VA: 0x4DD
	public static bool op_Equality(Type left, Type right) { }

	// RVA: 0x4DE Offset: 0x4DE VA: 0x4DE
	public static bool op_Inequality(Type left, Type right) { }

	// RVA: 0x990 Offset: 0x990 VA: 0x990 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x991 Offset: 0x991 VA: 0x991 Slot: 112
	public Type GetType() { }

	// RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x992 Offset: 0x992 VA: 0x992
	public static Type GetType(string typeName) { }

	// RVA: 0x4DF Offset: 0x4DF VA: 0x4DF
	public static Type GetType(string typeName, bool throwOnError) { }

	// RVA: 0x9E6 Offset: 0x9E6 VA: 0x9E6
	public static Type GetType(string typeName, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x993 Offset: 0x993 VA: 0x993
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { }

	// RVA: 0x994 Offset: 0x994 VA: 0x994
	private static Type internal_from_handle(IntPtr handle) { }

	// RVA: 0xF17 Offset: 0xF17 VA: 0xF17
	private static void .cctor() { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x322 Offset: 0x322 VA: 0x322
[ComVisibleAttribute] // RVA: 0x322 Offset: 0x322 VA: 0x322
public struct TypedReference // TypeDefIndex: 260
{
	// Fields
	private RuntimeTypeHandle type; // 0x0
	private IntPtr Value; // 0x4
	private IntPtr Type; // 0x8

	// Properties
	internal bool IsNull { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0x67E Offset: 0x67E VA: 0x67E
	// RVA: 0x2FA Offset: 0x2FA VA: 0x2FA
	public static TypedReference MakeTypedReference(object target, FieldInfo[] flds) { }

	// RVA: 0x2FB Offset: 0x2FB VA: 0x2FB
	private static TypedReference MakeTypedReferenceInternal(object target, FieldInfo[] fields) { }

	// RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x4E4 Offset: 0x4E4 VA: 0x4E4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	internal bool get_IsNull() { }

	[CLSCompliantAttribute] // RVA: 0x67F Offset: 0x67F VA: 0x67F
	// RVA: 0x471 Offset: 0x471 VA: 0x471
	public static void SetTypedReference(TypedReference target, object value) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x323 Offset: 0x323 VA: 0x323
[Serializable]
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 261
{
	// Fields
	private string _typeName; // 0x44

	// Properties
	public string TypeName { get; }

	// Methods

	// RVA: 0x5E5 Offset: 0x5E5 VA: 0x5E5
	private void .ctor() { }

	// RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4
	public void .ctor(string fullTypeName, Exception innerException) { }

	// RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x999 Offset: 0x999 VA: 0x999
	public string get_TypeName() { }

	// RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x324 Offset: 0x324 VA: 0x324
[Serializable]
public class TypeLoadException : SystemException, ISerializable // TypeDefIndex: 262
{
	// Fields
	private string ClassName; // 0x44
	private string AssemblyName; // 0x48
	private string MessageArg; // 0x4C
	internal int ResourceId; // 0x50

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x5E6 Offset: 0x5E6 VA: 0x5E6
	public void .ctor() { }

	// RVA: 0x46C Offset: 0x46C VA: 0x46C
	public void .ctor(string message) { }

	// RVA: 0x99A Offset: 0x99A VA: 0x99A Slot: 5
	public override string get_Message() { }

	// RVA: 0x5E7 Offset: 0x5E7 VA: 0x5E7
	private void SetMessageField() { }

	// RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
	private void .ctor(string className, string assemblyName) { }

	// RVA: 0x6E Offset: 0x6E VA: 0x6E
	private void .ctor(string className, string assemblyName, string messageArg, int resourceId) { }

	// RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x325 Offset: 0x325 VA: 0x325
[CLSCompliantAttribute] // RVA: 0x325 Offset: 0x325 VA: 0x325
[Serializable]
public struct UInt16 : IComparable, IFormattable, IConvertible, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 263
{
	// Fields
	private ushort m_value; // 0x0
	public const ushort MaxValue = 65535;
	public const ushort MinValue = 0;

	// Methods

	// RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5 Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6 Slot: 23
	public int CompareTo(ushort value) { }

	// RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8 Slot: 24
	public bool Equals(ushort obj) { }

	// RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4 Slot: 3
	public override string ToString() { }

	// RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x680 Offset: 0x680 VA: 0x680
	// RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
	public static ushort Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x681 Offset: 0x681 VA: 0x681
	// RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	private static ushort Parse(string s, NumberStyles style, NumberFormatInfo info) { }

	// RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x4EB Offset: 0x4EB VA: 0x4EB Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x4EC Offset: 0x4EC VA: 0x4EC Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x4ED Offset: 0x4ED VA: 0x4ED Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x4EE Offset: 0x4EE VA: 0x4EE Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x4EF Offset: 0x4EF VA: 0x4EF Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x4F2 Offset: 0x4F2 VA: 0x4F2 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x2FC Offset: 0x2FC VA: 0x2FC Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x9EA Offset: 0x9EA VA: 0x9EA Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x326 Offset: 0x326 VA: 0x326
[CLSCompliantAttribute] // RVA: 0x326 Offset: 0x326 VA: 0x326
[Serializable]
public struct UInt32 : IComparable, IFormattable, IConvertible, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 264
{
	// Fields
	private uint m_value; // 0x0
	public const uint MaxValue = 4294967295;
	public const uint MinValue = 0;

	// Methods

	// RVA: 0x4F3 Offset: 0x4F3 VA: 0x4F3 Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0x4F4 Offset: 0x4F4 VA: 0x4F4 Slot: 23
	public int CompareTo(uint value) { }

	// RVA: 0x4F5 Offset: 0x4F5 VA: 0x4F5 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4F6 Offset: 0x4F6 VA: 0x4F6 Slot: 24
	public bool Equals(uint obj) { }

	// RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7 Slot: 3
	public override string ToString() { }

	// RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x9EB Offset: 0x9EB VA: 0x9EB Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x682 Offset: 0x682 VA: 0x682
	// RVA: 0x4F8 Offset: 0x4F8 VA: 0x4F8
	public static uint Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x683 Offset: 0x683 VA: 0x683
	// RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x9A8 Offset: 0x9A8 VA: 0x9A8 Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x4F9 Offset: 0x4F9 VA: 0x4F9 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x4FA Offset: 0x4FA VA: 0x4FA Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x4FB Offset: 0x4FB VA: 0x4FB Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x4FC Offset: 0x4FC VA: 0x4FC Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x4FD Offset: 0x4FD VA: 0x4FD Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x4FE Offset: 0x4FE VA: 0x4FE Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x4FF Offset: 0x4FF VA: 0x4FF Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x500 Offset: 0x500 VA: 0x500 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x2FD Offset: 0x2FD VA: 0x2FD Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x9ED Offset: 0x9ED VA: 0x9ED Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0x327 Offset: 0x327 VA: 0x327
[ComVisibleAttribute] // RVA: 0x327 Offset: 0x327 VA: 0x327
[Serializable]
public struct UInt64 : IComparable, IFormattable, IConvertible, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 265
{
	// Fields
	private ulong m_value; // 0x0
	public const ulong MaxValue = 18446744073709551615;
	public const ulong MinValue = 0;

	// Methods

	// RVA: 0x501 Offset: 0x501 VA: 0x501 Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0xF Offset: 0xF VA: 0xF Slot: 23
	public int CompareTo(ulong value) { }

	// RVA: 0x502 Offset: 0x502 VA: 0x502 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10 Slot: 24
	public bool Equals(ulong obj) { }

	// RVA: 0x9A9 Offset: 0x9A9 VA: 0x9A9 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x9AA Offset: 0x9AA VA: 0x9AA Slot: 3
	public override string ToString() { }

	// RVA: 0x503 Offset: 0x503 VA: 0x503 Slot: 21
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x9EE Offset: 0x9EE VA: 0x9EE Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x684 Offset: 0x684 VA: 0x684
	// RVA: 0x59 Offset: 0x59 VA: 0x59
	public static ulong Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0x685 Offset: 0x685 VA: 0x685
	// RVA: 0xF Offset: 0xF VA: 0xF
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x9AB Offset: 0x9AB VA: 0x9AB Slot: 6
	public TypeCode GetTypeCode() { }

	// RVA: 0x504 Offset: 0x504 VA: 0x504 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x505 Offset: 0x505 VA: 0x505 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x506 Offset: 0x506 VA: 0x506 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x507 Offset: 0x507 VA: 0x507 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x508 Offset: 0x508 VA: 0x508 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x509 Offset: 0x509 VA: 0x509 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x50A Offset: 0x50A VA: 0x50A Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x50B Offset: 0x50B VA: 0x50B Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x2FE Offset: 0x2FE VA: 0x2FE Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x5C Offset: 0x5C VA: 0x5C Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x9EF Offset: 0x9EF VA: 0x9EF Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x328 Offset: 0x328 VA: 0x328
[Serializable]
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 266
{
	// Methods

	// RVA: 0x5EA Offset: 0x5EA VA: 0x5EA
	public void .ctor() { }

	// RVA: 0x475 Offset: 0x475 VA: 0x475
	public void .ctor(string message) { }

	// RVA: 0x301 Offset: 0x301 VA: 0x301
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x329 Offset: 0x329 VA: 0x329
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 267
{
	// Fields
	private object _Exception; // 0x8
	private bool _IsTerminating; // 0xC

	// Properties
	public object ExceptionObject { get; }
	public bool IsTerminating { get; }

	// Methods

	// RVA: 0x302 Offset: 0x302 VA: 0x302
	public void .ctor(object exception, bool isTerminating) { }

	[ReliabilityContractAttribute] // RVA: 0x686 Offset: 0x686 VA: 0x686
	// RVA: 0x9AF Offset: 0x9AF VA: 0x9AF
	public object get_ExceptionObject() { }

	[ReliabilityContractAttribute] // RVA: 0x687 Offset: 0x687 VA: 0x687
	// RVA: 0x9B0 Offset: 0x9B0 VA: 0x9B0
	public bool get_IsTerminating() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x32A Offset: 0x32A VA: 0x32A
[Serializable]
public sealed class UnhandledExceptionEventHandler : MulticastDelegate // TypeDefIndex: 268
{
	// Methods

	// RVA: 0x303 Offset: 0x303 VA: 0x303
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x304 Offset: 0x304 VA: 0x304 Slot: 12
	public virtual void Invoke(object sender, UnhandledExceptionEventArgs e) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x476 Offset: 0x476 VA: 0x476 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 269
{
	// Fields
	private Type[] m_instantiation; // 0x8
	private int[] m_elementTypes; // 0xC
	private int m_genericParameterPosition; // 0x10
	private Type m_declaringType; // 0x14
	private MethodBase m_declaringMethod; // 0x18
	private string m_data; // 0x1C
	private string m_assemblyName; // 0x20
	private int m_unityType; // 0x24

	// Methods

	// RVA: 0x477 Offset: 0x477 VA: 0x477
	internal static void GetUnitySerializationInfo(SerializationInfo info, Missing missing) { }

	// RVA: 0x50E Offset: 0x50E VA: 0x50E
	internal static RuntimeType AddElementTypes(SerializationInfo info, RuntimeType type) { }

	// RVA: 0x50F Offset: 0x50F VA: 0x50F
	internal Type MakeElementTypes(Type type) { }

	// RVA: 0x478 Offset: 0x478 VA: 0x478
	internal static void GetUnitySerializationInfo(SerializationInfo info, RuntimeType type) { }

	// RVA: 0xE7 Offset: 0xE7 VA: 0xE7
	internal static void GetUnitySerializationInfo(SerializationInfo info, int unityType, string data, RuntimeAssembly assembly) { }

	// RVA: 0x305 Offset: 0x305 VA: 0x305
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x479 Offset: 0x479 VA: 0x479
	private void ThrowInsufficientInformation(string field) { }

	// RVA: 0x306 Offset: 0x306 VA: 0x306 Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x510 Offset: 0x510 VA: 0x510 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
}

// Namespace: System
internal struct UnSafeCharBuffer // TypeDefIndex: 270
{
	// Fields
	private char* m_buffer; // 0x0
	private int m_totalSize; // 0x4
	private int m_length; // 0x8

	// Methods

	// RVA: 0x300 Offset: 0x300 VA: 0x300
	public void .ctor(char* buffer, int bufferSize) { }

	// RVA: 0x474 Offset: 0x474 VA: 0x474
	public void AppendString(string stringToAppend) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x32B Offset: 0x32B VA: 0x32B
[Serializable]
public sealed class Version : ICloneable, IComparable, IComparable<Version>, IEquatable<Version> // TypeDefIndex: 271
{
	// Fields
	private int _Major; // 0x8
	private int _Minor; // 0xC
	private int _Build; // 0x10
	private int _Revision; // 0x14
	private static readonly char[] SeparatorsArray; // 0x0
	private const int ZERO_CHAR_VALUE = 48;

	// Properties
	public int Major { get; }
	public int Minor { get; }
	public int Build { get; }
	public int Revision { get; }

	// Methods

	// RVA: 0x6F Offset: 0x6F VA: 0x6F
	public void .ctor(int major, int minor, int build, int revision) { }

	// RVA: 0xE8 Offset: 0xE8 VA: 0xE8
	public void .ctor(int major, int minor, int build) { }

	// RVA: 0x307 Offset: 0x307 VA: 0x307
	public void .ctor(int major, int minor) { }

	// RVA: 0x47A Offset: 0x47A VA: 0x47A
	public void .ctor(string version) { }

	// RVA: 0x5ED Offset: 0x5ED VA: 0x5ED
	public void .ctor() { }

	// RVA: 0x9B3 Offset: 0x9B3 VA: 0x9B3
	public int get_Major() { }

	// RVA: 0x9B4 Offset: 0x9B4 VA: 0x9B4
	public int get_Minor() { }

	// RVA: 0x9B5 Offset: 0x9B5 VA: 0x9B5
	public int get_Build() { }

	// RVA: 0x9B6 Offset: 0x9B6 VA: 0x9B6
	public int get_Revision() { }

	// RVA: 0x9B7 Offset: 0x9B7 VA: 0x9B7 Slot: 4
	public object Clone() { }

	// RVA: 0x514 Offset: 0x514 VA: 0x514 Slot: 5
	public int CompareTo(object version) { }

	// RVA: 0x515 Offset: 0x515 VA: 0x515 Slot: 6
	public int CompareTo(Version value) { }

	// RVA: 0x516 Offset: 0x516 VA: 0x516 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x517 Offset: 0x517 VA: 0x517 Slot: 7
	public bool Equals(Version obj) { }

	// RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x9B9 Offset: 0x9B9 VA: 0x9B9 Slot: 3
	public override string ToString() { }

	// RVA: 0x518 Offset: 0x518 VA: 0x518
	public string ToString(int fieldCount) { }

	// RVA: 0x47B Offset: 0x47B VA: 0x47B
	private static void AppendPositiveNumber(int num, StringBuilder sb) { }

	// RVA: 0x9BA Offset: 0x9BA VA: 0x9BA
	public static Version Parse(string input) { }

	// RVA: 0x519 Offset: 0x519 VA: 0x519
	private static bool TryParseVersion(string version, ref Version.VersionResult result) { }

	// RVA: 0x124 Offset: 0x124 VA: 0x124
	private static bool TryParseComponent(string component, string componentName, ref Version.VersionResult result, out int parsedComponent) { }

	// RVA: 0x51A Offset: 0x51A VA: 0x51A
	public static bool op_Equality(Version v1, Version v2) { }

	// RVA: 0x51B Offset: 0x51B VA: 0x51B
	public static bool op_Inequality(Version v1, Version v2) { }

	// RVA: 0xF19 Offset: 0xF19 VA: 0xF19
	private static void .cctor() { }
}

// Namespace: 
internal enum Version.ParseFailureKind // TypeDefIndex: 272
{
	// Fields
	public int value__; // 0x0
	public const Version.ParseFailureKind ArgumentNullException = 0;
	public const Version.ParseFailureKind ArgumentException = 1;
	public const Version.ParseFailureKind ArgumentOutOfRangeException = 2;
	public const Version.ParseFailureKind FormatException = 3;
}

// Namespace: 
internal struct Version.VersionResult // TypeDefIndex: 273
{
	// Fields
	internal Version m_parsedVersion; // 0x0
	internal Version.ParseFailureKind m_failure; // 0x4
	internal string m_exceptionArgument; // 0x8
	internal string m_argumentName; // 0xC
	internal bool m_canThrow; // 0x10

	// Methods

	// RVA: 0x308 Offset: 0x308 VA: 0x308
	internal void Init(string argumentName, bool canThrow) { }

	// RVA: 0x47C Offset: 0x47C VA: 0x47C
	internal void SetFailure(Version.ParseFailureKind failure) { }

	// RVA: 0x309 Offset: 0x309 VA: 0x309
	internal void SetFailure(Version.ParseFailureKind failure, string argument) { }

	// RVA: 0x9BB Offset: 0x9BB VA: 0x9BB
	internal Exception GetVersionParseException() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x32C Offset: 0x32C VA: 0x32C
[ClassInterfaceAttribute] // RVA: 0x32C Offset: 0x32C VA: 0x32C
public sealed class AppDomain : MarshalByRefObject, IEvidenceFactory, _AppDomain // TypeDefIndex: 274
{
	// Fields
	private IntPtr _mono_app_domain; // 0xC
	private static string _process_guid; // 0x0
	[ThreadStaticAttribute] // RVA: 0x543 Offset: 0x543 VA: 0x543
	private static Dictionary<string, object> type_resolve_in_progress; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x544 Offset: 0x544 VA: 0x544
	private static Dictionary<string, object> assembly_resolve_in_progress; // 0x80000004
	[ThreadStaticAttribute] // RVA: 0x545 Offset: 0x545 VA: 0x545
	private static Dictionary<string, object> assembly_resolve_in_progress_refonly; // 0x80000008
	private object _evidence; // 0x10
	private object _granted; // 0x14
	private int _principalPolicy; // 0x18
	[ThreadStaticAttribute] // RVA: 0x546 Offset: 0x546 VA: 0x546
	private static object _principal; // 0x8000000C
	private static AppDomain default_domain; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0x547 Offset: 0x547 VA: 0x547
	private AssemblyLoadEventHandler AssemblyLoad; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0x548 Offset: 0x548 VA: 0x548
	private ResolveEventHandler AssemblyResolve; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0x549 Offset: 0x549 VA: 0x549
	private EventHandler DomainUnload; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0x54A Offset: 0x54A VA: 0x54A
	private EventHandler ProcessExit; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0x54B Offset: 0x54B VA: 0x54B
	private ResolveEventHandler ResourceResolve; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0x54C Offset: 0x54C VA: 0x54C
	private ResolveEventHandler TypeResolve; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0x54D Offset: 0x54D VA: 0x54D
	private UnhandledExceptionEventHandler UnhandledException; // 0x34
	[CompilerGeneratedAttribute] // RVA: 0x54E Offset: 0x54E VA: 0x54E
	private EventHandler<FirstChanceExceptionEventArgs> FirstChanceException; // 0x38
	private object _domain_manager; // 0x3C
	[CompilerGeneratedAttribute] // RVA: 0x54F Offset: 0x54F VA: 0x54F
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x40
	private object _activation; // 0x44
	private object _applicationIdentity; // 0x48
	private List<string> compatibility_switch; // 0x4C

	// Properties
	public static AppDomain CurrentDomain { get; }

	// Methods

	// RVA: 0x298 Offset: 0x298 VA: 0x298
	private void .ctor() { }

	// RVA: 0x157 Offset: 0x157 VA: 0x157
	private string getFriendlyName() { }

	// RVA: 0x182 Offset: 0x182 VA: 0x182
	private static AppDomain getCurDomain() { }

	// RVA: 0x183 Offset: 0x183 VA: 0x183
	public static AppDomain get_CurrentDomain() { }

	// RVA: 0x158 Offset: 0x158 VA: 0x158 Slot: 5
	public override object InitializeLifetimeService() { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30
	internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly) { }

	// RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	internal Assembly LoadSatellite(AssemblyName assemblyRef, bool throwOnError) { }

	// RVA: 0xA6 Offset: 0xA6 VA: 0xA6 Slot: 6
	public Assembly Load(string assemblyString) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly) { }

	// RVA: 0x159 Offset: 0x159 VA: 0x159
	private static AppDomain InternalSetDomainByID(int domain_id) { }

	// RVA: 0x15A Offset: 0x15A VA: 0x15A
	private static AppDomain InternalSetDomain(AppDomain context) { }

	// RVA: 0x299 Offset: 0x299 VA: 0x299
	internal static void InternalPushDomainRefByID(int domain_id) { }

	// RVA: 0xE53 Offset: 0xE53 VA: 0xE53
	internal static void InternalPopDomainRef() { }

	// RVA: 0x15B Offset: 0x15B VA: 0x15B
	internal static Context InternalSetContext(Context context) { }

	// RVA: 0x184 Offset: 0x184 VA: 0x184
	internal static Context InternalGetContext() { }

	// RVA: 0x185 Offset: 0x185 VA: 0x185
	internal static Context InternalGetDefaultContext() { }

	// RVA: 0x15C Offset: 0x15C VA: 0x15C
	internal static string InternalGetProcessGuid(string newguid) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args) { }

	// RVA: 0x186 Offset: 0x186 VA: 0x186
	internal static string GetProcessGuid() { }

	// RVA: 0x15D Offset: 0x15D VA: 0x15D
	private static bool InternalIsFinalizingForUnload(int domain_id) { }

	// RVA: 0x15E Offset: 0x15E VA: 0x15E
	public bool IsFinalizingForUnload() { }

	// RVA: 0x15F Offset: 0x15F VA: 0x15F
	private int getDomainID() { }

	[ObsoleteAttribute] // RVA: 0x688 Offset: 0x688 VA: 0x688
	// RVA: 0x187 Offset: 0x187 VA: 0x187
	public static int GetCurrentThreadId() { }

	// RVA: 0x160 Offset: 0x160 VA: 0x160 Slot: 3
	public override string ToString() { }

	// RVA: 0x96 Offset: 0x96 VA: 0x96
	private void DoAssemblyLoad(Assembly assembly) { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	private Assembly DoAssemblyResolve(string name, Assembly requestingAssembly, bool refonly) { }

	// RVA: 0xA7 Offset: 0xA7 VA: 0xA7
	internal Assembly DoTypeResolve(object name_or_tb) { }

	// RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	internal Assembly DoResourceResolve(string name, Assembly requesting) { }

	// RVA: 0x29A Offset: 0x29A VA: 0x29A
	private void DoDomainUnload() { }

	// RVA: 0x161 Offset: 0x161 VA: 0x161
	internal byte[] GetMarshalledDomainObjRef() { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm) { }

	[CompilerGeneratedAttribute] // RVA: 0x689 Offset: 0x689 VA: 0x689
	// RVA: 0x97 Offset: 0x97 VA: 0x97 Slot: 7
	public void add_DomainUnload(EventHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0x68A Offset: 0x68A VA: 0x68A
	// RVA: 0x98 Offset: 0x98 VA: 0x98 Slot: 8
	public void remove_DomainUnload(EventHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0x68B Offset: 0x68B VA: 0x68B
	// RVA: 0x99 Offset: 0x99 VA: 0x99 Slot: 9
	public void add_ProcessExit(EventHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0x68C Offset: 0x68C VA: 0x68C
	// RVA: 0x9A Offset: 0x9A VA: 0x9A Slot: 10
	public void remove_ProcessExit(EventHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0x68D Offset: 0x68D VA: 0x68D
	// RVA: 0x9B Offset: 0x9B VA: 0x9B Slot: 11
	public void add_UnhandledException(UnhandledExceptionEventHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0x68E Offset: 0x68E VA: 0x68E
	// RVA: 0x9C Offset: 0x9C VA: 0x9C Slot: 12
	public void remove_UnhandledException(UnhandledExceptionEventHandler value) { }
}

// Namespace: System
[FriendAccessAllowedAttribute] // RVA: 0x32D Offset: 0x32D VA: 0x32D
internal class CLRConfig // TypeDefIndex: 275
{
	// Methods

	// RVA: 0x18B Offset: 0x18B VA: 0x18B
	internal static bool CheckThrowUnobservedTaskExceptions() { }
}

// Namespace: System
internal static class CompatibilitySwitches // TypeDefIndex: 276
{
	// Fields
	public static readonly bool IsAppEarlierThanSilverlight4; // 0x0
	public static readonly bool IsAppEarlierThanWindowsPhone8; // 0x1

	// Methods

	// RVA: 0xE62 Offset: 0xE62 VA: 0xE62
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x32E Offset: 0x32E VA: 0x32E
public static class Environment // TypeDefIndex: 277
{
	// Fields
	private const int mono_corlib_version = 1051100001;
	private static string nl; // 0x0
	private static OperatingSystem os; // 0x4

	// Properties
	public static int CurrentManagedThreadId { get; }
	public static bool HasShutdownStarted { get; }
	public static string NewLine { get; }
	internal static PlatformID Platform { get; }
	public static OperatingSystem OSVersion { get; }
	public static string StackTrace { get; }
	public static int TickCount { get; }
	public static bool Is64BitProcess { get; }
	public static int ProcessorCount { get; }
	internal static bool IsRunningOnWindows { get; }

	// Methods

	// RVA: 0x2ED Offset: 0x2ED VA: 0x2ED
	internal static string GetResourceString(string key) { }

	// RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2
	internal static string GetResourceString(string key, object[] values) { }

	// RVA: 0x2EE Offset: 0x2EE VA: 0x2EE
	internal static string GetResourceStringEncodingName(int codePage) { }

	// RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1
	public static int get_CurrentManagedThreadId() { }

	// RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2
	public static bool get_HasShutdownStarted() { }

	// RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3
	private static string GetNewLine() { }

	// RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4
	public static string get_NewLine() { }

	[CompilerGeneratedAttribute] // RVA: 0x68F Offset: 0x68F VA: 0x68F
	// RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5
	internal static PlatformID get_Platform() { }

	// RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6
	internal static string GetOSVersionString() { }

	// RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7
	public static OperatingSystem get_OSVersion() { }

	// RVA: 0x2EF Offset: 0x2EF VA: 0x2EF
	internal static Version CreateVersionFromString(string info) { }

	// RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8
	public static string get_StackTrace() { }

	// RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9
	public static int get_TickCount() { }

	// RVA: 0x33D Offset: 0x33D VA: 0x33D
	public static void Exit(int exitCode) { }

	// RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0
	public static string ExpandEnvironmentVariables(string name) { }

	// RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1
	internal static string internalGetEnvironmentVariable_native(IntPtr variable) { }

	// RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2
	internal static string internalGetEnvironmentVariable(string variable) { }

	// RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3
	public static string GetEnvironmentVariable(string variable) { }

	// RVA: 0x1AA Offset: 0x1AA VA: 0x1AA
	private static Hashtable GetEnvironmentVariablesNoCase() { }

	// RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4
	public static string GetFolderPath(Environment.SpecialFolder folder) { }

	// RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5
	private static string GetWindowsFolderPath(int folder) { }

	// RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3
	public static string GetFolderPath(Environment.SpecialFolder folder, Environment.SpecialFolderOption option) { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62
	private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback) { }

	// RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4
	internal static string UnixGetFolderPath(Environment.SpecialFolder folder, Environment.SpecialFolderOption option) { }

	// RVA: 0x33E Offset: 0x33E VA: 0x33E
	public static void FailFast(string message) { }

	// RVA: 0x15F Offset: 0x15F VA: 0x15F
	public static void FailFast(string message, Exception exception) { }

	// RVA: 0x1AB Offset: 0x1AB VA: 0x1AB
	public static bool get_Is64BitProcess() { }

	// RVA: 0x1AC Offset: 0x1AC VA: 0x1AC
	public static int get_ProcessorCount() { }

	// RVA: 0x1AD Offset: 0x1AD VA: 0x1AD
	internal static bool get_IsRunningOnWindows() { }

	// RVA: 0x1AE Offset: 0x1AE VA: 0x1AE
	private static string[] GetEnvironmentVariableNames() { }

	// RVA: 0x1AF Offset: 0x1AF VA: 0x1AF
	internal static string GetMachineConfigPath() { }

	// RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0
	internal static string internalGetHome() { }

	// RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1
	internal static int GetPageSize() { }

	// RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5
	internal static string GetStackTrace(Exception e, bool needFileInfo) { }
}

// Namespace: 
[ComVisibleAttribute] // RVA: 0x32F Offset: 0x32F VA: 0x32F
public enum Environment.SpecialFolder // TypeDefIndex: 278
{
	// Fields
	public int value__; // 0x0
	public const Environment.SpecialFolder MyDocuments = 5;
	public const Environment.SpecialFolder Desktop = 0;
	public const Environment.SpecialFolder MyComputer = 17;
	public const Environment.SpecialFolder Programs = 2;
	public const Environment.SpecialFolder Personal = 5;
	public const Environment.SpecialFolder Favorites = 6;
	public const Environment.SpecialFolder Startup = 7;
	public const Environment.SpecialFolder Recent = 8;
	public const Environment.SpecialFolder SendTo = 9;
	public const Environment.SpecialFolder StartMenu = 11;
	public const Environment.SpecialFolder MyMusic = 13;
	public const Environment.SpecialFolder DesktopDirectory = 16;
	public const Environment.SpecialFolder Templates = 21;
	public const Environment.SpecialFolder ApplicationData = 26;
	public const Environment.SpecialFolder LocalApplicationData = 28;
	public const Environment.SpecialFolder InternetCache = 32;
	public const Environment.SpecialFolder Cookies = 33;
	public const Environment.SpecialFolder History = 34;
	public const Environment.SpecialFolder CommonApplicationData = 35;
	public const Environment.SpecialFolder System = 37;
	public const Environment.SpecialFolder ProgramFiles = 38;
	public const Environment.SpecialFolder MyPictures = 39;
	public const Environment.SpecialFolder CommonProgramFiles = 43;
	public const Environment.SpecialFolder MyVideos = 14;
	public const Environment.SpecialFolder NetworkShortcuts = 19;
	public const Environment.SpecialFolder Fonts = 20;
	public const Environment.SpecialFolder CommonStartMenu = 22;
	public const Environment.SpecialFolder CommonPrograms = 23;
	public const Environment.SpecialFolder CommonStartup = 24;
	public const Environment.SpecialFolder CommonDesktopDirectory = 25;
	public const Environment.SpecialFolder PrinterShortcuts = 27;
	public const Environment.SpecialFolder Windows = 36;
	public const Environment.SpecialFolder UserProfile = 40;
	public const Environment.SpecialFolder SystemX86 = 41;
	public const Environment.SpecialFolder ProgramFilesX86 = 42;
	public const Environment.SpecialFolder CommonProgramFilesX86 = 44;
	public const Environment.SpecialFolder CommonTemplates = 45;
	public const Environment.SpecialFolder CommonDocuments = 46;
	public const Environment.SpecialFolder CommonAdminTools = 47;
	public const Environment.SpecialFolder AdminTools = 48;
	public const Environment.SpecialFolder CommonMusic = 53;
	public const Environment.SpecialFolder CommonPictures = 54;
	public const Environment.SpecialFolder CommonVideos = 55;
	public const Environment.SpecialFolder Resources = 56;
	public const Environment.SpecialFolder LocalizedResources = 57;
	public const Environment.SpecialFolder CommonOemLinks = 58;
	public const Environment.SpecialFolder CDBurning = 59;
}

// Namespace: 
public enum Environment.SpecialFolderOption // TypeDefIndex: 279
{
	// Fields
	public int value__; // 0x0
	public const Environment.SpecialFolderOption None = 0;
	public const Environment.SpecialFolderOption DoNotVerify = 16384;
	public const Environment.SpecialFolderOption Create = 32768;
}

// Namespace: System
internal static class ParseNumbers // TypeDefIndex: 280
{
	// Methods

	// RVA: 0x8BA Offset: 0x8BA VA: 0x8BA
	public static int StringToInt(string value, int fromBase, int flags) { }

	// RVA: 0x97 Offset: 0x97 VA: 0x97
	public static int StringToInt(string value, int fromBase, int flags, int* parsePos) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static long StringToLong(string value, int fromBase, int flags, int* parsePos) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A
	public static string IntToString(int value, int toBase, int width, char paddingChar, int flags) { }

	// RVA: 0x3CF Offset: 0x3CF VA: 0x3CF
	private static void EndianSwap(ref byte[] value) { }

	// RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
	private static StringBuilder ConvertToBase2(byte[] value) { }

	// RVA: 0x4A6 Offset: 0x4A6 VA: 0x4A6
	private static StringBuilder ConvertToBase8(byte[] value) { }

	// RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
	private static StringBuilder ConvertToBase16(byte[] value) { }
}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 281
{
	// Fields
	public string full_name; // 0x8
	public MonoCMethod default_ctor; // 0xC

	// Methods

	// RVA: 0x3BA Offset: 0x3BA VA: 0x3BA
	public void .ctor() { }
}

// Namespace: System
internal sealed class TypeNameParser // TypeDefIndex: 282
{
	// Methods

	// RVA: 0x77 Offset: 0x77 VA: 0x77
	internal static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase, ref StackCrawlMark stackMark) { }
}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x330 Offset: 0x330 VA: 0x330
[ComVisibleAttribute] // RVA: 0x330 Offset: 0x330 VA: 0x330
[Serializable]
public sealed class AppDomainSetup : IAppDomainSetup // TypeDefIndex: 283
{
	// Fields
	private string application_base; // 0x8
	private string application_name; // 0xC
	private string cache_path; // 0x10
	private string configuration_file; // 0x14
	private string dynamic_base; // 0x18
	private string license_file; // 0x1C
	private string private_bin_path; // 0x20
	private string private_bin_path_probe; // 0x24
	private string shadow_copy_directories; // 0x28
	private string shadow_copy_files; // 0x2C
	private bool publisher_policy; // 0x30
	private bool path_changed; // 0x31
	private int loader_optimization; // 0x34
	private bool disallow_binding_redirects; // 0x38
	private bool disallow_code_downloads; // 0x39
	private object _activationArguments; // 0x3C
	private object domain_initializer; // 0x40
	private object application_trust; // 0x44
	private string[] domain_initializer_args; // 0x48
	private bool disallow_appbase_probe; // 0x4C
	private byte[] configuration_bytes; // 0x50
	private byte[] serialized_non_primitives; // 0x54
	[CompilerGeneratedAttribute] // RVA: 0x550 Offset: 0x550 VA: 0x550
	private string <TargetFrameworkName>k__BackingField; // 0x58

	// Methods

	// RVA: 0x29B Offset: 0x29B VA: 0x29B
	public void .ctor() { }
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 284
{
	// Fields
	private IntPtr sig; // 0x0
	private IntPtr args; // 0x4
	private int next_arg; // 0x8
	private int num_args; // 0xC

	// Methods

	// RVA: 0xA8 Offset: 0xA8 VA: 0xA8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x162 Offset: 0x162 VA: 0x162 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x331 Offset: 0x331 VA: 0x331
public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 285
{
	// Fields
	private Assembly m_loadedAssembly; // 0x8

	// Methods

	// RVA: 0xA8 Offset: 0xA8 VA: 0xA8
	public void .ctor(Assembly loadedAssembly) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x332 Offset: 0x332 VA: 0x332
[Serializable]
public sealed class AssemblyLoadEventHandler : MulticastDelegate // TypeDefIndex: 286
{
	// Methods

	// RVA: 0x84 Offset: 0x84 VA: 0x84
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85 Slot: 12
	public virtual void Invoke(object sender, AssemblyLoadEventArgs args) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, AssemblyLoadEventArgs args, AsyncCallback callback, object object) { }

	// RVA: 0xA9 Offset: 0xA9 VA: 0xA9 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public static class Console // TypeDefIndex: 287
{
	// Fields
	internal static TextWriter stdout; // 0x0
	private static TextWriter stderr; // 0x4
	private static TextReader stdin; // 0x8
	private static Encoding inputEncoding; // 0xC
	private static Encoding outputEncoding; // 0x10
	private static ConsoleCancelEventHandler cancel_event; // 0x14
	private static readonly Console.InternalCancelHandler cancel_handler; // 0x18

	// Properties
	public static TextWriter Error { get; }
	public static Encoding InputEncoding { get; }
	public static Encoding OutputEncoding { get; }

	// Methods

	// RVA: 0xE63 Offset: 0xE63 VA: 0xE63
	private static void .cctor() { }

	// RVA: 0xD8 Offset: 0xD8 VA: 0xD8
	private static void SetupStreams(Encoding inputEncoding, Encoding outputEncoding) { }

	// RVA: 0x190 Offset: 0x190 VA: 0x190
	public static TextWriter get_Error() { }

	// RVA: 0x826 Offset: 0x826 VA: 0x826
	private static Stream Open(IntPtr handle, FileAccess access, int bufferSize) { }

	// RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6
	public static Stream OpenStandardError(int bufferSize) { }

	// RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7
	public static Stream OpenStandardInput(int bufferSize) { }

	// RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8
	public static Stream OpenStandardOutput(int bufferSize) { }

	// RVA: 0x191 Offset: 0x191 VA: 0x191
	public static Encoding get_InputEncoding() { }

	// RVA: 0x192 Offset: 0x192 VA: 0x192
	public static Encoding get_OutputEncoding() { }

	// RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9
	public static ConsoleKeyInfo ReadKey() { }

	// RVA: 0xD9 Offset: 0xD9 VA: 0xD9
	public static ConsoleKeyInfo ReadKey(bool intercept) { }

	// RVA: 0xE64 Offset: 0xE64 VA: 0xE64
	internal static void DoConsoleCancelEvent() { }
}

// Namespace: 
private class Console.WindowsConsole // TypeDefIndex: 288
{
	// Fields
	public static bool ctrlHandlerAdded; // 0x0
	private static Console.WindowsConsole.WindowsCancelHandler cancelHandler; // 0x4

	// Methods

	// RVA: 0x193 Offset: 0x193 VA: 0x193
	private static extern int GetConsoleCP() { }

	// RVA: 0x194 Offset: 0x194 VA: 0x194
	private static extern int GetConsoleOutputCP() { }

	// RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9
	private static bool DoWindowsConsoleCancelEvent(int keyCode) { }

	// RVA: 0x195 Offset: 0x195 VA: 0x195
	public static int GetInputCodePage() { }

	// RVA: 0x196 Offset: 0x196 VA: 0x196
	public static int GetOutputCodePage() { }

	// RVA: 0xE65 Offset: 0xE65 VA: 0xE65
	private static void .cctor() { }
}

// Namespace: 
private sealed class Console.WindowsConsole.WindowsCancelHandler : MulticastDelegate // TypeDefIndex: 289
{
	// Methods

	// RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x114 Offset: 0x114 VA: 0x114 Slot: 12
	public virtual bool Invoke(int keyCode) { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C Slot: 13
	public virtual IAsyncResult BeginInvoke(int keyCode, AsyncCallback callback, object object) { }

	// RVA: 0x115 Offset: 0x115 VA: 0x115 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Console.InternalCancelHandler : MulticastDelegate // TypeDefIndex: 290
{
	// Methods

	// RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2CA Offset: 0x2CA VA: 0x2CA Slot: 12
	public virtual void Invoke() { }

	// RVA: 0x827 Offset: 0x827 VA: 0x827 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xDA Offset: 0xDA VA: 0xDA Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
internal static class ConsoleDriver // TypeDefIndex: 291
{
	// Fields
	internal static IConsoleDriver driver; // 0x0
	private static bool is_console; // 0x4
	private static bool called_isatty; // 0x5

	// Properties
	public static bool IsConsole { get; }

	// Methods

	// RVA: 0xE66 Offset: 0xE66 VA: 0xE66
	private static void .cctor() { }

	// RVA: 0x197 Offset: 0x197 VA: 0x197
	private static IConsoleDriver CreateNullConsoleDriver() { }

	// RVA: 0x198 Offset: 0x198 VA: 0x198
	private static IConsoleDriver CreateWindowsConsoleDriver() { }

	// RVA: 0x1FB Offset: 0x1FB VA: 0x1FB
	private static IConsoleDriver CreateTermInfoDriver(string term) { }

	// RVA: 0xDD Offset: 0xDD VA: 0xDD
	public static ConsoleKeyInfo ReadKey(bool intercept) { }

	// RVA: 0x199 Offset: 0x199 VA: 0x199
	public static bool get_IsConsole() { }

	// RVA: 0x1FC Offset: 0x1FC VA: 0x1FC
	private static bool Isatty(IntPtr handle) { }

	// RVA: 0x1FD Offset: 0x1FD VA: 0x1FD
	internal static int InternalKeyAvailable(int ms_timeout) { }

	// RVA: 0x3D Offset: 0x3D VA: 0x3D
	internal static bool TtySetup(string keypadXmit, string teardown, out byte[] control_characters, out int* address) { }

	// RVA: 0x1FE Offset: 0x1FE VA: 0x1FE
	internal static bool SetEcho(bool wantEcho) { }
}

// Namespace: System
internal sealed class DelegateData // TypeDefIndex: 292
{
	// Fields
	public Type target_type; // 0x8
	public string method_name; // 0xC
	public bool curried_first_arg; // 0x10

	// Methods

	// RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4
	public void .ctor() { }
}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x333 Offset: 0x333 VA: 0x333
[ComVisibleAttribute] // RVA: 0x333 Offset: 0x333 VA: 0x333
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 293
{
	// Fields
	private IntPtr method_ptr; // 0x8
	private IntPtr invoke_impl; // 0xC
	private object m_target; // 0x10
	private IntPtr method; // 0x14
	private IntPtr delegate_trampoline; // 0x18
	private IntPtr extra_arg; // 0x1C
	private IntPtr method_code; // 0x20
	private MethodInfo method_info; // 0x24
	private MethodInfo original_method_info; // 0x28
	private DelegateData data; // 0x2C
	private bool method_is_virtual; // 0x30

	// Properties
	public MethodInfo Method { get; }
	public object Target { get; }

	// Methods

	// RVA: 0x266 Offset: 0x266 VA: 0x266
	public MethodInfo get_Method() { }

	// RVA: 0x267 Offset: 0x267 VA: 0x267
	private MethodInfo GetVirtualMethod_internal() { }

	// RVA: 0x268 Offset: 0x268 VA: 0x268
	public object get_Target() { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure) { }

	// RVA: 0x174 Offset: 0x174 VA: 0x174
	private static bool arg_type_match(Type delArgType, Type argType) { }

	// RVA: 0x850 Offset: 0x850 VA: 0x850
	private static bool arg_type_match_this(Type delArgType, Type argType, bool boxedThis) { }

	// RVA: 0x175 Offset: 0x175 VA: 0x175
	private static bool return_type_match(Type delReturnType, Type returnType) { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	private static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure, bool allowClosed) { }

	// RVA: 0x851 Offset: 0x851 VA: 0x851
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method) { }

	// RVA: 0x852 Offset: 0x852 VA: 0x852
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x176 Offset: 0x176 VA: 0x176
	public static Delegate CreateDelegate(Type type, MethodInfo method) { }

	// RVA: 0x853 Offset: 0x853 VA: 0x853
	public static Delegate CreateDelegate(Type type, object target, string method) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x854 Offset: 0x854 VA: 0x854
	public static Delegate CreateDelegate(Type type, Type target, string method) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase) { }

	// RVA: 0x269 Offset: 0x269 VA: 0x269 Slot: 6
	public virtual object Clone() { }

	// RVA: 0x177 Offset: 0x177 VA: 0x177 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x26A Offset: 0x26A VA: 0x26A Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x26B Offset: 0x26B VA: 0x26B Slot: 7
	protected virtual MethodInfo GetMethodImpl() { }

	// RVA: 0xCB Offset: 0xCB VA: 0xCB Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x26C Offset: 0x26C VA: 0x26C Slot: 9
	public virtual Delegate[] GetInvocationList() { }

	// RVA: 0x178 Offset: 0x178 VA: 0x178
	public static Delegate Combine(Delegate a, Delegate b) { }

	[ComVisibleAttribute] // RVA: 0x690 Offset: 0x690 VA: 0x690
	// RVA: 0x26D Offset: 0x26D VA: 0x26D
	public static Delegate Combine(Delegate[] delegates) { }

	// RVA: 0x179 Offset: 0x179 VA: 0x179 Slot: 10
	protected virtual Delegate CombineImpl(Delegate d) { }

	// RVA: 0x17A Offset: 0x17A VA: 0x17A
	public static Delegate Remove(Delegate source, Delegate value) { }

	// RVA: 0x17B Offset: 0x17B VA: 0x17B Slot: 11
	protected virtual Delegate RemoveImpl(Delegate d) { }

	// RVA: 0x855 Offset: 0x855 VA: 0x855
	internal static Delegate CreateDelegateNoSecurityCheck(RuntimeType type, object firstArgument, MethodInfo method) { }

	// RVA: 0x26E Offset: 0x26E VA: 0x26E
	internal static MulticastDelegate AllocDelegateLike_internal(Delegate d) { }
}

// Namespace: System
[Serializable]
internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 294
{
	// Fields
	private Delegate _delegate; // 0x8

	// Methods

	// RVA: 0xCC Offset: 0xCC VA: 0xCC
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0xCD Offset: 0xCD VA: 0xCD
	public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0xCE Offset: 0xCE VA: 0xCE Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x17C Offset: 0x17C VA: 0x17C Slot: 5
	public object GetRealObject(StreamingContext context) { }
}

// Namespace: 
[Serializable]
private class DelegateSerializationHolder.DelegateEntry // TypeDefIndex: 295
{
	// Fields
	private string type; // 0x8
	private string assembly; // 0xC
	private object target; // 0x10
	private string targetTypeAssembly; // 0x14
	private string targetTypeName; // 0x18
	private string methodName; // 0x1C
	public DelegateSerializationHolder.DelegateEntry delegateEntry; // 0x20

	// Methods

	// RVA: 0xCF Offset: 0xCF VA: 0xCF
	public void .ctor(Delegate del, string targetLabel) { }

	// RVA: 0x856 Offset: 0x856 VA: 0x856
	public Delegate DeserializeDelegate(SerializationInfo info, int index) { }
}

// Namespace: System
internal static class EmptyArray<T> // TypeDefIndex: 296
{
	// Fields
	public static readonly T[] Value; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10A1 Offset: 0x10A1 VA: 0x10A1
	|-EmptyArray<byte>..cctor
	|
	|-RVA: 0x10A2 Offset: 0x10A2 VA: 0x10A2
	|-EmptyArray<char>..cctor
	|
	|-RVA: 0x10A3 Offset: 0x10A3 VA: 0x10A3
	|-EmptyArray<KeyValuePair<Guid, int>>..cctor
	|
	|-RVA: 0x10A4 Offset: 0x10A4 VA: 0x10A4
	|-EmptyArray<KeyValuePair<Guid, object>>..cctor
	|
	|-RVA: 0x10A5 Offset: 0x10A5 VA: 0x10A5
	|-EmptyArray<KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0xF89 Offset: 0xF89 VA: 0xF89
	|-EmptyArray<object>..cctor
	|
	|-RVA: 0x10A6 Offset: 0x10A6 VA: 0x10A6
	|-EmptyArray<CustomAttributeNamedArgument>..cctor
	|
	|-RVA: 0x10A7 Offset: 0x10A7 VA: 0x10A7
	|-EmptyArray<CustomAttributeTypedArgument>..cctor
	|
	|-RVA: 0x10A8 Offset: 0x10A8 VA: 0x10A8
	|-EmptyArray<ParameterModifier>..cctor
	*/
}

// Namespace: System
internal enum SByteEnum // TypeDefIndex: 297
{
	// Fields
	public sbyte value__; // 0x0
}

// Namespace: System
internal enum Int16Enum // TypeDefIndex: 298
{
	// Fields
	public short value__; // 0x0
}

// Namespace: System
internal enum Int32Enum // TypeDefIndex: 299
{
	// Fields
	public int value__; // 0x0
}

// Namespace: System
internal enum Int64Enum // TypeDefIndex: 300
{
	// Fields
	public long value__; // 0x0
}

// Namespace: System
internal enum ByteEnum // TypeDefIndex: 301
{
	// Fields
	public byte value__; // 0x0
}

// Namespace: System
internal enum UInt16Enum // TypeDefIndex: 302
{
	// Fields
	public ushort value__; // 0x0
}

// Namespace: System
internal enum UInt32Enum // TypeDefIndex: 303
{
	// Fields
	public uint value__; // 0x0
}

// Namespace: System
internal enum UInt64Enum // TypeDefIndex: 304
{
	// Fields
	public ulong value__; // 0x0
}

// Namespace: System
internal interface IConsoleDriver // TypeDefIndex: 305
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ConsoleKeyInfo ReadKey(bool intercept) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x334 Offset: 0x334 VA: 0x334
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 306
{
	// Fields
	private void* m_value; // 0x0
	public static readonly IntPtr Zero; // 0x0

	// Properties
	public static int Size { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x691 Offset: 0x691 VA: 0x691
	// RVA: 0x201 Offset: 0x201 VA: 0x201
	public void .ctor(int value) { }

	[ReliabilityContractAttribute] // RVA: 0x692 Offset: 0x692 VA: 0x692
	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public void .ctor(long value) { }

	[ReliabilityContractAttribute] // RVA: 0x693 Offset: 0x693 VA: 0x693
	[CLSCompliantAttribute] // RVA: 0x693 Offset: 0x693 VA: 0x693
	// RVA: 0x202 Offset: 0x202 VA: 0x202
	public void .ctor(void* value) { }

	// RVA: 0x171 Offset: 0x171 VA: 0x171
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x694 Offset: 0x694 VA: 0x694
	// RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2
	public static int get_Size() { }

	// RVA: 0x172 Offset: 0x172 VA: 0x172 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x29A Offset: 0x29A VA: 0x29A Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x457 Offset: 0x457 VA: 0x457 Slot: 2
	public override int GetHashCode() { }

	[ReliabilityContractAttribute] // RVA: 0x695 Offset: 0x695 VA: 0x695
	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	public long ToInt64() { }

	[CLSCompliantAttribute] // RVA: 0x696 Offset: 0x696 VA: 0x696
	[ReliabilityContractAttribute] // RVA: 0x696 Offset: 0x696 VA: 0x696
	// RVA: 0x458 Offset: 0x458 VA: 0x458
	public void* ToPointer() { }

	// RVA: 0x459 Offset: 0x459 VA: 0x459 Slot: 3
	public override string ToString() { }

	// RVA: 0x29B Offset: 0x29B VA: 0x29B
	public string ToString(string format) { }

	[ReliabilityContractAttribute] // RVA: 0x697 Offset: 0x697 VA: 0x697
	// RVA: 0x29C Offset: 0x29C VA: 0x29C
	public static bool op_Equality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0x698 Offset: 0x698 VA: 0x698
	// RVA: 0x29D Offset: 0x29D VA: 0x29D
	public static bool op_Inequality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0x699 Offset: 0x699 VA: 0x699
	// RVA: 0x45A Offset: 0x45A VA: 0x45A
	public static IntPtr op_Explicit(int value) { }

	[ReliabilityContractAttribute] // RVA: 0x69A Offset: 0x69A VA: 0x69A
	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public static IntPtr op_Explicit(long value) { }

	[CLSCompliantAttribute] // RVA: 0x69B Offset: 0x69B VA: 0x69B
	[ReliabilityContractAttribute] // RVA: 0x69B Offset: 0x69B VA: 0x69B
	// RVA: 0x45B Offset: 0x45B VA: 0x45B
	public static IntPtr op_Explicit(void* value) { }

	// RVA: 0x45C Offset: 0x45C VA: 0x45C
	public static int op_Explicit(IntPtr value) { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F
	public static long op_Explicit(IntPtr value) { }

	[CLSCompliantAttribute] // RVA: 0x69C Offset: 0x69C VA: 0x69C
	// RVA: 0x45D Offset: 0x45D VA: 0x45D
	public static void* op_Explicit(IntPtr value) { }

	[ReliabilityContractAttribute] // RVA: 0x69D Offset: 0x69D VA: 0x69D
	// RVA: 0x45E Offset: 0x45E VA: 0x45E
	internal bool IsNull() { }
}

// Namespace: System
internal static class KnownTerminals // TypeDefIndex: 307
{
	// Properties
	public static byte[] linux { get; }
	public static byte[] xterm { get; }
	public static byte[] ansi { get; }

	// Methods

	// RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3
	public static byte[] get_linux() { }

	// RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4
	public static byte[] get_xterm() { }

	// RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5
	public static byte[] get_ansi() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x335 Offset: 0x335 VA: 0x335
[Serializable]
public abstract class MarshalByRefObject // TypeDefIndex: 308
{
	// Fields
	private object _identity; // 0x8

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; }

	// Methods

	// RVA: 0x3B2 Offset: 0x3B2 VA: 0x3B2
	protected void .ctor() { }

	// RVA: 0x466 Offset: 0x466 VA: 0x466
	internal ServerIdentity get_ObjectIdentity() { }

	// RVA: 0x20C Offset: 0x20C VA: 0x20C
	internal void set_ObjectIdentity(ServerIdentity value) { }

	// RVA: 0x2A2 Offset: 0x2A2 VA: 0x2A2 Slot: 4
	public virtual ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x467 Offset: 0x467 VA: 0x467 Slot: 5
	public virtual object InitializeLifetimeService() { }
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 309
{
	// Fields
	private object msg; // 0x8
	private IntPtr cb_method; // 0xC
	private object cb_target; // 0x10
	private object state; // 0x14
	private object res; // 0x18
	private object out_args; // 0x1C

	// Methods

	// RVA: 0x3B8 Offset: 0x3B8 VA: 0x3B8
	public void .ctor() { }
}

// Namespace: System
internal static class MonoCustomAttrs // TypeDefIndex: 310
{
	// Fields
	private static Assembly corlib; // 0x0
	[ThreadStaticAttribute] // RVA: 0x551 Offset: 0x551 VA: 0x551
	private static Dictionary<Type, AttributeUsageAttribute> usage_cache; // 0x80000000
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x4

	// Methods

	// RVA: 0x46E Offset: 0x46E VA: 0x46E
	private static bool IsUserCattrProvider(object obj) { }

	// RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs) { }

	// RVA: 0x2A5 Offset: 0x2A5 VA: 0x2A5
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x46F Offset: 0x46F VA: 0x46F
	private static object[] GetPseudoCustomAttributes(Type type) { }

	// RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType, bool inheritedOnly) { }

	// RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit) { }

	// RVA: 0x470 Offset: 0x470 VA: 0x470
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj) { }

	// RVA: 0x471 Offset: 0x471 VA: 0x471
	internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj) { }

	// RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType) { }

	// RVA: 0x472 Offset: 0x472 VA: 0x472
	private static PropertyInfo GetBasePropertyDefinition(MonoProperty property) { }

	// RVA: 0x473 Offset: 0x473 VA: 0x473
	private static EventInfo GetBaseEventDefinition(MonoEvent evt) { }

	// RVA: 0x474 Offset: 0x474 VA: 0x474
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj) { }

	// RVA: 0x475 Offset: 0x475 VA: 0x475
	private static AttributeUsageAttribute RetrieveAttributeUsageNoCache(Type attributeType) { }

	// RVA: 0x476 Offset: 0x476 VA: 0x476
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType) { }

	// RVA: 0xEAD Offset: 0xEAD VA: 0xEAD
	private static void .cctor() { }
}

// Namespace: 
private class MonoCustomAttrs.AttributeInfo // TypeDefIndex: 311
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x8
	private int _inheritanceLevel; // 0xC

	// Properties
	public AttributeUsageAttribute Usage { get; }
	public int InheritanceLevel { get; }

	// Methods

	// RVA: 0x183 Offset: 0x183 VA: 0x183
	public void .ctor(AttributeUsageAttribute usage, int inheritanceLevel) { }

	// RVA: 0x477 Offset: 0x477 VA: 0x477
	public AttributeUsageAttribute get_Usage() { }

	// RVA: 0x478 Offset: 0x478 VA: 0x478
	public int get_InheritanceLevel() { }
}

// Namespace: System
internal sealed class MonoListItem // TypeDefIndex: 312
{
	// Fields
	private MonoListItem next; // 0x8
	private object data; // 0xC
}

// Namespace: System
internal sealed class MonoType : RuntimeType // TypeDefIndex: 313
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x336 Offset: 0x336 VA: 0x336
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 314
{
	// Fields
	private Delegate[] delegates; // 0x34

	// Methods

	// RVA: 0x184 Offset: 0x184 VA: 0x184 Slot: 8
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8 Slot: 0
	public sealed override bool Equals(object obj) { }

	// RVA: 0x479 Offset: 0x479 VA: 0x479 Slot: 2
	public sealed override int GetHashCode() { }

	// RVA: 0x47A Offset: 0x47A VA: 0x47A Slot: 7
	protected override MethodInfo GetMethodImpl() { }

	// RVA: 0x47B Offset: 0x47B VA: 0x47B Slot: 9
	public sealed override Delegate[] GetInvocationList() { }

	// RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9 Slot: 10
	protected sealed override Delegate CombineImpl(Delegate follow) { }

	// RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
	private int LastIndexOf(Delegate[] haystack, Delegate[] needle) { }

	// RVA: 0x2AA Offset: 0x2AA VA: 0x2AA Slot: 11
	protected sealed override Delegate RemoveImpl(Delegate value) { }
}

// Namespace: System
internal class NullConsoleDriver : IConsoleDriver // TypeDefIndex: 315
{
	// Fields
	private static readonly ConsoleKeyInfo EmptyConsoleKeyInfo; // 0xFFFFFFFF

	// Methods

	// RVA: 0x188 Offset: 0x188 VA: 0x188 Slot: 4
	public ConsoleKeyInfo ReadKey(bool intercept) { }

	// RVA: 0x3BF Offset: 0x3BF VA: 0x3BF
	public void .ctor() { }

	// RVA: 0xEAE Offset: 0xEAE VA: 0xEAE
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x337 Offset: 0x337 VA: 0x337
public static class Nullable // TypeDefIndex: 316
{
	// Methods

	// RVA: 0x47C Offset: 0x47C VA: 0x47C
	public static Type GetUnderlyingType(Type nullableType) { }
}

// Namespace: System
[DebuggerStepThroughAttribute] // RVA: 0x338 Offset: 0x338 VA: 0x338
[Serializable]
public struct Nullable<T> // TypeDefIndex: 317
{
	// Fields
	internal T value; // 0xFFFFFFFF
	internal bool has_value; // 0xFFFFFFFF

	// Properties
	public bool HasValue { get; }
	public T Value { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x86C Offset: 0x86C VA: 0x86C
	|-Nullable<bool>..ctor
	|
	|-RVA: 0xB4F Offset: 0xB4F VA: 0xB4F
	|-Nullable<int>..ctor
	*/

	// RVA: -1 Offset: -1
	public bool get_HasValue() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDDB Offset: 0xDDB VA: 0xDDB
	|-Nullable<bool>.get_HasValue
	|
	|-RVA: 0xDD9 Offset: 0xDD9 VA: 0xDD9
	|-Nullable<int>.get_HasValue
	*/

	// RVA: -1 Offset: -1
	public T get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDDC Offset: 0xDDC VA: 0xDDC
	|-Nullable<bool>.get_Value
	|
	|-RVA: 0xDDA Offset: 0xDDA VA: 0xDDA
	|-Nullable<int>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB8D Offset: 0xB8D VA: 0xB8D
	|-Nullable<bool>.Equals
	|
	|-RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
	|-Nullable<int>.Equals
	*/

	// RVA: -1 Offset: -1
	private bool Equals(Nullable<T> other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
	|-Nullable<bool>.Equals
	|
	|-RVA: 0xB90 Offset: 0xB90 VA: 0xB90
	|-Nullable<int>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x126C Offset: 0x126C VA: 0x126C
	|-Nullable<bool>.GetHashCode
	|
	|-RVA: 0x126F Offset: 0x126F VA: 0x126F
	|-Nullable<int>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x126D Offset: 0x126D VA: 0x126D
	|-Nullable<bool>.ToString
	|
	|-RVA: 0x1270 Offset: 0x1270 VA: 0x1270
	|-Nullable<int>.ToString
	*/

	// RVA: -1 Offset: -1
	private static object Box(Nullable<T> o) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x126E Offset: 0x126E VA: 0x126E
	|-Nullable<bool>.Box
	|
	|-RVA: 0x1271 Offset: 0x1271 VA: 0x1271
	|-Nullable<int>.Box
	*/

	// RVA: -1 Offset: -1
	private static Nullable<T> Unbox(object o) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB4E Offset: 0xB4E VA: 0xB4E
	|-Nullable<bool>.Unbox
	|
	|-RVA: 0xB50 Offset: 0xB50 VA: 0xB50
	|-Nullable<int>.Unbox
	*/
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 318
{
	// Fields
	private static readonly ulong* MantissaBitsTable; // 0x0
	private static readonly int* TensExponentTable; // 0x4
	private static readonly char* DigitLowerTable; // 0x8
	private static readonly char* DigitUpperTable; // 0xC
	private static readonly long* TenPowersList; // 0x10
	private static readonly int* DecHexDigits; // 0x14
	private NumberFormatInfo _nfi; // 0x8
	private char[] _cbuf; // 0xC
	private bool _NaN; // 0x10
	private bool _infinity; // 0x11
	private bool _isCustomFormat; // 0x12
	private bool _specifierIsUpper; // 0x13
	private bool _positive; // 0x14
	private char _specifier; // 0x16
	private int _precision; // 0x18
	private int _defPrecision; // 0x1C
	private int _digitsLen; // 0x20
	private int _offset; // 0x24
	private int _decPointPos; // 0x28
	private uint _val1; // 0x2C
	private uint _val2; // 0x30
	private uint _val3; // 0x34
	private uint _val4; // 0x38
	private int _ind; // 0x3C
	[ThreadStaticAttribute] // RVA: 0x552 Offset: 0x552 VA: 0x552
	private static NumberFormatter threadNumberFormatter; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x553 Offset: 0x553 VA: 0x553
	private static NumberFormatter userFormatProvider; // 0x80000004

	// Properties
	private CultureInfo CurrentCulture { set; }
	private int IntegerDigits { get; }
	private int DecimalDigits { get; }
	private bool IsFloatingSource { get; }
	private bool IsZero { get; }
	private bool IsZeroInteger { get; }

	// Methods

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	private static void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits) { }

	// RVA: 0xEB0 Offset: 0xEB0 VA: 0xEB0
	private static void .cctor() { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52
	private static long GetTenPowerOf(int i) { }

	// RVA: 0x218 Offset: 0x218 VA: 0x218
	private void InitDecHexDigits(uint value) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	private void InitDecHexDigits(ulong value) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	private void InitDecHexDigits(uint hi, ulong lo) { }

	// RVA: 0x47F Offset: 0x47F VA: 0x47F
	private static uint FastToDecHex(int val) { }

	// RVA: 0x480 Offset: 0x480 VA: 0x480
	private static uint ToDecHex(int val) { }

	// RVA: 0x481 Offset: 0x481 VA: 0x481
	private static int FastDecHexLen(int val) { }

	// RVA: 0x482 Offset: 0x482 VA: 0x482
	private static int DecHexLen(uint val) { }

	// RVA: 0x483 Offset: 0x483 VA: 0x483
	private int DecHexLen() { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	private static int ScaleOrder(long hi) { }

	// RVA: 0x484 Offset: 0x484 VA: 0x484
	private int InitialFloatingPrecision() { }

	// RVA: 0x485 Offset: 0x485 VA: 0x485
	private static int ParsePrecision(string format) { }

	// RVA: 0x219 Offset: 0x219 VA: 0x219
	private void .ctor(Thread current) { }

	// RVA: 0x21A Offset: 0x21A VA: 0x21A
	private void Init(string format) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	private void InitHex(ulong value) { }

	// RVA: 0x8C Offset: 0x8C VA: 0x8C
	private void Init(string format, int value, int defPrecision) { }

	// RVA: 0x8D Offset: 0x8D VA: 0x8D
	private void Init(string format, uint value, int defPrecision) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	private void Init(string format, long value) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	private void Init(string format, ulong value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private void Init(string format, double value, int defPrecision) { }

	// RVA: 0x18A Offset: 0x18A VA: 0x18A
	private void Init(string format, Decimal value) { }

	// RVA: 0x21B Offset: 0x21B VA: 0x21B
	private void ResetCharBuf(int size) { }

	// RVA: 0x21C Offset: 0x21C VA: 0x21C
	private void Resize(int len) { }

	// RVA: 0x21D Offset: 0x21D VA: 0x21D
	private void Append(char c) { }

	// RVA: 0x18B Offset: 0x18B VA: 0x18B
	private void Append(char c, int cnt) { }

	// RVA: 0x21E Offset: 0x21E VA: 0x21E
	private void Append(string s) { }

	// RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp) { }

	// RVA: 0x21F Offset: 0x21F VA: 0x21F
	private void set_CurrentCulture(CultureInfo value) { }

	// RVA: 0x486 Offset: 0x486 VA: 0x486
	private int get_IntegerDigits() { }

	// RVA: 0x487 Offset: 0x487 VA: 0x487
	private int get_DecimalDigits() { }

	// RVA: 0x488 Offset: 0x488 VA: 0x488
	private bool get_IsFloatingSource() { }

	// RVA: 0x489 Offset: 0x489 VA: 0x489
	private bool get_IsZero() { }

	// RVA: 0x48A Offset: 0x48A VA: 0x48A
	private bool get_IsZeroInteger() { }

	// RVA: 0x220 Offset: 0x220 VA: 0x220
	private void RoundPos(int pos) { }

	// RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
	private bool RoundDecimal(int decimals) { }

	// RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
	private bool RoundBits(int shift) { }

	// RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
	private void RemoveTrailingZeros() { }

	// RVA: 0x3C2 Offset: 0x3C2 VA: 0x3C2
	private void AddOneToDecHex() { }

	// RVA: 0x48B Offset: 0x48B VA: 0x48B
	private static uint AddOneToDecHex(uint val) { }

	// RVA: 0x48C Offset: 0x48C VA: 0x48C
	private int CountTrailingZeros() { }

	// RVA: 0x48D Offset: 0x48D VA: 0x48D
	private static int CountTrailingZeros(uint val) { }

	// RVA: 0x48E Offset: 0x48E VA: 0x48E
	private static NumberFormatter GetInstance(IFormatProvider fp) { }

	// RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3
	private void Release() { }

	// RVA: 0x8AA Offset: 0x8AA VA: 0x8AA
	public static string NumberToString(string format, uint value, IFormatProvider fp) { }

	// RVA: 0x8AB Offset: 0x8AB VA: 0x8AB
	public static string NumberToString(string format, int value, IFormatProvider fp) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static string NumberToString(string format, ulong value, IFormatProvider fp) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static string NumberToString(string format, long value, IFormatProvider fp) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static string NumberToString(string format, float value, IFormatProvider fp) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static string NumberToString(string format, double value, IFormatProvider fp) { }

	// RVA: 0x8AC Offset: 0x8AC VA: 0x8AC
	public static string NumberToString(string format, Decimal value, IFormatProvider fp) { }

	// RVA: 0x8AD Offset: 0x8AD VA: 0x8AD
	private string IntegerToString(string format, IFormatProvider fp) { }

	// RVA: 0x8AE Offset: 0x8AE VA: 0x8AE
	private string NumberToString(string format, NumberFormatInfo nfi) { }

	// RVA: 0x8AF Offset: 0x8AF VA: 0x8AF
	private string FormatCurrency(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
	private string FormatDecimal(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x2BB Offset: 0x2BB VA: 0x2BB
	private string FormatHexadecimal(int precision) { }

	// RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
	private string FormatFixedPoint(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi) { }

	// RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
	private string FormatGeneral(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
	private string FormatNumber(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
	private string FormatPercent(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
	private string FormatExponential(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x92 Offset: 0x92 VA: 0x92
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits) { }

	// RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
	private string FormatCustom(string format, NumberFormatInfo nfi) { }

	// RVA: 0x221 Offset: 0x221 VA: 0x221
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty) { }

	// RVA: 0x48F Offset: 0x48F VA: 0x48F
	private static bool IsZeroOnly(StringBuilder sb) { }

	// RVA: 0x222 Offset: 0x222 VA: 0x222
	private static void AppendNonNegativeNumber(StringBuilder sb, int v) { }

	// RVA: 0x18C Offset: 0x18C VA: 0x18C
	private void AppendIntegerString(int minLength, StringBuilder sb) { }

	// RVA: 0x223 Offset: 0x223 VA: 0x223
	private void AppendIntegerString(int minLength) { }

	// RVA: 0x18D Offset: 0x18D VA: 0x18D
	private void AppendDecimalString(int precision, StringBuilder sb) { }

	// RVA: 0x224 Offset: 0x224 VA: 0x224
	private void AppendDecimalString(int precision) { }

	// RVA: 0x18E Offset: 0x18E VA: 0x18E
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator) { }

	// RVA: 0x8E Offset: 0x8E VA: 0x8E
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits) { }

	// RVA: 0x225 Offset: 0x225 VA: 0x225
	private void AppendOneDigit(int start) { }

	// RVA: 0x18F Offset: 0x18F VA: 0x18F
	private void AppendDigits(int start, int end) { }

	// RVA: 0x8F Offset: 0x8F VA: 0x8F
	private void AppendDigits(int start, int end, StringBuilder sb) { }

	// RVA: 0x226 Offset: 0x226 VA: 0x226
	private void Multiply10(int count) { }

	// RVA: 0x227 Offset: 0x227 VA: 0x227
	private void Divide10(int count) { }

	// RVA: 0x490 Offset: 0x490 VA: 0x490
	private NumberFormatter GetClone() { }
}

// Namespace: 
private class NumberFormatter.CustomInfo // TypeDefIndex: 319
{
	// Fields
	public bool UseGroup; // 0x8
	public int DecimalDigits; // 0xC
	public int DecimalPointPos; // 0x10
	public int DecimalTailSharpDigits; // 0x14
	public int IntegerDigits; // 0x18
	public int IntegerHeadSharpDigits; // 0x1C
	public int IntegerHeadPos; // 0x20
	public bool UseExponent; // 0x24
	public int ExponentDigits; // 0x28
	public int ExponentTailSharpDigits; // 0x2C
	public bool ExponentNegativeSignOnly; // 0x30
	public int DividePlaces; // 0x34
	public int Percents; // 0x38
	public int Permilles; // 0x3C

	// Methods

	// RVA: 0x42 Offset: 0x42 VA: 0x42
	public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length) { }

	// RVA: 0x93 Offset: 0x93 VA: 0x93
	public static NumberFormatter.CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp) { }

	// RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4
	public void .ctor() { }
}

// Namespace: System
[ClassInterfaceAttribute] // RVA: 0x339 Offset: 0x339 VA: 0x339
[ComVisibleAttribute] // RVA: 0x339 Offset: 0x339 VA: 0x339
[Serializable]
public class Object // TypeDefIndex: 320
{
	// Methods

	// RVA: 0x2BC Offset: 0x2BC VA: 0x2BC Slot: 0
	public virtual bool Equals(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0x69E Offset: 0x69E VA: 0x69E
	// RVA: 0x3C5 Offset: 0x3C5 VA: 0x3C5
	public void .ctor() { }

	[ReliabilityContractAttribute] // RVA: 0x69F Offset: 0x69F VA: 0x69F
	// RVA: 0x3C6 Offset: 0x3C6 VA: 0x3C6 Slot: 1
	protected virtual void Finalize() { }

	// RVA: 0x491 Offset: 0x491 VA: 0x491 Slot: 2
	public virtual int GetHashCode() { }

	// RVA: 0x492 Offset: 0x492 VA: 0x492
	public Type GetType() { }

	// RVA: 0x493 Offset: 0x493 VA: 0x493
	protected object MemberwiseClone() { }

	// RVA: 0x494 Offset: 0x494 VA: 0x494 Slot: 3
	public virtual string ToString() { }

	[ReliabilityContractAttribute] // RVA: 0x6A0 Offset: 0x6A0 VA: 0x6A0
	// RVA: 0x2BD Offset: 0x2BD VA: 0x2BD
	public static bool ReferenceEquals(object objA, object objB) { }

	// RVA: 0x495 Offset: 0x495 VA: 0x495
	internal static int InternalGetHashCode(object o) { }

	// RVA: 0x90 Offset: 0x90 VA: 0x90
	private void FieldGetter(string typeName, string fieldName, ref object val) { }

	// RVA: 0x91 Offset: 0x91 VA: 0x91
	private void FieldSetter(string typeName, string fieldName, object val) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x33A Offset: 0x33A VA: 0x33A
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 321
{
	// Fields
	private PlatformID _platform; // 0x8
	private Version _version; // 0xC
	private string _servicePack; // 0x10

	// Properties
	public PlatformID Platform { get; }
	public Version Version { get; }
	public string ServicePack { get; }

	// Methods

	// RVA: 0x194 Offset: 0x194 VA: 0x194
	public void .ctor(PlatformID platform, Version version) { }

	// RVA: 0x195 Offset: 0x195 VA: 0x195
	private void .ctor(SerializationInfo information, StreamingContext context) { }

	// RVA: 0x498 Offset: 0x498 VA: 0x498
	public PlatformID get_Platform() { }

	// RVA: 0x499 Offset: 0x499 VA: 0x499
	public Version get_Version() { }

	// RVA: 0x49A Offset: 0x49A VA: 0x49A
	public string get_ServicePack() { }

	// RVA: 0x49B Offset: 0x49B VA: 0x49B Slot: 4
	public object Clone() { }

	// RVA: 0x196 Offset: 0x196 VA: 0x196 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x49C Offset: 0x49C VA: 0x49C Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x33B Offset: 0x33B VA: 0x33B
[Serializable]
public enum PlatformID // TypeDefIndex: 322
{
	// Fields
	public int value__; // 0x0
	public const PlatformID Win32S = 0;
	public const PlatformID Win32Windows = 1;
	public const PlatformID Win32NT = 2;
	public const PlatformID WinCE = 3;
	public const PlatformID Unix = 4;
	public const PlatformID Xbox = 5;
	public const PlatformID MacOSX = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x33C Offset: 0x33C VA: 0x33C
public class ResolveEventArgs : EventArgs // TypeDefIndex: 323
{
	// Fields
	private string m_Name; // 0x8
	private Assembly m_Requesting; // 0xC

	// Methods

	// RVA: 0x25F Offset: 0x25F VA: 0x25F
	public void .ctor(string name) { }

	// RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9
	public void .ctor(string name, Assembly requestingAssembly) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x33D Offset: 0x33D VA: 0x33D
[Serializable]
public sealed class ResolveEventHandler : MulticastDelegate // TypeDefIndex: 324
{
	// Methods

	// RVA: 0x1CA Offset: 0x1CA VA: 0x1CA
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4 Slot: 12
	public virtual Assembly Invoke(object sender, ResolveEventArgs args) { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, ResolveEventArgs args, AsyncCallback callback, object object) { }

	// RVA: 0x33A Offset: 0x33A VA: 0x33A Slot: 14
	public virtual Assembly EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x33E Offset: 0x33E VA: 0x33E
public struct RuntimeArgumentHandle // TypeDefIndex: 325
{
	// Fields
	internal IntPtr args; // 0x0
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x33F Offset: 0x33F VA: 0x33F
[Serializable]
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 326
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0x39B Offset: 0x39B VA: 0x39B
	internal void .ctor(IntPtr v) { }

	// RVA: 0x256 Offset: 0x256 VA: 0x256
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x7B7 Offset: 0x7B7 VA: 0x7B7
	public IntPtr get_Value() { }

	// RVA: 0x257 Offset: 0x257 VA: 0x257 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x6A1 Offset: 0x6A1 VA: 0x6A1
	// RVA: 0x3CE Offset: 0x3CE VA: 0x3CE Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x7B8 Offset: 0x7B8 VA: 0x7B8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x258 Offset: 0x258 VA: 0x258
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	internal static void SetValue(RtFieldInfo field, object obj, object value, RuntimeType fieldType, FieldAttributes fieldAttr, RuntimeType declaringType, ref bool domainInitialized) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57
	internal static void SetValueDirect(RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, object value, RuntimeType contextType) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x340 Offset: 0x340 VA: 0x340
[Serializable]
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 327
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0x39C Offset: 0x39C VA: 0x39C
	internal void .ctor(IntPtr v) { }

	// RVA: 0x259 Offset: 0x259 VA: 0x259
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x7B9 Offset: 0x7B9 VA: 0x7B9
	public IntPtr get_Value() { }

	// RVA: 0x25A Offset: 0x25A VA: 0x25A Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x6A2 Offset: 0x6A2 VA: 0x6A2
	// RVA: 0x3CF Offset: 0x3CF VA: 0x3CF Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x7BA Offset: 0x7BA VA: 0x7BA Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3D0 Offset: 0x3D0 VA: 0x3D0
	internal static string ConstructInstantiation(RuntimeMethodInfo method, TypeNameFormatFlags format) { }

	// RVA: 0x7BB Offset: 0x7BB VA: 0x7BB
	internal bool IsNullHandle() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x341 Offset: 0x341 VA: 0x341
[Serializable]
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 328
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0x39E Offset: 0x39E VA: 0x39E
	internal void .ctor(IntPtr val) { }

	// RVA: 0x39F Offset: 0x39F VA: 0x39F
	internal void .ctor(RuntimeType type) { }

	// RVA: 0x25D Offset: 0x25D VA: 0x25D
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	public IntPtr get_Value() { }

	// RVA: 0x25E Offset: 0x25E VA: 0x25E Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0x6A3 Offset: 0x6A3 VA: 0x6A3
	// RVA: 0x3EA Offset: 0x3EA VA: 0x3EA Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x7FB Offset: 0x7FB VA: 0x7FB Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x7FC Offset: 0x7FC VA: 0x7FC
	internal static TypeAttributes GetAttributes(RuntimeType type) { }

	// RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	private static int GetMetadataToken(RuntimeType type) { }

	// RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	internal static int GetToken(RuntimeType type) { }

	// RVA: 0x7FF Offset: 0x7FF VA: 0x7FF
	private static Type GetGenericTypeDefinition_impl(RuntimeType type) { }

	// RVA: 0x800 Offset: 0x800 VA: 0x800
	internal static Type GetGenericTypeDefinition(RuntimeType type) { }

	// RVA: 0x801 Offset: 0x801 VA: 0x801
	internal static bool HasElementType(RuntimeType type) { }

	// RVA: 0x802 Offset: 0x802 VA: 0x802
	internal static bool HasInstantiation(RuntimeType type) { }

	// RVA: 0x803 Offset: 0x803 VA: 0x803
	internal static bool IsArray(RuntimeType type) { }

	// RVA: 0x804 Offset: 0x804 VA: 0x804
	internal static bool IsByRef(RuntimeType type) { }

	// RVA: 0x805 Offset: 0x805 VA: 0x805
	internal static bool IsComObject(RuntimeType type) { }

	// RVA: 0x3EB Offset: 0x3EB VA: 0x3EB
	internal static bool IsInstanceOfType(RuntimeType type, object o) { }

	// RVA: 0x806 Offset: 0x806 VA: 0x806
	internal static bool IsPointer(RuntimeType type) { }

	// RVA: 0x807 Offset: 0x807 VA: 0x807
	internal static bool IsPrimitive(RuntimeType type) { }

	// RVA: 0x808 Offset: 0x808 VA: 0x808
	internal static bool HasReferences(RuntimeType type) { }

	// RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
	internal static bool IsComObject(RuntimeType type, bool isGenericCOM) { }

	// RVA: 0x809 Offset: 0x809 VA: 0x809
	internal static bool IsContextful(RuntimeType type) { }

	// RVA: 0x3ED Offset: 0x3ED VA: 0x3ED
	internal static bool IsEquivalentTo(RuntimeType rtType1, RuntimeType rtType2) { }

	// RVA: 0x80A Offset: 0x80A VA: 0x80A
	internal static bool IsSzArray(RuntimeType type) { }

	// RVA: 0x80B Offset: 0x80B VA: 0x80B
	internal static bool IsInterface(RuntimeType type) { }

	// RVA: 0x80C Offset: 0x80C VA: 0x80C
	internal static int GetArrayRank(RuntimeType type) { }

	// RVA: 0x80D Offset: 0x80D VA: 0x80D
	internal static RuntimeAssembly GetAssembly(RuntimeType type) { }

	// RVA: 0x80E Offset: 0x80E VA: 0x80E
	internal static RuntimeType GetElementType(RuntimeType type) { }

	// RVA: 0x80F Offset: 0x80F VA: 0x80F
	internal static RuntimeModule GetModule(RuntimeType type) { }

	// RVA: 0x810 Offset: 0x810 VA: 0x810
	internal static bool IsGenericVariable(RuntimeType type) { }

	// RVA: 0x811 Offset: 0x811 VA: 0x811
	internal static RuntimeType GetBaseType(RuntimeType type) { }

	// RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
	internal static bool CanCastTo(RuntimeType type, RuntimeType target) { }

	// RVA: 0x3EF Offset: 0x3EF VA: 0x3EF
	private static bool type_is_assignable_from(Type a, Type b) { }

	// RVA: 0x812 Offset: 0x812 VA: 0x812
	internal static bool IsGenericTypeDefinition(RuntimeType type) { }

	// RVA: 0x813 Offset: 0x813 VA: 0x813
	internal static IntPtr GetGenericParameterInfo(RuntimeType type) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x342 Offset: 0x342 VA: 0x342
[Serializable]
public enum StringComparison // TypeDefIndex: 329
{
	// Fields
	public int value__; // 0x0
	public const StringComparison CurrentCulture = 0;
	public const StringComparison CurrentCultureIgnoreCase = 1;
	public const StringComparison InvariantCulture = 2;
	public const StringComparison InvariantCultureIgnoreCase = 3;
	public const StringComparison Ordinal = 4;
	public const StringComparison OrdinalIgnoreCase = 5;
}

// Namespace: System
internal class TermInfoDriver : IConsoleDriver // TypeDefIndex: 330
{
	// Fields
	private static int* native_terminal_size; // 0x0
	private static int terminal_size; // 0x4
	private static readonly string[] locations; // 0x8
	private TermInfoReader reader; // 0x8
	private int cursorLeft; // 0xC
	private int cursorTop; // 0x10
	private string title; // 0x14
	private string titleFormat; // 0x18
	private bool cursorVisible; // 0x1C
	private string csrVisible; // 0x20
	private string csrInvisible; // 0x24
	private string clear; // 0x28
	private string bell; // 0x2C
	private string term; // 0x30
	private StreamReader stdin; // 0x34
	private CStreamWriter stdout; // 0x38
	private int windowWidth; // 0x3C
	private int windowHeight; // 0x40
	private int bufferHeight; // 0x44
	private int bufferWidth; // 0x48
	private char[] buffer; // 0x4C
	private int readpos; // 0x50
	private int writepos; // 0x54
	private string keypadXmit; // 0x58
	private string keypadLocal; // 0x5C
	private bool inited; // 0x60
	private object initLock; // 0x64
	private bool initKeys; // 0x68
	private string origPair; // 0x6C
	private string origColors; // 0x70
	private string cursorAddress; // 0x74
	private ConsoleColor fgcolor; // 0x78
	private string setfgcolor; // 0x7C
	private string setbgcolor; // 0x80
	private int maxColors; // 0x84
	private bool noGetPosition; // 0x88
	private Hashtable keymap; // 0x8C
	private ByteMatcher rootmap; // 0x90
	private int rl_startx; // 0x94
	private int rl_starty; // 0x98
	private byte[] control_characters; // 0x9C
	private static readonly int[] _consoleColorToAnsiCode; // 0xC
	private char[] echobuf; // 0xA0
	private int echon; // 0xA4

	// Properties
	public bool Initialized { get; }
	public int WindowHeight { get; }
	public int WindowWidth { get; }

	// Methods

	// RVA: 0x43F Offset: 0x43F VA: 0x43F
	private static string TryTermInfoDir(string dir, string term) { }

	// RVA: 0x849 Offset: 0x849 VA: 0x849
	private static string SearchTerminfo(string term) { }

	// RVA: 0x3B8 Offset: 0x3B8 VA: 0x3B8
	private void WriteConsole(string str) { }

	// RVA: 0x3B9 Offset: 0x3B9 VA: 0x3B9
	public void .ctor(string term) { }

	// RVA: 0x84A Offset: 0x84A VA: 0x84A Slot: 5
	public bool get_Initialized() { }

	// RVA: 0x50E Offset: 0x50E VA: 0x50E Slot: 6
	public void Init() { }

	// RVA: 0x50F Offset: 0x50F VA: 0x50F
	private void IncrementX() { }

	// RVA: 0x3BA Offset: 0x3BA VA: 0x3BA
	public void WriteSpecialKey(ConsoleKeyInfo key) { }

	// RVA: 0x3BB Offset: 0x3BB VA: 0x3BB
	public void WriteSpecialKey(char c) { }

	// RVA: 0x440 Offset: 0x440 VA: 0x440
	public bool IsSpecialKey(ConsoleKeyInfo key) { }

	// RVA: 0x441 Offset: 0x441 VA: 0x441
	public bool IsSpecialKey(char c) { }

	// RVA: 0x510 Offset: 0x510 VA: 0x510
	private void GetCursorPosition() { }

	// RVA: 0x511 Offset: 0x511 VA: 0x511
	private void CheckWindowDimensions() { }

	// RVA: 0x84B Offset: 0x84B VA: 0x84B Slot: 7
	public int get_WindowHeight() { }

	// RVA: 0x84C Offset: 0x84C VA: 0x84C Slot: 8
	public int get_WindowWidth() { }

	// RVA: 0x3BC Offset: 0x3BC VA: 0x3BC
	private void AddToBuffer(int b) { }

	// RVA: 0x512 Offset: 0x512 VA: 0x512
	private void AdjustBuffer() { }

	// RVA: 0xD0 Offset: 0xD0 VA: 0xD0
	private ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt) { }

	// RVA: 0x442 Offset: 0x442 VA: 0x442
	private object GetKeyFromBuffer(bool cooked) { }

	// RVA: 0x27E Offset: 0x27E VA: 0x27E
	private ConsoleKeyInfo ReadKeyInternal(out bool fresh) { }

	// RVA: 0x84D Offset: 0x84D VA: 0x84D
	private bool InputPending() { }

	// RVA: 0x3BD Offset: 0x3BD VA: 0x3BD
	private void QueueEcho(char c) { }

	// RVA: 0x3BE Offset: 0x3BE VA: 0x3BE
	private void Echo(ConsoleKeyInfo key) { }

	// RVA: 0x513 Offset: 0x513 VA: 0x513
	private void EchoFlush() { }

	// RVA: 0xD1 Offset: 0xD1 VA: 0xD1
	public int Read([In] [Out] char[] dest, int index, int count) { }

	// RVA: 0x27F Offset: 0x27F VA: 0x27F Slot: 4
	public ConsoleKeyInfo ReadKey(bool intercept) { }

	// RVA: 0x84E Offset: 0x84E VA: 0x84E Slot: 9
	public string ReadLine() { }

	// RVA: 0x84F Offset: 0x84F VA: 0x84F
	public string ReadToEnd() { }

	// RVA: 0x443 Offset: 0x443 VA: 0x443
	private string ReadUntilConditionInternal(bool haltOnNewLine) { }

	// RVA: 0x280 Offset: 0x280 VA: 0x280 Slot: 10
	public void SetCursorPosition(int left, int top) { }

	// RVA: 0x514 Offset: 0x514 VA: 0x514
	private void CreateKeyMap() { }

	// RVA: 0x515 Offset: 0x515 VA: 0x515
	private void InitKeys() { }

	// RVA: 0x3BF Offset: 0x3BF VA: 0x3BF
	private void AddStringMapping(TermInfoStrings s) { }

	// RVA: 0xEE9 Offset: 0xEE9 VA: 0xEE9
	private static void .cctor() { }
}

// Namespace: System
internal static class ParameterizedStrings // TypeDefIndex: 331
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x554 Offset: 0x554 VA: 0x554
	private static ParameterizedStrings.LowLevelStack _cachedStack; // 0x80000000

	// Methods

	// RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
	public static string Evaluate(string format, ParameterizedStrings.FormatParam[] args) { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34
	private static string EvaluateInternal(string format, ref int pos, ParameterizedStrings.FormatParam[] args, ParameterizedStrings.LowLevelStack stack, ref ParameterizedStrings.FormatParam[] dynamicVars, ref ParameterizedStrings.FormatParam[] staticVars) { }

	// RVA: 0x49F Offset: 0x49F VA: 0x49F
	private static bool AsBool(int i) { }

	// RVA: 0x4A0 Offset: 0x4A0 VA: 0x4A0
	private static int AsInt(bool b) { }

	// RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9
	private static string StringFromAsciiBytes(byte[] buffer, int offset, int length) { }

	// RVA: 0x94 Offset: 0x94 VA: 0x94
	private static extern int snprintf(byte* str, IntPtr size, string format, string arg1) { }

	// RVA: 0x95 Offset: 0x95 VA: 0x95
	private static extern int snprintf(byte* str, IntPtr size, string format, int arg1) { }

	// RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1
	private static string FormatPrintF(string format, object arg) { }

	// RVA: 0x96 Offset: 0x96 VA: 0x96
	private static ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref ParameterizedStrings.FormatParam[] dynamicVars, ref ParameterizedStrings.FormatParam[] staticVars, out int index) { }
}

// Namespace: 
public struct ParameterizedStrings.FormatParam // TypeDefIndex: 332
{
	// Fields
	private readonly int _int32; // 0x0
	private readonly string _string; // 0x4

	// Properties
	public int Int32 { get; }
	public string String { get; }
	public object Object { get; }

	// Methods

	// RVA: 0x22F Offset: 0x22F VA: 0x22F
	public void .ctor(int value) { }

	// RVA: 0x19C Offset: 0x19C VA: 0x19C
	private void .ctor(int intValue, string stringValue) { }

	// RVA: 0x230 Offset: 0x230 VA: 0x230
	public static ParameterizedStrings.FormatParam op_Implicit(int value) { }

	// RVA: 0x4A1 Offset: 0x4A1 VA: 0x4A1
	public int get_Int32() { }

	// RVA: 0x4A2 Offset: 0x4A2 VA: 0x4A2
	public string get_String() { }

	// RVA: 0x4A3 Offset: 0x4A3 VA: 0x4A3
	public object get_Object() { }
}

// Namespace: 
private sealed class ParameterizedStrings.LowLevelStack // TypeDefIndex: 333
{
	// Fields
	private ParameterizedStrings.FormatParam[] _arr; // 0x8
	private int _count; // 0xC

	// Methods

	// RVA: 0x3CD Offset: 0x3CD VA: 0x3CD
	public void .ctor() { }

	// RVA: 0x231 Offset: 0x231 VA: 0x231
	public ParameterizedStrings.FormatParam Pop() { }

	// RVA: 0x232 Offset: 0x232 VA: 0x232
	public void Push(ParameterizedStrings.FormatParam item) { }

	// RVA: 0x3CE Offset: 0x3CE VA: 0x3CE
	public void Clear() { }
}

// Namespace: System
internal class ByteMatcher // TypeDefIndex: 334
{
	// Fields
	private Hashtable map; // 0x8
	private Hashtable starts; // 0xC

	// Methods

	// RVA: 0x91 Offset: 0x91 VA: 0x91
	public void AddMapping(TermInfoStrings key, byte[] val) { }

	// RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
	public void Sort() { }

	// RVA: 0xE7 Offset: 0xE7 VA: 0xE7
	public bool StartsWith(int c) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	public TermInfoStrings Match(char[] buffer, int offset, int length, out int used) { }

	// RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
	public void .ctor() { }
}

// Namespace: System
internal enum TermInfoNumbers // TypeDefIndex: 335
{
	// Fields
	public int value__; // 0x0
	public const TermInfoNumbers Columns = 0;
	public const TermInfoNumbers InitTabs = 1;
	public const TermInfoNumbers Lines = 2;
	public const TermInfoNumbers LinesOfMemory = 3;
	public const TermInfoNumbers MagicCookieGlitch = 4;
	public const TermInfoNumbers PaddingBaudRate = 5;
	public const TermInfoNumbers VirtualTerminal = 6;
	public const TermInfoNumbers WidthStatusLine = 7;
	public const TermInfoNumbers NumLabels = 8;
	public const TermInfoNumbers LabelHeight = 9;
	public const TermInfoNumbers LabelWidth = 10;
	public const TermInfoNumbers MaxAttributes = 11;
	public const TermInfoNumbers MaximumWindows = 12;
	public const TermInfoNumbers MaxColors = 13;
	public const TermInfoNumbers MaxPairs = 14;
	public const TermInfoNumbers NoColorVideo = 15;
	public const TermInfoNumbers BufferCapacity = 16;
	public const TermInfoNumbers DotVertSpacing = 17;
	public const TermInfoNumbers DotHorzSpacing = 18;
	public const TermInfoNumbers MaxMicroAddress = 19;
	public const TermInfoNumbers MaxMicroJump = 20;
	public const TermInfoNumbers MicroColSize = 21;
	public const TermInfoNumbers MicroLineSize = 22;
	public const TermInfoNumbers NumberOfPins = 23;
	public const TermInfoNumbers OutputResChar = 24;
	public const TermInfoNumbers OutputResLine = 25;
	public const TermInfoNumbers OutputResHorzInch = 26;
	public const TermInfoNumbers OutputResVertInch = 27;
	public const TermInfoNumbers PrintRate = 28;
	public const TermInfoNumbers WideCharSize = 29;
	public const TermInfoNumbers Buttons = 30;
	public const TermInfoNumbers BitImageEntwining = 31;
	public const TermInfoNumbers BitImageType = 32;
	public const TermInfoNumbers Last = 33;
}

// Namespace: System
internal class TermInfoReader // TypeDefIndex: 336
{
	// Fields
	private short boolSize; // 0x8
	private short numSize; // 0xA
	private short strOffsets; // 0xC
	private byte[] buffer; // 0x10
	private int booleansOffset; // 0x14

	// Methods

	// RVA: 0x281 Offset: 0x281 VA: 0x281
	public void .ctor(string term, string filename) { }

	// RVA: 0x282 Offset: 0x282 VA: 0x282
	public void .ctor(string term, byte[] buffer) { }

	// RVA: 0x283 Offset: 0x283 VA: 0x283
	private void ReadHeader(byte[] buffer, ref int position) { }

	// RVA: 0x284 Offset: 0x284 VA: 0x284
	private void ReadNames(byte[] buffer, ref int position) { }

	// RVA: 0x444 Offset: 0x444 VA: 0x444
	public int Get(TermInfoNumbers number) { }

	// RVA: 0x445 Offset: 0x445 VA: 0x445
	public string Get(TermInfoStrings tstr) { }

	// RVA: 0x446 Offset: 0x446 VA: 0x446
	public byte[] GetStringBytes(TermInfoStrings tstr) { }

	// RVA: 0x98B Offset: 0x98B VA: 0x98B
	private short GetInt16(byte[] buffer, int offset) { }

	// RVA: 0x98C Offset: 0x98C VA: 0x98C
	private string GetString(byte[] buffer, int offset) { }

	// RVA: 0x98D Offset: 0x98D VA: 0x98D
	private byte[] GetStringBytes(byte[] buffer, int offset) { }
}

// Namespace: System
internal enum TermInfoStrings // TypeDefIndex: 337
{
	// Fields
	public int value__; // 0x0
	public const TermInfoStrings BackTab = 0;
	public const TermInfoStrings Bell = 1;
	public const TermInfoStrings CarriageReturn = 2;
	public const TermInfoStrings ChangeScrollRegion = 3;
	public const TermInfoStrings ClearAllTabs = 4;
	public const TermInfoStrings ClearScreen = 5;
	public const TermInfoStrings ClrEol = 6;
	public const TermInfoStrings ClrEos = 7;
	public const TermInfoStrings ColumnAddress = 8;
	public const TermInfoStrings CommandCharacter = 9;
	public const TermInfoStrings CursorAddress = 10;
	public const TermInfoStrings CursorDown = 11;
	public const TermInfoStrings CursorHome = 12;
	public const TermInfoStrings CursorInvisible = 13;
	public const TermInfoStrings CursorLeft = 14;
	public const TermInfoStrings CursorMemAddress = 15;
	public const TermInfoStrings CursorNormal = 16;
	public const TermInfoStrings CursorRight = 17;
	public const TermInfoStrings CursorToLl = 18;
	public const TermInfoStrings CursorUp = 19;
	public const TermInfoStrings CursorVisible = 20;
	public const TermInfoStrings DeleteCharacter = 21;
	public const TermInfoStrings DeleteLine = 22;
	public const TermInfoStrings DisStatusLine = 23;
	public const TermInfoStrings DownHalfLine = 24;
	public const TermInfoStrings EnterAltCharsetMode = 25;
	public const TermInfoStrings EnterBlinkMode = 26;
	public const TermInfoStrings EnterBoldMode = 27;
	public const TermInfoStrings EnterCaMode = 28;
	public const TermInfoStrings EnterDeleteMode = 29;
	public const TermInfoStrings EnterDimMode = 30;
	public const TermInfoStrings EnterInsertMode = 31;
	public const TermInfoStrings EnterSecureMode = 32;
	public const TermInfoStrings EnterProtectedMode = 33;
	public const TermInfoStrings EnterReverseMode = 34;
	public const TermInfoStrings EnterStandoutMode = 35;
	public const TermInfoStrings EnterUnderlineMode = 36;
	public const TermInfoStrings EraseChars = 37;
	public const TermInfoStrings ExitAltCharsetMode = 38;
	public const TermInfoStrings ExitAttributeMode = 39;
	public const TermInfoStrings ExitCaMode = 40;
	public const TermInfoStrings ExitDeleteMode = 41;
	public const TermInfoStrings ExitInsertMode = 42;
	public const TermInfoStrings ExitStandoutMode = 43;
	public const TermInfoStrings ExitUnderlineMode = 44;
	public const TermInfoStrings FlashScreen = 45;
	public const TermInfoStrings FormFeed = 46;
	public const TermInfoStrings FromStatusLine = 47;
	public const TermInfoStrings Init1string = 48;
	public const TermInfoStrings Init2string = 49;
	public const TermInfoStrings Init3string = 50;
	public const TermInfoStrings InitFile = 51;
	public const TermInfoStrings InsertCharacter = 52;
	public const TermInfoStrings InsertLine = 53;
	public const TermInfoStrings InsertPadding = 54;
	public const TermInfoStrings KeyBackspace = 55;
	public const TermInfoStrings KeyCatab = 56;
	public const TermInfoStrings KeyClear = 57;
	public const TermInfoStrings KeyCtab = 58;
	public const TermInfoStrings KeyDc = 59;
	public const TermInfoStrings KeyDl = 60;
	public const TermInfoStrings KeyDown = 61;
	public const TermInfoStrings KeyEic = 62;
	public const TermInfoStrings KeyEol = 63;
	public const TermInfoStrings KeyEos = 64;
	public const TermInfoStrings KeyF0 = 65;
	public const TermInfoStrings KeyF1 = 66;
	public const TermInfoStrings KeyF10 = 67;
	public const TermInfoStrings KeyF2 = 68;
	public const TermInfoStrings KeyF3 = 69;
	public const TermInfoStrings KeyF4 = 70;
	public const TermInfoStrings KeyF5 = 71;
	public const TermInfoStrings KeyF6 = 72;
	public const TermInfoStrings KeyF7 = 73;
	public const TermInfoStrings KeyF8 = 74;
	public const TermInfoStrings KeyF9 = 75;
	public const TermInfoStrings KeyHome = 76;
	public const TermInfoStrings KeyIc = 77;
	public const TermInfoStrings KeyIl = 78;
	public const TermInfoStrings KeyLeft = 79;
	public const TermInfoStrings KeyLl = 80;
	public const TermInfoStrings KeyNpage = 81;
	public const TermInfoStrings KeyPpage = 82;
	public const TermInfoStrings KeyRight = 83;
	public const TermInfoStrings KeySf = 84;
	public const TermInfoStrings KeySr = 85;
	public const TermInfoStrings KeyStab = 86;
	public const TermInfoStrings KeyUp = 87;
	public const TermInfoStrings KeypadLocal = 88;
	public const TermInfoStrings KeypadXmit = 89;
	public const TermInfoStrings LabF0 = 90;
	public const TermInfoStrings LabF1 = 91;
	public const TermInfoStrings LabF10 = 92;
	public const TermInfoStrings LabF2 = 93;
	public const TermInfoStrings LabF3 = 94;
	public const TermInfoStrings LabF4 = 95;
	public const TermInfoStrings LabF5 = 96;
	public const TermInfoStrings LabF6 = 97;
	public const TermInfoStrings LabF7 = 98;
	public const TermInfoStrings LabF8 = 99;
	public const TermInfoStrings LabF9 = 100;
	public const TermInfoStrings MetaOff = 101;
	public const TermInfoStrings MetaOn = 102;
	public const TermInfoStrings Newline = 103;
	public const TermInfoStrings PadChar = 104;
	public const TermInfoStrings ParmDch = 105;
	public const TermInfoStrings ParmDeleteLine = 106;
	public const TermInfoStrings ParmDownCursor = 107;
	public const TermInfoStrings ParmIch = 108;
	public const TermInfoStrings ParmIndex = 109;
	public const TermInfoStrings ParmInsertLine = 110;
	public const TermInfoStrings ParmLeftCursor = 111;
	public const TermInfoStrings ParmRightCursor = 112;
	public const TermInfoStrings ParmRindex = 113;
	public const TermInfoStrings ParmUpCursor = 114;
	public const TermInfoStrings PkeyKey = 115;
	public const TermInfoStrings PkeyLocal = 116;
	public const TermInfoStrings PkeyXmit = 117;
	public const TermInfoStrings PrintScreen = 118;
	public const TermInfoStrings PrtrOff = 119;
	public const TermInfoStrings PrtrOn = 120;
	public const TermInfoStrings RepeatChar = 121;
	public const TermInfoStrings Reset1string = 122;
	public const TermInfoStrings Reset2string = 123;
	public const TermInfoStrings Reset3string = 124;
	public const TermInfoStrings ResetFile = 125;
	public const TermInfoStrings RestoreCursor = 126;
	public const TermInfoStrings RowAddress = 127;
	public const TermInfoStrings SaveCursor = 128;
	public const TermInfoStrings ScrollForward = 129;
	public const TermInfoStrings ScrollReverse = 130;
	public const TermInfoStrings SetAttributes = 131;
	public const TermInfoStrings SetTab = 132;
	public const TermInfoStrings SetWindow = 133;
	public const TermInfoStrings Tab = 134;
	public const TermInfoStrings ToStatusLine = 135;
	public const TermInfoStrings UnderlineChar = 136;
	public const TermInfoStrings UpHalfLine = 137;
	public const TermInfoStrings InitProg = 138;
	public const TermInfoStrings KeyA1 = 139;
	public const TermInfoStrings KeyA3 = 140;
	public const TermInfoStrings KeyB2 = 141;
	public const TermInfoStrings KeyC1 = 142;
	public const TermInfoStrings KeyC3 = 143;
	public const TermInfoStrings PrtrNon = 144;
	public const TermInfoStrings CharPadding = 145;
	public const TermInfoStrings AcsChars = 146;
	public const TermInfoStrings PlabNorm = 147;
	public const TermInfoStrings KeyBtab = 148;
	public const TermInfoStrings EnterXonMode = 149;
	public const TermInfoStrings ExitXonMode = 150;
	public const TermInfoStrings EnterAmMode = 151;
	public const TermInfoStrings ExitAmMode = 152;
	public const TermInfoStrings XonCharacter = 153;
	public const TermInfoStrings XoffCharacter = 154;
	public const TermInfoStrings EnaAcs = 155;
	public const TermInfoStrings LabelOn = 156;
	public const TermInfoStrings LabelOff = 157;
	public const TermInfoStrings KeyBeg = 158;
	public const TermInfoStrings KeyCancel = 159;
	public const TermInfoStrings KeyClose = 160;
	public const TermInfoStrings KeyCommand = 161;
	public const TermInfoStrings KeyCopy = 162;
	public const TermInfoStrings KeyCreate = 163;
	public const TermInfoStrings KeyEnd = 164;
	public const TermInfoStrings KeyEnter = 165;
	public const TermInfoStrings KeyExit = 166;
	public const TermInfoStrings KeyFind = 167;
	public const TermInfoStrings KeyHelp = 168;
	public const TermInfoStrings KeyMark = 169;
	public const TermInfoStrings KeyMessage = 170;
	public const TermInfoStrings KeyMove = 171;
	public const TermInfoStrings KeyNext = 172;
	public const TermInfoStrings KeyOpen = 173;
	public const TermInfoStrings KeyOptions = 174;
	public const TermInfoStrings KeyPrevious = 175;
	public const TermInfoStrings KeyPrint = 176;
	public const TermInfoStrings KeyRedo = 177;
	public const TermInfoStrings KeyReference = 178;
	public const TermInfoStrings KeyRefresh = 179;
	public const TermInfoStrings KeyReplace = 180;
	public const TermInfoStrings KeyRestart = 181;
	public const TermInfoStrings KeyResume = 182;
	public const TermInfoStrings KeySave = 183;
	public const TermInfoStrings KeySuspend = 184;
	public const TermInfoStrings KeyUndo = 185;
	public const TermInfoStrings KeySbeg = 186;
	public const TermInfoStrings KeyScancel = 187;
	public const TermInfoStrings KeyScommand = 188;
	public const TermInfoStrings KeyScopy = 189;
	public const TermInfoStrings KeyScreate = 190;
	public const TermInfoStrings KeySdc = 191;
	public const TermInfoStrings KeySdl = 192;
	public const TermInfoStrings KeySelect = 193;
	public const TermInfoStrings KeySend = 194;
	public const TermInfoStrings KeySeol = 195;
	public const TermInfoStrings KeySexit = 196;
	public const TermInfoStrings KeySfind = 197;
	public const TermInfoStrings KeyShelp = 198;
	public const TermInfoStrings KeyShome = 199;
	public const TermInfoStrings KeySic = 200;
	public const TermInfoStrings KeySleft = 201;
	public const TermInfoStrings KeySmessage = 202;
	public const TermInfoStrings KeySmove = 203;
	public const TermInfoStrings KeySnext = 204;
	public const TermInfoStrings KeySoptions = 205;
	public const TermInfoStrings KeySprevious = 206;
	public const TermInfoStrings KeySprint = 207;
	public const TermInfoStrings KeySredo = 208;
	public const TermInfoStrings KeySreplace = 209;
	public const TermInfoStrings KeySright = 210;
	public const TermInfoStrings KeySrsume = 211;
	public const TermInfoStrings KeySsave = 212;
	public const TermInfoStrings KeySsuspend = 213;
	public const TermInfoStrings KeySundo = 214;
	public const TermInfoStrings ReqForInput = 215;
	public const TermInfoStrings KeyF11 = 216;
	public const TermInfoStrings KeyF12 = 217;
	public const TermInfoStrings KeyF13 = 218;
	public const TermInfoStrings KeyF14 = 219;
	public const TermInfoStrings KeyF15 = 220;
	public const TermInfoStrings KeyF16 = 221;
	public const TermInfoStrings KeyF17 = 222;
	public const TermInfoStrings KeyF18 = 223;
	public const TermInfoStrings KeyF19 = 224;
	public const TermInfoStrings KeyF20 = 225;
	public const TermInfoStrings KeyF21 = 226;
	public const TermInfoStrings KeyF22 = 227;
	public const TermInfoStrings KeyF23 = 228;
	public const TermInfoStrings KeyF24 = 229;
	public const TermInfoStrings KeyF25 = 230;
	public const TermInfoStrings KeyF26 = 231;
	public const TermInfoStrings KeyF27 = 232;
	public const TermInfoStrings KeyF28 = 233;
	public const TermInfoStrings KeyF29 = 234;
	public const TermInfoStrings KeyF30 = 235;
	public const TermInfoStrings KeyF31 = 236;
	public const TermInfoStrings KeyF32 = 237;
	public const TermInfoStrings KeyF33 = 238;
	public const TermInfoStrings KeyF34 = 239;
	public const TermInfoStrings KeyF35 = 240;
	public const TermInfoStrings KeyF36 = 241;
	public const TermInfoStrings KeyF37 = 242;
	public const TermInfoStrings KeyF38 = 243;
	public const TermInfoStrings KeyF39 = 244;
	public const TermInfoStrings KeyF40 = 245;
	public const TermInfoStrings KeyF41 = 246;
	public const TermInfoStrings KeyF42 = 247;
	public const TermInfoStrings KeyF43 = 248;
	public const TermInfoStrings KeyF44 = 249;
	public const TermInfoStrings KeyF45 = 250;
	public const TermInfoStrings KeyF46 = 251;
	public const TermInfoStrings KeyF47 = 252;
	public const TermInfoStrings KeyF48 = 253;
	public const TermInfoStrings KeyF49 = 254;
	public const TermInfoStrings KeyF50 = 255;
	public const TermInfoStrings KeyF51 = 256;
	public const TermInfoStrings KeyF52 = 257;
	public const TermInfoStrings KeyF53 = 258;
	public const TermInfoStrings KeyF54 = 259;
	public const TermInfoStrings KeyF55 = 260;
	public const TermInfoStrings KeyF56 = 261;
	public const TermInfoStrings KeyF57 = 262;
	public const TermInfoStrings KeyF58 = 263;
	public const TermInfoStrings KeyF59 = 264;
	public const TermInfoStrings KeyF60 = 265;
	public const TermInfoStrings KeyF61 = 266;
	public const TermInfoStrings KeyF62 = 267;
	public const TermInfoStrings KeyF63 = 268;
	public const TermInfoStrings ClrBol = 269;
	public const TermInfoStrings ClearMargins = 270;
	public const TermInfoStrings SetLeftMargin = 271;
	public const TermInfoStrings SetRightMargin = 272;
	public const TermInfoStrings LabelFormat = 273;
	public const TermInfoStrings SetClock = 274;
	public const TermInfoStrings DisplayClock = 275;
	public const TermInfoStrings RemoveClock = 276;
	public const TermInfoStrings CreateWindow = 277;
	public const TermInfoStrings GotoWindow = 278;
	public const TermInfoStrings Hangup = 279;
	public const TermInfoStrings DialPhone = 280;
	public const TermInfoStrings QuickDial = 281;
	public const TermInfoStrings Tone = 282;
	public const TermInfoStrings Pulse = 283;
	public const TermInfoStrings FlashHook = 284;
	public const TermInfoStrings FixedPause = 285;
	public const TermInfoStrings WaitTone = 286;
	public const TermInfoStrings User0 = 287;
	public const TermInfoStrings User1 = 288;
	public const TermInfoStrings User2 = 289;
	public const TermInfoStrings User3 = 290;
	public const TermInfoStrings User4 = 291;
	public const TermInfoStrings User5 = 292;
	public const TermInfoStrings User6 = 293;
	public const TermInfoStrings User7 = 294;
	public const TermInfoStrings User8 = 295;
	public const TermInfoStrings User9 = 296;
	public const TermInfoStrings OrigPair = 297;
	public const TermInfoStrings OrigColors = 298;
	public const TermInfoStrings InitializeColor = 299;
	public const TermInfoStrings InitializePair = 300;
	public const TermInfoStrings SetColorPair = 301;
	public const TermInfoStrings SetForeground = 302;
	public const TermInfoStrings SetBackground = 303;
	public const TermInfoStrings ChangeCharPitch = 304;
	public const TermInfoStrings ChangeLinePitch = 305;
	public const TermInfoStrings ChangeResHorz = 306;
	public const TermInfoStrings ChangeResVert = 307;
	public const TermInfoStrings DefineChar = 308;
	public const TermInfoStrings EnterDoublewideMode = 309;
	public const TermInfoStrings EnterDraftQuality = 310;
	public const TermInfoStrings EnterItalicsMode = 311;
	public const TermInfoStrings EnterLeftwardMode = 312;
	public const TermInfoStrings EnterMicroMode = 313;
	public const TermInfoStrings EnterNearLetterQuality = 314;
	public const TermInfoStrings EnterNormalQuality = 315;
	public const TermInfoStrings EnterShadowMode = 316;
	public const TermInfoStrings EnterSubscriptMode = 317;
	public const TermInfoStrings EnterSuperscriptMode = 318;
	public const TermInfoStrings EnterUpwardMode = 319;
	public const TermInfoStrings ExitDoublewideMode = 320;
	public const TermInfoStrings ExitItalicsMode = 321;
	public const TermInfoStrings ExitLeftwardMode = 322;
	public const TermInfoStrings ExitMicroMode = 323;
	public const TermInfoStrings ExitShadowMode = 324;
	public const TermInfoStrings ExitSubscriptMode = 325;
	public const TermInfoStrings ExitSuperscriptMode = 326;
	public const TermInfoStrings ExitUpwardMode = 327;
	public const TermInfoStrings MicroColumnAddress = 328;
	public const TermInfoStrings MicroDown = 329;
	public const TermInfoStrings MicroLeft = 330;
	public const TermInfoStrings MicroRight = 331;
	public const TermInfoStrings MicroRowAddress = 332;
	public const TermInfoStrings MicroUp = 333;
	public const TermInfoStrings OrderOfPins = 334;
	public const TermInfoStrings ParmDownMicro = 335;
	public const TermInfoStrings ParmLeftMicro = 336;
	public const TermInfoStrings ParmRightMicro = 337;
	public const TermInfoStrings ParmUpMicro = 338;
	public const TermInfoStrings SelectCharSet = 339;
	public const TermInfoStrings SetBottomMargin = 340;
	public const TermInfoStrings SetBottomMarginParm = 341;
	public const TermInfoStrings SetLeftMarginParm = 342;
	public const TermInfoStrings SetRightMarginParm = 343;
	public const TermInfoStrings SetTopMargin = 344;
	public const TermInfoStrings SetTopMarginParm = 345;
	public const TermInfoStrings StartBitImage = 346;
	public const TermInfoStrings StartCharSetDef = 347;
	public const TermInfoStrings StopBitImage = 348;
	public const TermInfoStrings StopCharSetDef = 349;
	public const TermInfoStrings SubscriptCharacters = 350;
	public const TermInfoStrings SuperscriptCharacters = 351;
	public const TermInfoStrings TheseCauseCr = 352;
	public const TermInfoStrings ZeroMotion = 353;
	public const TermInfoStrings CharSetNames = 354;
	public const TermInfoStrings KeyMouse = 355;
	public const TermInfoStrings MouseInfo = 356;
	public const TermInfoStrings ReqMousePos = 357;
	public const TermInfoStrings GetMouse = 358;
	public const TermInfoStrings SetAForeground = 359;
	public const TermInfoStrings SetABackground = 360;
	public const TermInfoStrings PkeyPlab = 361;
	public const TermInfoStrings DeviceType = 362;
	public const TermInfoStrings CodeSetInit = 363;
	public const TermInfoStrings Set0DesSeq = 364;
	public const TermInfoStrings Set1DesSeq = 365;
	public const TermInfoStrings Set2DesSeq = 366;
	public const TermInfoStrings Set3DesSeq = 367;
	public const TermInfoStrings SetLrMargin = 368;
	public const TermInfoStrings SetTbMargin = 369;
	public const TermInfoStrings BitImageRepeat = 370;
	public const TermInfoStrings BitImageNewline = 371;
	public const TermInfoStrings BitImageCarriageReturn = 372;
	public const TermInfoStrings ColorNames = 373;
	public const TermInfoStrings DefineBitImageRegion = 374;
	public const TermInfoStrings EndBitImageRegion = 375;
	public const TermInfoStrings SetColorBand = 376;
	public const TermInfoStrings SetPageLength = 377;
	public const TermInfoStrings DisplayPcChar = 378;
	public const TermInfoStrings EnterPcCharsetMode = 379;
	public const TermInfoStrings ExitPcCharsetMode = 380;
	public const TermInfoStrings EnterScancodeMode = 381;
	public const TermInfoStrings ExitScancodeMode = 382;
	public const TermInfoStrings PcTermOptions = 383;
	public const TermInfoStrings ScancodeEscape = 384;
	public const TermInfoStrings AltScancodeEsc = 385;
	public const TermInfoStrings EnterHorizontalHlMode = 386;
	public const TermInfoStrings EnterLeftHlMode = 387;
	public const TermInfoStrings EnterLowHlMode = 388;
	public const TermInfoStrings EnterRightHlMode = 389;
	public const TermInfoStrings EnterTopHlMode = 390;
	public const TermInfoStrings EnterVerticalHlMode = 391;
	public const TermInfoStrings SetAAttributes = 392;
	public const TermInfoStrings SetPglenInch = 393;
	public const TermInfoStrings Last = 394;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x343 Offset: 0x343 VA: 0x343
[Serializable]
public abstract class TimeZone // TypeDefIndex: 338
{
	// Fields
	private static object tz_lock; // 0xFFFFFFFF

	// Methods

	// RVA: 0x5DE Offset: 0x5DE VA: 0x5DE
	protected void .ctor() { }

	// RVA: 0xF14 Offset: 0xF14 VA: 0xF14
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone // TypeDefIndex: 339
{
	// Fields
	private readonly TimeZoneInfo LocalTimeZone; // 0x8

	// Methods

	// RVA: 0x2CE Offset: 0x2CE VA: 0x2CE
	internal void .ctor() { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40
	public static bool GetTimeZoneData(int year, out long[] data, out string[] names, out bool daylight_inverted) { }
}

// Namespace: System
internal class TimeType // TypeDefIndex: 340
{
	// Fields
	public readonly int Offset; // 0x8
	public readonly bool IsDst; // 0xC
	public string Name; // 0x10

	// Methods

	// RVA: 0xE4 Offset: 0xE4 VA: 0xE4
	public void .ctor(int offset, bool is_dst, string abbrev) { }

	// RVA: 0x93F Offset: 0x93F VA: 0x93F Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x344 Offset: 0x344 VA: 0x344
[Serializable]
public enum TypeCode // TypeDefIndex: 341
{
	// Fields
	public int value__; // 0x0
	public const TypeCode Empty = 0;
	public const TypeCode Object = 1;
	public const TypeCode DBNull = 2;
	public const TypeCode Boolean = 3;
	public const TypeCode Char = 4;
	public const TypeCode SByte = 5;
	public const TypeCode Byte = 6;
	public const TypeCode Int16 = 7;
	public const TypeCode UInt16 = 8;
	public const TypeCode Int32 = 9;
	public const TypeCode UInt32 = 10;
	public const TypeCode Int64 = 11;
	public const TypeCode UInt64 = 12;
	public const TypeCode Single = 13;
	public const TypeCode Double = 14;
	public const TypeCode Decimal = 15;
	public const TypeCode DateTime = 16;
	public const TypeCode String = 18;
}

// Namespace: System
internal interface TypeName : IEquatable<TypeName> // TypeDefIndex: 342
{
	// Properties
	public abstract string DisplayName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_DisplayName() { }
}

// Namespace: System
internal interface TypeIdentifier : TypeName, IEquatable<TypeName> // TypeDefIndex: 343
{
	// Properties
	public abstract string InternalName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_InternalName() { }
}

// Namespace: System
internal class TypeNames // TypeDefIndex: 344
{}

// Namespace: 
internal abstract class TypeNames.ATypeName : TypeName, IEquatable<TypeName> // TypeDefIndex: 345
{
	// Properties
	public abstract string DisplayName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 6
	public abstract string get_DisplayName() { }

	// RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0 Slot: 5
	public bool Equals(TypeName other) { }

	// RVA: 0x99B Offset: 0x99B VA: 0x99B Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x4E1 Offset: 0x4E1 VA: 0x4E1 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x5E8 Offset: 0x5E8 VA: 0x5E8
	protected void .ctor() { }
}

// Namespace: System
internal class TypeIdentifiers // TypeDefIndex: 346
{
	// Methods

	// RVA: 0x995 Offset: 0x995 VA: 0x995
	internal static TypeIdentifier FromDisplay(string displayName) { }
}

// Namespace: 
private class TypeIdentifiers.Display : TypeNames.ATypeName, TypeIdentifier, TypeName, IEquatable<TypeName> // TypeDefIndex: 347
{
	// Fields
	private string displayName; // 0x8
	private string internal_name; // 0xC

	// Properties
	public override string DisplayName { get; }
	public string InternalName { get; }

	// Methods

	// RVA: 0x46B Offset: 0x46B VA: 0x46B
	internal void .ctor(string displayName) { }

	// RVA: 0x996 Offset: 0x996 VA: 0x996 Slot: 6
	public override string get_DisplayName() { }

	// RVA: 0x997 Offset: 0x997 VA: 0x997 Slot: 7
	public string get_InternalName() { }

	// RVA: 0x998 Offset: 0x998 VA: 0x998
	private string GetInternalName() { }
}

// Namespace: System
internal interface ModifierSpec // TypeDefIndex: 348
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Type Resolve(Type type) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract StringBuilder Append(StringBuilder sb) { }
}

// Namespace: System
internal class ArraySpec : ModifierSpec // TypeDefIndex: 349
{
	// Fields
	private int dimensions; // 0x8
	private bool bound; // 0xC

	// Methods

	// RVA: 0x82 Offset: 0x82 VA: 0x82
	internal void .ctor(int dimensions, bool bound) { }

	// RVA: 0xBF Offset: 0xBF VA: 0xBF Slot: 4
	public Type Resolve(Type type) { }

	// RVA: 0xC0 Offset: 0xC0 VA: 0xC0 Slot: 5
	public StringBuilder Append(StringBuilder sb) { }

	// RVA: 0x176 Offset: 0x176 VA: 0x176 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal class PointerSpec : ModifierSpec // TypeDefIndex: 350
{
	// Fields
	private int pointer_level; // 0x8

	// Methods

	// RVA: 0x235 Offset: 0x235 VA: 0x235
	internal void .ctor(int pointer_level) { }

	// RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4 Slot: 4
	public Type Resolve(Type type) { }

	// RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5 Slot: 5
	public StringBuilder Append(StringBuilder sb) { }

	// RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal class TypeSpec // TypeDefIndex: 351
{
	// Fields
	private TypeIdentifier name; // 0x8
	private string assembly_name; // 0xC
	private List<TypeIdentifier> nested; // 0x10
	private List<TypeSpec> generic_params; // 0x14
	private List<ModifierSpec> modifier_spec; // 0x18
	private bool is_byref; // 0x1C
	private string display_fullname; // 0x20

	// Properties
	internal bool HasModifiers { get; }
	internal string DisplayFullName { get; }

	// Methods

	// RVA: 0x99C Offset: 0x99C VA: 0x99C
	internal bool get_HasModifiers() { }

	// RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2
	private string GetDisplayFullName(TypeSpec.DisplayNameFormat flags) { }

	// RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3
	private StringBuilder GetModifierString(StringBuilder sb) { }

	// RVA: 0x99D Offset: 0x99D VA: 0x99D
	internal string get_DisplayFullName() { }

	// RVA: 0x99E Offset: 0x99E VA: 0x99E
	internal static TypeSpec Parse(string typeName) { }

	// RVA: 0x99F Offset: 0x99F VA: 0x99F
	internal static string UnescapeInternalName(string displayName) { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A
	internal Type Resolve(Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x46D Offset: 0x46D VA: 0x46D
	private void AddName(string type_name) { }

	// RVA: 0x46E Offset: 0x46E VA: 0x46E
	private void AddModifier(ModifierSpec md) { }

	// RVA: 0x46F Offset: 0x46F VA: 0x46F
	private static void SkipSpace(string name, ref int pos) { }

	// RVA: 0x470 Offset: 0x470 VA: 0x470
	private static void BoundCheck(int idx, string s) { }

	// RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	private static TypeIdentifier ParsedTypeIdentifier(string displayName) { }

	// RVA: 0x123 Offset: 0x123 VA: 0x123
	private static TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn) { }

	// RVA: 0x5E9 Offset: 0x5E9 VA: 0x5E9
	public void .ctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x345 Offset: 0x345 VA: 0x345
internal enum TypeSpec.DisplayNameFormat // TypeDefIndex: 352
{
	// Fields
	public int value__; // 0x0
	public const TypeSpec.DisplayNameFormat Default = 0;
	public const TypeSpec.DisplayNameFormat WANT_ASSEMBLY = 1;
	public const TypeSpec.DisplayNameFormat NO_MODIFIERS = 2;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x346 Offset: 0x346 VA: 0x346
[CLSCompliantAttribute] // RVA: 0x346 Offset: 0x346 VA: 0x346
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 353
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private void* _pointer; // 0x0

	// Properties
	public static int Size { get; }

	// Methods

	// RVA: 0x472 Offset: 0x472 VA: 0x472
	public void .ctor(uint value) { }

	[CLSCompliantAttribute] // RVA: 0x6A4 Offset: 0x6A4 VA: 0x6A4
	// RVA: 0x473 Offset: 0x473 VA: 0x473
	public void .ctor(void* value) { }

	// RVA: 0x50C Offset: 0x50C VA: 0x50C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x9AC Offset: 0x9AC VA: 0x9AC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x9AD Offset: 0x9AD VA: 0x9AD Slot: 3
	public override string ToString() { }

	// RVA: 0x2FF Offset: 0x2FF VA: 0x2FF Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x50D Offset: 0x50D VA: 0x50D
	public static bool op_Equality(UIntPtr value1, UIntPtr value2) { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65
	public static ulong op_Explicit(UIntPtr value) { }

	[CLSCompliantAttribute] // RVA: 0x6A5 Offset: 0x6A5 VA: 0x6A5
	// RVA: 0x9AE Offset: 0x9AE VA: 0x9AE
	public static UIntPtr op_Explicit(void* value) { }

	// RVA: 0x24E Offset: 0x24E VA: 0x24E
	public static int get_Size() { }

	// RVA: 0xF18 Offset: 0xF18 VA: 0xF18
	private static void .cctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x347 Offset: 0x347 VA: 0x347
[Serializable]
public abstract class ValueType // TypeDefIndex: 354
{
	// Methods

	// RVA: 0x5EB Offset: 0x5EB VA: 0x5EB
	protected void .ctor() { }

	// RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	private static bool InternalEquals(object o1, object o2, out object[] fields) { }

	// RVA: 0x511 Offset: 0x511 VA: 0x511
	internal static bool DefaultEquals(object o1, object o2) { }

	// RVA: 0x512 Offset: 0x512 VA: 0x512 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x513 Offset: 0x513 VA: 0x513
	internal static int InternalGetHashCode(object o, out object[] fields) { }

	// RVA: 0x9B1 Offset: 0x9B1 VA: 0x9B1 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x9B2 Offset: 0x9B2 VA: 0x9B2 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal struct Variant // TypeDefIndex: 355
{
	// Fields
	public short vt; // 0x0
	public ushort wReserved1; // 0x2
	public ushort wReserved2; // 0x4
	public ushort wReserved3; // 0x6
	public long llVal; // 0x8
	public int lVal; // 0x8
	public byte bVal; // 0x8
	public short iVal; // 0x8
	public float fltVal; // 0x8
	public double dblVal; // 0x8
	public short boolVal; // 0x8
	public IntPtr bstrVal; // 0x8
	public sbyte cVal; // 0x8
	public ushort uiVal; // 0x8
	public uint ulVal; // 0x8
	public ulong ullVal; // 0x8
	public int intVal; // 0x8
	public uint uintVal; // 0x8
	public IntPtr pdispVal; // 0x8
	public BRECORD bRecord; // 0x8

	// Methods

	// RVA: 0x5EC Offset: 0x5EC VA: 0x5EC
	public void Clear() { }
}

// Namespace: System
internal struct BRECORD // TypeDefIndex: 356
{
	// Fields
	private IntPtr pvRecord; // 0x0
	private IntPtr pRecInfo; // 0x4
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x348 Offset: 0x348 VA: 0x348
[Serializable]
public struct Void // TypeDefIndex: 357
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0x349 Offset: 0x349 VA: 0x349
[Serializable]
public class WeakReference : ISerializable // TypeDefIndex: 358
{
	// Fields
	private bool isLongReference; // 0x8
	private GCHandle gcHandle; // 0xC

	// Properties
	public virtual bool IsAlive { get; }
	public virtual object Target { get; set; }
	public virtual bool TrackResurrection { get; }

	// Methods

	// RVA: 0x47D Offset: 0x47D VA: 0x47D
	private void AllocateHandle(object target) { }

	// RVA: 0x5EE Offset: 0x5EE VA: 0x5EE
	protected void .ctor() { }

	// RVA: 0x47E Offset: 0x47E VA: 0x47E
	public void .ctor(object target) { }

	// RVA: 0x30A Offset: 0x30A VA: 0x30A
	public void .ctor(object target, bool trackResurrection) { }

	// RVA: 0x30B Offset: 0x30B VA: 0x30B
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x9BC Offset: 0x9BC VA: 0x9BC Slot: 5
	public virtual bool get_IsAlive() { }

	// RVA: 0x9BD Offset: 0x9BD VA: 0x9BD Slot: 6
	public virtual object get_Target() { }

	// RVA: 0x47F Offset: 0x47F VA: 0x47F Slot: 7
	public virtual void set_Target(object value) { }

	// RVA: 0x9BE Offset: 0x9BE VA: 0x9BE Slot: 8
	public virtual bool get_TrackResurrection() { }

	// RVA: 0x5EF Offset: 0x5EF VA: 0x5EF Slot: 1
	protected override void Finalize() { }

	// RVA: 0x30C Offset: 0x30C VA: 0x30C Slot: 9
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public sealed class WeakReference<T> : ISerializable // TypeDefIndex: 359
{
	// Fields
	private GCHandle handle; // 0xFFFFFFFF
	private bool trackResurrection; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T target) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7EC Offset: 0x7EC VA: 0x7EC
	|-WeakReference<EtwSession>..ctor
	|-WeakReference<object>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(T target, bool trackResurrection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3EB Offset: 0x3EB VA: 0x3EB
	|-WeakReference<object>..ctor
	*/

	// RVA: -1 Offset: -1
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
	|-WeakReference<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3ED Offset: 0x3ED VA: 0x3ED
	|-WeakReference<object>.GetObjectData
	*/

	// RVA: -1 Offset: -1
	public bool TryGetTarget(out T target) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x646 Offset: 0x646 VA: 0x646
	|-WeakReference<EtwSession>.TryGetTarget
	|-WeakReference<object>.TryGetTarget
	*/

	// RVA: -1 Offset: -1 Slot: 1
	protected override void Finalize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4
	|-WeakReference<object>.Finalize
	*/
}

// Namespace: System
internal struct InputRecord // TypeDefIndex: 360
{
	// Fields
	public short EventType; // 0x0
	public bool KeyDown; // 0x2
	public short RepeatCount; // 0x4
	public short VirtualKeyCode; // 0x6
	public short VirtualScanCode; // 0x8
	public char Character; // 0xA
	public int ControlKeyState; // 0xC
	private int pad1; // 0x10
	private bool pad2; // 0x14
}

// Namespace: System
internal struct Coord // TypeDefIndex: 361
{
	// Fields
	public short X; // 0x0
	public short Y; // 0x2
}

// Namespace: System
internal struct SmallRect // TypeDefIndex: 362
{
	// Fields
	public short Left; // 0x0
	public short Top; // 0x2
	public short Right; // 0x4
	public short Bottom; // 0x6
}

// Namespace: System
internal struct ConsoleScreenBufferInfo // TypeDefIndex: 363
{
	// Fields
	public Coord Size; // 0x0
	public Coord CursorPosition; // 0x4
	public short Attribute; // 0x8
	public SmallRect Window; // 0xA
	public Coord MaxWindowSize; // 0x12
}

// Namespace: System
internal enum Handles // TypeDefIndex: 364
{
	// Fields
	public int value__; // 0x0
	public const Handles STD_INPUT = -10;
	public const Handles STD_OUTPUT = -11;
	public const Handles STD_ERROR = -12;
}

// Namespace: System
internal class WindowsConsoleDriver : IConsoleDriver // TypeDefIndex: 365
{
	// Fields
	private IntPtr inputHandle; // 0x8
	private IntPtr outputHandle; // 0xC
	private short defaultAttribute; // 0x10

	// Methods

	// RVA: 0x5F0 Offset: 0x5F0 VA: 0x5F0
	public void .ctor() { }

	// RVA: 0x30D Offset: 0x30D VA: 0x30D Slot: 4
	public ConsoleKeyInfo ReadKey(bool intercept) { }

	// RVA: 0x9BF Offset: 0x9BF VA: 0x9BF
	private static bool IsModifierKey(short virtualKeyCode) { }

	// RVA: 0x9C0 Offset: 0x9C0 VA: 0x9C0
	private static extern IntPtr GetStdHandle(Handles handle) { }

	// RVA: 0x51C Offset: 0x51C VA: 0x51C
	private static extern bool GetConsoleScreenBufferInfo(IntPtr handle, out ConsoleScreenBufferInfo info) { }

	// RVA: 0x125 Offset: 0x125 VA: 0x125
	private static extern bool ReadConsoleInput(IntPtr handle, out InputRecord record, int length, out int nread) { }
}

// Namespace: System
internal class __ComObject // TypeDefIndex: 366
{
	// Methods

	// RVA: 0x5F1 Offset: 0x5F1 VA: 0x5F1
	private void .ctor() { }
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0x34A Offset: 0x34A VA: 0x34A
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 367
{
	// Fields
	public int value__; // 0x0
	public const AssemblyHashAlgorithm None = 0;
	public const AssemblyHashAlgorithm MD5 = 32771;
	public const AssemblyHashAlgorithm SHA1 = 32772;
	public const AssemblyHashAlgorithm SHA256 = 32780;
	public const AssemblyHashAlgorithm SHA384 = 32781;
	public const AssemblyHashAlgorithm SHA512 = 32782;
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0x34B Offset: 0x34B VA: 0x34B
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 368
{
	// Fields
	public int value__; // 0x0
	public const AssemblyVersionCompatibility SameMachine = 1;
	public const AssemblyVersionCompatibility SameProcess = 2;
	public const AssemblyVersionCompatibility SameDomain = 3;
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x34C Offset: 0x34C VA: 0x34C
[Serializable]
public class ASCIIEncoding : Encoding // TypeDefIndex: 369
{
	// Methods

	// RVA: 0x516 Offset: 0x516 VA: 0x516
	public void .ctor() { }

	// RVA: 0x517 Offset: 0x517 VA: 0x517 Slot: 5
	internal override void SetDefaultFallbacks() { }

	// RVA: 0xD2 Offset: 0xD2 VA: 0xD2 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x447 Offset: 0x447 VA: 0x447 Slot: 9
	public override int GetByteCount(string chars) { }

	[CLSCompliantAttribute] // RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6
	[ComVisibleAttribute] // RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6
	// RVA: 0x98E Offset: 0x98E VA: 0x98E Slot: 11
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49 Slot: 16
	public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[CLSCompliantAttribute] // RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7
	[ComVisibleAttribute] // RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7
	// RVA: 0x5B Offset: 0x5B VA: 0x5B Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0xD3 Offset: 0xD3 VA: 0xD3 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8
	[ComVisibleAttribute] // RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8
	// RVA: 0x98F Offset: 0x98F VA: 0x98F Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9
	[CLSCompliantAttribute] // RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9
	// RVA: 0x5C Offset: 0x5C VA: 0x5C Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	// RVA: 0xD4 Offset: 0xD4 VA: 0xD4 Slot: 32
	public override string GetString(byte[] bytes, int byteIndex, int byteCount) { }

	// RVA: 0xD5 Offset: 0xD5 VA: 0xD5 Slot: 12
	internal override int GetByteCount(char* chars, int charCount, EncoderNLS encoder) { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }

	// RVA: 0xD6 Offset: 0xD6 VA: 0xD6 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS decoder) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder) { }

	// RVA: 0x448 Offset: 0x448 VA: 0x448 Slot: 29
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x449 Offset: 0x449 VA: 0x449 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }

	[ComVisibleAttribute] // RVA: 0x6AA Offset: 0x6AA VA: 0x6AA
	// RVA: 0x850 Offset: 0x850 VA: 0x850 Slot: 27
	public override Decoder GetDecoder() { }

	[ComVisibleAttribute] // RVA: 0x6AB Offset: 0x6AB VA: 0x6AB
	// RVA: 0x851 Offset: 0x851 VA: 0x851 Slot: 28
	public override Encoder GetEncoder() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x34D Offset: 0x34D VA: 0x34D
[Serializable]
public abstract class Decoder // TypeDefIndex: 370
{
	// Fields
	internal DecoderFallback m_fallback; // 0x8
	internal DecoderFallbackBuffer m_fallbackBuffer; // 0xC

	// Properties
	[ComVisibleAttribute] // RVA: 0x7EA Offset: 0x7EA VA: 0x7EA
	public DecoderFallback Fallback { get; }
	[ComVisibleAttribute] // RVA: 0x7EB Offset: 0x7EB VA: 0x7EB
	public DecoderFallbackBuffer FallbackBuffer { get; }
	internal bool InternalHasFallbackBuffer { get; }

	// Methods

	// RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0
	internal void SerializeDecoder(SerializationInfo info) { }

	// RVA: 0x518 Offset: 0x518 VA: 0x518
	protected void .ctor() { }

	// RVA: 0x852 Offset: 0x852 VA: 0x852
	public DecoderFallback get_Fallback() { }

	// RVA: 0x853 Offset: 0x853 VA: 0x853
	public DecoderFallbackBuffer get_FallbackBuffer() { }

	// RVA: 0x854 Offset: 0x854 VA: 0x854
	internal bool get_InternalHasFallbackBuffer() { }

	[ComVisibleAttribute] // RVA: 0x6AC Offset: 0x6AC VA: 0x6AC
	// RVA: 0x519 Offset: 0x519 VA: 0x519 Slot: 4
	public virtual void Reset() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetCharCount(byte[] bytes, int index, int count) { }

	[ComVisibleAttribute] // RVA: 0x6AD Offset: 0x6AD VA: 0x6AD
	// RVA: 0x5D Offset: 0x5D VA: 0x5D Slot: 6
	public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush) { }

	[ComVisibleAttribute] // RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	[CLSCompliantAttribute] // RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	// RVA: 0xD7 Offset: 0xD7 VA: 0xD7 Slot: 7
	public virtual int GetCharCount(byte* bytes, int count, bool flush) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A Slot: 9
	public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { }

	[ComVisibleAttribute] // RVA: 0x6AF Offset: 0x6AF VA: 0x6AF
	[CLSCompliantAttribute] // RVA: 0x6AF Offset: 0x6AF VA: 0x6AF
	// RVA: 0x4E Offset: 0x4E VA: 0x4E Slot: 10
	public virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush) { }
}

// Namespace: System.Text
[Serializable]
internal sealed class InternalDecoderBestFitFallback : DecoderFallback // TypeDefIndex: 371
{
	// Fields
	internal Encoding encoding; // 0xC
	internal char[] arrayBestFit; // 0x10
	internal char cReplacement; // 0x14

	// Properties
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6
	internal void .ctor(Encoding encoding) { }

	// RVA: 0x88E Offset: 0x88E VA: 0x88E Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x88F Offset: 0x88F VA: 0x88F Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x45A Offset: 0x45A VA: 0x45A Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x890 Offset: 0x890 VA: 0x890 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
internal sealed class InternalDecoderBestFitFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 372
{
	// Fields
	internal char cBestFit; // 0x10
	internal int iCount; // 0x14
	internal int iSize; // 0x18
	private InternalDecoderBestFitFallback oFallback; // 0x1C
	private static object s_InternalSyncObject; // 0x0

	// Properties
	private static object InternalSyncObject { get; }

	// Methods

	// RVA: 0x219 Offset: 0x219 VA: 0x219
	private static object get_InternalSyncObject() { }

	// RVA: 0x3D7 Offset: 0x3D7 VA: 0x3D7
	public void .ctor(InternalDecoderBestFitFallback fallback) { }

	// RVA: 0x99E Offset: 0x99E VA: 0x99E Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x891 Offset: 0x891 VA: 0x891 Slot: 5
	public override char GetNextChar() { }

	// RVA: 0x53A Offset: 0x53A VA: 0x53A Slot: 6
	public override void Reset() { }

	// RVA: 0x99F Offset: 0x99F VA: 0x99F Slot: 8
	internal override int InternalFallback(byte[] bytes, byte* pBytes) { }

	// RVA: 0x45B Offset: 0x45B VA: 0x45B
	private char TryBestFit(byte[] bytesCheck) { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 373
{
	// Properties
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x51A Offset: 0x51A VA: 0x51A
	public void .ctor() { }

	// RVA: 0x855 Offset: 0x855 VA: 0x855 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x856 Offset: 0x856 VA: 0x856 Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x44A Offset: 0x44A VA: 0x44A Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x857 Offset: 0x857 VA: 0x857 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 374
{
	// Methods

	// RVA: 0x990 Offset: 0x990 VA: 0x990 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x858 Offset: 0x858 VA: 0x858 Slot: 5
	public override char GetNextChar() { }

	// RVA: 0x285 Offset: 0x285 VA: 0x285
	private void Throw(byte[] bytesUnknown, int index) { }

	// RVA: 0x51B Offset: 0x51B VA: 0x51B
	public void .ctor() { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 375
{
	// Fields
	private byte[] bytesUnknown; // 0x48
	private int index; // 0x4C

	// Methods

	// RVA: 0x520 Offset: 0x520 VA: 0x520
	public void .ctor() { }

	// RVA: 0x287 Offset: 0x287 VA: 0x287
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xD1 Offset: 0xD1 VA: 0xD1
	public void .ctor(string message, byte[] bytesUnknown, int index) { }
}

// Namespace: System.Text
[Serializable]
public abstract class DecoderFallback // TypeDefIndex: 376
{
	// Fields
	internal bool bIsMicrosoftBestFitFallback; // 0x8
	private static DecoderFallback replacementFallback; // 0x0
	private static DecoderFallback exceptionFallback; // 0x4
	private static object s_InternalSyncObject; // 0x8

	// Properties
	private static object InternalSyncObject { get; }
	public static DecoderFallback ReplacementFallback { get; }
	public static DecoderFallback ExceptionFallback { get; }
	public abstract int MaxCharCount { get; }

	// Methods

	// RVA: 0x207 Offset: 0x207 VA: 0x207
	private static object get_InternalSyncObject() { }

	// RVA: 0x208 Offset: 0x208 VA: 0x208
	public static DecoderFallback get_ReplacementFallback() { }

	// RVA: 0x209 Offset: 0x209 VA: 0x209
	public static DecoderFallback get_ExceptionFallback() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int get_MaxCharCount() { }

	// RVA: 0x51C Offset: 0x51C VA: 0x51C
	protected void .ctor() { }
}

// Namespace: System.Text
public abstract class DecoderFallbackBuffer // TypeDefIndex: 377
{
	// Fields
	internal byte* byteStart; // 0x8
	internal char* charEnd; // 0xC

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract char GetNextChar() { }

	// RVA: 0x51D Offset: 0x51D VA: 0x51D Slot: 6
	public virtual void Reset() { }

	// RVA: 0x51E Offset: 0x51E VA: 0x51E
	internal void InternalReset() { }

	// RVA: 0x286 Offset: 0x286 VA: 0x286
	internal void InternalInitialize(byte* byteStart, char* charEnd) { }

	// RVA: 0xD8 Offset: 0xD8 VA: 0xD8 Slot: 7
	internal virtual bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars) { }

	// RVA: 0x991 Offset: 0x991 VA: 0x991 Slot: 8
	internal virtual int InternalFallback(byte[] bytes, byte* pBytes) { }

	// RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
	internal void ThrowLastBytesRecursive(byte[] bytesUnknown) { }

	// RVA: 0x51F Offset: 0x51F VA: 0x51F
	protected void .ctor() { }
}

// Namespace: System.Text
[Serializable]
internal class DecoderNLS : Decoder, ISerializable // TypeDefIndex: 378
{
	// Fields
	protected Encoding m_encoding; // 0x10
	protected bool m_mustFlush; // 0x14
	internal bool m_throwOnOverflow; // 0x15
	internal int m_bytesUsed; // 0x18

	// Properties
	public bool MustFlush { get; }
	internal virtual bool HasState { get; }

	// Methods

	// RVA: 0x288 Offset: 0x288 VA: 0x288
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x289 Offset: 0x289 VA: 0x289 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3C2 Offset: 0x3C2 VA: 0x3C2
	internal void .ctor(Encoding encoding) { }

	// RVA: 0x521 Offset: 0x521 VA: 0x521
	internal void .ctor() { }

	// RVA: 0x522 Offset: 0x522 VA: 0x522 Slot: 4
	public override void Reset() { }

	// RVA: 0xD9 Offset: 0xD9 VA: 0xD9 Slot: 5
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E Slot: 6
	public override int GetCharCount(byte[] bytes, int index, int count, bool flush) { }

	// RVA: 0xDA Offset: 0xDA VA: 0xDA Slot: 7
	public override int GetCharCount(byte* bytes, int count, bool flush) { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F Slot: 8
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B Slot: 9
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50 Slot: 10
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush) { }

	// RVA: 0x859 Offset: 0x859 VA: 0x859
	public bool get_MustFlush() { }

	// RVA: 0x85A Offset: 0x85A VA: 0x85A Slot: 12
	internal virtual bool get_HasState() { }

	// RVA: 0x523 Offset: 0x523 VA: 0x523
	internal void ClearMustFlush() { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 379
{
	// Fields
	private string strDefault; // 0xC

	// Properties
	public string DefaultString { get; }
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x524 Offset: 0x524 VA: 0x524
	public void .ctor() { }

	// RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3
	public void .ctor(string replacement) { }

	// RVA: 0x85B Offset: 0x85B VA: 0x85B
	public string get_DefaultString() { }

	// RVA: 0x85C Offset: 0x85C VA: 0x85C Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x85D Offset: 0x85D VA: 0x85D Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x44B Offset: 0x44B VA: 0x44B Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x85E Offset: 0x85E VA: 0x85E Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 380
{
	// Fields
	private string strDefault; // 0x10
	private int fallbackCount; // 0x14
	private int fallbackIndex; // 0x18

	// Methods

	// RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4
	public void .ctor(DecoderReplacementFallback fallback) { }

	// RVA: 0x992 Offset: 0x992 VA: 0x992 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x85F Offset: 0x85F VA: 0x85F Slot: 5
	public override char GetNextChar() { }

	// RVA: 0x525 Offset: 0x525 VA: 0x525 Slot: 6
	public override void Reset() { }

	// RVA: 0x993 Offset: 0x993 VA: 0x993 Slot: 8
	internal override int InternalFallback(byte[] bytes, byte* pBytes) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x34E Offset: 0x34E VA: 0x34E
[Serializable]
public abstract class Encoder // TypeDefIndex: 381
{
	// Fields
	internal EncoderFallback m_fallback; // 0x8
	internal EncoderFallbackBuffer m_fallbackBuffer; // 0xC

	// Properties
	[ComVisibleAttribute] // RVA: 0x7EC Offset: 0x7EC VA: 0x7EC
	public EncoderFallback Fallback { get; }
	[ComVisibleAttribute] // RVA: 0x7ED Offset: 0x7ED VA: 0x7ED
	public EncoderFallbackBuffer FallbackBuffer { get; }
	internal bool InternalHasFallbackBuffer { get; }

	// Methods

	// RVA: 0x3C5 Offset: 0x3C5 VA: 0x3C5
	internal void SerializeEncoder(SerializationInfo info) { }

	// RVA: 0x526 Offset: 0x526 VA: 0x526
	protected void .ctor() { }

	// RVA: 0x860 Offset: 0x860 VA: 0x860
	public EncoderFallback get_Fallback() { }

	// RVA: 0x861 Offset: 0x861 VA: 0x861
	public EncoderFallbackBuffer get_FallbackBuffer() { }

	// RVA: 0x862 Offset: 0x862 VA: 0x862
	internal bool get_InternalHasFallbackBuffer() { }

	[ComVisibleAttribute] // RVA: 0x6B0 Offset: 0x6B0 VA: 0x6B0
	// RVA: 0x527 Offset: 0x527 VA: 0x527 Slot: 4
	public virtual void Reset() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetByteCount(char[] chars, int index, int count, bool flush) { }

	[ComVisibleAttribute] // RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	[CLSCompliantAttribute] // RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	// RVA: 0xDB Offset: 0xDB VA: 0xDB Slot: 6
	public virtual int GetByteCount(char* chars, int count, bool flush) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush) { }

	[ComVisibleAttribute] // RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	[CLSCompliantAttribute] // RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	// RVA: 0x51 Offset: 0x51 VA: 0x51 Slot: 8
	public virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush) { }
}

// Namespace: System.Text
[Serializable]
internal class InternalEncoderBestFitFallback : EncoderFallback // TypeDefIndex: 382
{
	// Fields
	internal Encoding encoding; // 0xC
	internal char[] arrayBestFit; // 0x10

	// Properties
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x3D8 Offset: 0x3D8 VA: 0x3D8
	internal void .ctor(Encoding encoding) { }

	// RVA: 0x892 Offset: 0x892 VA: 0x892 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x893 Offset: 0x893 VA: 0x893 Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x45C Offset: 0x45C VA: 0x45C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x894 Offset: 0x894 VA: 0x894 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
internal sealed class InternalEncoderBestFitFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 383
{
	// Fields
	private char cBestFit; // 0x1C
	private InternalEncoderBestFitFallback oFallback; // 0x20
	private int iCount; // 0x24
	private int iSize; // 0x28
	private static object s_InternalSyncObject; // 0x0

	// Properties
	private static object InternalSyncObject { get; }
	public override int Remaining { get; }

	// Methods

	// RVA: 0x21A Offset: 0x21A VA: 0x21A
	private static object get_InternalSyncObject() { }

	// RVA: 0x3D9 Offset: 0x3D9 VA: 0x3D9
	public void .ctor(InternalEncoderBestFitFallback fallback) { }

	// RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0 Slot: 4
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0xEB Offset: 0xEB VA: 0xEB Slot: 5
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x895 Offset: 0x895 VA: 0x895 Slot: 6
	public override char GetNextChar() { }

	// RVA: 0x896 Offset: 0x896 VA: 0x896 Slot: 7
	public override bool MovePrevious() { }

	// RVA: 0x897 Offset: 0x897 VA: 0x897 Slot: 8
	public override int get_Remaining() { }

	// RVA: 0x53B Offset: 0x53B VA: 0x53B Slot: 9
	public override void Reset() { }

	// RVA: 0x45D Offset: 0x45D VA: 0x45D
	private char TryBestFit(char cUnknown) { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 384
{
	// Properties
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x528 Offset: 0x528 VA: 0x528
	public void .ctor() { }

	// RVA: 0x863 Offset: 0x863 VA: 0x863 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x864 Offset: 0x864 VA: 0x864 Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x44C Offset: 0x44C VA: 0x44C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x865 Offset: 0x865 VA: 0x865 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 385
{
	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x529 Offset: 0x529 VA: 0x529
	public void .ctor() { }

	// RVA: 0x994 Offset: 0x994 VA: 0x994 Slot: 4
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0xDC Offset: 0xDC VA: 0xDC Slot: 5
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x866 Offset: 0x866 VA: 0x866 Slot: 6
	public override char GetNextChar() { }

	// RVA: 0x867 Offset: 0x867 VA: 0x867 Slot: 7
	public override bool MovePrevious() { }

	// RVA: 0x868 Offset: 0x868 VA: 0x868 Slot: 8
	public override int get_Remaining() { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 386
{
	// Fields
	private char charUnknown; // 0x48
	private char charUnknownHigh; // 0x4A
	private char charUnknownLow; // 0x4C
	private int index; // 0x50

	// Methods

	// RVA: 0x52E Offset: 0x52E VA: 0x52E
	public void .ctor() { }

	// RVA: 0x28A Offset: 0x28A VA: 0x28A
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xD2 Offset: 0xD2 VA: 0xD2
	internal void .ctor(string message, char charUnknown, int index) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E
	internal void .ctor(string message, char charUnknownHigh, char charUnknownLow, int index) { }
}

// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback // TypeDefIndex: 387
{
	// Fields
	internal bool bIsMicrosoftBestFitFallback; // 0x8
	private static EncoderFallback replacementFallback; // 0x0
	private static EncoderFallback exceptionFallback; // 0x4
	private static object s_InternalSyncObject; // 0x8

	// Properties
	private static object InternalSyncObject { get; }
	public static EncoderFallback ReplacementFallback { get; }
	public static EncoderFallback ExceptionFallback { get; }
	public abstract int MaxCharCount { get; }

	// Methods

	// RVA: 0x20A Offset: 0x20A VA: 0x20A
	private static object get_InternalSyncObject() { }

	// RVA: 0x20B Offset: 0x20B VA: 0x20B
	public static EncoderFallback get_ReplacementFallback() { }

	// RVA: 0x20C Offset: 0x20C VA: 0x20C
	public static EncoderFallback get_ExceptionFallback() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int get_MaxCharCount() { }

	// RVA: 0x52A Offset: 0x52A VA: 0x52A
	protected void .ctor() { }
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 388
{
	// Fields
	internal char* charStart; // 0x8
	internal char* charEnd; // 0xC
	internal EncoderNLS encoder; // 0x10
	internal bool setEncoder; // 0x14
	internal bool bUsedEncoder; // 0x15
	internal bool bFallingBack; // 0x16
	internal int iRecursionCount; // 0x18

	// Properties
	public abstract int Remaining { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Fallback(char charUnknown, int index) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract char GetNextChar() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool MovePrevious() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_Remaining() { }

	// RVA: 0x52B Offset: 0x52B VA: 0x52B Slot: 9
	public virtual void Reset() { }

	// RVA: 0x52C Offset: 0x52C VA: 0x52C
	internal void InternalReset() { }

	// RVA: 0x5D Offset: 0x5D VA: 0x5D
	internal void InternalInitialize(char* charStart, char* charEnd, EncoderNLS encoder, bool setEncoder) { }

	// RVA: 0x869 Offset: 0x869 VA: 0x869
	internal char InternalGetNextChar() { }

	// RVA: 0x995 Offset: 0x995 VA: 0x995 Slot: 10
	internal virtual bool InternalFallback(char ch, ref char* chars) { }

	// RVA: 0x3C6 Offset: 0x3C6 VA: 0x3C6
	internal void ThrowLastCharRecursive(int charRecursive) { }

	// RVA: 0x52D Offset: 0x52D VA: 0x52D
	protected void .ctor() { }
}

// Namespace: System.Text
[Serializable]
internal class EncoderNLS : Encoder, ISerializable // TypeDefIndex: 389
{
	// Fields
	internal char charLeftOver; // 0x10
	protected Encoding m_encoding; // 0x14
	protected bool m_mustFlush; // 0x18
	internal bool m_throwOnOverflow; // 0x19
	internal int m_charsUsed; // 0x1C

	// Properties
	public Encoding Encoding { get; }
	public bool MustFlush { get; }

	// Methods

	// RVA: 0x28B Offset: 0x28B VA: 0x28B
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x28C Offset: 0x28C VA: 0x28C Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3C7 Offset: 0x3C7 VA: 0x3C7
	internal void .ctor(Encoding encoding) { }

	// RVA: 0x52F Offset: 0x52F VA: 0x52F
	internal void .ctor() { }

	// RVA: 0x530 Offset: 0x530 VA: 0x530 Slot: 4
	public override void Reset() { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F Slot: 5
	public override int GetByteCount(char[] chars, int index, int count, bool flush) { }

	// RVA: 0xDD Offset: 0xDD VA: 0xDD Slot: 6
	public override int GetByteCount(char* chars, int count, bool flush) { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C Slot: 7
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush) { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52 Slot: 8
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush) { }

	// RVA: 0x86A Offset: 0x86A VA: 0x86A
	public Encoding get_Encoding() { }

	// RVA: 0x86B Offset: 0x86B VA: 0x86B
	public bool get_MustFlush() { }

	// RVA: 0x531 Offset: 0x531 VA: 0x531
	internal void ClearMustFlush() { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 390
{
	// Fields
	private string strDefault; // 0xC

	// Properties
	public string DefaultString { get; }
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x532 Offset: 0x532 VA: 0x532
	public void .ctor() { }

	// RVA: 0x3C8 Offset: 0x3C8 VA: 0x3C8
	public void .ctor(string replacement) { }

	// RVA: 0x86C Offset: 0x86C VA: 0x86C
	public string get_DefaultString() { }

	// RVA: 0x86D Offset: 0x86D VA: 0x86D Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x86E Offset: 0x86E VA: 0x86E Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x44D Offset: 0x44D VA: 0x44D Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x86F Offset: 0x86F VA: 0x86F Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 391
{
	// Fields
	private string strDefault; // 0x1C
	private int fallbackCount; // 0x20
	private int fallbackIndex; // 0x24

	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x3C9 Offset: 0x3C9 VA: 0x3C9
	public void .ctor(EncoderReplacementFallback fallback) { }

	// RVA: 0x996 Offset: 0x996 VA: 0x996 Slot: 4
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0xDE Offset: 0xDE VA: 0xDE Slot: 5
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x870 Offset: 0x870 VA: 0x870 Slot: 6
	public override char GetNextChar() { }

	// RVA: 0x871 Offset: 0x871 VA: 0x871 Slot: 7
	public override bool MovePrevious() { }

	// RVA: 0x872 Offset: 0x872 VA: 0x872 Slot: 8
	public override int get_Remaining() { }

	// RVA: 0x533 Offset: 0x533 VA: 0x533 Slot: 9
	public override void Reset() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x34F Offset: 0x34F VA: 0x34F
[Serializable]
public abstract class Encoding : ICloneable // TypeDefIndex: 392
{
	// Fields
	private static Encoding defaultEncoding; // 0x0
	private static Encoding unicodeEncoding; // 0x4
	private static Encoding bigEndianUnicode; // 0x8
	private static Encoding utf7Encoding; // 0xC
	private static Encoding utf8Encoding; // 0x10
	private static Encoding utf32Encoding; // 0x14
	private static Encoding asciiEncoding; // 0x18
	private static Encoding latin1Encoding; // 0x1C
	private static Hashtable encodings; // 0x20
	internal int m_codePage; // 0x8
	internal CodePageDataItem dataItem; // 0xC
	internal bool m_deserializedFromEverett; // 0x10
	[OptionalFieldAttribute] // RVA: 0x555 Offset: 0x555 VA: 0x555
	private bool m_isReadOnly; // 0x11
	[OptionalFieldAttribute] // RVA: 0x556 Offset: 0x556 VA: 0x556
	internal EncoderFallback encoderFallback; // 0x14
	[OptionalFieldAttribute] // RVA: 0x557 Offset: 0x557 VA: 0x557
	internal DecoderFallback decoderFallback; // 0x18
	private static object s_InternalSyncObject; // 0x24

	// Properties
	private static object InternalSyncObject { get; }
	public virtual string EncodingName { get; }
	[ComVisibleAttribute] // RVA: 0x7EE Offset: 0x7EE VA: 0x7EE
	public EncoderFallback EncoderFallback { get; set; }
	[ComVisibleAttribute] // RVA: 0x7EF Offset: 0x7EF VA: 0x7EF
	public DecoderFallback DecoderFallback { get; set; }
	[ComVisibleAttribute] // RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0
	public bool IsReadOnly { get; }
	public static Encoding ASCII { get; }
	private static Encoding Latin1 { get; }
	public virtual int CodePage { get; }
	public static Encoding Default { get; }
	public static Encoding Unicode { get; }
	public static Encoding BigEndianUnicode { get; }
	public static Encoding UTF7 { get; }
	public static Encoding UTF8 { get; }
	public static Encoding UTF32 { get; }

	// Methods

	// RVA: 0x534 Offset: 0x534 VA: 0x534
	protected void .ctor() { }

	// RVA: 0x3CA Offset: 0x3CA VA: 0x3CA
	protected void .ctor(int codePage) { }

	// RVA: 0x535 Offset: 0x535 VA: 0x535 Slot: 5
	internal virtual void SetDefaultFallbacks() { }

	// RVA: 0x536 Offset: 0x536 VA: 0x536
	internal void OnDeserializing() { }

	// RVA: 0x537 Offset: 0x537 VA: 0x537
	internal void OnDeserialized() { }

	[OnDeserializingAttribute] // RVA: 0x6B3 Offset: 0x6B3 VA: 0x6B3
	// RVA: 0x3CB Offset: 0x3CB VA: 0x3CB
	private void OnDeserializing(StreamingContext ctx) { }

	[OnDeserializedAttribute] // RVA: 0x6B4 Offset: 0x6B4 VA: 0x6B4
	// RVA: 0x3CC Offset: 0x3CC VA: 0x3CC
	private void OnDeserialized(StreamingContext ctx) { }

	[OnSerializingAttribute] // RVA: 0x6B5 Offset: 0x6B5 VA: 0x6B5
	// RVA: 0x3CD Offset: 0x3CD VA: 0x3CD
	private void OnSerializing(StreamingContext ctx) { }

	// RVA: 0x28D Offset: 0x28D VA: 0x28D
	internal void DeserializeEncoding(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x28E Offset: 0x28E VA: 0x28E
	internal void SerializeEncoding(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x20D Offset: 0x20D VA: 0x20D
	private static object get_InternalSyncObject() { }

	// RVA: 0x873 Offset: 0x873 VA: 0x873
	public static Encoding GetEncoding(int codepage) { }

	// RVA: 0x874 Offset: 0x874 VA: 0x874
	public static Encoding GetEncoding(string name) { }

	// RVA: 0x875 Offset: 0x875 VA: 0x875 Slot: 6
	public virtual byte[] GetPreamble() { }

	// RVA: 0x876 Offset: 0x876 VA: 0x876 Slot: 7
	public virtual string get_EncodingName() { }

	// RVA: 0x877 Offset: 0x877 VA: 0x877
	public EncoderFallback get_EncoderFallback() { }

	// RVA: 0x3CE Offset: 0x3CE VA: 0x3CE
	public void set_EncoderFallback(EncoderFallback value) { }

	// RVA: 0x878 Offset: 0x878 VA: 0x878
	public DecoderFallback get_DecoderFallback() { }

	// RVA: 0x3CF Offset: 0x3CF VA: 0x3CF
	public void set_DecoderFallback(DecoderFallback value) { }

	[ComVisibleAttribute] // RVA: 0x6B6 Offset: 0x6B6 VA: 0x6B6
	// RVA: 0x879 Offset: 0x879 VA: 0x879 Slot: 8
	public virtual object Clone() { }

	// RVA: 0x87A Offset: 0x87A VA: 0x87A
	public bool get_IsReadOnly() { }

	// RVA: 0x20E Offset: 0x20E VA: 0x20E
	public static Encoding get_ASCII() { }

	// RVA: 0x20F Offset: 0x20F VA: 0x20F
	private static Encoding get_Latin1() { }

	// RVA: 0x44E Offset: 0x44E VA: 0x44E Slot: 9
	public virtual int GetByteCount(string s) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int GetByteCount(char[] chars, int index, int count) { }

	[ComVisibleAttribute] // RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	[CLSCompliantAttribute] // RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	// RVA: 0x997 Offset: 0x997 VA: 0x997 Slot: 11
	public virtual int GetByteCount(char* chars, int count) { }

	// RVA: 0xDF Offset: 0xDF VA: 0xDF Slot: 12
	internal virtual int GetByteCount(char* chars, int count, EncoderNLS encoder) { }

	// RVA: 0xE0 Offset: 0xE0 VA: 0xE0 Slot: 13
	public virtual byte[] GetBytes(char[] chars, int index, int count) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x44F Offset: 0x44F VA: 0x44F Slot: 15
	public virtual byte[] GetBytes(string s) { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53 Slot: 16
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54 Slot: 17
	internal virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }

	[CLSCompliantAttribute] // RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8
	[ComVisibleAttribute] // RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8
	// RVA: 0x60 Offset: 0x60 VA: 0x60 Slot: 18
	public virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract int GetCharCount(byte[] bytes, int index, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	[ComVisibleAttribute] // RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	// RVA: 0x998 Offset: 0x998 VA: 0x998 Slot: 20
	public virtual int GetCharCount(byte* bytes, int count) { }

	// RVA: 0xE1 Offset: 0xE1 VA: 0xE1 Slot: 21
	internal virtual int GetCharCount(byte* bytes, int count, DecoderNLS decoder) { }

	// RVA: 0xE2 Offset: 0xE2 VA: 0xE2 Slot: 22
	public virtual char[] GetChars(byte[] bytes, int index, int count) { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0x6BA Offset: 0x6BA VA: 0x6BA
	[CLSCompliantAttribute] // RVA: 0x6BA Offset: 0x6BA VA: 0x6BA
	// RVA: 0x61 Offset: 0x61 VA: 0x61 Slot: 24
	public virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55 Slot: 25
	internal virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder) { }

	// RVA: 0x87B Offset: 0x87B VA: 0x87B Slot: 26
	public virtual int get_CodePage() { }

	// RVA: 0x87C Offset: 0x87C VA: 0x87C Slot: 27
	public virtual Decoder GetDecoder() { }

	// RVA: 0x210 Offset: 0x210 VA: 0x210
	private static Encoding CreateDefaultEncoding() { }

	// RVA: 0x3D0 Offset: 0x3D0 VA: 0x3D0
	internal void setReadOnly(bool value = True) { }

	// RVA: 0x211 Offset: 0x211 VA: 0x211
	public static Encoding get_Default() { }

	// RVA: 0x87D Offset: 0x87D VA: 0x87D Slot: 28
	public virtual Encoder GetEncoder() { }

	// RVA: -1 Offset: -1 Slot: 29
	public abstract int GetMaxByteCount(int charCount) { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract int GetMaxCharCount(int byteCount) { }

	// RVA: 0x450 Offset: 0x450 VA: 0x450 Slot: 31
	public virtual string GetString(byte[] bytes) { }

	// RVA: 0xE3 Offset: 0xE3 VA: 0xE3 Slot: 32
	public virtual string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x212 Offset: 0x212 VA: 0x212
	public static Encoding get_Unicode() { }

	// RVA: 0x213 Offset: 0x213 VA: 0x213
	public static Encoding get_BigEndianUnicode() { }

	// RVA: 0x214 Offset: 0x214 VA: 0x214
	public static Encoding get_UTF7() { }

	// RVA: 0x215 Offset: 0x215 VA: 0x215
	public static Encoding get_UTF8() { }

	// RVA: 0x216 Offset: 0x216 VA: 0x216
	public static Encoding get_UTF32() { }

	// RVA: 0x451 Offset: 0x451 VA: 0x451 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x87E Offset: 0x87E VA: 0x87E Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x87F Offset: 0x87F VA: 0x87F Slot: 33
	internal virtual char[] GetBestFitUnicodeToBytesData() { }

	// RVA: 0x880 Offset: 0x880 VA: 0x880 Slot: 34
	internal virtual char[] GetBestFitBytesToUnicodeData() { }

	// RVA: 0x538 Offset: 0x538 VA: 0x538
	internal void ThrowBytesOverflow() { }

	// RVA: 0x28F Offset: 0x28F VA: 0x28F
	internal void ThrowBytesOverflow(EncoderNLS encoder, bool nothingEncoded) { }

	// RVA: 0x539 Offset: 0x539 VA: 0x539
	internal void ThrowCharsOverflow() { }

	// RVA: 0x290 Offset: 0x290 VA: 0x290
	internal void ThrowCharsOverflow(DecoderNLS decoder, bool nothingDecoded) { }
}

// Namespace: 
[Serializable]
internal class Encoding.DefaultEncoder : Encoder, ISerializable, IObjectReference // TypeDefIndex: 393
{
	// Fields
	private Encoding m_encoding; // 0x10
	private bool m_hasInitializedEncoding; // 0x14
	internal char charLeftOver; // 0x16

	// Methods

	// RVA: 0x3D2 Offset: 0x3D2 VA: 0x3D2
	public void .ctor(Encoding encoding) { }

	// RVA: 0x293 Offset: 0x293 VA: 0x293
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x453 Offset: 0x453 VA: 0x453 Slot: 10
	public object GetRealObject(StreamingContext context) { }

	// RVA: 0x294 Offset: 0x294 VA: 0x294 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x63 Offset: 0x63 VA: 0x63 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count, bool flush) { }

	// RVA: 0xE6 Offset: 0xE6 VA: 0xE6 Slot: 6
	public override int GetByteCount(char* chars, int count, bool flush) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E Slot: 7
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58 Slot: 8
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush) { }
}

// Namespace: 
[Serializable]
internal class Encoding.DefaultDecoder : Decoder, ISerializable, IObjectReference // TypeDefIndex: 394
{
	// Fields
	private Encoding m_encoding; // 0x10
	private bool m_hasInitializedEncoding; // 0x14

	// Methods

	// RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1
	public void .ctor(Encoding encoding) { }

	// RVA: 0x291 Offset: 0x291 VA: 0x291
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x452 Offset: 0x452 VA: 0x452 Slot: 12
	public object GetRealObject(StreamingContext context) { }

	// RVA: 0x292 Offset: 0x292 VA: 0x292 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xE4 Offset: 0xE4 VA: 0xE4 Slot: 5
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62 Slot: 6
	public override int GetCharCount(byte[] bytes, int index, int count, bool flush) { }

	// RVA: 0xE5 Offset: 0xE5 VA: 0xE5 Slot: 7
	public override int GetCharCount(byte* bytes, int count, bool flush) { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56 Slot: 8
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D Slot: 9
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57 Slot: 10
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush) { }
}

// Namespace: 
internal class Encoding.EncodingCharBuffer // TypeDefIndex: 395
{
	// Fields
	private char* chars; // 0x8
	private char* charStart; // 0xC
	private char* charEnd; // 0x10
	private int charCountResult; // 0x14
	private Encoding enc; // 0x18
	private DecoderNLS decoder; // 0x1C
	private byte* byteStart; // 0x20
	private byte* byteEnd; // 0x24
	private byte* bytes; // 0x28
	private DecoderFallbackBuffer fallbackBuffer; // 0x2C

	// Properties
	internal bool MoreData { get; }
	internal int BytesUsed { get; }
	internal int Count { get; }

	// Methods

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	internal void .ctor(Encoding enc, DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount) { }

	// RVA: 0x99B Offset: 0x99B VA: 0x99B
	internal bool AddChar(char ch, int numBytes) { }

	// RVA: 0x455 Offset: 0x455 VA: 0x455
	internal bool AddChar(char ch) { }

	// RVA: 0x3D4 Offset: 0x3D4 VA: 0x3D4
	internal void AdjustBytes(int count) { }

	// RVA: 0x885 Offset: 0x885 VA: 0x885
	internal bool get_MoreData() { }

	// RVA: 0x886 Offset: 0x886 VA: 0x886
	internal byte GetNextByte() { }

	// RVA: 0x887 Offset: 0x887 VA: 0x887
	internal int get_BytesUsed() { }

	// RVA: 0x456 Offset: 0x456 VA: 0x456
	internal bool Fallback(byte fallbackByte) { }

	// RVA: 0x457 Offset: 0x457 VA: 0x457
	internal bool Fallback(byte[] byteBuffer) { }

	// RVA: 0x888 Offset: 0x888 VA: 0x888
	internal int get_Count() { }
}

// Namespace: 
internal class Encoding.EncodingByteBuffer // TypeDefIndex: 396
{
	// Fields
	private byte* bytes; // 0x8
	private byte* byteStart; // 0xC
	private byte* byteEnd; // 0x10
	private char* chars; // 0x14
	private char* charStart; // 0x18
	private char* charEnd; // 0x1C
	private int byteCountResult; // 0x20
	private Encoding enc; // 0x24
	private EncoderNLS encoder; // 0x28
	internal EncoderFallbackBuffer fallbackBuffer; // 0x2C

	// Properties
	internal bool MoreData { get; }
	internal int CharsUsed { get; }
	internal int Count { get; }

	// Methods

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	internal void .ctor(Encoding inEncoding, EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount) { }

	// RVA: 0x999 Offset: 0x999 VA: 0x999
	internal bool AddByte(byte b, int moreBytesExpected) { }

	// RVA: 0x454 Offset: 0x454 VA: 0x454
	internal bool AddByte(byte b1) { }

	// RVA: 0x99A Offset: 0x99A VA: 0x99A
	internal bool AddByte(byte b1, byte b2) { }

	// RVA: 0xE7 Offset: 0xE7 VA: 0xE7
	internal bool AddByte(byte b1, byte b2, int moreBytesExpected) { }

	// RVA: 0x3D3 Offset: 0x3D3 VA: 0x3D3
	internal void MovePrevious(bool bThrow) { }

	// RVA: 0x881 Offset: 0x881 VA: 0x881
	internal bool get_MoreData() { }

	// RVA: 0x882 Offset: 0x882 VA: 0x882
	internal char GetNextChar() { }

	// RVA: 0x883 Offset: 0x883 VA: 0x883
	internal int get_CharsUsed() { }

	// RVA: 0x884 Offset: 0x884 VA: 0x884
	internal int get_Count() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x350 Offset: 0x350 VA: 0x350
[Serializable]
internal abstract class EncodingNLS : Encoding // TypeDefIndex: 397
{
	// Methods

	// RVA: 0x3D5 Offset: 0x3D5 VA: 0x3D5
	protected void .ctor(int codePage) { }

	// RVA: 0xE8 Offset: 0xE8 VA: 0xE8 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x459 Offset: 0x459 VA: 0x459 Slot: 9
	public override int GetByteCount(string s) { }

	// RVA: 0x99C Offset: 0x99C VA: 0x99C Slot: 11
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x64 Offset: 0x64 VA: 0x64 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0xE9 Offset: 0xE9 VA: 0xE9 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x99D Offset: 0x99D VA: 0x99D Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	// RVA: 0xEA Offset: 0xEA VA: 0xEA Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x88A Offset: 0x88A VA: 0x88A Slot: 27
	public override Decoder GetDecoder() { }

	// RVA: 0x88B Offset: 0x88B VA: 0x88B Slot: 28
	public override Encoder GetEncoder() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x351 Offset: 0x351 VA: 0x351
public abstract class EncodingProvider // TypeDefIndex: 398
{
	// Fields
	private static object s_InternalSyncObject; // 0x0
	private static EncodingProvider[] s_providers; // 0x4

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Encoding GetEncoding(string name) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract Encoding GetEncoding(int codepage) { }

	// RVA: 0x88C Offset: 0x88C VA: 0x88C
	internal static Encoding GetEncodingFromProvider(int codepage) { }

	// RVA: 0x88D Offset: 0x88D VA: 0x88D
	internal static Encoding GetEncodingFromProvider(string encodingName) { }

	// RVA: 0xEEB Offset: 0xEEB VA: 0xEEB
	private static void .cctor() { }
}

// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : EncodingNLS, ISerializable // TypeDefIndex: 399
{
	// Fields
	private static readonly char[] arrayCharBestFit; // 0xFFFFFFFF

	// Methods

	// RVA: 0x53C Offset: 0x53C VA: 0x53C
	public void .ctor() { }

	// RVA: 0x295 Offset: 0x295 VA: 0x295
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x296 Offset: 0x296 VA: 0x296 Slot: 35
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEC Offset: 0xEC VA: 0xEC Slot: 12
	internal override int GetByteCount(char* chars, int charCount, EncoderNLS encoder) { }

	// RVA: 0x5C Offset: 0x5C VA: 0x5C Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }

	// RVA: 0xED Offset: 0xED VA: 0xED Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS decoder) { }

	// RVA: 0x5D Offset: 0x5D VA: 0x5D Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder) { }

	// RVA: 0x45E Offset: 0x45E VA: 0x45E Slot: 29
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x45F Offset: 0x45F VA: 0x45F Slot: 30
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x898 Offset: 0x898 VA: 0x898 Slot: 33
	internal override char[] GetBestFitUnicodeToBytesData() { }

	// RVA: 0xEEC Offset: 0xEEC VA: 0xEEC
	private static void .cctor() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x352 Offset: 0x352 VA: 0x352
[DefaultMemberAttribute] // RVA: 0x352 Offset: 0x352 VA: 0x352
[Serializable]
public sealed class StringBuilder : ISerializable // TypeDefIndex: 400
{
	// Fields
	internal char[] m_ChunkChars; // 0x8
	internal StringBuilder m_ChunkPrevious; // 0xC
	internal int m_ChunkLength; // 0x10
	internal int m_ChunkOffset; // 0x14
	internal int m_MaxCapacity; // 0x18
	internal const int DefaultCapacity = 16;
	private const string CapacityField = "Capacity";
	private const string MaxCapacityField = "m_MaxCapacity";
	private const string StringValueField = "m_StringValue";
	private const string ThreadIDField = "m_currentThread";
	internal const int MaxChunkSize = 8000;

	// Properties
	public int Capacity { get; }
	public int MaxCapacity { get; }
	public int Length { get; set; }
	public char Chars { get; set; }

	// Methods

	// RVA: 0x53D Offset: 0x53D VA: 0x53D
	public void .ctor() { }

	// RVA: 0x3DA Offset: 0x3DA VA: 0x3DA
	public void .ctor(int capacity) { }

	// RVA: 0x3DB Offset: 0x3DB VA: 0x3DB
	public void .ctor(string value) { }

	// RVA: 0x29A Offset: 0x29A VA: 0x29A
	public void .ctor(string value, int capacity) { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F
	public void .ctor(string value, int startIndex, int length, int capacity) { }

	// RVA: 0x29B Offset: 0x29B VA: 0x29B
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x29C Offset: 0x29C VA: 0x29C Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x89E Offset: 0x89E VA: 0x89E
	public int get_Capacity() { }

	// RVA: 0x89F Offset: 0x89F VA: 0x89F
	public int get_MaxCapacity() { }

	// RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0 Slot: 3
	public override string ToString() { }

	// RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7
	public string ToString(int startIndex, int length) { }

	// RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
	public StringBuilder Clear() { }

	// RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
	public int get_Length() { }

	// RVA: 0x3DC Offset: 0x3DC VA: 0x3DC
	public void set_Length(int value) { }

	// RVA: 0x465 Offset: 0x465 VA: 0x465
	public char get_Chars(int index) { }

	// RVA: 0x29D Offset: 0x29D VA: 0x29D
	public void set_Chars(int index, char value) { }

	// RVA: 0x9A8 Offset: 0x9A8 VA: 0x9A8
	public StringBuilder Append(char value, int repeatCount) { }

	// RVA: 0xEF Offset: 0xEF VA: 0xEF
	public StringBuilder Append(char[] value, int startIndex, int charCount) { }

	// RVA: 0x466 Offset: 0x466 VA: 0x466
	public StringBuilder Append(string value) { }

	// RVA: 0x3DD Offset: 0x3DD VA: 0x3DD
	private void AppendHelper(string value) { }

	// RVA: 0xF0 Offset: 0xF0 VA: 0xF0
	public StringBuilder Append(string value, int startIndex, int count) { }

	[ComVisibleAttribute] // RVA: 0x6BB Offset: 0x6BB VA: 0x6BB
	// RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
	public StringBuilder AppendLine() { }

	[ComVisibleAttribute] // RVA: 0x6BC Offset: 0x6BC VA: 0x6BC
	// RVA: 0x467 Offset: 0x467 VA: 0x467
	public StringBuilder AppendLine(string value) { }

	// RVA: 0xF1 Offset: 0xF1 VA: 0xF1
	public StringBuilder Insert(int index, string value, int count) { }

	// RVA: 0x9A9 Offset: 0x9A9 VA: 0x9A9
	public StringBuilder Remove(int startIndex, int length) { }

	// RVA: 0x468 Offset: 0x468 VA: 0x468
	public StringBuilder Append(byte value) { }

	// RVA: 0x469 Offset: 0x469 VA: 0x469
	public StringBuilder Append(char value) { }

	// RVA: 0x46A Offset: 0x46A VA: 0x46A
	public StringBuilder Append(int value) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public StringBuilder Append(long value) { }

	// RVA: 0x46B Offset: 0x46B VA: 0x46B
	public StringBuilder Append(object value) { }

	// RVA: 0x9AA Offset: 0x9AA VA: 0x9AA
	public StringBuilder Insert(int index, string value) { }

	// RVA: 0x9AB Offset: 0x9AB VA: 0x9AB
	public StringBuilder Insert(int index, char value) { }

	// RVA: 0x9AC Offset: 0x9AC VA: 0x9AC
	public StringBuilder AppendFormat(string format, object arg0) { }

	// RVA: 0xF2 Offset: 0xF2 VA: 0xF2
	public StringBuilder AppendFormat(string format, object arg0, object arg1) { }

	// RVA: 0x66 Offset: 0x66 VA: 0x66
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x9AD Offset: 0x9AD VA: 0x9AD
	public StringBuilder AppendFormat(string format, object[] args) { }

	// RVA: 0xF3 Offset: 0xF3 VA: 0xF3
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0) { }

	// RVA: 0x67 Offset: 0x67 VA: 0x67
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1) { }

	// RVA: 0xEEE Offset: 0xEEE VA: 0xEEE
	private static void FormatError() { }

	// RVA: 0xF4 Offset: 0xF4 VA: 0xF4
	internal StringBuilder AppendFormatHelper(IFormatProvider provider, string format, ParamsArray args) { }

	// RVA: 0x9AE Offset: 0x9AE VA: 0x9AE
	public StringBuilder Replace(string oldValue, string newValue) { }

	// RVA: 0x68 Offset: 0x68 VA: 0x68
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6BD Offset: 0x6BD VA: 0x6BD
	// RVA: 0x9AF Offset: 0x9AF VA: 0x9AF
	public StringBuilder Append(char* value, int valueCount) { }

	// RVA: 0xD3 Offset: 0xD3 VA: 0xD3
	private void Insert(int index, char* value, int valueCount) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	private void ReplaceAllInChunk(int[] replacements, int replacementsCount, StringBuilder sourceChunk, int removeCount, string value) { }

	// RVA: 0x69 Offset: 0x69 VA: 0x69
	private bool StartsWith(StringBuilder chunk, int indexInChunk, int count, string value) { }

	// RVA: 0x60 Offset: 0x60 VA: 0x60
	private void ReplaceInPlaceAtChunk(ref StringBuilder chunk, ref int indexInChunk, char* value, int count) { }

	// RVA: 0xD4 Offset: 0xD4 VA: 0xD4
	private static void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count) { }

	// RVA: 0x61 Offset: 0x61 VA: 0x61
	private static void ThreadSafeCopy(char[] source, int sourceIndex, char[] destination, int destinationIndex, int count) { }

	// RVA: 0x46C Offset: 0x46C VA: 0x46C
	private StringBuilder FindChunkForIndex(int index) { }

	// RVA: 0x46D Offset: 0x46D VA: 0x46D
	private StringBuilder Next(StringBuilder chunk) { }

	// RVA: 0x3DE Offset: 0x3DE VA: 0x3DE
	private void ExpandByABlock(int minBlockCharCount) { }

	// RVA: 0x3DF Offset: 0x3DF VA: 0x3DF
	private void .ctor(StringBuilder from) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	private void MakeRoom(int index, int count, out StringBuilder chunk, out int indexInChunk, bool doneMoveFollowingChars) { }

	// RVA: 0xD5 Offset: 0xD5 VA: 0xD5
	private void .ctor(int size, int maxCapacity, StringBuilder previousBlock) { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62
	private void Remove(int startIndex, int count, out StringBuilder chunk, out int indexInChunk) { }
}

// Namespace: System.Text
internal static class StringBuilderCache // TypeDefIndex: 401
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x558 Offset: 0x558 VA: 0x558
	private static StringBuilder CachedInstance; // 0x80000000

	// Methods

	// RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
	public static StringBuilder Acquire(int capacity = 16) { }

	// RVA: 0x53E Offset: 0x53E VA: 0x53E
	public static void Release(StringBuilder sb) { }

	// RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5
	public static string GetStringAndRelease(StringBuilder sb) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x353 Offset: 0x353 VA: 0x353
[Serializable]
public class UnicodeEncoding : Encoding // TypeDefIndex: 402
{
	// Fields
	[OptionalFieldAttribute] // RVA: 0x559 Offset: 0x559 VA: 0x559
	internal bool isThrowException; // 0x1C
	internal bool bigEndian; // 0x1D
	internal bool byteOrderMark; // 0x1E
	private static readonly ulong highLowPatternMask; // 0x0

	// Methods

	// RVA: 0x54D Offset: 0x54D VA: 0x54D
	public void .ctor() { }

	// RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
	public void .ctor(bool bigEndian, bool byteOrderMark) { }

	// RVA: 0xD7 Offset: 0xD7 VA: 0xD7
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }

	[OnDeserializingAttribute] // RVA: 0x6BE Offset: 0x6BE VA: 0x6BE
	// RVA: 0x3EA Offset: 0x3EA VA: 0x3EA
	private void OnDeserializing(StreamingContext ctx) { }

	// RVA: 0x54E Offset: 0x54E VA: 0x54E Slot: 5
	internal override void SetDefaultFallbacks() { }

	// RVA: 0x105 Offset: 0x105 VA: 0x105 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x47F Offset: 0x47F VA: 0x47F Slot: 9
	public override int GetByteCount(string s) { }

	[ComVisibleAttribute] // RVA: 0x6BF Offset: 0x6BF VA: 0x6BF
	[CLSCompliantAttribute] // RVA: 0x6BF Offset: 0x6BF VA: 0x6BF
	// RVA: 0x9BB Offset: 0x9BB VA: 0x9BB Slot: 11
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x6D Offset: 0x6D VA: 0x6D Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x6E Offset: 0x6E VA: 0x6E Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[ComVisibleAttribute] // RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0
	[CLSCompliantAttribute] // RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0
	// RVA: 0x71 Offset: 0x71 VA: 0x71 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x106 Offset: 0x106 VA: 0x106 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1
	[ComVisibleAttribute] // RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1
	// RVA: 0x9BC Offset: 0x9BC VA: 0x9BC Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }

	// RVA: 0x6F Offset: 0x6F VA: 0x6F Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2
	[CLSCompliantAttribute] // RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2
	// RVA: 0x72 Offset: 0x72 VA: 0x72 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	[ComVisibleAttribute] // RVA: 0x6C3 Offset: 0x6C3 VA: 0x6C3
	// RVA: 0x107 Offset: 0x107 VA: 0x107 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x108 Offset: 0x108 VA: 0x108 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS encoder) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }

	// RVA: 0x109 Offset: 0x109 VA: 0x109 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }

	// RVA: 0x71 Offset: 0x71 VA: 0x71 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }

	[ComVisibleAttribute] // RVA: 0x6C4 Offset: 0x6C4 VA: 0x6C4
	// RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8 Slot: 28
	public override Encoder GetEncoder() { }

	// RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9 Slot: 27
	public override Decoder GetDecoder() { }

	// RVA: 0x8BA Offset: 0x8BA VA: 0x8BA Slot: 6
	public override byte[] GetPreamble() { }

	// RVA: 0x480 Offset: 0x480 VA: 0x480 Slot: 29
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x481 Offset: 0x481 VA: 0x481 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x482 Offset: 0x482 VA: 0x482 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x8BB Offset: 0x8BB VA: 0x8BB Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEEF Offset: 0xEEF VA: 0xEEF
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private class UnicodeEncoding.Decoder : DecoderNLS, ISerializable // TypeDefIndex: 403
{
	// Fields
	internal int lastByte; // 0x1C
	internal char lastChar; // 0x20

	// Properties
	internal override bool HasState { get; }

	// Methods

	// RVA: 0x3EB Offset: 0x3EB VA: 0x3EB
	public void .ctor(UnicodeEncoding encoding) { }

	// RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2AA Offset: 0x2AA VA: 0x2AA Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x54F Offset: 0x54F VA: 0x54F Slot: 4
	public override void Reset() { }

	// RVA: 0x8BC Offset: 0x8BC VA: 0x8BC Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 404
{
	// Fields
	private bool emitUTF32ByteOrderMark; // 0x1C
	private bool isThrowException; // 0x1D
	private bool bigEndian; // 0x1E

	// Methods

	// RVA: 0x53F Offset: 0x53F VA: 0x53F
	public void .ctor() { }

	// RVA: 0x29E Offset: 0x29E VA: 0x29E
	public void .ctor(bool bigEndian, bool byteOrderMark) { }

	// RVA: 0xD6 Offset: 0xD6 VA: 0xD6
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) { }

	// RVA: 0x540 Offset: 0x540 VA: 0x540 Slot: 5
	internal override void SetDefaultFallbacks() { }

	// RVA: 0xF5 Offset: 0xF5 VA: 0xF5 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x46E Offset: 0x46E VA: 0x46E Slot: 9
	public override int GetByteCount(string s) { }

	[CLSCompliantAttribute] // RVA: 0x6C5 Offset: 0x6C5 VA: 0x6C5
	// RVA: 0x9B0 Offset: 0x9B0 VA: 0x9B0 Slot: 11
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[CLSCompliantAttribute] // RVA: 0x6C6 Offset: 0x6C6 VA: 0x6C6
	// RVA: 0x6A Offset: 0x6A VA: 0x6A Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0xF6 Offset: 0xF6 VA: 0xF6 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6C7 Offset: 0x6C7 VA: 0x6C7
	// RVA: 0x9B1 Offset: 0x9B1 VA: 0x9B1 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }

	// RVA: 0x60 Offset: 0x60 VA: 0x60 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[CLSCompliantAttribute] // RVA: 0x6C8 Offset: 0x6C8 VA: 0x6C8
	// RVA: 0x6B Offset: 0x6B VA: 0x6B Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	// RVA: 0xF7 Offset: 0xF7 VA: 0xF7 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0xF8 Offset: 0xF8 VA: 0xF8 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS encoder) { }

	// RVA: 0x61 Offset: 0x61 VA: 0x61 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }

	// RVA: 0xF9 Offset: 0xF9 VA: 0xF9 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }

	// RVA: 0x9B2 Offset: 0x9B2 VA: 0x9B2
	private uint GetSurrogate(char cHigh, char cLow) { }

	// RVA: 0x46F Offset: 0x46F VA: 0x46F
	private char GetHighSurrogate(uint iChar) { }

	// RVA: 0x470 Offset: 0x470 VA: 0x470
	private char GetLowSurrogate(uint iChar) { }

	// RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6 Slot: 27
	public override Decoder GetDecoder() { }

	// RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7 Slot: 28
	public override Encoder GetEncoder() { }

	// RVA: 0x471 Offset: 0x471 VA: 0x471 Slot: 29
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x472 Offset: 0x472 VA: 0x472 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8 Slot: 6
	public override byte[] GetPreamble() { }

	// RVA: 0x473 Offset: 0x473 VA: 0x473 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
[Serializable]
internal class UTF32Encoding.UTF32Decoder : DecoderNLS // TypeDefIndex: 405
{
	// Fields
	internal int iChar; // 0x1C
	internal int readByteCount; // 0x20

	// Properties
	internal override bool HasState { get; }

	// Methods

	// RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0
	public void .ctor(UTF32Encoding encoding) { }

	// RVA: 0x541 Offset: 0x541 VA: 0x541 Slot: 4
	public override void Reset() { }

	// RVA: 0x8AA Offset: 0x8AA VA: 0x8AA Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x354 Offset: 0x354 VA: 0x354
[Serializable]
public class UTF7Encoding : Encoding // TypeDefIndex: 406
{
	// Fields
	private byte[] base64Bytes; // 0x1C
	private sbyte[] base64Values; // 0x20
	private bool[] directEncode; // 0x24
	[OptionalFieldAttribute] // RVA: 0x55A Offset: 0x55A VA: 0x55A
	private bool m_allowOptionals; // 0x28

	// Methods

	// RVA: 0x542 Offset: 0x542 VA: 0x542
	public void .ctor() { }

	// RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
	public void .ctor(bool allowOptionals) { }

	// RVA: 0x543 Offset: 0x543 VA: 0x543
	private void MakeTables() { }

	// RVA: 0x544 Offset: 0x544 VA: 0x544 Slot: 5
	internal override void SetDefaultFallbacks() { }

	[OnDeserializingAttribute] // RVA: 0x6C9 Offset: 0x6C9 VA: 0x6C9
	// RVA: 0x3E2 Offset: 0x3E2 VA: 0x3E2
	private void OnDeserializing(StreamingContext ctx) { }

	[OnDeserializedAttribute] // RVA: 0x6CA Offset: 0x6CA VA: 0x6CA
	// RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
	private void OnDeserialized(StreamingContext ctx) { }

	[ComVisibleAttribute] // RVA: 0x6CB Offset: 0x6CB VA: 0x6CB
	// RVA: 0x474 Offset: 0x474 VA: 0x474 Slot: 0
	public override bool Equals(object value) { }

	[ComVisibleAttribute] // RVA: 0x6CC Offset: 0x6CC VA: 0x6CC
	// RVA: 0x8AB Offset: 0x8AB VA: 0x8AB Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xFA Offset: 0xFA VA: 0xFA Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }

	[ComVisibleAttribute] // RVA: 0x6CD Offset: 0x6CD VA: 0x6CD
	// RVA: 0x475 Offset: 0x475 VA: 0x475 Slot: 9
	public override int GetByteCount(string s) { }

	[ComVisibleAttribute] // RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	[CLSCompliantAttribute] // RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	// RVA: 0x9B3 Offset: 0x9B3 VA: 0x9B3 Slot: 11
	public override int GetByteCount(char* chars, int count) { }

	[ComVisibleAttribute] // RVA: 0x6CF Offset: 0x6CF VA: 0x6CF
	// RVA: 0x63 Offset: 0x63 VA: 0x63 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x64 Offset: 0x64 VA: 0x64 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[ComVisibleAttribute] // RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	[CLSCompliantAttribute] // RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	// RVA: 0x6C Offset: 0x6C VA: 0x6C Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0xFB Offset: 0xFB VA: 0xFB Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1
	[ComVisibleAttribute] // RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1
	// RVA: 0x9B4 Offset: 0x9B4 VA: 0x9B4 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2
	[CLSCompliantAttribute] // RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2
	// RVA: 0x6D Offset: 0x6D VA: 0x6D Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	[ComVisibleAttribute] // RVA: 0x6D3 Offset: 0x6D3 VA: 0x6D3
	// RVA: 0xFC Offset: 0xFC VA: 0xFC Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0xFD Offset: 0xFD VA: 0xFD Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS baseEncoder) { }

	// RVA: 0x66 Offset: 0x66 VA: 0x66 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder) { }

	// RVA: 0xFE Offset: 0xFE VA: 0xFE Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }

	// RVA: 0x67 Offset: 0x67 VA: 0x67 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }

	// RVA: 0x8AC Offset: 0x8AC VA: 0x8AC Slot: 27
	public override Decoder GetDecoder() { }

	// RVA: 0x8AD Offset: 0x8AD VA: 0x8AD Slot: 28
	public override Encoder GetEncoder() { }

	// RVA: 0x476 Offset: 0x476 VA: 0x476 Slot: 29
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x477 Offset: 0x477 VA: 0x477 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
}

// Namespace: 
[Serializable]
private class UTF7Encoding.Decoder : DecoderNLS, ISerializable // TypeDefIndex: 407
{
	// Fields
	internal int bits; // 0x1C
	internal int bitCount; // 0x20
	internal bool firstByte; // 0x24

	// Properties
	internal override bool HasState { get; }

	// Methods

	// RVA: 0x3E4 Offset: 0x3E4 VA: 0x3E4
	public void .ctor(UTF7Encoding encoding) { }

	// RVA: 0x29F Offset: 0x29F VA: 0x29F
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2A0 Offset: 0x2A0 VA: 0x2A0 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x545 Offset: 0x545 VA: 0x545 Slot: 4
	public override void Reset() { }

	// RVA: 0x8AE Offset: 0x8AE VA: 0x8AE Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: 
[Serializable]
private class UTF7Encoding.Encoder : EncoderNLS, ISerializable // TypeDefIndex: 408
{
	// Fields
	internal int bits; // 0x20
	internal int bitCount; // 0x24

	// Methods

	// RVA: 0x3E6 Offset: 0x3E6 VA: 0x3E6
	public void .ctor(UTF7Encoding encoding) { }

	// RVA: 0x2A1 Offset: 0x2A1 VA: 0x2A1
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2A2 Offset: 0x2A2 VA: 0x2A2 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x548 Offset: 0x548 VA: 0x548 Slot: 4
	public override void Reset() { }
}

// Namespace: 
[Serializable]
internal sealed class UTF7Encoding.DecoderUTF7Fallback : DecoderFallback // TypeDefIndex: 409
{
	// Properties
	public override int MaxCharCount { get; }

	// Methods

	// RVA: 0x546 Offset: 0x546 VA: 0x546
	public void .ctor() { }

	// RVA: 0x8AF Offset: 0x8AF VA: 0x8AF Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0 Slot: 5
	public override int get_MaxCharCount() { }

	// RVA: 0x478 Offset: 0x478 VA: 0x478 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
internal sealed class UTF7Encoding.DecoderUTF7FallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 410
{
	// Fields
	private char cFallback; // 0x10
	private int iCount; // 0x14
	private int iSize; // 0x18

	// Methods

	// RVA: 0x3E5 Offset: 0x3E5 VA: 0x3E5
	public void .ctor(UTF7Encoding.DecoderUTF7Fallback fallback) { }

	// RVA: 0x9B5 Offset: 0x9B5 VA: 0x9B5 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2 Slot: 5
	public override char GetNextChar() { }

	// RVA: 0x547 Offset: 0x547 VA: 0x547 Slot: 6
	public override void Reset() { }

	// RVA: 0x9B6 Offset: 0x9B6 VA: 0x9B6 Slot: 8
	internal override int InternalFallback(byte[] bytes, byte* pBytes) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x355 Offset: 0x355 VA: 0x355
[Serializable]
public class UTF8Encoding : Encoding // TypeDefIndex: 411
{
	// Fields
	private bool emitUTF8Identifier; // 0x1C
	private bool isThrowException; // 0x1D

	// Methods

	// RVA: 0x549 Offset: 0x549 VA: 0x549
	public void .ctor() { }

	// RVA: 0x3E7 Offset: 0x3E7 VA: 0x3E7
	public void .ctor(bool encoderShouldEmitUTF8Identifier) { }

	// RVA: 0x2A3 Offset: 0x2A3 VA: 0x2A3
	public void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }

	// RVA: 0x54A Offset: 0x54A VA: 0x54A Slot: 5
	internal override void SetDefaultFallbacks() { }

	// RVA: 0xFF Offset: 0xFF VA: 0xFF Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x479 Offset: 0x479 VA: 0x479 Slot: 9
	public override int GetByteCount(string chars) { }

	[ComVisibleAttribute] // RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4
	[CLSCompliantAttribute] // RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4
	// RVA: 0x9B7 Offset: 0x9B7 VA: 0x9B7 Slot: 11
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x68 Offset: 0x68 VA: 0x68 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x69 Offset: 0x69 VA: 0x69 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[CLSCompliantAttribute] // RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5
	[ComVisibleAttribute] // RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5
	// RVA: 0x6E Offset: 0x6E VA: 0x6E Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x100 Offset: 0x100 VA: 0x100 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	[CLSCompliantAttribute] // RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6
	[ComVisibleAttribute] // RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6
	// RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }

	// RVA: 0x6A Offset: 0x6A VA: 0x6A Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7
	[CLSCompliantAttribute] // RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7
	// RVA: 0x6F Offset: 0x6F VA: 0x6F Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }

	[ComVisibleAttribute] // RVA: 0x6D8 Offset: 0x6D8 VA: 0x6D8
	// RVA: 0x101 Offset: 0x101 VA: 0x101 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x102 Offset: 0x102 VA: 0x102 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS baseEncoder) { }

	// RVA: 0x47A Offset: 0x47A VA: 0x47A
	private static int PtrDiff(char* a, char* b) { }

	// RVA: 0x47B Offset: 0x47B VA: 0x47B
	private static int PtrDiff(byte* a, byte* b) { }

	// RVA: 0x9B9 Offset: 0x9B9 VA: 0x9B9
	private static bool InRange(int ch, int start, int end) { }

	// RVA: 0x6B Offset: 0x6B VA: 0x6B Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder) { }

	// RVA: 0x103 Offset: 0x103 VA: 0x103 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }

	// RVA: 0x6C Offset: 0x6C VA: 0x6C Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70
	private bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, DecoderFallbackBuffer fallback, ref char* pTarget) { }

	// RVA: 0x104 Offset: 0x104 VA: 0x104
	private int FallbackInvalidByteSequence(byte* pSrc, int ch, DecoderFallbackBuffer fallback) { }

	// RVA: 0x9BA Offset: 0x9BA VA: 0x9BA
	private byte[] GetBytesUnknown(ref byte* pSrc, int ch) { }

	// RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3 Slot: 27
	public override Decoder GetDecoder() { }

	// RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4 Slot: 28
	public override Encoder GetEncoder() { }

	// RVA: 0x47C Offset: 0x47C VA: 0x47C Slot: 29
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x47D Offset: 0x47D VA: 0x47D Slot: 30
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5 Slot: 6
	public override byte[] GetPreamble() { }

	// RVA: 0x47E Offset: 0x47E VA: 0x47E Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
[Serializable]
internal class UTF8Encoding.UTF8Encoder : EncoderNLS, ISerializable // TypeDefIndex: 412
{
	// Fields
	internal int surrogateChar; // 0x20

	// Methods

	// RVA: 0x3E9 Offset: 0x3E9 VA: 0x3E9
	public void .ctor(UTF8Encoding encoding) { }

	// RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x54C Offset: 0x54C VA: 0x54C Slot: 4
	public override void Reset() { }
}

// Namespace: 
[Serializable]
internal class UTF8Encoding.UTF8Decoder : DecoderNLS, ISerializable // TypeDefIndex: 413
{
	// Fields
	internal int bits; // 0x1C

	// Properties
	internal override bool HasState { get; }

	// Methods

	// RVA: 0x3E8 Offset: 0x3E8 VA: 0x3E8
	public void .ctor(UTF8Encoding encoding) { }

	// RVA: 0x2A4 Offset: 0x2A4 VA: 0x2A4
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2A5 Offset: 0x2A5 VA: 0x2A5 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x54B Offset: 0x54B VA: 0x54B Slot: 4
	public override void Reset() { }

	// RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7 Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: System.Text
internal enum NormalizationCheck // TypeDefIndex: 414
{
	// Fields
	public int value__; // 0x0
	public const NormalizationCheck Yes = 0;
	public const NormalizationCheck No = 1;
	public const NormalizationCheck Maybe = 2;
}

// Namespace: System.Text
internal class Normalization // TypeDefIndex: 415
{
	// Fields
	private static byte* props; // 0x0
	private static int* mappedChars; // 0x4
	private static short* charMapIndex; // 0x8
	private static short* helperIndex; // 0xC
	private static ushort* mapIdxToComposite; // 0x10
	private static byte* combiningClass; // 0x14
	private static object forLock; // 0x18
	public static readonly bool isReady; // 0x1C

	// Methods

	// RVA: 0x899 Offset: 0x899 VA: 0x899
	private static uint PropValue(int cp) { }

	// RVA: 0x89A Offset: 0x89A VA: 0x89A
	private static int CharMapIdx(int cp) { }

	// RVA: 0x89B Offset: 0x89B VA: 0x89B
	private static byte GetCombiningClass(int c) { }

	// RVA: 0x89C Offset: 0x89C VA: 0x89C
	private static int GetPrimaryCompositeFromMapIndex(int src) { }

	// RVA: 0x89D Offset: 0x89D VA: 0x89D
	private static int GetPrimaryCompositeHelperIndex(int cp) { }

	// RVA: 0x460 Offset: 0x460 VA: 0x460
	private static string Compose(string source, int checkType) { }

	// RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	private static StringBuilder Combine(string source, int start, int checkType) { }

	// RVA: 0x297 Offset: 0x297 VA: 0x297
	private static void Combine(StringBuilder sb, int i, int checkType) { }

	// RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	private static int CombineHangul(StringBuilder sb, string s, int current) { }

	// RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	private static int Fetch(StringBuilder sb, string s, int i) { }

	// RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	private static int TryComposeWithPreviousStarter(StringBuilder sb, string s, int current) { }

	// RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5
	private static int TryCompose(int i, int starter, int candidate) { }

	// RVA: 0x461 Offset: 0x461 VA: 0x461
	private static string Decompose(string source, int checkType) { }

	// RVA: 0x298 Offset: 0x298 VA: 0x298
	private static void Decompose(string source, ref StringBuilder sb, int checkType) { }

	// RVA: 0x299 Offset: 0x299 VA: 0x299
	private static void ReorderCanonical(string src, ref StringBuilder sb, int start) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	private static void DecomposeChar(ref StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start) { }

	// RVA: 0x462 Offset: 0x462 VA: 0x462
	public static NormalizationCheck QuickCheck(char c, int type) { }

	// RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6
	private static int GetCanonicalHangul(int s, int[] buf, int bufIdx) { }

	// RVA: 0xEE Offset: 0xEE VA: 0xEE
	private static int GetCanonical(int c, int[] buf, int bufIdx, int checkType) { }

	// RVA: 0x463 Offset: 0x463 VA: 0x463
	public static string Normalize(string source, NormalizationForm normalizationForm) { }

	// RVA: 0x464 Offset: 0x464 VA: 0x464
	public static string Normalize(string source, int type) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass) { }

	// RVA: 0xEED Offset: 0xEED VA: 0xEED
	private static void .cctor() { }
}

// Namespace: System.Text
internal static class EncodingHelper // TypeDefIndex: 416
{
	// Fields
	private static Encoding utf8EncodingWithoutMarkers; // 0x0
	private static readonly object lockobj; // 0x4
	private static Assembly i18nAssembly; // 0x8
	private static bool i18nDisabled; // 0xC

	// Properties
	internal static Encoding UTF8Unmarked { get; }

	// Methods

	// RVA: 0x217 Offset: 0x217 VA: 0x217
	internal static Encoding get_UTF8Unmarked() { }

	// RVA: 0x889 Offset: 0x889 VA: 0x889
	internal static string InternalCodePage(ref int code_page) { }

	// RVA: 0x218 Offset: 0x218 VA: 0x218
	internal static Encoding GetDefaultEncoding() { }

	// RVA: 0x458 Offset: 0x458 VA: 0x458
	internal static object InvokeI18N(string name, object[] args) { }

	// RVA: 0xEEA Offset: 0xEEA VA: 0xEEA
	private static void .cctor() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0x356 Offset: 0x356 VA: 0x356
public enum NormalizationForm // TypeDefIndex: 417
{
	// Fields
	public int value__; // 0x0
	public const NormalizationForm FormC = 1;
	public const NormalizationForm FormD = 2;
	public const NormalizationForm FormKC = 5;
	public const NormalizationForm FormKD = 6;
}

// Namespace: System.Resources
internal sealed class FastResourceComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 418
{
	// Fields
	internal static readonly FastResourceComparer Default; // 0xFFFFFFFF

	// Methods

	// RVA: 0x33B Offset: 0x33B VA: 0x33B Slot: 6
	public int GetHashCode(object key) { }

	// RVA: 0x33C Offset: 0x33C VA: 0x33C Slot: 9
	public int GetHashCode(string key) { }

	// RVA: 0x5EE Offset: 0x5EE VA: 0x5EE
	internal static int HashFunction(string key) { }

	// RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5 Slot: 4
	public int Compare(object a, object b) { }

	// RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6 Slot: 7
	public int Compare(string a, string b) { }

	// RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7 Slot: 8
	public bool Equals(string a, string b) { }

	// RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8 Slot: 5
	public bool Equals(object a, object b) { }

	// RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
	public static int CompareOrdinal(string a, byte[] bytes, int bCharLength) { }

	// RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
	public static int CompareOrdinal(byte[] bytes, int aCharLength, string b) { }

	// RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
	internal static int CompareOrdinal(byte* a, int byteLen, string b) { }

	// RVA: 0x401 Offset: 0x401 VA: 0x401
	public void .ctor() { }

	// RVA: 0xEB5 Offset: 0xEB5 VA: 0xEB5
	private static void .cctor() { }
}

// Namespace: System.Resources
internal class FileBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 419
{
	// Fields
	private ResourceManager.ResourceManagerMediator _mediator; // 0x8

	// Methods

	// RVA: 0x260 Offset: 0x260 VA: 0x260
	public void .ctor(ResourceManager.ResourceManagerMediator mediator) { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41 Slot: 4
	public ResourceSet GrovelForResourceSet(CultureInfo culture, Dictionary<string, ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref StackCrawlMark stackMark) { }

	// RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
	private string FindResourceFile(CultureInfo culture, string fileName) { }

	// RVA: 0x33D Offset: 0x33D VA: 0x33D
	private ResourceSet CreateResourceSet(string file) { }
}

// Namespace: System.Resources
internal interface IResourceGroveler // TypeDefIndex: 420
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ResourceSet GrovelForResourceSet(CultureInfo culture, Dictionary<string, ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref StackCrawlMark stackMark) { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x357 Offset: 0x357 VA: 0x357
public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 421
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Close() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IDictionaryEnumerator GetEnumerator() { }
}

// Namespace: System.Resources
internal class ManifestBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 422
{
	// Fields
	private ResourceManager.ResourceManagerMediator _mediator; // 0x8

	// Methods

	// RVA: 0x261 Offset: 0x261 VA: 0x261
	public void .ctor(ResourceManager.ResourceManagerMediator mediator) { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42 Slot: 4
	public ResourceSet GrovelForResourceSet(CultureInfo culture, Dictionary<string, ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref StackCrawlMark stackMark) { }

	// RVA: 0x33E Offset: 0x33E VA: 0x33E
	private CultureInfo UltimateFallbackFixup(CultureInfo lookForCulture) { }

	// RVA: 0x33F Offset: 0x33F VA: 0x33F
	internal static CultureInfo GetNeutralResourcesLanguage(Assembly a, ref UltimateResourceFallbackLocation fallbackLocation) { }

	// RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
	internal ResourceSet CreateResourceSet(Stream store, Assembly assembly) { }

	// RVA: 0xA0 Offset: 0xA0 VA: 0xA0
	private Stream GetManifestResourceStream(RuntimeAssembly satellite, string fileName, ref StackCrawlMark stackMark) { }

	// RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
	private Stream CaseInsensitiveManifestResourceStreamLookup(RuntimeAssembly satellite, string name) { }

	// RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
	private RuntimeAssembly GetSatelliteAssembly(CultureInfo lookForCulture, ref StackCrawlMark stackMark) { }

	// RVA: 0x900 Offset: 0x900 VA: 0x900
	private bool CanUseDefaultResourceClasses(string readerTypeName, string resSetTypeName) { }

	// RVA: 0x5EF Offset: 0x5EF VA: 0x5EF
	private string GetSatelliteAssemblyName() { }

	// RVA: 0x402 Offset: 0x402 VA: 0x402
	private void HandleSatelliteMissing() { }

	// RVA: 0x262 Offset: 0x262 VA: 0x262
	private void HandleResourceStreamMissing(string fileName) { }

	// RVA: 0x901 Offset: 0x901 VA: 0x901
	private static bool GetNeutralResourcesLanguageAttribute(Assembly assembly, ref string cultureName, ref short fallbackLocation) { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x358 Offset: 0x358 VA: 0x358
[Serializable]
public class MissingManifestResourceException : SystemException // TypeDefIndex: 423
{
	// Methods

	// RVA: 0x403 Offset: 0x403 VA: 0x403
	public void .ctor() { }

	// RVA: 0x263 Offset: 0x263 VA: 0x263
	public void .ctor(string message) { }

	// RVA: 0x1CB Offset: 0x1CB VA: 0x1CB
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x359 Offset: 0x359 VA: 0x359
[Serializable]
public class MissingSatelliteAssemblyException : SystemException // TypeDefIndex: 424
{
	// Fields
	private string _cultureName; // 0x44

	// Methods

	// RVA: 0x404 Offset: 0x404 VA: 0x404
	public void .ctor() { }

	// RVA: 0x1CC Offset: 0x1CC VA: 0x1CC
	public void .ctor(string message, string cultureName) { }

	// RVA: 0x1CD Offset: 0x1CD VA: 0x1CD
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Resources
[AttributeUsageAttribute] // RVA: 0x35A Offset: 0x35A VA: 0x35A
[ComVisibleAttribute] // RVA: 0x35A Offset: 0x35A VA: 0x35A
public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 425
{
	// Fields
	private string _culture; // 0x8
	private UltimateResourceFallbackLocation _fallbackLoc; // 0xC

	// Properties
	public string CultureName { get; }
	public UltimateResourceFallbackLocation Location { get; }

	// Methods

	// RVA: 0x264 Offset: 0x264 VA: 0x264
	public void .ctor(string cultureName) { }

	// RVA: 0x5F0 Offset: 0x5F0 VA: 0x5F0
	public string get_CultureName() { }

	// RVA: 0x5F1 Offset: 0x5F1 VA: 0x5F1
	public UltimateResourceFallbackLocation get_Location() { }
}

// Namespace: System.Resources
internal class ResourceFallbackManager : IEnumerable<CultureInfo>, IEnumerable // TypeDefIndex: 426
{
	// Fields
	private CultureInfo m_startingCulture; // 0x8
	private CultureInfo m_neutralResourcesCulture; // 0xC
	private bool m_useParents; // 0x10

	// Methods

	// RVA: 0x98 Offset: 0x98 VA: 0x98
	internal void .ctor(CultureInfo startingCulture, CultureInfo neutralResourcesCulture, bool useParents) { }

	// RVA: 0x5F2 Offset: 0x5F2 VA: 0x5F2 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[IteratorStateMachineAttribute] // RVA: 0x6D9 Offset: 0x6D9 VA: 0x6D9
	// RVA: 0x5F3 Offset: 0x5F3 VA: 0x5F3 Slot: 4
	public IEnumerator<CultureInfo> GetEnumerator() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x35B Offset: 0x35B VA: 0x35B
private sealed class ResourceFallbackManager.<GetEnumerator>d__5 : IEnumerator<CultureInfo>, IDisposable, IEnumerator // TypeDefIndex: 427
{
	// Fields
	private int <>1__state; // 0x8
	private CultureInfo <>2__current; // 0xC
	public ResourceFallbackManager <>4__this; // 0x10
	private CultureInfo <currentCulture>5__1; // 0x14
	private bool <reachedNeutralResourcesCulture>5__2; // 0x18

	// Properties
	private CultureInfo System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0x6DA Offset: 0x6DA VA: 0x6DA
	// RVA: 0x265 Offset: 0x265 VA: 0x265
	public void .ctor(int <>1__state) { }

	[DebuggerHiddenAttribute] // RVA: 0x6DB Offset: 0x6DB VA: 0x6DB
	// RVA: 0x405 Offset: 0x405 VA: 0x405 Slot: 5
	private void System.IDisposable.Dispose() { }

	// RVA: 0x5F4 Offset: 0x5F4 VA: 0x5F4 Slot: 6
	private bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0x6DC Offset: 0x6DC VA: 0x6DC
	// RVA: 0x5F5 Offset: 0x5F5 VA: 0x5F5 Slot: 4
	private CultureInfo System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0x6DD Offset: 0x6DD VA: 0x6DD
	// RVA: 0x5F6 Offset: 0x5F6 VA: 0x5F6 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x35C Offset: 0x35C VA: 0x35C
[Serializable]
public class ResourceManager // TypeDefIndex: 428
{
	// Fields
	protected string BaseNameField; // 0x8
	[ObsoleteAttribute] // RVA: 0x55B Offset: 0x55B VA: 0x55B
	protected Hashtable ResourceSets; // 0xC
	private Dictionary<string, ResourceSet> _resourceSets; // 0x10
	private string moduleDir; // 0x14
	protected Assembly MainAssembly; // 0x18
	private Type _locationInfo; // 0x1C
	private Type _userResourceSet; // 0x20
	private CultureInfo _neutralResourcesCulture; // 0x24
	private ResourceManager.CultureNameResourceSetPair _lastUsedResourceCache; // 0x28
	private bool _ignoreCase; // 0x2C
	private bool UseManifest; // 0x2D
	[OptionalFieldAttribute] // RVA: 0x55C Offset: 0x55C VA: 0x55C
	private bool UseSatelliteAssem; // 0x2E
	[OptionalFieldAttribute] // RVA: 0x55D Offset: 0x55D VA: 0x55D
	private UltimateResourceFallbackLocation _fallbackLoc; // 0x30
	[OptionalFieldAttribute] // RVA: 0x55E Offset: 0x55E VA: 0x55E
	private Version _satelliteContractVersion; // 0x34
	[OptionalFieldAttribute] // RVA: 0x55F Offset: 0x55F VA: 0x55F
	private bool _lookedForSatelliteContractVersion; // 0x38
	[OptionalFieldAttribute] // RVA: 0x560 Offset: 0x560 VA: 0x560
	private Assembly _callingAssembly; // 0x3C
	[OptionalFieldAttribute] // RVA: 0x561 Offset: 0x561 VA: 0x561
	private RuntimeAssembly m_callingAssembly; // 0x40
	private IResourceGroveler resourceGroveler; // 0x44
	public static readonly int MagicNumber; // 0x0
	public static readonly int HeaderVersionNumber; // 0x4
	private static readonly Type _minResourceSet; // 0x8
	internal static readonly string ResReaderTypeName; // 0xC
	internal static readonly string ResSetTypeName; // 0x10
	internal static readonly string MscorlibName; // 0x14
	internal static readonly int DEBUG; // 0x18

	// Properties
	public virtual string BaseName { get; }
	protected UltimateResourceFallbackLocation FallbackLocation { get; }

	// Methods

	// RVA: 0x406 Offset: 0x406 VA: 0x406
	private void Init() { }

	// RVA: 0x407 Offset: 0x407 VA: 0x407
	protected void .ctor() { }

	// RVA: 0x1CF Offset: 0x1CF VA: 0x1CF
	public void .ctor(string baseName, Assembly assembly) { }

	[OnDeserializingAttribute] // RVA: 0x6DE Offset: 0x6DE VA: 0x6DE
	// RVA: 0x267 Offset: 0x267 VA: 0x267
	private void OnDeserializing(StreamingContext ctx) { }

	[OnDeserializedAttribute] // RVA: 0x6DF Offset: 0x6DF VA: 0x6DF
	// RVA: 0x268 Offset: 0x268 VA: 0x268
	private void OnDeserialized(StreamingContext ctx) { }

	[OnSerializingAttribute] // RVA: 0x6E0 Offset: 0x6E0 VA: 0x6E0
	// RVA: 0x269 Offset: 0x269 VA: 0x269
	private void OnSerializing(StreamingContext ctx) { }

	// RVA: 0x408 Offset: 0x408 VA: 0x408
	private void CommonAssemblyInit() { }

	// RVA: 0x5FA Offset: 0x5FA VA: 0x5FA Slot: 4
	public virtual string get_BaseName() { }

	// RVA: 0x5FB Offset: 0x5FB VA: 0x5FB
	protected UltimateResourceFallbackLocation get_FallbackLocation() { }

	// RVA: 0x340 Offset: 0x340 VA: 0x340 Slot: 5
	protected virtual string GetResourceFileName(CultureInfo culture) { }

	// RVA: 0x341 Offset: 0x341 VA: 0x341
	internal ResourceSet GetFirstResourceSet(CultureInfo culture) { }

	// RVA: 0xA1 Offset: 0xA1 VA: 0xA1 Slot: 6
	public virtual ResourceSet GetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents) { }

	// RVA: 0xA2 Offset: 0xA2 VA: 0xA2 Slot: 7
	protected virtual ResourceSet InternalGetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents) { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	private ResourceSet InternalGetResourceSet(CultureInfo requestedCulture, bool createIfNotExists, bool tryParents, ref StackCrawlMark stackMark) { }

	// RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0
	private static void AddResourceSet(Dictionary<string, ResourceSet> localResourceSets, string cultureName, ref ResourceSet rs) { }

	// RVA: 0x5FC Offset: 0x5FC VA: 0x5FC
	protected static Version GetSatelliteContractVersion(Assembly a) { }

	// RVA: 0x902 Offset: 0x902 VA: 0x902
	internal static bool CompareNames(string asmTypeName1, string typeName2, AssemblyName asmName2) { }

	// RVA: 0x409 Offset: 0x409 VA: 0x409
	private void SetAppXConfiguration() { }

	// RVA: 0x903 Offset: 0x903 VA: 0x903 Slot: 8
	public virtual string GetString(string name, CultureInfo culture) { }

	// RVA: 0xEB6 Offset: 0xEB6 VA: 0xEB6
	private static void .cctor() { }
}

// Namespace: 
internal class ResourceManager.CultureNameResourceSetPair // TypeDefIndex: 429
{
	// Fields
	public string lastCultureName; // 0x8
	public ResourceSet lastResourceSet; // 0xC

	// Methods

	// RVA: 0x40A Offset: 0x40A VA: 0x40A
	public void .ctor() { }
}

// Namespace: 
internal class ResourceManager.ResourceManagerMediator // TypeDefIndex: 430
{
	// Fields
	private ResourceManager _rm; // 0x8

	// Properties
	internal string ModuleDir { get; }
	internal Type LocationInfo { get; }
	internal Type UserResourceSet { get; }
	internal string BaseNameField { get; }
	internal CultureInfo NeutralResourcesCulture { get; }
	internal bool LookedForSatelliteContractVersion { get; set; }
	internal Version SatelliteContractVersion { get; set; }
	internal UltimateResourceFallbackLocation FallbackLoc { get; }
	internal RuntimeAssembly CallingAssembly { get; }
	internal RuntimeAssembly MainAssembly { get; }
	internal string BaseName { get; }

	// Methods

	// RVA: 0x26A Offset: 0x26A VA: 0x26A
	internal void .ctor(ResourceManager rm) { }

	// RVA: 0x5FD Offset: 0x5FD VA: 0x5FD
	internal string get_ModuleDir() { }

	// RVA: 0x5FE Offset: 0x5FE VA: 0x5FE
	internal Type get_LocationInfo() { }

	// RVA: 0x5FF Offset: 0x5FF VA: 0x5FF
	internal Type get_UserResourceSet() { }

	// RVA: 0x600 Offset: 0x600 VA: 0x600
	internal string get_BaseNameField() { }

	// RVA: 0x601 Offset: 0x601 VA: 0x601
	internal CultureInfo get_NeutralResourcesCulture() { }

	// RVA: 0x342 Offset: 0x342 VA: 0x342
	internal string GetResourceFileName(CultureInfo culture) { }

	// RVA: 0x602 Offset: 0x602 VA: 0x602
	internal bool get_LookedForSatelliteContractVersion() { }

	// RVA: 0x26B Offset: 0x26B VA: 0x26B
	internal void set_LookedForSatelliteContractVersion(bool value) { }

	// RVA: 0x603 Offset: 0x603 VA: 0x603
	internal Version get_SatelliteContractVersion() { }

	// RVA: 0x26C Offset: 0x26C VA: 0x26C
	internal void set_SatelliteContractVersion(Version value) { }

	// RVA: 0x343 Offset: 0x343 VA: 0x343
	internal Version ObtainSatelliteContractVersion(Assembly a) { }

	// RVA: 0x604 Offset: 0x604 VA: 0x604
	internal UltimateResourceFallbackLocation get_FallbackLoc() { }

	// RVA: 0x605 Offset: 0x605 VA: 0x605
	internal RuntimeAssembly get_CallingAssembly() { }

	// RVA: 0x606 Offset: 0x606 VA: 0x606
	internal RuntimeAssembly get_MainAssembly() { }

	// RVA: 0x607 Offset: 0x607 VA: 0x607
	internal string get_BaseName() { }
}

// Namespace: System.Resources
internal struct ResourceLocator // TypeDefIndex: 431
{
	// Fields
	internal object _value; // 0x0
	internal int _dataPos; // 0x4

	// Properties
	internal int DataPosition { get; }
	internal object Value { get; set; }

	// Methods

	// RVA: 0x1CE Offset: 0x1CE VA: 0x1CE
	internal void .ctor(int dataPos, object value) { }

	// RVA: 0x5F7 Offset: 0x5F7 VA: 0x5F7
	internal int get_DataPosition() { }

	// RVA: 0x5F8 Offset: 0x5F8 VA: 0x5F8
	internal object get_Value() { }

	// RVA: 0x266 Offset: 0x266 VA: 0x266
	internal void set_Value(object value) { }

	// RVA: 0x5F9 Offset: 0x5F9 VA: 0x5F9
	internal static bool CanCache(ResourceTypeCode value) { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x35D Offset: 0x35D VA: 0x35D
public sealed class ResourceReader : IResourceReader, IEnumerable, IDisposable // TypeDefIndex: 432
{
	// Fields
	private BinaryReader _store; // 0x8
	internal Dictionary<string, ResourceLocator> _resCache; // 0xC
	private long _nameSectionOffset; // 0x10
	private long _dataSectionOffset; // 0x18
	private int[] _nameHashes; // 0x20
	private int* _nameHashesPtr; // 0x24
	private int[] _namePositions; // 0x28
	private int* _namePositionsPtr; // 0x2C
	private RuntimeType[] _typeTable; // 0x30
	private int[] _typeNamePositions; // 0x34
	private BinaryFormatter _objFormatter; // 0x38
	private int _numResources; // 0x3C
	private UnmanagedMemoryStream _ums; // 0x40
	private int _version; // 0x44

	// Methods

	// RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1
	internal void .ctor(Stream stream, Dictionary<string, ResourceLocator> resCache) { }

	// RVA: 0x40B Offset: 0x40B VA: 0x40B Slot: 4
	public void Close() { }

	// RVA: 0x40C Offset: 0x40C VA: 0x40C Slot: 7
	public void Dispose() { }

	// RVA: 0x26D Offset: 0x26D VA: 0x26D
	private void Dispose(bool disposing) { }

	// RVA: 0x608 Offset: 0x608 VA: 0x608
	internal static int ReadUnalignedI4(int* p) { }

	// RVA: 0x40D Offset: 0x40D VA: 0x40D
	private void SkipString() { }

	// RVA: 0x344 Offset: 0x344 VA: 0x344
	private int GetNameHash(int index) { }

	// RVA: 0x345 Offset: 0x345 VA: 0x345
	private int GetNamePosition(int index) { }

	// RVA: 0x609 Offset: 0x609 VA: 0x609 Slot: 6
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x60A Offset: 0x60A VA: 0x60A Slot: 5
	public IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x60B Offset: 0x60B VA: 0x60B
	internal ResourceReader.ResourceEnumerator GetEnumeratorInternal() { }

	// RVA: 0x346 Offset: 0x346 VA: 0x346
	internal int FindPosForResource(string name) { }

	// RVA: 0x347 Offset: 0x347 VA: 0x347
	private bool CompareStringEqualsName(string name) { }

	// RVA: 0x904 Offset: 0x904 VA: 0x904
	private string AllocateStringForNameIndex(int index, out int dataOffset) { }

	// RVA: 0x348 Offset: 0x348 VA: 0x348
	private object GetValueForNameIndex(int index) { }

	// RVA: 0x349 Offset: 0x349 VA: 0x349
	internal string LoadString(int pos) { }

	// RVA: 0x34A Offset: 0x34A VA: 0x34A
	internal object LoadObject(int pos) { }

	// RVA: 0x905 Offset: 0x905 VA: 0x905
	internal object LoadObject(int pos, out ResourceTypeCode typeCode) { }

	// RVA: 0x34B Offset: 0x34B VA: 0x34B
	internal object LoadObjectV1(int pos) { }

	// RVA: 0x34C Offset: 0x34C VA: 0x34C
	private object _LoadObjectV1(int pos) { }

	// RVA: 0x906 Offset: 0x906 VA: 0x906
	internal object LoadObjectV2(int pos, out ResourceTypeCode typeCode) { }

	// RVA: 0x907 Offset: 0x907 VA: 0x907
	private object _LoadObjectV2(int pos, out ResourceTypeCode typeCode) { }

	// RVA: 0x34D Offset: 0x34D VA: 0x34D
	private object DeserializeObject(int typeIndex) { }

	// RVA: 0x40E Offset: 0x40E VA: 0x40E
	private void ReadResources() { }

	// RVA: 0x40F Offset: 0x40F VA: 0x40F
	private void _ReadResources() { }

	// RVA: 0x34E Offset: 0x34E VA: 0x34E
	private RuntimeType FindType(int typeIndex) { }
}

// Namespace: 
internal sealed class ResourceReader.ResourceEnumerator : IDictionaryEnumerator, IEnumerator // TypeDefIndex: 433
{
	// Fields
	private ResourceReader _reader; // 0x8
	private bool _currentIsValid; // 0xC
	private int _currentName; // 0x10
	private int _dataPosition; // 0x14

	// Properties
	public object Key { get; }
	public object Current { get; }
	internal int DataPosition { get; }
	public DictionaryEntry Entry { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x26E Offset: 0x26E VA: 0x26E
	internal void .ctor(ResourceReader reader) { }

	// RVA: 0x60C Offset: 0x60C VA: 0x60C Slot: 7
	public bool MoveNext() { }

	// RVA: 0x60D Offset: 0x60D VA: 0x60D Slot: 4
	public object get_Key() { }

	// RVA: 0x60E Offset: 0x60E VA: 0x60E Slot: 8
	public object get_Current() { }

	// RVA: 0x60F Offset: 0x60F VA: 0x60F
	internal int get_DataPosition() { }

	// RVA: 0x26F Offset: 0x26F VA: 0x26F Slot: 6
	public DictionaryEntry get_Entry() { }

	// RVA: 0x610 Offset: 0x610 VA: 0x610 Slot: 5
	public object get_Value() { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x35E Offset: 0x35E VA: 0x35E
[Serializable]
public class ResourceSet : IDisposable, IEnumerable // TypeDefIndex: 434
{
	// Fields
	protected IResourceReader Reader; // 0x8
	protected Hashtable Table; // 0xC
	private Hashtable _caseInsensitiveTable; // 0x10

	// Methods

	// RVA: 0x410 Offset: 0x410 VA: 0x410
	protected void .ctor() { }

	// RVA: 0x270 Offset: 0x270 VA: 0x270
	internal void .ctor(bool junk) { }

	// RVA: 0x411 Offset: 0x411 VA: 0x411
	private void CommonInit() { }

	// RVA: 0x271 Offset: 0x271 VA: 0x271 Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x412 Offset: 0x412 VA: 0x412 Slot: 4
	public void Dispose() { }

	[ComVisibleAttribute] // RVA: 0x6E1 Offset: 0x6E1 VA: 0x6E1
	// RVA: 0x611 Offset: 0x611 VA: 0x611 Slot: 7
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x612 Offset: 0x612 VA: 0x612 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x613 Offset: 0x613 VA: 0x613
	private IDictionaryEnumerator GetEnumeratorHelper() { }

	// RVA: 0x34F Offset: 0x34F VA: 0x34F Slot: 8
	public virtual string GetString(string name) { }

	// RVA: 0x908 Offset: 0x908 VA: 0x908 Slot: 9
	public virtual string GetString(string name, bool ignoreCase) { }

	// RVA: 0x350 Offset: 0x350 VA: 0x350 Slot: 10
	public virtual object GetObject(string name) { }

	// RVA: 0x909 Offset: 0x909 VA: 0x909 Slot: 11
	public virtual object GetObject(string name, bool ignoreCase) { }

	// RVA: 0x351 Offset: 0x351 VA: 0x351
	private object GetObjectInternal(string name) { }

	// RVA: 0x352 Offset: 0x352 VA: 0x352
	private object GetCaseInsensitiveObjectInternal(string name) { }
}

// Namespace: System.Resources
[Serializable]
internal enum ResourceTypeCode // TypeDefIndex: 435
{
	// Fields
	public int value__; // 0x0
	public const ResourceTypeCode Null = 0;
	public const ResourceTypeCode String = 1;
	public const ResourceTypeCode Boolean = 2;
	public const ResourceTypeCode Char = 3;
	public const ResourceTypeCode Byte = 4;
	public const ResourceTypeCode SByte = 5;
	public const ResourceTypeCode Int16 = 6;
	public const ResourceTypeCode UInt16 = 7;
	public const ResourceTypeCode Int32 = 8;
	public const ResourceTypeCode UInt32 = 9;
	public const ResourceTypeCode Int64 = 10;
	public const ResourceTypeCode UInt64 = 11;
	public const ResourceTypeCode Single = 12;
	public const ResourceTypeCode Double = 13;
	public const ResourceTypeCode Decimal = 14;
	public const ResourceTypeCode DateTime = 15;
	public const ResourceTypeCode TimeSpan = 16;
	public const ResourceTypeCode LastPrimitive = 16;
	public const ResourceTypeCode ByteArray = 32;
	public const ResourceTypeCode Stream = 33;
	public const ResourceTypeCode StartOfUserTypes = 64;
}

// Namespace: System.Resources
internal sealed class RuntimeResourceSet : ResourceSet, IEnumerable // TypeDefIndex: 436
{
	// Fields
	internal const int Version = 2;
	private Dictionary<string, ResourceLocator> _resCache; // 0x14
	private ResourceReader _defaultReader; // 0x18
	private Dictionary<string, ResourceLocator> _caseInsensitiveTable; // 0x1C
	private bool _haveReadFromReader; // 0x20

	// Methods

	// RVA: 0x272 Offset: 0x272 VA: 0x272
	internal void .ctor(string fileName) { }

	// RVA: 0x273 Offset: 0x273 VA: 0x273
	internal void .ctor(Stream stream) { }

	// RVA: 0x274 Offset: 0x274 VA: 0x274 Slot: 6
	protected override void Dispose(bool disposing) { }

	// RVA: 0x614 Offset: 0x614 VA: 0x614 Slot: 7
	public override IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x615 Offset: 0x615 VA: 0x615 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x616 Offset: 0x616 VA: 0x616
	private IDictionaryEnumerator GetEnumeratorHelper() { }

	// RVA: 0x353 Offset: 0x353 VA: 0x353 Slot: 8
	public override string GetString(string key) { }

	// RVA: 0x90A Offset: 0x90A VA: 0x90A Slot: 9
	public override string GetString(string key, bool ignoreCase) { }

	// RVA: 0x354 Offset: 0x354 VA: 0x354 Slot: 10
	public override object GetObject(string key) { }

	// RVA: 0x90B Offset: 0x90B VA: 0x90B Slot: 11
	public override object GetObject(string key, bool ignoreCase) { }

	// RVA: 0xA3 Offset: 0xA3 VA: 0xA3
	private object GetObject(string key, bool ignoreCase, bool isString) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	private object ResolveResourceLocator(ResourceLocator resLocation, string key, Dictionary<string, ResourceLocator> copyOfCache, bool keyInWrongCase) { }
}

// Namespace: System.Resources
[AttributeUsageAttribute] // RVA: 0x35F Offset: 0x35F VA: 0x35F
[ComVisibleAttribute] // RVA: 0x35F Offset: 0x35F VA: 0x35F
public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 437
{
	// Fields
	private string _version; // 0x8

	// Properties
	public string Version { get; }

	// Methods

	// RVA: 0x275 Offset: 0x275 VA: 0x275
	public void .ctor(string version) { }

	// RVA: 0x617 Offset: 0x617 VA: 0x617
	public string get_Version() { }
}

// Namespace: System.Resources
[ComVisibleAttribute] // RVA: 0x360 Offset: 0x360 VA: 0x360
[Serializable]
public enum UltimateResourceFallbackLocation // TypeDefIndex: 438
{
	// Fields
	public int value__; // 0x0
	public const UltimateResourceFallbackLocation MainAssembly = 0;
	public const UltimateResourceFallbackLocation Satellite = 1;
}

// Namespace: System.Reflection
[ExtensionAttribute] // RVA: 0x361 Offset: 0x361 VA: 0x361
public static class CustomAttributeExtensions // TypeDefIndex: 439
{
	// Methods

	[ExtensionAttribute] // RVA: 0x6E2 Offset: 0x6E2 VA: 0x6E2
	// RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType) { }

	[ExtensionAttribute] // RVA: 0x6E3 Offset: 0x6E3 VA: 0x6E3
	// RVA: -1 Offset: -1
	public static T GetCustomAttribute<T>(Assembly element) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD1B Offset: 0xD1B VA: 0xD1B
	|-CustomAttributeExtensions.GetCustomAttribute<object>
	|-CustomAttributeExtensions.GetCustomAttribute<NeutralResourcesLanguageAttribute>
	*/
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x362 Offset: 0x362 VA: 0x362
[Serializable]
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 440
{
	// Methods

	// RVA: 0x3D3 Offset: 0x3D3 VA: 0x3D3
	public void .ctor() { }

	// RVA: 0x238 Offset: 0x238 VA: 0x238
	public void .ctor(string message) { }

	// RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x363 Offset: 0x363 VA: 0x363
[ComVisibleAttribute] // RVA: 0x363 Offset: 0x363 VA: 0x363
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 441
{
	// Fields
	private string m_copyright; // 0x8

	// Methods

	// RVA: 0x23C Offset: 0x23C VA: 0x23C
	public void .ctor(string copyright) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x364 Offset: 0x364 VA: 0x364
[ComVisibleAttribute] // RVA: 0x364 Offset: 0x364 VA: 0x364
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 442
{
	// Fields
	private string m_trademark; // 0x8

	// Methods

	// RVA: 0x24C Offset: 0x24C VA: 0x24C
	public void .ctor(string trademark) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x365 Offset: 0x365 VA: 0x365
[ComVisibleAttribute] // RVA: 0x365 Offset: 0x365 VA: 0x365
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 443
{
	// Fields
	private string m_product; // 0x8

	// Methods

	// RVA: 0x24A Offset: 0x24A VA: 0x24A
	public void .ctor(string product) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x366 Offset: 0x366 VA: 0x366
[ComVisibleAttribute] // RVA: 0x366 Offset: 0x366 VA: 0x366
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 444
{
	// Fields
	private string m_company; // 0x8

	// Methods

	// RVA: 0x23A Offset: 0x23A VA: 0x23A
	public void .ctor(string company) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x367 Offset: 0x367 VA: 0x367
[AttributeUsageAttribute] // RVA: 0x367 Offset: 0x367 VA: 0x367
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 445
{
	// Fields
	private string m_description; // 0x8

	// Methods

	// RVA: 0x23F Offset: 0x23F VA: 0x23F
	public void .ctor(string description) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x368 Offset: 0x368 VA: 0x368
[AttributeUsageAttribute] // RVA: 0x368 Offset: 0x368 VA: 0x368
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 446
{
	// Fields
	private string m_title; // 0x8

	// Methods

	// RVA: 0x24B Offset: 0x24B VA: 0x24B
	public void .ctor(string title) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x369 Offset: 0x369 VA: 0x369
[ComVisibleAttribute] // RVA: 0x369 Offset: 0x369 VA: 0x369
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 447
{
	// Fields
	private string m_configuration; // 0x8

	// Methods

	// RVA: 0x23B Offset: 0x23B VA: 0x23B
	public void .ctor(string configuration) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x36A Offset: 0x36A VA: 0x36A
[AttributeUsageAttribute] // RVA: 0x36A Offset: 0x36A VA: 0x36A
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 448
{
	// Fields
	private string m_defaultAlias; // 0x8

	// Methods

	// RVA: 0x23D Offset: 0x23D VA: 0x23D
	public void .ctor(string defaultAlias) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x36B Offset: 0x36B VA: 0x36B
[AttributeUsageAttribute] // RVA: 0x36B Offset: 0x36B VA: 0x36B
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 449
{
	// Fields
	private string m_informationalVersion; // 0x8

	// Methods

	// RVA: 0x241 Offset: 0x241 VA: 0x241
	public void .ctor(string informationalVersion) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x36C Offset: 0x36C VA: 0x36C
[AttributeUsageAttribute] // RVA: 0x36C Offset: 0x36C VA: 0x36C
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 450
{
	// Fields
	private string _version; // 0x8

	// Methods

	// RVA: 0x240 Offset: 0x240 VA: 0x240
	public void .ctor(string version) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x36D Offset: 0x36D VA: 0x36D
[AttributeUsageAttribute] // RVA: 0x36D Offset: 0x36D VA: 0x36D
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 451
{
	// Fields
	private string m_keyFile; // 0x8

	// Methods

	// RVA: 0x242 Offset: 0x242 VA: 0x242
	public void .ctor(string keyFile) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x36E Offset: 0x36E VA: 0x36E
[ComVisibleAttribute] // RVA: 0x36E Offset: 0x36E VA: 0x36E
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 452
{
	// Fields
	private bool m_delaySign; // 0x8

	// Methods

	// RVA: 0x23E Offset: 0x23E VA: 0x23E
	public void .ctor(bool delaySign) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x36F Offset: 0x36F VA: 0x36F
[FlagsAttribute] // RVA: 0x36F Offset: 0x36F VA: 0x36F
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 453
{
	// Fields
	public int value__; // 0x0
	public const AssemblyNameFlags None = 0;
	public const AssemblyNameFlags PublicKey = 1;
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384;
	public const AssemblyNameFlags EnableJITcompileTracking = 32768;
	public const AssemblyNameFlags Retargetable = 256;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x370 Offset: 0x370 VA: 0x370
[Serializable]
public enum AssemblyContentType // TypeDefIndex: 454
{
	// Fields
	public int value__; // 0x0
	public const AssemblyContentType Default = 0;
	public const AssemblyContentType WindowsRuntime = 1;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x371 Offset: 0x371 VA: 0x371
[Serializable]
public enum ProcessorArchitecture // TypeDefIndex: 455
{
	// Fields
	public int value__; // 0x0
	public const ProcessorArchitecture None = 0;
	public const ProcessorArchitecture MSIL = 1;
	public const ProcessorArchitecture X86 = 2;
	public const ProcessorArchitecture IA64 = 3;
	public const ProcessorArchitecture Amd64 = 4;
	public const ProcessorArchitecture Arm = 5;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x372 Offset: 0x372 VA: 0x372
[ComVisibleAttribute] // RVA: 0x372 Offset: 0x372 VA: 0x372
[Serializable]
public abstract class Binder // TypeDefIndex: 456
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract object ChangeType(object value, Type type, CultureInfo culture) { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void ReorderArgumentArray(ref object[] args, object state) { }

	// RVA: 0x3D7 Offset: 0x3D7 VA: 0x3D7
	protected void .ctor() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x373 Offset: 0x373 VA: 0x373
[FlagsAttribute] // RVA: 0x373 Offset: 0x373 VA: 0x373
[Serializable]
public enum BindingFlags // TypeDefIndex: 457
{
	// Fields
	public int value__; // 0x0
	public const BindingFlags Default = 0;
	public const BindingFlags IgnoreCase = 1;
	public const BindingFlags DeclaredOnly = 2;
	public const BindingFlags Instance = 4;
	public const BindingFlags Static = 8;
	public const BindingFlags Public = 16;
	public const BindingFlags NonPublic = 32;
	public const BindingFlags FlattenHierarchy = 64;
	public const BindingFlags InvokeMethod = 256;
	public const BindingFlags CreateInstance = 512;
	public const BindingFlags GetField = 1024;
	public const BindingFlags SetField = 2048;
	public const BindingFlags GetProperty = 4096;
	public const BindingFlags SetProperty = 8192;
	public const BindingFlags PutDispProperty = 16384;
	public const BindingFlags PutRefDispProperty = 32768;
	public const BindingFlags ExactBinding = 65536;
	public const BindingFlags SuppressChangeType = 131072;
	public const BindingFlags OptionalParamBinding = 262144;
	public const BindingFlags IgnoreReturn = 16777216;
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x374 Offset: 0x374 VA: 0x374
[ComVisibleAttribute] // RVA: 0x374 Offset: 0x374 VA: 0x374
[Serializable]
public enum CallingConventions // TypeDefIndex: 458
{
	// Fields
	public int value__; // 0x0
	public const CallingConventions Standard = 1;
	public const CallingConventions VarArgs = 2;
	public const CallingConventions Any = 3;
	public const CallingConventions HasThis = 32;
	public const CallingConventions ExplicitThis = 64;
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0x375 Offset: 0x375 VA: 0x375
[ComVisibleAttribute] // RVA: 0x375 Offset: 0x375 VA: 0x375
[Serializable]
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 459
{
	// Fields
	private string m_memberName; // 0x8

	// Properties
	public string MemberName { get; }

	// Methods

	// RVA: 0x24F Offset: 0x24F VA: 0x24F
	public void .ctor(string memberName) { }

	// RVA: 0x4DE Offset: 0x4DE VA: 0x4DE
	public string get_MemberName() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x376 Offset: 0x376 VA: 0x376
[FlagsAttribute] // RVA: 0x376 Offset: 0x376 VA: 0x376
[Serializable]
public enum EventAttributes // TypeDefIndex: 460
{
	// Fields
	public int value__; // 0x0
	public const EventAttributes None = 0;
	public const EventAttributes SpecialName = 512;
	public const EventAttributes ReservedMask = 1024;
	public const EventAttributes RTSpecialName = 1024;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x377 Offset: 0x377 VA: 0x377
[FlagsAttribute] // RVA: 0x377 Offset: 0x377 VA: 0x377
[Serializable]
public enum FieldAttributes // TypeDefIndex: 461
{
	// Fields
	public int value__; // 0x0
	public const FieldAttributes FieldAccessMask = 7;
	public const FieldAttributes PrivateScope = 0;
	public const FieldAttributes Private = 1;
	public const FieldAttributes FamANDAssem = 2;
	public const FieldAttributes Assembly = 3;
	public const FieldAttributes Family = 4;
	public const FieldAttributes FamORAssem = 5;
	public const FieldAttributes Public = 6;
	public const FieldAttributes Static = 16;
	public const FieldAttributes InitOnly = 32;
	public const FieldAttributes Literal = 64;
	public const FieldAttributes NotSerialized = 128;
	public const FieldAttributes SpecialName = 512;
	public const FieldAttributes PinvokeImpl = 8192;
	public const FieldAttributes ReservedMask = 38144;
	public const FieldAttributes RTSpecialName = 1024;
	public const FieldAttributes HasFieldMarshal = 4096;
	public const FieldAttributes HasDefault = 32768;
	public const FieldAttributes HasFieldRVA = 256;
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x378 Offset: 0x378 VA: 0x378
public enum GenericParameterAttributes // TypeDefIndex: 462
{
	// Fields
	public int value__; // 0x0
	public const GenericParameterAttributes None = 0;
	public const GenericParameterAttributes VarianceMask = 3;
	public const GenericParameterAttributes Covariant = 1;
	public const GenericParameterAttributes Contravariant = 2;
	public const GenericParameterAttributes SpecialConstraintMask = 28;
	public const GenericParameterAttributes ReferenceTypeConstraint = 4;
	public const GenericParameterAttributes NotNullableValueTypeConstraint = 8;
	public const GenericParameterAttributes DefaultConstructorConstraint = 16;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x379 Offset: 0x379 VA: 0x379
public interface ICustomAttributeProvider // TypeDefIndex: 463
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x37A Offset: 0x37A VA: 0x37A
[Serializable]
public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 464
{
	// Methods

	// RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0
	public void .ctor() { }

	// RVA: 0x251 Offset: 0x251 VA: 0x251
	public void .ctor(string message) { }

	// RVA: 0x1AC Offset: 0x1AC VA: 0x1AC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x37B Offset: 0x37B VA: 0x37B
[GuidAttribute] // RVA: 0x37B Offset: 0x37B VA: 0x37B
public interface IReflect // TypeDefIndex: 465
{}

// Namespace: System.Reflection
public interface IReflectableType // TypeDefIndex: 466
{}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x37C Offset: 0x37C VA: 0x37C
public class ManifestResourceInfo // TypeDefIndex: 467
{
	// Fields
	private Assembly _containingAssembly; // 0x8
	private string _containingFileName; // 0xC
	private ResourceLocation _resourceLocation; // 0x10

	// Properties
	public virtual Assembly ReferencedAssembly { get; }
	public virtual string FileName { get; }
	public virtual ResourceLocation ResourceLocation { get; }

	// Methods

	// RVA: 0x93 Offset: 0x93 VA: 0x93
	public void .ctor(Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation) { }

	// RVA: 0x545 Offset: 0x545 VA: 0x545 Slot: 4
	public virtual Assembly get_ReferencedAssembly() { }

	// RVA: 0x546 Offset: 0x546 VA: 0x546 Slot: 5
	public virtual string get_FileName() { }

	// RVA: 0x547 Offset: 0x547 VA: 0x547 Slot: 6
	public virtual ResourceLocation get_ResourceLocation() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x37D Offset: 0x37D VA: 0x37D
[FlagsAttribute] // RVA: 0x37D Offset: 0x37D VA: 0x37D
[Serializable]
public enum ResourceLocation // TypeDefIndex: 468
{
	// Fields
	public int value__; // 0x0
	public const ResourceLocation Embedded = 1;
	public const ResourceLocation ContainedInAnotherAssembly = 2;
	public const ResourceLocation ContainedInManifestFile = 4;
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x37E Offset: 0x37E VA: 0x37E
[Serializable]
internal enum PInvokeAttributes // TypeDefIndex: 469
{
	// Fields
	public int value__; // 0x0
	public const PInvokeAttributes NoMangle = 1;
	public const PInvokeAttributes CharSetMask = 6;
	public const PInvokeAttributes CharSetNotSpec = 0;
	public const PInvokeAttributes CharSetAnsi = 2;
	public const PInvokeAttributes CharSetUnicode = 4;
	public const PInvokeAttributes CharSetAuto = 6;
	public const PInvokeAttributes BestFitUseAssem = 0;
	public const PInvokeAttributes BestFitEnabled = 16;
	public const PInvokeAttributes BestFitDisabled = 32;
	public const PInvokeAttributes BestFitMask = 48;
	public const PInvokeAttributes ThrowOnUnmappableCharUseAssem = 0;
	public const PInvokeAttributes ThrowOnUnmappableCharEnabled = 4096;
	public const PInvokeAttributes ThrowOnUnmappableCharDisabled = 8192;
	public const PInvokeAttributes ThrowOnUnmappableCharMask = 12288;
	public const PInvokeAttributes SupportsLastError = 64;
	public const PInvokeAttributes CallConvMask = 1792;
	public const PInvokeAttributes CallConvWinapi = 256;
	public const PInvokeAttributes CallConvCdecl = 512;
	public const PInvokeAttributes CallConvStdcall = 768;
	public const PInvokeAttributes CallConvThiscall = 1024;
	public const PInvokeAttributes CallConvFastcall = 1280;
	public const PInvokeAttributes MaxValue = 65535;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x37F Offset: 0x37F VA: 0x37F
[Serializable]
public sealed class MemberFilter : MulticastDelegate // TypeDefIndex: 470
{
	// Methods

	// RVA: 0x1AD Offset: 0x1AD VA: 0x1AD
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8 Slot: 12
	public virtual bool Invoke(MemberInfo m, object filterCriteria) { }

	// RVA: 0x3F Offset: 0x3F VA: 0x3F Slot: 13
	public virtual IAsyncResult BeginInvoke(MemberInfo m, object filterCriteria, AsyncCallback callback, object object) { }

	// RVA: 0x302 Offset: 0x302 VA: 0x302 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x380 Offset: 0x380 VA: 0x380
[ComDefaultInterfaceAttribute] // RVA: 0x380 Offset: 0x380 VA: 0x380
[ClassInterfaceAttribute] // RVA: 0x380 Offset: 0x380 VA: 0x380
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 471
{
	// Properties
	public abstract MemberTypes MemberType { get; }
	public abstract string Name { get; }
	public abstract Type DeclaringType { get; }
	public abstract Type ReflectedType { get; }
	public virtual int MetadataToken { get; }
	public virtual Module Module { get; }

	// Methods

	// RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract MemberTypes get_MemberType() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Name() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract Type get_DeclaringType() { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract Type get_ReflectedType() { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract object[] GetCustomAttributes(bool inherit) { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x548 Offset: 0x548 VA: 0x548 Slot: 13
	public virtual IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x549 Offset: 0x549 VA: 0x549 Slot: 14
	public virtual int get_MetadataToken() { }

	// RVA: 0x54A Offset: 0x54A VA: 0x54A Slot: 15
	public virtual Module get_Module() { }

	// RVA: 0x303 Offset: 0x303 VA: 0x303
	public static bool op_Equality(MemberInfo left, MemberInfo right) { }

	// RVA: 0x304 Offset: 0x304 VA: 0x304
	public static bool op_Inequality(MemberInfo left, MemberInfo right) { }

	// RVA: 0x305 Offset: 0x305 VA: 0x305 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x54B Offset: 0x54B VA: 0x54B Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 472
{
	// Fields
	private string m_memberName; // 0x8
	private RuntimeType m_reflectedType; // 0xC
	private string m_signature; // 0x10
	private string m_signature2; // 0x14
	private MemberTypes m_memberType; // 0x18
	private SerializationInfo m_info; // 0x1C

	// Methods

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, MemberTypes type) { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, string signature2, MemberTypes type, Type[] genericArguments) { }

	// RVA: 0x1AE Offset: 0x1AE VA: 0x1AE
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1AF Offset: 0x1AF VA: 0x1AF Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x306 Offset: 0x306 VA: 0x306 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x381 Offset: 0x381 VA: 0x381
[ComVisibleAttribute] // RVA: 0x381 Offset: 0x381 VA: 0x381
[Serializable]
public enum MemberTypes // TypeDefIndex: 473
{
	// Fields
	public int value__; // 0x0
	public const MemberTypes Constructor = 1;
	public const MemberTypes Event = 2;
	public const MemberTypes Field = 4;
	public const MemberTypes Method = 8;
	public const MemberTypes Property = 16;
	public const MemberTypes TypeInfo = 32;
	public const MemberTypes Custom = 64;
	public const MemberTypes NestedType = 128;
	public const MemberTypes All = 191;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x382 Offset: 0x382 VA: 0x382
[FlagsAttribute] // RVA: 0x382 Offset: 0x382 VA: 0x382
[Serializable]
public enum MethodAttributes // TypeDefIndex: 474
{
	// Fields
	public int value__; // 0x0
	public const MethodAttributes MemberAccessMask = 7;
	public const MethodAttributes PrivateScope = 0;
	public const MethodAttributes Private = 1;
	public const MethodAttributes FamANDAssem = 2;
	public const MethodAttributes Assembly = 3;
	public const MethodAttributes Family = 4;
	public const MethodAttributes FamORAssem = 5;
	public const MethodAttributes Public = 6;
	public const MethodAttributes Static = 16;
	public const MethodAttributes Final = 32;
	public const MethodAttributes Virtual = 64;
	public const MethodAttributes HideBySig = 128;
	public const MethodAttributes CheckAccessOnOverride = 512;
	public const MethodAttributes VtableLayoutMask = 256;
	public const MethodAttributes ReuseSlot = 0;
	public const MethodAttributes NewSlot = 256;
	public const MethodAttributes Abstract = 1024;
	public const MethodAttributes SpecialName = 2048;
	public const MethodAttributes PinvokeImpl = 8192;
	public const MethodAttributes UnmanagedExport = 8;
	public const MethodAttributes RTSpecialName = 4096;
	public const MethodAttributes ReservedMask = 53248;
	public const MethodAttributes HasSecurity = 16384;
	public const MethodAttributes RequireSecObject = 32768;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x383 Offset: 0x383 VA: 0x383
[ComVisibleAttribute] // RVA: 0x383 Offset: 0x383 VA: 0x383
[ClassInterfaceAttribute] // RVA: 0x383 Offset: 0x383 VA: 0x383
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 475
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; }
	public virtual bool IsGenericMethodDefinition { get; }
	public virtual bool ContainsGenericParameters { get; }
	public virtual bool IsGenericMethod { get; }
	public virtual bool IsSecurityCritical { get; }
	public bool IsPublic { get; }
	public bool IsStatic { get; }
	public bool IsVirtual { get; }
	public bool IsAbstract { get; }
	[ComVisibleAttribute] // RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1
	public bool IsConstructor { get; }

	// Methods

	// RVA: 0x54C Offset: 0x54C VA: 0x54C
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { }

	// RVA: 0x3E2 Offset: 0x3E2 VA: 0x3E2
	protected void .ctor() { }

	// RVA: 0x307 Offset: 0x307 VA: 0x307
	public static bool op_Equality(MethodBase left, MethodBase right) { }

	// RVA: 0x308 Offset: 0x308 VA: 0x308
	public static bool op_Inequality(MethodBase left, MethodBase right) { }

	// RVA: 0x309 Offset: 0x309 VA: 0x309 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x54D Offset: 0x54D VA: 0x54D Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x54E Offset: 0x54E VA: 0x54E Slot: 16
	internal virtual ParameterInfo[] GetParametersNoCopy() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract ParameterInfo[] GetParameters() { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract MethodImplAttributes GetMethodImplementationFlags() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract RuntimeMethodHandle get_MethodHandle() { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract MethodAttributes get_Attributes() { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x54F Offset: 0x54F VA: 0x54F Slot: 22
	public virtual CallingConventions get_CallingConvention() { }

	[ComVisibleAttribute] // RVA: 0x6E4 Offset: 0x6E4 VA: 0x6E4
	// RVA: 0x550 Offset: 0x550 VA: 0x550 Slot: 23
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x551 Offset: 0x551 VA: 0x551 Slot: 24
	public virtual bool get_IsGenericMethodDefinition() { }

	// RVA: 0x552 Offset: 0x552 VA: 0x552 Slot: 25
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x553 Offset: 0x553 VA: 0x553 Slot: 26
	public virtual bool get_IsGenericMethod() { }

	// RVA: 0x554 Offset: 0x554 VA: 0x554 Slot: 27
	public virtual bool get_IsSecurityCritical() { }

	[DebuggerHiddenAttribute] // RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5
	[DebuggerStepThroughAttribute] // RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5
	// RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9 Slot: 28
	public object Invoke(object obj, object[] parameters) { }

	// RVA: 0x555 Offset: 0x555 VA: 0x555 Slot: 29
	public bool get_IsPublic() { }

	// RVA: 0x556 Offset: 0x556 VA: 0x556 Slot: 30
	public bool get_IsStatic() { }

	// RVA: 0x557 Offset: 0x557 VA: 0x557 Slot: 31
	public bool get_IsVirtual() { }

	// RVA: 0x558 Offset: 0x558 VA: 0x558 Slot: 32
	public bool get_IsAbstract() { }

	// RVA: 0x559 Offset: 0x559 VA: 0x559 Slot: 33
	public bool get_IsConstructor() { }

	// RVA: 0x55A Offset: 0x55A VA: 0x55A Slot: 34
	public virtual MethodBody GetMethodBody() { }

	// RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
	internal static string ConstructParameters(Type[] parameterTypes, CallingConventions callingConvention, bool serialization) { }

	// RVA: 0x30A Offset: 0x30A VA: 0x30A Slot: 35
	internal virtual string FormatNameAndSig(bool serialization) { }

	// RVA: 0x55B Offset: 0x55B VA: 0x55B Slot: 36
	internal virtual Type[] GetParameterTypes() { }

	// RVA: 0x55C Offset: 0x55C VA: 0x55C Slot: 37
	internal virtual ParameterInfo[] GetParametersInternal() { }

	// RVA: 0x55D Offset: 0x55D VA: 0x55D Slot: 38
	internal virtual int GetParametersCount() { }

	// RVA: 0x55E Offset: 0x55E VA: 0x55E
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle) { }

	// RVA: 0x30B Offset: 0x30B VA: 0x30B
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle, RuntimeTypeHandle reflectedType) { }

	// RVA: 0x55F Offset: 0x55F VA: 0x55F
	internal static MethodBody GetMethodBodyInternal(IntPtr handle) { }

	// RVA: 0x560 Offset: 0x560 VA: 0x560
	internal static MethodBody GetMethodBody(IntPtr handle) { }

	// RVA: 0x30C Offset: 0x30C VA: 0x30C
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle) { }

	// RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
	internal static MethodBase GetMethodFromHandleInternalType_native(IntPtr method_handle, IntPtr type_handle, bool genericCheck) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x384 Offset: 0x384 VA: 0x384
[ComVisibleAttribute] // RVA: 0x384 Offset: 0x384 VA: 0x384
public enum ExceptionHandlingClauseOptions // TypeDefIndex: 476
{
	// Fields
	public int value__; // 0x0
	public const ExceptionHandlingClauseOptions Clause = 0;
	public const ExceptionHandlingClauseOptions Filter = 1;
	public const ExceptionHandlingClauseOptions Finally = 2;
	public const ExceptionHandlingClauseOptions Fault = 4;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x385 Offset: 0x385 VA: 0x385
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 477
{
	// Fields
	public int value__; // 0x0
	public const MethodImplAttributes CodeTypeMask = 3;
	public const MethodImplAttributes IL = 0;
	public const MethodImplAttributes Native = 1;
	public const MethodImplAttributes OPTIL = 2;
	public const MethodImplAttributes Runtime = 3;
	public const MethodImplAttributes ManagedMask = 4;
	public const MethodImplAttributes Unmanaged = 4;
	public const MethodImplAttributes Managed = 0;
	public const MethodImplAttributes ForwardRef = 16;
	public const MethodImplAttributes PreserveSig = 128;
	public const MethodImplAttributes InternalCall = 4096;
	public const MethodImplAttributes Synchronized = 32;
	public const MethodImplAttributes NoInlining = 8;
	[ComVisibleAttribute] // RVA: 0x562 Offset: 0x562 VA: 0x562
	public const MethodImplAttributes AggressiveInlining = 256;
	public const MethodImplAttributes NoOptimization = 64;
	public const MethodImplAttributes MaxMethodImplVal = 65535;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x386 Offset: 0x386 VA: 0x386
[ComVisibleAttribute] // RVA: 0x386 Offset: 0x386 VA: 0x386
[ClassInterfaceAttribute] // RVA: 0x386 Offset: 0x386 VA: 0x386
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 478
{
	// Properties
	public override MemberTypes MemberType { get; }
	public virtual Type ReturnType { get; }

	// Methods

	// RVA: 0x3E4 Offset: 0x3E4 VA: 0x3E4
	protected void .ctor() { }

	// RVA: 0x30D Offset: 0x30D VA: 0x30D
	public static bool op_Equality(MethodInfo left, MethodInfo right) { }

	// RVA: 0x30E Offset: 0x30E VA: 0x30E
	public static bool op_Inequality(MethodInfo left, MethodInfo right) { }

	// RVA: 0x30F Offset: 0x30F VA: 0x30F Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x562 Offset: 0x562 VA: 0x562 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x563 Offset: 0x563 VA: 0x563 Slot: 6
	public override MemberTypes get_MemberType() { }

	// RVA: 0x564 Offset: 0x564 VA: 0x564 Slot: 39
	public virtual Type get_ReturnType() { }

	[ComVisibleAttribute] // RVA: 0x6E6 Offset: 0x6E6 VA: 0x6E6
	// RVA: 0x565 Offset: 0x565 VA: 0x565 Slot: 23
	public override Type[] GetGenericArguments() { }

	[ComVisibleAttribute] // RVA: 0x6E7 Offset: 0x6E7 VA: 0x6E7
	// RVA: 0x566 Offset: 0x566 VA: 0x566 Slot: 40
	public virtual MethodInfo GetGenericMethodDefinition() { }

	// RVA: 0x310 Offset: 0x310 VA: 0x310 Slot: 41
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	// RVA: 0x567 Offset: 0x567 VA: 0x567 Slot: 42
	internal virtual MethodInfo GetBaseMethod() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x387 Offset: 0x387 VA: 0x387
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 479
{
	// Fields
	public static readonly Missing Value; // 0xFFFFFFFF

	// Methods

	// RVA: 0x3E5 Offset: 0x3E5 VA: 0x3E5
	private void .ctor() { }

	// RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEB3 Offset: 0xEB3 VA: 0xEB3
	private static void .cctor() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x388 Offset: 0x388 VA: 0x388
[FlagsAttribute] // RVA: 0x388 Offset: 0x388 VA: 0x388
[Serializable]
public enum ParameterAttributes // TypeDefIndex: 480
{
	// Fields
	public int value__; // 0x0
	public const ParameterAttributes None = 0;
	public const ParameterAttributes In = 1;
	public const ParameterAttributes Out = 2;
	public const ParameterAttributes Lcid = 4;
	public const ParameterAttributes Retval = 8;
	public const ParameterAttributes Optional = 16;
	public const ParameterAttributes ReservedMask = 61440;
	public const ParameterAttributes HasDefault = 4096;
	public const ParameterAttributes HasFieldMarshal = 8192;
	public const ParameterAttributes Reserved3 = 16384;
	public const ParameterAttributes Reserved4 = 32768;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x389 Offset: 0x389 VA: 0x389
[DefaultMemberAttribute] // RVA: 0x389 Offset: 0x389 VA: 0x389
[Serializable]
public struct ParameterModifier // TypeDefIndex: 481
{
	// Fields
	private bool[] _byRef; // 0x0
}

// Namespace: System.Reflection
[CLSCompliantAttribute] // RVA: 0x38A Offset: 0x38A VA: 0x38A
[ComVisibleAttribute] // RVA: 0x38A Offset: 0x38A VA: 0x38A
[Serializable]
public sealed class Pointer : ISerializable // TypeDefIndex: 482
{
	// Fields
	private void* _ptr; // 0x8
	private RuntimeType _ptrType; // 0xC

	// Methods

	// RVA: 0x3F0 Offset: 0x3F0 VA: 0x3F0
	private void .ctor() { }

	// RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x32F Offset: 0x32F VA: 0x32F
	public static object Box(void* ptr, Type type) { }

	// RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x38B Offset: 0x38B VA: 0x38B
[ComVisibleAttribute] // RVA: 0x38B Offset: 0x38B VA: 0x38B
[Serializable]
public enum PropertyAttributes // TypeDefIndex: 483
{
	// Fields
	public int value__; // 0x0
	public const PropertyAttributes None = 0;
	public const PropertyAttributes SpecialName = 512;
	public const PropertyAttributes ReservedMask = 62464;
	public const PropertyAttributes RTSpecialName = 1024;
	public const PropertyAttributes HasDefault = 4096;
	public const PropertyAttributes Reserved2 = 8192;
	public const PropertyAttributes Reserved3 = 16384;
	public const PropertyAttributes Reserved4 = 32768;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x38C Offset: 0x38C VA: 0x38C
[Serializable]
public sealed class ReflectionTypeLoadException : SystemException, ISerializable // TypeDefIndex: 484
{
	// Fields
	private Type[] _classes; // 0x44
	private Exception[] _exceptions; // 0x48

	// Methods

	// RVA: 0x3F2 Offset: 0x3F2 VA: 0x3F2
	private void .ctor() { }

	// RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9
	public void .ctor(Type[] classes, Exception[] exceptions) { }

	// RVA: 0x1BA Offset: 0x1BA VA: 0x1BA
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1BB Offset: 0x1BB VA: 0x1BB Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x38D Offset: 0x38D VA: 0x38D
[Serializable]
public class TargetException : ApplicationException // TypeDefIndex: 485
{
	// Methods

	// RVA: 0x3FC Offset: 0x3FC VA: 0x3FC
	public void .ctor() { }

	// RVA: 0x25C Offset: 0x25C VA: 0x25C
	public void .ctor(string message) { }

	// RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x38E Offset: 0x38E VA: 0x38E
[Serializable]
public sealed class TargetInvocationException : ApplicationException // TypeDefIndex: 486
{
	// Methods

	// RVA: 0x3FD Offset: 0x3FD VA: 0x3FD
	private void .ctor() { }

	// RVA: 0x25D Offset: 0x25D VA: 0x25D
	public void .ctor(Exception inner) { }

	// RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x38F Offset: 0x38F VA: 0x38F
[Serializable]
public sealed class TargetParameterCountException : ApplicationException // TypeDefIndex: 487
{
	// Methods

	// RVA: 0x3FE Offset: 0x3FE VA: 0x3FE
	public void .ctor() { }

	// RVA: 0x25E Offset: 0x25E VA: 0x25E
	public void .ctor(string message) { }

	// RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x390 Offset: 0x390 VA: 0x390
[ComVisibleAttribute] // RVA: 0x390 Offset: 0x390 VA: 0x390
[Serializable]
public enum TypeAttributes // TypeDefIndex: 488
{
	// Fields
	public int value__; // 0x0
	public const TypeAttributes VisibilityMask = 7;
	public const TypeAttributes NotPublic = 0;
	public const TypeAttributes Public = 1;
	public const TypeAttributes NestedPublic = 2;
	public const TypeAttributes NestedPrivate = 3;
	public const TypeAttributes NestedFamily = 4;
	public const TypeAttributes NestedAssembly = 5;
	public const TypeAttributes NestedFamANDAssem = 6;
	public const TypeAttributes NestedFamORAssem = 7;
	public const TypeAttributes LayoutMask = 24;
	public const TypeAttributes AutoLayout = 0;
	public const TypeAttributes SequentialLayout = 8;
	public const TypeAttributes ExplicitLayout = 16;
	public const TypeAttributes ClassSemanticsMask = 32;
	public const TypeAttributes Class = 0;
	public const TypeAttributes Interface = 32;
	public const TypeAttributes Abstract = 128;
	public const TypeAttributes Sealed = 256;
	public const TypeAttributes SpecialName = 1024;
	public const TypeAttributes Import = 4096;
	public const TypeAttributes Serializable = 8192;
	[ComVisibleAttribute] // RVA: 0x563 Offset: 0x563 VA: 0x563
	public const TypeAttributes WindowsRuntime = 16384;
	public const TypeAttributes StringFormatMask = 196608;
	public const TypeAttributes AnsiClass = 0;
	public const TypeAttributes UnicodeClass = 65536;
	public const TypeAttributes AutoClass = 131072;
	public const TypeAttributes CustomFormatClass = 196608;
	public const TypeAttributes CustomFormatMask = 12582912;
	public const TypeAttributes BeforeFieldInit = 1048576;
	public const TypeAttributes ReservedMask = 264192;
	public const TypeAttributes RTSpecialName = 2048;
	public const TypeAttributes HasSecurity = 262144;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x391 Offset: 0x391 VA: 0x391
[Serializable]
public sealed class TypeFilter : MulticastDelegate // TypeDefIndex: 489
{
	// Methods

	// RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3 Slot: 12
	public virtual bool Invoke(Type m, object filterCriteria) { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41 Slot: 13
	public virtual IAsyncResult BeginInvoke(Type m, object filterCriteria, AsyncCallback callback, object object) { }

	// RVA: 0x339 Offset: 0x339 VA: 0x339 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x392 Offset: 0x392 VA: 0x392
[Serializable]
public abstract class TypeInfo : Type, IReflectableType // TypeDefIndex: 490
{
	// Methods

	[FriendAccessAllowedAttribute] // RVA: 0x6E8 Offset: 0x6E8 VA: 0x6E8
	// RVA: 0x3FF Offset: 0x3FF VA: 0x3FF
	internal void .ctor() { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x393 Offset: 0x393 VA: 0x393
[ComVisibleAttribute] // RVA: 0x393 Offset: 0x393 VA: 0x393
[ClassInterfaceAttribute] // RVA: 0x393 Offset: 0x393 VA: 0x393
[Serializable]
public class Assembly : ICustomAttributeProvider, ISerializable, _Assembly, IEvidenceFactory // TypeDefIndex: 491
{
	// Fields
	internal IntPtr _mono_assembly; // 0x8
	private Assembly.ResolveEventHolder resolve_event_holder; // 0xC
	private object _evidence; // 0x10
	private object _minimum; // 0x14
	private object _optional; // 0x18
	private object _refuse; // 0x1C
	private object _granted; // 0x20
	private object _denied; // 0x24
	private bool fromByteArray; // 0x28
	private string assemblyName; // 0x2C

	// Properties
	public virtual string CodeBase { get; }
	public virtual string FullName { get; }
	public virtual string Location { get; }
	[ComVisibleAttribute] // RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2
	public virtual bool ReflectionOnly { get; }
	[MonoTODOAttribute] // RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3
	public bool IsFullyTrusted { get; }

	// Methods

	// RVA: 0x3D4 Offset: 0x3D4 VA: 0x3D4
	protected void .ctor() { }

	// RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7
	private string get_code_base(bool escaped) { }

	// RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
	private string get_fullname() { }

	// RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
	private string get_location() { }

	// RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6
	internal static string GetAotId() { }

	// RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8
	private string GetCodeBase(bool escaped) { }

	// RVA: 0x4AC Offset: 0x4AC VA: 0x4AC Slot: 7
	public virtual string get_CodeBase() { }

	// RVA: 0x4AD Offset: 0x4AD VA: 0x4AD Slot: 8
	public virtual string get_FullName() { }

	// RVA: 0x4AE Offset: 0x4AE VA: 0x4AE Slot: 9
	public virtual string get_Location() { }

	// RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1 Slot: 10
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x8BB Offset: 0x8BB VA: 0x8BB Slot: 11
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x8BC Offset: 0x8BC VA: 0x8BC Slot: 12
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x98 Offset: 0x98 VA: 0x98
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module) { }

	// RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9 Slot: 13
	public virtual Stream GetManifestResourceStream(string name) { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B
	internal Stream GetManifestResourceStream(Type type, string name, bool skipSecurityCheck, ref StackCrawlMark stackMark) { }

	// RVA: 0x99 Offset: 0x99 VA: 0x99
	internal Stream GetManifestResourceStream(string name, ref StackCrawlMark stackMark, bool skipSecurityCheck) { }

	// RVA: 0x4AF Offset: 0x4AF VA: 0x4AF
	internal string GetSimpleName() { }

	// RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0
	internal byte[] GetPublicKey() { }

	// RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1
	internal Version GetVersion() { }

	// RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2
	private AssemblyNameFlags GetFlags() { }

	// RVA: 0x2CA Offset: 0x2CA VA: 0x2CA Slot: 14
	internal virtual Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3 Slot: 15
	public virtual Type[] GetTypes() { }

	// RVA: 0x2CB Offset: 0x2CB VA: 0x2CB Slot: 16
	public virtual Type GetType(string name) { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x2CC Offset: 0x2CC VA: 0x2CC Slot: 17
	public virtual AssemblyName GetName(bool copiedName) { }

	// RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4 Slot: 18
	public virtual AssemblyName GetName() { }

	// RVA: 0x4B5 Offset: 0x4B5 VA: 0x4B5 Slot: 3
	public override string ToString() { }

	// RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
	public static Assembly GetAssembly(Type type) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	internal RuntimeAssembly InternalGetSatelliteAssembly(string name, CultureInfo culture, Version version, bool throwOnFileNotFound, ref StackCrawlMark stackMark) { }

	// RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
	private static Assembly LoadFrom(string assemblyFile, bool refonly) { }

	// RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7
	public static Assembly LoadFrom(string assemblyFile) { }

	// RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
	public static Assembly Load(string assemblyString) { }

	// RVA: 0x2CE Offset: 0x2CE VA: 0x2CE
	private static Assembly load_with_partial_name(string name, Evidence e) { }

	[ObsoleteAttribute] // RVA: 0x6E9 Offset: 0x6E9 VA: 0x6E9
	// RVA: 0x2CF Offset: 0x2CF VA: 0x2CF
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence) { }

	// RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior) { }

	// RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9 Slot: 19
	internal virtual Module[] GetModulesInternal() { }

	// RVA: 0x4BA Offset: 0x4BA VA: 0x4BA Slot: 20
	public virtual string[] GetManifestResourceNames() { }

	// RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7
	public static Assembly GetExecutingAssembly() { }

	// RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8
	public static Assembly GetCallingAssembly() { }

	// RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
	private bool GetManifestResourceInfoInternal(string name, ManifestResourceInfo info) { }

	// RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0 Slot: 21
	public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName) { }

	// RVA: 0x4BB Offset: 0x4BB VA: 0x4BB Slot: 22
	public virtual bool get_ReflectionOnly() { }

	// RVA: 0x4BC Offset: 0x4BC VA: 0x4BC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9
	private static Exception CreateNIE() { }

	// RVA: 0x4BD Offset: 0x4BD VA: 0x4BD
	public bool get_IsFullyTrusted() { }

	// RVA: 0x9A Offset: 0x9A VA: 0x9A Slot: 23
	public virtual Type GetType(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2 Slot: 24
	public virtual Module GetModule(string name) { }

	// RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3 Slot: 25
	public virtual Module[] GetModules(bool getResourceModules) { }

	// RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4
	public static bool op_Equality(Assembly left, Assembly right) { }

	// RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
	public static bool op_Inequality(Assembly left, Assembly right) { }
}

// Namespace: 
internal class Assembly.ResolveEventHolder // TypeDefIndex: 492
{
	// Methods

	// RVA: 0x3D5 Offset: 0x3D5 VA: 0x3D5
	public void .ctor() { }
}

// Namespace: 
internal class Assembly.UnmanagedMemoryStreamForModule : UnmanagedMemoryStream // TypeDefIndex: 493
{
	// Fields
	private Module module; // 0x48

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(byte* pointer, long length, Module module) { }

	// RVA: 0x239 Offset: 0x239 VA: 0x239 Slot: 14
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x394 Offset: 0x394 VA: 0x394
[ComVisibleAttribute] // RVA: 0x394 Offset: 0x394 VA: 0x394
[ClassInterfaceAttribute] // RVA: 0x394 Offset: 0x394 VA: 0x394
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, IDeserializationCallback, _AssemblyName // TypeDefIndex: 494
{
	// Fields
	private string name; // 0x8
	private string codebase; // 0xC
	private int major; // 0x10
	private int minor; // 0x14
	private int build; // 0x18
	private int revision; // 0x1C
	private CultureInfo cultureinfo; // 0x20
	private AssemblyNameFlags flags; // 0x24
	private AssemblyHashAlgorithm hashalg; // 0x28
	private StrongNameKeyPair keypair; // 0x2C
	private byte[] publicKey; // 0x30
	private byte[] keyToken; // 0x34
	private AssemblyVersionCompatibility versioncompat; // 0x38
	private Version version; // 0x3C
	private ProcessorArchitecture processor_architecture; // 0x40
	private AssemblyContentType contentType; // 0x44

	// Properties
	public string Name { get; set; }
	public CultureInfo CultureInfo { get; set; }
	public AssemblyNameFlags Flags { get; set; }
	public string FullName { get; }
	public Version Version { get; set; }
	private bool IsPublicKeyValid { get; }

	// Methods

	// RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6
	public void .ctor() { }

	// RVA: 0x9B Offset: 0x9B VA: 0x9B
	private static bool ParseAssemblyName(IntPtr name, out MonoAssemblyName aname, out bool is_version_definited, out bool is_token_defined) { }

	// RVA: 0x243 Offset: 0x243 VA: 0x243
	public void .ctor(string assemblyName) { }

	// RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2
	internal void .ctor(SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x4BE Offset: 0x4BE VA: 0x4BE
	public string get_Name() { }

	// RVA: 0x244 Offset: 0x244 VA: 0x244
	public void set_Name(string value) { }

	// RVA: 0x4BF Offset: 0x4BF VA: 0x4BF
	public CultureInfo get_CultureInfo() { }

	// RVA: 0x245 Offset: 0x245 VA: 0x245
	public void set_CultureInfo(CultureInfo value) { }

	// RVA: 0x4C0 Offset: 0x4C0 VA: 0x4C0
	public AssemblyNameFlags get_Flags() { }

	// RVA: 0x246 Offset: 0x246 VA: 0x246
	public void set_Flags(AssemblyNameFlags value) { }

	// RVA: 0x4C1 Offset: 0x4C1 VA: 0x4C1
	public string get_FullName() { }

	// RVA: 0x4C2 Offset: 0x4C2 VA: 0x4C2
	public Version get_Version() { }

	// RVA: 0x247 Offset: 0x247 VA: 0x247
	public void set_Version(Version value) { }

	// RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3 Slot: 3
	public override string ToString() { }

	// RVA: 0x4C4 Offset: 0x4C4 VA: 0x4C4
	public byte[] GetPublicKey() { }

	// RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
	public byte[] GetPublicKeyToken() { }

	// RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
	private bool get_IsPublicKeyValid() { }

	// RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
	private byte[] InternalGetPublicKeyToken() { }

	// RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3
	private static void get_public_token(byte* token, byte* pubkey, int len) { }

	// RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
	private byte[] ComputePublicKeyToken() { }

	// RVA: 0x248 Offset: 0x248 VA: 0x248
	public void SetPublicKey(byte[] publicKey) { }

	// RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9 Slot: 4
	public object Clone() { }

	// RVA: 0x249 Offset: 0x249 VA: 0x249 Slot: 6
	public void OnDeserialization(object sender) { }

	// RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
	private static MonoAssemblyName* GetNativeName(IntPtr assembly_ptr) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	internal void FillName(MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef) { }

	// RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
	internal static AssemblyName Create(Assembly assembly, bool fillCodebase) { }
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x395 Offset: 0x395 VA: 0x395
[ComDefaultInterfaceAttribute] // RVA: 0x395 Offset: 0x395 VA: 0x395
[ComVisibleAttribute] // RVA: 0x395 Offset: 0x395 VA: 0x395
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 495
{
	// Fields
	[ComVisibleAttribute] // RVA: 0x564 Offset: 0x564 VA: 0x564
	public static readonly string ConstructorName; // 0x0
	[ComVisibleAttribute] // RVA: 0x565 Offset: 0x565 VA: 0x565
	public static readonly string TypeConstructorName; // 0x4

	// Properties
	[ComVisibleAttribute] // RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x3D8 Offset: 0x3D8 VA: 0x3D8
	protected void .ctor() { }

	// RVA: 0x4CB Offset: 0x4CB VA: 0x4CB Slot: 6
	public override MemberTypes get_MemberType() { }

	[DebuggerHiddenAttribute] // RVA: 0x6EA Offset: 0x6EA VA: 0x6EA
	[DebuggerStepThroughAttribute] // RVA: 0x6EA Offset: 0x6EA VA: 0x6EA
	// RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7
	public object Invoke(object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 39
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4CC Offset: 0x4CC VA: 0x4CC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
	public static bool op_Equality(ConstructorInfo left, ConstructorInfo right) { }

	// RVA: 0x2DA Offset: 0x2DA VA: 0x2DA
	public static bool op_Inequality(ConstructorInfo left, ConstructorInfo right) { }

	// RVA: 0xEB2 Offset: 0xEB2 VA: 0xEB2
	private static void .cctor() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x396 Offset: 0x396 VA: 0x396
[Serializable]
public class CustomAttributeData // TypeDefIndex: 496
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x8
	private IList<CustomAttributeTypedArgument> ctorArgs; // 0xC
	private IList<CustomAttributeNamedArgument> namedArgs; // 0x10
	private CustomAttributeData.LazyCAttrData lazyData; // 0x14

	// Properties
	[ComVisibleAttribute] // RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5
	public virtual ConstructorInfo Constructor { get; }
	[ComVisibleAttribute] // RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6
	public virtual IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
	public virtual IList<CustomAttributeNamedArgument> NamedArguments { get; }
	public Type AttributeType { get; }

	// Methods

	// RVA: 0x3D9 Offset: 0x3D9 VA: 0x3D9
	protected void .ctor() { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	internal void .ctor(ConstructorInfo ctorInfo, Assembly assembly, IntPtr data, uint data_length) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	private static void ResolveArgumentsInternal(ConstructorInfo ctor, Assembly assembly, IntPtr data, uint data_length, out object[] ctorArgs, out object[] namedArgs) { }

	// RVA: 0x3DA Offset: 0x3DA VA: 0x3DA
	private void ResolveArguments() { }

	// RVA: 0x4CD Offset: 0x4CD VA: 0x4CD Slot: 4
	public virtual ConstructorInfo get_Constructor() { }

	// RVA: 0x4CE Offset: 0x4CE VA: 0x4CE Slot: 5
	public virtual IList<CustomAttributeTypedArgument> get_ConstructorArguments() { }

	// RVA: 0x4CF Offset: 0x4CF VA: 0x4CF Slot: 6
	public virtual IList<CustomAttributeNamedArgument> get_NamedArguments() { }

	// RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
	public static IList<CustomAttributeData> GetCustomAttributes(Assembly target) { }

	// RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
	public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target) { }

	// RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
	internal static IList<CustomAttributeData> GetCustomAttributesInternal(RuntimeType target) { }

	// RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
	public static IList<CustomAttributeData> GetCustomAttributes(Module target) { }

	// RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
	public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target) { }

	// RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
	public Type get_AttributeType() { }

	// RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6 Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1
	private static T[] UnboxValues<T>(object[] values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD1C Offset: 0xD1C VA: 0xD1C
	|-CustomAttributeData.UnboxValues<object>
	|
	|-RVA: 0xDE7 Offset: 0xDE7 VA: 0xDE7
	|-CustomAttributeData.UnboxValues<CustomAttributeNamedArgument>
	|
	|-RVA: 0xDE5 Offset: 0xDE5 VA: 0xDE5
	|-CustomAttributeData.UnboxValues<CustomAttributeTypedArgument>
	*/

	// RVA: 0x2DB Offset: 0x2DB VA: 0x2DB Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
private class CustomAttributeData.LazyCAttrData // TypeDefIndex: 497
{
	// Fields
	internal Assembly assembly; // 0x8
	internal IntPtr data; // 0xC
	internal uint data_length; // 0x10

	// Methods

	// RVA: 0x3DB Offset: 0x3DB VA: 0x3DB
	public void .ctor() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x397 Offset: 0x397 VA: 0x397
[Serializable]
public class CustomAttributeFormatException : FormatException // TypeDefIndex: 498
{
	// Methods

	// RVA: 0x3DC Offset: 0x3DC VA: 0x3DC
	public void .ctor() { }

	// RVA: 0x24D Offset: 0x24D VA: 0x24D
	public void .ctor(string message) { }

	// RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x398 Offset: 0x398 VA: 0x398
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 499
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x0
	private MemberInfo memberInfo; // 0x8

	// Properties
	public MemberInfo MemberInfo { get; }
	public CustomAttributeTypedArgument TypedValue { get; }

	// Methods

	// RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6
	public void .ctor(MemberInfo memberInfo, object value) { }

	// RVA: 0x4D8 Offset: 0x4D8 VA: 0x4D8
	public MemberInfo get_MemberInfo() { }

	// RVA: 0x24E Offset: 0x24E VA: 0x24E
	public CustomAttributeTypedArgument get_TypedValue() { }

	// RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9 Slot: 3
	public override string ToString() { }

	// RVA: 0x2DD Offset: 0x2DD VA: 0x2DD Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4DA Offset: 0x4DA VA: 0x4DA Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x399 Offset: 0x399 VA: 0x399
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 500
{
	// Fields
	private Type argumentType; // 0x0
	private object value; // 0x4

	// Properties
	public object Value { get; }

	// Methods

	// RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7
	public void .ctor(Type argumentType, object value) { }

	// RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
	public object get_Value() { }

	// RVA: 0x4DC Offset: 0x4DC VA: 0x4DC Slot: 3
	public override string ToString() { }

	// RVA: 0x2DE Offset: 0x2DE VA: 0x2DE Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x4DD Offset: 0x4DD VA: 0x4DD Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x39A Offset: 0x39A VA: 0x39A
[ComVisibleAttribute] // RVA: 0x39A Offset: 0x39A VA: 0x39A
[ClassInterfaceAttribute] // RVA: 0x39A Offset: 0x39A VA: 0x39A
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 501
{
	// Fields
	private EventInfo.AddEventAdapter cached_add_event; // 0x8

	// Properties
	public virtual Type EventHandlerType { get; }
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x535 Offset: 0x535 VA: 0x535 Slot: 16
	public virtual Type get_EventHandlerType() { }

	// RVA: 0x536 Offset: 0x536 VA: 0x536 Slot: 6
	public override MemberTypes get_MemberType() { }

	// RVA: 0x3DE Offset: 0x3DE VA: 0x3DE
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract MethodInfo GetAddMethod(bool nonPublic) { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract MethodInfo GetRaiseMethod(bool nonPublic) { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodInfo GetRemoveMethod(bool nonPublic) { }

	// RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x537 Offset: 0x537 VA: 0x537 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9
	public static bool op_Equality(EventInfo left, EventInfo right) { }

	// RVA: 0x2FA Offset: 0x2FA VA: 0x2FA
	public static bool op_Inequality(EventInfo left, EventInfo right) { }

	// RVA: 0x2FB Offset: 0x2FB VA: 0x2FB
	private static EventInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle) { }

	// RVA: 0x2FC Offset: 0x2FC VA: 0x2FC
	internal static EventInfo GetEventFromHandle(RuntimeEventHandle handle, RuntimeTypeHandle reflectedType) { }
}

// Namespace: 
private sealed class EventInfo.AddEventAdapter : MulticastDelegate // TypeDefIndex: 502
{
	// Methods

	// RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9 Slot: 12
	public virtual void Invoke(object _this, Delegate dele) { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E Slot: 13
	public virtual IAsyncResult BeginInvoke(object _this, Delegate dele, AsyncCallback callback, object object) { }

	// RVA: 0x250 Offset: 0x250 VA: 0x250 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x39B Offset: 0x39B VA: 0x39B
public class ExceptionHandlingClause // TypeDefIndex: 503
{
	// Fields
	internal Type catch_type; // 0x8
	internal int filter_offset; // 0xC
	internal ExceptionHandlingClauseOptions flags; // 0x10
	internal int try_offset; // 0x14
	internal int try_length; // 0x18
	internal int handler_offset; // 0x1C
	internal int handler_length; // 0x20

	// Methods

	// RVA: 0x538 Offset: 0x538 VA: 0x538 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x39C Offset: 0x39C VA: 0x39C
[ComVisibleAttribute] // RVA: 0x39C Offset: 0x39C VA: 0x39C
[ClassInterfaceAttribute] // RVA: 0x39C Offset: 0x39C VA: 0x39C
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 504
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; }
	public bool IsLiteral { get; }
	public bool IsStatic { get; }
	public bool IsInitOnly { get; }
	public bool IsNotSerialized { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 16
	public abstract FieldAttributes get_Attributes() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x3DF Offset: 0x3DF VA: 0x3DF
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract Type get_FieldType() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract object GetValue(object obj) { }

	// RVA: 0x539 Offset: 0x539 VA: 0x539 Slot: 6
	public override MemberTypes get_MemberType() { }

	// RVA: 0x53A Offset: 0x53A VA: 0x53A Slot: 20
	public bool get_IsLiteral() { }

	// RVA: 0x53B Offset: 0x53B VA: 0x53B Slot: 21
	public bool get_IsStatic() { }

	// RVA: 0x53C Offset: 0x53C VA: 0x53C Slot: 22
	public bool get_IsInitOnly() { }

	// RVA: 0x53D Offset: 0x53D VA: 0x53D Slot: 23
	public bool get_IsNotSerialized() { }

	// RVA: -1 Offset: -1 Slot: 24
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	[DebuggerHiddenAttribute] // RVA: 0x6EB Offset: 0x6EB VA: 0x6EB
	[DebuggerStepThroughAttribute] // RVA: 0x6EB Offset: 0x6EB VA: 0x6EB
	// RVA: 0x1AA Offset: 0x1AA VA: 0x1AA Slot: 25
	public void SetValue(object obj, object value) { }

	// RVA: 0x2FD Offset: 0x2FD VA: 0x2FD
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle) { }

	// RVA: 0x53E Offset: 0x53E VA: 0x53E
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { }

	[ComVisibleAttribute] // RVA: 0x6EC Offset: 0x6EC VA: 0x6EC
	// RVA: 0x2FE Offset: 0x2FE VA: 0x2FE
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType) { }

	// RVA: 0x53F Offset: 0x53F VA: 0x53F Slot: 26
	internal virtual int GetFieldOffset() { }

	[CLSCompliantAttribute] // RVA: 0x6ED Offset: 0x6ED VA: 0x6ED
	// RVA: 0x1AB Offset: 0x1AB VA: 0x1AB Slot: 27
	public virtual void SetValueDirect(TypedReference obj, object value) { }

	// RVA: 0x540 Offset: 0x540 VA: 0x540
	private MarshalAsAttribute get_marshal_info() { }

	// RVA: 0x541 Offset: 0x541 VA: 0x541
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x542 Offset: 0x542 VA: 0x542 Slot: 28
	public virtual object GetRawConstantValue() { }

	// RVA: 0x2FF Offset: 0x2FF VA: 0x2FF Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x543 Offset: 0x543 VA: 0x543 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x300 Offset: 0x300 VA: 0x300
	public static bool op_Equality(FieldInfo left, FieldInfo right) { }

	// RVA: 0x301 Offset: 0x301 VA: 0x301
	public static bool op_Inequality(FieldInfo left, FieldInfo right) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x39D Offset: 0x39D VA: 0x39D
public class LocalVariableInfo // TypeDefIndex: 505
{
	// Fields
	internal Type type; // 0x8
	internal bool is_pinned; // 0xC
	internal ushort position; // 0xE

	// Methods

	// RVA: 0x544 Offset: 0x544 VA: 0x544 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x39E Offset: 0x39E VA: 0x39E
public class MethodBody // TypeDefIndex: 506
{
	// Fields
	private ExceptionHandlingClause[] clauses; // 0x8
	private LocalVariableInfo[] locals; // 0xC
	private byte[] il; // 0x10
	private bool init_locals; // 0x14
	private int sig_token; // 0x18
	private int max_stack; // 0x1C

	// Methods

	// RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
	protected void .ctor() { }

	// RVA: 0x561 Offset: 0x561 VA: 0x561 Slot: 4
	public virtual byte[] GetILAsByteArray() { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x39F Offset: 0x39F VA: 0x39F
[ComVisibleAttribute] // RVA: 0x39F Offset: 0x39F VA: 0x39F
[ClassInterfaceAttribute] // RVA: 0x39F Offset: 0x39F VA: 0x39F
[Serializable]
public abstract class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 507
{
	// Fields
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x4
	internal IntPtr _impl; // 0x8
	internal Assembly assembly; // 0xC
	internal string fqname; // 0x10
	internal string name; // 0x14
	internal string scopename; // 0x18
	internal bool is_resource; // 0x1C
	internal int token; // 0x20
	private const BindingFlags defaultBindingFlags = 28;

	// Properties
	public virtual Assembly Assembly { get; }
	public virtual string ScopeName { get; }
	public virtual Guid ModuleVersionId { get; }

	// Methods

	// RVA: 0x3E6 Offset: 0x3E6 VA: 0x3E6
	protected void .ctor() { }

	// RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1 Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x568 Offset: 0x568 VA: 0x568 Slot: 3
	public override string ToString() { }

	// RVA: 0x252 Offset: 0x252 VA: 0x252 Slot: 8
	internal virtual Guid GetModuleVersionId() { }

	// RVA: 0x311 Offset: 0x311 VA: 0x311
	private static bool filter_by_type_name(Type m, object filterCriteria) { }

	// RVA: 0x312 Offset: 0x312 VA: 0x312
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria) { }

	// RVA: 0x569 Offset: 0x569 VA: 0x569
	private string GetGuidInternal() { }

	// RVA: 0x313 Offset: 0x313 VA: 0x313 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x56A Offset: 0x56A VA: 0x56A Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x314 Offset: 0x314 VA: 0x314
	public static bool op_Equality(Module left, Module right) { }

	// RVA: 0x56B Offset: 0x56B VA: 0x56B Slot: 9
	public virtual Assembly get_Assembly() { }

	// RVA: 0x56C Offset: 0x56C VA: 0x56C Slot: 10
	public virtual string get_ScopeName() { }

	// RVA: 0x253 Offset: 0x253 VA: 0x253 Slot: 11
	public virtual Guid get_ModuleVersionId() { }

	// RVA: 0x1EA Offset: 0x1EA VA: 0x1EA
	private static Exception CreateNIE() { }

	// RVA: 0x56D Offset: 0x56D VA: 0x56D Slot: 12
	public virtual bool IsResource() { }

	// RVA: 0x8DC Offset: 0x8DC VA: 0x8DC Slot: 13
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8DD Offset: 0x8DD VA: 0x8DD Slot: 14
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0xEB4 Offset: 0xEB4 VA: 0xEB4
	private static void .cctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeAssembly : Assembly // TypeDefIndex: 508
{
	// Methods

	// RVA: 0x1BD Offset: 0x1BD VA: 0x1BD Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
	internal static RuntimeAssembly LoadWithPartialNameInternal(string partialName, Evidence securityEvidence, ref StackCrawlMark stackMark) { }

	// RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
	internal static RuntimeAssembly LoadWithPartialNameInternal(AssemblyName an, Evidence securityEvidence, ref StackCrawlMark stackMark) { }

	// RVA: 0x336 Offset: 0x336 VA: 0x336 Slot: 17
	public override AssemblyName GetName(bool copiedName) { }

	// RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4
	protected void .ctor() { }
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
[ComVisibleAttribute] // RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
[ComDefaultInterfaceAttribute] // RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
[Serializable]
internal class MonoAssembly : RuntimeAssembly // TypeDefIndex: 509
{
	// Methods

	// RVA: 0x9C Offset: 0x9C VA: 0x9C Slot: 23
	public override Type GetType(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x315 Offset: 0x315 VA: 0x315 Slot: 24
	public override Module GetModule(string name) { }

	// RVA: 0x316 Offset: 0x316 VA: 0x316 Slot: 25
	public override Module[] GetModules(bool getResourceModules) { }

	// RVA: 0x3E7 Offset: 0x3E7 VA: 0x3E7
	public void .ctor() { }
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 510
{
	// Fields
	public Type declaring_type; // 0x0
	public Type reflected_type; // 0x4
	public string name; // 0x8
	public MethodInfo add_method; // 0xC
	public MethodInfo remove_method; // 0x10
	public MethodInfo raise_method; // 0x14
	public EventAttributes attrs; // 0x18
	public MethodInfo[] other_methods; // 0x1C

	// Methods

	// RVA: 0x254 Offset: 0x254 VA: 0x254
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info) { }

	// RVA: 0x255 Offset: 0x255 VA: 0x255
	internal static MonoEventInfo GetEventInfo(MonoEvent ev) { }
}

// Namespace: System.Reflection
internal abstract class RuntimeEventInfo : EventInfo, ISerializable // TypeDefIndex: 511
{
	// Properties
	internal BindingFlags BindingFlags { get; }
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods

	// RVA: 0x5D6 Offset: 0x5D6 VA: 0x5D6
	internal BindingFlags get_BindingFlags() { }

	// RVA: 0x5D7 Offset: 0x5D7 VA: 0x5D7 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x5D8 Offset: 0x5D8 VA: 0x5D8
	internal RuntimeType GetDeclaringTypeInternal() { }

	// RVA: 0x5D9 Offset: 0x5D9 VA: 0x5D9
	private RuntimeType get_ReflectedTypeInternal() { }

	// RVA: 0x5DA Offset: 0x5DA VA: 0x5DA
	internal RuntimeModule GetRuntimeModule() { }

	// RVA: 0x1BF Offset: 0x1BF VA: 0x1BF Slot: 20
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3F6 Offset: 0x3F6 VA: 0x3F6
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : RuntimeEventInfo // TypeDefIndex: 512
{
	// Fields
	private IntPtr klass; // 0xC
	private IntPtr handle; // 0x10

	// Properties
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x318 Offset: 0x318 VA: 0x318 Slot: 17
	public override MethodInfo GetAddMethod(bool nonPublic) { }

	// RVA: 0x319 Offset: 0x319 VA: 0x319 Slot: 18
	public override MethodInfo GetRaiseMethod(bool nonPublic) { }

	// RVA: 0x31A Offset: 0x31A VA: 0x31A Slot: 19
	public override MethodInfo GetRemoveMethod(bool nonPublic) { }

	// RVA: 0x57D Offset: 0x57D VA: 0x57D Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x57E Offset: 0x57E VA: 0x57E Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x57F Offset: 0x57F VA: 0x57F Slot: 7
	public override string get_Name() { }

	// RVA: 0x580 Offset: 0x580 VA: 0x580 Slot: 3
	public override string ToString() { }

	// RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x31B Offset: 0x31B VA: 0x31B Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x581 Offset: 0x581 VA: 0x581 Slot: 13
	public override IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x3E9 Offset: 0x3E9 VA: 0x3E9
	public void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeFieldInfo : FieldInfo, ISerializable // TypeDefIndex: 513
{
	// Properties
	internal BindingFlags BindingFlags { get; }
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods

	// RVA: 0x5DB Offset: 0x5DB VA: 0x5DB
	internal BindingFlags get_BindingFlags() { }

	// RVA: 0x5DC Offset: 0x5DC VA: 0x5DC Slot: 15
	public override Module get_Module() { }

	// RVA: 0x5DD Offset: 0x5DD VA: 0x5DD
	internal RuntimeType GetDeclaringTypeInternal() { }

	// RVA: 0x5DE Offset: 0x5DE VA: 0x5DE
	private RuntimeType get_ReflectedTypeInternal() { }

	// RVA: 0x5DF Offset: 0x5DF VA: 0x5DF
	internal RuntimeModule GetRuntimeModule() { }

	// RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0 Slot: 29
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3F7 Offset: 0x3F7 VA: 0x3F7
	protected void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RtFieldInfo : RuntimeFieldInfo // TypeDefIndex: 514
{
	// Methods

	// RVA: 0x335 Offset: 0x335 VA: 0x335
	internal object UnsafeGetValue(object obj) { }

	// RVA: 0x25A Offset: 0x25A VA: 0x25A
	internal void CheckConsistency(object target) { }

	[DebuggerHiddenAttribute] // RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	[DebuggerStepThroughAttribute] // RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	internal void UnsafeSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	[DebuggerHiddenAttribute] // RVA: 0x6EF Offset: 0x6EF VA: 0x6EF
	[DebuggerStepThroughAttribute] // RVA: 0x6EF Offset: 0x6EF VA: 0x6EF
	// RVA: 0x1BC Offset: 0x1BC VA: 0x1BC Slot: 27
	public override void SetValueDirect(TypedReference obj, object value) { }

	// RVA: 0x3F3 Offset: 0x3F3 VA: 0x3F3
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : RtFieldInfo // TypeDefIndex: 515
{
	// Fields
	internal IntPtr klass; // 0x8
	internal RuntimeFieldHandle fhandle; // 0xC
	private string name; // 0x10
	private Type type; // 0x14
	private FieldAttributes attrs; // 0x18

	// Properties
	public override FieldAttributes Attributes { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x582 Offset: 0x582 VA: 0x582 Slot: 16
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x583 Offset: 0x583 VA: 0x583 Slot: 17
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x584 Offset: 0x584 VA: 0x584
	private Type ResolveType() { }

	// RVA: 0x585 Offset: 0x585 VA: 0x585 Slot: 18
	public override Type get_FieldType() { }

	// RVA: 0x31C Offset: 0x31C VA: 0x31C
	private Type GetParentType(bool declaring) { }

	// RVA: 0x586 Offset: 0x586 VA: 0x586 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x587 Offset: 0x587 VA: 0x587 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x588 Offset: 0x588 VA: 0x588 Slot: 7
	public override string get_Name() { }

	// RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x31D Offset: 0x31D VA: 0x31D Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x589 Offset: 0x589 VA: 0x589 Slot: 26
	internal override int GetFieldOffset() { }

	// RVA: 0x31E Offset: 0x31E VA: 0x31E
	private object GetValueInternal(object obj) { }

	// RVA: 0x31F Offset: 0x31F VA: 0x31F Slot: 19
	public override object GetValue(object obj) { }

	// RVA: 0x58A Offset: 0x58A VA: 0x58A Slot: 3
	public override string ToString() { }

	// RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19 Slot: 24
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x58B Offset: 0x58B VA: 0x58B Slot: 28
	public override object GetRawConstantValue() { }

	// RVA: 0x58C Offset: 0x58C VA: 0x58C Slot: 13
	public override IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x3EA Offset: 0x3EA VA: 0x3EA
	private void CheckGeneric() { }

	// RVA: 0x3EB Offset: 0x3EB VA: 0x3EB
	public void .ctor() { }
}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 516
{
	// Fields
	private Type parent; // 0x0
	private Type ret; // 0x4
	internal MethodAttributes attrs; // 0x8
	internal MethodImplAttributes iattrs; // 0xC
	private CallingConventions callconv; // 0x10

	// Methods

	// RVA: 0x256 Offset: 0x256 VA: 0x256
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info) { }

	// RVA: 0x5A4 Offset: 0x5A4 VA: 0x5A4
	private static int get_method_attributes(IntPtr handle) { }

	// RVA: 0x257 Offset: 0x257 VA: 0x257
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle) { }

	// RVA: 0x5A5 Offset: 0x5A5 VA: 0x5A5
	internal static Type GetDeclaringType(IntPtr handle) { }

	// RVA: 0x5A6 Offset: 0x5A6 VA: 0x5A6
	internal static Type GetReturnType(IntPtr handle) { }

	// RVA: 0x5A7 Offset: 0x5A7 VA: 0x5A7
	internal static MethodAttributes GetAttributes(IntPtr handle) { }

	// RVA: 0x5A8 Offset: 0x5A8 VA: 0x5A8
	internal static CallingConventions GetCallingConvention(IntPtr handle) { }

	// RVA: 0x5A9 Offset: 0x5A9 VA: 0x5A9
	internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle) { }

	// RVA: 0x324 Offset: 0x324 VA: 0x324
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member) { }

	// RVA: 0x325 Offset: 0x325 VA: 0x325
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member) { }
}

// Namespace: System.Reflection
internal abstract class RuntimeMethodInfo : MethodInfo, ISerializable // TypeDefIndex: 517
{
	// Properties
	internal BindingFlags BindingFlags { get; }
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods

	// RVA: 0x5E0 Offset: 0x5E0 VA: 0x5E0
	internal BindingFlags get_BindingFlags() { }

	// RVA: 0x5E1 Offset: 0x5E1 VA: 0x5E1 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x5E2 Offset: 0x5E2 VA: 0x5E2
	private RuntimeType get_ReflectedTypeInternal() { }

	// RVA: 0x337 Offset: 0x337 VA: 0x337 Slot: 35
	internal override string FormatNameAndSig(bool serialization) { }

	// RVA: 0x5E3 Offset: 0x5E3 VA: 0x5E3 Slot: 3
	public override string ToString() { }

	// RVA: 0x5E4 Offset: 0x5E4 VA: 0x5E4
	internal RuntimeModule GetRuntimeModule() { }

	// RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1 Slot: 43
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5E5 Offset: 0x5E5 VA: 0x5E5
	internal string SerializationToString() { }

	// RVA: 0x3F8 Offset: 0x3F8 VA: 0x3F8
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : RuntimeMethodInfo // TypeDefIndex: 518
{
	// Fields
	internal IntPtr mhandle; // 0x8
	private string name; // 0xC
	private Type reftype; // 0x10

	// Properties
	public override Type ReturnType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsSecurityCritical { get; }

	// Methods

	// RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
	internal void .ctor() { }

	// RVA: 0x58D Offset: 0x58D VA: 0x58D
	internal static string get_name(MethodBase method) { }

	// RVA: 0x320 Offset: 0x320 VA: 0x320
	internal static MonoMethod get_base_method(MonoMethod method, bool definition) { }

	// RVA: 0x58E Offset: 0x58E VA: 0x58E Slot: 42
	internal override MethodInfo GetBaseMethod() { }

	// RVA: 0x58F Offset: 0x58F VA: 0x58F Slot: 39
	public override Type get_ReturnType() { }

	// RVA: 0x590 Offset: 0x590 VA: 0x590 Slot: 18
	public override MethodImplAttributes GetMethodImplementationFlags() { }

	// RVA: 0x591 Offset: 0x591 VA: 0x591 Slot: 17
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x592 Offset: 0x592 VA: 0x592 Slot: 37
	internal override ParameterInfo[] GetParametersInternal() { }

	// RVA: 0x593 Offset: 0x593 VA: 0x593 Slot: 38
	internal override int GetParametersCount() { }

	// RVA: 0x9E Offset: 0x9E VA: 0x9E
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	[DebuggerHiddenAttribute] // RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0
	[DebuggerStepThroughAttribute] // RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0
	// RVA: 0x3F Offset: 0x3F VA: 0x3F Slot: 21
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45
	internal static void ConvertValues(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture, BindingFlags invokeAttr) { }

	// RVA: 0x594 Offset: 0x594 VA: 0x594 Slot: 19
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x595 Offset: 0x595 VA: 0x595 Slot: 20
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x596 Offset: 0x596 VA: 0x596 Slot: 22
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x597 Offset: 0x597 VA: 0x597 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x598 Offset: 0x598 VA: 0x598 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x599 Offset: 0x599 VA: 0x599 Slot: 7
	public override string get_Name() { }

	// RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x321 Offset: 0x321 VA: 0x321 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x94 Offset: 0x94 VA: 0x94
	internal void GetPInvoke(out PInvokeAttributes flags, out string entryPoint, out string dllName) { }

	// RVA: 0x59A Offset: 0x59A VA: 0x59A
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x322 Offset: 0x322 VA: 0x322 Slot: 41
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation) { }

	// RVA: 0x323 Offset: 0x323 VA: 0x323
	private MethodInfo MakeGenericMethod_impl(Type[] types) { }

	// RVA: 0x59B Offset: 0x59B VA: 0x59B Slot: 23
	public override Type[] GetGenericArguments() { }

	// RVA: 0x59C Offset: 0x59C VA: 0x59C
	private MethodInfo GetGenericMethodDefinition_impl() { }

	// RVA: 0x59D Offset: 0x59D VA: 0x59D Slot: 40
	public override MethodInfo GetGenericMethodDefinition() { }

	// RVA: 0x59E Offset: 0x59E VA: 0x59E Slot: 24
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x59F Offset: 0x59F VA: 0x59F Slot: 26
	public override bool get_IsGenericMethod() { }

	// RVA: 0x5A0 Offset: 0x5A0 VA: 0x5A0 Slot: 25
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x5A1 Offset: 0x5A1 VA: 0x5A1 Slot: 34
	public override MethodBody GetMethodBody() { }

	// RVA: 0x5A2 Offset: 0x5A2 VA: 0x5A2 Slot: 13
	public override IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x1EC Offset: 0x1EC VA: 0x1EC
	private static int get_core_clr_security_level() { }

	// RVA: 0x5A3 Offset: 0x5A3 VA: 0x5A3 Slot: 27
	public override bool get_IsSecurityCritical() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeConstructorInfo : ConstructorInfo, ISerializable // TypeDefIndex: 519
{
	// Properties
	public override Module Module { get; }
	internal BindingFlags BindingFlags { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods

	// RVA: 0x5D1 Offset: 0x5D1 VA: 0x5D1 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x5D2 Offset: 0x5D2 VA: 0x5D2
	internal RuntimeModule GetRuntimeModule() { }

	// RVA: 0x5D3 Offset: 0x5D3 VA: 0x5D3
	internal BindingFlags get_BindingFlags() { }

	// RVA: 0x5D4 Offset: 0x5D4 VA: 0x5D4
	private RuntimeType get_ReflectedTypeInternal() { }

	// RVA: 0x1BE Offset: 0x1BE VA: 0x1BE Slot: 40
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5D5 Offset: 0x5D5 VA: 0x5D5
	internal string SerializationToString() { }

	// RVA: 0x97 Offset: 0x97 VA: 0x97
	internal void SerializationInvoke(object target, SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3F5 Offset: 0x3F5 VA: 0x3F5
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoCMethod : RuntimeConstructorInfo // TypeDefIndex: 520
{
	// Fields
	internal IntPtr mhandle; // 0x8
	private string name; // 0xC
	private Type reftype; // 0x10

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override bool ContainsGenericParameters { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsSecurityCritical { get; }

	// Methods

	// RVA: 0x56E Offset: 0x56E VA: 0x56E Slot: 18
	public override MethodImplAttributes GetMethodImplementationFlags() { }

	// RVA: 0x56F Offset: 0x56F VA: 0x56F Slot: 17
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x570 Offset: 0x570 VA: 0x570 Slot: 37
	internal override ParameterInfo[] GetParametersInternal() { }

	// RVA: 0x571 Offset: 0x571 VA: 0x571 Slot: 38
	internal override int GetParametersCount() { }

	// RVA: 0x9D Offset: 0x9D VA: 0x9D
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	[DebuggerHiddenAttribute] // RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1
	[DebuggerStepThroughAttribute] // RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1
	// RVA: 0x3D Offset: 0x3D VA: 0x3D Slot: 21
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E
	private object DoInvoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
	public object InternalInvoke(object obj, object[] parameters) { }

	[DebuggerHiddenAttribute] // RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2
	[DebuggerStepThroughAttribute] // RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2
	// RVA: 0x40 Offset: 0x40 VA: 0x40 Slot: 39
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x572 Offset: 0x572 VA: 0x572 Slot: 19
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x573 Offset: 0x573 VA: 0x573 Slot: 20
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x574 Offset: 0x574 VA: 0x574 Slot: 22
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x575 Offset: 0x575 VA: 0x575 Slot: 25
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x576 Offset: 0x576 VA: 0x576 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x577 Offset: 0x577 VA: 0x577 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x578 Offset: 0x578 VA: 0x578 Slot: 7
	public override string get_Name() { }

	// RVA: 0x8DF Offset: 0x8DF VA: 0x8DF Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x317 Offset: 0x317 VA: 0x317 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x579 Offset: 0x579 VA: 0x579 Slot: 34
	public override MethodBody GetMethodBody() { }

	// RVA: 0x57A Offset: 0x57A VA: 0x57A Slot: 3
	public override string ToString() { }

	// RVA: 0x57B Offset: 0x57B VA: 0x57B Slot: 13
	public override IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x1EB Offset: 0x1EB VA: 0x1EB
	private static int get_core_clr_security_level() { }

	// RVA: 0x57C Offset: 0x57C VA: 0x57C Slot: 27
	public override bool get_IsSecurityCritical() { }

	// RVA: 0x3E8 Offset: 0x3E8 VA: 0x3E8
	public void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeModule : Module // TypeDefIndex: 521
{
	// Methods

	// RVA: 0x3F9 Offset: 0x3F9 VA: 0x3F9
	protected void .ctor() { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
[ClassInterfaceAttribute] // RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
[ComVisibleAttribute] // RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
[Serializable]
internal class MonoModule : RuntimeModule // TypeDefIndex: 522
{
	// Properties
	public override Assembly Assembly { get; }
	public override string ScopeName { get; }
	public override Guid ModuleVersionId { get; }

	// Methods

	// RVA: 0x5AA Offset: 0x5AA VA: 0x5AA Slot: 9
	public override Assembly get_Assembly() { }

	// RVA: 0x5AB Offset: 0x5AB VA: 0x5AB Slot: 10
	public override string get_ScopeName() { }

	// RVA: 0x258 Offset: 0x258 VA: 0x258 Slot: 11
	public override Guid get_ModuleVersionId() { }

	// RVA: 0x5AC Offset: 0x5AC VA: 0x5AC Slot: 12
	public override bool IsResource() { }

	// RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8 Slot: 14
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3 Slot: 7
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5AD Offset: 0x5AD VA: 0x5AD
	internal RuntimeAssembly GetRuntimeAssembly() { }

	// RVA: 0x3ED Offset: 0x3ED VA: 0x3ED
	public void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeParameterInfo : ParameterInfo // TypeDefIndex: 523
{
	// Methods

	// RVA: 0x3FA Offset: 0x3FA VA: 0x3FA
	protected void .ctor() { }
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
[ComDefaultInterfaceAttribute] // RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
[ComVisibleAttribute] // RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
[Serializable]
internal class MonoParameterInfo : RuntimeParameterInfo // TypeDefIndex: 524
{
	// Properties
	public override object DefaultValue { get; }

	// Methods

	// RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4
	internal void .ctor(ParameterInfo pinfo, MemberInfo member) { }

	// RVA: 0x5AE Offset: 0x5AE VA: 0x5AE Slot: 11
	public override object get_DefaultValue() { }

	// RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9 Slot: 12
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8EA Offset: 0x8EA VA: 0x8EA Slot: 13
	public override bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 525
{
	// Fields
	public Type parent; // 0x0
	public Type declaring_type; // 0x4
	public string name; // 0x8
	public MethodInfo get_method; // 0xC
	public MethodInfo set_method; // 0x10
	public PropertyAttributes attrs; // 0x14

	// Methods

	// RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info) { }

	// RVA: 0x32C Offset: 0x32C VA: 0x32C
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional) { }

	// RVA: 0x5BD Offset: 0x5BD VA: 0x5BD
	internal static object get_default_value(MonoProperty prop) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x3A3 Offset: 0x3A3 VA: 0x3A3
internal enum PInfo // TypeDefIndex: 526
{
	// Fields
	public int value__; // 0x0
	public const PInfo Attributes = 1;
	public const PInfo GetMethod = 2;
	public const PInfo SetMethod = 4;
	public const PInfo ReflectedType = 8;
	public const PInfo DeclaringType = 16;
	public const PInfo Name = 32;
}

// Namespace: System.Reflection
internal abstract class RuntimePropertyInfo : PropertyInfo, ISerializable // TypeDefIndex: 527
{
	// Properties
	internal BindingFlags BindingFlags { get; }
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods

	// RVA: 0x5E6 Offset: 0x5E6 VA: 0x5E6
	internal BindingFlags get_BindingFlags() { }

	// RVA: 0x5E7 Offset: 0x5E7 VA: 0x5E7 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x5E8 Offset: 0x5E8 VA: 0x5E8
	internal RuntimeType GetDeclaringTypeInternal() { }

	// RVA: 0x5E9 Offset: 0x5E9 VA: 0x5E9
	private RuntimeType get_ReflectedTypeInternal() { }

	// RVA: 0x5EA Offset: 0x5EA VA: 0x5EA
	internal RuntimeModule GetRuntimeModule() { }

	// RVA: 0x5EB Offset: 0x5EB VA: 0x5EB Slot: 3
	public override string ToString() { }

	// RVA: 0x338 Offset: 0x338 VA: 0x338
	private string FormatNameAndSig(bool serialization) { }

	// RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2 Slot: 33
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x5EC Offset: 0x5EC VA: 0x5EC
	internal string SerializationToString() { }

	// RVA: 0x3FB Offset: 0x3FB VA: 0x3FB
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : RuntimePropertyInfo // TypeDefIndex: 528
{
	// Fields
	internal IntPtr klass; // 0x8
	internal IntPtr prop; // 0xC
	private MonoPropertyInfo info; // 0x10
	private PInfo cached; // 0x28
	private MonoProperty.GetterAdapter cached_getter; // 0x2C

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x259 Offset: 0x259 VA: 0x259
	private void CachePropertyInfo(PInfo flags) { }

	// RVA: 0x5AF Offset: 0x5AF VA: 0x5AF Slot: 16
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x5B0 Offset: 0x5B0 VA: 0x5B0 Slot: 17
	public override bool get_CanRead() { }

	// RVA: 0x5B1 Offset: 0x5B1 VA: 0x5B1 Slot: 18
	public override bool get_CanWrite() { }

	// RVA: 0x5B2 Offset: 0x5B2 VA: 0x5B2 Slot: 19
	public override Type get_PropertyType() { }

	// RVA: 0x5B3 Offset: 0x5B3 VA: 0x5B3 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x5B4 Offset: 0x5B4 VA: 0x5B4 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x5B5 Offset: 0x5B5 VA: 0x5B5 Slot: 7
	public override string get_Name() { }

	// RVA: 0x326 Offset: 0x326 VA: 0x326 Slot: 20
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x327 Offset: 0x327 VA: 0x327 Slot: 22
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x5B6 Offset: 0x5B6 VA: 0x5B6 Slot: 23
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x328 Offset: 0x328 VA: 0x328 Slot: 24
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x5B7 Offset: 0x5B7 VA: 0x5B7 Slot: 31
	public override object GetConstantValue() { }

	// RVA: 0x5B8 Offset: 0x5B8 VA: 0x5B8 Slot: 32
	public override object GetRawConstantValue() { }

	// RVA: 0x8EB Offset: 0x8EB VA: 0x8EB Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x329 Offset: 0x329 VA: 0x329 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8EC Offset: 0x8EC VA: 0x8EC Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: -1 Offset: -1
	private static object GetterAdapterFrame<T, R>(MonoProperty.Getter<T, R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x647 Offset: 0x647 VA: 0x647
	|-MonoProperty.GetterAdapterFrame<object, object>
	*/

	// RVA: -1 Offset: -1
	private static object StaticGetterAdapterFrame<R>(MonoProperty.StaticGetter<R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x648 Offset: 0x648 VA: 0x648
	|-MonoProperty.StaticGetterAdapterFrame<object>
	*/

	// RVA: 0x5B9 Offset: 0x5B9 VA: 0x5B9
	private static MonoProperty.GetterAdapter CreateGetterDelegate(MethodInfo method) { }

	// RVA: 0x8ED Offset: 0x8ED VA: 0x8ED Slot: 25
	public override object GetValue(object obj, object[] index) { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40 Slot: 26
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17 Slot: 28
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x5BA Offset: 0x5BA VA: 0x5BA Slot: 29
	public override Type[] GetOptionalCustomModifiers() { }

	// RVA: 0x5BB Offset: 0x5BB VA: 0x5BB Slot: 30
	public override Type[] GetRequiredCustomModifiers() { }

	// RVA: 0x5BC Offset: 0x5BC VA: 0x5BC Slot: 13
	public override IList<CustomAttributeData> GetCustomAttributesData() { }

	// RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
	public void .ctor() { }
}

// Namespace: 
private sealed class MonoProperty.GetterAdapter : MulticastDelegate // TypeDefIndex: 529
{
	// Methods

	// RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x32A Offset: 0x32A VA: 0x32A Slot: 12
	public virtual object Invoke(object _this) { }

	// RVA: 0x9F Offset: 0x9F VA: 0x9F Slot: 13
	public virtual IAsyncResult BeginInvoke(object _this, AsyncCallback callback, object object) { }

	// RVA: 0x32B Offset: 0x32B VA: 0x32B Slot: 14
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoProperty.Getter<T, R> : MulticastDelegate // TypeDefIndex: 530
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
	|-MonoProperty.Getter<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual R Invoke(T _this) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x649 Offset: 0x649 VA: 0x649
	|-MonoProperty.Getter<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T _this, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x15C Offset: 0x15C VA: 0x15C
	|-MonoProperty.Getter<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual R EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x64A Offset: 0x64A VA: 0x64A
	|-MonoProperty.Getter<object, object>.EndInvoke
	*/
}

// Namespace: 
private sealed class MonoProperty.StaticGetter<R> : MulticastDelegate // TypeDefIndex: 531
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3EF Offset: 0x3EF VA: 0x3EF
	|-MonoProperty.StaticGetter<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual R Invoke() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD1D Offset: 0xD1D VA: 0xD1D
	|-MonoProperty.StaticGetter<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA45 Offset: 0xA45 VA: 0xA45
	|-MonoProperty.StaticGetter<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual R EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x64B Offset: 0x64B VA: 0x64B
	|-MonoProperty.StaticGetter<object>.EndInvoke
	*/
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4
[ComVisibleAttribute] // RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4
[ClassInterfaceAttribute] // RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4
[Serializable]
public class ParameterInfo : ICustomAttributeProvider, IObjectReference, _ParameterInfo // TypeDefIndex: 532
{
	// Fields
	protected Type ClassImpl; // 0x8
	protected object DefaultValueImpl; // 0xC
	protected MemberInfo MemberImpl; // 0x10
	protected string NameImpl; // 0x14
	protected int PositionImpl; // 0x18
	protected ParameterAttributes AttrsImpl; // 0x1C
	internal MarshalAsAttribute marshalAs; // 0x20

	// Properties
	public virtual Type ParameterType { get; }
	public virtual ParameterAttributes Attributes { get; }
	public bool IsIn { get; }
	public bool IsOptional { get; }
	public bool IsOut { get; }
	public bool IsRetval { get; }
	public virtual string Name { get; }
	public virtual int Position { get; }
	public virtual object DefaultValue { get; }

	// Methods

	// RVA: 0x3EF Offset: 0x3EF VA: 0x3EF
	protected void .ctor() { }

	// RVA: 0x5BE Offset: 0x5BE VA: 0x5BE Slot: 3
	public override string ToString() { }

	// RVA: 0x95 Offset: 0x95 VA: 0x95
	internal static void FormatParameters(StringBuilder sb, ParameterInfo[] p, CallingConventions callingConvention, bool serialization) { }

	// RVA: 0x5BF Offset: 0x5BF VA: 0x5BF Slot: 7
	public virtual Type get_ParameterType() { }

	// RVA: 0x5C0 Offset: 0x5C0 VA: 0x5C0 Slot: 8
	public virtual ParameterAttributes get_Attributes() { }

	// RVA: 0x5C1 Offset: 0x5C1 VA: 0x5C1
	public bool get_IsIn() { }

	// RVA: 0x5C2 Offset: 0x5C2 VA: 0x5C2
	public bool get_IsOptional() { }

	// RVA: 0x5C3 Offset: 0x5C3 VA: 0x5C3
	public bool get_IsOut() { }

	// RVA: 0x5C4 Offset: 0x5C4 VA: 0x5C4
	public bool get_IsRetval() { }

	// RVA: 0x5C5 Offset: 0x5C5 VA: 0x5C5 Slot: 9
	public virtual string get_Name() { }

	// RVA: 0x5C6 Offset: 0x5C6 VA: 0x5C6 Slot: 10
	public virtual int get_Position() { }

	// RVA: 0x5C7 Offset: 0x5C7 VA: 0x5C7
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x5C8 Offset: 0x5C8 VA: 0x5C8
	internal object GetDefaultValueImpl() { }

	// RVA: 0x5C9 Offset: 0x5C9 VA: 0x5C9 Slot: 11
	public virtual object get_DefaultValue() { }

	// RVA: 0x8EE Offset: 0x8EE VA: 0x8EE Slot: 12
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x32D Offset: 0x32D VA: 0x32D Slot: 6
	public object GetRealObject(StreamingContext context) { }

	// RVA: 0x8EF Offset: 0x8EF VA: 0x8EF Slot: 13
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x32E Offset: 0x32E VA: 0x32E
	internal static ParameterInfo New(ParameterInfo pinfo, MemberInfo member) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5
[ClassInterfaceAttribute] // RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5
[ComDefaultInterfaceAttribute] // RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5
[Serializable]
public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 533
{
	// Properties
	public abstract PropertyAttributes Attributes { get; }
	public abstract bool CanRead { get; }
	public abstract bool CanWrite { get; }
	public override MemberTypes MemberType { get; }
	public abstract Type PropertyType { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 16
	public abstract PropertyAttributes get_Attributes() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract bool get_CanRead() { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool get_CanWrite() { }

	// RVA: 0x5CA Offset: 0x5CA VA: 0x5CA Slot: 6
	public override MemberTypes get_MemberType() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract Type get_PropertyType() { }

	// RVA: 0x3F1 Offset: 0x3F1 VA: 0x3F1
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x5CB Offset: 0x5CB VA: 0x5CB Slot: 21
	public MethodInfo GetGetMethod() { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract ParameterInfo[] GetIndexParameters() { }

	// RVA: -1 Offset: -1 Slot: 24
	public abstract MethodInfo GetSetMethod(bool nonPublic) { }

	[DebuggerHiddenAttribute] // RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3
	[DebuggerStepThroughAttribute] // RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3
	// RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0 Slot: 25
	public virtual object GetValue(object obj, object[] index) { }

	// RVA: -1 Offset: -1 Slot: 26
	public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	[DebuggerStepThroughAttribute] // RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4
	[DebuggerHiddenAttribute] // RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4
	// RVA: 0x96 Offset: 0x96 VA: 0x96 Slot: 27
	public virtual void SetValue(object obj, object value, object[] index) { }

	// RVA: -1 Offset: -1 Slot: 28
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x5CC Offset: 0x5CC VA: 0x5CC Slot: 29
	public virtual Type[] GetOptionalCustomModifiers() { }

	// RVA: 0x5CD Offset: 0x5CD VA: 0x5CD Slot: 30
	public virtual Type[] GetRequiredCustomModifiers() { }

	// RVA: 0x1ED Offset: 0x1ED VA: 0x1ED
	private static NotImplementedException CreateNIE() { }

	// RVA: 0x5CE Offset: 0x5CE VA: 0x5CE Slot: 31
	public virtual object GetConstantValue() { }

	// RVA: 0x5CF Offset: 0x5CF VA: 0x5CF Slot: 32
	public virtual object GetRawConstantValue() { }

	// RVA: 0x330 Offset: 0x330 VA: 0x330 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x5D0 Offset: 0x5D0 VA: 0x5D0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x331 Offset: 0x331 VA: 0x331
	public static bool op_Equality(PropertyInfo left, PropertyInfo right) { }

	// RVA: 0x332 Offset: 0x332 VA: 0x332
	public static bool op_Inequality(PropertyInfo left, PropertyInfo right) { }

	// RVA: 0x333 Offset: 0x333 VA: 0x333
	private static PropertyInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle) { }

	// RVA: 0x334 Offset: 0x334 VA: 0x334
	internal static PropertyInfo GetPropertyFromHandle(RuntimePropertyHandle handle, RuntimeTypeHandle reflectedType) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0x3A6 Offset: 0x3A6 VA: 0x3A6
[Serializable]
public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 534
{
	// Fields
	private byte[] _publicKey; // 0x8
	private string _keyPairContainer; // 0xC
	private bool _keyPairExported; // 0x10
	private byte[] _keyPairArray; // 0x14

	// Methods

	// RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x25B Offset: 0x25B VA: 0x25B Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
}

// Namespace: System.Reflection.Emit
public class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 535
{}

// Namespace: System.Reflection.Emit
public abstract class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 536
{
	// Properties
	public override MethodAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x4DF Offset: 0x4DF VA: 0x4DF Slot: 20
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x4E1 Offset: 0x4E1 VA: 0x4E1 Slot: 7
	public override string get_Name() { }

	// RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2 Slot: 17
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3 Slot: 19
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x4E4 Offset: 0x4E4 VA: 0x4E4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2DF Offset: 0x2DF VA: 0x2DF Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8BF Offset: 0x8BF VA: 0x8BF Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5 Slot: 18
	public override MethodImplAttributes GetMethodImplementationFlags() { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36 Slot: 21
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x3D Offset: 0x3D VA: 0x3D Slot: 39
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection.Emit
public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 537
{}

// Namespace: System.Reflection.Emit
public abstract class EnumBuilder : TypeInfo, _EnumBuilder // TypeDefIndex: 538
{
	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x4ED Offset: 0x4ED VA: 0x4ED Slot: 23
	public override Assembly get_Assembly() { }

	// RVA: 0x4EE Offset: 0x4EE VA: 0x4EE Slot: 27
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x4EF Offset: 0x4EF VA: 0x4EF Slot: 29
	public override Type get_BaseType() { }

	// RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0 Slot: 25
	public override string get_FullName() { }

	// RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x4F2 Offset: 0x4F2 VA: 0x4F2 Slot: 7
	public override string get_Name() { }

	// RVA: 0x4F3 Offset: 0x4F3 VA: 0x4F3 Slot: 26
	public override string get_Namespace() { }

	// RVA: 0x4F4 Offset: 0x4F4 VA: 0x4F4 Slot: 97
	public override Type GetElementType() { }

	// RVA: 0x4F5 Offset: 0x4F5 VA: 0x4F5 Slot: 105
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x4F6 Offset: 0x4F6 VA: 0x4F6 Slot: 88
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38 Slot: 33
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x6F5 Offset: 0x6F5 VA: 0x6F5
	// RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1 Slot: 34
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5 Slot: 42
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3 Slot: 43
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7 Slot: 44
	public override Type[] GetInterfaces() { }

	// RVA: 0xD Offset: 0xD VA: 0xD Slot: 39
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4 Slot: 41
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6 Slot: 54
	public override Type GetNestedType(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5 Slot: 51
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0xE Offset: 0xE VA: 0xE Slot: 50
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x4F8 Offset: 0x4F8 VA: 0x4F8 Slot: 100
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5 Slot: 22
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x4F9 Offset: 0x4F9 VA: 0x4F9 Slot: 89
	protected override bool IsArrayImpl() { }

	// RVA: 0x4FA Offset: 0x4FA VA: 0x4FA Slot: 90
	protected override bool IsByRefImpl() { }

	// RVA: 0x4FB Offset: 0x4FB VA: 0x4FB Slot: 93
	protected override bool IsCOMObjectImpl() { }

	// RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x4FC Offset: 0x4FC VA: 0x4FC Slot: 91
	protected override bool IsPointerImpl() { }

	// RVA: 0x4FD Offset: 0x4FD VA: 0x4FD Slot: 92
	protected override bool IsPrimitiveImpl() { }
}

// Namespace: System.Reflection.Emit
public class EventBuilder : _EventBuilder // TypeDefIndex: 539
{}

// Namespace: System.Reflection.Emit
public abstract class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 540
{
	// Properties
	public override FieldAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override Type FieldType { get; }
	public override string Name { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x4FE Offset: 0x4FE VA: 0x4FE Slot: 16
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x4FF Offset: 0x4FF VA: 0x4FF Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x500 Offset: 0x500 VA: 0x500 Slot: 18
	public override Type get_FieldType() { }

	// RVA: 0x501 Offset: 0x501 VA: 0x501 Slot: 7
	public override string get_Name() { }

	// RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6 Slot: 19
	public override object GetValue(object obj) { }

	// RVA: 0x502 Offset: 0x502 VA: 0x502 Slot: 17
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x503 Offset: 0x503 VA: 0x503 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18 Slot: 24
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
}

// Namespace: System.Reflection.Emit
public abstract class GenericTypeParameterBuilder : TypeInfo // TypeDefIndex: 541
{
	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x504 Offset: 0x504 VA: 0x504 Slot: 23
	public override Assembly get_Assembly() { }

	// RVA: 0x505 Offset: 0x505 VA: 0x505 Slot: 27
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x506 Offset: 0x506 VA: 0x506 Slot: 29
	public override Type get_BaseType() { }

	// RVA: 0x507 Offset: 0x507 VA: 0x507 Slot: 25
	public override string get_FullName() { }

	// RVA: 0x508 Offset: 0x508 VA: 0x508 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x509 Offset: 0x509 VA: 0x509 Slot: 7
	public override string get_Name() { }

	// RVA: 0x50A Offset: 0x50A VA: 0x50A Slot: 26
	public override string get_Namespace() { }

	// RVA: 0x50B Offset: 0x50B VA: 0x50B Slot: 97
	public override Type GetElementType() { }

	// RVA: 0x50C Offset: 0x50C VA: 0x50C Slot: 105
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x50D Offset: 0x50D VA: 0x50D Slot: 88
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39 Slot: 33
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x6F6 Offset: 0x6F6 VA: 0x6F6
	// RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8 Slot: 34
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8CA Offset: 0x8CA VA: 0x8CA Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8CB Offset: 0x8CB VA: 0x8CB Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x8CC Offset: 0x8CC VA: 0x8CC Slot: 42
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2EA Offset: 0x2EA VA: 0x2EA Slot: 43
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x50E Offset: 0x50E VA: 0x50E Slot: 44
	public override Type[] GetInterfaces() { }

	// RVA: 0xF Offset: 0xF VA: 0xF Slot: 39
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x2EB Offset: 0x2EB VA: 0x2EB Slot: 41
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x8CD Offset: 0x8CD VA: 0x8CD Slot: 54
	public override Type GetNestedType(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2EC Offset: 0x2EC VA: 0x2EC Slot: 51
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10 Slot: 50
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x50F Offset: 0x50F VA: 0x50F Slot: 100
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6 Slot: 22
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x510 Offset: 0x510 VA: 0x510 Slot: 89
	protected override bool IsArrayImpl() { }

	// RVA: 0x511 Offset: 0x511 VA: 0x511 Slot: 90
	protected override bool IsByRefImpl() { }

	// RVA: 0x512 Offset: 0x512 VA: 0x512 Slot: 93
	protected override bool IsCOMObjectImpl() { }

	// RVA: 0x8CE Offset: 0x8CE VA: 0x8CE Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x513 Offset: 0x513 VA: 0x513 Slot: 91
	protected override bool IsPointerImpl() { }

	// RVA: 0x514 Offset: 0x514 VA: 0x514 Slot: 92
	protected override bool IsPrimitiveImpl() { }
}

// Namespace: System.Reflection.Emit
public class ILGenerator : _ILGenerator // TypeDefIndex: 542
{}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7
[ClassInterfaceAttribute] // RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 543
{
	// Fields
	private string name; // 0x10
	internal ILGenerator ilgen; // 0x14
	private int startOffset; // 0x18
	private int endOffset; // 0x1C
}

// Namespace: System.Reflection.Emit
public abstract class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 544
{
	// Properties
	public override MethodAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x515 Offset: 0x515 VA: 0x515 Slot: 20
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x516 Offset: 0x516 VA: 0x516 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x517 Offset: 0x517 VA: 0x517 Slot: 7
	public override string get_Name() { }

	// RVA: 0x518 Offset: 0x518 VA: 0x518 Slot: 17
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x519 Offset: 0x519 VA: 0x519 Slot: 19
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x51A Offset: 0x51A VA: 0x51A Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2ED Offset: 0x2ED VA: 0x2ED Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8CF Offset: 0x8CF VA: 0x8CF Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x51B Offset: 0x51B VA: 0x51B Slot: 18
	public override MethodImplAttributes GetMethodImplementationFlags() { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A Slot: 21
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection.Emit
public abstract class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 545
{}

// Namespace: System.Reflection.Emit
public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 546
{}

// Namespace: System.Reflection.Emit
public abstract class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 547
{
	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x51C Offset: 0x51C VA: 0x51C Slot: 16
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x51D Offset: 0x51D VA: 0x51D Slot: 17
	public override bool get_CanRead() { }

	// RVA: 0x51E Offset: 0x51E VA: 0x51E Slot: 18
	public override bool get_CanWrite() { }

	// RVA: 0x51F Offset: 0x51F VA: 0x51F Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x520 Offset: 0x520 VA: 0x520 Slot: 7
	public override string get_Name() { }

	// RVA: 0x521 Offset: 0x521 VA: 0x521 Slot: 19
	public override Type get_PropertyType() { }

	// RVA: 0x522 Offset: 0x522 VA: 0x522 Slot: 23
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x523 Offset: 0x523 VA: 0x523 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2EE Offset: 0x2EE VA: 0x2EE Slot: 20
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x2EF Offset: 0x2EF VA: 0x2EF Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0 Slot: 22
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1 Slot: 24
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B Slot: 26
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15 Slot: 28
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }
}

// Namespace: System.Reflection.Emit
public class SignatureHelper : _SignatureHelper // TypeDefIndex: 548
{}

// Namespace: System.Reflection.Emit
public abstract class TypeBuilder : TypeInfo, _TypeBuilder // TypeDefIndex: 549
{
	// Fields
	public const int UnspecifiedTypeSize = 0;

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x524 Offset: 0x524 VA: 0x524 Slot: 23
	public override Assembly get_Assembly() { }

	// RVA: 0x525 Offset: 0x525 VA: 0x525 Slot: 27
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x526 Offset: 0x526 VA: 0x526 Slot: 29
	public override Type get_BaseType() { }

	// RVA: 0x527 Offset: 0x527 VA: 0x527 Slot: 25
	public override string get_FullName() { }

	// RVA: 0x528 Offset: 0x528 VA: 0x528 Slot: 15
	public override Module get_Module() { }

	// RVA: 0x529 Offset: 0x529 VA: 0x529 Slot: 7
	public override string get_Name() { }

	// RVA: 0x52A Offset: 0x52A VA: 0x52A Slot: 26
	public override string get_Namespace() { }

	// RVA: 0x52B Offset: 0x52B VA: 0x52B Slot: 97
	public override Type GetElementType() { }

	// RVA: 0x52C Offset: 0x52C VA: 0x52C Slot: 105
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x52D Offset: 0x52D VA: 0x52D Slot: 88
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C Slot: 33
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0x6F7 Offset: 0x6F7 VA: 0x6F7
	// RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2 Slot: 34
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5 Slot: 42
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4 Slot: 43
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x52E Offset: 0x52E VA: 0x52E Slot: 44
	public override Type[] GetInterfaces() { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11 Slot: 39
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5 Slot: 41
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6 Slot: 54
	public override Type GetNestedType(string name, BindingFlags bindingAttr) { }

	// RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6 Slot: 51
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12 Slot: 50
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x52F Offset: 0x52F VA: 0x52F Slot: 100
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 22
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x530 Offset: 0x530 VA: 0x530 Slot: 89
	protected override bool IsArrayImpl() { }

	// RVA: 0x531 Offset: 0x531 VA: 0x531 Slot: 90
	protected override bool IsByRefImpl() { }

	// RVA: 0x532 Offset: 0x532 VA: 0x532 Slot: 93
	protected override bool IsCOMObjectImpl() { }

	// RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x533 Offset: 0x533 VA: 0x533 Slot: 91
	protected override bool IsPointerImpl() { }

	// RVA: 0x534 Offset: 0x534 VA: 0x534 Slot: 92
	protected override bool IsPrimitiveImpl() { }
}

// Namespace: System.Reflection.Emit
internal abstract class TypeBuilderInstantiation : TypeInfo // TypeDefIndex: 550
{
	// Methods

	// RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
	internal static Type MakeGenericType(Type type, Type[] typeArguments) { }
}

// Namespace: System.IO
internal static class __Error // TypeDefIndex: 551
{
	// Methods

	// RVA: 0xEA1 Offset: 0xEA1 VA: 0xEA1
	internal static void EndOfFile() { }

	// RVA: 0xEA2 Offset: 0xEA2 VA: 0xEA2
	internal static void FileNotOpen() { }

	// RVA: 0xEA3 Offset: 0xEA3 VA: 0xEA3
	internal static void StreamIsClosed() { }

	// RVA: 0xEA4 Offset: 0xEA4 VA: 0xEA4
	internal static void MemoryStreamNotExpandable() { }

	// RVA: 0xEA5 Offset: 0xEA5 VA: 0xEA5
	internal static void ReaderClosed() { }

	// RVA: 0xEA6 Offset: 0xEA6 VA: 0xEA6
	internal static void ReadNotSupported() { }

	// RVA: 0xEA7 Offset: 0xEA7 VA: 0xEA7
	internal static void WrongAsyncResult() { }

	// RVA: 0xEA8 Offset: 0xEA8 VA: 0xEA8
	internal static void EndReadCalledTwice() { }

	// RVA: 0xEA9 Offset: 0xEA9 VA: 0xEA9
	internal static void EndWriteCalledTwice() { }

	// RVA: 0x26F Offset: 0x26F VA: 0x26F
	internal static string GetDisplayablePath(string path, bool isInvalidPath) { }

	// RVA: 0x1FF Offset: 0x1FF VA: 0x1FF
	internal static void WinIOError(int errorCode, string maybeFullPath) { }

	// RVA: 0xEAA Offset: 0xEAA VA: 0xEAA
	internal static void WriteNotSupported() { }

	// RVA: 0xEAB Offset: 0xEAB VA: 0xEAB
	internal static void WriterClosed() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3A8 Offset: 0x3A8 VA: 0x3A8
public class BinaryReader : IDisposable // TypeDefIndex: 552
{
	// Fields
	private Stream m_stream; // 0x8
	private byte[] m_buffer; // 0xC
	private Decoder m_decoder; // 0x10
	private byte[] m_charBytes; // 0x14
	private char[] m_singleChar; // 0x18
	private char[] m_charBuffer; // 0x1C
	private int m_maxCharsSize; // 0x20
	private bool m_2BytesPerChar; // 0x24
	private bool m_isMemoryStream; // 0x25
	private bool m_leaveOpen; // 0x26

	// Properties
	public virtual Stream BaseStream { get; }

	// Methods

	// RVA: 0x19D Offset: 0x19D VA: 0x19D
	public void .ctor(Stream input) { }

	// RVA: 0x147 Offset: 0x147 VA: 0x147
	public void .ctor(Stream input, Encoding encoding) { }

	// RVA: 0x71 Offset: 0x71 VA: 0x71
	public void .ctor(Stream input, Encoding encoding, bool leaveOpen) { }

	// RVA: 0x3D0 Offset: 0x3D0 VA: 0x3D0 Slot: 5
	public virtual Stream get_BaseStream() { }

	// RVA: 0x364 Offset: 0x364 VA: 0x364 Slot: 6
	public virtual void Close() { }

	// RVA: 0x19E Offset: 0x19E VA: 0x19E Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x365 Offset: 0x365 VA: 0x365 Slot: 4
	public void Dispose() { }

	// RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1 Slot: 8
	public virtual int Read() { }

	// RVA: 0x3D2 Offset: 0x3D2 VA: 0x3D2 Slot: 9
	public virtual bool ReadBoolean() { }

	// RVA: 0x3D3 Offset: 0x3D3 VA: 0x3D3 Slot: 10
	public virtual byte ReadByte() { }

	[CLSCompliantAttribute] // RVA: 0x6F8 Offset: 0x6F8 VA: 0x6F8
	// RVA: 0x3D4 Offset: 0x3D4 VA: 0x3D4 Slot: 11
	public virtual sbyte ReadSByte() { }

	// RVA: 0x3D5 Offset: 0x3D5 VA: 0x3D5 Slot: 12
	public virtual char ReadChar() { }

	// RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6 Slot: 13
	public virtual short ReadInt16() { }

	[CLSCompliantAttribute] // RVA: 0x6F9 Offset: 0x6F9 VA: 0x6F9
	// RVA: 0x3D7 Offset: 0x3D7 VA: 0x3D7 Slot: 14
	public virtual ushort ReadUInt16() { }

	// RVA: 0x3D8 Offset: 0x3D8 VA: 0x3D8 Slot: 15
	public virtual int ReadInt32() { }

	[CLSCompliantAttribute] // RVA: 0x6FA Offset: 0x6FA VA: 0x6FA
	// RVA: 0x3D9 Offset: 0x3D9 VA: 0x3D9 Slot: 16
	public virtual uint ReadUInt32() { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43 Slot: 17
	public virtual long ReadInt64() { }

	[CLSCompliantAttribute] // RVA: 0x6FB Offset: 0x6FB VA: 0x6FB
	// RVA: 0x44 Offset: 0x44 VA: 0x44 Slot: 18
	public virtual ulong ReadUInt64() { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11 Slot: 19
	public virtual float ReadSingle() { }

	// RVA: 0xC Offset: 0xC VA: 0xC Slot: 20
	public virtual double ReadDouble() { }

	// RVA: 0x19F Offset: 0x19F VA: 0x19F Slot: 21
	public virtual Decimal ReadDecimal() { }

	// RVA: 0x3DA Offset: 0x3DA VA: 0x3DA Slot: 22
	public virtual string ReadString() { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78
	private int InternalReadChars(char[] buffer, int index, int count) { }

	// RVA: 0x3DB Offset: 0x3DB VA: 0x3DB
	private int InternalReadOneChar() { }

	// RVA: 0x246 Offset: 0x246 VA: 0x246 Slot: 23
	public virtual char[] ReadChars(int count) { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79 Slot: 24
	public virtual int Read(byte[] buffer, int index, int count) { }

	// RVA: 0x247 Offset: 0x247 VA: 0x247 Slot: 25
	public virtual byte[] ReadBytes(int count) { }

	// RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0 Slot: 26
	protected virtual void FillBuffer(int numBytes) { }

	// RVA: 0x3DC Offset: 0x3DC VA: 0x3DC
	protected internal int Read7BitEncodedInt() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3A9 Offset: 0x3A9 VA: 0x3A9
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 553
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x8
	private byte[] _buffer; // 0xC
	private Encoding _encoding; // 0x10
	private Encoder _encoder; // 0x14
	[OptionalFieldAttribute] // RVA: 0x566 Offset: 0x566 VA: 0x566
	private bool _leaveOpen; // 0x18
	private byte[] _largeByteBuffer; // 0x1C
	private int _maxChars; // 0x20

	// Methods

	// RVA: 0x366 Offset: 0x366 VA: 0x366
	protected void .ctor() { }

	// RVA: 0x148 Offset: 0x148 VA: 0x148
	public void .ctor(Stream output, Encoding encoding) { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72
	public void .ctor(Stream output, Encoding encoding, bool leaveOpen) { }

	// RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x367 Offset: 0x367 VA: 0x367 Slot: 4
	public void Dispose() { }

	// RVA: 0x368 Offset: 0x368 VA: 0x368 Slot: 6
	public virtual void Flush() { }

	// RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2 Slot: 7
	public virtual void Write(bool value) { }

	// RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3 Slot: 8
	public virtual void Write(byte value) { }

	// RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4 Slot: 9
	public virtual void Write(byte[] buffer) { }

	// RVA: 0x73 Offset: 0x73 VA: 0x73 Slot: 10
	public virtual void Write(byte[] buffer, int index, int count) { }

	// RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5 Slot: 11
	public virtual void Write(char ch) { }

	// RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6 Slot: 12
	public virtual void Write(char[] chars) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5 Slot: 13
	public virtual void Write(double value) { }

	// RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7 Slot: 14
	public virtual void Write(short value) { }

	[CLSCompliantAttribute] // RVA: 0x6FC Offset: 0x6FC VA: 0x6FC
	// RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8 Slot: 15
	public virtual void Write(ushort value) { }

	// RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9 Slot: 16
	public virtual void Write(int value) { }

	[CLSCompliantAttribute] // RVA: 0x6FD Offset: 0x6FD VA: 0x6FD
	// RVA: 0x1AA Offset: 0x1AA VA: 0x1AA Slot: 17
	public virtual void Write(uint value) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10 Slot: 18
	public virtual void Write(long value) { }

	[CLSCompliantAttribute] // RVA: 0x6FE Offset: 0x6FE VA: 0x6FE
	// RVA: 0x11 Offset: 0x11 VA: 0x11 Slot: 19
	public virtual void Write(ulong value) { }

	// RVA: 0xA Offset: 0xA VA: 0xA Slot: 20
	public virtual void Write(float value) { }

	// RVA: 0x1AB Offset: 0x1AB VA: 0x1AB Slot: 21
	public virtual void Write(string value) { }

	// RVA: 0x1AC Offset: 0x1AC VA: 0x1AC
	protected void Write7BitEncodedInt(int value) { }

	// RVA: 0xE92 Offset: 0xE92 VA: 0xE92
	private static void .cctor() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3AA Offset: 0x3AA VA: 0x3AA
public static class Directory // TypeDefIndex: 554
{
	// Methods

	// RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
	public static string[] GetFiles(string path) { }

	// RVA: 0x88F Offset: 0x88F VA: 0x88F
	private static string[] InternalGetFiles(string path, string searchPattern, SearchOption searchOption) { }

	// RVA: 0x3E2 Offset: 0x3E2 VA: 0x3E2
	public static string[] GetDirectories(string path) { }

	// RVA: 0x248 Offset: 0x248 VA: 0x248
	public static string[] GetDirectories(string path, string searchPattern) { }

	// RVA: 0x890 Offset: 0x890 VA: 0x890
	private static string[] InternalGetDirectories(string path, string searchPattern, SearchOption searchOption) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	internal static string[] InternalGetFileDirectoryNames(string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost) { }

	// RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
	public static DirectoryInfo CreateDirectory(string path) { }

	// RVA: 0x3E4 Offset: 0x3E4 VA: 0x3E4
	private static DirectoryInfo CreateDirectoriesInternal(string path) { }

	// RVA: 0x369 Offset: 0x369 VA: 0x369
	public static void Delete(string path) { }

	// RVA: 0x36A Offset: 0x36A VA: 0x36A
	private static void RecursiveDelete(string path) { }

	// RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2
	public static void Delete(string path, bool recursive) { }

	// RVA: 0x3E5 Offset: 0x3E5 VA: 0x3E5
	public static bool Exists(string path) { }

	// RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3
	public static string GetCurrentDirectory() { }

	// RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4
	internal static string InsecureGetCurrentDirectory() { }

	// RVA: 0x249 Offset: 0x249 VA: 0x249
	internal static string GetDemandDir(string fullPath, bool thisDirOnly) { }
}

// Namespace: 
internal sealed class Directory.SearchData // TypeDefIndex: 555
{
	// Fields
	public readonly string fullPath; // 0x8
	public readonly string userPath; // 0xC
	public readonly SearchOption searchOption; // 0x10

	// Methods

	// RVA: 0x76 Offset: 0x76 VA: 0x76
	public void .ctor(string fullPath, string userPath, SearchOption searchOption) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3AB Offset: 0x3AB VA: 0x3AB
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 556
{
	// Methods

	// RVA: 0x36D Offset: 0x36D VA: 0x36D
	public void .ctor() { }

	// RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5
	public void .ctor(string message) { }

	// RVA: 0x14D Offset: 0x14D VA: 0x14D
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3AC Offset: 0x3AC VA: 0x3AC
[Serializable]
public class DriveNotFoundException : IOException // TypeDefIndex: 557
{
	// Methods

	// RVA: 0x36E Offset: 0x36E VA: 0x36E
	public void .ctor() { }

	// RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	public void .ctor(string message) { }

	// RVA: 0x14E Offset: 0x14E VA: 0x14E
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3AD Offset: 0x3AD VA: 0x3AD
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 558
{
	// Methods

	// RVA: 0x36F Offset: 0x36F VA: 0x36F
	public void .ctor() { }

	// RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	public void .ctor(string message) { }

	// RVA: 0x14F Offset: 0x14F VA: 0x14F
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3AE Offset: 0x3AE VA: 0x3AE
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 559
{
	// Fields
	private string _fileName; // 0x48
	private string _fusionLog; // 0x4C

	// Properties
	public override string Message { get; }
	public string FusionLog { get; }

	// Methods

	// RVA: 0x371 Offset: 0x371 VA: 0x371
	public void .ctor() { }

	// RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8
	public void .ctor(string message) { }

	// RVA: 0x3EE Offset: 0x3EE VA: 0x3EE Slot: 5
	public override string get_Message() { }

	// RVA: 0x372 Offset: 0x372 VA: 0x372
	private void SetMessageField() { }

	// RVA: 0x3EF Offset: 0x3EF VA: 0x3EF Slot: 3
	public override string ToString() { }

	// RVA: 0x150 Offset: 0x150 VA: 0x150
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3F0 Offset: 0x3F0 VA: 0x3F0
	public string get_FusionLog() { }

	// RVA: 0x151 Offset: 0x151 VA: 0x151 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x24C Offset: 0x24C VA: 0x24C
	internal static string FormatFileLoadExceptionMessage(string fileName, int hResult) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3AF Offset: 0x3AF VA: 0x3AF
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 560
{
	// Fields
	private string _fileName; // 0x48
	private string _fusionLog; // 0x4C

	// Properties
	public override string Message { get; }
	public string FusionLog { get; }

	// Methods

	// RVA: 0x373 Offset: 0x373 VA: 0x373
	public void .ctor() { }

	// RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9
	public void .ctor(string message) { }

	// RVA: 0x152 Offset: 0x152 VA: 0x152
	public void .ctor(string message, string fileName) { }

	// RVA: 0x3F1 Offset: 0x3F1 VA: 0x3F1 Slot: 5
	public override string get_Message() { }

	// RVA: 0x374 Offset: 0x374 VA: 0x374
	private void SetMessageField() { }

	// RVA: 0x3F2 Offset: 0x3F2 VA: 0x3F2 Slot: 3
	public override string ToString() { }

	// RVA: 0x153 Offset: 0x153 VA: 0x153
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3F3 Offset: 0x3F3 VA: 0x3F3
	public string get_FusionLog() { }

	// RVA: 0x154 Offset: 0x154 VA: 0x154 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
internal static class FileSystemEnumerableFactory // TypeDefIndex: 561
{
	// Methods

	// RVA: 0xA Offset: 0xA VA: 0xA
	internal static IEnumerable<string> CreateFileNameIterator(string path, string originalUserPath, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost) { }
}

// Namespace: System.IO
internal abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerable, IEnumerator<TSource>, IDisposable, IEnumerator // TypeDefIndex: 562
{
	// Fields
	private int threadId; // 0xFFFFFFFF
	internal int state; // 0xFFFFFFFF
	internal TSource current; // 0xFFFFFFFF

	// Properties
	public TSource Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5
	|-Iterator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public TSource get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD1E Offset: 0xD1E VA: 0xD1E
	|-Iterator<object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 10
	protected abstract Iterator<TSource> Clone() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Iterator<object>.Clone
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6
	|-Iterator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 11
	protected virtual void Dispose(bool disposing) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7ED Offset: 0x7ED VA: 0x7ED
	|-Iterator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public IEnumerator<TSource> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD20 Offset: 0xD20 VA: 0xD20
	|-Iterator<object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Iterator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD1F Offset: 0xD1F VA: 0xD1F
	|-Iterator<object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD21 Offset: 0xD21 VA: 0xD21
	|-Iterator<object>.System.Collections.IEnumerable.GetEnumerator
	*/
}

// Namespace: System.IO
internal class FileSystemEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 563
{
	// Fields
	private SearchResultHandler<TSource> _resultHandler; // 0xFFFFFFFF
	private List<Directory.SearchData> searchStack; // 0xFFFFFFFF
	private Directory.SearchData searchData; // 0xFFFFFFFF
	private string searchCriteria; // 0xFFFFFFFF
	private SafeFindHandle _hnd; // 0xFFFFFFFF
	private bool needsParentPathDiscoveryDemand; // 0xFFFFFFFF
	private bool empty; // 0xFFFFFFFF
	private string userPath; // 0xFFFFFFFF
	private SearchOption searchOption; // 0xFFFFFFFF
	private string fullPath; // 0xFFFFFFFF
	private string normalizedSearchPath; // 0xFFFFFFFF
	private bool _checkHost; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(string path, string originalUserPath, string searchPattern, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2A Offset: 0x2A VA: 0x2A
	|-FileSystemEnumerableIterator<object>..ctor
	|-FileSystemEnumerableIterator<string>..ctor
	*/

	// RVA: -1 Offset: -1
	private void CommonInit() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7
	|-FileSystemEnumerableIterator<object>.CommonInit
	*/

	// RVA: -1 Offset: -1
	private void .ctor(string fullPath, string normalizedSearchPath, string searchCriteria, string userPath, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x18 Offset: 0x18 VA: 0x18
	|-FileSystemEnumerableIterator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 10
	protected override Iterator<TSource> Clone() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD22 Offset: 0xD22 VA: 0xD22
	|-FileSystemEnumerableIterator<object>.Clone
	*/

	// RVA: -1 Offset: -1 Slot: 11
	protected override void Dispose(bool disposing) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7EE Offset: 0x7EE VA: 0x7EE
	|-FileSystemEnumerableIterator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public override bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD23 Offset: 0xD23 VA: 0xD23
	|-FileSystemEnumerableIterator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1
	private SearchResult CreateSearchResult(Directory.SearchData localSearchData, Win32Native.WIN32_FIND_DATA findData) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA46 Offset: 0xA46 VA: 0xA46
	|-FileSystemEnumerableIterator<object>.CreateSearchResult
	*/

	// RVA: -1 Offset: -1
	private void HandleError(int hr, string path) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3F0 Offset: 0x3F0 VA: 0x3F0
	|-FileSystemEnumerableIterator<object>.HandleError
	*/

	// RVA: -1 Offset: -1
	private void AddSearchableDirsToStack(Directory.SearchData localSearchData) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7EF Offset: 0x7EF VA: 0x7EF
	|-FileSystemEnumerableIterator<object>.AddSearchableDirsToStack
	*/

	// RVA: -1 Offset: -1
	internal void DoDemand(string fullPathToDemand) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0
	|-FileSystemEnumerableIterator<object>.DoDemand
	*/

	// RVA: -1 Offset: -1
	private static string NormalizeSearchPattern(string searchPattern) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD24 Offset: 0xD24 VA: 0xD24
	|-FileSystemEnumerableIterator<object>.NormalizeSearchPattern
	*/

	// RVA: -1 Offset: -1
	private static string GetNormalizedSearchCriteria(string fullSearchString, string fullPathMod) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x64C Offset: 0x64C VA: 0x64C
	|-FileSystemEnumerableIterator<object>.GetNormalizedSearchCriteria
	*/

	// RVA: -1 Offset: -1
	private static string GetFullSearchString(string fullPath, string searchPattern) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x64D Offset: 0x64D VA: 0x64D
	|-FileSystemEnumerableIterator<object>.GetFullSearchString
	*/
}

// Namespace: System.IO
internal abstract class SearchResultHandler<TSource> // TypeDefIndex: 564
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	internal abstract bool IsResultIncluded(SearchResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-SearchResultHandler<object>.IsResultIncluded
	*/

	// RVA: -1 Offset: -1 Slot: 5
	internal abstract TSource CreateObject(SearchResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-SearchResultHandler<object>.CreateObject
	*/

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8
	|-SearchResultHandler<object>..ctor
	|-SearchResultHandler<string>..ctor
	*/
}

// Namespace: System.IO
internal class StringResultHandler : SearchResultHandler<string> // TypeDefIndex: 565
{
	// Fields
	private bool _includeFiles; // 0x8
	private bool _includeDirs; // 0x9

	// Methods

	// RVA: 0x168 Offset: 0x168 VA: 0x168
	internal void .ctor(bool includeFiles, bool includeDirs) { }

	// RVA: 0x26A Offset: 0x26A VA: 0x26A Slot: 4
	internal override bool IsResultIncluded(SearchResult result) { }

	// RVA: 0x26B Offset: 0x26B VA: 0x26B Slot: 5
	internal override string CreateObject(SearchResult result) { }
}

// Namespace: System.IO
internal sealed class SearchResult // TypeDefIndex: 566
{
	// Fields
	private string fullPath; // 0x8
	private string userPath; // 0xC
	private Win32Native.WIN32_FIND_DATA findData; // 0x10

	// Properties
	internal string UserPath { get; }
	internal Win32Native.WIN32_FIND_DATA FindData { get; }

	// Methods

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	internal void .ctor(string fullPath, string userPath, Win32Native.WIN32_FIND_DATA findData) { }

	// RVA: 0x418 Offset: 0x418 VA: 0x418
	internal string get_UserPath() { }

	// RVA: 0x419 Offset: 0x419 VA: 0x419
	internal Win32Native.WIN32_FIND_DATA get_FindData() { }
}

// Namespace: System.IO
internal static class FileSystemEnumerableHelpers // TypeDefIndex: 567
{
	// Methods

	// RVA: 0x3F9 Offset: 0x3F9 VA: 0x3F9
	internal static bool IsDir(Win32Native.WIN32_FIND_DATA data) { }

	// RVA: 0x3FA Offset: 0x3FA VA: 0x3FA
	internal static bool IsFile(Win32Native.WIN32_FIND_DATA data) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B0 Offset: 0x3B0 VA: 0x3B0
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 568
{
	// Fields
	internal MonoIOStat _data; // 0x10
	internal int _dataInitialised; // 0x38
	protected string FullPath; // 0x3C
	protected string OriginalPath; // 0x40
	private string _displayPath; // 0x44

	// Properties
	public virtual string FullName { get; }
	public abstract string Name { get; }
	public abstract bool Exists { get; }

	// Methods

	// RVA: 0x37C Offset: 0x37C VA: 0x37C
	protected void .ctor() { }

	// RVA: 0x159 Offset: 0x159 VA: 0x159
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3FB Offset: 0x3FB VA: 0x3FB Slot: 7
	public virtual string get_FullName() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string get_Name() { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool get_Exists() { }

	// RVA: 0x37D Offset: 0x37D VA: 0x37D
	public void Refresh() { }

	[ComVisibleAttribute] // RVA: 0x6FF Offset: 0x6FF VA: 0x6FF
	// RVA: 0x15A Offset: 0x15A VA: 0x15A Slot: 10
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B1 Offset: 0x3B1 VA: 0x3B1
[Serializable]
public class IOException : SystemException // TypeDefIndex: 569
{
	// Fields
	private string _maybeFullPath; // 0x44

	// Methods

	// RVA: 0x37E Offset: 0x37E VA: 0x37E
	public void .ctor() { }

	// RVA: 0x1BE Offset: 0x1BE VA: 0x1BE
	public void .ctor(string message) { }

	// RVA: 0x15B Offset: 0x15B VA: 0x15B
	public void .ctor(string message, int hresult) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	internal void .ctor(string message, int hresult, string maybeFullPath) { }

	// RVA: 0x15C Offset: 0x15C VA: 0x15C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x15D Offset: 0x15D VA: 0x15D
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B2 Offset: 0x3B2 VA: 0x3B2
[Serializable]
public class MemoryStream : Stream // TypeDefIndex: 570
{
	// Fields
	private byte[] _buffer; // 0x14
	private int _origin; // 0x18
	private int _position; // 0x1C
	private int _length; // 0x20
	private int _capacity; // 0x24
	private bool _expandable; // 0x28
	private bool _writable; // 0x29
	private bool _exposable; // 0x2A
	private bool _isOpen; // 0x2B
	private Task<int> _lastReadTask; // 0x2C

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public virtual int Capacity { get; set; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x37F Offset: 0x37F VA: 0x37F
	public void .ctor() { }

	// RVA: 0x1BF Offset: 0x1BF VA: 0x1BF
	public void .ctor(int capacity) { }

	// RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0
	public void .ctor(byte[] buffer) { }

	// RVA: 0x15E Offset: 0x15E VA: 0x15E
	public void .ctor(byte[] buffer, bool writable) { }

	// RVA: 0x3FC Offset: 0x3FC VA: 0x3FC Slot: 7
	public override bool get_CanRead() { }

	// RVA: 0x3FD Offset: 0x3FD VA: 0x3FD Slot: 8
	public override bool get_CanSeek() { }

	// RVA: 0x3FE Offset: 0x3FE VA: 0x3FE Slot: 9
	public override bool get_CanWrite() { }

	// RVA: 0x380 Offset: 0x380 VA: 0x380
	private void EnsureWriteable() { }

	// RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x250 Offset: 0x250 VA: 0x250
	private bool EnsureCapacity(int value) { }

	// RVA: 0x381 Offset: 0x381 VA: 0x381 Slot: 15
	public override void Flush() { }

	// RVA: 0x3FF Offset: 0x3FF VA: 0x3FF Slot: 25
	public virtual byte[] GetBuffer() { }

	// RVA: 0x400 Offset: 0x400 VA: 0x400
	internal byte[] InternalGetBuffer() { }

	// RVA: 0x401 Offset: 0x401 VA: 0x401
	internal int InternalGetPosition() { }

	// RVA: 0x402 Offset: 0x402 VA: 0x402
	internal int InternalReadInt32() { }

	// RVA: 0x251 Offset: 0x251 VA: 0x251
	internal int InternalEmulateRead(int count) { }

	// RVA: 0x403 Offset: 0x403 VA: 0x403 Slot: 26
	public virtual int get_Capacity() { }

	// RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2 Slot: 27
	public virtual void set_Capacity(int value) { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47 Slot: 10
	public override long get_Length() { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48 Slot: 11
	public override long get_Position() { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13 Slot: 12
	public override void set_Position(long value) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81 Slot: 21
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x404 Offset: 0x404 VA: 0x404 Slot: 22
	public override int ReadByte() { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 20
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x405 Offset: 0x405 VA: 0x405 Slot: 28
	public virtual byte[] ToArray() { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3 Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B3 Offset: 0x3B3 VA: 0x3B3
[Serializable]
public class PathTooLongException : IOException // TypeDefIndex: 571
{
	// Methods

	// RVA: 0x384 Offset: 0x384 VA: 0x384
	public void .ctor() { }

	// RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6
	public void .ctor(string message) { }

	// RVA: 0x15F Offset: 0x15F VA: 0x15F
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
internal sealed class PinnedBufferMemoryStream : UnmanagedMemoryStream // TypeDefIndex: 572
{
	// Fields
	private byte[] _array; // 0x48
	private GCHandle _pinningHandle; // 0x4C

	// Methods

	// RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7
	internal void .ctor(byte[] array) { }

	// RVA: 0x385 Offset: 0x385 VA: 0x385 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8 Slot: 14
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B4 Offset: 0x3B4 VA: 0x3B4
[Serializable]
public abstract class Stream : MarshalByRefObject, IDisposable // TypeDefIndex: 573
{
	// Fields
	public static readonly Stream Null; // 0x0
	private Stream.ReadWriteTask _activeReadWriteTask; // 0xC
	private SemaphoreSlim _asyncActiveSemaphore; // 0x10

	// Properties
	public abstract bool CanRead { get; }
	public abstract bool CanSeek { get; }
	public abstract bool CanWrite { get; }
	public abstract long Length { get; }
	public abstract long Position { get; set; }

	// Methods

	// RVA: 0x41A Offset: 0x41A VA: 0x41A
	internal SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_CanRead() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_CanSeek() { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool get_CanWrite() { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_Length() { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_Position() { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void set_Position(long value) { }

	// RVA: 0x386 Offset: 0x386 VA: 0x386 Slot: 13
	public virtual void Close() { }

	// RVA: 0x387 Offset: 0x387 VA: 0x387 Slot: 6
	public void Dispose() { }

	// RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9 Slot: 14
	protected virtual void Dispose(bool disposing) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void Flush() { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C Slot: 16
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	internal IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously) { }

	// RVA: 0x266 Offset: 0x266 VA: 0x266 Slot: 17
	public virtual int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D Slot: 18
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	internal IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously) { }

	// RVA: 0x160 Offset: 0x160 VA: 0x160
	private void RunReadWriteTaskWhenReady(Task asyncWaiter, Stream.ReadWriteTask readWriteTask) { }

	// RVA: 0x1CA Offset: 0x1CA VA: 0x1CA
	private void RunReadWriteTask(Stream.ReadWriteTask readWriteTask) { }

	// RVA: 0x1CB Offset: 0x1CB VA: 0x1CB Slot: 19
	public virtual void EndWrite(IAsyncResult asyncResult) { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract long Seek(long offset, SeekOrigin origin) { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x41B Offset: 0x41B VA: 0x41B Slot: 22
	public virtual int ReadByte() { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1CC Offset: 0x1CC VA: 0x1CC Slot: 24
	public virtual void WriteByte(byte value) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	internal IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x41C Offset: 0x41C VA: 0x41C
	internal static int BlockingEndRead(IAsyncResult asyncResult) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	internal IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x388 Offset: 0x388 VA: 0x388
	internal static void BlockingEndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x389 Offset: 0x389 VA: 0x389
	protected void .ctor() { }

	// RVA: 0xE97 Offset: 0xE97 VA: 0xE97
	private static void .cctor() { }
}

// Namespace: 
private sealed class Stream.ReadWriteTask : Task<int>, ITaskCompletionAction // TypeDefIndex: 574
{
	// Fields
	internal readonly bool _isRead; // 0x2C
	internal Stream _stream; // 0x30
	internal byte[] _buffer; // 0x34
	internal int _offset; // 0x38
	internal int _count; // 0x3C
	private AsyncCallback _callback; // 0x40
	private ExecutionContext _context; // 0x44
	private static ContextCallback s_invokeAsyncCallback; // 0x0

	// Methods

	// RVA: 0x38D Offset: 0x38D VA: 0x38D
	internal void ClearBeginState() { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public void .ctor(bool isRead, Func<object, int> function, object state, Stream stream, byte[] buffer, int offset, int count, AsyncCallback callback) { }

	// RVA: 0x38E Offset: 0x38E VA: 0x38E
	private static void InvokeAsyncCallback(object completedTask) { }

	// RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0 Slot: 18
	private void System.Threading.Tasks.ITaskCompletionAction.Invoke(Task completingTask) { }
}

// Namespace: 
[Serializable]
private sealed class Stream.NullStream : Stream // TypeDefIndex: 575
{
	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x38B Offset: 0x38B VA: 0x38B
	internal void .ctor() { }

	// RVA: 0x41E Offset: 0x41E VA: 0x41E Slot: 7
	public override bool get_CanRead() { }

	// RVA: 0x41F Offset: 0x41F VA: 0x41F Slot: 9
	public override bool get_CanWrite() { }

	// RVA: 0x420 Offset: 0x420 VA: 0x420 Slot: 8
	public override bool get_CanSeek() { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49 Slot: 10
	public override long get_Length() { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A Slot: 11
	public override long get_Position() { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14 Slot: 12
	public override void set_Position(long value) { }

	// RVA: 0x1CD Offset: 0x1CD VA: 0x1CD Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x38C Offset: 0x38C VA: 0x38C Slot: 15
	public override void Flush() { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30 Slot: 16
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x269 Offset: 0x269 VA: 0x269 Slot: 17
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31 Slot: 18
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x1CE Offset: 0x1CE VA: 0x1CE Slot: 19
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x86 Offset: 0x86 VA: 0x86 Slot: 21
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x421 Offset: 0x421 VA: 0x421 Slot: 22
	public override int ReadByte() { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1CF Offset: 0x1CF VA: 0x1CF Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 20
	public override long Seek(long offset, SeekOrigin origin) { }
}

// Namespace: 
internal sealed class Stream.SynchronousAsyncResult : IAsyncResult // TypeDefIndex: 576
{
	// Fields
	private readonly object _stateObject; // 0x8
	private readonly bool _isWrite; // 0xC
	private ManualResetEvent _waitHandle; // 0x10
	private ExceptionDispatchInfo _exceptionInfo; // 0x14
	private bool _endXxxCalled; // 0x18
	private int _bytesRead; // 0x1C

	// Properties
	public WaitHandle AsyncWaitHandle { get; }

	// Methods

	// RVA: 0x162 Offset: 0x162 VA: 0x162
	internal void .ctor(int bytesRead, object asyncStateObject) { }

	// RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1
	internal void .ctor(object asyncStateObject) { }

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	internal void .ctor(Exception ex, object asyncStateObject, bool isWrite) { }

	// RVA: 0x422 Offset: 0x422 VA: 0x422 Slot: 4
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x38F Offset: 0x38F VA: 0x38F
	internal void ThrowIfError() { }

	// RVA: 0x423 Offset: 0x423 VA: 0x423
	internal static int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x390 Offset: 0x390 VA: 0x390
	internal static void EndWrite(IAsyncResult asyncResult) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x3B5 Offset: 0x3B5 VA: 0x3B5
[Serializable]
private sealed class Stream.SynchronousAsyncResult.<>c // TypeDefIndex: 577
{
	// Fields
	public static readonly Stream.SynchronousAsyncResult.<>c <>9; // 0x0
	public static Func<ManualResetEvent> <>9__12_0; // 0x4

	// Methods

	// RVA: 0xE99 Offset: 0xE99 VA: 0xE99
	private static void .cctor() { }

	// RVA: 0x391 Offset: 0x391 VA: 0x391
	public void .ctor() { }

	// RVA: 0x424 Offset: 0x424 VA: 0x424
	internal ManualResetEvent <get_AsyncWaitHandle>b__12_0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x3B6 Offset: 0x3B6 VA: 0x3B6
[Serializable]
private sealed class Stream.<>c // TypeDefIndex: 578
{
	// Fields
	public static readonly Stream.<>c <>9; // 0x0
	public static Func<SemaphoreSlim> <>9__4_0; // 0x4
	public static Func<object, int> <>9__39_0; // 0x8
	public static Func<object, int> <>9__46_0; // 0xC
	public static Action<Task, object> <>9__47_0; // 0x10

	// Methods

	// RVA: 0xE98 Offset: 0xE98 VA: 0xE98
	private static void .cctor() { }

	// RVA: 0x38A Offset: 0x38A VA: 0x38A
	public void .ctor() { }

	// RVA: 0x41D Offset: 0x41D VA: 0x41D
	internal SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0() { }

	// RVA: 0x267 Offset: 0x267 VA: 0x267
	internal int <BeginReadInternal>b__39_0(object <p0>) { }

	// RVA: 0x268 Offset: 0x268 VA: 0x268
	internal int <BeginWriteInternal>b__46_0(object <p0>) { }

	// RVA: 0x161 Offset: 0x161 VA: 0x161
	internal void <RunReadWriteTaskWhenReady>b__47_0(Task t, object state) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B7 Offset: 0x3B7 VA: 0x3B7
[Serializable]
public class StreamReader : TextReader // TypeDefIndex: 579
{
	// Fields
	public static readonly StreamReader Null; // 0x0
	private Stream stream; // 0xC
	private Encoding encoding; // 0x10
	private Decoder decoder; // 0x14
	private byte[] byteBuffer; // 0x18
	private char[] charBuffer; // 0x1C
	private byte[] _preamble; // 0x20
	private int charPos; // 0x24
	private int charLen; // 0x28
	private int byteLen; // 0x2C
	private int bytePos; // 0x30
	private int _maxCharsPerBuffer; // 0x34
	private bool _detectEncoding; // 0x38
	private bool _checkPreamble; // 0x39
	private bool _isBlocked; // 0x3A
	private bool _closable; // 0x3B
	private Task _asyncReadTask; // 0x3C

	// Properties
	internal static int DefaultBufferSize { get; }
	internal bool LeaveOpen { get; }

	// Methods

	// RVA: 0x1DF Offset: 0x1DF VA: 0x1DF
	internal static int get_DefaultBufferSize() { }

	// RVA: 0x392 Offset: 0x392 VA: 0x392
	private void CheckAsyncTaskInProgress() { }

	// RVA: 0x393 Offset: 0x393 VA: 0x393
	internal void .ctor() { }

	// RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2
	public void .ctor(Stream stream) { }

	// RVA: 0x163 Offset: 0x163 VA: 0x163
	public void .ctor(Stream stream, bool detectEncodingFromByteOrderMarks) { }

	// RVA: 0x164 Offset: 0x164 VA: 0x164
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public void .ctor(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }

	// RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3
	public void .ctor(string path) { }

	// RVA: 0x165 Offset: 0x165 VA: 0x165
	public void .ctor(string path, bool detectEncodingFromByteOrderMarks) { }

	// RVA: 0x166 Offset: 0x166 VA: 0x166
	public void .ctor(string path, Encoding encoding) { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C
	public void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	internal void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	private void Init(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }

	// RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4
	internal void Init(Stream stream) { }

	// RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x425 Offset: 0x425 VA: 0x425
	internal bool get_LeaveOpen() { }

	// RVA: 0x426 Offset: 0x426 VA: 0x426 Slot: 8
	public override int Peek() { }

	// RVA: 0x427 Offset: 0x427 VA: 0x427
	internal bool DataAvailable() { }

	// RVA: 0x428 Offset: 0x428 VA: 0x428 Slot: 9
	public override int Read() { }

	// RVA: 0x87 Offset: 0x87 VA: 0x87 Slot: 10
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x429 Offset: 0x429 VA: 0x429 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6
	private void CompressBuffer(int n) { }

	// RVA: 0x394 Offset: 0x394 VA: 0x394
	private void DetectEncoding() { }

	// RVA: 0x42A Offset: 0x42A VA: 0x42A
	private bool IsPreamble() { }

	// RVA: 0x42B Offset: 0x42B VA: 0x42B Slot: 13
	internal virtual int ReadBuffer() { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38
	private int ReadBuffer(char[] userBuffer, int userOffset, int desiredChars, out bool readToUserBuffer) { }

	// RVA: 0x42C Offset: 0x42C VA: 0x42C Slot: 12
	public override string ReadLine() { }

	// RVA: 0xE9A Offset: 0xE9A VA: 0xE9A
	private static void .cctor() { }
}

// Namespace: 
private class StreamReader.NullStreamReader : StreamReader // TypeDefIndex: 580
{
	// Methods

	// RVA: 0x395 Offset: 0x395 VA: 0x395
	internal void .ctor() { }

	// RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x42D Offset: 0x42D VA: 0x42D Slot: 8
	public override int Peek() { }

	// RVA: 0x42E Offset: 0x42E VA: 0x42E Slot: 9
	public override int Read() { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88 Slot: 10
	public override int Read(char[] buffer, int index, int count) { }

	// RVA: 0x42F Offset: 0x42F VA: 0x42F Slot: 12
	public override string ReadLine() { }

	// RVA: 0x430 Offset: 0x430 VA: 0x430 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x431 Offset: 0x431 VA: 0x431 Slot: 13
	internal override int ReadBuffer() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B8 Offset: 0x3B8 VA: 0x3B8
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 581
{
	// Fields
	public static readonly StreamWriter Null; // 0x0
	private Stream stream; // 0x14
	private Encoding encoding; // 0x18
	private Encoder encoder; // 0x1C
	private byte[] byteBuffer; // 0x20
	private char[] charBuffer; // 0x24
	private int charPos; // 0x28
	private int charLen; // 0x2C
	private bool autoFlush; // 0x30
	private bool haveWrittenPreamble; // 0x31
	private bool closable; // 0x32
	private Task _asyncWriteTask; // 0x34
	private static Encoding _UTF8NoBOM; // 0x4

	// Properties
	internal static Encoding UTF8NoBOM { get; }
	public virtual bool AutoFlush { set; }
	internal bool LeaveOpen { get; }

	// Methods

	// RVA: 0x396 Offset: 0x396 VA: 0x396
	private void CheckAsyncTaskInProgress() { }

	[FriendAccessAllowedAttribute] // RVA: 0x700 Offset: 0x700 VA: 0x700
	// RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0
	internal static Encoding get_UTF8NoBOM() { }

	// RVA: 0x397 Offset: 0x397 VA: 0x397
	internal void .ctor() { }

	// RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8
	public void .ctor(Stream stream) { }

	// RVA: 0x3D Offset: 0x3D VA: 0x3D
	public void .ctor(Stream stream, Encoding encoding, int bufferSize, bool leaveOpen) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80
	public void .ctor(string path, bool append, Encoding encoding) { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E
	public void .ctor(string path, bool append, Encoding encoding, int bufferSize) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	internal void .ctor(string path, bool append, Encoding encoding, int bufferSize, bool checkHost) { }

	// RVA: 0x3F Offset: 0x3F VA: 0x3F
	private void Init(Stream streamArg, Encoding encodingArg, int bufferSize, bool shouldLeaveOpen) { }

	// RVA: 0x895 Offset: 0x895 VA: 0x895
	private static Stream CreateFile(string path, bool append, bool checkHost) { }

	// RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9 Slot: 8
	protected override void Dispose(bool disposing) { }

	// RVA: 0x398 Offset: 0x398 VA: 0x398 Slot: 9
	public override void Flush() { }

	// RVA: 0x167 Offset: 0x167 VA: 0x167
	private void Flush(bool flushStream, bool flushEncoder) { }

	// RVA: 0x1DA Offset: 0x1DA VA: 0x1DA Slot: 20
	public virtual void set_AutoFlush(bool value) { }

	// RVA: 0x432 Offset: 0x432 VA: 0x432
	internal bool get_LeaveOpen() { }

	// RVA: 0x1DB Offset: 0x1DB VA: 0x1DB Slot: 10
	public override void Write(char value) { }

	// RVA: 0x1DC Offset: 0x1DC VA: 0x1DC Slot: 11
	public override void Write(char[] buffer) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x1DD Offset: 0x1DD VA: 0x1DD Slot: 13
	public override void Write(string value) { }

	// RVA: 0xE9B Offset: 0xE9B VA: 0xE9B
	private static void .cctor() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3B9 Offset: 0x3B9 VA: 0x3B9
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 582
{
	// Fields
	private string _s; // 0xC
	private int _pos; // 0x10
	private int _length; // 0x14

	// Methods

	// RVA: 0x1DE Offset: 0x1DE VA: 0x1DE
	public void .ctor(string s) { }

	// RVA: 0x1DF Offset: 0x1DF VA: 0x1DF Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x433 Offset: 0x433 VA: 0x433 Slot: 8
	public override int Peek() { }

	// RVA: 0x434 Offset: 0x434 VA: 0x434 Slot: 9
	public override int Read() { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89 Slot: 10
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x435 Offset: 0x435 VA: 0x435 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x436 Offset: 0x436 VA: 0x436 Slot: 12
	public override string ReadLine() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3BA Offset: 0x3BA VA: 0x3BA
[Serializable]
public abstract class TextReader : MarshalByRefObject, IDisposable // TypeDefIndex: 583
{
	// Fields
	private static Func<object, string> _ReadLineDelegate; // 0x0
	private static Func<object, int> _ReadDelegate; // 0x4
	public static readonly TextReader Null; // 0x8

	// Methods

	// RVA: 0x399 Offset: 0x399 VA: 0x399
	protected void .ctor() { }

	// RVA: 0x39A Offset: 0x39A VA: 0x39A Slot: 6
	public void Dispose() { }

	// RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0 Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x437 Offset: 0x437 VA: 0x437 Slot: 8
	public virtual int Peek() { }

	// RVA: 0x438 Offset: 0x438 VA: 0x438 Slot: 9
	public virtual int Read() { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 10
	public virtual int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x439 Offset: 0x439 VA: 0x439 Slot: 11
	public virtual string ReadToEnd() { }

	// RVA: 0x43A Offset: 0x43A VA: 0x43A Slot: 12
	public virtual string ReadLine() { }

	// RVA: 0x43B Offset: 0x43B VA: 0x43B
	public static TextReader Synchronized(TextReader reader) { }

	// RVA: 0xE9C Offset: 0xE9C VA: 0xE9C
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class TextReader.NullTextReader : TextReader // TypeDefIndex: 584
{
	// Methods

	// RVA: 0x39C Offset: 0x39C VA: 0x39C
	public void .ctor() { }

	// RVA: 0x8B Offset: 0x8B VA: 0x8B Slot: 10
	public override int Read(char[] buffer, int index, int count) { }

	// RVA: 0x43C Offset: 0x43C VA: 0x43C Slot: 12
	public override string ReadLine() { }
}

// Namespace: 
[Serializable]
internal sealed class TextReader.SyncTextReader : TextReader // TypeDefIndex: 585
{
	// Fields
	internal TextReader _in; // 0xC

	// Methods

	// RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1
	internal void .ctor(TextReader t) { }

	// RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x43D Offset: 0x43D VA: 0x43D Slot: 8
	public override int Peek() { }

	// RVA: 0x43E Offset: 0x43E VA: 0x43E Slot: 9
	public override int Read() { }

	// RVA: 0x8C Offset: 0x8C VA: 0x8C Slot: 10
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x43F Offset: 0x43F VA: 0x43F Slot: 12
	public override string ReadLine() { }

	// RVA: 0x440 Offset: 0x440 VA: 0x440 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x3BB Offset: 0x3BB VA: 0x3BB
[Serializable]
private sealed class TextReader.<>c // TypeDefIndex: 586
{
	// Fields
	public static readonly TextReader.<>c <>9; // 0xFFFFFFFF

	// Methods

	// RVA: 0xE9D Offset: 0xE9D VA: 0xE9D
	private static void .cctor() { }

	// RVA: 0x39B Offset: 0x39B VA: 0x39B
	public void .ctor() { }

	// RVA: 0x26C Offset: 0x26C VA: 0x26C
	internal string <.cctor>b__22_0(object state) { }

	// RVA: 0x26D Offset: 0x26D VA: 0x26D
	internal int <.cctor>b__22_1(object state) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3BC Offset: 0x3BC VA: 0x3BC
[Serializable]
public abstract class TextWriter : MarshalByRefObject, IDisposable // TypeDefIndex: 587
{
	// Fields
	public static readonly TextWriter Null; // 0x0
	private static Action<object> _WriteCharDelegate; // 0x4
	private static Action<object> _WriteStringDelegate; // 0x8
	private static Action<object> _WriteCharArrayRangeDelegate; // 0xC
	private static Action<object> _WriteLineCharDelegate; // 0x10
	private static Action<object> _WriteLineStringDelegate; // 0x14
	private static Action<object> _WriteLineCharArrayRangeDelegate; // 0x18
	private static Action<object> _FlushDelegate; // 0x1C
	protected char[] CoreNewLine; // 0xC
	private IFormatProvider InternalFormatProvider; // 0x10

	// Properties
	private static string InitialNewLine { get; }
	public virtual IFormatProvider FormatProvider { get; }

	// Methods

	// RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1
	private static string get_InitialNewLine() { }

	// RVA: 0x39D Offset: 0x39D VA: 0x39D
	protected void .ctor() { }

	// RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3
	protected void .ctor(IFormatProvider formatProvider) { }

	// RVA: 0x441 Offset: 0x441 VA: 0x441 Slot: 7
	public virtual IFormatProvider get_FormatProvider() { }

	// RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4 Slot: 8
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x39E Offset: 0x39E VA: 0x39E Slot: 6
	public void Dispose() { }

	// RVA: 0x39F Offset: 0x39F VA: 0x39F Slot: 9
	public virtual void Flush() { }

	// RVA: 0x442 Offset: 0x442 VA: 0x442
	public static TextWriter Synchronized(TextWriter writer) { }

	// RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5 Slot: 10
	public virtual void Write(char value) { }

	// RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6 Slot: 11
	public virtual void Write(char[] buffer) { }

	// RVA: 0x82 Offset: 0x82 VA: 0x82 Slot: 12
	public virtual void Write(char[] buffer, int index, int count) { }

	// RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7 Slot: 13
	public virtual void Write(string value) { }

	// RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0 Slot: 14
	public virtual void WriteLine() { }

	// RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8 Slot: 15
	public virtual void WriteLine(char value) { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83 Slot: 16
	public virtual void WriteLine(char[] buffer, int index, int count) { }

	// RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9 Slot: 17
	public virtual void WriteLine(string value) { }

	// RVA: 0x169 Offset: 0x169 VA: 0x169 Slot: 18
	public virtual void WriteLine(string format, object arg0) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84 Slot: 19
	public virtual void WriteLine(string format, object arg0, object arg1) { }

	// RVA: 0xE9E Offset: 0xE9E VA: 0xE9E
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class TextWriter.NullTextWriter : TextWriter // TypeDefIndex: 588
{
	// Methods

	// RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
	internal void .ctor() { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1 Slot: 13
	public override void Write(string value) { }

	// RVA: 0x3A3 Offset: 0x3A3 VA: 0x3A3 Slot: 14
	public override void WriteLine() { }

	// RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2 Slot: 17
	public override void WriteLine(string value) { }
}

// Namespace: 
[Serializable]
internal sealed class TextWriter.SyncTextWriter : TextWriter, IDisposable // TypeDefIndex: 589
{
	// Fields
	private TextWriter _out; // 0x14

	// Properties
	public override IFormatProvider FormatProvider { get; }

	// Methods

	// RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3
	internal void .ctor(TextWriter t) { }

	// RVA: 0x443 Offset: 0x443 VA: 0x443 Slot: 7
	public override IFormatProvider get_FormatProvider() { }

	// RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4 Slot: 8
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4 Slot: 9
	public override void Flush() { }

	// RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5 Slot: 10
	public override void Write(char value) { }

	// RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6 Slot: 11
	public override void Write(char[] buffer) { }

	// RVA: 0x86 Offset: 0x86 VA: 0x86 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7 Slot: 13
	public override void Write(string value) { }

	// RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5 Slot: 14
	public override void WriteLine() { }

	// RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8 Slot: 15
	public override void WriteLine(char value) { }

	// RVA: 0x87 Offset: 0x87 VA: 0x87 Slot: 16
	public override void WriteLine(char[] buffer, int index, int count) { }

	// RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9 Slot: 17
	public override void WriteLine(string value) { }

	// RVA: 0x16A Offset: 0x16A VA: 0x16A Slot: 18
	public override void WriteLine(string format, object arg0) { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88 Slot: 19
	public override void WriteLine(string format, object arg0, object arg1) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x3BD Offset: 0x3BD VA: 0x3BD
[Serializable]
private sealed class TextWriter.<>c // TypeDefIndex: 590
{
	// Fields
	public static readonly TextWriter.<>c <>9; // 0xFFFFFFFF

	// Methods

	// RVA: 0xE9F Offset: 0xE9F VA: 0xE9F
	private static void .cctor() { }

	// RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
	public void .ctor() { }

	// RVA: 0x1EA Offset: 0x1EA VA: 0x1EA
	internal void <.cctor>b__73_0(object state) { }

	// RVA: 0x1EB Offset: 0x1EB VA: 0x1EB
	internal void <.cctor>b__73_1(object state) { }

	// RVA: 0x1EC Offset: 0x1EC VA: 0x1EC
	internal void <.cctor>b__73_2(object state) { }

	// RVA: 0x1ED Offset: 0x1ED VA: 0x1ED
	internal void <.cctor>b__73_3(object state) { }

	// RVA: 0x1EE Offset: 0x1EE VA: 0x1EE
	internal void <.cctor>b__73_4(object state) { }

	// RVA: 0x1EF Offset: 0x1EF VA: 0x1EF
	internal void <.cctor>b__73_5(object state) { }

	// RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0
	internal void <.cctor>b__73_6(object state) { }
}

// Namespace: System.IO
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 591
{
	// Fields
	private SafeBuffer _buffer; // 0x14
	private byte* _mem; // 0x18
	private long _length; // 0x20
	private long _capacity; // 0x28
	private long _position; // 0x30
	private long _offset; // 0x38
	private FileAccess _access; // 0x40
	internal bool _isOpen; // 0x44

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	[CLSCompliantAttribute] // RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7
	public byte* PositionPointer { get; }

	// Methods

	// RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7
	protected void .ctor() { }

	[CLSCompliantAttribute] // RVA: 0x701 Offset: 0x701 VA: 0x701
	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public void .ctor(byte* pointer, long length) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal void Initialize(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck) { }

	// RVA: 0x448 Offset: 0x448 VA: 0x448 Slot: 7
	public override bool get_CanRead() { }

	// RVA: 0x449 Offset: 0x449 VA: 0x449 Slot: 8
	public override bool get_CanSeek() { }

	// RVA: 0x44A Offset: 0x44A VA: 0x44A Slot: 9
	public override bool get_CanWrite() { }

	// RVA: 0x1FD Offset: 0x1FD VA: 0x1FD Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x3A8 Offset: 0x3A8 VA: 0x3A8 Slot: 15
	public override void Flush() { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B Slot: 10
	public override long get_Length() { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C Slot: 11
	public override long get_Position() { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15 Slot: 12
	public override void set_Position(long value) { }

	// RVA: 0x44B Offset: 0x44B VA: 0x44B
	public byte* get_PositionPointer() { }

	// RVA: 0x8E Offset: 0x8E VA: 0x8E Slot: 21
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x44C Offset: 0x44C VA: 0x44C Slot: 22
	public override int ReadByte() { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 20
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1FE Offset: 0x1FE VA: 0x1FE Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: System.IO
internal static class PathInternal // TypeDefIndex: 592
{
	// Methods

	// RVA: 0x417 Offset: 0x417 VA: 0x417
	public static bool IsPartiallyQualified(string path) { }

	// RVA: 0x265 Offset: 0x265 VA: 0x265
	public static bool HasIllegalCharacters(string path, bool checkAdditional) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3BE Offset: 0x3BE VA: 0x3BE
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 593
{
	// Fields
	private string current; // 0x48
	private string parent; // 0x4C

	// Properties
	public override bool Exists { get; }
	public override string Name { get; }
	public DirectoryInfo Parent { get; }

	// Methods

	// RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3
	public void .ctor(string path) { }

	// RVA: 0x14B Offset: 0x14B VA: 0x14B
	internal void .ctor(string path, bool simpleOriginalPath) { }

	// RVA: 0x14C Offset: 0x14C VA: 0x14C
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x36B Offset: 0x36B VA: 0x36B
	private void Initialize() { }

	// RVA: 0x3E6 Offset: 0x3E6 VA: 0x3E6 Slot: 9
	public override bool get_Exists() { }

	// RVA: 0x3E7 Offset: 0x3E7 VA: 0x3E7 Slot: 8
	public override string get_Name() { }

	// RVA: 0x3E8 Offset: 0x3E8 VA: 0x3E8
	public DirectoryInfo get_Parent() { }

	// RVA: 0x36C Offset: 0x36C VA: 0x36C
	public void Create() { }

	// RVA: 0x3E9 Offset: 0x3E9 VA: 0x3E9
	public DirectoryInfo[] GetDirectories() { }

	// RVA: 0x24A Offset: 0x24A VA: 0x24A
	public DirectoryInfo[] GetDirectories(string searchPattern) { }

	// RVA: 0x3EA Offset: 0x3EA VA: 0x3EA Slot: 3
	public override string ToString() { }

	// RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4
	internal void CheckPath(string path) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3BF Offset: 0x3BF VA: 0x3BF
public static class File // TypeDefIndex: 594
{
	// Methods

	// RVA: 0x3EB Offset: 0x3EB VA: 0x3EB
	public static FileStream Create(string path) { }

	// RVA: 0x24B Offset: 0x24B VA: 0x24B
	public static FileStream Create(string path, int bufferSize) { }

	// RVA: 0x370 Offset: 0x370 VA: 0x370
	public static void Delete(string path) { }

	// RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
	public static bool Exists(string path) { }

	// RVA: 0x3ED Offset: 0x3ED VA: 0x3ED
	public static FileStream OpenRead(string path) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	internal static int FillAttributeInfo(string path, ref MonoIOStat data, bool tryagain, bool returnErrorOnNotFound) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0
[FlagsAttribute] // RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0
[Serializable]
public enum FileAccess // TypeDefIndex: 595
{
	// Fields
	public int value__; // 0x0
	public const FileAccess Read = 1;
	public const FileAccess Write = 2;
	public const FileAccess ReadWrite = 3;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
[FlagsAttribute] // RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
[Serializable]
public enum FileAttributes // TypeDefIndex: 596
{
	// Fields
	public int value__; // 0x0
	public const FileAttributes Archive = 32;
	public const FileAttributes Compressed = 2048;
	public const FileAttributes Device = 64;
	public const FileAttributes Directory = 16;
	public const FileAttributes Encrypted = 16384;
	public const FileAttributes Hidden = 2;
	public const FileAttributes Normal = 128;
	public const FileAttributes NotContentIndexed = 8192;
	public const FileAttributes Offline = 4096;
	public const FileAttributes ReadOnly = 1;
	public const FileAttributes ReparsePoint = 1024;
	public const FileAttributes SparseFile = 512;
	public const FileAttributes System = 4;
	public const FileAttributes Temporary = 256;
	public const FileAttributes IntegrityStream = 32768;
	public const FileAttributes NoScrubData = 131072;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C2 Offset: 0x3C2 VA: 0x3C2
[Serializable]
public enum FileMode // TypeDefIndex: 597
{
	// Fields
	public int value__; // 0x0
	public const FileMode CreateNew = 1;
	public const FileMode Create = 2;
	public const FileMode Open = 3;
	public const FileMode OpenOrCreate = 4;
	public const FileMode Truncate = 5;
	public const FileMode Append = 6;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3
[FlagsAttribute] // RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3
[Serializable]
public enum FileOptions // TypeDefIndex: 598
{
	// Fields
	public int value__; // 0x0
	public const FileOptions None = 0;
	public const FileOptions Encrypted = 16384;
	public const FileOptions DeleteOnClose = 67108864;
	public const FileOptions SequentialScan = 134217728;
	public const FileOptions RandomAccess = 268435456;
	public const FileOptions Asynchronous = 1073741824;
	public const FileOptions WriteThrough = -2147483648;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4
[FlagsAttribute] // RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4
[Serializable]
public enum FileShare // TypeDefIndex: 599
{
	// Fields
	public int value__; // 0x0
	public const FileShare None = 0;
	public const FileShare Read = 1;
	public const FileShare Write = 2;
	public const FileShare ReadWrite = 3;
	public const FileShare Delete = 4;
	public const FileShare Inheritable = 16;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C5 Offset: 0x3C5 VA: 0x3C5
public class FileStream : Stream // TypeDefIndex: 600
{
	// Fields
	private static byte[] buf_recycle; // 0x0
	private static readonly object buf_recycle_lock; // 0x4
	private byte[] buf; // 0x14
	private string name; // 0x18
	private SafeFileHandle safeHandle; // 0x1C
	private bool isExposed; // 0x20
	private long append_startpos; // 0x28
	private FileAccess access; // 0x30
	private bool owner; // 0x34
	private bool async; // 0x35
	private bool canseek; // 0x36
	private bool anonymous; // 0x37
	private bool buf_dirty; // 0x38
	private int buf_size; // 0x3C
	private int buf_length; // 0x40
	private int buf_offset; // 0x44
	private long buf_start; // 0x48

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	internal void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper) { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77
	public void .ctor(string path, FileMode mode, FileAccess access) { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, string msgPath, bool bFromProxy, bool useLongPath = False, bool checkHost = False) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	private void Init(SafeFileHandle safeHandle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper) { }

	// RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4 Slot: 7
	public override bool get_CanRead() { }

	// RVA: 0x3F5 Offset: 0x3F5 VA: 0x3F5 Slot: 9
	public override bool get_CanWrite() { }

	// RVA: 0x3F6 Offset: 0x3F6 VA: 0x3F6 Slot: 8
	public override bool get_CanSeek() { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45 Slot: 10
	public override long get_Length() { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46 Slot: 11
	public override long get_Position() { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12 Slot: 12
	public override void set_Position(long value) { }

	// RVA: 0x375 Offset: 0x375 VA: 0x375
	private void ExposeHandle() { }

	// RVA: 0x3F7 Offset: 0x3F7 VA: 0x3F7 Slot: 22
	public override int ReadByte() { }

	// RVA: 0x1BA Offset: 0x1BA VA: 0x1BA Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C Slot: 21
	public override int Read([In] [Out] byte[] array, int offset, int count) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	private int ReadInternal(byte[] dest, int offset, int count) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26 Slot: 16
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }

	// RVA: 0x24D Offset: 0x24D VA: 0x24D Slot: 17
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78 Slot: 23
	public override void Write(byte[] array, int offset, int count) { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79
	private void WriteInternal(byte[] src, int offset, int count) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27 Slot: 18
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }

	// RVA: 0x1BB Offset: 0x1BB VA: 0x1BB Slot: 19
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 20
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x376 Offset: 0x376 VA: 0x376 Slot: 15
	public override void Flush() { }

	// RVA: 0x377 Offset: 0x377 VA: 0x377 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1BC Offset: 0x1BC VA: 0x1BC Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	private int ReadSegment(byte[] dest, int dest_offset, int count) { }

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	private int WriteSegment(byte[] src, int src_offset, int count) { }

	// RVA: 0x378 Offset: 0x378 VA: 0x378
	private void FlushBuffer() { }

	// RVA: 0x379 Offset: 0x379 VA: 0x379
	private void FlushBufferIfDirty() { }

	// RVA: 0x37A Offset: 0x37A VA: 0x37A
	private void RefillBuffer() { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	private int ReadData(SafeHandle safeHandle, byte[] buf, int offset, int count) { }

	// RVA: 0x155 Offset: 0x155 VA: 0x155
	private void InitBuffer(int size, bool isZeroSize) { }

	// RVA: 0x24E Offset: 0x24E VA: 0x24E
	private string GetSecureFileName(string filename) { }

	// RVA: 0x891 Offset: 0x891 VA: 0x891
	private string GetSecureFileName(string filename, bool full) { }

	// RVA: 0xE93 Offset: 0xE93 VA: 0xE93
	private static void .cctor() { }
}

// Namespace: 
private sealed class FileStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 601
{
	// Methods

	// RVA: 0x156 Offset: 0x156 VA: 0x156
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80 Slot: 12
	public virtual int Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28 Slot: 13
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x24F Offset: 0x24F VA: 0x24F Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FileStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 602
{
	// Methods

	// RVA: 0x157 Offset: 0x157 VA: 0x157
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A Slot: 12
	public virtual void Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29 Slot: 13
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x1BD Offset: 0x1BD VA: 0x1BD Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 603
{
	// Fields
	private object state; // 0x8
	private ManualResetEvent wh; // 0xC
	private AsyncCallback cb; // 0x10
	public int Count; // 0x14
	public int OriginalCount; // 0x18
	public int BytesRead; // 0x1C
	private AsyncCallback realcb; // 0x20

	// Properties
	public WaitHandle AsyncWaitHandle { get; }

	// Methods

	// RVA: 0x158 Offset: 0x158 VA: 0x158
	public void .ctor(AsyncCallback cb, object state) { }

	// RVA: 0x37B Offset: 0x37B VA: 0x37B
	private static void CBWrapper(IAsyncResult ares) { }

	// RVA: 0x3F8 Offset: 0x3F8 VA: 0x3F8 Slot: 4
	public WaitHandle get_AsyncWaitHandle() { }
}

// Namespace: System.IO
internal enum MonoFileType // TypeDefIndex: 604
{
	// Fields
	public int value__; // 0x0
	public const MonoFileType Unknown = 0;
	public const MonoFileType Disk = 1;
	public const MonoFileType Char = 2;
	public const MonoFileType Pipe = 3;
	public const MonoFileType Remote = 32768;
}

// Namespace: System.IO
internal static class MonoIO // TypeDefIndex: 605
{
	// Fields
	public static readonly IntPtr InvalidHandle; // 0x0
	private static bool dump_handles; // 0x4

	// Properties
	public static IntPtr ConsoleOutput { get; }
	public static IntPtr ConsoleInput { get; }
	public static IntPtr ConsoleError { get; }
	public static char VolumeSeparatorChar { get; }
	public static char DirectorySeparatorChar { get; }
	public static char AltDirectorySeparatorChar { get; }
	public static char PathSeparator { get; }

	// Methods

	// RVA: 0x406 Offset: 0x406 VA: 0x406
	public static Exception GetException(MonoIOError error) { }

	// RVA: 0x252 Offset: 0x252 VA: 0x252
	public static Exception GetException(string path, MonoIOError error) { }

	// RVA: 0x253 Offset: 0x253 VA: 0x253
	private static bool CreateDirectory(char* path, out MonoIOError error) { }

	// RVA: 0x254 Offset: 0x254 VA: 0x254
	public static bool CreateDirectory(string path, out MonoIOError error) { }

	// RVA: 0x255 Offset: 0x255 VA: 0x255
	private static bool RemoveDirectory(char* path, out MonoIOError error) { }

	// RVA: 0x256 Offset: 0x256 VA: 0x256
	public static bool RemoveDirectory(string path, out MonoIOError error) { }

	// RVA: 0x407 Offset: 0x407 VA: 0x407
	public static string GetCurrentDirectory(out MonoIOError error) { }

	// RVA: 0x257 Offset: 0x257 VA: 0x257
	private static bool DeleteFile(char* path, out MonoIOError error) { }

	// RVA: 0x258 Offset: 0x258 VA: 0x258
	public static bool DeleteFile(string path, out MonoIOError error) { }

	// RVA: 0x259 Offset: 0x259 VA: 0x259
	private static FileAttributes GetFileAttributes(char* path, out MonoIOError error) { }

	// RVA: 0x25A Offset: 0x25A VA: 0x25A
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error) { }

	// RVA: 0x25B Offset: 0x25B VA: 0x25B
	private static MonoFileType GetFileType(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x25C Offset: 0x25C VA: 0x25C
	public static MonoFileType GetFileType(SafeHandle safeHandle, out MonoIOError error) { }

	// RVA: 0x82 Offset: 0x82 VA: 0x82
	private static IntPtr FindFirstFile(char* pathWithPattern, out string fileName, out int fileAttr, out int error) { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83
	public static IntPtr FindFirstFile(string pathWithPattern, out string fileName, out int fileAttr, out int error) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84
	public static bool FindNextFile(IntPtr hnd, out string fileName, out int fileAttr, out int error) { }

	// RVA: 0x408 Offset: 0x408 VA: 0x408
	public static bool FindCloseFile(IntPtr hnd) { }

	// RVA: 0x25D Offset: 0x25D VA: 0x25D
	public static bool ExistsFile(string path, out MonoIOError error) { }

	// RVA: 0x25E Offset: 0x25E VA: 0x25E
	public static bool ExistsDirectory(string path, out MonoIOError error) { }

	// RVA: 0x25F Offset: 0x25F VA: 0x25F
	public static bool ExistsSymlink(string path, out MonoIOError error) { }

	// RVA: 0x892 Offset: 0x892 VA: 0x892
	private static bool GetFileStat(char* path, out MonoIOStat stat, out MonoIOError error) { }

	// RVA: 0x893 Offset: 0x893 VA: 0x893
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	private static IntPtr Open(char* filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }

	// RVA: 0x260 Offset: 0x260 VA: 0x260
	public static bool Close(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34
	private static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	public static int Read(SafeHandle safeHandle, byte[] dest, int dest_offset, int count, out MonoIOError error) { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	private static int Write(IntPtr handle, [In] byte[] src, int src_offset, int count, out MonoIOError error) { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37
	public static int Write(SafeHandle safeHandle, byte[] src, int src_offset, int count, out MonoIOError error) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static long Seek(SafeHandle safeHandle, long offset, SeekOrigin origin, out MonoIOError error) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	private static long GetLength(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	public static long GetLength(SafeHandle safeHandle, out MonoIOError error) { }

	// RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5
	public static IntPtr get_ConsoleOutput() { }

	// RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6
	public static IntPtr get_ConsoleInput() { }

	// RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7
	public static IntPtr get_ConsoleError() { }

	// RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8
	public static char get_VolumeSeparatorChar() { }

	// RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9
	public static char get_DirectorySeparatorChar() { }

	// RVA: 0x1DA Offset: 0x1DA VA: 0x1DA
	public static char get_AltDirectorySeparatorChar() { }

	// RVA: 0x1DB Offset: 0x1DB VA: 0x1DB
	public static char get_PathSeparator() { }

	// RVA: 0xE94 Offset: 0xE94 VA: 0xE94
	private static void DumpHandles() { }

	// RVA: 0x261 Offset: 0x261 VA: 0x261
	public static bool RemapPath(string path, out string newPath) { }

	// RVA: 0xE95 Offset: 0xE95 VA: 0xE95
	private static void .cctor() { }
}

// Namespace: System.IO
internal enum MonoIOError // TypeDefIndex: 606
{
	// Fields
	public int value__; // 0x0
	public const MonoIOError ERROR_SUCCESS = 0;
	public const MonoIOError ERROR_FILE_NOT_FOUND = 2;
	public const MonoIOError ERROR_PATH_NOT_FOUND = 3;
	public const MonoIOError ERROR_TOO_MANY_OPEN_FILES = 4;
	public const MonoIOError ERROR_ACCESS_DENIED = 5;
	public const MonoIOError ERROR_INVALID_HANDLE = 6;
	public const MonoIOError ERROR_INVALID_DRIVE = 15;
	public const MonoIOError ERROR_NOT_SAME_DEVICE = 17;
	public const MonoIOError ERROR_NO_MORE_FILES = 18;
	public const MonoIOError ERROR_NOT_READY = 21;
	public const MonoIOError ERROR_WRITE_FAULT = 29;
	public const MonoIOError ERROR_READ_FAULT = 30;
	public const MonoIOError ERROR_GEN_FAILURE = 31;
	public const MonoIOError ERROR_SHARING_VIOLATION = 32;
	public const MonoIOError ERROR_LOCK_VIOLATION = 33;
	public const MonoIOError ERROR_HANDLE_DISK_FULL = 39;
	public const MonoIOError ERROR_FILE_EXISTS = 80;
	public const MonoIOError ERROR_CANNOT_MAKE = 82;
	public const MonoIOError ERROR_INVALID_PARAMETER = 87;
	public const MonoIOError ERROR_BROKEN_PIPE = 109;
	public const MonoIOError ERROR_INVALID_NAME = 123;
	public const MonoIOError ERROR_DIR_NOT_EMPTY = 145;
	public const MonoIOError ERROR_ALREADY_EXISTS = 183;
	public const MonoIOError ERROR_FILENAME_EXCED_RANGE = 206;
	public const MonoIOError ERROR_DIRECTORY = 267;
	public const MonoIOError ERROR_ENCRYPTION_FAILED = 6000;
}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 607
{
	// Fields
	public FileAttributes fileAttributes; // 0x0
	public long Length; // 0x8
	public long CreationTime; // 0x10
	public long LastAccessTime; // 0x18
	public long LastWriteTime; // 0x20
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C6 Offset: 0x3C6 VA: 0x3C6
public static class Path // TypeDefIndex: 608
{
	// Fields
	[ObsoleteAttribute] // RVA: 0x567 Offset: 0x567 VA: 0x567
	public static readonly char[] InvalidPathChars; // 0x0
	public static readonly char AltDirectorySeparatorChar; // 0x4
	public static readonly char DirectorySeparatorChar; // 0x6
	public static readonly char PathSeparator; // 0x8
	internal static readonly string DirectorySeparatorStr; // 0xC
	public static readonly char VolumeSeparatorChar; // 0x10
	internal static readonly char[] PathSeparatorChars; // 0x14
	private static readonly bool dirEqualsVolume; // 0x18
	internal static readonly char[] trimEndCharsWindows; // 0x1C
	internal static readonly char[] trimEndCharsUnix; // 0x20

	// Properties
	internal static string DirectorySeparatorCharAsString { get; }
	internal static char[] TrimEndChars { get; }

	// Methods

	// RVA: 0x262 Offset: 0x262 VA: 0x262
	public static string Combine(string path1, string path2) { }

	// RVA: 0x409 Offset: 0x409 VA: 0x409
	internal static string CleanPath(string s) { }

	// RVA: 0x40A Offset: 0x40A VA: 0x40A
	public static string GetDirectoryName(string path) { }

	// RVA: 0x40B Offset: 0x40B VA: 0x40B
	public static string GetFileName(string path) { }

	// RVA: 0x40C Offset: 0x40C VA: 0x40C
	public static string GetFullPath(string path) { }

	// RVA: 0x40D Offset: 0x40D VA: 0x40D
	internal static string GetFullPathInternal(string path) { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85
	private static extern int GetFullPathName(string path, int numBufferChars, StringBuilder buffer, ref IntPtr lpFilePartOrNull) { }

	// RVA: 0x40E Offset: 0x40E VA: 0x40E
	internal static string GetFullPathName(string path) { }

	// RVA: 0x40F Offset: 0x40F VA: 0x40F
	internal static string WindowsDriveAdjustment(string path) { }

	// RVA: 0x410 Offset: 0x410 VA: 0x410
	internal static string InsecureGetFullPath(string path) { }

	// RVA: 0x411 Offset: 0x411 VA: 0x411
	internal static bool IsDirectorySeparator(char c) { }

	// RVA: 0x412 Offset: 0x412 VA: 0x412
	public static string GetPathRoot(string path) { }

	// RVA: 0x413 Offset: 0x413 VA: 0x413
	public static bool IsPathRooted(string path) { }

	// RVA: 0x1DC Offset: 0x1DC VA: 0x1DC
	public static char[] GetInvalidPathChars() { }

	// RVA: 0xE96 Offset: 0xE96 VA: 0xE96
	private static void .cctor() { }

	// RVA: 0x414 Offset: 0x414 VA: 0x414
	private static string GetServerAndShare(string path) { }

	// RVA: 0x263 Offset: 0x263 VA: 0x263
	private static bool SameRoot(string root, string path) { }

	// RVA: 0x415 Offset: 0x415 VA: 0x415
	private static string CanonicalizePath(string path) { }

	// RVA: 0x416 Offset: 0x416 VA: 0x416
	public static string Combine(string[] paths) { }

	// RVA: 0x894 Offset: 0x894 VA: 0x894
	public static string Combine(string path1, string path2, string path3) { }

	// RVA: 0x382 Offset: 0x382 VA: 0x382
	internal static void Validate(string path) { }

	// RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4
	internal static void Validate(string path, string parameterName) { }

	// RVA: 0x1DD Offset: 0x1DD VA: 0x1DD
	internal static string get_DirectorySeparatorCharAsString() { }

	// RVA: 0x1DE Offset: 0x1DE VA: 0x1DE
	internal static char[] get_TrimEndChars() { }

	// RVA: 0x383 Offset: 0x383 VA: 0x383
	internal static void CheckSearchPattern(string searchPattern) { }

	// RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5
	internal static void CheckInvalidPathChars(string path, bool checkAdditional = False) { }

	// RVA: 0x264 Offset: 0x264 VA: 0x264
	internal static string InternalCombine(string path1, string path2) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C7 Offset: 0x3C7 VA: 0x3C7
[Serializable]
public enum SearchOption // TypeDefIndex: 609
{
	// Fields
	public int value__; // 0x0
	public const SearchOption TopDirectoryOnly = 0;
	public const SearchOption AllDirectories = 1;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0x3C8 Offset: 0x3C8 VA: 0x3C8
[Serializable]
public enum SeekOrigin // TypeDefIndex: 610
{
	// Fields
	public int value__; // 0x0
	public const SeekOrigin Begin = 0;
	public const SeekOrigin Current = 1;
	public const SeekOrigin End = 2;
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 611
{
	// Fields
	private static bool[] newline; // 0x0
	private static char newlineChar; // 0x4

	// Methods

	// RVA: 0xEA0 Offset: 0xEA0 VA: 0xEA0
	private static void .cctor() { }

	// RVA: 0x16B Offset: 0x16B VA: 0x16B
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x444 Offset: 0x444 VA: 0x444 Slot: 8
	public override int Peek() { }

	// RVA: 0x445 Offset: 0x445 VA: 0x445 Slot: 9
	public override int Read() { }

	// RVA: 0x8D Offset: 0x8D VA: 0x8D Slot: 10
	public override int Read([In] [Out] char[] dest_buffer, int index, int count) { }

	// RVA: 0x26E Offset: 0x26E VA: 0x26E
	private bool CheckEOL(char current) { }

	// RVA: 0x446 Offset: 0x446 VA: 0x446 Slot: 12
	public override string ReadLine() { }

	// RVA: 0x447 Offset: 0x447 VA: 0x447 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 612
{
	// Methods

	// RVA: 0x16C Offset: 0x16C VA: 0x16C
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x3A6 Offset: 0x3A6 VA: 0x3A6 Slot: 9
	public override void Flush() { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x1FA Offset: 0x1FA VA: 0x1FA Slot: 10
	public override void Write(char value) { }

	// RVA: 0x1FB Offset: 0x1FB VA: 0x1FB Slot: 11
	public override void Write(char[] value) { }

	// RVA: 0x1FC Offset: 0x1FC VA: 0x1FC Slot: 13
	public override void Write(string value) { }
}

// Namespace: System.IO
internal class CStreamReader : StreamReader // TypeDefIndex: 613
{
	// Fields
	private TermInfoDriver driver; // 0x40

	// Methods

	// RVA: 0x149 Offset: 0x149 VA: 0x149
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x3DD Offset: 0x3DD VA: 0x3DD Slot: 8
	public override int Peek() { }

	// RVA: 0x3DE Offset: 0x3DE VA: 0x3DE Slot: 9
	public override int Read() { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A Slot: 10
	public override int Read([In] [Out] char[] dest, int index, int count) { }

	// RVA: 0x3DF Offset: 0x3DF VA: 0x3DF Slot: 12
	public override string ReadLine() { }

	// RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class CStreamWriter : StreamWriter // TypeDefIndex: 614
{
	// Fields
	private TermInfoDriver driver; // 0x38

	// Methods

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	public void .ctor(Stream stream, Encoding encoding, bool leaveOpen) { }

	// RVA: 0x75 Offset: 0x75 VA: 0x75 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x1AD Offset: 0x1AD VA: 0x1AD Slot: 10
	public override void Write(char val) { }

	// RVA: 0x1AE Offset: 0x1AE VA: 0x1AE
	public void InternalWriteString(string val) { }

	// RVA: 0x1AF Offset: 0x1AF VA: 0x1AF
	public void InternalWriteChar(char val) { }

	// RVA: 0x14A Offset: 0x14A VA: 0x14A
	public void InternalWriteChars(char[] buffer, int n) { }

	// RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0 Slot: 11
	public override void Write(char[] val) { }

	// RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1 Slot: 13
	public override void Write(string val) { }
}

// Namespace: System.Globalization
public static class CharUnicodeInfo // TypeDefIndex: 615
{
	// Fields
	private static ushort[] s_pCategoryLevel1Index; // 0x0
	private static byte[] s_pCategoriesValue; // 0x4
	private static ushort[] s_pNumericLevel1Index; // 0x8
	private static byte[] s_pNumericValues; // 0xC
	private static ushort[] s_pDigitValues; // 0x10

	// Methods

	// RVA: 0x1DC Offset: 0x1DC VA: 0x1DC
	internal static int InternalConvertToUtf32(string s, int index) { }

	// RVA: 0x308 Offset: 0x308 VA: 0x308
	internal static bool IsWhiteSpace(char c) { }

	// RVA: 0x309 Offset: 0x309 VA: 0x309
	public static UnicodeCategory GetUnicodeCategory(char ch) { }

	// RVA: 0x30A Offset: 0x30A VA: 0x30A
	internal static UnicodeCategory InternalGetUnicodeCategory(int ch) { }

	// RVA: 0x1DD Offset: 0x1DD VA: 0x1DD
	internal static byte InternalGetCategoryValue(int ch, int offset) { }

	// RVA: 0x1DE Offset: 0x1DE VA: 0x1DE
	internal static UnicodeCategory InternalGetUnicodeCategory(string value, int index) { }

	// RVA: 0xE83 Offset: 0xE83 VA: 0xE83
	private static void .cctor() { }
}

// Namespace: 
internal static class CharUnicodeInfo.Debug // TypeDefIndex: 616
{
	// Methods

	// RVA: 0x16A Offset: 0x16A VA: 0x16A
	internal static void Assert(bool condition, string message) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3C9 Offset: 0x3C9 VA: 0x3C9
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 617
{
	// Fields
	internal int m_currentEraValue; // 0x8
	[OptionalFieldAttribute] // RVA: 0x568 Offset: 0x568 VA: 0x568
	private bool m_isReadOnly; // 0xC
	internal int twoDigitYearMax; // 0x10

	// Properties
	[ComVisibleAttribute] // RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8
	public virtual DateTime MinSupportedDateTime { get; }
	[ComVisibleAttribute] // RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9
	public virtual DateTime MaxSupportedDateTime { get; }
	internal virtual int ID { get; }
	internal virtual int BaseCalendarID { get; }
	internal virtual int CurrentEraValue { get; }
	public abstract int[] Eras { get; }
	public virtual int TwoDigitYearMax { get; }

	// Methods

	// RVA: 0x3B Offset: 0x3B VA: 0x3B Slot: 5
	public virtual DateTime get_MinSupportedDateTime() { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C Slot: 6
	public virtual DateTime get_MaxSupportedDateTime() { }

	// RVA: 0x34C Offset: 0x34C VA: 0x34C
	protected void .ctor() { }

	// RVA: 0x300 Offset: 0x300 VA: 0x300 Slot: 7
	internal virtual int get_ID() { }

	// RVA: 0x301 Offset: 0x301 VA: 0x301 Slot: 8
	internal virtual int get_BaseCalendarID() { }

	[ComVisibleAttribute] // RVA: 0x702 Offset: 0x702 VA: 0x702
	// RVA: 0x302 Offset: 0x302 VA: 0x302 Slot: 9
	public virtual object Clone() { }

	// RVA: 0x169 Offset: 0x169 VA: 0x169
	internal void SetReadOnlyState(bool readOnly) { }

	// RVA: 0x303 Offset: 0x303 VA: 0x303 Slot: 10
	internal virtual int get_CurrentEraValue() { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract int GetDayOfMonth(DateTime time) { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract int GetDaysInMonth(int year, int month, int era) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract int GetEra(DateTime time) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract int[] get_Eras() { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract int GetMonth(DateTime time) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract int GetMonthsInYear(int year, int era) { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract int GetYear(DateTime time) { }

	// RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9 Slot: 19
	public virtual bool IsLeapYear(int year) { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract bool IsLeapYear(int year, int era) { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 22
	internal virtual bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result) { }

	// RVA: 0x86F Offset: 0x86F VA: 0x86F Slot: 23
	internal virtual bool IsValidYear(int year, int era) { }

	// RVA: 0x64 Offset: 0x64 VA: 0x64 Slot: 24
	internal virtual bool IsValidMonth(int year, int month, int era) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B Slot: 25
	internal virtual bool IsValidDay(int year, int month, int day, int era) { }

	// RVA: 0x304 Offset: 0x304 VA: 0x304 Slot: 26
	public virtual int get_TwoDigitYearMax() { }

	// RVA: 0x1DA Offset: 0x1DA VA: 0x1DA Slot: 27
	public virtual int ToFourDigitYear(int year) { }

	// RVA: 0x1DB Offset: 0x1DB VA: 0x1DB
	internal static int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue) { }
}

// Namespace: System.Globalization
internal class CalendarData // TypeDefIndex: 618
{
	// Fields
	internal const int MAX_CALENDARS = 23;
	internal string sNativeName; // 0x8
	internal string[] saShortDates; // 0xC
	internal string[] saYearMonths; // 0x10
	internal string[] saLongDates; // 0x14
	internal string sMonthDay; // 0x18
	internal string[] saEraNames; // 0x1C
	internal string[] saAbbrevEraNames; // 0x20
	internal string[] saAbbrevEnglishEraNames; // 0x24
	internal string[] saDayNames; // 0x28
	internal string[] saAbbrevDayNames; // 0x2C
	internal string[] saSuperShortDayNames; // 0x30
	internal string[] saMonthNames; // 0x34
	internal string[] saAbbrevMonthNames; // 0x38
	internal string[] saMonthGenitiveNames; // 0x3C
	internal string[] saAbbrevMonthGenitiveNames; // 0x40
	internal string[] saLeapYearMonthNames; // 0x44
	internal int iTwoDigitYearMax; // 0x48
	internal int iCurrentEra; // 0x4C
	internal bool bUseUserOverrides; // 0x50
	internal static CalendarData Invariant; // 0x0

	// Methods

	// RVA: 0x34D Offset: 0x34D VA: 0x34D
	private void .ctor() { }

	// RVA: 0xE82 Offset: 0xE82 VA: 0xE82
	private static void .cctor() { }

	// RVA: 0x69 Offset: 0x69 VA: 0x69
	internal void .ctor(string localeName, int calendarId, bool bUseUserOverrides) { }

	// RVA: 0x134 Offset: 0x134 VA: 0x134
	private void InitializeEraNames(string localeName, int calendarId) { }

	// RVA: 0x135 Offset: 0x135 VA: 0x135
	private void InitializeAbbreviatedEraNames(string localeName, int calendarId) { }

	// RVA: 0x305 Offset: 0x305 VA: 0x305
	internal static CalendarData GetCalendarData(int calendarId) { }

	// RVA: 0x306 Offset: 0x306 VA: 0x306
	private static string CalendarIdToCultureName(int calendarId) { }

	// RVA: 0x307 Offset: 0x307 VA: 0x307
	public static int nativeGetTwoDigitYearMax(int calID) { }

	// RVA: 0x870 Offset: 0x870 VA: 0x870
	private static bool nativeGetCalendarData(CalendarData data, string localeName, int calendarId) { }

	// RVA: 0x871 Offset: 0x871 VA: 0x871
	private bool fill_calendar_data(string localeName, int datetimeIndex) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x3CA Offset: 0x3CA VA: 0x3CA
[ComVisibleAttribute] // RVA: 0x3CA Offset: 0x3CA VA: 0x3CA
[Serializable]
public enum CompareOptions // TypeDefIndex: 619
{
	// Fields
	public int value__; // 0x0
	public const CompareOptions None = 0;
	public const CompareOptions IgnoreCase = 1;
	public const CompareOptions IgnoreNonSpace = 2;
	public const CompareOptions IgnoreSymbols = 4;
	public const CompareOptions IgnoreKanaType = 8;
	public const CompareOptions IgnoreWidth = 16;
	public const CompareOptions OrdinalIgnoreCase = 268435456;
	public const CompareOptions StringSort = 536870912;
	public const CompareOptions Ordinal = 1073741824;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3CB Offset: 0x3CB VA: 0x3CB
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 620
{
	// Fields
	private const CompareOptions ValidIndexMaskOffFlags = -32;
	private const CompareOptions ValidCompareMaskOffFlags = -536870944;
	private const CompareOptions ValidHashCodeOfStringMaskOffFlags = -32;
	[OptionalFieldAttribute] // RVA: 0x569 Offset: 0x569 VA: 0x569
	private string m_name; // 0x8
	private string m_sortName; // 0xC
	[OptionalFieldAttribute] // RVA: 0x56A Offset: 0x56A VA: 0x56A
	private int win32LCID; // 0x10
	private int culture; // 0x14
	private const int LINGUISTIC_IGNORECASE = 16;
	private const int NORM_IGNORECASE = 1;
	private const int NORM_IGNOREKANATYPE = 65536;
	private const int LINGUISTIC_IGNOREDIACRITIC = 32;
	private const int NORM_IGNORENONSPACE = 2;
	private const int NORM_IGNORESYMBOLS = 4;
	private const int NORM_IGNOREWIDTH = 131072;
	private const int SORT_STRINGSORT = 4096;
	private const int COMPARE_OPTIONS_ORDINAL = 1073741824;
	internal const int NORM_LINGUISTIC_CASING = 134217728;
	private const int RESERVED_FIND_ASCII_STRING = 536870912;
	private const int SORT_VERSION_WHIDBEY = 4096;
	private const int SORT_VERSION_V4 = 393473;
	[OptionalFieldAttribute] // RVA: 0x56B Offset: 0x56B VA: 0x56B
	private SortVersion m_SortVersion; // 0x18
	private SimpleCollator collator; // 0x1C
	private static Dictionary<string, SimpleCollator> collators; // 0x0
	private static bool managedCollation; // 0x4
	private static bool managedCollationChecked; // 0x5

	// Properties
	[ComVisibleAttribute] // RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	public virtual string Name { get; }
	private static bool UseManagedCollation { get; }

	// Methods

	// RVA: 0x16C Offset: 0x16C VA: 0x16C
	internal void .ctor(CultureInfo culture) { }

	// RVA: 0x30B Offset: 0x30B VA: 0x30B
	public static CompareInfo GetCompareInfo(string name) { }

	[OnDeserializingAttribute] // RVA: 0x703 Offset: 0x703 VA: 0x703
	// RVA: 0x16D Offset: 0x16D VA: 0x16D
	private void OnDeserializing(StreamingContext ctx) { }

	// RVA: 0x34E Offset: 0x34E VA: 0x34E
	private void OnDeserialized() { }

	[OnDeserializedAttribute] // RVA: 0x704 Offset: 0x704 VA: 0x704
	// RVA: 0x16E Offset: 0x16E VA: 0x16E
	private void OnDeserialized(StreamingContext ctx) { }

	[OnSerializingAttribute] // RVA: 0x705 Offset: 0x705 VA: 0x705
	// RVA: 0x16F Offset: 0x16F VA: 0x16F
	private void OnSerializing(StreamingContext ctx) { }

	// RVA: 0x170 Offset: 0x170 VA: 0x170 Slot: 4
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x30C Offset: 0x30C VA: 0x30C Slot: 5
	public virtual string get_Name() { }

	// RVA: 0x872 Offset: 0x872 VA: 0x872 Slot: 6
	public virtual int Compare(string string1, string string2) { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65 Slot: 7
	public virtual int Compare(string string1, string string2, CompareOptions options) { }

	// RVA: 0xF Offset: 0xF VA: 0xF Slot: 8
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	private static int CompareOrdinal(string string1, int offset1, int length1, string string2, int offset2, int length2) { }

	// RVA: 0x66 Offset: 0x66 VA: 0x66 Slot: 9
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { }

	// RVA: 0x67 Offset: 0x67 VA: 0x67 Slot: 10
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F Slot: 11
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20 Slot: 12
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x873 Offset: 0x873 VA: 0x873 Slot: 13
	public virtual SortKey GetSortKey(string source, CompareOptions options) { }

	// RVA: 0x874 Offset: 0x874 VA: 0x874
	private SortKey CreateSortKey(string source, CompareOptions options) { }

	// RVA: 0x1DF Offset: 0x1DF VA: 0x1DF Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x30D Offset: 0x30D VA: 0x30D Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x875 Offset: 0x875 VA: 0x875
	internal int GetHashCodeOfString(string source, CompareOptions options) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal int GetHashCodeOfString(string source, CompareOptions options, bool forceRandomizedHashing, long additionalEntropy) { }

	// RVA: 0x30E Offset: 0x30E VA: 0x30E Slot: 3
	public override string ToString() { }

	// RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3
	private static bool get_UseManagedCollation() { }

	// RVA: 0x30F Offset: 0x30F VA: 0x30F
	private SimpleCollator GetCollator() { }

	// RVA: 0x876 Offset: 0x876 VA: 0x876
	private SortKey CreateSortKeyCore(string source, CompareOptions options) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x6A Offset: 0x6A VA: 0x6A
	private void assign_sortkey(object key, string source, CompareOptions options) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first) { }

	// RVA: 0x34F Offset: 0x34F VA: 0x34F
	internal void .ctor() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3CC Offset: 0x3CC VA: 0x3CC
[Serializable]
public class CultureNotFoundException : ArgumentException, ISerializable // TypeDefIndex: 621
{
	// Fields
	private string m_invalidCultureName; // 0x48
	private Nullable<int> m_invalidCultureId; // 0x4C

	// Properties
	public virtual Nullable<int> InvalidCultureId { get; }
	public virtual string InvalidCultureName { get; }
	private static string DefaultMessage { get; }
	private string FormatedInvalidCultureId { get; }
	public override string Message { get; }

	// Methods

	// RVA: 0x354 Offset: 0x354 VA: 0x354
	public void .ctor() { }

	// RVA: 0x138 Offset: 0x138 VA: 0x138
	public void .ctor(string paramName, string message) { }

	// RVA: 0x6D Offset: 0x6D VA: 0x6D
	public void .ctor(string paramName, string invalidCultureName, string message) { }

	// RVA: 0x139 Offset: 0x139 VA: 0x139
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x13A Offset: 0x13A VA: 0x13A Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x17C Offset: 0x17C VA: 0x17C Slot: 11
	public virtual Nullable<int> get_InvalidCultureId() { }

	// RVA: 0x33B Offset: 0x33B VA: 0x33B Slot: 12
	public virtual string get_InvalidCultureName() { }

	// RVA: 0x1BF Offset: 0x1BF VA: 0x1BF
	private static string get_DefaultMessage() { }

	// RVA: 0x33C Offset: 0x33C VA: 0x33C
	private string get_FormatedInvalidCultureId() { }

	// RVA: 0x33D Offset: 0x33D VA: 0x33D Slot: 5
	public override string get_Message() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3CD Offset: 0x3CD VA: 0x3CD
[FlagsAttribute] // RVA: 0x3CD Offset: 0x3CD VA: 0x3CD
[Serializable]
public enum CultureTypes // TypeDefIndex: 622
{
	// Fields
	public int value__; // 0x0
	public const CultureTypes NeutralCultures = 1;
	public const CultureTypes SpecificCultures = 2;
	public const CultureTypes InstalledWin32Cultures = 4;
	public const CultureTypes AllCultures = 7;
	public const CultureTypes UserCustomCulture = 8;
	public const CultureTypes ReplacementCultures = 16;
	[ObsoleteAttribute] // RVA: 0x56C Offset: 0x56C VA: 0x56C
	public const CultureTypes WindowsOnlyCultures = 32;
	[ObsoleteAttribute] // RVA: 0x56D Offset: 0x56D VA: 0x56D
	public const CultureTypes FrameworkCultures = 64;
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x3CE Offset: 0x3CE VA: 0x3CE
internal enum MonthNameStyles // TypeDefIndex: 623
{
	// Fields
	public int value__; // 0x0
	public const MonthNameStyles Regular = 0;
	public const MonthNameStyles Genitive = 1;
	public const MonthNameStyles LeapYear = 2;
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x3CF Offset: 0x3CF VA: 0x3CF
internal enum DateTimeFormatFlags // TypeDefIndex: 624
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatFlags None = 0;
	public const DateTimeFormatFlags UseGenitiveMonth = 1;
	public const DateTimeFormatFlags UseLeapYearMonth = 2;
	public const DateTimeFormatFlags UseSpacesInMonthNames = 4;
	public const DateTimeFormatFlags UseHebrewRule = 8;
	public const DateTimeFormatFlags UseSpacesInDayNames = 16;
	public const DateTimeFormatFlags UseDigitPrefixInTokens = 32;
	public const DateTimeFormatFlags NotInitialized = -1;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D0 Offset: 0x3D0 VA: 0x3D0
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 625
{
	// Fields
	private static DateTimeFormatInfo invariantInfo; // 0x0
	private CultureData m_cultureData; // 0x8
	[OptionalFieldAttribute] // RVA: 0x56E Offset: 0x56E VA: 0x56E
	internal string m_name; // 0xC
	private string m_langName; // 0x10
	private CompareInfo m_compareInfo; // 0x14
	private CultureInfo m_cultureInfo; // 0x18
	internal string amDesignator; // 0x1C
	internal string pmDesignator; // 0x20
	[OptionalFieldAttribute] // RVA: 0x56F Offset: 0x56F VA: 0x56F
	internal string dateSeparator; // 0x24
	[OptionalFieldAttribute] // RVA: 0x570 Offset: 0x570 VA: 0x570
	internal string generalShortTimePattern; // 0x28
	[OptionalFieldAttribute] // RVA: 0x571 Offset: 0x571 VA: 0x571
	internal string generalLongTimePattern; // 0x2C
	[OptionalFieldAttribute] // RVA: 0x572 Offset: 0x572 VA: 0x572
	internal string timeSeparator; // 0x30
	internal string monthDayPattern; // 0x34
	[OptionalFieldAttribute] // RVA: 0x573 Offset: 0x573 VA: 0x573
	internal string dateTimeOffsetPattern; // 0x38
	internal const string rfc1123Pattern = "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'";
	internal const string sortableDateTimePattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss";
	internal const string universalSortableDateTimePattern = "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'";
	internal Calendar calendar; // 0x3C
	internal int firstDayOfWeek; // 0x40
	internal int calendarWeekRule; // 0x44
	[OptionalFieldAttribute] // RVA: 0x574 Offset: 0x574 VA: 0x574
	internal string fullDateTimePattern; // 0x48
	internal string[] abbreviatedDayNames; // 0x4C
	[OptionalFieldAttribute] // RVA: 0x575 Offset: 0x575 VA: 0x575
	internal string[] m_superShortDayNames; // 0x50
	internal string[] dayNames; // 0x54
	internal string[] abbreviatedMonthNames; // 0x58
	internal string[] monthNames; // 0x5C
	[OptionalFieldAttribute] // RVA: 0x576 Offset: 0x576 VA: 0x576
	internal string[] genitiveMonthNames; // 0x60
	[OptionalFieldAttribute] // RVA: 0x577 Offset: 0x577 VA: 0x577
	internal string[] m_genitiveAbbreviatedMonthNames; // 0x64
	[OptionalFieldAttribute] // RVA: 0x578 Offset: 0x578 VA: 0x578
	internal string[] leapYearMonthNames; // 0x68
	internal string longDatePattern; // 0x6C
	internal string shortDatePattern; // 0x70
	internal string yearMonthPattern; // 0x74
	internal string longTimePattern; // 0x78
	internal string shortTimePattern; // 0x7C
	[OptionalFieldAttribute] // RVA: 0x579 Offset: 0x579 VA: 0x579
	private string[] allYearMonthPatterns; // 0x80
	internal string[] allShortDatePatterns; // 0x84
	internal string[] allLongDatePatterns; // 0x88
	internal string[] allShortTimePatterns; // 0x8C
	internal string[] allLongTimePatterns; // 0x90
	internal string[] m_eraNames; // 0x94
	internal string[] m_abbrevEraNames; // 0x98
	internal string[] m_abbrevEnglishEraNames; // 0x9C
	internal int[] optionalCalendars; // 0xA0
	private const int DEFAULT_ALL_DATETIMES_SIZE = 132;
	internal bool m_isReadOnly; // 0xA4
	[OptionalFieldAttribute] // RVA: 0x57A Offset: 0x57A VA: 0x57A
	internal DateTimeFormatFlags formatFlags; // 0xA8
	internal static bool preferExistingTokens; // 0x4
	[OptionalFieldAttribute] // RVA: 0x57B Offset: 0x57B VA: 0x57B
	private int CultureID; // 0xAC
	[OptionalFieldAttribute] // RVA: 0x57C Offset: 0x57C VA: 0x57C
	private bool m_useUserOverride; // 0xB0
	[OptionalFieldAttribute] // RVA: 0x57D Offset: 0x57D VA: 0x57D
	private bool bUseCalendarInfo; // 0xB1
	[OptionalFieldAttribute] // RVA: 0x57E Offset: 0x57E VA: 0x57E
	private int nDataItem; // 0xB4
	[OptionalFieldAttribute] // RVA: 0x57F Offset: 0x57F VA: 0x57F
	internal bool m_isDefaultCalendar; // 0xB8
	[OptionalFieldAttribute] // RVA: 0x580 Offset: 0x580 VA: 0x580
	private static Hashtable s_calendarNativeNames; // 0x8
	[OptionalFieldAttribute] // RVA: 0x581 Offset: 0x581 VA: 0x581
	internal string[] m_dateWords; // 0xBC
	private string m_fullTimeSpanPositivePattern; // 0xC0
	private string m_fullTimeSpanNegativePattern; // 0xC4
	internal const DateTimeStyles InvalidDateTimeStyles = -256;
	private TokenHashValue[] m_dtfiTokenHash; // 0xC8
	private const int TOKEN_HASH_SIZE = 199;
	private const int SECOND_PRIME = 197;
	private const string dateSeparatorOrTimeZoneOffset = "-";
	private const string invariantDateSeparator = "/";
	private const string invariantTimeSeparator = ":";
	internal const string IgnorablePeriod = ".";
	internal const string IgnorableComma = ",";
	internal const string CJKYearSuff = "年";
	internal const string CJKMonthSuff = "月";
	internal const string CJKDaySuff = "日";
	internal const string KoreanYearSuff = "년";
	internal const string KoreanMonthSuff = "월";
	internal const string KoreanDaySuff = "일";
	internal const string KoreanHourSuff = "시";
	internal const string KoreanMinuteSuff = "분";
	internal const string KoreanSecondSuff = "초";
	internal const string CJKHourSuff = "時";
	internal const string ChineseHourSuff = "时";
	internal const string CJKMinuteSuff = "分";
	internal const string CJKSecondSuff = "秒";
	internal const string LocalTimeMark = "T";
	internal const string KoreanLangName = "ko";
	internal const string JapaneseLangName = "ja";
	internal const string EnglishLangName = "en";
	private static DateTimeFormatInfo s_jajpDTFI; // 0xC
	private static DateTimeFormatInfo s_zhtwDTFI; // 0x10

	// Properties
	private string CultureName { get; }
	private CultureInfo Culture { get; }
	private string LanguageName { get; }
	public static DateTimeFormatInfo InvariantInfo { get; }
	public static DateTimeFormatInfo CurrentInfo { get; }
	public string AMDesignator { get; }
	public Calendar Calendar { get; set; }
	private int[] OptionalCalendars { get; }
	internal string[] EraNames { get; }
	internal string[] AbbreviatedEraNames { get; }
	internal string[] AbbreviatedEnglishEraNames { get; }
	public string DateSeparator { get; }
	public string FullDateTimePattern { get; }
	public string LongDatePattern { get; set; }
	public string LongTimePattern { get; set; }
	public string MonthDayPattern { get; }
	public string PMDesignator { get; }
	public string RFC1123Pattern { get; }
	public string ShortDatePattern { get; set; }
	public string ShortTimePattern { get; set; }
	public string SortableDateTimePattern { get; }
	internal string GeneralShortTimePattern { get; }
	internal string GeneralLongTimePattern { get; }
	internal string DateTimeOffsetPattern { get; }
	public string TimeSeparator { get; }
	public string UniversalSortableDateTimePattern { get; }
	public string YearMonthPattern { get; set; }
	public string[] AbbreviatedDayNames { get; }
	public string[] DayNames { get; }
	public string[] AbbreviatedMonthNames { get; }
	public string[] MonthNames { get; }
	internal bool HasSpacesInMonthNames { get; }
	internal bool HasSpacesInDayNames { get; }
	private string[] AllYearMonthPatterns { get; }
	private string[] AllShortDatePatterns { get; }
	private string[] AllShortTimePatterns { get; }
	private string[] AllLongDatePatterns { get; }
	private string[] AllLongTimePatterns { get; }
	private string[] UnclonedYearMonthPatterns { get; }
	private string[] UnclonedShortDatePatterns { get; }
	private string[] UnclonedLongDatePatterns { get; }
	private string[] UnclonedShortTimePatterns { get; }
	private string[] UnclonedLongTimePatterns { get; }
	public bool IsReadOnly { get; }
	internal string FullTimeSpanPositivePattern { get; }
	internal string FullTimeSpanNegativePattern { get; }
	internal CompareInfo CompareInfo { get; }
	internal DateTimeFormatFlags FormatFlags { get; }
	internal bool HasForceTwoDigitYears { get; }

	// Methods

	// RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0
	private static bool InitPreferExistingTokens() { }

	// RVA: 0x33E Offset: 0x33E VA: 0x33E
	private string get_CultureName() { }

	// RVA: 0x33F Offset: 0x33F VA: 0x33F
	private CultureInfo get_Culture() { }

	// RVA: 0x340 Offset: 0x340 VA: 0x340
	private string get_LanguageName() { }

	// RVA: 0x341 Offset: 0x341 VA: 0x341
	private string[] internalGetAbbreviatedDayOfWeekNames() { }

	// RVA: 0x342 Offset: 0x342 VA: 0x342
	private string[] internalGetDayOfWeekNames() { }

	// RVA: 0x343 Offset: 0x343 VA: 0x343
	private string[] internalGetAbbreviatedMonthNames() { }

	// RVA: 0x344 Offset: 0x344 VA: 0x344
	private string[] internalGetMonthNames() { }

	// RVA: 0x355 Offset: 0x355 VA: 0x355
	public void .ctor() { }

	// RVA: 0x13B Offset: 0x13B VA: 0x13B
	internal void .ctor(CultureData cultureData, Calendar cal) { }

	// RVA: 0x13C Offset: 0x13C VA: 0x13C
	private void InitializeOverridableProperties(CultureData cultureData, int calendarID) { }

	[OnDeserializedAttribute] // RVA: 0x706 Offset: 0x706 VA: 0x706
	// RVA: 0x17D Offset: 0x17D VA: 0x17D
	private void OnDeserialized(StreamingContext ctx) { }

	[OnSerializingAttribute] // RVA: 0x707 Offset: 0x707 VA: 0x707
	// RVA: 0x17E Offset: 0x17E VA: 0x17E
	private void OnSerializing(StreamingContext ctx) { }

	// RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1
	public static DateTimeFormatInfo get_InvariantInfo() { }

	// RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2
	public static DateTimeFormatInfo get_CurrentInfo() { }

	// RVA: 0x345 Offset: 0x345 VA: 0x345
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { }

	// RVA: 0x1FA Offset: 0x1FA VA: 0x1FA Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x346 Offset: 0x346 VA: 0x346 Slot: 4
	public object Clone() { }

	// RVA: 0x347 Offset: 0x347 VA: 0x347
	public string get_AMDesignator() { }

	// RVA: 0x348 Offset: 0x348 VA: 0x348
	public Calendar get_Calendar() { }

	// RVA: 0x17F Offset: 0x17F VA: 0x17F
	public void set_Calendar(Calendar value) { }

	// RVA: 0x349 Offset: 0x349 VA: 0x349
	private int[] get_OptionalCalendars() { }

	// RVA: 0x34A Offset: 0x34A VA: 0x34A
	internal string[] get_EraNames() { }

	// RVA: 0x1FB Offset: 0x1FB VA: 0x1FB
	public string GetEraName(int era) { }

	// RVA: 0x34B Offset: 0x34B VA: 0x34B
	internal string[] get_AbbreviatedEraNames() { }

	// RVA: 0x1FC Offset: 0x1FC VA: 0x1FC
	public string GetAbbreviatedEraName(int era) { }

	// RVA: 0x34C Offset: 0x34C VA: 0x34C
	internal string[] get_AbbreviatedEnglishEraNames() { }

	// RVA: 0x34D Offset: 0x34D VA: 0x34D
	public string get_DateSeparator() { }

	// RVA: 0x34E Offset: 0x34E VA: 0x34E
	public string get_FullDateTimePattern() { }

	// RVA: 0x34F Offset: 0x34F VA: 0x34F
	public string get_LongDatePattern() { }

	// RVA: 0x180 Offset: 0x180 VA: 0x180
	public void set_LongDatePattern(string value) { }

	// RVA: 0x350 Offset: 0x350 VA: 0x350
	public string get_LongTimePattern() { }

	// RVA: 0x181 Offset: 0x181 VA: 0x181
	public void set_LongTimePattern(string value) { }

	// RVA: 0x351 Offset: 0x351 VA: 0x351
	public string get_MonthDayPattern() { }

	// RVA: 0x352 Offset: 0x352 VA: 0x352
	public string get_PMDesignator() { }

	// RVA: 0x353 Offset: 0x353 VA: 0x353
	public string get_RFC1123Pattern() { }

	// RVA: 0x354 Offset: 0x354 VA: 0x354
	public string get_ShortDatePattern() { }

	// RVA: 0x182 Offset: 0x182 VA: 0x182
	public void set_ShortDatePattern(string value) { }

	// RVA: 0x355 Offset: 0x355 VA: 0x355
	public string get_ShortTimePattern() { }

	// RVA: 0x183 Offset: 0x183 VA: 0x183
	public void set_ShortTimePattern(string value) { }

	// RVA: 0x356 Offset: 0x356 VA: 0x356
	public string get_SortableDateTimePattern() { }

	// RVA: 0x357 Offset: 0x357 VA: 0x357
	internal string get_GeneralShortTimePattern() { }

	// RVA: 0x358 Offset: 0x358 VA: 0x358
	internal string get_GeneralLongTimePattern() { }

	// RVA: 0x359 Offset: 0x359 VA: 0x359
	internal string get_DateTimeOffsetPattern() { }

	// RVA: 0x35A Offset: 0x35A VA: 0x35A
	public string get_TimeSeparator() { }

	// RVA: 0x35B Offset: 0x35B VA: 0x35B
	public string get_UniversalSortableDateTimePattern() { }

	// RVA: 0x35C Offset: 0x35C VA: 0x35C
	public string get_YearMonthPattern() { }

	// RVA: 0x184 Offset: 0x184 VA: 0x184
	public void set_YearMonthPattern(string value) { }

	// RVA: 0x35D Offset: 0x35D VA: 0x35D
	public string[] get_AbbreviatedDayNames() { }

	// RVA: 0x35E Offset: 0x35E VA: 0x35E
	public string[] get_DayNames() { }

	// RVA: 0x35F Offset: 0x35F VA: 0x35F
	public string[] get_AbbreviatedMonthNames() { }

	// RVA: 0x360 Offset: 0x360 VA: 0x360
	public string[] get_MonthNames() { }

	// RVA: 0x361 Offset: 0x361 VA: 0x361
	internal bool get_HasSpacesInMonthNames() { }

	// RVA: 0x362 Offset: 0x362 VA: 0x362
	internal bool get_HasSpacesInDayNames() { }

	// RVA: 0x68 Offset: 0x68 VA: 0x68
	internal string internalGetMonthName(int month, MonthNameStyles style, bool abbreviated) { }

	// RVA: 0x1FD Offset: 0x1FD VA: 0x1FD
	private string[] internalGetGenitiveMonthNames(bool abbreviated) { }

	// RVA: 0x363 Offset: 0x363 VA: 0x363
	internal string[] internalGetLeapYearMonthNames() { }

	// RVA: 0x1FE Offset: 0x1FE VA: 0x1FE
	public string GetAbbreviatedDayName(DayOfWeek dayofweek) { }

	// RVA: 0x87A Offset: 0x87A VA: 0x87A
	private static string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString) { }

	// RVA: 0x1FF Offset: 0x1FF VA: 0x1FF
	public string[] GetAllDateTimePatterns(char format) { }

	// RVA: 0x200 Offset: 0x200 VA: 0x200
	public string GetDayName(DayOfWeek dayofweek) { }

	// RVA: 0x201 Offset: 0x201 VA: 0x201
	public string GetAbbreviatedMonthName(int month) { }

	// RVA: 0x202 Offset: 0x202 VA: 0x202
	public string GetMonthName(int month) { }

	// RVA: 0x203 Offset: 0x203 VA: 0x203
	private static string[] GetMergedPatterns(string[] patterns, string defaultPattern) { }

	// RVA: 0x364 Offset: 0x364 VA: 0x364
	private string[] get_AllYearMonthPatterns() { }

	// RVA: 0x365 Offset: 0x365 VA: 0x365
	private string[] get_AllShortDatePatterns() { }

	// RVA: 0x366 Offset: 0x366 VA: 0x366
	private string[] get_AllShortTimePatterns() { }

	// RVA: 0x367 Offset: 0x367 VA: 0x367
	private string[] get_AllLongDatePatterns() { }

	// RVA: 0x368 Offset: 0x368 VA: 0x368
	private string[] get_AllLongTimePatterns() { }

	// RVA: 0x369 Offset: 0x369 VA: 0x369
	private string[] get_UnclonedYearMonthPatterns() { }

	// RVA: 0x36A Offset: 0x36A VA: 0x36A
	private string[] get_UnclonedShortDatePatterns() { }

	// RVA: 0x36B Offset: 0x36B VA: 0x36B
	private string[] get_UnclonedLongDatePatterns() { }

	// RVA: 0x36C Offset: 0x36C VA: 0x36C
	private string[] get_UnclonedShortTimePatterns() { }

	// RVA: 0x36D Offset: 0x36D VA: 0x36D
	private string[] get_UnclonedLongTimePatterns() { }

	// RVA: 0x36E Offset: 0x36E VA: 0x36E
	public bool get_IsReadOnly() { }

	// RVA: 0x36F Offset: 0x36F VA: 0x36F
	internal string get_FullTimeSpanPositivePattern() { }

	// RVA: 0x370 Offset: 0x370 VA: 0x370
	internal string get_FullTimeSpanNegativePattern() { }

	// RVA: 0x371 Offset: 0x371 VA: 0x371
	internal CompareInfo get_CompareInfo() { }

	// RVA: 0x372 Offset: 0x372 VA: 0x372
	internal DateTimeFormatFlags get_FormatFlags() { }

	// RVA: 0x373 Offset: 0x373 VA: 0x373
	internal bool get_HasForceTwoDigitYears() { }

	// RVA: 0x69 Offset: 0x69 VA: 0x69
	internal bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName) { }

	// RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3
	internal static DateTimeFormatInfo GetJapaneseCalendarDTFI() { }

	// RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4
	internal static DateTimeFormatInfo GetTaiwanCalendarDTFI() { }

	// RVA: 0x356 Offset: 0x356 VA: 0x356
	private void ClearTokenHashTable() { }

	// RVA: 0x374 Offset: 0x374 VA: 0x374
	internal TokenHashValue[] CreateTokenHashTable() { }

	// RVA: 0x13D Offset: 0x13D VA: 0x13D
	private void AddMonthNames(TokenHashValue[] temp, string monthPostfix) { }

	// RVA: 0x87B Offset: 0x87B VA: 0x87B
	private static bool TryParseHebrewNumber(ref __DTString str, out bool badFormat, out int number) { }

	// RVA: 0x375 Offset: 0x375 VA: 0x375
	private static bool IsHebrewChar(char ch) { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	internal bool Tokenize(TokenType TokenMask, out TokenType tokenType, out int tokenValue, ref __DTString str) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	private void InsertAtCurrentHashNode(TokenHashValue[] hashTable, string str, char ch, TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39
	private void InsertHash(TokenHashValue[] hashTable, string str, TokenType tokenType, int tokenValue) { }

	// RVA: 0xE86 Offset: 0xE86 VA: 0xE86
	private static void .cctor() { }
}

// Namespace: System.Globalization
internal class TokenHashValue // TypeDefIndex: 626
{
	// Fields
	internal string tokenString; // 0x8
	internal TokenType tokenType; // 0xC
	internal int tokenValue; // 0x10

	// Methods

	// RVA: 0x6F Offset: 0x6F VA: 0x6F
	internal void .ctor(string tokenString, TokenType tokenType, int tokenValue) { }
}

// Namespace: System.Globalization
internal enum FORMATFLAGS // TypeDefIndex: 627
{
	// Fields
	public int value__; // 0x0
	public const FORMATFLAGS None = 0;
	public const FORMATFLAGS UseGenitiveMonth = 1;
	public const FORMATFLAGS UseLeapYearMonth = 2;
	public const FORMATFLAGS UseSpacesInMonthNames = 4;
	public const FORMATFLAGS UseHebrewParsing = 8;
	public const FORMATFLAGS UseSpacesInDayNames = 16;
	public const FORMATFLAGS UseDigitPrefixInTokens = 32;
}

// Namespace: System.Globalization
internal enum CalendarId // TypeDefIndex: 628
{
	// Fields
	public ushort value__; // 0x0
	public const CalendarId GREGORIAN = 1;
	public const CalendarId GREGORIAN_US = 2;
	public const CalendarId JAPAN = 3;
	public const CalendarId TAIWAN = 4;
	public const CalendarId KOREA = 5;
	public const CalendarId HIJRI = 6;
	public const CalendarId THAI = 7;
	public const CalendarId HEBREW = 8;
	public const CalendarId GREGORIAN_ME_FRENCH = 9;
	public const CalendarId GREGORIAN_ARABIC = 10;
	public const CalendarId GREGORIAN_XLIT_ENGLISH = 11;
	public const CalendarId GREGORIAN_XLIT_FRENCH = 12;
	public const CalendarId JULIAN = 13;
	public const CalendarId JAPANESELUNISOLAR = 14;
	public const CalendarId CHINESELUNISOLAR = 15;
	public const CalendarId SAKA = 16;
	public const CalendarId LUNAR_ETO_CHN = 17;
	public const CalendarId LUNAR_ETO_KOR = 18;
	public const CalendarId LUNAR_ETO_ROKUYOU = 19;
	public const CalendarId KOREANLUNISOLAR = 20;
	public const CalendarId TAIWANLUNISOLAR = 21;
	public const CalendarId PERSIAN = 22;
	public const CalendarId UMALQURA = 23;
	public const CalendarId LAST_CALENDAR = 23;
}

// Namespace: System.Globalization
internal class DateTimeFormatInfoScanner // TypeDefIndex: 629
{
	// Fields
	internal List<string> m_dateWords; // 0x8
	private static Dictionary<string, string> s_knownWords; // 0x0
	private DateTimeFormatInfoScanner.FoundDatePattern m_ymdFlags; // 0xC

	// Properties
	private static Dictionary<string, string> KnownWords { get; }

	// Methods

	// RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5
	private static Dictionary<string, string> get_KnownWords() { }

	// RVA: 0x204 Offset: 0x204 VA: 0x204
	internal static int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex) { }

	// RVA: 0x13E Offset: 0x13E VA: 0x13E
	internal void AddDateWordOrPostfix(string formatPostfix, string str) { }

	// RVA: 0x6A Offset: 0x6A VA: 0x6A
	internal int AddDateWords(string pattern, int index, string formatPostfix) { }

	// RVA: 0x6B Offset: 0x6B VA: 0x6B
	internal static int ScanRepeatChar(string pattern, char ch, int index, out int count) { }

	// RVA: 0x185 Offset: 0x185 VA: 0x185
	internal void AddIgnorableSymbols(string text) { }

	// RVA: 0x186 Offset: 0x186 VA: 0x186
	internal void ScanDateWord(string pattern) { }

	// RVA: 0x205 Offset: 0x205 VA: 0x205
	internal string[] GetDateWordsOfDTFI(DateTimeFormatInfo dtfi) { }

	// RVA: 0x6C Offset: 0x6C VA: 0x6C
	internal static FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames) { }

	// RVA: 0x6D Offset: 0x6D VA: 0x6D
	internal static FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames) { }

	// RVA: 0x206 Offset: 0x206 VA: 0x206
	internal static FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames) { }

	// RVA: 0x376 Offset: 0x376 VA: 0x376
	internal static FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID) { }

	// RVA: 0x207 Offset: 0x207 VA: 0x207
	private static bool EqualStringArrays(string[] array1, string[] array2) { }

	// RVA: 0x377 Offset: 0x377 VA: 0x377
	private static bool ArrayElementsHaveSpace(string[] array) { }

	// RVA: 0x378 Offset: 0x378 VA: 0x378
	private static bool ArrayElementsBeginWithDigit(string[] array) { }

	// RVA: 0x357 Offset: 0x357 VA: 0x357
	public void .ctor() { }
}

// Namespace: 
private enum DateTimeFormatInfoScanner.FoundDatePattern // TypeDefIndex: 630
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatInfoScanner.FoundDatePattern None = 0;
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundYearPatternFlag = 1;
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundMonthPatternFlag = 2;
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundDayPatternFlag = 4;
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundYMDPatternFlag = 7;
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1
[ComVisibleAttribute] // RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 631
{
	// Fields
	public int value__; // 0x0
	public const DateTimeStyles None = 0;
	public const DateTimeStyles AllowLeadingWhite = 1;
	public const DateTimeStyles AllowTrailingWhite = 2;
	public const DateTimeStyles AllowInnerWhite = 4;
	public const DateTimeStyles AllowWhiteSpaces = 7;
	public const DateTimeStyles NoCurrentDateDefault = 8;
	public const DateTimeStyles AdjustToUniversal = 16;
	public const DateTimeStyles AssumeLocal = 32;
	public const DateTimeStyles AssumeUniversal = 64;
	public const DateTimeStyles RoundtripKind = 128;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D2 Offset: 0x3D2 VA: 0x3D2
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 632
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x14
	internal static readonly int[] DaysToMonth365; // 0x0
	internal static readonly int[] DaysToMonth366; // 0x4
	private static Calendar s_defaultInstance; // 0x8

	// Properties
	[ComVisibleAttribute] // RVA: 0x7FB Offset: 0x7FB VA: 0x7FB
	public override DateTime MinSupportedDateTime { get; }
	[ComVisibleAttribute] // RVA: 0x7FC Offset: 0x7FC VA: 0x7FC
	public override DateTime MaxSupportedDateTime { get; }
	internal override int ID { get; }
	public override int[] Eras { get; }
	public override int TwoDigitYearMax { get; }

	// Methods

	[OnDeserializedAttribute] // RVA: 0x708 Offset: 0x708 VA: 0x708
	// RVA: 0x187 Offset: 0x187 VA: 0x187
	private void OnDeserialized(StreamingContext ctx) { }

	// RVA: 0x3D Offset: 0x3D VA: 0x3D Slot: 5
	public override DateTime get_MinSupportedDateTime() { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E Slot: 6
	public override DateTime get_MaxSupportedDateTime() { }

	// RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7
	internal static Calendar GetDefaultInstance() { }

	// RVA: 0x358 Offset: 0x358 VA: 0x358
	public void .ctor() { }

	// RVA: 0x188 Offset: 0x188 VA: 0x188
	public void .ctor(GregorianCalendarTypes type) { }

	// RVA: 0x37C Offset: 0x37C VA: 0x37C Slot: 7
	internal override int get_ID() { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6 Slot: 28
	internal virtual int GetDatePart(long ticks, int part) { }

	// RVA: 0x208 Offset: 0x208 VA: 0x208 Slot: 11
	public override int GetDayOfMonth(DateTime time) { }

	// RVA: 0x209 Offset: 0x209 VA: 0x209 Slot: 12
	public override DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x6E Offset: 0x6E VA: 0x6E Slot: 13
	public override int GetDaysInMonth(int year, int month, int era) { }

	// RVA: 0x20A Offset: 0x20A VA: 0x20A Slot: 14
	public override int GetEra(DateTime time) { }

	// RVA: 0x37D Offset: 0x37D VA: 0x37D Slot: 15
	public override int[] get_Eras() { }

	// RVA: 0x20B Offset: 0x20B VA: 0x20B Slot: 16
	public override int GetMonth(DateTime time) { }

	// RVA: 0x87C Offset: 0x87C VA: 0x87C Slot: 17
	public override int GetMonthsInYear(int year, int era) { }

	// RVA: 0x20C Offset: 0x20C VA: 0x20C Slot: 18
	public override int GetYear(DateTime time) { }

	// RVA: 0x87D Offset: 0x87D VA: 0x87D Slot: 20
	public override bool IsLeapYear(int year, int era) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 21
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 22
	internal override bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result) { }

	// RVA: 0x37E Offset: 0x37E VA: 0x37E Slot: 26
	public override int get_TwoDigitYearMax() { }

	// RVA: 0x20D Offset: 0x20D VA: 0x20D Slot: 27
	public override int ToFourDigitYear(int year) { }

	// RVA: 0xE88 Offset: 0xE88 VA: 0xE88
	private static void .cctor() { }
}

// Namespace: System.Globalization
[Serializable]
internal class EraInfo // TypeDefIndex: 633
{
	// Fields
	internal int era; // 0x8
	internal long ticks; // 0x10
	internal int yearOffset; // 0x18
	internal int minEraYear; // 0x1C
	internal int maxEraYear; // 0x20
	[OptionalFieldAttribute] // RVA: 0x582 Offset: 0x582 VA: 0x582
	internal string eraName; // 0x24
	[OptionalFieldAttribute] // RVA: 0x583 Offset: 0x583 VA: 0x583
	internal string abbrevEraName; // 0x28
	[OptionalFieldAttribute] // RVA: 0x584 Offset: 0x584 VA: 0x584
	internal string englishEraName; // 0x2C

	// Methods

	// RVA: 0xA Offset: 0xA VA: 0xA
	internal void .ctor(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName) { }
}

// Namespace: System.Globalization
[Serializable]
internal class GregorianCalendarHelper // TypeDefIndex: 634
{
	// Fields
	internal static readonly int[] DaysToMonth365; // 0x0
	internal static readonly int[] DaysToMonth366; // 0x4
	[OptionalFieldAttribute] // RVA: 0x585 Offset: 0x585 VA: 0x585
	internal int m_maxYear; // 0x8
	[OptionalFieldAttribute] // RVA: 0x586 Offset: 0x586 VA: 0x586
	internal int m_minYear; // 0xC
	internal Calendar m_Cal; // 0x10
	[OptionalFieldAttribute] // RVA: 0x587 Offset: 0x587 VA: 0x587
	internal EraInfo[] m_EraInfo; // 0x14
	[OptionalFieldAttribute] // RVA: 0x588 Offset: 0x588 VA: 0x588
	internal int[] m_eras; // 0x18
	[OptionalFieldAttribute] // RVA: 0x589 Offset: 0x589 VA: 0x589
	internal DateTime m_minDate; // 0x20

	// Properties
	internal int MaxYear { get; }
	public int[] Eras { get; }

	// Methods

	// RVA: 0x37F Offset: 0x37F VA: 0x37F
	internal int get_MaxYear() { }

	// RVA: 0x140 Offset: 0x140 VA: 0x140
	internal void .ctor(Calendar cal, EraInfo[] eraInfo) { }

	// RVA: 0x87E Offset: 0x87E VA: 0x87E
	internal int GetGregorianYear(int year, int era) { }

	// RVA: 0x87F Offset: 0x87F VA: 0x87F
	internal bool IsValidYear(int year, int era) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 4
	internal virtual int GetDatePart(long ticks, int part) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	internal static long GetAbsoluteDate(int year, int month, int day) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	internal static long DateToTicks(int year, int month, int day) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static long TimeToTicks(int hour, int minute, int second, int millisecond) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	internal void CheckTicksRange(long ticks) { }

	// RVA: 0x20E Offset: 0x20E VA: 0x20E
	public int GetDayOfMonth(DateTime time) { }

	// RVA: 0x20F Offset: 0x20F VA: 0x20F
	public DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x6F Offset: 0x6F VA: 0x6F
	public int GetDaysInMonth(int year, int month, int era) { }

	// RVA: 0x210 Offset: 0x210 VA: 0x210
	public int GetEra(DateTime time) { }

	// RVA: 0x380 Offset: 0x380 VA: 0x380
	public int[] get_Eras() { }

	// RVA: 0x211 Offset: 0x211 VA: 0x211
	public int GetMonth(DateTime time) { }

	// RVA: 0x880 Offset: 0x880 VA: 0x880
	public int GetMonthsInYear(int year, int era) { }

	// RVA: 0x212 Offset: 0x212 VA: 0x212
	public int GetYear(DateTime time) { }

	// RVA: 0x881 Offset: 0x881 VA: 0x881
	public bool IsLeapYear(int year, int era) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }

	// RVA: 0xE89 Offset: 0xE89 VA: 0xE89
	private static void .cctor() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D3 Offset: 0x3D3 VA: 0x3D3
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 635
{
	// Fields
	public int value__; // 0x0
	public const GregorianCalendarTypes Localized = 1;
	public const GregorianCalendarTypes USEnglish = 2;
	public const GregorianCalendarTypes MiddleEastFrench = 9;
	public const GregorianCalendarTypes Arabic = 10;
	public const GregorianCalendarTypes TransliteratedEnglish = 11;
	public const GregorianCalendarTypes TransliteratedFrench = 12;
}

// Namespace: System.Globalization
internal struct HebrewNumberParsingContext // TypeDefIndex: 636
{
	// Fields
	internal HebrewNumber.HS state; // 0x0
	internal int result; // 0x4

	// Methods

	// RVA: 0x189 Offset: 0x189 VA: 0x189
	public void .ctor(int result) { }
}

// Namespace: System.Globalization
internal enum HebrewNumberParsingState // TypeDefIndex: 637
{
	// Fields
	public int value__; // 0x0
	public const HebrewNumberParsingState InvalidHebrewNumber = 0;
	public const HebrewNumberParsingState NotHebrewDigit = 1;
	public const HebrewNumberParsingState FoundEndOfHebrewNumber = 2;
	public const HebrewNumberParsingState ContinueParsing = 3;
}

// Namespace: System.Globalization
internal class HebrewNumber // TypeDefIndex: 638
{
	// Fields
	private static HebrewNumber.HebrewValue[] HebrewValues; // 0x0
	private static char maxHebrewNumberCh; // 0x4
	private static readonly HebrewNumber.HS[][] NumberPasingState; // 0x8

	// Methods

	// RVA: 0x381 Offset: 0x381 VA: 0x381
	internal static string ToString(int Number) { }

	// RVA: 0x213 Offset: 0x213 VA: 0x213
	internal static HebrewNumberParsingState ParseByChar(char ch, ref HebrewNumberParsingContext context) { }

	// RVA: 0x382 Offset: 0x382 VA: 0x382
	internal static bool IsDigit(char ch) { }

	// RVA: 0xE8A Offset: 0xE8A VA: 0xE8A
	private static void .cctor() { }
}

// Namespace: 
private enum HebrewNumber.HebrewToken // TypeDefIndex: 639
{
	// Fields
	public int value__; // 0x0
	public const HebrewNumber.HebrewToken Invalid = -1;
	public const HebrewNumber.HebrewToken Digit400 = 0;
	public const HebrewNumber.HebrewToken Digit200_300 = 1;
	public const HebrewNumber.HebrewToken Digit100 = 2;
	public const HebrewNumber.HebrewToken Digit10 = 3;
	public const HebrewNumber.HebrewToken Digit1 = 4;
	public const HebrewNumber.HebrewToken Digit6_7 = 5;
	public const HebrewNumber.HebrewToken Digit7 = 6;
	public const HebrewNumber.HebrewToken Digit9 = 7;
	public const HebrewNumber.HebrewToken SingleQuote = 8;
	public const HebrewNumber.HebrewToken DoubleQuote = 9;
}

// Namespace: 
private class HebrewNumber.HebrewValue // TypeDefIndex: 640
{
	// Fields
	internal HebrewNumber.HebrewToken token; // 0x8
	internal int value; // 0xC

	// Methods

	// RVA: 0x141 Offset: 0x141 VA: 0x141
	internal void .ctor(HebrewNumber.HebrewToken token, int value) { }
}

// Namespace: 
internal enum HebrewNumber.HS // TypeDefIndex: 641
{
	// Fields
	public int value__; // 0x0
	public const HebrewNumber.HS _err = -1;
	public const HebrewNumber.HS Start = 0;
	public const HebrewNumber.HS S400 = 1;
	public const HebrewNumber.HS S400_400 = 2;
	public const HebrewNumber.HS S400_X00 = 3;
	public const HebrewNumber.HS S400_X0 = 4;
	public const HebrewNumber.HS X00_DQ = 5;
	public const HebrewNumber.HS S400_X00_X0 = 6;
	public const HebrewNumber.HS X0_DQ = 7;
	public const HebrewNumber.HS X = 8;
	public const HebrewNumber.HS X0 = 9;
	public const HebrewNumber.HS X00 = 10;
	public const HebrewNumber.HS S400_DQ = 11;
	public const HebrewNumber.HS S400_400_DQ = 12;
	public const HebrewNumber.HS S400_400_100 = 13;
	public const HebrewNumber.HS S9 = 14;
	public const HebrewNumber.HS X00_S9 = 15;
	public const HebrewNumber.HS S9_DQ = 16;
	public const HebrewNumber.HS END = 100;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D4 Offset: 0x3D4 VA: 0x3D4
[Serializable]
public class JapaneseCalendar : Calendar // TypeDefIndex: 642
{
	// Fields
	internal static readonly DateTime calendarMinValue; // 0x0
	internal static EraInfo[] japaneseEraInfo; // 0x8
	internal static Calendar s_defaultInstance; // 0xC
	internal GregorianCalendarHelper helper; // 0x14

	// Properties
	[ComVisibleAttribute] // RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	public override DateTime MinSupportedDateTime { get; }
	[ComVisibleAttribute] // RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	public override DateTime MaxSupportedDateTime { get; }
	internal override int ID { get; }
	public override int[] Eras { get; }
	public override int TwoDigitYearMax { get; }

	// Methods

	// RVA: 0x3F Offset: 0x3F VA: 0x3F Slot: 5
	public override DateTime get_MinSupportedDateTime() { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40 Slot: 6
	public override DateTime get_MaxSupportedDateTime() { }

	// RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8
	internal static EraInfo[] GetEraInfo() { }

	// RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9
	private static EraInfo[] GetErasFromRegistry() { }

	// RVA: 0x1CA Offset: 0x1CA VA: 0x1CA
	internal static Calendar GetDefaultInstance() { }

	// RVA: 0x35A Offset: 0x35A VA: 0x35A
	public void .ctor() { }

	// RVA: 0x384 Offset: 0x384 VA: 0x384 Slot: 7
	internal override int get_ID() { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72 Slot: 13
	public override int GetDaysInMonth(int year, int month, int era) { }

	// RVA: 0x217 Offset: 0x217 VA: 0x217 Slot: 11
	public override int GetDayOfMonth(DateTime time) { }

	// RVA: 0x218 Offset: 0x218 VA: 0x218 Slot: 12
	public override DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x885 Offset: 0x885 VA: 0x885 Slot: 17
	public override int GetMonthsInYear(int year, int era) { }

	// RVA: 0x219 Offset: 0x219 VA: 0x219 Slot: 14
	public override int GetEra(DateTime time) { }

	// RVA: 0x21A Offset: 0x21A VA: 0x21A Slot: 16
	public override int GetMonth(DateTime time) { }

	// RVA: 0x21B Offset: 0x21B VA: 0x21B Slot: 18
	public override int GetYear(DateTime time) { }

	// RVA: 0x886 Offset: 0x886 VA: 0x886 Slot: 20
	public override bool IsLeapYear(int year, int era) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 21
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }

	// RVA: 0x21C Offset: 0x21C VA: 0x21C Slot: 27
	public override int ToFourDigitYear(int year) { }

	// RVA: 0x385 Offset: 0x385 VA: 0x385 Slot: 15
	public override int[] get_Eras() { }

	// RVA: 0x1CB Offset: 0x1CB VA: 0x1CB
	internal static string[] EraNames() { }

	// RVA: 0x1CC Offset: 0x1CC VA: 0x1CC
	internal static string[] AbbrevEraNames() { }

	// RVA: 0x1CD Offset: 0x1CD VA: 0x1CD
	internal static string[] EnglishEraNames() { }

	// RVA: 0x887 Offset: 0x887 VA: 0x887 Slot: 23
	internal override bool IsValidYear(int year, int era) { }

	// RVA: 0x386 Offset: 0x386 VA: 0x386 Slot: 26
	public override int get_TwoDigitYearMax() { }

	// RVA: 0xE8B Offset: 0xE8B VA: 0xE8B
	private static void .cctor() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D5 Offset: 0x3D5 VA: 0x3D5
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 643
{
	// Fields
	private static NumberFormatInfo invariantInfo; // 0x0
	internal int[] numberGroupSizes; // 0x8
	internal int[] currencyGroupSizes; // 0xC
	internal int[] percentGroupSizes; // 0x10
	internal string positiveSign; // 0x14
	internal string negativeSign; // 0x18
	internal string numberDecimalSeparator; // 0x1C
	internal string numberGroupSeparator; // 0x20
	internal string currencyGroupSeparator; // 0x24
	internal string currencyDecimalSeparator; // 0x28
	internal string currencySymbol; // 0x2C
	internal string ansiCurrencySymbol; // 0x30
	internal string nanSymbol; // 0x34
	internal string positiveInfinitySymbol; // 0x38
	internal string negativeInfinitySymbol; // 0x3C
	internal string percentDecimalSeparator; // 0x40
	internal string percentGroupSeparator; // 0x44
	internal string percentSymbol; // 0x48
	internal string perMilleSymbol; // 0x4C
	[OptionalFieldAttribute] // RVA: 0x58A Offset: 0x58A VA: 0x58A
	internal string[] nativeDigits; // 0x50
	[OptionalFieldAttribute] // RVA: 0x58B Offset: 0x58B VA: 0x58B
	internal int m_dataItem; // 0x54
	internal int numberDecimalDigits; // 0x58
	internal int currencyDecimalDigits; // 0x5C
	internal int currencyPositivePattern; // 0x60
	internal int currencyNegativePattern; // 0x64
	internal int numberNegativePattern; // 0x68
	internal int percentPositivePattern; // 0x6C
	internal int percentNegativePattern; // 0x70
	internal int percentDecimalDigits; // 0x74
	[OptionalFieldAttribute] // RVA: 0x58C Offset: 0x58C VA: 0x58C
	internal int digitSubstitution; // 0x78
	internal bool isReadOnly; // 0x7C
	[OptionalFieldAttribute] // RVA: 0x58D Offset: 0x58D VA: 0x58D
	internal bool m_useUserOverride; // 0x7D
	[OptionalFieldAttribute] // RVA: 0x58E Offset: 0x58E VA: 0x58E
	internal bool m_isInvariant; // 0x7E
	[OptionalFieldAttribute] // RVA: 0x58F Offset: 0x58F VA: 0x58F
	internal bool validForParseAsNumber; // 0x7F
	[OptionalFieldAttribute] // RVA: 0x590 Offset: 0x590 VA: 0x590
	internal bool validForParseAsCurrency; // 0x80
	private const NumberStyles InvalidNumberStyles = -1024;

	// Properties
	public static NumberFormatInfo InvariantInfo { get; }
	public int CurrencyDecimalDigits { get; }
	public string CurrencyDecimalSeparator { get; }
	public bool IsReadOnly { get; }
	public int[] CurrencyGroupSizes { get; }
	public int[] NumberGroupSizes { get; }
	public int[] PercentGroupSizes { get; }
	public string CurrencyGroupSeparator { get; }
	public string CurrencySymbol { get; }
	public static NumberFormatInfo CurrentInfo { get; }
	public string NaNSymbol { get; }
	public int CurrencyNegativePattern { get; }
	public int NumberNegativePattern { get; }
	public int PercentPositivePattern { get; }
	public int PercentNegativePattern { get; }
	public string NegativeInfinitySymbol { get; }
	public string NegativeSign { get; }
	public int NumberDecimalDigits { get; }
	public string NumberDecimalSeparator { get; }
	public string NumberGroupSeparator { get; }
	public int CurrencyPositivePattern { get; }
	public string PositiveInfinitySymbol { get; }
	public string PositiveSign { get; }
	public int PercentDecimalDigits { get; }
	public string PercentDecimalSeparator { get; }
	public string PercentGroupSeparator { get; }
	public string PercentSymbol { get; }
	public string PerMilleSymbol { get; }

	// Methods

	// RVA: 0x35B Offset: 0x35B VA: 0x35B
	public void .ctor() { }

	[OnSerializingAttribute] // RVA: 0x709 Offset: 0x709 VA: 0x709
	// RVA: 0x18A Offset: 0x18A VA: 0x18A
	private void OnSerializing(StreamingContext ctx) { }

	[OnDeserializingAttribute] // RVA: 0x70A Offset: 0x70A VA: 0x70A
	// RVA: 0x18B Offset: 0x18B VA: 0x18B
	private void OnDeserializing(StreamingContext ctx) { }

	[OnDeserializedAttribute] // RVA: 0x70B Offset: 0x70B VA: 0x70B
	// RVA: 0x18C Offset: 0x18C VA: 0x18C
	private void OnDeserialized(StreamingContext ctx) { }

	// RVA: 0x18D Offset: 0x18D VA: 0x18D
	internal void .ctor(CultureData cultureData) { }

	// RVA: 0x1CE Offset: 0x1CE VA: 0x1CE
	public static NumberFormatInfo get_InvariantInfo() { }

	// RVA: 0x387 Offset: 0x387 VA: 0x387
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { }

	// RVA: 0x388 Offset: 0x388 VA: 0x388 Slot: 4
	public object Clone() { }

	// RVA: 0x389 Offset: 0x389 VA: 0x389
	public int get_CurrencyDecimalDigits() { }

	// RVA: 0x38A Offset: 0x38A VA: 0x38A
	public string get_CurrencyDecimalSeparator() { }

	// RVA: 0x38B Offset: 0x38B VA: 0x38B
	public bool get_IsReadOnly() { }

	// RVA: 0x38C Offset: 0x38C VA: 0x38C
	public int[] get_CurrencyGroupSizes() { }

	// RVA: 0x38D Offset: 0x38D VA: 0x38D
	public int[] get_NumberGroupSizes() { }

	// RVA: 0x38E Offset: 0x38E VA: 0x38E
	public int[] get_PercentGroupSizes() { }

	// RVA: 0x38F Offset: 0x38F VA: 0x38F
	public string get_CurrencyGroupSeparator() { }

	// RVA: 0x390 Offset: 0x390 VA: 0x390
	public string get_CurrencySymbol() { }

	// RVA: 0x1CF Offset: 0x1CF VA: 0x1CF
	public static NumberFormatInfo get_CurrentInfo() { }

	// RVA: 0x391 Offset: 0x391 VA: 0x391
	public string get_NaNSymbol() { }

	// RVA: 0x392 Offset: 0x392 VA: 0x392
	public int get_CurrencyNegativePattern() { }

	// RVA: 0x393 Offset: 0x393 VA: 0x393
	public int get_NumberNegativePattern() { }

	// RVA: 0x394 Offset: 0x394 VA: 0x394
	public int get_PercentPositivePattern() { }

	// RVA: 0x395 Offset: 0x395 VA: 0x395
	public int get_PercentNegativePattern() { }

	// RVA: 0x396 Offset: 0x396 VA: 0x396
	public string get_NegativeInfinitySymbol() { }

	// RVA: 0x397 Offset: 0x397 VA: 0x397
	public string get_NegativeSign() { }

	// RVA: 0x398 Offset: 0x398 VA: 0x398
	public int get_NumberDecimalDigits() { }

	// RVA: 0x399 Offset: 0x399 VA: 0x399
	public string get_NumberDecimalSeparator() { }

	// RVA: 0x39A Offset: 0x39A VA: 0x39A
	public string get_NumberGroupSeparator() { }

	// RVA: 0x39B Offset: 0x39B VA: 0x39B
	public int get_CurrencyPositivePattern() { }

	// RVA: 0x39C Offset: 0x39C VA: 0x39C
	public string get_PositiveInfinitySymbol() { }

	// RVA: 0x39D Offset: 0x39D VA: 0x39D
	public string get_PositiveSign() { }

	// RVA: 0x39E Offset: 0x39E VA: 0x39E
	public int get_PercentDecimalDigits() { }

	// RVA: 0x39F Offset: 0x39F VA: 0x39F
	public string get_PercentDecimalSeparator() { }

	// RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
	public string get_PercentGroupSeparator() { }

	// RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
	public string get_PercentSymbol() { }

	// RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
	public string get_PerMilleSymbol() { }

	// RVA: 0x21D Offset: 0x21D VA: 0x21D Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x3A3 Offset: 0x3A3 VA: 0x3A3
	public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi) { }

	// RVA: 0x35C Offset: 0x35C VA: 0x35C
	internal static void ValidateParseStyleInteger(NumberStyles style) { }

	// RVA: 0x35D Offset: 0x35D VA: 0x35D
	internal static void ValidateParseStyleFloatingPoint(NumberStyles style) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6
[ComVisibleAttribute] // RVA: 0x3D6 Offset: 0x3D6 VA: 0x3D6
[Serializable]
public enum NumberStyles // TypeDefIndex: 644
{
	// Fields
	public int value__; // 0x0
	public const NumberStyles None = 0;
	public const NumberStyles AllowLeadingWhite = 1;
	public const NumberStyles AllowTrailingWhite = 2;
	public const NumberStyles AllowLeadingSign = 4;
	public const NumberStyles AllowTrailingSign = 8;
	public const NumberStyles AllowParentheses = 16;
	public const NumberStyles AllowDecimalPoint = 32;
	public const NumberStyles AllowThousands = 64;
	public const NumberStyles AllowExponent = 128;
	public const NumberStyles AllowCurrencySymbol = 256;
	public const NumberStyles AllowHexSpecifier = 512;
	public const NumberStyles Integer = 7;
	public const NumberStyles HexNumber = 515;
	public const NumberStyles Number = 111;
	public const NumberStyles Float = 167;
	public const NumberStyles Currency = 383;
	public const NumberStyles Any = 511;
}

// Namespace: System.Globalization
[Serializable]
public sealed class SortVersion : IEquatable<SortVersion> // TypeDefIndex: 645
{
	// Fields
	private int m_NlsVersion; // 0x8
	private Guid m_SortId; // 0xC

	// Methods

	// RVA: 0x223 Offset: 0x223 VA: 0x223 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224 Offset: 0x224 VA: 0x224 Slot: 4
	public bool Equals(SortVersion other) { }

	// RVA: 0x3B7 Offset: 0x3B7 VA: 0x3B7 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x225 Offset: 0x225 VA: 0x225
	public static bool op_Equality(SortVersion left, SortVersion right) { }

	// RVA: 0x226 Offset: 0x226 VA: 0x226
	public static bool op_Inequality(SortVersion left, SortVersion right) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D7 Offset: 0x3D7 VA: 0x3D7
[Serializable]
public class TaiwanCalendar : Calendar // TypeDefIndex: 646
{
	// Fields
	internal static EraInfo[] taiwanEraInfo; // 0x0
	internal static Calendar s_defaultInstance; // 0x4
	internal GregorianCalendarHelper helper; // 0x14
	internal static readonly DateTime calendarMinValue; // 0x8

	// Properties
	[ComVisibleAttribute] // RVA: 0x7FF Offset: 0x7FF VA: 0x7FF
	public override DateTime MinSupportedDateTime { get; }
	[ComVisibleAttribute] // RVA: 0x800 Offset: 0x800 VA: 0x800
	public override DateTime MaxSupportedDateTime { get; }
	internal override int ID { get; }
	public override int[] Eras { get; }
	public override int TwoDigitYearMax { get; }

	// Methods

	// RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1
	internal static Calendar GetDefaultInstance() { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41 Slot: 5
	public override DateTime get_MinSupportedDateTime() { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42 Slot: 6
	public override DateTime get_MaxSupportedDateTime() { }

	// RVA: 0x360 Offset: 0x360 VA: 0x360
	public void .ctor() { }

	// RVA: 0x3B8 Offset: 0x3B8 VA: 0x3B8 Slot: 7
	internal override int get_ID() { }

	// RVA: 0x73 Offset: 0x73 VA: 0x73 Slot: 13
	public override int GetDaysInMonth(int year, int month, int era) { }

	// RVA: 0x227 Offset: 0x227 VA: 0x227 Slot: 11
	public override int GetDayOfMonth(DateTime time) { }

	// RVA: 0x228 Offset: 0x228 VA: 0x228 Slot: 12
	public override DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x888 Offset: 0x888 VA: 0x888 Slot: 17
	public override int GetMonthsInYear(int year, int era) { }

	// RVA: 0x229 Offset: 0x229 VA: 0x229 Slot: 14
	public override int GetEra(DateTime time) { }

	// RVA: 0x22A Offset: 0x22A VA: 0x22A Slot: 16
	public override int GetMonth(DateTime time) { }

	// RVA: 0x22B Offset: 0x22B VA: 0x22B Slot: 18
	public override int GetYear(DateTime time) { }

	// RVA: 0x889 Offset: 0x889 VA: 0x889 Slot: 20
	public override bool IsLeapYear(int year, int era) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 21
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }

	// RVA: 0x3B9 Offset: 0x3B9 VA: 0x3B9 Slot: 15
	public override int[] get_Eras() { }

	// RVA: 0x3BA Offset: 0x3BA VA: 0x3BA Slot: 26
	public override int get_TwoDigitYearMax() { }

	// RVA: 0x22C Offset: 0x22C VA: 0x22C Slot: 27
	public override int ToFourDigitYear(int year) { }

	// RVA: 0xE8D Offset: 0xE8D VA: 0xE8D
	private static void .cctor() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D8 Offset: 0x3D8 VA: 0x3D8
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 647
{
	// Fields
	[OptionalFieldAttribute] // RVA: 0x591 Offset: 0x591 VA: 0x591
	private bool m_isReadOnly; // 0x8
	[OptionalFieldAttribute] // RVA: 0x592 Offset: 0x592 VA: 0x592
	private string m_cultureName; // 0xC
	private CultureData m_cultureData; // 0x10
	private string m_textInfoName; // 0x14
	private Nullable<bool> m_IsAsciiCasingSameAsInvariant; // 0x18
	internal static TextInfo s_Invariant; // 0x0
	[OptionalFieldAttribute] // RVA: 0x593 Offset: 0x593 VA: 0x593
	private string customCultureName; // 0x1C
	[OptionalFieldAttribute] // RVA: 0x594 Offset: 0x594 VA: 0x594
	internal bool m_useUserOverride; // 0x20
	[OptionalFieldAttribute] // RVA: 0x595 Offset: 0x595 VA: 0x595
	internal int m_win32LangID; // 0x24

	// Properties
	internal static TextInfo Invariant { get; }
	[ComVisibleAttribute] // RVA: 0x801 Offset: 0x801 VA: 0x801
	public string CultureName { get; }
	private bool IsAsciiCasingSameAsInvariant { get; }

	// Methods

	// RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2
	internal static TextInfo get_Invariant() { }

	// RVA: 0x191 Offset: 0x191 VA: 0x191
	internal void .ctor(CultureData cultureData) { }

	[OnDeserializingAttribute] // RVA: 0x70C Offset: 0x70C VA: 0x70C
	// RVA: 0x192 Offset: 0x192 VA: 0x192
	private void OnDeserializing(StreamingContext ctx) { }

	// RVA: 0x361 Offset: 0x361 VA: 0x361
	private void OnDeserialized() { }

	[OnDeserializedAttribute] // RVA: 0x70D Offset: 0x70D VA: 0x70D
	// RVA: 0x193 Offset: 0x193 VA: 0x193
	private void OnDeserialized(StreamingContext ctx) { }

	[OnSerializingAttribute] // RVA: 0x70E Offset: 0x70E VA: 0x70E
	// RVA: 0x194 Offset: 0x194 VA: 0x194
	private void OnSerializing(StreamingContext ctx) { }

	// RVA: 0x3BB Offset: 0x3BB VA: 0x3BB
	internal static int GetHashCodeOrdinalIgnoreCase(string s) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	internal static int GetHashCodeOrdinalIgnoreCase(string s, bool forceRandomizedHashing, long additionalEntropy) { }

	// RVA: 0x22D Offset: 0x22D VA: 0x22D
	internal static int CompareOrdinalIgnoreCase(string str1, string str2) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	internal static int CompareOrdinalIgnoreCaseEx(string strA, int indexA, string strB, int indexB, int lengthA, int lengthB) { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	internal static int IndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count) { }

	// RVA: 0x75 Offset: 0x75 VA: 0x75
	internal static int LastIndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count) { }

	// RVA: 0x3BC Offset: 0x3BC VA: 0x3BC
	public string get_CultureName() { }

	[ComVisibleAttribute] // RVA: 0x70F Offset: 0x70F VA: 0x70F
	// RVA: 0x3BD Offset: 0x3BD VA: 0x3BD Slot: 6
	public virtual object Clone() { }

	// RVA: 0x195 Offset: 0x195 VA: 0x195
	internal void SetReadOnlyState(bool readOnly) { }

	// RVA: 0x22E Offset: 0x22E VA: 0x22E Slot: 7
	public virtual char ToLower(char c) { }

	// RVA: 0x22F Offset: 0x22F VA: 0x22F Slot: 8
	public virtual string ToLower(string str) { }

	// RVA: 0x3BE Offset: 0x3BE VA: 0x3BE
	private static char ToLowerAsciiInvariant(char c) { }

	// RVA: 0x230 Offset: 0x230 VA: 0x230 Slot: 9
	public virtual char ToUpper(char c) { }

	// RVA: 0x231 Offset: 0x231 VA: 0x231 Slot: 10
	public virtual string ToUpper(string str) { }

	// RVA: 0x3BF Offset: 0x3BF VA: 0x3BF
	private static char ToUpperAsciiInvariant(char c) { }

	// RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0
	private static bool IsAscii(char c) { }

	// RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
	private bool get_IsAsciiCasingSameAsInvariant() { }

	// RVA: 0x232 Offset: 0x232 VA: 0x232 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x3C2 Offset: 0x3C2 VA: 0x3C2 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3 Slot: 3
	public override string ToString() { }

	// RVA: 0x196 Offset: 0x196 VA: 0x196 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x233 Offset: 0x233 VA: 0x233
	internal int GetCaseInsensitiveHashCode(string str) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal int GetCaseInsensitiveHashCode(string str, bool forceRandomizedHashing, long additionalEntropy) { }

	// RVA: 0x234 Offset: 0x234 VA: 0x234
	private int GetInvariantCaseInsensitiveHashCode(string str) { }

	// RVA: 0x235 Offset: 0x235 VA: 0x235
	private string ToUpperInternal(string str) { }

	// RVA: 0x236 Offset: 0x236 VA: 0x236
	private string ToLowerInternal(string str) { }

	// RVA: 0x237 Offset: 0x237 VA: 0x237
	private char ToUpperInternal(char c) { }

	// RVA: 0x238 Offset: 0x238 VA: 0x238
	private char ToLowerInternal(char c) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	private static int InternalCompareStringOrdinalIgnoreCase(string strA, int indexA, string strB, int indexB, int lenA, int lenB) { }

	// RVA: 0x362 Offset: 0x362 VA: 0x362
	internal void .ctor() { }
}

// Namespace: System.Globalization
internal static class TimeSpanFormat // TypeDefIndex: 648
{
	// Fields
	internal static readonly TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals; // 0x0
	internal static readonly TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals; // 0x1C

	// Methods

	// RVA: 0x239 Offset: 0x239 VA: 0x239
	private static string IntToString(int n, int digits) { }

	// RVA: 0x88A Offset: 0x88A VA: 0x88A
	internal static string Format(TimeSpan value, string format, IFormatProvider formatProvider) { }

	// RVA: 0x76 Offset: 0x76 VA: 0x76
	private static string FormatStandard(TimeSpan value, bool isInvariant, string format, TimeSpanFormat.Pattern pattern) { }

	// RVA: 0x88B Offset: 0x88B VA: 0x88B
	internal static string FormatCustomized(TimeSpan value, string format, DateTimeFormatInfo dtfi) { }

	// RVA: 0xE90 Offset: 0xE90 VA: 0xE90
	private static void .cctor() { }
}

// Namespace: 
internal enum TimeSpanFormat.Pattern // TypeDefIndex: 649
{
	// Fields
	public int value__; // 0x0
	public const TimeSpanFormat.Pattern None = 0;
	public const TimeSpanFormat.Pattern Minimum = 1;
	public const TimeSpanFormat.Pattern Full = 2;
}

// Namespace: 
internal struct TimeSpanFormat.FormatLiterals // TypeDefIndex: 650
{
	// Fields
	internal string AppCompatLiteral; // 0x0
	internal int dd; // 0x4
	internal int hh; // 0x8
	internal int mm; // 0xC
	internal int ss; // 0x10
	internal int ff; // 0x14
	private string[] literals; // 0x18

	// Properties
	internal string Start { get; }
	internal string DayHourSep { get; }
	internal string HourMinuteSep { get; }
	internal string MinuteSecondSep { get; }
	internal string SecondFractionSep { get; }
	internal string End { get; }

	// Methods

	// RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4
	internal string get_Start() { }

	// RVA: 0x3C5 Offset: 0x3C5 VA: 0x3C5
	internal string get_DayHourSep() { }

	// RVA: 0x3C6 Offset: 0x3C6 VA: 0x3C6
	internal string get_HourMinuteSep() { }

	// RVA: 0x3C7 Offset: 0x3C7 VA: 0x3C7
	internal string get_MinuteSecondSep() { }

	// RVA: 0x3C8 Offset: 0x3C8 VA: 0x3C8
	internal string get_SecondFractionSep() { }

	// RVA: 0x3C9 Offset: 0x3C9 VA: 0x3C9
	internal string get_End() { }

	// RVA: 0x197 Offset: 0x197 VA: 0x197
	internal static TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative) { }

	// RVA: 0x145 Offset: 0x145 VA: 0x145
	internal void Init(string format, bool useInvariantFieldLengths) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3D9 Offset: 0x3D9 VA: 0x3D9
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 651
{
	// Fields
	public int value__; // 0x0
	public const UnicodeCategory UppercaseLetter = 0;
	public const UnicodeCategory LowercaseLetter = 1;
	public const UnicodeCategory TitlecaseLetter = 2;
	public const UnicodeCategory ModifierLetter = 3;
	public const UnicodeCategory OtherLetter = 4;
	public const UnicodeCategory NonSpacingMark = 5;
	public const UnicodeCategory SpacingCombiningMark = 6;
	public const UnicodeCategory EnclosingMark = 7;
	public const UnicodeCategory DecimalDigitNumber = 8;
	public const UnicodeCategory LetterNumber = 9;
	public const UnicodeCategory OtherNumber = 10;
	public const UnicodeCategory SpaceSeparator = 11;
	public const UnicodeCategory LineSeparator = 12;
	public const UnicodeCategory ParagraphSeparator = 13;
	public const UnicodeCategory Control = 14;
	public const UnicodeCategory Format = 15;
	public const UnicodeCategory Surrogate = 16;
	public const UnicodeCategory PrivateUse = 17;
	public const UnicodeCategory ConnectorPunctuation = 18;
	public const UnicodeCategory DashPunctuation = 19;
	public const UnicodeCategory OpenPunctuation = 20;
	public const UnicodeCategory ClosePunctuation = 21;
	public const UnicodeCategory InitialQuotePunctuation = 22;
	public const UnicodeCategory FinalQuotePunctuation = 23;
	public const UnicodeCategory OtherPunctuation = 24;
	public const UnicodeCategory MathSymbol = 25;
	public const UnicodeCategory CurrencySymbol = 26;
	public const UnicodeCategory ModifierSymbol = 27;
	public const UnicodeCategory OtherSymbol = 28;
	public const UnicodeCategory OtherNotAssigned = 29;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3DA Offset: 0x3DA VA: 0x3DA
[Serializable]
public class SortKey // TypeDefIndex: 652
{
	// Fields
	private readonly string source; // 0x8
	private readonly byte[] key; // 0xC
	private readonly CompareOptions options; // 0x10
	private readonly int lcid; // 0x14

	// Properties
	public virtual string OriginalString { get; }
	public virtual byte[] KeyData { get; }

	// Methods

	// RVA: 0x221 Offset: 0x221 VA: 0x221
	public static int Compare(SortKey sortkey1, SortKey sortkey2) { }

	// RVA: 0x6E Offset: 0x6E VA: 0x6E
	internal void .ctor(int lcid, string source, CompareOptions opt) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength) { }

	// RVA: 0x3B3 Offset: 0x3B3 VA: 0x3B3 Slot: 4
	public virtual string get_OriginalString() { }

	// RVA: 0x3B4 Offset: 0x3B4 VA: 0x3B4 Slot: 5
	public virtual byte[] get_KeyData() { }

	// RVA: 0x222 Offset: 0x222 VA: 0x222 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x3B5 Offset: 0x3B5 VA: 0x3B5 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3B6 Offset: 0x3B6 VA: 0x3B6 Slot: 3
	public override string ToString() { }

	// RVA: 0x35F Offset: 0x35F VA: 0x35F
	internal void .ctor() { }
}

// Namespace: System.Globalization
internal class CultureData // TypeDefIndex: 653
{
	// Fields
	private string sAM1159; // 0x8
	private string sPM2359; // 0xC
	private string sTimeSeparator; // 0x10
	private string[] saLongTimes; // 0x14
	private string[] saShortTimes; // 0x18
	private int iFirstDayOfWeek; // 0x1C
	private int iFirstWeekOfYear; // 0x20
	private int[] waCalendars; // 0x24
	private CalendarData[] calendars; // 0x28
	private string sISO639Language; // 0x2C
	private readonly string sRealName; // 0x30
	private bool bUseOverrides; // 0x34
	private int calendarId; // 0x38
	private int numberIndex; // 0x3C
	private int iDefaultAnsiCodePage; // 0x40
	private int iDefaultOemCodePage; // 0x44
	private int iDefaultMacCodePage; // 0x48
	private int iDefaultEbcdicCodePage; // 0x4C
	private bool isRightToLeft; // 0x50
	private string sListSeparator; // 0x54
	private static CultureData s_Invariant; // 0x0

	// Properties
	public static CultureData Invariant { get; }
	internal string[] LongTimes { get; }
	internal string[] ShortTimes { get; }
	internal string SISO639LANGNAME { get; }
	internal int IFIRSTDAYOFWEEK { get; }
	internal int IFIRSTWEEKOFYEAR { get; }
	internal string SAM1159 { get; }
	internal string SPM2359 { get; }
	internal string TimeSeparator { get; }
	internal int[] CalendarIds { get; }
	internal bool IsInvariantCulture { get; }
	internal string CultureName { get; }
	internal string SCOMPAREINFO { get; }
	internal string STEXTINFO { get; }
	internal int ILANGUAGE { get; }
	internal bool UseUserOverride { get; }

	// Methods

	// RVA: 0x171 Offset: 0x171 VA: 0x171
	private void .ctor(string name) { }

	// RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4
	public static CultureData get_Invariant() { }

	// RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0
	public static CultureData GetCultureData(string cultureName, bool useUserOverride) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator) { }

	// RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1
	internal static CultureData GetCultureData(int culture, bool bUseUserOverride) { }

	// RVA: 0x172 Offset: 0x172 VA: 0x172
	private void fill_culture_data(int datetimeIndex) { }

	// RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2
	public CalendarData GetCalendar(int calendarId) { }

	// RVA: 0x310 Offset: 0x310 VA: 0x310
	internal string[] get_LongTimes() { }

	// RVA: 0x311 Offset: 0x311 VA: 0x311
	internal string[] get_ShortTimes() { }

	// RVA: 0x312 Offset: 0x312 VA: 0x312
	internal string get_SISO639LANGNAME() { }

	// RVA: 0x313 Offset: 0x313 VA: 0x313
	internal int get_IFIRSTDAYOFWEEK() { }

	// RVA: 0x314 Offset: 0x314 VA: 0x314
	internal int get_IFIRSTWEEKOFYEAR() { }

	// RVA: 0x315 Offset: 0x315 VA: 0x315
	internal string get_SAM1159() { }

	// RVA: 0x316 Offset: 0x316 VA: 0x316
	internal string get_SPM2359() { }

	// RVA: 0x317 Offset: 0x317 VA: 0x317
	internal string get_TimeSeparator() { }

	// RVA: 0x318 Offset: 0x318 VA: 0x318
	internal int[] get_CalendarIds() { }

	// RVA: 0x319 Offset: 0x319 VA: 0x319
	internal bool get_IsInvariantCulture() { }

	// RVA: 0x31A Offset: 0x31A VA: 0x31A
	internal string get_CultureName() { }

	// RVA: 0x31B Offset: 0x31B VA: 0x31B
	internal string get_SCOMPAREINFO() { }

	// RVA: 0x31C Offset: 0x31C VA: 0x31C
	internal string get_STEXTINFO() { }

	// RVA: 0x31D Offset: 0x31D VA: 0x31D
	internal int get_ILANGUAGE() { }

	// RVA: 0x31E Offset: 0x31E VA: 0x31E
	internal bool get_UseUserOverride() { }

	// RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3
	internal string[] EraNames(int calendarId) { }

	// RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4
	internal string[] AbbrevEraNames(int calendarId) { }

	// RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5
	internal string[] AbbreviatedEnglishEraNames(int calendarId) { }

	// RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6
	internal string[] ShortDates(int calendarId) { }

	// RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7
	internal string[] LongDates(int calendarId) { }

	// RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8
	internal string[] YearMonths(int calendarId) { }

	// RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9
	internal string[] DayNames(int calendarId) { }

	// RVA: 0x1EA Offset: 0x1EA VA: 0x1EA
	internal string[] AbbreviatedDayNames(int calendarId) { }

	// RVA: 0x1EB Offset: 0x1EB VA: 0x1EB
	internal string[] MonthNames(int calendarId) { }

	// RVA: 0x1EC Offset: 0x1EC VA: 0x1EC
	internal string[] GenitiveMonthNames(int calendarId) { }

	// RVA: 0x1ED Offset: 0x1ED VA: 0x1ED
	internal string[] AbbreviatedMonthNames(int calendarId) { }

	// RVA: 0x1EE Offset: 0x1EE VA: 0x1EE
	internal string[] AbbreviatedGenitiveMonthNames(int calendarId) { }

	// RVA: 0x1EF Offset: 0x1EF VA: 0x1EF
	internal string[] LeapYearMonthNames(int calendarId) { }

	// RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0
	internal string MonthDay(int calendarId) { }

	// RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1
	internal string DateSeparator(int calendarId) { }

	// RVA: 0x31F Offset: 0x31F VA: 0x31F
	private static string GetDateSeparator(string format) { }

	// RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2
	private static string GetSeparator(string format, string timeParts) { }

	// RVA: 0x877 Offset: 0x877 VA: 0x877
	private static int IndexOfTimePart(string format, int startIndex, string timeParts) { }

	// RVA: 0x878 Offset: 0x878 VA: 0x878
	private static string UnescapeNlsString(string str, int start, int end) { }

	// RVA: 0x320 Offset: 0x320 VA: 0x320
	internal static string[] ReescapeWin32Strings(string[] array) { }

	// RVA: 0x321 Offset: 0x321 VA: 0x321
	internal static string ReescapeWin32String(string str) { }

	// RVA: 0x173 Offset: 0x173 VA: 0x173
	internal void GetNFIValues(NumberFormatInfo nfi) { }

	// RVA: 0x174 Offset: 0x174 VA: 0x174
	private static void fill_number_data(NumberFormatInfo nfi, int numberIndex) { }
}

// Namespace: System.Globalization
[Serializable]
internal class CodePageDataItem // TypeDefIndex: 654
{
	// Fields
	internal int m_dataIndex; // 0x8
	internal int m_uiFamilyCodePage; // 0xC
	internal uint m_flags; // 0x10
	private static readonly char[] sep; // 0x0

	// Methods

	// RVA: 0x16B Offset: 0x16B VA: 0x16B
	internal void .ctor(int dataIndex) { }

	// RVA: 0xE84 Offset: 0xE84 VA: 0xE84
	private static void .cctor() { }
}

// Namespace: System.Globalization
internal static class EncodingTable // TypeDefIndex: 655
{
	// Fields
	internal static InternalEncodingDataItem[] encodingDataPtr; // 0x0
	internal static InternalCodePageDataItem[] codePageDataPtr; // 0x4
	private static int lastEncodingItem; // 0x8
	private static Hashtable hashByName; // 0xC
	private static Hashtable hashByCodePage; // 0x10

	// Methods

	// RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6
	private static int GetNumEncodingItems() { }

	// RVA: 0x13F Offset: 0x13F VA: 0x13F
	private static InternalEncodingDataItem ENC(string name, ushort cp) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A
	private static InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags) { }

	// RVA: 0xE87 Offset: 0xE87 VA: 0xE87
	private static void .cctor() { }

	// RVA: 0x379 Offset: 0x379 VA: 0x379
	private static int internalGetCodePageFromName(string name) { }

	// RVA: 0x37A Offset: 0x37A VA: 0x37A
	internal static int GetCodePageFromName(string name) { }

	// RVA: 0x37B Offset: 0x37B VA: 0x37B
	internal static CodePageDataItem GetCodePageDataItem(int codepage) { }
}

// Namespace: System.Globalization
internal struct InternalEncodingDataItem // TypeDefIndex: 656
{
	// Fields
	internal string webName; // 0x0
	internal ushort codePage; // 0x4
}

// Namespace: System.Globalization
internal struct InternalCodePageDataItem // TypeDefIndex: 657
{
	// Fields
	internal ushort codePage; // 0x0
	internal ushort uiFamilyCodePage; // 0x2
	internal uint flags; // 0x4
	internal string Names; // 0x8
}

// Namespace: System.Globalization
internal static class TextInfoToUpperData // TypeDefIndex: 658
{
	// Fields
	public static readonly char[] range_00e0_0586; // 0x0
	public static readonly char[] range_1e01_1ff3; // 0x4
	public static readonly char[] range_2170_2184; // 0x8
	public static readonly char[] range_24d0_24e9; // 0xC
	public static readonly char[] range_2c30_2ce3; // 0x10
	public static readonly char[] range_2d00_2d25; // 0x14
	public static readonly char[] range_a641_a697; // 0x18
	public static readonly char[] range_a723_a78c; // 0x1C

	// Methods

	// RVA: 0xE8F Offset: 0xE8F VA: 0xE8F
	private static void .cctor() { }
}

// Namespace: System.Globalization
internal static class TextInfoToLowerData // TypeDefIndex: 659
{
	// Fields
	public static readonly char[] range_00c0_0556; // 0x0
	public static readonly char[] range_10a0_10c5; // 0x4
	public static readonly char[] range_1e00_1ffc; // 0x8
	public static readonly char[] range_2160_216f; // 0xC
	public static readonly char[] range_24b6_24cf; // 0x10
	public static readonly char[] range_2c00_2c2e; // 0x14
	public static readonly char[] range_2c60_2ce2; // 0x18
	public static readonly char[] range_a640_a696; // 0x1C
	public static readonly char[] range_a722_a78b; // 0x20

	// Methods

	// RVA: 0xE8E Offset: 0xE8E VA: 0xE8E
	private static void .cctor() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3DB Offset: 0x3DB VA: 0x3DB
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 660
{
	// Fields
	private static CultureInfo invariant_culture_info; // 0x0
	private static object shared_table_lock; // 0x4
	private static CultureInfo default_current_culture; // 0x8
	private bool m_isReadOnly; // 0x8
	private int cultureID; // 0xC
	private int parent_lcid; // 0x10
	private int datetime_index; // 0x14
	private int number_index; // 0x18
	private int default_calendar_type; // 0x1C
	private bool m_useUserOverride; // 0x20
	internal NumberFormatInfo numInfo; // 0x24
	internal DateTimeFormatInfo dateTimeInfo; // 0x28
	private TextInfo textInfo; // 0x2C
	internal string m_name; // 0x30
	private string englishname; // 0x34
	private string nativename; // 0x38
	private string iso3lang; // 0x3C
	private string iso2lang; // 0x40
	private string win3lang; // 0x44
	private string territory; // 0x48
	private string[] native_calendar_names; // 0x4C
	private CompareInfo compareInfo; // 0x50
	private readonly void* textinfo_data; // 0x54
	private int m_dataItem; // 0x58
	private Calendar calendar; // 0x5C
	private CultureInfo parent_culture; // 0x60
	private bool constructed; // 0x64
	internal byte[] cached_serialized_form; // 0x68
	internal CultureData m_cultureData; // 0x6C
	internal bool m_isInherited; // 0x70
	internal const int InvariantCultureId = 127;
	private const int CalendarTypeBits = 8;
	private const string MSG_READONLY = "This instance is read only";
	private static CultureInfo s_DefaultThreadCurrentUICulture; // 0xC
	private static CultureInfo s_DefaultThreadCurrentCulture; // 0x10
	private static Dictionary<int, CultureInfo> shared_by_number; // 0x14
	private static Dictionary<string, CultureInfo> shared_by_name; // 0x18
	internal static readonly bool IsTaiwanSku; // 0x1C

	// Properties
	public static CultureInfo InvariantCulture { get; }
	public static CultureInfo CurrentCulture { get; }
	public static CultureInfo CurrentUICulture { get; }
	internal string Territory { get; }
	public virtual int LCID { get; }
	public virtual string Name { get; }
	public virtual Calendar Calendar { get; }
	public virtual CultureInfo Parent { get; }
	public virtual TextInfo TextInfo { get; }
	public virtual CompareInfo CompareInfo { get; }
	public virtual bool IsNeutralCulture { get; }
	public virtual NumberFormatInfo NumberFormat { get; set; }
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
	public virtual string EnglishName { get; }
	public bool IsReadOnly { get; }
	internal int CalendarType { get; }
	public static CultureInfo DefaultThreadCurrentCulture { get; }
	public static CultureInfo DefaultThreadCurrentUICulture { get; }
	internal string SortName { get; }
	internal static CultureInfo UserDefaultUICulture { get; }
	internal static CultureInfo UserDefaultCulture { get; }
	internal bool HasInvariantCultureName { get; }

	// Methods

	// RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5
	public static CultureInfo get_InvariantCulture() { }

	// RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	public static CultureInfo get_CurrentCulture() { }

	// RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	public static CultureInfo get_CurrentUICulture() { }

	// RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8
	internal static CultureInfo ConstructCurrentCulture() { }

	// RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9
	internal static CultureInfo ConstructCurrentUICulture() { }

	// RVA: 0x322 Offset: 0x322 VA: 0x322
	internal string get_Territory() { }

	// RVA: 0x323 Offset: 0x323 VA: 0x323 Slot: 6
	public virtual int get_LCID() { }

	// RVA: 0x324 Offset: 0x324 VA: 0x324 Slot: 7
	public virtual string get_Name() { }

	// RVA: 0x325 Offset: 0x325 VA: 0x325 Slot: 8
	public virtual Calendar get_Calendar() { }

	// RVA: 0x326 Offset: 0x326 VA: 0x326 Slot: 9
	public virtual CultureInfo get_Parent() { }

	// RVA: 0x327 Offset: 0x327 VA: 0x327 Slot: 10
	public virtual TextInfo get_TextInfo() { }

	// RVA: 0x328 Offset: 0x328 VA: 0x328 Slot: 11
	public virtual object Clone() { }

	// RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x329 Offset: 0x329 VA: 0x329
	public static CultureInfo[] GetCultures(CultureTypes types) { }

	// RVA: 0x175 Offset: 0x175 VA: 0x175
	private CultureInfo.Data GetTextInfoData() { }

	// RVA: 0x32A Offset: 0x32A VA: 0x32A Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x32B Offset: 0x32B VA: 0x32B Slot: 3
	public override string ToString() { }

	// RVA: 0x32C Offset: 0x32C VA: 0x32C Slot: 12
	public virtual CompareInfo get_CompareInfo() { }

	// RVA: 0x32D Offset: 0x32D VA: 0x32D Slot: 13
	public virtual bool get_IsNeutralCulture() { }

	// RVA: 0x350 Offset: 0x350 VA: 0x350
	private void CheckNeutral() { }

	// RVA: 0x32E Offset: 0x32E VA: 0x32E Slot: 14
	public virtual NumberFormatInfo get_NumberFormat() { }

	// RVA: 0x176 Offset: 0x176 VA: 0x176 Slot: 15
	public virtual void set_NumberFormat(NumberFormatInfo value) { }

	// RVA: 0x32F Offset: 0x32F VA: 0x32F Slot: 16
	public virtual DateTimeFormatInfo get_DateTimeFormat() { }

	// RVA: 0x177 Offset: 0x177 VA: 0x177 Slot: 17
	public virtual void set_DateTimeFormat(DateTimeFormatInfo value) { }

	// RVA: 0x330 Offset: 0x330 VA: 0x330 Slot: 18
	public virtual string get_EnglishName() { }

	// RVA: 0x331 Offset: 0x331 VA: 0x331
	public bool get_IsReadOnly() { }

	// RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4 Slot: 19
	public virtual object GetFormat(Type formatType) { }

	// RVA: 0x351 Offset: 0x351 VA: 0x351
	private void Construct() { }

	// RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5
	private bool construct_internal_locale_from_lcid(int lcid) { }

	// RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6
	private bool construct_internal_locale_from_name(string name) { }

	// RVA: 0x1BA Offset: 0x1BA VA: 0x1BA
	private static string get_current_locale_name() { }

	// RVA: 0x879 Offset: 0x879 VA: 0x879
	private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed) { }

	// RVA: 0x178 Offset: 0x178 VA: 0x178
	private void ConstructInvariant(bool read_only) { }

	// RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7
	private TextInfo CreateTextInfo(bool readOnly) { }

	// RVA: 0x179 Offset: 0x179 VA: 0x179
	public void .ctor(int culture) { }

	// RVA: 0x136 Offset: 0x136 VA: 0x136
	public void .ctor(int culture, bool useUserOverride) { }

	// RVA: 0x6B Offset: 0x6B VA: 0x6B
	private void .ctor(int culture, bool useUserOverride, bool read_only) { }

	// RVA: 0x17A Offset: 0x17A VA: 0x17A
	public void .ctor(string name) { }

	// RVA: 0x137 Offset: 0x137 VA: 0x137
	public void .ctor(string name, bool useUserOverride) { }

	// RVA: 0x6C Offset: 0x6C VA: 0x6C
	private void .ctor(string name, bool useUserOverride, bool read_only) { }

	// RVA: 0x352 Offset: 0x352 VA: 0x352
	private void .ctor() { }

	// RVA: 0x353 Offset: 0x353 VA: 0x353
	private static void insert_into_shared_tables(CultureInfo c) { }

	// RVA: 0x332 Offset: 0x332 VA: 0x332
	public static CultureInfo GetCultureInfo(int culture) { }

	// RVA: 0x333 Offset: 0x333 VA: 0x333
	public static CultureInfo GetCultureInfo(string name) { }

	// RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8
	internal static CultureInfo CreateCulture(string name, bool reference) { }

	// RVA: 0x334 Offset: 0x334 VA: 0x334
	public static CultureInfo CreateSpecificCulture(string name) { }

	// RVA: 0x335 Offset: 0x335 VA: 0x335
	private static CultureInfo CreateSpecificCultureFromNeutral(string name) { }

	// RVA: 0x336 Offset: 0x336 VA: 0x336
	internal int get_CalendarType() { }

	// RVA: 0x337 Offset: 0x337 VA: 0x337
	private static Calendar CreateCalendar(int calendarType) { }

	// RVA: 0x338 Offset: 0x338 VA: 0x338
	private static Exception CreateNotFoundException(string name) { }

	// RVA: 0x1BB Offset: 0x1BB VA: 0x1BB
	public static CultureInfo get_DefaultThreadCurrentCulture() { }

	// RVA: 0x1BC Offset: 0x1BC VA: 0x1BC
	public static CultureInfo get_DefaultThreadCurrentUICulture() { }

	// RVA: 0x339 Offset: 0x339 VA: 0x339
	internal string get_SortName() { }

	// RVA: 0x1BD Offset: 0x1BD VA: 0x1BD
	internal static CultureInfo get_UserDefaultUICulture() { }

	// RVA: 0x1BE Offset: 0x1BE VA: 0x1BE
	internal static CultureInfo get_UserDefaultCulture() { }

	// RVA: 0x17B Offset: 0x17B VA: 0x17B
	internal static void CheckDomainSafetyObject(object obj, object container) { }

	// RVA: 0x33A Offset: 0x33A VA: 0x33A
	internal bool get_HasInvariantCultureName() { }

	// RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9
	internal static bool VerifyCultureName(string cultureName, bool throwException) { }

	// RVA: 0xE85 Offset: 0xE85 VA: 0xE85
	private static void .cctor() { }
}

// Namespace: 
private struct CultureInfo.Data // TypeDefIndex: 661
{
	// Fields
	public int ansi; // 0x0
	public int ebcdic; // 0x4
	public int mac; // 0x8
	public int oem; // 0xC
	public bool right_to_left; // 0x10
	public byte list_sep; // 0x11
}

// Namespace: System.Globalization
public sealed class IdnMapping // TypeDefIndex: 662
{
	// Fields
	private bool allow_unassigned; // 0x8
	private bool use_std3; // 0x9
	private Punycode puny; // 0xC

	// Methods

	// RVA: 0x359 Offset: 0x359 VA: 0x359
	public void .ctor() { }

	// RVA: 0x214 Offset: 0x214 VA: 0x214 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x383 Offset: 0x383 VA: 0x383 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x215 Offset: 0x215 VA: 0x215
	public string GetAscii(string unicode) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70
	public string GetAscii(string unicode, int index, int count) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	private string Convert(string input, int index, int count, bool toAscii) { }

	// RVA: 0x882 Offset: 0x882 VA: 0x882
	private string ToAscii(string s, int offset) { }

	// RVA: 0x142 Offset: 0x142 VA: 0x142
	private void VerifyLength(string s, int offset) { }

	// RVA: 0x883 Offset: 0x883 VA: 0x883
	private string NamePrep(string s, int offset) { }

	// RVA: 0x143 Offset: 0x143 VA: 0x143
	private void VerifyProhibitedCharacters(string s, int offset) { }

	// RVA: 0x144 Offset: 0x144 VA: 0x144
	private void VerifyStd3AsciiRules(string s, int offset) { }

	// RVA: 0x216 Offset: 0x216 VA: 0x216
	public string GetUnicode(string ascii) { }

	// RVA: 0x71 Offset: 0x71 VA: 0x71
	public string GetUnicode(string ascii, int index, int count) { }

	// RVA: 0x884 Offset: 0x884 VA: 0x884
	private string ToUnicode(string s, int offset) { }
}

// Namespace: System.Globalization
internal class Bootstring // TypeDefIndex: 663
{
	// Fields
	private readonly char delimiter; // 0x8
	private readonly int base_num; // 0xC
	private readonly int tmin; // 0x10
	private readonly int tmax; // 0x14
	private readonly int skew; // 0x18
	private readonly int damp; // 0x1C
	private readonly int initial_bias; // 0x20
	private readonly int initial_n; // 0x24

	// Methods

	// RVA: 0xB Offset: 0xB VA: 0xB
	public void .ctor(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN) { }

	// RVA: 0x86D Offset: 0x86D VA: 0x86D
	public string Encode(string s, int offset) { }

	// RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7
	private char EncodeDigit(int d) { }

	// RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8
	private int DecodeDigit(char c) { }

	// RVA: 0x63 Offset: 0x63 VA: 0x63
	private int Adapt(int delta, int numPoints, bool firstTime) { }

	// RVA: 0x86E Offset: 0x86E VA: 0x86E
	public string Decode(string s, int offset) { }
}

// Namespace: System.Globalization
internal class Punycode : Bootstring // TypeDefIndex: 664
{
	// Methods

	// RVA: 0x35E Offset: 0x35E VA: 0x35E
	public void .ctor() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0x3DC Offset: 0x3DC VA: 0x3DC
[Serializable]
public class RegionInfo // TypeDefIndex: 665
{
	// Fields
	private static RegionInfo currentRegion; // 0x0
	private int regionId; // 0x8
	private string iso2Name; // 0xC
	private string iso3Name; // 0x10
	private string win3Name; // 0x14
	private string englishName; // 0x18
	private string nativeName; // 0x1C
	private string currencySymbol; // 0x20
	private string isoCurrencySymbol; // 0x24
	private string currencyEnglishName; // 0x28
	private string currencyNativeName; // 0x2C

	// Properties
	public static RegionInfo CurrentRegion { get; }
	[ComVisibleAttribute] // RVA: 0x802 Offset: 0x802 VA: 0x802
	public virtual string CurrencyEnglishName { get; }
	public virtual string CurrencySymbol { get; }
	[MonoTODOAttribute] // RVA: 0x803 Offset: 0x803 VA: 0x803
	public virtual string DisplayName { get; }
	public virtual string EnglishName { get; }
	[ComVisibleAttribute] // RVA: 0x804 Offset: 0x804 VA: 0x804
	public virtual int GeoId { get; }
	public virtual bool IsMetric { get; }
	public virtual string ISOCurrencySymbol { get; }
	[ComVisibleAttribute] // RVA: 0x805 Offset: 0x805 VA: 0x805
	public virtual string NativeName { get; }
	[ComVisibleAttribute] // RVA: 0x806 Offset: 0x806 VA: 0x806
	public virtual string CurrencyNativeName { get; }
	public virtual string Name { get; }
	public virtual string ThreeLetterISORegionName { get; }
	public virtual string ThreeLetterWindowsRegionName { get; }
	public virtual string TwoLetterISORegionName { get; }

	// Methods

	// RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0
	public static RegionInfo get_CurrentRegion() { }

	// RVA: 0x18E Offset: 0x18E VA: 0x18E
	public void .ctor(int culture) { }

	// RVA: 0x18F Offset: 0x18F VA: 0x18F
	public void .ctor(string name) { }

	// RVA: 0x190 Offset: 0x190 VA: 0x190
	private void .ctor(CultureInfo ci) { }

	// RVA: 0x21E Offset: 0x21E VA: 0x21E
	private bool GetByTerritory(CultureInfo ci) { }

	// RVA: 0x21F Offset: 0x21F VA: 0x21F
	private bool construct_internal_region_from_name(string name) { }

	// RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4 Slot: 4
	public virtual string get_CurrencyEnglishName() { }

	// RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5 Slot: 5
	public virtual string get_CurrencySymbol() { }

	// RVA: 0x3A6 Offset: 0x3A6 VA: 0x3A6 Slot: 6
	public virtual string get_DisplayName() { }

	// RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7 Slot: 7
	public virtual string get_EnglishName() { }

	// RVA: 0x3A8 Offset: 0x3A8 VA: 0x3A8 Slot: 8
	public virtual int get_GeoId() { }

	// RVA: 0x3A9 Offset: 0x3A9 VA: 0x3A9 Slot: 9
	public virtual bool get_IsMetric() { }

	// RVA: 0x3AA Offset: 0x3AA VA: 0x3AA Slot: 10
	public virtual string get_ISOCurrencySymbol() { }

	// RVA: 0x3AB Offset: 0x3AB VA: 0x3AB Slot: 11
	public virtual string get_NativeName() { }

	// RVA: 0x3AC Offset: 0x3AC VA: 0x3AC Slot: 12
	public virtual string get_CurrencyNativeName() { }

	// RVA: 0x3AD Offset: 0x3AD VA: 0x3AD Slot: 13
	public virtual string get_Name() { }

	// RVA: 0x3AE Offset: 0x3AE VA: 0x3AE Slot: 14
	public virtual string get_ThreeLetterISORegionName() { }

	// RVA: 0x3AF Offset: 0x3AF VA: 0x3AF Slot: 15
	public virtual string get_ThreeLetterWindowsRegionName() { }

	// RVA: 0x3B0 Offset: 0x3B0 VA: 0x3B0 Slot: 16
	public virtual string get_TwoLetterISORegionName() { }

	// RVA: 0x220 Offset: 0x220 VA: 0x220 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x3B1 Offset: 0x3B1 VA: 0x3B1 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3B2 Offset: 0x3B2 VA: 0x3B2 Slot: 3
	public override string ToString() { }

	// RVA: 0xE8C Offset: 0xE8C VA: 0xE8C
	internal static void ClearCachedData() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3DD Offset: 0x3DD VA: 0x3DD
[DebuggerDisplayAttribute] // RVA: 0x3DD Offset: 0x3DD VA: 0x3DD
public struct CancellationToken // TypeDefIndex: 666
{
	// Fields
	private CancellationTokenSource m_source; // 0x0
	private static readonly Action<object> s_ActionToActionObjShunt; // 0x0

	// Properties
	public static CancellationToken None { get; }
	public bool IsCancellationRequested { get; }
	public bool CanBeCanceled { get; }

	// Methods

	// RVA: 0x21B Offset: 0x21B VA: 0x21B
	public static CancellationToken get_None() { }

	// RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
	public bool get_IsCancellationRequested() { }

	// RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
	public bool get_CanBeCanceled() { }

	// RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
	internal void .ctor(CancellationTokenSource source) { }

	// RVA: 0x554 Offset: 0x554 VA: 0x554
	private static void ActionToActionObjShunt(object obj) { }

	// RVA: 0xD8 Offset: 0xD8 VA: 0xD8
	internal CancellationTokenRegistration InternalRegisterWithoutEC(Action<object> callback, object state) { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	private CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext) { }

	// RVA: 0x483 Offset: 0x483 VA: 0x483
	public bool Equals(CancellationToken other) { }

	// RVA: 0x484 Offset: 0x484 VA: 0x484 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x8BF Offset: 0x8BF VA: 0x8BF Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x485 Offset: 0x485 VA: 0x485
	public static bool op_Equality(CancellationToken left, CancellationToken right) { }

	// RVA: 0x486 Offset: 0x486 VA: 0x486
	public static bool op_Inequality(CancellationToken left, CancellationToken right) { }

	// RVA: 0x555 Offset: 0x555 VA: 0x555
	public void ThrowIfCancellationRequested() { }

	// RVA: 0x556 Offset: 0x556 VA: 0x556
	internal void ThrowIfSourceDisposed() { }

	// RVA: 0x557 Offset: 0x557 VA: 0x557
	private void ThrowOperationCanceledException() { }

	// RVA: 0xEF0 Offset: 0xEF0 VA: 0xEF0
	private static void ThrowObjectDisposedException() { }

	// RVA: 0xEF1 Offset: 0xEF1 VA: 0xEF1
	private static void .cctor() { }
}

// Namespace: System.Threading
public struct CancellationTokenRegistration : IEquatable<CancellationTokenRegistration>, IDisposable // TypeDefIndex: 667
{
	// Fields
	private readonly CancellationCallbackInfo m_callbackInfo; // 0x0
	private readonly SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> m_registrationInfo; // 0x4

	// Methods

	// RVA: 0x2AF Offset: 0x2AF VA: 0x2AF
	internal void .ctor(CancellationCallbackInfo callbackInfo, SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> registrationInfo) { }

	[FriendAccessAllowedAttribute] // RVA: 0x710 Offset: 0x710 VA: 0x710
	// RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0
	internal bool TryDeregister() { }

	// RVA: 0x558 Offset: 0x558 VA: 0x558 Slot: 5
	public void Dispose() { }

	// RVA: 0x487 Offset: 0x487 VA: 0x487 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x488 Offset: 0x488 VA: 0x488 Slot: 4
	public bool Equals(CancellationTokenRegistration other) { }

	// RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3DE Offset: 0x3DE VA: 0x3DE
public class CancellationTokenSource : IDisposable // TypeDefIndex: 668
{
	// Fields
	private static readonly CancellationTokenSource _staticSource_Set; // 0x0
	private static readonly CancellationTokenSource _staticSource_NotCancelable; // 0x4
	private static readonly int s_nLists; // 0x8
	private ManualResetEvent m_kernelEvent; // 0x8
	private SparselyPopulatedArray<CancellationCallbackInfo>[] m_registeredCallbacksLists; // 0xC
	private int m_state; // 0x10
	private int m_threadIDExecutingCallbacks; // 0x14
	private bool m_disposed; // 0x18
	private CancellationTokenRegistration[] m_linkingRegistrations; // 0x1C
	private static readonly Action<object> s_LinkedTokenCancelDelegate; // 0xC
	private CancellationCallbackInfo m_executingCallback; // 0x20
	private Timer m_timer; // 0x24
	private static readonly TimerCallback s_timerCallback; // 0x10

	// Properties
	public bool IsCancellationRequested { get; }
	internal bool IsCancellationCompleted { get; }
	internal bool IsDisposed { get; }
	internal int ThreadIDExecutingCallbacks { get; set; }
	public CancellationToken Token { get; }
	internal bool CanBeCanceled { get; }
	internal CancellationCallbackInfo ExecutingCallback { get; }

	// Methods

	// RVA: 0x559 Offset: 0x559 VA: 0x559
	private static void LinkedTokenCancelDelegate(object source) { }

	// RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2
	public bool get_IsCancellationRequested() { }

	// RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3
	internal bool get_IsCancellationCompleted() { }

	// RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4
	internal bool get_IsDisposed() { }

	// RVA: 0x3ED Offset: 0x3ED VA: 0x3ED
	internal void set_ThreadIDExecutingCallbacks(int value) { }

	// RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5
	internal int get_ThreadIDExecutingCallbacks() { }

	// RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6
	public CancellationToken get_Token() { }

	// RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7
	internal bool get_CanBeCanceled() { }

	// RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8
	internal CancellationCallbackInfo get_ExecutingCallback() { }

	// RVA: 0x55A Offset: 0x55A VA: 0x55A
	public void .ctor() { }

	// RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
	private void .ctor(bool set) { }

	// RVA: 0x55B Offset: 0x55B VA: 0x55B
	public void Cancel() { }

	// RVA: 0x3EF Offset: 0x3EF VA: 0x3EF
	public void Cancel(bool throwOnFirstException) { }

	// RVA: 0x55C Offset: 0x55C VA: 0x55C
	private static void TimerCallbackLogic(object obj) { }

	// RVA: 0x55D Offset: 0x55D VA: 0x55D Slot: 4
	public void Dispose() { }

	// RVA: 0x3F0 Offset: 0x3F0 VA: 0x3F0 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x55E Offset: 0x55E VA: 0x55E
	internal void ThrowIfDisposed() { }

	// RVA: 0xEF2 Offset: 0xEF2 VA: 0xEF2
	private static void ThrowObjectDisposedException() { }

	// RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9
	internal static CancellationTokenSource InternalGetStaticSource(bool set) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	internal CancellationTokenRegistration InternalRegister(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext) { }

	// RVA: 0x3F1 Offset: 0x3F1 VA: 0x3F1
	private void NotifyCancellation(bool throwOnFirstException) { }

	// RVA: 0x3F2 Offset: 0x3F2 VA: 0x3F2
	private void ExecuteCallbackHandlers(bool throwOnFirstException) { }

	// RVA: 0x3F3 Offset: 0x3F3 VA: 0x3F3
	private void CancellationCallbackCoreWork_OnSyncContext(object obj) { }

	// RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4
	private void CancellationCallbackCoreWork(CancellationCallbackCoreWorkArguments args) { }

	// RVA: 0x489 Offset: 0x489 VA: 0x489
	public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2) { }

	// RVA: 0x3F5 Offset: 0x3F5 VA: 0x3F5
	internal void WaitForCallbackToComplete(CancellationCallbackInfo callbackInfo) { }

	// RVA: 0xEF3 Offset: 0xEF3 VA: 0xEF3
	private static void .cctor() { }
}

// Namespace: System.Threading
internal struct CancellationCallbackCoreWorkArguments // TypeDefIndex: 669
{
	// Fields
	internal SparselyPopulatedArrayFragment<CancellationCallbackInfo> m_currArrayFragment; // 0x0
	internal int m_currArrayIndex; // 0x4

	// Methods

	// RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
	public void .ctor(SparselyPopulatedArrayFragment<CancellationCallbackInfo> currArrayFragment, int currArrayIndex) { }
}

// Namespace: System.Threading
internal class CancellationCallbackInfo // TypeDefIndex: 670
{
	// Fields
	internal readonly Action<object> Callback; // 0x8
	internal readonly object StateForCallback; // 0xC
	internal readonly SynchronizationContext TargetSyncContext; // 0x10
	internal readonly ExecutionContext TargetExecutionContext; // 0x14
	internal readonly CancellationTokenSource CancellationTokenSource; // 0x18
	private static ContextCallback s_executionContextCallback; // 0x0

	// Methods

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	internal void .ctor(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext targetExecutionContext, CancellationTokenSource cancellationTokenSource) { }

	// RVA: 0x552 Offset: 0x552 VA: 0x552
	internal void ExecuteCallback() { }

	// RVA: 0x553 Offset: 0x553 VA: 0x553
	private static void ExecutionContextCallback(object obj) { }
}

// Namespace: System.Threading
internal class SparselyPopulatedArray<T> // TypeDefIndex: 671
{
	// Fields
	private SparselyPopulatedArrayFragment<T> m_tail; // 0xFFFFFFFF

	// Properties
	internal SparselyPopulatedArrayFragment<T> Tail { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(int initialSize) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1
	|-SparselyPopulatedArray<object>..ctor
	|-SparselyPopulatedArray<CancellationCallbackInfo>..ctor
	*/

	// RVA: -1 Offset: -1
	internal SparselyPopulatedArrayFragment<T> get_Tail() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD25 Offset: 0xD25 VA: 0xD25
	|-SparselyPopulatedArray<object>.get_Tail
	|-SparselyPopulatedArray<CancellationCallbackInfo>.get_Tail
	*/

	// RVA: -1 Offset: -1
	internal SparselyPopulatedArrayAddInfo<T> Add(T element) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3F1 Offset: 0x3F1 VA: 0x3F1
	|-SparselyPopulatedArray<object>.Add
	|-SparselyPopulatedArray<CancellationCallbackInfo>.Add
	*/
}

// Namespace: System.Threading
internal struct SparselyPopulatedArrayAddInfo<T> // TypeDefIndex: 672
{
	// Fields
	private SparselyPopulatedArrayFragment<T> m_source; // 0xFFFFFFFF
	private int m_index; // 0xFFFFFFFF

	// Properties
	internal SparselyPopulatedArrayFragment<T> Source { get; }
	internal int Index { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(SparselyPopulatedArrayFragment<T> source, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3F2 Offset: 0x3F2 VA: 0x3F2
	|-SparselyPopulatedArrayAddInfo<object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal SparselyPopulatedArrayFragment<T> get_Source() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD26 Offset: 0xD26 VA: 0xD26
	|-SparselyPopulatedArrayAddInfo<object>.get_Source
	|-SparselyPopulatedArrayAddInfo<CancellationCallbackInfo>.get_Source
	*/

	// RVA: -1 Offset: -1
	internal int get_Index() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD27 Offset: 0xD27 VA: 0xD27
	|-SparselyPopulatedArrayAddInfo<object>.get_Index
	|-SparselyPopulatedArrayAddInfo<CancellationCallbackInfo>.get_Index
	*/
}

// Namespace: System.Threading
[DefaultMemberAttribute] // RVA: 0x3DF Offset: 0x3DF VA: 0x3DF
internal class SparselyPopulatedArrayFragment<T> // TypeDefIndex: 673
{
	// Fields
	internal readonly T[] m_elements; // 0xFFFFFFFF
	internal int m_freeCount; // 0xFFFFFFFF
	internal SparselyPopulatedArrayFragment<T> m_next; // 0xFFFFFFFF
	internal SparselyPopulatedArrayFragment<T> m_prev; // 0xFFFFFFFF

	// Properties
	internal T Item { get; }
	internal int Length { get; }
	internal SparselyPopulatedArrayFragment<T> Prev { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(int size) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2
	|-SparselyPopulatedArrayFragment<object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal void .ctor(int size, SparselyPopulatedArrayFragment<T> prev) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3F3 Offset: 0x3F3 VA: 0x3F3
	|-SparselyPopulatedArrayFragment<object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x64E Offset: 0x64E VA: 0x64E
	|-SparselyPopulatedArrayFragment<object>.get_Item
	|-SparselyPopulatedArrayFragment<CancellationCallbackInfo>.get_Item
	*/

	// RVA: -1 Offset: -1
	internal int get_Length() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD28 Offset: 0xD28 VA: 0xD28
	|-SparselyPopulatedArrayFragment<object>.get_Length
	|-SparselyPopulatedArrayFragment<CancellationCallbackInfo>.get_Length
	*/

	// RVA: -1 Offset: -1
	internal SparselyPopulatedArrayFragment<T> get_Prev() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD29 Offset: 0xD29 VA: 0xD29
	|-SparselyPopulatedArrayFragment<object>.get_Prev
	|-SparselyPopulatedArrayFragment<CancellationCallbackInfo>.get_Prev
	*/

	// RVA: -1 Offset: -1
	internal T SafeAtomicRemove(int index, T expectedElement) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA47 Offset: 0xA47 VA: 0xA47
	|-SparselyPopulatedArrayFragment<object>.SafeAtomicRemove
	|-SparselyPopulatedArrayFragment<CancellationCallbackInfo>.SafeAtomicRemove
	*/
}

// Namespace: System.Threading
public static class LazyInitializer // TypeDefIndex: 674
{
	// Methods

	// RVA: -1 Offset: -1
	public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x64F Offset: 0x64F VA: 0x64F
	|-LazyInitializer.EnsureInitialized<object>
	|-LazyInitializer.EnsureInitialized<ManualResetEvent>
	|-LazyInitializer.EnsureInitialized<SemaphoreSlim>
	|-LazyInitializer.EnsureInitialized<Task.ContingentProperties>
	*/

	// RVA: -1 Offset: -1
	private static T EnsureInitializedCore<T>(ref T target, Func<T> valueFactory) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x650 Offset: 0x650 VA: 0x650
	|-LazyInitializer.EnsureInitializedCore<object>
	*/
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0
[DebuggerDisplayAttribute] // RVA: 0x3E0 Offset: 0x3E0 VA: 0x3E0
public class ManualResetEventSlim : IDisposable // TypeDefIndex: 675
{
	// Fields
	private object m_lock; // 0x8
	private ManualResetEvent m_eventObj; // 0xC
	private int m_combinedState; // 0x10
	private static Action<object> s_cancellationTokenCallback; // 0x0

	// Properties
	public WaitHandle WaitHandle { get; }
	public bool IsSet { get; set; }
	public int SpinCount { get; set; }
	private int Waiters { get; set; }

	// Methods

	// RVA: 0x8DF Offset: 0x8DF VA: 0x8DF
	public WaitHandle get_WaitHandle() { }

	// RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0
	public bool get_IsSet() { }

	// RVA: 0x403 Offset: 0x403 VA: 0x403
	private void set_IsSet(bool value) { }

	// RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1
	public int get_SpinCount() { }

	// RVA: 0x404 Offset: 0x404 VA: 0x404
	private void set_SpinCount(int value) { }

	// RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2
	private int get_Waiters() { }

	// RVA: 0x405 Offset: 0x405 VA: 0x405
	private void set_Waiters(int value) { }

	// RVA: 0x406 Offset: 0x406 VA: 0x406
	public void .ctor(bool initialState) { }

	// RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
	public void .ctor(bool initialState, int spinCount) { }

	// RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
	private void Initialize(bool initialState, int spinCount) { }

	// RVA: 0x566 Offset: 0x566 VA: 0x566
	private void EnsureLockObjectCreated() { }

	// RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3
	private bool LazyInitializeEvent() { }

	// RVA: 0x567 Offset: 0x567 VA: 0x567
	public void Set() { }

	// RVA: 0x407 Offset: 0x407 VA: 0x407
	private void Set(bool duringCancellation) { }

	// RVA: 0x9C0 Offset: 0x9C0 VA: 0x9C0
	public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { }

	// RVA: 0x568 Offset: 0x568 VA: 0x568 Slot: 4
	public void Dispose() { }

	// RVA: 0x408 Offset: 0x408 VA: 0x408 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x569 Offset: 0x569 VA: 0x569
	private void ThrowIfDisposed() { }

	// RVA: 0x56A Offset: 0x56A VA: 0x56A
	private static void CancellationTokenCallback(object obj) { }

	// RVA: 0x2BB Offset: 0x2BB VA: 0x2BB
	private void UpdateStateAtomically(int newBits, int updateBitsMask) { }

	// RVA: 0x9C1 Offset: 0x9C1 VA: 0x9C1
	private static int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount) { }

	// RVA: 0x493 Offset: 0x493 VA: 0x493
	private static int ExtractStatePortion(int state, int mask) { }

	// RVA: 0xEF5 Offset: 0xEF5 VA: 0xEF5
	private static void .cctor() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
[DebuggerDisplayAttribute] // RVA: 0x3E1 Offset: 0x3E1 VA: 0x3E1
public class SemaphoreSlim : IDisposable // TypeDefIndex: 676
{
	// Fields
	private int m_currentCount; // 0x8
	private readonly int m_maxCount; // 0xC
	private int m_waitCount; // 0x10
	private object m_lockObj; // 0x14
	private ManualResetEvent m_waitHandle; // 0x18
	private SemaphoreSlim.TaskNode m_asyncHead; // 0x1C
	private SemaphoreSlim.TaskNode m_asyncTail; // 0x20
	private static readonly Task<bool> s_trueTask; // 0x0
	private static Action<object> s_cancellationTokenCanceledEventHandler; // 0x4

	// Methods

	// RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
	public void .ctor(int initialCount, int maxCount) { }

	// RVA: 0x577 Offset: 0x577 VA: 0x577
	public void Wait() { }

	// RVA: 0x9C4 Offset: 0x9C4 VA: 0x9C4
	public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { }

	// RVA: 0x10E Offset: 0x10E VA: 0x10E
	private bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, CancellationToken cancellationToken) { }

	// RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9
	public Task WaitAsync() { }

	// RVA: 0x9C5 Offset: 0x9C5 VA: 0x9C5
	public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken) { }

	// RVA: 0x8EA Offset: 0x8EA VA: 0x8EA
	private SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter() { }

	// RVA: 0x496 Offset: 0x496 VA: 0x496
	private bool RemoveAsyncWaiter(SemaphoreSlim.TaskNode task) { }

	[AsyncStateMachineAttribute] // RVA: 0x711 Offset: 0x711 VA: 0x711
	// RVA: 0x10F Offset: 0x10F VA: 0x10F
	private Task<bool> WaitUntilCountOrTimeoutAsync(SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, CancellationToken cancellationToken) { }

	// RVA: 0x8EB Offset: 0x8EB VA: 0x8EB
	public int Release() { }

	// RVA: 0x497 Offset: 0x497 VA: 0x497
	public int Release(int releaseCount) { }

	// RVA: 0x578 Offset: 0x578 VA: 0x578
	private static void QueueWaiterTask(SemaphoreSlim.TaskNode waiterTask) { }

	// RVA: 0x579 Offset: 0x579 VA: 0x579 Slot: 4
	public void Dispose() { }

	// RVA: 0x410 Offset: 0x410 VA: 0x410 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x57A Offset: 0x57A VA: 0x57A
	private static void CancellationTokenCanceledEventHandler(object obj) { }

	// RVA: 0x57B Offset: 0x57B VA: 0x57B
	private void CheckDispose() { }

	// RVA: 0x8EC Offset: 0x8EC VA: 0x8EC
	private static string GetResourceString(string str) { }

	// RVA: 0xEF8 Offset: 0xEF8 VA: 0xEF8
	private static void .cctor() { }
}

// Namespace: 
private sealed class SemaphoreSlim.TaskNode : Task<bool>, IThreadPoolWorkItem // TypeDefIndex: 677
{
	// Fields
	internal SemaphoreSlim.TaskNode Prev; // 0x2C
	internal SemaphoreSlim.TaskNode Next; // 0x30

	// Methods

	// RVA: 0x57D Offset: 0x57D VA: 0x57D
	internal void .ctor() { }

	// RVA: 0x57E Offset: 0x57E VA: 0x57E Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }

	// RVA: 0x412 Offset: 0x412 VA: 0x412 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x3E2 Offset: 0x3E2 VA: 0x3E2
private struct SemaphoreSlim.<WaitUntilCountOrTimeoutAsync>d__31 : IAsyncStateMachine // TypeDefIndex: 678
{
	// Fields
	public int <>1__state; // 0x0
	public AsyncTaskMethodBuilder<bool> <>t__builder; // 0x4
	public CancellationToken cancellationToken; // 0x10
	public SemaphoreSlim.TaskNode asyncWaiter; // 0x14
	public int millisecondsTimeout; // 0x18
	private CancellationTokenSource <cts>5__1; // 0x1C
	public SemaphoreSlim <>4__this; // 0x20
	private object <>7__wrap1; // 0x24
	private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<Task> <>u__1; // 0x28
	private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2; // 0x30

	// Methods

	// RVA: 0x57C Offset: 0x57C VA: 0x57C Slot: 4
	private void MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0x712 Offset: 0x712 VA: 0x712
	// RVA: 0x411 Offset: 0x411 VA: 0x411 Slot: 5
	private void SetStateMachine(IAsyncStateMachine stateMachine) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
[DebuggerTypeProxyAttribute] // RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
[DebuggerDisplayAttribute] // RVA: 0x3E3 Offset: 0x3E3 VA: 0x3E3
public struct SpinLock // TypeDefIndex: 679
{
	// Fields
	private int m_owner; // 0x0
	private static int MAXIMUM_WAITERS; // 0x0

	// Properties
	public bool IsHeldByCurrentThread { get; }
	public bool IsThreadOwnerTrackingEnabled { get; }

	// Methods

	// RVA: 0x415 Offset: 0x415 VA: 0x415
	public void .ctor(bool enableThreadOwnerTracking) { }

	// RVA: 0x416 Offset: 0x416 VA: 0x416
	public void Enter(ref bool lockTaken) { }

	// RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2
	public void TryEnter(int millisecondsTimeout, ref bool lockTaken) { }

	// RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
	private void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken) { }

	// RVA: 0x57F Offset: 0x57F VA: 0x57F
	private void DecrementWaiters() { }

	// RVA: 0xDC Offset: 0xDC VA: 0xDC
	private void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken) { }

	[ReliabilityContractAttribute] // RVA: 0x713 Offset: 0x713 VA: 0x713
	// RVA: 0x417 Offset: 0x417 VA: 0x417
	public void Exit(bool useMemoryBarrier) { }

	// RVA: 0x418 Offset: 0x418 VA: 0x418
	private void ExitSlowPath(bool useMemoryBarrier) { }

	[ReliabilityContractAttribute] // RVA: 0x714 Offset: 0x714 VA: 0x714
	// RVA: 0x8ED Offset: 0x8ED VA: 0x8ED
	public bool get_IsHeldByCurrentThread() { }

	[ReliabilityContractAttribute] // RVA: 0x715 Offset: 0x715 VA: 0x715
	// RVA: 0x8EE Offset: 0x8EE VA: 0x8EE
	public bool get_IsThreadOwnerTrackingEnabled() { }

	// RVA: 0xEF9 Offset: 0xEF9 VA: 0xEF9
	private static void .cctor() { }
}

// Namespace: 
internal class SpinLock.SystemThreading_SpinLockDebugView // TypeDefIndex: 680
{}

// Namespace: System.Threading
public struct SpinWait // TypeDefIndex: 681
{
	// Fields
	private int m_count; // 0x0

	// Properties
	public bool NextSpinWillYield { get; }

	// Methods

	// RVA: 0x8EF Offset: 0x8EF VA: 0x8EF
	public bool get_NextSpinWillYield() { }

	// RVA: 0x580 Offset: 0x580 VA: 0x580
	public void SpinOnce() { }
}

// Namespace: System.Threading
internal static class PlatformHelper // TypeDefIndex: 682
{
	// Fields
	private static int s_processorCount; // 0x0
	private static int s_lastProcessorCountRefreshTicks; // 0x4

	// Properties
	internal static int ProcessorCount { get; }
	internal static bool IsSingleProcessor { get; }

	// Methods

	// RVA: 0x220 Offset: 0x220 VA: 0x220
	internal static int get_ProcessorCount() { }

	// RVA: 0x221 Offset: 0x221 VA: 0x221
	internal static bool get_IsSingleProcessor() { }
}

// Namespace: System.Threading
internal static class TimeoutHelper // TypeDefIndex: 683
{
	// Methods

	// RVA: 0x23C Offset: 0x23C VA: 0x23C
	public static uint GetTime() { }

	// RVA: 0x4AC Offset: 0x4AC VA: 0x4AC
	public static int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E4 Offset: 0x3E4 VA: 0x3E4
[Serializable]
public class AbandonedMutexException : SystemException // TypeDefIndex: 684
{
	// Fields
	private int m_MutexIndex; // 0x44
	private Mutex m_Mutex; // 0x48

	// Methods

	// RVA: 0x551 Offset: 0x551 VA: 0x551
	public void .ctor() { }

	// RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
	public void .ctor(int location, WaitHandle handle) { }

	// RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
	private void SetupException(int location, WaitHandle handle) { }

	// RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public sealed class AsyncLocal<T> : IAsyncLocal // TypeDefIndex: 685
{
	// Fields
	private readonly Action<AsyncLocalValueChangedArgs<T>> m_valueChangedHandler; // 0xFFFFFFFF

	// Properties
	public T Value { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Action<AsyncLocalValueChangedArgs<T>> valueChangedHandler) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4
	|-AsyncLocal<ActivityTracker.ActivityInfo>..ctor
	|-AsyncLocal<object>..ctor
	*/

	// RVA: -1 Offset: -1
	public T get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD2A Offset: 0xD2A VA: 0xD2A
	|-AsyncLocal<ActivityTracker.ActivityInfo>.get_Value
	|-AsyncLocal<object>.get_Value
	*/

	// RVA: -1 Offset: -1
	public void set_Value(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3
	|-AsyncLocal<ActivityTracker.ActivityInfo>.set_Value
	|-AsyncLocal<object>.set_Value
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private void System.Threading.IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11F Offset: 0x11F VA: 0x11F
	|-AsyncLocal<object>.System.Threading.IAsyncLocal.OnValueChanged
	*/
}

// Namespace: System.Threading
internal interface IAsyncLocal // TypeDefIndex: 686
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnValueChanged(object previousValue, object currentValue, bool contextChanged) { }
}

// Namespace: System.Threading
public struct AsyncLocalValueChangedArgs<T> // TypeDefIndex: 687
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x596 Offset: 0x596 VA: 0x596
	private T <PreviousValue>k__BackingField; // 0xFFFFFFFF
	[CompilerGeneratedAttribute] // RVA: 0x597 Offset: 0x597 VA: 0x597
	private T <CurrentValue>k__BackingField; // 0xFFFFFFFF
	[CompilerGeneratedAttribute] // RVA: 0x598 Offset: 0x598 VA: 0x598
	private bool <ThreadContextChanged>k__BackingField; // 0xFFFFFFFF

	// Properties
	public T PreviousValue { get; set; }
	public T CurrentValue { get; set; }
	private bool ThreadContextChanged { set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x716 Offset: 0x716 VA: 0x716
	// RVA: -1 Offset: -1
	public T get_PreviousValue() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD2B Offset: 0xD2B VA: 0xD2B
	|-AsyncLocalValueChangedArgs<ActivityTracker.ActivityInfo>.get_PreviousValue
	|-AsyncLocalValueChangedArgs<object>.get_PreviousValue
	*/

	[CompilerGeneratedAttribute] // RVA: 0x717 Offset: 0x717 VA: 0x717
	// RVA: -1 Offset: -1
	private void set_PreviousValue(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5
	|-AsyncLocalValueChangedArgs<object>.set_PreviousValue
	*/

	[CompilerGeneratedAttribute] // RVA: 0x718 Offset: 0x718 VA: 0x718
	// RVA: -1 Offset: -1
	public T get_CurrentValue() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD2C Offset: 0xD2C VA: 0xD2C
	|-AsyncLocalValueChangedArgs<ActivityTracker.ActivityInfo>.get_CurrentValue
	|-AsyncLocalValueChangedArgs<object>.get_CurrentValue
	*/

	[CompilerGeneratedAttribute] // RVA: 0x719 Offset: 0x719 VA: 0x719
	// RVA: -1 Offset: -1
	private void set_CurrentValue(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6
	|-AsyncLocalValueChangedArgs<object>.set_CurrentValue
	*/

	[CompilerGeneratedAttribute] // RVA: 0x71A Offset: 0x71A VA: 0x71A
	// RVA: -1 Offset: -1
	private void set_ThreadContextChanged(bool value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7
	|-AsyncLocalValueChangedArgs<object>.set_ThreadContextChanged
	*/

	// RVA: -1 Offset: -1
	internal void .ctor(T previousValue, T currentValue, bool contextChanged) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x120 Offset: 0x120 VA: 0x120
	|-AsyncLocalValueChangedArgs<object>..ctor
	*/
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E5 Offset: 0x3E5 VA: 0x3E5
public enum EventResetMode // TypeDefIndex: 688
{
	// Fields
	public int value__; // 0x0
	public const EventResetMode AutoReset = 0;
	public const EventResetMode ManualReset = 1;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E6 Offset: 0x3E6 VA: 0x3E6
public class EventWaitHandle : WaitHandle // TypeDefIndex: 689
{
	// Methods

	// RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1
	public void .ctor(bool initialState, EventResetMode mode) { }

	// RVA: 0xD9 Offset: 0xD9 VA: 0xD9
	public void .ctor(bool initialState, EventResetMode mode, string name) { }

	// RVA: 0x8CA Offset: 0x8CA VA: 0x8CA
	public bool Reset() { }

	// RVA: 0x8CB Offset: 0x8CB VA: 0x8CB
	public bool Set() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E7 Offset: 0x3E7 VA: 0x3E7
public sealed class ContextCallback : MulticastDelegate // TypeDefIndex: 690
{
	// Methods

	// RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3F6 Offset: 0x3F6 VA: 0x3F6 Slot: 12
	public virtual void Invoke(object state) { }

	// RVA: 0x10A Offset: 0x10A VA: 0x10A Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x3F7 Offset: 0x3F7 VA: 0x3F7 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
internal struct ExecutionContextSwitcher // TypeDefIndex: 691
{
	// Fields
	internal ExecutionContext.Reader outerEC; // 0x0
	internal bool outerECBelongsToScope; // 0x4
	internal object hecsw; // 0x8
	internal Thread thread; // 0xC

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x71B Offset: 0x71B VA: 0x71B
	[HandleProcessCorruptedStateExceptionsAttribute] // RVA: 0x71B Offset: 0x71B VA: 0x71B
	// RVA: 0x8DC Offset: 0x8DC VA: 0x8DC
	internal bool UndoNoThrow() { }

	[ReliabilityContractAttribute] // RVA: 0x71C Offset: 0x71C VA: 0x71C
	// RVA: 0x562 Offset: 0x562 VA: 0x562
	internal void Undo() { }
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : IDisposable, ISerializable // TypeDefIndex: 692
{
	// Fields
	private SynchronizationContext _syncContext; // 0x8
	private SynchronizationContext _syncContextNoFlow; // 0xC
	private LogicalCallContext _logicalCallContext; // 0x10
	private IllogicalCallContext _illogicalCallContext; // 0x14
	private ExecutionContext.Flags _flags; // 0x18
	private Dictionary<IAsyncLocal, object> _localValues; // 0x1C
	private List<IAsyncLocal> _localChangeNotifications; // 0x20
	private static readonly ExecutionContext s_dummyDefaultEC; // 0x0

	// Properties
	internal bool isNewCapture { get; set; }
	internal bool isFlowSuppressed { get; set; }
	internal static ExecutionContext PreAllocatedDefault { get; }
	internal bool IsPreAllocatedDefault { get; }
	internal LogicalCallContext LogicalCallContext { get; set; }
	internal IllogicalCallContext IllogicalCallContext { get; set; }
	internal SynchronizationContext SynchronizationContext { get; set; }
	internal SynchronizationContext SynchronizationContextNoFlow { get; set; }

	// Methods

	// RVA: 0x8CC Offset: 0x8CC VA: 0x8CC
	internal bool get_isNewCapture() { }

	// RVA: 0x3F8 Offset: 0x3F8 VA: 0x3F8
	internal void set_isNewCapture(bool value) { }

	// RVA: 0x8CD Offset: 0x8CD VA: 0x8CD
	internal bool get_isFlowSuppressed() { }

	// RVA: 0x3F9 Offset: 0x3F9 VA: 0x3F9
	internal void set_isFlowSuppressed(bool value) { }

	// RVA: 0x21C Offset: 0x21C VA: 0x21C
	internal static ExecutionContext get_PreAllocatedDefault() { }

	// RVA: 0x8CE Offset: 0x8CE VA: 0x8CE
	internal bool get_IsPreAllocatedDefault() { }

	[ReliabilityContractAttribute] // RVA: 0x71D Offset: 0x71D VA: 0x71D
	// RVA: 0x55F Offset: 0x55F VA: 0x55F
	internal void .ctor() { }

	[ReliabilityContractAttribute] // RVA: 0x71E Offset: 0x71E VA: 0x71E
	// RVA: 0x3FA Offset: 0x3FA VA: 0x3FA
	internal void .ctor(bool isPreAllocatedDefault) { }

	// RVA: 0x8CF Offset: 0x8CF VA: 0x8CF
	internal static object GetLocalValue(IAsyncLocal local) { }

	// RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2
	internal static void SetLocalValue(IAsyncLocal local, object newValue, bool needChangeNotifications) { }

	[HandleProcessCorruptedStateExceptionsAttribute] // RVA: 0x71F Offset: 0x71F VA: 0x71F
	// RVA: 0x3FB Offset: 0x3FB VA: 0x3FB
	internal static void OnAsyncLocalContextChanged(ExecutionContext previous, ExecutionContext current) { }

	// RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0
	internal LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x3FC Offset: 0x3FC VA: 0x3FC
	internal void set_LogicalCallContext(LogicalCallContext value) { }

	// RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1
	internal IllogicalCallContext get_IllogicalCallContext() { }

	// RVA: 0x3FD Offset: 0x3FD VA: 0x3FD
	internal void set_IllogicalCallContext(IllogicalCallContext value) { }

	[ReliabilityContractAttribute] // RVA: 0x720 Offset: 0x720 VA: 0x720
	// RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2
	internal SynchronizationContext get_SynchronizationContext() { }

	[ReliabilityContractAttribute] // RVA: 0x721 Offset: 0x721 VA: 0x721
	// RVA: 0x3FE Offset: 0x3FE VA: 0x3FE
	internal void set_SynchronizationContext(SynchronizationContext value) { }

	[ReliabilityContractAttribute] // RVA: 0x722 Offset: 0x722 VA: 0x722
	// RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3
	internal SynchronizationContext get_SynchronizationContextNoFlow() { }

	[ReliabilityContractAttribute] // RVA: 0x723 Offset: 0x723 VA: 0x723
	// RVA: 0x3FF Offset: 0x3FF VA: 0x3FF
	internal void set_SynchronizationContextNoFlow(SynchronizationContext value) { }

	// RVA: 0x560 Offset: 0x560 VA: 0x560 Slot: 4
	public void Dispose() { }

	// RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3
	public static void Run(ExecutionContext executionContext, ContextCallback callback, object state) { }

	[FriendAccessAllowedAttribute] // RVA: 0x724 Offset: 0x724 VA: 0x724
	// RVA: 0xDA Offset: 0xDA VA: 0xDA
	internal static void Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx) { }

	[HandleProcessCorruptedStateExceptionsAttribute] // RVA: 0x725 Offset: 0x725 VA: 0x725
	// RVA: 0xDB Offset: 0xDB VA: 0xDB
	internal static void RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx) { }

	// RVA: 0x561 Offset: 0x561 VA: 0x561
	internal static void EstablishCopyOnWriteScope(ref ExecutionContextSwitcher ecsw) { }

	// RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4
	private static void EstablishCopyOnWriteScope(Thread currentThread, bool knownNullWindowsIdentity, ref ExecutionContextSwitcher ecsw) { }

	[HandleProcessCorruptedStateExceptionsAttribute] // RVA: 0x726 Offset: 0x726 VA: 0x726
	// RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
	internal static ExecutionContextSwitcher SetExecutionContext(ExecutionContext executionContext, bool preserveSyncCtx) { }

	// RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4
	public ExecutionContext CreateCopy() { }

	// RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5
	internal ExecutionContext CreateMutableCopy() { }

	// RVA: 0x21D Offset: 0x21D VA: 0x21D
	public static bool IsFlowSuppressed() { }

	// RVA: 0x21E Offset: 0x21E VA: 0x21E
	public static ExecutionContext Capture() { }

	[FriendAccessAllowedAttribute] // RVA: 0x727 Offset: 0x727 VA: 0x727
	// RVA: 0x21F Offset: 0x21F VA: 0x21F
	internal static ExecutionContext FastCapture() { }

	// RVA: 0x48A Offset: 0x48A VA: 0x48A
	internal static ExecutionContext Capture(ref StackCrawlMark stackMark, ExecutionContext.CaptureOptions options) { }

	// RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x48B Offset: 0x48B VA: 0x48B
	internal bool IsDefaultFTContext(bool ignoreSyncCtx) { }

	// RVA: 0xEF4 Offset: 0xEF4 VA: 0xEF4
	private static void .cctor() { }
}

// Namespace: 
private enum ExecutionContext.Flags // TypeDefIndex: 693
{
	// Fields
	public int value__; // 0x0
	public const ExecutionContext.Flags None = 0;
	public const ExecutionContext.Flags IsNewCapture = 1;
	public const ExecutionContext.Flags IsFlowSuppressed = 2;
	public const ExecutionContext.Flags IsPreAllocatedDefault = 4;
}

// Namespace: 
internal struct ExecutionContext.Reader // TypeDefIndex: 694
{
	// Fields
	private ExecutionContext m_ec; // 0x0

	// Properties
	public bool IsNull { get; }
	public bool IsFlowSuppressed { get; }
	public SynchronizationContext SynchronizationContext { get; }
	public SynchronizationContext SynchronizationContextNoFlow { get; }
	public LogicalCallContext.Reader LogicalCallContext { get; }

	// Methods

	// RVA: 0x400 Offset: 0x400 VA: 0x400
	public void .ctor(ExecutionContext ec) { }

	// RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6
	public ExecutionContext DangerousGetRawExecutionContext() { }

	// RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7
	public bool get_IsNull() { }

	// RVA: 0x48C Offset: 0x48C VA: 0x48C
	public bool IsDefaultFTContext(bool ignoreSyncCtx) { }

	// RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8
	public bool get_IsFlowSuppressed() { }

	// RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9
	public SynchronizationContext get_SynchronizationContext() { }

	// RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
	public SynchronizationContext get_SynchronizationContextNoFlow() { }

	// RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
	public LogicalCallContext.Reader get_LogicalCallContext() { }

	// RVA: 0x48D Offset: 0x48D VA: 0x48D
	public object GetLocalValue(IAsyncLocal local) { }

	// RVA: 0x48E Offset: 0x48E VA: 0x48E
	public bool HasSameLocalValues(ExecutionContext other) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x3E8 Offset: 0x3E8 VA: 0x3E8
internal enum ExecutionContext.CaptureOptions // TypeDefIndex: 695
{
	// Fields
	public int value__; // 0x0
	public const ExecutionContext.CaptureOptions None = 0;
	public const ExecutionContext.CaptureOptions IgnoreSyncCtx = 1;
	public const ExecutionContext.CaptureOptions OptimizeDefaultCase = 2;
}

// Namespace: System.Threading
[Serializable]
public class LockRecursionException : Exception // TypeDefIndex: 696
{
	// Methods

	// RVA: 0x565 Offset: 0x565 VA: 0x565
	public void .ctor() { }

	// RVA: 0x401 Offset: 0x401 VA: 0x401
	public void .ctor(string message) { }

	// RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3E9 Offset: 0x3E9 VA: 0x3E9
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 697
{
	// Methods

	// RVA: 0x402 Offset: 0x402 VA: 0x402
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3EA Offset: 0x3EA VA: 0x3EA
public static class Monitor // TypeDefIndex: 698
{
	// Methods

	// RVA: 0x56B Offset: 0x56B VA: 0x56B
	public static void Enter(object obj) { }

	// RVA: 0x409 Offset: 0x409 VA: 0x409
	public static void Enter(object obj, ref bool lockTaken) { }

	// RVA: 0xEF6 Offset: 0xEF6 VA: 0xEF6
	private static void ThrowLockTakenException() { }

	[ReliabilityContractAttribute] // RVA: 0x728 Offset: 0x728 VA: 0x728
	// RVA: 0x56C Offset: 0x56C VA: 0x56C
	public static void Exit(object obj) { }

	// RVA: 0x9C2 Offset: 0x9C2 VA: 0x9C2
	public static bool Wait(object obj, int millisecondsTimeout, bool exitContext) { }

	// RVA: 0x494 Offset: 0x494 VA: 0x494
	public static bool Wait(object obj, int millisecondsTimeout) { }

	// RVA: 0x56D Offset: 0x56D VA: 0x56D
	public static void Pulse(object obj) { }

	// RVA: 0x56E Offset: 0x56E VA: 0x56E
	public static void PulseAll(object obj) { }

	// RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4
	private static bool Monitor_test_synchronised(object obj) { }

	// RVA: 0x56F Offset: 0x56F VA: 0x56F
	private static void Monitor_pulse(object obj) { }

	// RVA: 0x570 Offset: 0x570 VA: 0x570
	private static void ObjPulse(object obj) { }

	// RVA: 0x571 Offset: 0x571 VA: 0x571
	private static void Monitor_pulse_all(object obj) { }

	// RVA: 0x572 Offset: 0x572 VA: 0x572
	private static void ObjPulseAll(object obj) { }

	// RVA: 0x495 Offset: 0x495 VA: 0x495
	private static bool Monitor_wait(object obj, int ms) { }

	// RVA: 0x9C3 Offset: 0x9C3 VA: 0x9C3
	private static bool ObjWait(bool exitContext, int millisecondsTimeout, object obj) { }

	// RVA: 0x2BC Offset: 0x2BC VA: 0x2BC
	private static void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken) { }

	// RVA: 0x2BD Offset: 0x2BD VA: 0x2BD
	private static void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken) { }

	// RVA: 0x40A Offset: 0x40A VA: 0x40A
	private static void ReliableEnter(object obj, ref bool lockTaken) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3EB Offset: 0x3EB VA: 0x3EB
public sealed class ParameterizedThreadStart : MulticastDelegate // TypeDefIndex: 699
{
	// Methods

	// RVA: 0x2BE Offset: 0x2BE VA: 0x2BE
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x40B Offset: 0x40B VA: 0x40B Slot: 12
	public virtual void Invoke(object obj) { }

	// RVA: 0x10D Offset: 0x10D VA: 0x10D Slot: 13
	public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object) { }

	// RVA: 0x40C Offset: 0x40C VA: 0x40C Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
[TypeForwardedFromAttribute] // RVA: 0x3EC Offset: 0x3EC VA: 0x3EC
[Serializable]
public class SemaphoreFullException : SystemException // TypeDefIndex: 700
{
	// Methods

	// RVA: 0x576 Offset: 0x576 VA: 0x576
	public void .ctor() { }

	// RVA: 0x2BF Offset: 0x2BF VA: 0x2BF
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public sealed class SendOrPostCallback : MulticastDelegate // TypeDefIndex: 701
{
	// Methods

	// RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x413 Offset: 0x413 VA: 0x413 Slot: 12
	public virtual void Invoke(object state) { }

	// RVA: 0x110 Offset: 0x110 VA: 0x110 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x414 Offset: 0x414 VA: 0x414 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 702
{
	// Properties
	public static SynchronizationContext Current { get; }
	internal static SynchronizationContext CurrentNoFlow { get; }

	// Methods

	// RVA: 0x581 Offset: 0x581 VA: 0x581
	public void .ctor() { }

	// RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4 Slot: 4
	public virtual void Send(SendOrPostCallback d, object state) { }

	// RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5 Slot: 5
	public virtual void Post(SendOrPostCallback d, object state) { }

	// RVA: 0x582 Offset: 0x582 VA: 0x582
	public static void SetSynchronizationContext(SynchronizationContext syncContext) { }

	// RVA: 0x222 Offset: 0x222 VA: 0x222
	public static SynchronizationContext get_Current() { }

	[FriendAccessAllowedAttribute] // RVA: 0x729 Offset: 0x729 VA: 0x729
	// RVA: 0x223 Offset: 0x223 VA: 0x223
	internal static SynchronizationContext get_CurrentNoFlow() { }

	// RVA: 0x224 Offset: 0x224 VA: 0x224
	private static SynchronizationContext GetThreadLocalContext() { }

	// RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0 Slot: 6
	public virtual SynchronizationContext CreateCopy() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3ED Offset: 0x3ED VA: 0x3ED
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 703
{
	// Methods

	// RVA: 0x583 Offset: 0x583 VA: 0x583
	public void .ctor() { }

	// RVA: 0x419 Offset: 0x419 VA: 0x419
	public void .ctor(string message) { }

	// RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
internal class ThreadHelper // TypeDefIndex: 704
{
	// Fields
	private Delegate _start; // 0x8
	private object _startArg; // 0xC
	private ExecutionContext _executionContext; // 0x10
	internal static ContextCallback _ccb; // 0x0

	// Methods

	// RVA: 0xF08 Offset: 0xF08 VA: 0xF08
	private static void .cctor() { }

	// RVA: 0x450 Offset: 0x450 VA: 0x450
	internal void .ctor(Delegate start) { }

	// RVA: 0x451 Offset: 0x451 VA: 0x451
	internal void SetExecutionContextHelper(ExecutionContext ec) { }

	// RVA: 0x5C1 Offset: 0x5C1 VA: 0x5C1
	private static void ThreadStart_Context(object state) { }

	// RVA: 0x452 Offset: 0x452 VA: 0x452
	internal void ThreadStart(object obj) { }

	// RVA: 0x5C2 Offset: 0x5C2 VA: 0x5C2
	internal void ThreadStart() { }
}

// Namespace: System.Threading
[ComDefaultInterfaceAttribute] // RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
[ComVisibleAttribute] // RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
[ClassInterfaceAttribute] // RVA: 0x3EE Offset: 0x3EE VA: 0x3EE
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 705
{
	// Fields
	private static LocalDataStoreMgr s_LocalDataStoreMgr; // 0x0
	[ThreadStaticAttribute] // RVA: 0x599 Offset: 0x599 VA: 0x599
	private static LocalDataStoreHolder s_LocalDataStore; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x59A Offset: 0x59A VA: 0x59A
	internal static CultureInfo m_CurrentCulture; // 0x80000004
	[ThreadStaticAttribute] // RVA: 0x59B Offset: 0x59B VA: 0x59B
	internal static CultureInfo m_CurrentUICulture; // 0x80000008
	private static AsyncLocal<CultureInfo> s_asyncLocalCurrentCulture; // 0x4
	private static AsyncLocal<CultureInfo> s_asyncLocalCurrentUICulture; // 0x8
	private InternalThread internal_thread; // 0x8
	private object m_ThreadStartArg; // 0xC
	private object pending_exception; // 0x10
	private IPrincipal principal; // 0x14
	private int principal_version; // 0x18
	[ThreadStaticAttribute] // RVA: 0x59C Offset: 0x59C VA: 0x59C
	private static Thread current_thread; // 0x8000000C
	private MulticastDelegate m_Delegate; // 0x1C
	private ExecutionContext m_ExecutionContext; // 0x20
	private bool m_ExecutionContextBelongsToOuterScope; // 0x24

	// Properties
	internal bool ExecutionContextBelongsToCurrentScope { get; set; }
	public CultureInfo CurrentUICulture { get; }
	public CultureInfo CurrentCulture { get; }
	private InternalThread Internal { get; }
	public static Context CurrentContext { get; }
	public static Thread CurrentThread { get; }
	internal static int CurrentThreadId { get; }
	public bool IsThreadPoolThread { get; }
	internal bool IsThreadPoolThreadInternal { get; }
	public bool IsBackground { set; }
	public string Name { set; }
	public ThreadState ThreadState { get; }
	public int ManagedThreadId { get; }

	// Methods

	// RVA: 0x446 Offset: 0x446 VA: 0x446
	public void .ctor(ThreadStart start) { }

	// RVA: 0x447 Offset: 0x447 VA: 0x447
	public void .ctor(ParameterizedThreadStart start) { }

	// RVA: 0x5BA Offset: 0x5BA VA: 0x5BA
	public void Start() { }

	// RVA: 0x448 Offset: 0x448 VA: 0x448
	public void Start(object parameter) { }

	// RVA: 0x449 Offset: 0x449 VA: 0x449
	private void Start(ref StackCrawlMark stackMark) { }

	[ReliabilityContractAttribute] // RVA: 0x72A Offset: 0x72A VA: 0x72A
	// RVA: 0x922 Offset: 0x922 VA: 0x922
	internal ExecutionContext.Reader GetExecutionContextReader() { }

	// RVA: 0x923 Offset: 0x923 VA: 0x923
	internal bool get_ExecutionContextBelongsToCurrentScope() { }

	// RVA: 0x44A Offset: 0x44A VA: 0x44A
	internal void set_ExecutionContextBelongsToCurrentScope(bool value) { }

	[ReliabilityContractAttribute] // RVA: 0x72B Offset: 0x72B VA: 0x72B
	// RVA: 0x924 Offset: 0x924 VA: 0x924
	internal ExecutionContext GetMutableExecutionContext() { }

	[ReliabilityContractAttribute] // RVA: 0x72C Offset: 0x72C VA: 0x72C
	// RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
	internal void SetExecutionContext(ExecutionContext value, bool belongsToCurrentScope) { }

	[ReliabilityContractAttribute] // RVA: 0x72D Offset: 0x72D VA: 0x72D
	// RVA: 0x2DA Offset: 0x2DA VA: 0x2DA
	internal void SetExecutionContext(ExecutionContext.Reader value, bool belongsToCurrentScope) { }

	// RVA: 0x5BB Offset: 0x5BB VA: 0x5BB
	private static void SleepInternal(int millisecondsTimeout) { }

	// RVA: 0x5BC Offset: 0x5BC VA: 0x5BC
	public static void Sleep(int millisecondsTimeout) { }

	[ReliabilityContractAttribute] // RVA: 0x72E Offset: 0x72E VA: 0x72E
	// RVA: 0x230 Offset: 0x230 VA: 0x230
	private static bool YieldInternal() { }

	[ReliabilityContractAttribute] // RVA: 0x72F Offset: 0x72F VA: 0x72F
	// RVA: 0x231 Offset: 0x231 VA: 0x231
	public static bool Yield() { }

	// RVA: 0x2DB Offset: 0x2DB VA: 0x2DB
	private void SetStartHelper(Delegate start, int maxStackSize) { }

	// RVA: 0x925 Offset: 0x925 VA: 0x925
	public CultureInfo get_CurrentUICulture() { }

	// RVA: 0x926 Offset: 0x926 VA: 0x926
	internal CultureInfo GetCurrentUICultureNoAppX() { }

	// RVA: 0x927 Offset: 0x927 VA: 0x927
	public CultureInfo get_CurrentCulture() { }

	// RVA: 0x928 Offset: 0x928 VA: 0x928
	private CultureInfo GetCurrentCultureNoAppX() { }

	// RVA: 0xF04 Offset: 0xF04 VA: 0xF04
	public static void MemoryBarrier() { }

	// RVA: 0x5BD Offset: 0x5BD VA: 0x5BD
	private void ConstructInternalThread() { }

	// RVA: 0x929 Offset: 0x929 VA: 0x929
	private InternalThread get_Internal() { }

	// RVA: 0x232 Offset: 0x232 VA: 0x232
	public static Context get_CurrentContext() { }

	// RVA: 0x233 Offset: 0x233 VA: 0x233
	private static Thread GetCurrentThread() { }

	[ReliabilityContractAttribute] // RVA: 0x730 Offset: 0x730 VA: 0x730
	// RVA: 0x234 Offset: 0x234 VA: 0x234
	public static Thread get_CurrentThread() { }

	// RVA: 0x235 Offset: 0x235 VA: 0x235
	internal static int get_CurrentThreadId() { }

	// RVA: 0x236 Offset: 0x236 VA: 0x236
	public static int GetDomainID() { }

	// RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
	private IntPtr Thread_internal(MulticastDelegate start) { }

	[ReliabilityContractAttribute] // RVA: 0x731 Offset: 0x731 VA: 0x731
	// RVA: 0x5BE Offset: 0x5BE VA: 0x5BE Slot: 1
	protected override void Finalize() { }

	// RVA: 0x92A Offset: 0x92A VA: 0x92A
	public bool get_IsThreadPoolThread() { }

	// RVA: 0x92B Offset: 0x92B VA: 0x92B
	internal bool get_IsThreadPoolThreadInternal() { }

	// RVA: 0x44B Offset: 0x44B VA: 0x44B
	public void set_IsBackground(bool value) { }

	// RVA: 0x44C Offset: 0x44C VA: 0x44C
	private static void SetName_internal(InternalThread thread, string name) { }

	// RVA: 0x44D Offset: 0x44D VA: 0x44D
	public void set_Name(string value) { }

	// RVA: 0x92C Offset: 0x92C VA: 0x92C
	public ThreadState get_ThreadState() { }

	// RVA: 0xF05 Offset: 0xF05 VA: 0xF05
	private static void SpinWait_nop() { }

	[ReliabilityContractAttribute] // RVA: 0x732 Offset: 0x732 VA: 0x732
	// RVA: 0x5BF Offset: 0x5BF VA: 0x5BF
	public static void SpinWait(int iterations) { }

	// RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
	private void StartInternal(IPrincipal principal, ref StackCrawlMark stackMark) { }

	// RVA: 0x44E Offset: 0x44E VA: 0x44E
	private static void SetState(InternalThread thread, ThreadState set) { }

	// RVA: 0x44F Offset: 0x44F VA: 0x44F
	private static void ClrState(InternalThread thread, ThreadState clr) { }

	// RVA: 0x92D Offset: 0x92D VA: 0x92D
	private static ThreadState GetState(InternalThread thread) { }

	// RVA: 0x237 Offset: 0x237 VA: 0x237
	private static int SystemMaxStackStize() { }

	// RVA: 0x92E Offset: 0x92E VA: 0x92E
	private static int GetProcessDefaultStackSize(int maxStackSize) { }

	// RVA: 0x2DD Offset: 0x2DD VA: 0x2DD
	private void SetStart(MulticastDelegate start, int maxStackSize) { }

	[ReliabilityContractAttribute] // RVA: 0x733 Offset: 0x733 VA: 0x733
	// RVA: 0x92F Offset: 0x92F VA: 0x92F
	public int get_ManagedThreadId() { }

	[ReliabilityContractAttribute] // RVA: 0x734 Offset: 0x734 VA: 0x734
	// RVA: 0xF06 Offset: 0xF06 VA: 0xF06
	public static void BeginCriticalRegion() { }

	[ReliabilityContractAttribute] // RVA: 0x735 Offset: 0x735 VA: 0x735
	// RVA: 0xF07 Offset: 0xF07 VA: 0xF07
	public static void EndCriticalRegion() { }

	[ComVisibleAttribute] // RVA: 0x736 Offset: 0x736 VA: 0x736
	// RVA: 0x930 Offset: 0x930 VA: 0x930 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x931 Offset: 0x931 VA: 0x931
	private ThreadState ValidateThreadState() { }
}

// Namespace: System.Threading
[Serializable]
internal enum StackCrawlMark // TypeDefIndex: 706
{
	// Fields
	public int value__; // 0x0
	public const StackCrawlMark LookForMe = 0;
	public const StackCrawlMark LookForMyCaller = 1;
	public const StackCrawlMark LookForMyCallersCaller = 2;
	public const StackCrawlMark LookForThread = 3;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3EF Offset: 0x3EF VA: 0x3EF
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 707
{
	// Methods

	// RVA: 0x5C0 Offset: 0x5C0 VA: 0x5C0
	private void .ctor() { }

	// RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F0 Offset: 0x3F0 VA: 0x3F0
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 708
{
	// Methods

	// RVA: 0x5C3 Offset: 0x5C3 VA: 0x5C3
	public void .ctor() { }

	// RVA: 0x2DF Offset: 0x2DF VA: 0x2DF
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
internal interface IThreadPoolWorkItem // TypeDefIndex: 709
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ExecuteWorkItem() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void MarkAborted(ThreadAbortException tae) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F1 Offset: 0x3F1 VA: 0x3F1
public sealed class WaitCallback : MulticastDelegate // TypeDefIndex: 710
{
	// Methods

	// RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x45C Offset: 0x45C VA: 0x45C Slot: 12
	public virtual void Invoke(object state) { }

	// RVA: 0x116 Offset: 0x116 VA: 0x116 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x45D Offset: 0x45D VA: 0x45D Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F2 Offset: 0x3F2 VA: 0x3F2
public sealed class WaitOrTimerCallback : MulticastDelegate // TypeDefIndex: 711
{
	// Methods

	// RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9 Slot: 12
	public virtual void Invoke(object state, bool timedOut) { }

	// RVA: 0x75 Offset: 0x75 VA: 0x75 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, bool timedOut, AsyncCallback callback, object object) { }

	// RVA: 0x463 Offset: 0x463 VA: 0x463 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
internal static class ThreadPoolGlobals // TypeDefIndex: 712
{
	// Fields
	public static uint tpQuantum; // 0x0
	public static int processorCount; // 0x4
	public static bool tpHosted; // 0x8
	public static bool vmTpInitialized; // 0x9
	public static bool enableWorkerTracking; // 0xA
	public static ThreadPoolWorkQueue workQueue; // 0xC

	// Methods

	// RVA: 0xF0C Offset: 0xF0C VA: 0xF0C
	private static void .cctor() { }
}

// Namespace: System.Threading
internal sealed class ThreadPoolWorkQueue // TypeDefIndex: 713
{
	// Fields
	internal ThreadPoolWorkQueue.QueueSegment queueHead; // 0x8
	internal ThreadPoolWorkQueue.QueueSegment queueTail; // 0xC
	internal static ThreadPoolWorkQueue.SparseArray<ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues; // 0x0
	private int numOutstandingThreadRequests; // 0x10

	// Methods

	// RVA: 0x5C6 Offset: 0x5C6 VA: 0x5C6
	public void .ctor() { }

	// RVA: 0x933 Offset: 0x933 VA: 0x933
	public ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue() { }

	// RVA: 0x5C7 Offset: 0x5C7 VA: 0x5C7
	internal void EnsureThreadRequested() { }

	// RVA: 0x5C8 Offset: 0x5C8 VA: 0x5C8
	internal void MarkThreadRequestSatisfied() { }

	// RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0
	public void Enqueue(IThreadPoolWorkItem callback, bool forceGlobal) { }

	// RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
	internal bool LocalFindAndPop(IThreadPoolWorkItem callback) { }

	// RVA: 0xE2 Offset: 0xE2 VA: 0xE2
	public void Dequeue(ThreadPoolWorkQueueThreadLocals tl, out IThreadPoolWorkItem callback, out bool missedSteal) { }

	// RVA: 0x23B Offset: 0x23B VA: 0x23B
	internal static bool Dispatch() { }

	// RVA: 0xF0D Offset: 0xF0D VA: 0xF0D
	private static void .cctor() { }
}

// Namespace: 
internal class ThreadPoolWorkQueue.SparseArray<T> // TypeDefIndex: 714
{
	// Fields
	private T[] m_array; // 0xFFFFFFFF

	// Properties
	internal T[] Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(int initialSize) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8
	|-ThreadPoolWorkQueue.SparseArray<object>..ctor
	|-ThreadPoolWorkQueue.SparseArray<ThreadPoolWorkQueue.WorkStealingQueue>..ctor
	*/

	// RVA: -1 Offset: -1
	internal T[] get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD2D Offset: 0xD2D VA: 0xD2D
	|-ThreadPoolWorkQueue.SparseArray<object>.get_Current
	|-ThreadPoolWorkQueue.SparseArray<ThreadPoolWorkQueue.WorkStealingQueue>.get_Current
	*/

	// RVA: -1 Offset: -1
	internal int Add(T e) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x651 Offset: 0x651 VA: 0x651
	|-ThreadPoolWorkQueue.SparseArray<object>.Add
	|-ThreadPoolWorkQueue.SparseArray<ThreadPoolWorkQueue.WorkStealingQueue>.Add
	*/

	// RVA: -1 Offset: -1
	internal void Remove(T e) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9
	|-ThreadPoolWorkQueue.SparseArray<object>.Remove
	|-ThreadPoolWorkQueue.SparseArray<ThreadPoolWorkQueue.WorkStealingQueue>.Remove
	*/
}

// Namespace: 
internal class ThreadPoolWorkQueue.WorkStealingQueue // TypeDefIndex: 715
{
	// Fields
	internal IThreadPoolWorkItem[] m_array; // 0x8
	private int m_mask; // 0xC
	private int m_headIndex; // 0x10
	private int m_tailIndex; // 0x14
	private SpinLock m_foreignLock; // 0x18

	// Methods

	// RVA: 0x454 Offset: 0x454 VA: 0x454
	public void LocalPush(IThreadPoolWorkItem obj) { }

	// RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
	public bool LocalFindAndPop(IThreadPoolWorkItem obj) { }

	// RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
	public bool LocalPop(out IThreadPoolWorkItem obj) { }

	// RVA: 0x9CE Offset: 0x9CE VA: 0x9CE
	public bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal) { }

	// RVA: 0x114 Offset: 0x114 VA: 0x114
	private bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout) { }

	// RVA: 0x5CA Offset: 0x5CA VA: 0x5CA
	public void .ctor() { }
}

// Namespace: 
internal class ThreadPoolWorkQueue.QueueSegment // TypeDefIndex: 716
{
	// Fields
	internal readonly IThreadPoolWorkItem[] nodes; // 0x8
	private int indexes; // 0xC
	public ThreadPoolWorkQueue.QueueSegment Next; // 0x10

	// Methods

	// RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
	private void GetIndexes(out int upper, out int lower) { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	private bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower) { }

	[ReliabilityContractAttribute] // RVA: 0x737 Offset: 0x737 VA: 0x737
	// RVA: 0x5C9 Offset: 0x5C9 VA: 0x5C9
	public void .ctor() { }

	// RVA: 0x934 Offset: 0x934 VA: 0x934
	public bool IsUsedUp() { }

	// RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8
	public bool TryEnqueue(IThreadPoolWorkItem node) { }

	// RVA: 0x4A9 Offset: 0x4A9 VA: 0x4A9
	public bool TryDequeue(out IThreadPoolWorkItem node) { }
}

// Namespace: System.Threading
internal sealed class ThreadPoolWorkQueueThreadLocals // TypeDefIndex: 717
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x59D Offset: 0x59D VA: 0x59D
	public static ThreadPoolWorkQueueThreadLocals threadLocals; // 0x80000000
	public readonly ThreadPoolWorkQueue workQueue; // 0x8
	public readonly ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue; // 0xC
	public readonly Random random; // 0x10

	// Methods

	// RVA: 0x455 Offset: 0x455 VA: 0x455
	public void .ctor(ThreadPoolWorkQueue tpq) { }

	// RVA: 0x5CB Offset: 0x5CB VA: 0x5CB
	private void CleanUp() { }

	// RVA: 0x5CC Offset: 0x5CC VA: 0x5CC Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Threading
internal static class _ThreadPoolWaitCallback // TypeDefIndex: 718
{
	// Methods

	// RVA: 0x23E Offset: 0x23E VA: 0x23E
	internal static bool PerformWaitCallback() { }
}

// Namespace: System.Threading
internal sealed class QueueUserWorkItemCallback : IThreadPoolWorkItem // TypeDefIndex: 719
{
	// Fields
	private WaitCallback callback; // 0x8
	private ExecutionContext context; // 0xC
	private object state; // 0x10
	internal static ContextCallback ccb; // 0x0

	// Methods

	// RVA: 0xEF7 Offset: 0xEF7 VA: 0xEF7
	private static void .cctor() { }

	// RVA: 0x63 Offset: 0x63 VA: 0x63
	internal void .ctor(WaitCallback waitCallback, object stateObj, bool compressStack, ref StackCrawlMark stackMark) { }

	// RVA: 0x574 Offset: 0x574 VA: 0x574 Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }

	// RVA: 0x40D Offset: 0x40D VA: 0x40D Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }

	// RVA: 0x575 Offset: 0x575 VA: 0x575
	private static void WaitCallback_Context(object state) { }
}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 720
{
	// Methods

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	private static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref StackCrawlMark stackMark, bool compressStack) { }

	// RVA: 0x73 Offset: 0x73 VA: 0x73
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce) { }

	// RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
	public static bool QueueUserWorkItem(WaitCallback callBack, object state) { }

	// RVA: 0x4A6 Offset: 0x4A6 VA: 0x4A6
	public static bool UnsafeQueueUserWorkItem(WaitCallback callBack, object state) { }

	// RVA: 0x113 Offset: 0x113 VA: 0x113
	private static bool QueueUserWorkItemHelper(WaitCallback callBack, object state, ref StackCrawlMark stackMark, bool compressStack) { }

	// RVA: 0x453 Offset: 0x453 VA: 0x453
	internal static void UnsafeQueueCustomWorkItem(IThreadPoolWorkItem workItem, bool forceGlobal) { }

	// RVA: 0x932 Offset: 0x932 VA: 0x932
	internal static bool TryPopCustomWorkItem(IThreadPoolWorkItem workItem) { }

	// RVA: 0x238 Offset: 0x238 VA: 0x238
	internal static bool RequestWorkerThread() { }

	// RVA: 0xF09 Offset: 0xF09 VA: 0xF09
	private static void EnsureVMInitialized() { }

	// RVA: 0x239 Offset: 0x239 VA: 0x239
	internal static bool NotifyWorkItemComplete() { }

	// RVA: 0x5C4 Offset: 0x5C4 VA: 0x5C4
	internal static void ReportThreadStatus(bool isWorking) { }

	// RVA: 0xF0A Offset: 0xF0A VA: 0xF0A
	internal static void NotifyWorkItemProgress() { }

	// RVA: 0xF0B Offset: 0xF0B VA: 0xF0B
	internal static void NotifyWorkItemProgressNative() { }

	// RVA: 0x23A Offset: 0x23A VA: 0x23A
	internal static bool IsThreadPoolHosted() { }

	// RVA: 0x5C5 Offset: 0x5C5 VA: 0x5C5
	private static void InitializeVMTp(ref bool enableWorkerTracking) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F3 Offset: 0x3F3 VA: 0x3F3
public sealed class ThreadStart : MulticastDelegate // TypeDefIndex: 721
{
	// Methods

	// RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5CD Offset: 0x5CD VA: 0x5CD Slot: 12
	public virtual void Invoke() { }

	// RVA: 0x9CF Offset: 0x9CF VA: 0x9CF Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x456 Offset: 0x456 VA: 0x456 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[FlagsAttribute] // RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4
[ComVisibleAttribute] // RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4
[Serializable]
public enum ThreadState // TypeDefIndex: 722
{
	// Fields
	public int value__; // 0x0
	public const ThreadState Running = 0;
	public const ThreadState StopRequested = 1;
	public const ThreadState SuspendRequested = 2;
	public const ThreadState Background = 4;
	public const ThreadState Unstarted = 8;
	public const ThreadState Stopped = 16;
	public const ThreadState WaitSleepJoin = 32;
	public const ThreadState Suspended = 64;
	public const ThreadState AbortRequested = 128;
	public const ThreadState Aborted = 256;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F5 Offset: 0x3F5 VA: 0x3F5
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 723
{
	// Methods

	// RVA: 0x5CE Offset: 0x5CE VA: 0x5CE
	public void .ctor() { }

	// RVA: 0x457 Offset: 0x457 VA: 0x457
	public void .ctor(string message) { }

	// RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F6 Offset: 0x3F6 VA: 0x3F6
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 724
{
	// Fields
	public const int WaitTimeout = 258;
	private const int MAX_WAITHANDLES = 64;
	private IntPtr waitHandle; // 0xC
	internal SafeWaitHandle safeWaitHandle; // 0x10
	internal bool hasThreadAffinity; // 0x14
	private const int WAIT_OBJECT_0 = 0;
	private const int WAIT_ABANDONED = 128;
	private const int WAIT_FAILED = 2147483647;
	private const int ERROR_TOO_MANY_POSTS = 298;
	protected static readonly IntPtr InvalidHandle; // 0x0
	internal const int MaxWaitHandles = 64;

	// Properties
	[ObsoleteAttribute] // RVA: 0x807 Offset: 0x807 VA: 0x807
	public virtual IntPtr Handle { set; }
	public SafeWaitHandle SafeWaitHandle { get; }

	// Methods

	// RVA: 0x5D5 Offset: 0x5D5 VA: 0x5D5
	protected void .ctor() { }

	// RVA: 0x5D6 Offset: 0x5D6 VA: 0x5D6
	private void Init() { }

	// RVA: 0x45E Offset: 0x45E VA: 0x45E Slot: 7
	public virtual void set_Handle(IntPtr value) { }

	[ReliabilityContractAttribute] // RVA: 0x738 Offset: 0x738 VA: 0x738
	// RVA: 0x936 Offset: 0x936 VA: 0x936
	public SafeWaitHandle get_SafeWaitHandle() { }

	// RVA: 0x45F Offset: 0x45F VA: 0x45F
	internal void SetHandleInternal(SafeWaitHandle handle) { }

	// RVA: 0x9D2 Offset: 0x9D2 VA: 0x9D2 Slot: 8
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext) { }

	// RVA: 0x937 Offset: 0x937 VA: 0x937 Slot: 9
	public virtual bool WaitOne() { }

	// RVA: 0x4AE Offset: 0x4AE VA: 0x4AE Slot: 10
	public virtual bool WaitOne(int millisecondsTimeout) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	private bool WaitOne(long timeout, bool exitContext) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static bool InternalWaitOne(SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext) { }

	[ReliabilityContractAttribute] // RVA: 0x739 Offset: 0x739 VA: 0x739
	// RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3
	public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext) { }

	[ReliabilityContractAttribute] // RVA: 0x73A Offset: 0x73A VA: 0x73A
	// RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext) { }

	// RVA: 0xF10 Offset: 0xF10 VA: 0xF10
	private static void ThrowAbandonedMutexException() { }

	// RVA: 0x460 Offset: 0x460 VA: 0x460
	private static void ThrowAbandonedMutexException(int location, WaitHandle handle) { }

	// RVA: 0x5D7 Offset: 0x5D7 VA: 0x5D7 Slot: 11
	public virtual void Close() { }

	// RVA: 0x461 Offset: 0x461 VA: 0x461 Slot: 12
	protected virtual void Dispose(bool explicitDisposing) { }

	// RVA: 0x5D8 Offset: 0x5D8 VA: 0x5D8 Slot: 6
	public void Dispose() { }

	// RVA: 0x117 Offset: 0x117 VA: 0x117
	private static int WaitMultiple(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll) { }

	// RVA: 0x118 Offset: 0x118 VA: 0x118
	private static int WaitOneNative(SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext) { }

	// RVA: 0x119 Offset: 0x119 VA: 0x119
	private static int Wait_internal(IntPtr* handles, int numHandles, bool waitAll, int ms) { }

	// RVA: 0xF11 Offset: 0xF11 VA: 0xF11
	private static void .cctor() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F7 Offset: 0x3F7 VA: 0x3F7
[Serializable]
public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 725
{
	// Methods

	// RVA: 0x5D9 Offset: 0x5D9 VA: 0x5D9
	public void .ctor() { }

	// RVA: 0x462 Offset: 0x462 VA: 0x462
	public void .ctor(string message) { }

	// RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 726
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x73B Offset: 0x73B VA: 0x73B
	// RVA: 0x9BD Offset: 0x9BD VA: 0x9BD
	public static int CompareExchange(ref int location1, int value, int comparand) { }

	[ReliabilityContractAttribute] // RVA: 0x73C Offset: 0x73C VA: 0x73C
	// RVA: 0x10B Offset: 0x10B VA: 0x10B
	internal static int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded) { }

	[ReliabilityContractAttribute] // RVA: 0x73D Offset: 0x73D VA: 0x73D
	// RVA: 0x9BE Offset: 0x9BE VA: 0x9BE
	public static object CompareExchange(ref object location1, object value, object comparand) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float CompareExchange(ref float location1, float value, float comparand) { }

	[ReliabilityContractAttribute] // RVA: 0x73E Offset: 0x73E VA: 0x73E
	// RVA: 0x8DD Offset: 0x8DD VA: 0x8DD
	public static int Decrement(ref int location) { }

	[ReliabilityContractAttribute] // RVA: 0x73F Offset: 0x73F VA: 0x73F
	// RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
	public static int Increment(ref int location) { }

	[ReliabilityContractAttribute] // RVA: 0x740 Offset: 0x740 VA: 0x740
	// RVA: 0x5C Offset: 0x5C VA: 0x5C
	public static long Increment(ref long location) { }

	[ReliabilityContractAttribute] // RVA: 0x741 Offset: 0x741 VA: 0x741
	// RVA: 0x48F Offset: 0x48F VA: 0x48F
	public static int Exchange(ref int location1, int value) { }

	[ReliabilityContractAttribute] // RVA: 0x742 Offset: 0x742 VA: 0x742
	// RVA: 0x490 Offset: 0x490 VA: 0x490
	public static object Exchange(ref object location1, object value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float Exchange(ref float location1, float value) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static long CompareExchange(ref long location1, long value, long comparand) { }

	[ReliabilityContractAttribute] // RVA: 0x743 Offset: 0x743 VA: 0x743
	// RVA: 0x9BF Offset: 0x9BF VA: 0x9BF
	public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double CompareExchange(ref double location1, double value, double comparand) { }

	[ReliabilityContractAttribute] // RVA: 0x744 Offset: 0x744 VA: 0x744
	[ComVisibleAttribute] // RVA: 0x744 Offset: 0x744 VA: 0x744
	// RVA: -1 Offset: -1
	public static T CompareExchange<T>(ref T location1, T value, T comparand) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Interlocked.CompareExchange<object>
	*/

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static long Exchange(ref long location1, long value) { }

	[ReliabilityContractAttribute] // RVA: 0x745 Offset: 0x745 VA: 0x745
	// RVA: 0x491 Offset: 0x491 VA: 0x491
	public static IntPtr Exchange(ref IntPtr location1, IntPtr value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static double Exchange(ref double location1, double value) { }

	[ReliabilityContractAttribute] // RVA: 0x746 Offset: 0x746 VA: 0x746
	[ComVisibleAttribute] // RVA: 0x746 Offset: 0x746 VA: 0x746
	// RVA: -1 Offset: -1
	public static T Exchange<T>(ref T location1, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Interlocked.Exchange<object>
	*/

	// RVA: 0x5D Offset: 0x5D VA: 0x5D
	public static long Read(ref long location) { }

	[ReliabilityContractAttribute] // RVA: 0x747 Offset: 0x747 VA: 0x747
	// RVA: 0x492 Offset: 0x492 VA: 0x492
	public static int Add(ref int location1, int value) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F8 Offset: 0x3F8 VA: 0x3F8
public sealed class Mutex : WaitHandle // TypeDefIndex: 727
{}

// Namespace: System.Threading
internal static class NativeEventCalls // TypeDefIndex: 728
{
	// Methods

	// RVA: 0x10C Offset: 0x10C VA: 0x10C
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out int errorCode) { }

	// RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5
	public static bool SetEvent(SafeWaitHandle handle) { }

	// RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6
	private static bool SetEvent_internal(IntPtr handle) { }

	// RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7
	public static bool ResetEvent(SafeWaitHandle handle) { }

	// RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8
	private static bool ResetEvent_internal(IntPtr handle) { }

	// RVA: 0x573 Offset: 0x573 VA: 0x573
	public static void CloseEvent_internal(IntPtr handle) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3F9 Offset: 0x3F9 VA: 0x3F9
public struct NativeOverlapped // TypeDefIndex: 729
{
	// Fields
	public IntPtr InternalLow; // 0x0
	public IntPtr InternalHigh; // 0x4
	public int OffsetLow; // 0x8
	public int OffsetHigh; // 0xC
	public IntPtr EventHandle; // 0x10
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3FA Offset: 0x3FA VA: 0x3FA
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 730
{
	// Fields
	private WaitHandle _waitObject; // 0xC
	private WaitOrTimerCallback _callback; // 0x10
	private object _state; // 0x14
	private WaitHandle _finalEvent; // 0x18
	private ManualResetEvent _cancelEvent; // 0x1C
	private TimeSpan _timeout; // 0x20
	private int _callsInProcess; // 0x28
	private bool _executeOnlyOnce; // 0x2C
	private bool _unregistered; // 0x2D

	// Methods

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	internal void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce) { }

	// RVA: 0x40E Offset: 0x40E VA: 0x40E
	internal void Wait(object state) { }

	// RVA: 0x40F Offset: 0x40F VA: 0x40F
	private void DoCallBack(object timedOut) { }
}

// Namespace: System.Threading
internal sealed class InternalThread : CriticalFinalizerObject // TypeDefIndex: 731
{
	// Fields
	private int lock_thread_id; // 0x8
	private IntPtr handle; // 0xC
	private IntPtr native_handle; // 0x10
	private IntPtr unused3; // 0x14
	private IntPtr name; // 0x18
	private int name_len; // 0x1C
	private ThreadState state; // 0x20
	private object abort_exc; // 0x24
	private int abort_state_handle; // 0x28
	internal long thread_id; // 0x30
	private IntPtr debugger_thread; // 0x38
	private UIntPtr static_data; // 0x3C
	private IntPtr runtime_thread_info; // 0x40
	private object current_appcontext; // 0x44
	private object root_domain_thread; // 0x48
	internal byte[] _serialized_principal; // 0x4C
	internal int _serialized_principal_version; // 0x50
	private IntPtr appdomain_refs; // 0x54
	private int interruption_requested; // 0x58
	private IntPtr synch_cs; // 0x5C
	internal bool threadpool_thread; // 0x60
	private bool thread_interrupt_requested; // 0x61
	internal int stack_size; // 0x64
	internal byte apartment_state; // 0x68
	internal int critical_region_level; // 0x6C
	internal int managed_id; // 0x70
	private int small_id; // 0x74
	private IntPtr manage_callback; // 0x78
	private IntPtr unused4; // 0x7C
	private IntPtr flags; // 0x80
	private IntPtr thread_pinning_ref; // 0x84
	private IntPtr abort_protected_block_count; // 0x88
	private int priority; // 0x8C
	private IntPtr owned_mutex; // 0x90
	private IntPtr suspended_event; // 0x94
	private int self_suspended; // 0x98
	private IntPtr unused1; // 0x9C
	private IntPtr unused2; // 0xA0
	private IntPtr last; // 0xA4

	// Methods

	// RVA: 0x563 Offset: 0x563 VA: 0x563
	private void Thread_free_internal() { }

	[ReliabilityContractAttribute] // RVA: 0x748 Offset: 0x748 VA: 0x748
	// RVA: 0x564 Offset: 0x564 VA: 0x564 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3FB Offset: 0x3FB VA: 0x3FB
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 732
{
	// Fields
	private static readonly Timer.Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0xC
	private object state; // 0x10
	private long due_time_ms; // 0x18
	private long period_ms; // 0x20
	private long next_run; // 0x28
	private bool disposed; // 0x30

	// Methods

	// RVA: 0x69 Offset: 0x69 VA: 0x69
	public void .ctor(TimerCallback callback, object state, int dueTime, int period) { }

	// RVA: 0x6A Offset: 0x6A VA: 0x6A
	public void .ctor(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private void Init(TimerCallback callback, object state, long dueTime, long period) { }

	// RVA: 0x9D0 Offset: 0x9D0 VA: 0x9D0
	public bool Change(TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x5CF Offset: 0x5CF VA: 0x5CF Slot: 6
	public void Dispose() { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private bool Change(long dueTime, long period, bool first) { }

	// RVA: 0x5D0 Offset: 0x5D0 VA: 0x5D0
	internal void KeepRootedWhileScheduled() { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	private static long GetTimeMonotonic() { }

	// RVA: 0xF0E Offset: 0xF0E VA: 0xF0E
	private static void .cctor() { }
}

// Namespace: 
private sealed class Timer.TimerComparer : IComparer // TypeDefIndex: 733
{
	// Methods

	// RVA: 0x9D1 Offset: 0x9D1 VA: 0x9D1 Slot: 4
	public int Compare(object x, object y) { }

	// RVA: 0x5D4 Offset: 0x5D4 VA: 0x5D4
	public void .ctor() { }
}

// Namespace: 
private sealed class Timer.Scheduler // TypeDefIndex: 734
{
	// Fields
	private static Timer.Scheduler instance; // 0x0
	private SortedList list; // 0x8
	private ManualResetEvent changed; // 0xC

	// Properties
	public static Timer.Scheduler Instance { get; }

	// Methods

	// RVA: 0xF0F Offset: 0xF0F VA: 0xF0F
	private static void .cctor() { }

	// RVA: 0x23D Offset: 0x23D VA: 0x23D
	public static Timer.Scheduler get_Instance() { }

	// RVA: 0x5D1 Offset: 0x5D1 VA: 0x5D1
	private void .ctor() { }

	// RVA: 0x458 Offset: 0x458 VA: 0x458
	public void Remove(Timer timer) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public void Change(Timer timer, long new_next_run) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private int FindByDueTime(long nr) { }

	// RVA: 0x459 Offset: 0x459 VA: 0x459
	private void Add(Timer timer) { }

	// RVA: 0x4AD Offset: 0x4AD VA: 0x4AD
	private int InternalRemove(Timer timer) { }

	// RVA: 0x5D2 Offset: 0x5D2 VA: 0x5D2
	private static void TimerCB(object o) { }

	// RVA: 0x5D3 Offset: 0x5D3 VA: 0x5D3
	private void SchedulerThread() { }

	// RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4
	private void ShrinkIfNeeded(List<Timer> list, int initial) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0x3FC Offset: 0x3FC VA: 0x3FC
public sealed class TimerCallback : MulticastDelegate // TypeDefIndex: 735
{
	// Methods

	// RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x45A Offset: 0x45A VA: 0x45A Slot: 12
	public virtual void Invoke(object state) { }

	// RVA: 0x115 Offset: 0x115 VA: 0x115 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x45B Offset: 0x45B VA: 0x45B Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
public static class Volatile // TypeDefIndex: 736
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x749 Offset: 0x749 VA: 0x749
	// RVA: 0x935 Offset: 0x935 VA: 0x935
	public static bool Read(ref bool location) { }

	[ReliabilityContractAttribute] // RVA: 0x74A Offset: 0x74A VA: 0x74A
	// RVA: -1 Offset: -1
	public static T Read<T>(ref T location) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD2E Offset: 0xD2E VA: 0xD2E
	|-Volatile.Read<object>
	*/

	[ReliabilityContractAttribute] // RVA: 0x74B Offset: 0x74B VA: 0x74B
	// RVA: -1 Offset: -1
	public static void Write<T>(ref T location, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	|-Volatile.Write<object>
	*/
}

// Namespace: System.Threading.Tasks
[FriendAccessAllowedAttribute] // RVA: 0x3FD Offset: 0x3FD VA: 0x3FD
internal enum CausalityTraceLevel // TypeDefIndex: 737
{
	// Fields
	public int value__; // 0x0
	public const CausalityTraceLevel Required = 0;
	public const CausalityTraceLevel Important = 1;
	public const CausalityTraceLevel Verbose = 2;
}

// Namespace: System.Threading.Tasks
[FriendAccessAllowedAttribute] // RVA: 0x3FE Offset: 0x3FE VA: 0x3FE
internal enum AsyncCausalityStatus // TypeDefIndex: 738
{
	// Fields
	public int value__; // 0x0
	public const AsyncCausalityStatus Started = 0;
	public const AsyncCausalityStatus Completed = 1;
	public const AsyncCausalityStatus Canceled = 2;
	public const AsyncCausalityStatus Error = 3;
}

// Namespace: System.Threading.Tasks
internal enum CausalityRelation // TypeDefIndex: 739
{
	// Fields
	public int value__; // 0x0
	public const CausalityRelation AssignDelegate = 0;
	public const CausalityRelation Join = 1;
	public const CausalityRelation Choice = 2;
	public const CausalityRelation Cancel = 3;
	public const CausalityRelation Error = 4;
}

// Namespace: System.Threading.Tasks
internal enum CausalitySynchronousWork // TypeDefIndex: 740
{
	// Fields
	public int value__; // 0x0
	public const CausalitySynchronousWork CompletionNotification = 0;
	public const CausalitySynchronousWork ProgressNotification = 1;
	public const CausalitySynchronousWork Execution = 2;
}

// Namespace: System.Threading.Tasks
[FriendAccessAllowedAttribute] // RVA: 0x3FF Offset: 0x3FF VA: 0x3FF
internal static class AsyncCausalityTracer // TypeDefIndex: 741
{
	// Properties
	[FriendAccessAllowedAttribute] // RVA: 0x808 Offset: 0x808 VA: 0x808
	internal static bool LoggingOn { get; }

	// Methods

	[FriendAccessAllowedAttribute] // RVA: 0x74C Offset: 0x74C VA: 0x74C
	// RVA: 0x225 Offset: 0x225 VA: 0x225
	internal static bool get_LoggingOn() { }

	[FriendAccessAllowedAttribute] // RVA: 0x74D Offset: 0x74D VA: 0x74D
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	internal static void TraceOperationCreation(CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext) { }

	[FriendAccessAllowedAttribute] // RVA: 0x74E Offset: 0x74E VA: 0x74E
	// RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7
	internal static void TraceOperationCompletion(CausalityTraceLevel traceLevel, int taskId, AsyncCausalityStatus status) { }

	// RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8
	internal static void TraceOperationRelation(CausalityTraceLevel traceLevel, int taskId, CausalityRelation relation) { }

	// RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9
	internal static void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, int taskId, CausalitySynchronousWork work) { }

	// RVA: 0x41A Offset: 0x41A VA: 0x41A
	internal static void TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySynchronousWork work) { }
}

// Namespace: System.Threading.Tasks
[DebuggerDisplayAttribute] // RVA: 0x400 Offset: 0x400 VA: 0x400
[DebuggerTypeProxyAttribute] // RVA: 0x400 Offset: 0x400 VA: 0x400
public class Task<TResult> : Task // TypeDefIndex: 742
{
	// Fields
	internal TResult m_result; // 0xFFFFFFFF
	private static readonly TaskFactory<TResult> s_Factory; // 0xFFFFFFFF
	internal static readonly Func<Task<Task>, Task<TResult>> TaskWhenAnyCast; // 0xFFFFFFFF

	// Properties
	[DebuggerBrowsableAttribute] // RVA: 0x809 Offset: 0x809 VA: 0x809
	public TResult Result { get; }
	internal TResult ResultOnSuccess { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x92F Offset: 0x92F VA: 0x92F
	|-Task<bool>..ctor
	|
	|-RVA: 0xBCF Offset: 0xBCF VA: 0xBCF
	|-Task<int>..ctor
	|
	|-RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9
	|-Task<object>..ctor
	|-Task<Task>..ctor
	|
	|-RVA: 0x930 Offset: 0x930 VA: 0x930
	|-Task<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	internal void .ctor(TResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB5E Offset: 0xB5E VA: 0xB5E
	|-Task<bool>..ctor
	|
	|-RVA: 0xB5F Offset: 0xB5F VA: 0xB5F
	|-Task<int>..ctor
	|
	|-RVA: 0x7FB Offset: 0x7FB VA: 0x7FB
	|-Task<object>..ctor
	|
	|-RVA: 0xB60 Offset: 0xB60 VA: 0xB60
	|-Task<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	internal void .ctor(bool canceled, TResult result, TaskCreationOptions creationOptions, CancellationToken ct) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x96 Offset: 0x96 VA: 0x96
	|-Task<bool>..ctor
	|
	|-RVA: 0xCA Offset: 0xCA VA: 0xCA
	|-Task<int>..ctor
	|
	|-RVA: 0x87 Offset: 0x87 VA: 0x87
	|-Task<object>..ctor
	|
	|-RVA: 0xCB Offset: 0xCB VA: 0xCB
	|-Task<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC9 Offset: 0xC9 VA: 0xC9
	|-Task<bool>..ctor
	|
	|-RVA: 0x95 Offset: 0x95 VA: 0x95
	|-Task<int>..ctor
	|
	|-RVA: 0x88 Offset: 0x88 VA: 0x88
	|-Task<object>..ctor
	|
	|-RVA: 0xCC Offset: 0xCC VA: 0xCC
	|-Task<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	internal void .ctor(Delegate valueSelector, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A Offset: 0x1A VA: 0x1A
	|-Task<bool>..ctor
	|
	|-RVA: 0x1B Offset: 0x1B VA: 0x1B
	|-Task<int>..ctor
	|
	|-RVA: 0x19 Offset: 0x19 VA: 0x19
	|-Task<object>..ctor
	|
	|-RVA: 0x1C Offset: 0x1C VA: 0x1C
	|-Task<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	internal bool TrySetResult(TResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	|-Task<bool>.TrySetResult
	|
	|-RVA: 0xBB5 Offset: 0xBB5 VA: 0xBB5
	|-Task<int>.TrySetResult
	|
	|-RVA: 0x652 Offset: 0x652 VA: 0x652
	|-Task<object>.TrySetResult
	|-Task<Task>.TrySetResult
	|
	|-RVA: 0x6BA Offset: 0x6BA VA: 0x6BA
	|-Task<VoidTaskResult>.TrySetResult
	*/

	// RVA: -1 Offset: -1
	public TResult get_Result() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1275 Offset: 0x1275 VA: 0x1275
	|-Task<bool>.get_Result
	|
	|-RVA: 0x1277 Offset: 0x1277 VA: 0x1277
	|-Task<int>.get_Result
	|
	|-RVA: 0xD2F Offset: 0xD2F VA: 0xD2F
	|-Task<object>.get_Result
	|-Task<Task>.get_Result
	|
	|-RVA: 0xB61 Offset: 0xB61 VA: 0xB61
	|-Task<VoidTaskResult>.get_Result
	*/

	// RVA: -1 Offset: -1
	internal TResult get_ResultOnSuccess() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1276 Offset: 0x1276 VA: 0x1276
	|-Task<bool>.get_ResultOnSuccess
	|
	|-RVA: 0x1278 Offset: 0x1278 VA: 0x1278
	|-Task<int>.get_ResultOnSuccess
	|
	|-RVA: 0xD30 Offset: 0xD30 VA: 0xD30
	|-Task<object>.get_ResultOnSuccess
	|
	|-RVA: 0xB62 Offset: 0xB62 VA: 0xB62
	|-Task<VoidTaskResult>.get_ResultOnSuccess
	*/

	// RVA: -1 Offset: -1
	internal TResult GetResultCore(bool waitCompletionNotification) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBB2 Offset: 0xBB2 VA: 0xBB2
	|-Task<bool>.GetResultCore
	|
	|-RVA: 0xBB6 Offset: 0xBB6 VA: 0xBB6
	|-Task<int>.GetResultCore
	|
	|-RVA: 0x653 Offset: 0x653 VA: 0x653
	|-Task<object>.GetResultCore
	|
	|-RVA: 0x998 Offset: 0x998 VA: 0x998
	|-Task<VoidTaskResult>.GetResultCore
	*/

	// RVA: -1 Offset: -1
	internal bool TrySetException(object exceptionObject) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBB3 Offset: 0xBB3 VA: 0xBB3
	|-Task<bool>.TrySetException
	|
	|-RVA: 0xBB7 Offset: 0xBB7 VA: 0xBB7
	|-Task<int>.TrySetException
	|
	|-RVA: 0x654 Offset: 0x654 VA: 0x654
	|-Task<object>.TrySetException
	|
	|-RVA: 0xBB9 Offset: 0xBB9 VA: 0xBB9
	|-Task<VoidTaskResult>.TrySetException
	*/

	// RVA: -1 Offset: -1
	internal bool TrySetCanceled(CancellationToken tokenToRecord) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBB4 Offset: 0xBB4 VA: 0xBB4
	|-Task<bool>.TrySetCanceled
	|
	|-RVA: 0xBB8 Offset: 0xBB8 VA: 0xBB8
	|-Task<int>.TrySetCanceled
	|
	|-RVA: 0x655 Offset: 0x655 VA: 0x655
	|-Task<object>.TrySetCanceled
	|
	|-RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	|-Task<VoidTaskResult>.TrySetCanceled
	*/

	// RVA: -1 Offset: -1
	internal bool TrySetCanceled(CancellationToken tokenToRecord, object cancellationException) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAE0 Offset: 0xAE0 VA: 0xAE0
	|-Task<bool>.TrySetCanceled
	|
	|-RVA: 0xAE1 Offset: 0xAE1 VA: 0xAE1
	|-Task<int>.TrySetCanceled
	|
	|-RVA: 0xA48 Offset: 0xA48 VA: 0xA48
	|-Task<object>.TrySetCanceled
	|
	|-RVA: 0xAE2 Offset: 0xAE2 VA: 0xAE2
	|-Task<VoidTaskResult>.TrySetCanceled
	*/

	// RVA: -1 Offset: -1 Slot: 17
	internal override void InnerInvoke() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBCE Offset: 0xBCE VA: 0xBCE
	|-Task<bool>.InnerInvoke
	|
	|-RVA: 0xBD0 Offset: 0xBD0 VA: 0xBD0
	|-Task<int>.InnerInvoke
	|
	|-RVA: 0x8CA Offset: 0x8CA VA: 0x8CA
	|-Task<object>.InnerInvoke
	|-Task<Task>.InnerInvoke
	|
	|-RVA: 0xBD1 Offset: 0xBD1 VA: 0xBD1
	|-Task<VoidTaskResult>.InnerInvoke
	*/

	// RVA: -1 Offset: -1
	public TaskAwaiter<TResult> GetAwaiter() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDEB Offset: 0xDEB VA: 0xDEB
	|-Task<bool>.GetAwaiter
	|
	|-RVA: 0xDDD Offset: 0xDDD VA: 0xDDD
	|-Task<int>.GetAwaiter
	|
	|-RVA: 0xD31 Offset: 0xD31 VA: 0xD31
	|-Task<object>.GetAwaiter
	|
	|-RVA: 0x1279 Offset: 0x1279 VA: 0x1279
	|-Task<VoidTaskResult>.GetAwaiter
	*/

	// RVA: -1 Offset: -1
	public ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x468 Offset: 0x468 VA: 0x468
	|-Task<bool>.ConfigureAwait
	|
	|-RVA: 0x997 Offset: 0x997 VA: 0x997
	|-Task<int>.ConfigureAwait
	|
	|-RVA: 0x3F4 Offset: 0x3F4 VA: 0x3F4
	|-Task<object>.ConfigureAwait
	|-Task<Task>.ConfigureAwait
	|
	|-RVA: 0x999 Offset: 0x999 VA: 0x999
	|-Task<VoidTaskResult>.ConfigureAwait
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10AD Offset: 0x10AD VA: 0x10AD
	|-Task<bool>..cctor
	|
	|-RVA: 0x10AE Offset: 0x10AE VA: 0x10AE
	|-Task<int>..cctor
	|
	|-RVA: 0xF8A Offset: 0xF8A VA: 0xF8A
	|-Task<object>..cctor
	|
	|-RVA: 0x10AF Offset: 0x10AF VA: 0x10AF
	|-Task<VoidTaskResult>..cctor
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x401 Offset: 0x401 VA: 0x401
[Serializable]
private sealed class Task.<>c<TResult> // TypeDefIndex: 743
{
	// Fields
	public static readonly Task.<>c<TResult> <>9; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10AA Offset: 0x10AA VA: 0x10AA
	|-Task.<>c<bool>..cctor
	|
	|-RVA: 0x10AB Offset: 0x10AB VA: 0x10AB
	|-Task.<>c<int>..cctor
	|
	|-RVA: 0xF8B Offset: 0xF8B VA: 0xF8B
	|-Task.<>c<object>..cctor
	|
	|-RVA: 0x10AC Offset: 0x10AC VA: 0x10AC
	|-Task.<>c<VoidTaskResult>..cctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBCB Offset: 0xBCB VA: 0xBCB
	|-Task.<>c<bool>..ctor
	|
	|-RVA: 0xBCC Offset: 0xBCC VA: 0xBCC
	|-Task.<>c<int>..ctor
	|
	|-RVA: 0x8CB Offset: 0x8CB VA: 0x8CB
	|-Task.<>c<object>..ctor
	|
	|-RVA: 0xBCD Offset: 0xBCD VA: 0xBCD
	|-Task.<>c<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	internal Task<TResult> <.cctor>b__64_0(Task<Task> completed) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBAF Offset: 0xBAF VA: 0xBAF
	|-Task.<>c<bool>.<.cctor>b__64_0
	|
	|-RVA: 0xBB0 Offset: 0xBB0 VA: 0xBB0
	|-Task.<>c<int>.<.cctor>b__64_0
	|
	|-RVA: 0x656 Offset: 0x656 VA: 0x656
	|-Task.<>c<object>.<.cctor>b__64_0
	|
	|-RVA: 0xBB1 Offset: 0xBB1 VA: 0xBB1
	|-Task.<>c<VoidTaskResult>.<.cctor>b__64_0
	*/
}

// Namespace: System.Threading.Tasks
internal class SystemThreadingTasks_FutureDebugView<TResult> // TypeDefIndex: 744
{}

// Namespace: System.Threading.Tasks
public class TaskFactory<TResult> // TypeDefIndex: 745
{
	// Fields
	private CancellationToken m_defaultCancellationToken; // 0xFFFFFFFF
	private TaskScheduler m_defaultScheduler; // 0xFFFFFFFF
	private TaskCreationOptions m_defaultCreationOptions; // 0xFFFFFFFF
	private TaskContinuationOptions m_defaultContinuationOptions; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBC8 Offset: 0xBC8 VA: 0xBC8
	|-TaskFactory<bool>..ctor
	|
	|-RVA: 0xBC9 Offset: 0xBC9 VA: 0xBC9
	|-TaskFactory<int>..ctor
	|
	|-RVA: 0x8CC Offset: 0x8CC VA: 0x8CC
	|-TaskFactory<object>..ctor
	|
	|-RVA: 0xBCA Offset: 0xBCA VA: 0xBCA
	|-TaskFactory<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	|-TaskFactory<bool>..ctor
	|
	|-RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	|-TaskFactory<int>..ctor
	|
	|-RVA: 0x89 Offset: 0x89 VA: 0x89
	|-TaskFactory<object>..ctor
	|
	|-RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	|-TaskFactory<VoidTaskResult>..ctor
	*/
}

// Namespace: System.Threading.Tasks
internal class Shared<T> // TypeDefIndex: 746
{
	// Fields
	internal T Value; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7FC Offset: 0x7FC VA: 0x7FC
	|-Shared<object>..ctor
	|
	|-RVA: 0x875 Offset: 0x875 VA: 0x875
	|-Shared<CancellationTokenRegistration>..ctor
	*/
}

// Namespace: System.Threading.Tasks
public enum TaskStatus // TypeDefIndex: 747
{
	// Fields
	public int value__; // 0x0
	public const TaskStatus Created = 0;
	public const TaskStatus WaitingForActivation = 1;
	public const TaskStatus WaitingToRun = 2;
	public const TaskStatus Running = 3;
	public const TaskStatus WaitingForChildrenToComplete = 4;
	public const TaskStatus RanToCompletion = 5;
	public const TaskStatus Canceled = 6;
	public const TaskStatus Faulted = 7;
}

// Namespace: System.Threading.Tasks
[DebuggerTypeProxyAttribute] // RVA: 0x402 Offset: 0x402 VA: 0x402
[DebuggerDisplayAttribute] // RVA: 0x402 Offset: 0x402 VA: 0x402
public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable // TypeDefIndex: 748
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x59E Offset: 0x59E VA: 0x59E
	internal static Task t_currentTask; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x59F Offset: 0x59F VA: 0x59F
	private static StackGuard t_stackGuard; // 0x80000004
	internal static int s_taskIdCounter; // 0x0
	private static readonly TaskFactory s_factory; // 0x4
	private int m_taskId; // 0x8
	internal object m_action; // 0xC
	internal object m_stateObject; // 0x10
	internal TaskScheduler m_taskScheduler; // 0x14
	internal readonly Task m_parent; // 0x18
	internal int m_stateFlags; // 0x1C
	private object m_continuationObject; // 0x20
	private static readonly object s_taskCompletionSentinel; // 0x8
	[FriendAccessAllowedAttribute] // RVA: 0x5A0 Offset: 0x5A0 VA: 0x5A0
	internal static bool s_asyncDebuggingEnabled; // 0xC
	private static readonly Dictionary<int, Task> s_currentActiveTasks; // 0x10
	private static readonly object s_activeTasksLock; // 0x14
	internal Task.ContingentProperties m_contingentProperties; // 0x24
	private static readonly Action<object> s_taskCancelCallback; // 0x18
	private static readonly Func<Task.ContingentProperties> s_createContingentProperties; // 0x1C
	private static Task s_completedTask; // 0x20
	private static readonly Predicate<Task> s_IsExceptionObservedByParentPredicate; // 0x24
	private static ContextCallback s_ecCallback; // 0x28
	private static readonly Predicate<object> s_IsTaskContinuationNullPredicate; // 0x2C

	// Properties
	internal TaskCreationOptions Options { get; }
	internal bool IsWaitNotificationEnabledOrNotRanToCompletion { get; }
	internal virtual bool ShouldNotifyDebuggerOfWaitCompletion { get; }
	internal bool IsWaitNotificationEnabled { get; }
	public int Id { get; }
	internal static Task InternalCurrent { get; }
	internal static StackGuard CurrentStackGuard { get; }
	public AggregateException Exception { get; }
	public TaskStatus Status { get; }
	public bool IsCanceled { get; }
	internal bool IsCancellationRequested { get; }
	internal CancellationToken CancellationToken { get; }
	internal bool IsCancellationAcknowledged { get; }
	public bool IsCompleted { get; }
	internal bool IsRanToCompletion { get; }
	public TaskCreationOptions CreationOptions { get; }
	private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
	internal TaskScheduler ExecutingTaskScheduler { get; }
	public static Task CompletedTask { get; }
	internal ManualResetEventSlim CompletedEvent { get; }
	internal bool IsSelfReplicatingRoot { get; }
	internal bool IsChildReplica { get; }
	internal bool ExceptionRecorded { get; }
	public bool IsFaulted { get; }
	internal ExecutionContext CapturedContext { get; set; }
	internal bool IsExceptionObservedByParent { get; }
	internal bool IsDelegateInvoked { get; }
	internal virtual object SavedStateForNextReplica { get; }
	internal virtual object SavedStateFromPreviousReplica { set; }
	internal virtual Task HandedOverChildReplica { get; set; }

	// Methods

	[FriendAccessAllowedAttribute] // RVA: 0x74F Offset: 0x74F VA: 0x74F
	// RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3
	internal static bool AddToActiveTasks(Task task) { }

	[FriendAccessAllowedAttribute] // RVA: 0x750 Offset: 0x750 VA: 0x750
	// RVA: 0x58F Offset: 0x58F VA: 0x58F
	internal static void RemoveFromActiveTasks(int taskId) { }

	// RVA: 0xE0 Offset: 0xE0 VA: 0xE0
	internal void .ctor(bool canceled, TaskCreationOptions creationOptions, CancellationToken ct) { }

	// RVA: 0x590 Offset: 0x590 VA: 0x590
	internal void .ctor() { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	internal void .ctor(Delegate action, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	internal void TaskConstructorCore(object action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) { }

	// RVA: 0xE1 Offset: 0xE1 VA: 0xE1
	private void AssignCancellationToken(CancellationToken cancellationToken, Task antecedent, TaskContinuation continuation) { }

	// RVA: 0x591 Offset: 0x591 VA: 0x591
	private static void TaskCancelCallback(object o) { }

	// RVA: 0x420 Offset: 0x420 VA: 0x420
	internal void PossiblyCaptureContext(ref StackCrawlMark stackMark) { }

	// RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4
	internal TaskCreationOptions get_Options() { }

	// RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5
	internal static TaskCreationOptions OptionsMethod(int flags) { }

	// RVA: 0x9C6 Offset: 0x9C6 VA: 0x9C6
	internal bool AtomicStateUpdate(int newBits, int illegalBits) { }

	// RVA: 0x112 Offset: 0x112 VA: 0x112
	internal bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags) { }

	// RVA: 0x421 Offset: 0x421 VA: 0x421
	internal void SetNotificationForWaitCompletion(bool enabled) { }

	// RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6
	internal bool NotifyDebuggerOfWaitCompletionIfNecessary() { }

	// RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7
	internal bool get_IsWaitNotificationEnabledOrNotRanToCompletion() { }

	// RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8 Slot: 8
	internal virtual bool get_ShouldNotifyDebuggerOfWaitCompletion() { }

	// RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
	internal bool get_IsWaitNotificationEnabled() { }

	// RVA: 0x592 Offset: 0x592 VA: 0x592
	private void NotifyDebuggerOfWaitCompletion() { }

	// RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
	internal bool MarkStarted() { }

	// RVA: 0x498 Offset: 0x498 VA: 0x498
	internal bool FireTaskScheduledIfNeeded(TaskScheduler ts) { }

	// RVA: 0x593 Offset: 0x593 VA: 0x593
	internal void AddNewChild() { }

	// RVA: 0x594 Offset: 0x594 VA: 0x594
	internal void DisregardChild() { }

	// RVA: 0x229 Offset: 0x229 VA: 0x229
	internal static int NewId() { }

	// RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
	public int get_Id() { }

	// RVA: 0x22A Offset: 0x22A VA: 0x22A
	internal static Task get_InternalCurrent() { }

	// RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
	internal static Task InternalCurrentIfAttached(TaskCreationOptions creationOptions) { }

	// RVA: 0x22B Offset: 0x22B VA: 0x22B
	internal static StackGuard get_CurrentStackGuard() { }

	// RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
	public AggregateException get_Exception() { }

	// RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
	public TaskStatus get_Status() { }

	// RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
	public bool get_IsCanceled() { }

	// RVA: 0x900 Offset: 0x900 VA: 0x900
	internal bool get_IsCancellationRequested() { }

	// RVA: 0x499 Offset: 0x499 VA: 0x499
	internal Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection) { }

	// RVA: 0x49A Offset: 0x49A VA: 0x49A
	private Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection) { }

	// RVA: 0x901 Offset: 0x901 VA: 0x901
	internal CancellationToken get_CancellationToken() { }

	// RVA: 0x902 Offset: 0x902 VA: 0x902
	internal bool get_IsCancellationAcknowledged() { }

	// RVA: 0x903 Offset: 0x903 VA: 0x903 Slot: 9
	public bool get_IsCompleted() { }

	// RVA: 0x904 Offset: 0x904 VA: 0x904
	private static bool IsCompletedMethod(int flags) { }

	// RVA: 0x905 Offset: 0x905 VA: 0x905
	internal bool get_IsRanToCompletion() { }

	// RVA: 0x906 Offset: 0x906 VA: 0x906
	public TaskCreationOptions get_CreationOptions() { }

	// RVA: 0x907 Offset: 0x907 VA: 0x907 Slot: 6
	private WaitHandle System.IAsyncResult.get_AsyncWaitHandle() { }

	// RVA: 0x908 Offset: 0x908 VA: 0x908
	internal TaskScheduler get_ExecutingTaskScheduler() { }

	// RVA: 0x22C Offset: 0x22C VA: 0x22C
	public static Task get_CompletedTask() { }

	// RVA: 0x909 Offset: 0x909 VA: 0x909
	internal ManualResetEventSlim get_CompletedEvent() { }

	// RVA: 0x90A Offset: 0x90A VA: 0x90A
	internal bool get_IsSelfReplicatingRoot() { }

	// RVA: 0x90B Offset: 0x90B VA: 0x90B
	internal bool get_IsChildReplica() { }

	// RVA: 0x90C Offset: 0x90C VA: 0x90C
	internal bool get_ExceptionRecorded() { }

	// RVA: 0x90D Offset: 0x90D VA: 0x90D
	public bool get_IsFaulted() { }

	// RVA: 0x90E Offset: 0x90E VA: 0x90E
	internal ExecutionContext get_CapturedContext() { }

	// RVA: 0x422 Offset: 0x422 VA: 0x422
	internal void set_CapturedContext(ExecutionContext value) { }

	// RVA: 0x90F Offset: 0x90F VA: 0x90F
	private static ExecutionContext CopyExecutionContext(ExecutionContext capturedContext) { }

	// RVA: 0x595 Offset: 0x595 VA: 0x595 Slot: 7
	public void Dispose() { }

	// RVA: 0x423 Offset: 0x423 VA: 0x423 Slot: 10
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x424 Offset: 0x424 VA: 0x424
	internal void ScheduleAndStart(bool needsProtection) { }

	// RVA: 0x425 Offset: 0x425 VA: 0x425
	internal void AddException(object exceptionObject) { }

	// RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
	internal void AddException(object exceptionObject, bool representsCancellation) { }

	// RVA: 0x49B Offset: 0x49B VA: 0x49B
	private AggregateException GetExceptions(bool includeTaskCanceledExceptions) { }

	// RVA: 0x910 Offset: 0x910 VA: 0x910
	internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos() { }

	// RVA: 0x911 Offset: 0x911 VA: 0x911
	internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo() { }

	// RVA: 0x426 Offset: 0x426 VA: 0x426
	internal void ThrowIfExceptional(bool includeTaskCanceledExceptions) { }

	// RVA: 0x596 Offset: 0x596 VA: 0x596
	internal void UpdateExceptionObservedStatus() { }

	// RVA: 0x912 Offset: 0x912 VA: 0x912
	internal bool get_IsExceptionObservedByParent() { }

	// RVA: 0x913 Offset: 0x913 VA: 0x913
	internal bool get_IsDelegateInvoked() { }

	// RVA: 0x427 Offset: 0x427 VA: 0x427
	internal void Finish(bool bUserDelegateExecuted) { }

	// RVA: 0x597 Offset: 0x597 VA: 0x597
	internal void FinishStageTwo() { }

	// RVA: 0x598 Offset: 0x598 VA: 0x598
	internal void FinishStageThree() { }

	// RVA: 0x428 Offset: 0x428 VA: 0x428
	internal void ProcessChildCompletion(Task childTask) { }

	// RVA: 0x599 Offset: 0x599 VA: 0x599
	internal void AddExceptionsFromChildren() { }

	// RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1
	internal void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) { }

	// RVA: 0x59A Offset: 0x59A VA: 0x59A
	private void Execute() { }

	// RVA: 0x914 Offset: 0x914 VA: 0x914 Slot: 11
	internal virtual bool ShouldReplicate() { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F Slot: 12
	internal virtual Task CreateReplicaTask(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica) { }

	// RVA: 0x915 Offset: 0x915 VA: 0x915 Slot: 13
	internal virtual object get_SavedStateForNextReplica() { }

	// RVA: 0x429 Offset: 0x429 VA: 0x429 Slot: 14
	internal virtual void set_SavedStateFromPreviousReplica(object value) { }

	// RVA: 0x916 Offset: 0x916 VA: 0x916 Slot: 15
	internal virtual Task get_HandedOverChildReplica() { }

	// RVA: 0x42A Offset: 0x42A VA: 0x42A Slot: 16
	internal virtual void set_HandedOverChildReplica(Task value) { }

	// RVA: 0x59B Offset: 0x59B VA: 0x59B
	private static void ExecuteSelfReplicating(Task root) { }

	// RVA: 0x59C Offset: 0x59C VA: 0x59C Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }

	// RVA: 0x42B Offset: 0x42B VA: 0x42B Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }

	// RVA: 0x49C Offset: 0x49C VA: 0x49C
	internal bool ExecuteEntry(bool bPreventDoubleExecution) { }

	// RVA: 0x42C Offset: 0x42C VA: 0x42C
	private void ExecuteWithThreadLocal(ref Task currentTaskSlot) { }

	// RVA: 0x59D Offset: 0x59D VA: 0x59D
	private static void ExecutionContextCallback(object obj) { }

	// RVA: 0x59E Offset: 0x59E VA: 0x59E Slot: 17
	internal virtual void InnerInvoke() { }

	// RVA: 0x42D Offset: 0x42D VA: 0x42D
	internal void InnerInvokeWithArg(Task childTask) { }

	// RVA: 0x42E Offset: 0x42E VA: 0x42E
	private void HandleException(Exception unhandledException) { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65
	internal void SetContinuationForAwait(Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ref StackCrawlMark stackMark) { }

	// RVA: 0x917 Offset: 0x917 VA: 0x917
	private bool WrappedTryRunInline() { }

	// RVA: 0x9C7 Offset: 0x9C7 VA: 0x9C7
	internal bool InternalWait(int millisecondsTimeout, CancellationToken cancellationToken) { }

	// RVA: 0x9C8 Offset: 0x9C8 VA: 0x9C8
	private bool SpinThenBlockingWait(int millisecondsTimeout, CancellationToken cancellationToken) { }

	// RVA: 0x49D Offset: 0x49D VA: 0x49D
	private bool SpinWait(int millisecondsTimeout) { }

	// RVA: 0x49E Offset: 0x49E VA: 0x49E
	internal bool InternalCancel(bool bCancelNonExecutingOnly) { }

	// RVA: 0x59F Offset: 0x59F VA: 0x59F
	internal void RecordInternalCancellationRequest() { }

	// RVA: 0x42F Offset: 0x42F VA: 0x42F
	internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord) { }

	// RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2
	internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord, object cancellationException) { }

	// RVA: 0x5A0 Offset: 0x5A0 VA: 0x5A0
	internal void CancellationCleanupLogic() { }

	// RVA: 0x5A1 Offset: 0x5A1 VA: 0x5A1
	private void SetCancellationAcknowledged() { }

	// RVA: 0x5A2 Offset: 0x5A2 VA: 0x5A2
	internal void FinishContinuations() { }

	// RVA: 0x5A3 Offset: 0x5A3 VA: 0x5A3
	private void LogFinishCompletionNotification() { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72
	public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	private Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark) { }

	// RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3
	internal static void CreationOptionsFromContinuationOptions(TaskContinuationOptions continuationOptions, out TaskCreationOptions creationOptions, out InternalTaskOptions internalOptions) { }

	// RVA: 0x66 Offset: 0x66 VA: 0x66
	internal void ContinueWithCore(Task continuationTask, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions options) { }

	// RVA: 0x430 Offset: 0x430 VA: 0x430
	internal void AddCompletionAction(ITaskCompletionAction action) { }

	// RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4
	private void AddCompletionAction(ITaskCompletionAction action, bool addBeforeOthers) { }

	// RVA: 0x9C9 Offset: 0x9C9 VA: 0x9C9
	private bool AddTaskContinuationComplex(object tc, bool addBeforeOthers) { }

	// RVA: 0x9CA Offset: 0x9CA VA: 0x9CA
	private bool AddTaskContinuation(object tc, bool addBeforeOthers) { }

	// RVA: 0x431 Offset: 0x431 VA: 0x431
	internal void RemoveContinuation(object continuationObject) { }

	[FriendAccessAllowedAttribute] // RVA: 0x751 Offset: 0x751 VA: 0x751
	// RVA: 0x918 Offset: 0x918 VA: 0x918
	internal static Task FromCancellation(CancellationToken cancellationToken) { }

	[FriendAccessAllowedAttribute] // RVA: 0x752 Offset: 0x752 VA: 0x752
	// RVA: -1 Offset: -1
	internal static Task<TResult> FromCancellation<TResult>(CancellationToken cancellationToken) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDED Offset: 0xDED VA: 0xDED
	|-Task.FromCancellation<bool>
	|
	|-RVA: 0xD32 Offset: 0xD32 VA: 0xD32
	|-Task.FromCancellation<object>
	*/

	// RVA: 0x49F Offset: 0x49F VA: 0x49F
	public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken) { }

	// RVA: 0x919 Offset: 0x919 VA: 0x919
	public static Task<Task> WhenAny(Task[] tasks) { }

	// RVA: 0xEFD Offset: 0xEFD VA: 0xEFD
	private static void .cctor() { }
}

// Namespace: 
internal class Task.ContingentProperties // TypeDefIndex: 749
{
	// Fields
	internal ExecutionContext m_capturedContext; // 0x8
	internal ManualResetEventSlim m_completionEvent; // 0xC
	internal TaskExceptionHolder m_exceptionsHolder; // 0x10
	internal CancellationToken m_cancellationToken; // 0x14
	internal Shared<CancellationTokenRegistration> m_cancellationRegistration; // 0x18
	internal int m_internalCancellationRequested; // 0x1C
	internal int m_completionCountdown; // 0x20
	internal List<Task> m_exceptionalChildren; // 0x24

	// Methods

	// RVA: 0x5A6 Offset: 0x5A6 VA: 0x5A6
	internal void SetCompleted() { }

	// RVA: 0x5A7 Offset: 0x5A7 VA: 0x5A7
	internal void DeregisterCancellationCallback() { }

	// RVA: 0x5A8 Offset: 0x5A8 VA: 0x5A8
	public void .ctor() { }
}

// Namespace: 
private sealed class Task.SetOnInvokeMres : ManualResetEventSlim, ITaskCompletionAction // TypeDefIndex: 750
{
	// Methods

	// RVA: 0x5AA Offset: 0x5AA VA: 0x5AA
	internal void .ctor() { }

	// RVA: 0x436 Offset: 0x436 VA: 0x436 Slot: 6
	public void Invoke(Task completingTask) { }
}

// Namespace: 
private sealed class Task.DelayPromise : Task<VoidTaskResult> // TypeDefIndex: 751
{
	// Fields
	internal readonly CancellationToken Token; // 0x2C
	internal CancellationTokenRegistration Registration; // 0x30
	internal Timer Timer; // 0x3C

	// Methods

	// RVA: 0x435 Offset: 0x435 VA: 0x435
	internal void .ctor(CancellationToken token) { }

	// RVA: 0x5A9 Offset: 0x5A9 VA: 0x5A9
	internal void Complete() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x403 Offset: 0x403 VA: 0x403
private sealed class Task.<>c__DisplayClass178_0 // TypeDefIndex: 752
{
	// Fields
	public Task root; // 0x8
	public bool replicasAreQuitting; // 0xC
	public Action<object> taskReplicaDelegate; // 0x10
	public TaskCreationOptions creationOptionsForReplicas; // 0x14
	public InternalTaskOptions internalOptionsForReplicas; // 0x18

	// Methods

	// RVA: 0x5A5 Offset: 0x5A5 VA: 0x5A5
	public void .ctor() { }

	// RVA: 0x434 Offset: 0x434 VA: 0x434
	internal void <ExecuteSelfReplicating>b__0(object <p0>) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x404 Offset: 0x404 VA: 0x404
[Serializable]
private sealed class Task.<>c // TypeDefIndex: 753
{
	// Fields
	public static readonly Task.<>c <>9; // 0x0
	public static Action<object> <>9__276_0; // 0x4
	public static TimerCallback <>9__276_1; // 0x8

	// Methods

	// RVA: 0xEFE Offset: 0xEFE VA: 0xEFE
	private static void .cctor() { }

	// RVA: 0x5A4 Offset: 0x5A4 VA: 0x5A4
	public void .ctor() { }

	// RVA: 0x432 Offset: 0x432 VA: 0x432
	internal void <Delay>b__276_0(object state) { }

	// RVA: 0x433 Offset: 0x433 VA: 0x433
	internal void <Delay>b__276_1(object state) { }

	// RVA: 0x91A Offset: 0x91A VA: 0x91A
	internal Task.ContingentProperties <.cctor>b__295_0() { }

	// RVA: 0x4A0 Offset: 0x4A0 VA: 0x4A0
	internal bool <.cctor>b__295_1(Task t) { }

	// RVA: 0x4A1 Offset: 0x4A1 VA: 0x4A1
	internal bool <.cctor>b__295_2(object tc) { }
}

// Namespace: System.Threading.Tasks
internal sealed class CompletionActionInvoker : IThreadPoolWorkItem // TypeDefIndex: 754
{
	// Fields
	private readonly ITaskCompletionAction m_action; // 0x8
	private readonly Task m_completingTask; // 0xC

	// Methods

	// RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
	internal void .ctor(ITaskCompletionAction action, Task completingTask) { }

	// RVA: 0x589 Offset: 0x589 VA: 0x589 Slot: 4
	public void ExecuteWorkItem() { }

	// RVA: 0x41E Offset: 0x41E VA: 0x41E Slot: 5
	public void MarkAborted(ThreadAbortException tae) { }
}

// Namespace: System.Threading.Tasks
internal class SystemThreadingTasks_TaskDebugView // TypeDefIndex: 755
{}

// Namespace: System.Threading.Tasks
[FlagsAttribute] // RVA: 0x405 Offset: 0x405 VA: 0x405
[Serializable]
public enum TaskCreationOptions // TypeDefIndex: 756
{
	// Fields
	public int value__; // 0x0
	public const TaskCreationOptions None = 0;
	public const TaskCreationOptions PreferFairness = 1;
	public const TaskCreationOptions LongRunning = 2;
	public const TaskCreationOptions AttachedToParent = 4;
	public const TaskCreationOptions DenyChildAttach = 8;
	public const TaskCreationOptions HideScheduler = 16;
	public const TaskCreationOptions RunContinuationsAsynchronously = 64;
}

// Namespace: System.Threading.Tasks
[FlagsAttribute] // RVA: 0x406 Offset: 0x406 VA: 0x406
[Serializable]
internal enum InternalTaskOptions // TypeDefIndex: 757
{
	// Fields
	public int value__; // 0x0
	public const InternalTaskOptions None = 0;
	public const InternalTaskOptions InternalOptionsMask = 65280;
	public const InternalTaskOptions ChildReplica = 256;
	public const InternalTaskOptions ContinuationTask = 512;
	public const InternalTaskOptions PromiseTask = 1024;
	public const InternalTaskOptions SelfReplicating = 2048;
	public const InternalTaskOptions LazyCancellation = 4096;
	public const InternalTaskOptions QueuedByRuntime = 8192;
	public const InternalTaskOptions DoNotDispose = 16384;
}

// Namespace: System.Threading.Tasks
[FlagsAttribute] // RVA: 0x407 Offset: 0x407 VA: 0x407
[Serializable]
public enum TaskContinuationOptions // TypeDefIndex: 758
{
	// Fields
	public int value__; // 0x0
	public const TaskContinuationOptions None = 0;
	public const TaskContinuationOptions PreferFairness = 1;
	public const TaskContinuationOptions LongRunning = 2;
	public const TaskContinuationOptions AttachedToParent = 4;
	public const TaskContinuationOptions DenyChildAttach = 8;
	public const TaskContinuationOptions HideScheduler = 16;
	public const TaskContinuationOptions LazyCancellation = 32;
	public const TaskContinuationOptions RunContinuationsAsynchronously = 64;
	public const TaskContinuationOptions NotOnRanToCompletion = 65536;
	public const TaskContinuationOptions NotOnFaulted = 131072;
	public const TaskContinuationOptions NotOnCanceled = 262144;
	public const TaskContinuationOptions OnlyOnRanToCompletion = 393216;
	public const TaskContinuationOptions OnlyOnFaulted = 327680;
	public const TaskContinuationOptions OnlyOnCanceled = 196608;
	public const TaskContinuationOptions ExecuteSynchronously = 524288;
}

// Namespace: System.Threading.Tasks
internal class StackGuard // TypeDefIndex: 759
{
	// Fields
	private int m_inliningDepth; // 0x8

	// Methods

	// RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
	internal bool TryBeginInliningScope() { }

	// RVA: 0x58B Offset: 0x58B VA: 0x58B
	internal void EndInliningScope() { }

	// RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
	private bool CheckForSufficientStack() { }

	// RVA: 0x58C Offset: 0x58C VA: 0x58C
	public void .ctor() { }
}

// Namespace: System.Threading.Tasks
internal struct VoidTaskResult // TypeDefIndex: 760
{}

// Namespace: System.Threading.Tasks
internal interface ITaskCompletionAction // TypeDefIndex: 761
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Invoke(Task completingTask) { }
}

// Namespace: System.Threading.Tasks
[Serializable]
public class TaskCanceledException : OperationCanceledException // TypeDefIndex: 762
{
	// Fields
	private Task m_canceledTask; // 0x48

	// Methods

	// RVA: 0x5AB Offset: 0x5AB VA: 0x5AB
	public void .ctor() { }

	// RVA: 0x437 Offset: 0x437 VA: 0x437
	public void .ctor(Task task) { }

	// RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading.Tasks
internal sealed class ContinuationTaskFromTask : Task // TypeDefIndex: 763
{
	// Fields
	private Task m_antecedent; // 0x28

	// Methods

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	public void .ctor(Task antecedent, Delegate action, object state, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark) { }

	// RVA: 0x58A Offset: 0x58A VA: 0x58A Slot: 17
	internal override void InnerInvoke() { }
}

// Namespace: System.Threading.Tasks
internal abstract class TaskContinuation // TypeDefIndex: 764
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	internal abstract void Run(Task completedTask, bool bCanInlineContinuationTask) { }

	// RVA: 0x438 Offset: 0x438 VA: 0x438
	protected static void InlineIfPossibleOrElseQueue(Task task, bool needsProtection) { }

	// RVA: 0x5AC Offset: 0x5AC VA: 0x5AC
	protected void .ctor() { }
}

// Namespace: System.Threading.Tasks
internal class StandardTaskContinuation : TaskContinuation // TypeDefIndex: 765
{
	// Fields
	internal readonly Task m_task; // 0x8
	internal readonly TaskContinuationOptions m_options; // 0xC
	private readonly TaskScheduler m_taskScheduler; // 0x10

	// Methods

	// RVA: 0xDF Offset: 0xDF VA: 0xDF
	internal void .ctor(Task task, TaskContinuationOptions options, TaskScheduler scheduler) { }

	// RVA: 0x2CE Offset: 0x2CE VA: 0x2CE Slot: 4
	internal override void Run(Task completedTask, bool bCanInlineContinuationTask) { }
}

// Namespace: System.Threading.Tasks
internal sealed class SynchronizationContextAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 766
{
	// Fields
	private static readonly SendOrPostCallback s_postCallback; // 0x0
	private static ContextCallback s_postActionCallback; // 0x4
	private readonly SynchronizationContext m_syncContext; // 0x10

	// Methods

	// RVA: 0x64 Offset: 0x64 VA: 0x64
	internal void .ctor(SynchronizationContext context, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark) { }

	// RVA: 0x2CF Offset: 0x2CF VA: 0x2CF Slot: 4
	internal sealed override void Run(Task task, bool canInlineContinuationTask) { }

	// RVA: 0x58D Offset: 0x58D VA: 0x58D
	private static void PostAction(object state) { }

	// RVA: 0x228 Offset: 0x228 VA: 0x228
	private static ContextCallback GetPostActionCallback() { }

	// RVA: 0xEFB Offset: 0xEFB VA: 0xEFB
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x408 Offset: 0x408 VA: 0x408
[Serializable]
private sealed class SynchronizationContextAwaitTaskContinuation.<>c // TypeDefIndex: 767
{
	// Fields
	public static readonly SynchronizationContextAwaitTaskContinuation.<>c <>9; // 0xFFFFFFFF

	// Methods

	// RVA: 0xEFC Offset: 0xEFC VA: 0xEFC
	private static void .cctor() { }

	// RVA: 0x58E Offset: 0x58E VA: 0x58E
	public void .ctor() { }

	// RVA: 0x41F Offset: 0x41F VA: 0x41F
	internal void <.cctor>b__7_0(object state) { }
}

// Namespace: System.Threading.Tasks
internal sealed class TaskSchedulerAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 768
{
	// Fields
	private readonly TaskScheduler m_scheduler; // 0x10

	// Methods

	// RVA: 0x68 Offset: 0x68 VA: 0x68
	internal void .ctor(TaskScheduler scheduler, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark) { }

	// RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7 Slot: 4
	internal sealed override void Run(Task ignored, bool canInlineContinuationTask) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x409 Offset: 0x409 VA: 0x409
[Serializable]
private sealed class TaskSchedulerAwaitTaskContinuation.<>c // TypeDefIndex: 769
{
	// Fields
	public static readonly TaskSchedulerAwaitTaskContinuation.<>c <>9; // 0x0
	public static Action<object> <>9__2_0; // 0x4

	// Methods

	// RVA: 0xF02 Offset: 0xF02 VA: 0xF02
	private static void .cctor() { }

	// RVA: 0x5B5 Offset: 0x5B5 VA: 0x5B5
	public void .ctor() { }

	// RVA: 0x442 Offset: 0x442 VA: 0x442
	internal void <Run>b__2_0(object state) { }
}

// Namespace: System.Threading.Tasks
internal class AwaitTaskContinuation : TaskContinuation, IThreadPoolWorkItem // TypeDefIndex: 770
{
	// Fields
	private readonly ExecutionContext m_capturedContext; // 0x8
	protected readonly Action m_action; // 0xC
	private static ContextCallback s_invokeActionCallback; // 0x0

	// Properties
	internal static bool IsValidLocationForInlining { get; }

	// Methods

	// RVA: 0xDD Offset: 0xDD VA: 0xDD
	internal void .ctor(Action action, bool flowExecutionContext, ref StackCrawlMark stackMark) { }

	// RVA: 0x2CA Offset: 0x2CA VA: 0x2CA
	internal void .ctor(Action action, bool flowExecutionContext) { }

	// RVA: 0x111 Offset: 0x111 VA: 0x111
	protected Task CreateTask(Action<object> action, object state, TaskScheduler scheduler) { }

	// RVA: 0x2CB Offset: 0x2CB VA: 0x2CB Slot: 4
	internal override void Run(Task task, bool canInlineContinuationTask) { }

	// RVA: 0x226 Offset: 0x226 VA: 0x226
	internal static bool get_IsValidLocationForInlining() { }

	// RVA: 0x584 Offset: 0x584 VA: 0x584
	private void ExecuteWorkItemHelper() { }

	// RVA: 0x585 Offset: 0x585 VA: 0x585 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }

	// RVA: 0x41B Offset: 0x41B VA: 0x41B Slot: 6
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }

	// RVA: 0x586 Offset: 0x586 VA: 0x586
	private static void InvokeAction(object state) { }

	// RVA: 0x227 Offset: 0x227 VA: 0x227
	protected static ContextCallback GetInvokeActionCallback() { }

	// RVA: 0xDE Offset: 0xDE VA: 0xDE
	protected void RunCallback(ContextCallback callback, object state, ref Task currentTask) { }

	// RVA: 0x2CC Offset: 0x2CC VA: 0x2CC
	internal static void RunOrScheduleAction(Action action, bool allowInlining, ref Task currentTask) { }

	// RVA: 0x41C Offset: 0x41C VA: 0x41C
	internal static void UnsafeScheduleAction(Action action, Task task) { }

	// RVA: 0x587 Offset: 0x587 VA: 0x587
	protected static void ThrowAsyncIfNecessary(Exception exc) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x40A Offset: 0x40A VA: 0x40A
[Serializable]
private sealed class AwaitTaskContinuation.<>c // TypeDefIndex: 771
{
	// Fields
	public static readonly AwaitTaskContinuation.<>c <>9; // 0x0
	public static WaitCallback <>9__17_0; // 0x4

	// Methods

	// RVA: 0xEFA Offset: 0xEFA VA: 0xEFA
	private static void .cctor() { }

	// RVA: 0x588 Offset: 0x588 VA: 0x588
	public void .ctor() { }

	// RVA: 0x41D Offset: 0x41D VA: 0x41D
	internal void <ThrowAsyncIfNecessary>b__17_0(object s) { }
}

// Namespace: System.Threading.Tasks
internal class TaskExceptionHolder // TypeDefIndex: 772
{
	// Fields
	private static readonly bool s_failFastOnUnobservedException; // 0x0
	private static bool s_domainUnloadStarted; // 0x1
	private static EventHandler s_adUnloadEventHandler; // 0x4
	private readonly Task m_task; // 0x8
	private List<ExceptionDispatchInfo> m_faultExceptions; // 0xC
	private ExceptionDispatchInfo m_cancellationException; // 0x10
	private bool m_isHandled; // 0x14

	// Properties
	internal bool ContainsFaultList { get; }

	// Methods

	// RVA: 0x439 Offset: 0x439 VA: 0x439
	internal void .ctor(Task task) { }

	// RVA: 0x22D Offset: 0x22D VA: 0x22D
	private static bool ShouldFailFastOnUnobservedException() { }

	// RVA: 0xEFF Offset: 0xEFF VA: 0xEFF
	private static void EnsureADUnloadCallbackRegistered() { }

	// RVA: 0x43A Offset: 0x43A VA: 0x43A
	private static void AppDomainUnloadCallback(object sender, EventArgs e) { }

	// RVA: 0x5AD Offset: 0x5AD VA: 0x5AD Slot: 1
	protected override void Finalize() { }

	// RVA: 0x91B Offset: 0x91B VA: 0x91B
	internal bool get_ContainsFaultList() { }

	// RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
	internal void Add(object exceptionObject, bool representsCancellation) { }

	// RVA: 0x43B Offset: 0x43B VA: 0x43B
	private void SetCancellationException(object exceptionObject) { }

	// RVA: 0x43C Offset: 0x43C VA: 0x43C
	private void AddFaultException(object exceptionObject) { }

	// RVA: 0x5AE Offset: 0x5AE VA: 0x5AE
	private void MarkAsUnhandled() { }

	// RVA: 0x43D Offset: 0x43D VA: 0x43D
	internal void MarkAsHandled(bool calledFromFinalizer) { }

	// RVA: 0x9CB Offset: 0x9CB VA: 0x9CB
	internal AggregateException CreateExceptionObject(bool calledFromFinalizer, Exception includeThisException) { }

	// RVA: 0x91C Offset: 0x91C VA: 0x91C
	internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos() { }

	// RVA: 0x91D Offset: 0x91D VA: 0x91D
	internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo() { }

	// RVA: 0xF00 Offset: 0xF00 VA: 0xF00
	private static void .cctor() { }
}

// Namespace: System.Threading.Tasks
public class TaskFactory // TypeDefIndex: 773
{
	// Fields
	private CancellationToken m_defaultCancellationToken; // 0x8
	private TaskScheduler m_defaultScheduler; // 0xC
	private TaskCreationOptions m_defaultCreationOptions; // 0x10
	private TaskContinuationOptions m_defaultContinuationOptions; // 0x14

	// Methods

	// RVA: 0x5AF Offset: 0x5AF VA: 0x5AF
	public void .ctor() { }

	// RVA: 0x67 Offset: 0x67 VA: 0x67
	public void .ctor(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }

	// RVA: 0x5B0 Offset: 0x5B0 VA: 0x5B0
	internal static void CheckCreationOptions(TaskCreationOptions creationOptions) { }

	// RVA: 0x91E Offset: 0x91E VA: 0x91E
	internal static Task<Task> CommonCWAnyLogic(IList<Task> tasks) { }

	// RVA: 0x5B1 Offset: 0x5B1 VA: 0x5B1
	internal static void CheckMultiTaskContinuationOptions(TaskContinuationOptions continuationOptions) { }
}

// Namespace: 
internal sealed class TaskFactory.CompleteOnInvokePromise : Task<Task>, ITaskCompletionAction // TypeDefIndex: 774
{
	// Fields
	private IList<Task> _tasks; // 0x2C
	private int m_firstTaskAlreadyCompleted; // 0x30

	// Methods

	// RVA: 0x43E Offset: 0x43E VA: 0x43E
	public void .ctor(IList<Task> tasks) { }

	// RVA: 0x43F Offset: 0x43F VA: 0x43F Slot: 18
	public void Invoke(Task completingTask) { }
}

// Namespace: System.Threading.Tasks
[DebuggerTypeProxyAttribute] // RVA: 0x40B Offset: 0x40B VA: 0x40B
[DebuggerDisplayAttribute] // RVA: 0x40B Offset: 0x40B VA: 0x40B
public abstract class TaskScheduler // TypeDefIndex: 775
{
	// Fields
	private static ConditionalWeakTable<TaskScheduler, object> s_activeTaskSchedulers; // 0x0
	private static readonly TaskScheduler s_defaultTaskScheduler; // 0x4
	internal static int s_taskSchedulerIdCounter; // 0x8
	private int m_taskSchedulerId; // 0x8
	private static EventHandler<UnobservedTaskExceptionEventArgs> _unobservedTaskException; // 0xC
	private static readonly object _unobservedTaskExceptionLockObject; // 0x10

	// Properties
	internal virtual bool RequiresAtomicStartTransition { get; }
	public static TaskScheduler Default { get; }
	internal static TaskScheduler InternalCurrent { get; }
	public int Id { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	protected internal abstract void QueueTask(Task task) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) { }

	// RVA: 0x9CC Offset: 0x9CC VA: 0x9CC
	internal bool TryRunInline(Task task, bool taskWasPreviouslyQueued) { }

	// RVA: 0x4A2 Offset: 0x4A2 VA: 0x4A2 Slot: 6
	protected internal virtual bool TryDequeue(Task task) { }

	// RVA: 0x5B2 Offset: 0x5B2 VA: 0x5B2 Slot: 7
	internal virtual void NotifyWorkItemProgress() { }

	// RVA: 0x91F Offset: 0x91F VA: 0x91F Slot: 8
	internal virtual bool get_RequiresAtomicStartTransition() { }

	// RVA: 0x440 Offset: 0x440 VA: 0x440
	internal void InternalQueueTask(Task task) { }

	// RVA: 0x5B3 Offset: 0x5B3 VA: 0x5B3
	protected void .ctor() { }

	// RVA: 0x5B4 Offset: 0x5B4 VA: 0x5B4
	private void AddToActiveTaskSchedulers() { }

	// RVA: 0x22E Offset: 0x22E VA: 0x22E
	public static TaskScheduler get_Default() { }

	// RVA: 0x22F Offset: 0x22F VA: 0x22F
	internal static TaskScheduler get_InternalCurrent() { }

	// RVA: 0x920 Offset: 0x920 VA: 0x920
	public int get_Id() { }

	// RVA: 0x441 Offset: 0x441 VA: 0x441
	internal static void PublishUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs ueea) { }

	// RVA: 0xF01 Offset: 0xF01 VA: 0xF01
	private static void .cctor() { }
}

// Namespace: 
internal sealed class TaskScheduler.SystemThreadingTasks_TaskSchedulerDebugView // TypeDefIndex: 776
{}

// Namespace: System.Threading.Tasks
public class UnobservedTaskExceptionEventArgs : EventArgs // TypeDefIndex: 777
{
	// Fields
	private AggregateException m_exception; // 0x8
	internal bool m_observed; // 0xC

	// Methods

	// RVA: 0x445 Offset: 0x445 VA: 0x445
	public void .ctor(AggregateException exception) { }
}

// Namespace: System.Threading.Tasks
[Serializable]
public class TaskSchedulerException : Exception // TypeDefIndex: 778
{
	// Methods

	// RVA: 0x5B6 Offset: 0x5B6 VA: 0x5B6
	public void .ctor() { }

	// RVA: 0x443 Offset: 0x443 VA: 0x443
	public void .ctor(Exception innerException) { }

	// RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading.Tasks
internal sealed class ThreadPoolTaskScheduler : TaskScheduler // TypeDefIndex: 779
{
	// Fields
	private static readonly ParameterizedThreadStart s_longRunningThreadWork; // 0xFFFFFFFF

	// Properties
	internal override bool RequiresAtomicStartTransition { get; }

	// Methods

	// RVA: 0x5B7 Offset: 0x5B7 VA: 0x5B7
	internal void .ctor() { }

	// RVA: 0x5B8 Offset: 0x5B8 VA: 0x5B8
	private static void LongRunningThreadWork(object obj) { }

	// RVA: 0x444 Offset: 0x444 VA: 0x444 Slot: 4
	protected internal override void QueueTask(Task task) { }

	// RVA: 0x9CD Offset: 0x9CD VA: 0x9CD Slot: 5
	protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) { }

	// RVA: 0x4A3 Offset: 0x4A3 VA: 0x4A3 Slot: 6
	protected internal override bool TryDequeue(Task task) { }

	// RVA: 0x5B9 Offset: 0x5B9 VA: 0x5B9 Slot: 7
	internal override void NotifyWorkItemProgress() { }

	// RVA: 0x921 Offset: 0x921 VA: 0x921 Slot: 8
	internal override bool get_RequiresAtomicStartTransition() { }

	// RVA: 0xF03 Offset: 0xF03 VA: 0xF03
	private static void .cctor() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x40C Offset: 0x40C VA: 0x40C
[AttributeUsageAttribute] // RVA: 0x40C Offset: 0x40C VA: 0x40C
public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 780
{
	// Methods

	// RVA: 0x508 Offset: 0x508 VA: 0x508
	public void .ctor() { }
}

// Namespace: System.Security
[AttributeUsageAttribute] // RVA: 0x40D Offset: 0x40D VA: 0x40D
[ComVisibleAttribute] // RVA: 0x40D Offset: 0x40D VA: 0x40D
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 781
{
	// Methods

	// RVA: 0x4F4 Offset: 0x4F4 VA: 0x4F4
	public void .ctor() { }
}

// Namespace: System.Security
public enum SecurityRuleSet // TypeDefIndex: 782
{
	// Fields
	public byte value__; // 0x0
	public const SecurityRuleSet None = 0;
	public const SecurityRuleSet Level1 = 1;
	public const SecurityRuleSet Level2 = 2;
}

// Namespace: System.Security
[AttributeUsageAttribute] // RVA: 0x40E Offset: 0x40E VA: 0x40E
public sealed class SecurityRulesAttribute : Attribute // TypeDefIndex: 783
{
	// Fields
	private SecurityRuleSet m_ruleSet; // 0x8
	private bool m_skipVerificationInFullTrust; // 0x9

	// Properties
	public bool SkipVerificationInFullTrust { set; }

	// Methods

	// RVA: 0x3AC Offset: 0x3AC VA: 0x3AC
	public void .ctor(SecurityRuleSet ruleSet) { }

	// RVA: 0x3AD Offset: 0x3AD VA: 0x3AD
	public void set_SkipVerificationInFullTrust(bool value) { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x40F Offset: 0x40F VA: 0x40F
public interface IEvidenceFactory // TypeDefIndex: 784
{}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x410 Offset: 0x410 VA: 0x410
[Serializable]
public sealed class SecurityElement // TypeDefIndex: 785
{
	// Fields
	private string text; // 0x8
	private string tag; // 0xC
	private ArrayList attributes; // 0x10
	private ArrayList children; // 0x14
	private static readonly char[] invalid_tag_chars; // 0x0
	private static readonly char[] invalid_text_chars; // 0x4
	private static readonly char[] invalid_attr_name_chars; // 0x8
	private static readonly char[] invalid_attr_value_chars; // 0xC
	private static readonly char[] invalid_chars; // 0x10

	// Properties
	public Hashtable Attributes { get; }
	public ArrayList Children { get; }
	public string Tag { get; }
	public string Text { get; set; }

	// Methods

	// RVA: 0x3A8 Offset: 0x3A8 VA: 0x3A8
	public void .ctor(string tag) { }

	// RVA: 0x266 Offset: 0x266 VA: 0x266
	public void .ctor(string tag, string text) { }

	// RVA: 0x821 Offset: 0x821 VA: 0x821
	public Hashtable get_Attributes() { }

	// RVA: 0x822 Offset: 0x822 VA: 0x822
	public ArrayList get_Children() { }

	// RVA: 0x823 Offset: 0x823 VA: 0x823
	public string get_Tag() { }

	// RVA: 0x824 Offset: 0x824 VA: 0x824
	public string get_Text() { }

	// RVA: 0x3A9 Offset: 0x3A9 VA: 0x3A9
	public void set_Text(string value) { }

	// RVA: 0x267 Offset: 0x267 VA: 0x267
	public void AddAttribute(string name, string value) { }

	// RVA: 0x3AA Offset: 0x3AA VA: 0x3AA
	public void AddChild(SecurityElement child) { }

	// RVA: 0x825 Offset: 0x825 VA: 0x825
	public static string Escape(string str) { }

	// RVA: 0x826 Offset: 0x826 VA: 0x826
	private static string Unescape(string str) { }

	// RVA: 0x827 Offset: 0x827 VA: 0x827
	public static SecurityElement FromString(string xml) { }

	// RVA: 0x828 Offset: 0x828 VA: 0x828
	public static bool IsValidAttributeName(string name) { }

	// RVA: 0x829 Offset: 0x829 VA: 0x829
	public static bool IsValidAttributeValue(string value) { }

	// RVA: 0x82A Offset: 0x82A VA: 0x82A
	public static bool IsValidTag(string tag) { }

	// RVA: 0x82B Offset: 0x82B VA: 0x82B
	public static bool IsValidText(string text) { }

	// RVA: 0x82C Offset: 0x82C VA: 0x82C Slot: 3
	public override string ToString() { }

	// RVA: 0x268 Offset: 0x268 VA: 0x268
	private void ToXml(ref StringBuilder s, int level) { }

	// RVA: 0x400 Offset: 0x400 VA: 0x400
	internal SecurityElement.SecurityAttribute GetAttribute(string name) { }

	// RVA: 0xEE6 Offset: 0xEE6 VA: 0xEE6
	private static void .cctor() { }
}

// Namespace: 
internal class SecurityElement.SecurityAttribute // TypeDefIndex: 786
{
	// Fields
	private string _name; // 0x8
	private string _value; // 0xC

	// Properties
	public string Name { get; }
	public string Value { get; }

	// Methods

	// RVA: 0x269 Offset: 0x269 VA: 0x269
	public void .ctor(string name, string value) { }

	// RVA: 0x82D Offset: 0x82D VA: 0x82D
	public string get_Name() { }

	// RVA: 0x82E Offset: 0x82E VA: 0x82E
	public string get_Value() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x411 Offset: 0x411 VA: 0x411
[Serializable]
public class SecurityException : SystemException // TypeDefIndex: 787
{
	// Fields
	private string permissionState; // 0x44

	// Methods

	// RVA: 0x507 Offset: 0x507 VA: 0x507
	public void .ctor() { }

	// RVA: 0x3AB Offset: 0x3AB VA: 0x3AB
	public void .ctor(string message) { }

	// RVA: 0x26A Offset: 0x26A VA: 0x26A
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x26B Offset: 0x26B VA: 0x26B
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x26C Offset: 0x26C VA: 0x26C Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x82F Offset: 0x82F VA: 0x82F Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x412 Offset: 0x412 VA: 0x412
public static class SecurityManager // TypeDefIndex: 788
{
	// Methods

	// RVA: 0x202 Offset: 0x202 VA: 0x202
	internal static bool CheckElevatedPermissions() { }

	// RVA: 0xEE7 Offset: 0xEE7 VA: 0xEE7
	internal static void EnsureElevatedPermissions() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0x413 Offset: 0x413 VA: 0x413
[Serializable]
public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 789
{
	// Methods

	// RVA: 0x509 Offset: 0x509 VA: 0x509
	public void .ctor() { }

	// RVA: 0x3AE Offset: 0x3AE VA: 0x3AE
	public void .ctor(string message) { }

	// RVA: 0x26D Offset: 0x26D VA: 0x26D
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x26E Offset: 0x26E VA: 0x26E
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0x414 Offset: 0x414 VA: 0x414
[MonoTODOAttribute] // RVA: 0x414 Offset: 0x414 VA: 0x414
[Serializable]
public sealed class Evidence : ICollection, IEnumerable // TypeDefIndex: 790
{
	// Fields
	private bool _locked; // 0x8
	private ArrayList hostEvidenceList; // 0xC
	private ArrayList assemblyEvidenceList; // 0x10

	// Properties
	[ObsoleteAttribute] // RVA: 0x80A Offset: 0x80A VA: 0x80A
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x506 Offset: 0x506 VA: 0x506
	public void .ctor() { }

	// RVA: 0x81B Offset: 0x81B VA: 0x81B Slot: 5
	public int get_Count() { }

	// RVA: 0x81C Offset: 0x81C VA: 0x81C Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x81D Offset: 0x81D VA: 0x81D Slot: 6
	public object get_SyncRoot() { }

	[ObsoleteAttribute] // RVA: 0x753 Offset: 0x753 VA: 0x753
	// RVA: 0x264 Offset: 0x264 VA: 0x264 Slot: 4
	public void CopyTo(Array array, int index) { }

	[ObsoleteAttribute] // RVA: 0x754 Offset: 0x754 VA: 0x754
	// RVA: 0x81E Offset: 0x81E VA: 0x81E Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class Evidence.EvidenceEnumerator : IEnumerator // TypeDefIndex: 791
{
	// Fields
	private IEnumerator currentEnum; // 0x8
	private IEnumerator hostEnum; // 0xC
	private IEnumerator assemblyEnum; // 0x10

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x265 Offset: 0x265 VA: 0x265
	public void .ctor(IEnumerator hostenum, IEnumerator assemblyenum) { }

	// RVA: 0x81F Offset: 0x81F VA: 0x81F Slot: 4
	public bool MoveNext() { }

	// RVA: 0x820 Offset: 0x820 VA: 0x820 Slot: 5
	public object get_Current() { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0x415 Offset: 0x415 VA: 0x415
[AttributeUsageAttribute] // RVA: 0x415 Offset: 0x415 VA: 0x415
[ObsoleteAttribute] // RVA: 0x415 Offset: 0x415 VA: 0x415
[Serializable]
public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 792
{}

// Namespace: System.Security.Permissions
[AttributeUsageAttribute] // RVA: 0x416 Offset: 0x416 VA: 0x416
[ComVisibleAttribute] // RVA: 0x416 Offset: 0x416 VA: 0x416
[ObsoleteAttribute] // RVA: 0x416 Offset: 0x416 VA: 0x416
[Serializable]
public abstract class SecurityAttribute : Attribute // TypeDefIndex: 793
{}

// Namespace: System.Security.Permissions
[AttributeUsageAttribute] // RVA: 0x417 Offset: 0x417 VA: 0x417
[ObsoleteAttribute] // RVA: 0x417 Offset: 0x417 VA: 0x417
[ComVisibleAttribute] // RVA: 0x417 Offset: 0x417 VA: 0x417
[Serializable]
public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 794
{
	// Fields
	private SecurityPermissionFlag m_Flags; // 0x8

	// Properties
	public bool SkipVerification { set; }

	// Methods

	// RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7
	public void set_SkipVerification(bool value) { }
}

// Namespace: System.Security.Permissions
[FlagsAttribute] // RVA: 0x418 Offset: 0x418 VA: 0x418
[ComVisibleAttribute] // RVA: 0x418 Offset: 0x418 VA: 0x418
[ObsoleteAttribute] // RVA: 0x418 Offset: 0x418 VA: 0x418
[Serializable]
public enum SecurityPermissionFlag // TypeDefIndex: 795
{
	// Fields
	public int value__; // 0x0
	public const SecurityPermissionFlag NoFlags = 0;
	public const SecurityPermissionFlag Assertion = 1;
	public const SecurityPermissionFlag UnmanagedCode = 2;
	public const SecurityPermissionFlag SkipVerification = 4;
	public const SecurityPermissionFlag Execution = 8;
	public const SecurityPermissionFlag ControlThread = 16;
	public const SecurityPermissionFlag ControlEvidence = 32;
	public const SecurityPermissionFlag ControlPolicy = 64;
	public const SecurityPermissionFlag SerializationFormatter = 128;
	public const SecurityPermissionFlag ControlDomainPolicy = 256;
	public const SecurityPermissionFlag ControlPrincipal = 512;
	public const SecurityPermissionFlag ControlAppDomain = 1024;
	public const SecurityPermissionFlag RemotingConfiguration = 2048;
	public const SecurityPermissionFlag Infrastructure = 4096;
	public const SecurityPermissionFlag BindingRedirects = 8192;
	public const SecurityPermissionFlag AllFlags = 16383;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0x419 Offset: 0x419 VA: 0x419
public interface IPrincipal // TypeDefIndex: 796
{}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x41A Offset: 0x41A VA: 0x41A
[Serializable]
public class CryptographicException : SystemException // TypeDefIndex: 797
{
	// Methods

	// RVA: 0x4F5 Offset: 0x4F5 VA: 0x4F5
	public void .ctor() { }

	// RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
	public void .ctor(string message) { }

	// RVA: 0x260 Offset: 0x260 VA: 0x260
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x41B Offset: 0x41B VA: 0x41B
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 798
{
	// Methods

	// RVA: 0x4F6 Offset: 0x4F6 VA: 0x4F6
	public void .ctor() { }

	// RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
	public void .ctor(string message) { }

	// RVA: 0x261 Offset: 0x261 VA: 0x261
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x41C Offset: 0x41C VA: 0x41C
public abstract class HashAlgorithm : IDisposable, ICryptoTransform // TypeDefIndex: 799
{
	// Fields
	protected int HashSizeValue; // 0x8
	protected internal byte[] HashValue; // 0xC
	protected int State; // 0x10
	private bool m_bDisposed; // 0x14

	// Methods

	// RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7
	protected void .ctor() { }

	// RVA: 0x3FE Offset: 0x3FE VA: 0x3FE
	public byte[] ComputeHash(byte[] buffer) { }

	// RVA: 0x4F8 Offset: 0x4F8 VA: 0x4F8 Slot: 4
	public void Dispose() { }

	// RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Initialize() { }

	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: -1 Offset: -1 Slot: 8
	protected abstract byte[] HashFinal() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x41D Offset: 0x41D VA: 0x41D
public interface ICryptoTransform : IDisposable // TypeDefIndex: 800
{}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x41E Offset: 0x41E VA: 0x41E
public abstract class RandomNumberGenerator : IDisposable // TypeDefIndex: 801
{
	// Methods

	// RVA: 0x4FD Offset: 0x4FD VA: 0x4FD
	protected void .ctor() { }

	// RVA: 0x200 Offset: 0x200 VA: 0x200
	public static RandomNumberGenerator Create() { }

	// RVA: 0x4FE Offset: 0x4FE VA: 0x4FE Slot: 4
	public void Dispose() { }

	// RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void GetBytes(byte[] data) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x41F Offset: 0x41F VA: 0x41F
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 802
{
	// Methods

	// RVA: 0x4FF Offset: 0x4FF VA: 0x4FF
	protected void .ctor() { }

	// RVA: 0x201 Offset: 0x201 VA: 0x201
	public static SHA1 Create() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x420 Offset: 0x420 VA: 0x420
public class CryptoConfig // TypeDefIndex: 803
{
	// Methods

	// RVA: 0x817 Offset: 0x817 VA: 0x817
	public static byte[] EncodeOID(string str) { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	private static byte[] EncodeLongNumber(long x) { }
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 804
{
	// Fields
	private static object _lock; // 0x0
	private IntPtr _handle; // 0x8

	// Methods

	// RVA: 0xEE5 Offset: 0xEE5 VA: 0xEE5
	private static void .cctor() { }

	// RVA: 0x4F9 Offset: 0x4F9 VA: 0x4F9
	public void .ctor() { }

	// RVA: 0x4FA Offset: 0x4FA VA: 0x4FA
	private void Check() { }

	// RVA: 0x1FF Offset: 0x1FF VA: 0x1FF
	private static bool RngOpen() { }

	// RVA: 0x818 Offset: 0x818 VA: 0x818
	private static IntPtr RngInitialize(byte[] seed) { }

	// RVA: 0x3FF Offset: 0x3FF VA: 0x3FF
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data) { }

	// RVA: 0x4FB Offset: 0x4FB VA: 0x4FB
	private static void RngClose(IntPtr handle) { }

	// RVA: 0x3A3 Offset: 0x3A3 VA: 0x3A3 Slot: 6
	public override void GetBytes(byte[] data) { }

	// RVA: 0x4FC Offset: 0x4FC VA: 0x4FC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4 Slot: 5
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 805
{
	// Fields
	private uint[] _H; // 0x8
	private ulong count; // 0x10
	private byte[] _ProcessingBuffer; // 0x18
	private int _ProcessingBufferCount; // 0x1C
	private uint[] buff; // 0x20

	// Methods

	// RVA: 0x503 Offset: 0x503 VA: 0x503
	public void .ctor() { }

	// RVA: 0xCC Offset: 0xCC VA: 0xCC
	public void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x81A Offset: 0x81A VA: 0x81A
	public byte[] HashFinal() { }

	// RVA: 0x504 Offset: 0x504 VA: 0x504
	public void Initialize() { }

	// RVA: 0x262 Offset: 0x262 VA: 0x262
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset) { }

	// RVA: 0x263 Offset: 0x263 VA: 0x263
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset) { }

	// RVA: 0x505 Offset: 0x505 VA: 0x505
	private static void FillBuff(uint[] buff) { }

	// RVA: 0xCD Offset: 0xCD VA: 0xCD
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0x421 Offset: 0x421 VA: 0x421
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 806
{
	// Fields
	private SHA1Internal sha; // 0x18

	// Methods

	// RVA: 0x500 Offset: 0x500 VA: 0x500
	public void .ctor() { }

	// RVA: 0x501 Offset: 0x501 VA: 0x501 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x3A6 Offset: 0x3A6 VA: 0x3A6 Slot: 5
	protected override void Dispose(bool disposing) { }

	// RVA: 0xCB Offset: 0xCB VA: 0xCB Slot: 7
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x819 Offset: 0x819 VA: 0x819 Slot: 8
	protected override byte[] HashFinal() { }

	// RVA: 0x502 Offset: 0x502 VA: 0x502 Slot: 6
	public override void Initialize() { }
}

// Namespace: System.Runtime.Versioning
internal static class BinaryCompatibility // TypeDefIndex: 807
{
	// Fields
	public static readonly bool TargetsAtLeast_Desktop_V4_5; // 0x0
	public static readonly bool TargetsAtLeast_Desktop_V4_5_1; // 0x1

	// Methods

	// RVA: 0xEE3 Offset: 0xEE3 VA: 0xEE3
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal sealed class DeserializationEventHandler : MulticastDelegate // TypeDefIndex: 808
{
	// Methods

	// RVA: 0x21A Offset: 0x21A VA: 0x21A
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x316 Offset: 0x316 VA: 0x316 Slot: 12
	public virtual void Invoke(object sender) { }

	// RVA: 0xAC Offset: 0xAC VA: 0xAC Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, AsyncCallback callback, object object) { }

	// RVA: 0x317 Offset: 0x317 VA: 0x317 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal sealed class SerializationEventHandler : MulticastDelegate // TypeDefIndex: 809
{
	// Methods

	// RVA: 0x246 Offset: 0x246 VA: 0x246
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x38F Offset: 0x38F VA: 0x38F Slot: 12
	public virtual void Invoke(StreamingContext context) { }

	// RVA: 0xB4 Offset: 0xB4 VA: 0xB4 Slot: 13
	public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object) { }

	// RVA: 0x390 Offset: 0x390 VA: 0x390 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x422 Offset: 0x422 VA: 0x422
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 810
{
	// Methods

	// RVA: 0x48D Offset: 0x48D VA: 0x48D
	public void .ctor() { }

	// RVA: 0x93E Offset: 0x93E VA: 0x93E Slot: 4
	public object Convert(object value, Type type) { }

	// RVA: 0x39D Offset: 0x39D VA: 0x39D Slot: 5
	public bool ToBoolean(object value) { }

	// RVA: 0x39E Offset: 0x39E VA: 0x39E Slot: 6
	public int ToInt32(object value) { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B Slot: 7
	public long ToInt64(object value) { }

	// RVA: 0xF Offset: 0xF VA: 0xF Slot: 8
	public float ToSingle(object value) { }

	// RVA: 0x39F Offset: 0x39F VA: 0x39F Slot: 9
	public string ToString(object value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x423 Offset: 0x423 VA: 0x423
public static class FormatterServices // TypeDefIndex: 811
{
	// Fields
	internal static ConcurrentDictionary<MemberHolder, MemberInfo[]> m_MemberInfoTable; // 0x0
	private static bool unsafeTypeForwardersIsEnabled; // 0x4
	private static bool unsafeTypeForwardersIsEnabledInitialized; // 0x5
	private static readonly Type[] advancedTypes; // 0x8
	private static Binder s_binder; // 0xC

	// Methods

	// RVA: 0xED2 Offset: 0xED2 VA: 0xED2
	private static void .cctor() { }

	// RVA: 0x742 Offset: 0x742 VA: 0x742
	private static MemberInfo[] GetSerializableMembers(RuntimeType type) { }

	// RVA: 0x743 Offset: 0x743 VA: 0x743
	private static bool CheckSerializable(RuntimeType type) { }

	// RVA: 0x744 Offset: 0x744 VA: 0x744
	private static MemberInfo[] InternalGetSerializableMembers(RuntimeType type) { }

	// RVA: 0x93F Offset: 0x93F VA: 0x93F
	private static bool GetParentTypes(RuntimeType parentType, out RuntimeType[] parentTypes, out int parentTypeCount) { }

	// RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context) { }

	// RVA: 0x745 Offset: 0x745 VA: 0x745
	public static object GetUninitializedObject(Type type) { }

	// RVA: 0x746 Offset: 0x746 VA: 0x746
	private static object nativeGetUninitializedObject(RuntimeType type) { }

	// RVA: 0x1FD Offset: 0x1FD VA: 0x1FD
	private static bool GetEnableUnsafeTypeForwarders() { }

	// RVA: 0x1FE Offset: 0x1FE VA: 0x1FE
	internal static bool UnsafeTypeForwardersIsEnabled() { }

	// RVA: 0x21B Offset: 0x21B VA: 0x21B
	internal static void SerializationSetValue(MemberInfo fi, object target, object value) { }

	// RVA: 0x940 Offset: 0x940 VA: 0x940
	public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data) { }

	// RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
	public static object[] GetObjectData(object obj, MemberInfo[] members) { }

	// RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
	public static Type GetTypeFromAssembly(Assembly assem, string name) { }

	// RVA: 0x747 Offset: 0x747 VA: 0x747
	internal static Assembly LoadAssemblyFromString(string assemblyName) { }

	// RVA: 0x748 Offset: 0x748 VA: 0x748
	internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName) { }

	// RVA: 0x3A3 Offset: 0x3A3 VA: 0x3A3
	internal static string GetClrAssemblyName(Type type, out bool hasTypeForwardedFrom) { }

	// RVA: 0x749 Offset: 0x749 VA: 0x749
	internal static string GetClrTypeFullName(Type type) { }

	// RVA: 0x74A Offset: 0x74A VA: 0x74A
	private static string GetClrTypeFullNameForArray(Type type) { }

	// RVA: 0x74B Offset: 0x74B VA: 0x74B
	private static string GetClrTypeFullNameForNonArrayTypes(Type type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x424 Offset: 0x424 VA: 0x424
private sealed class FormatterServices.<>c__DisplayClass9_0 // TypeDefIndex: 812
{
	// Fields
	public Type type; // 0x8

	// Methods

	// RVA: 0x48E Offset: 0x48E VA: 0x48E
	public void .ctor() { }

	// RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4
	internal MemberInfo[] <GetSerializableMembers>b__0(MemberHolder _) { }
}

// Namespace: System.Runtime.Serialization
internal sealed class SurrogateForCyclicalReference : ISerializationSurrogate // TypeDefIndex: 813
{
	// Fields
	private ISerializationSurrogate innerSurrogate; // 0x8

	// Methods

	// RVA: 0xC9 Offset: 0xC9 VA: 0xC9 Slot: 4
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context) { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B Slot: 5
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x425 Offset: 0x425 VA: 0x425
public interface IDeserializationCallback // TypeDefIndex: 814
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeserialization(object sender) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x426 Offset: 0x426 VA: 0x426
public interface IFormatter // TypeDefIndex: 815
{}

// Namespace: System.Runtime.Serialization
[CLSCompliantAttribute] // RVA: 0x427 Offset: 0x427 VA: 0x427
[ComVisibleAttribute] // RVA: 0x427 Offset: 0x427 VA: 0x427
public interface IFormatterConverter // TypeDefIndex: 816
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Convert(object value, Type type) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool ToBoolean(object value) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int ToInt32(object value) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract long ToInt64(object value) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract float ToSingle(object value) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string ToString(object value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x428 Offset: 0x428 VA: 0x428
public interface IObjectReference // TypeDefIndex: 817
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x429 Offset: 0x429 VA: 0x429
public interface ISerializable // TypeDefIndex: 818
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x42A Offset: 0x42A VA: 0x42A
public interface ISerializationSurrogate // TypeDefIndex: 819
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(object obj, SerializationInfo info, StreamingContext context) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x42B Offset: 0x42B VA: 0x42B
public interface ISurrogateSelector // TypeDefIndex: 820
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class MemberHolder // TypeDefIndex: 821
{
	// Fields
	internal Type memberType; // 0x8
	internal StreamingContext context; // 0xC

	// Methods

	// RVA: 0x23E Offset: 0x23E VA: 0x23E
	internal void .ctor(Type type, StreamingContext ctx) { }

	// RVA: 0x77A Offset: 0x77A VA: 0x77A Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x42C Offset: 0x42C VA: 0x42C
[Serializable]
public class ObjectIDGenerator // TypeDefIndex: 822
{
	// Fields
	internal int m_currentCount; // 0x8
	internal int m_currentSize; // 0xC
	internal long[] m_ids; // 0x10
	internal object[] m_objs; // 0x14
	private static readonly int[] sizes; // 0x0

	// Methods

	// RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3
	public void .ctor() { }

	// RVA: 0x94B Offset: 0x94B VA: 0x94B
	private int FindElement(object obj, out bool found) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9 Slot: 4
	public virtual long GetId(object obj, out bool firstTime) { }

	// RVA: 0xA Offset: 0xA VA: 0xA Slot: 5
	public virtual long HasId(object obj, out bool firstTime) { }

	// RVA: 0x4E4 Offset: 0x4E4 VA: 0x4E4
	private void Rehash() { }

	// RVA: 0xEDF Offset: 0xEDF VA: 0xEDF
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x42D Offset: 0x42D VA: 0x42D
public class ObjectManager // TypeDefIndex: 823
{
	// Fields
	private DeserializationEventHandler m_onDeserializationHandler; // 0x8
	private SerializationEventHandler m_onDeserializedHandler; // 0xC
	internal ObjectHolder[] m_objects; // 0x10
	internal object m_topObject; // 0x14
	internal ObjectHolderList m_specialFixupObjects; // 0x18
	internal long m_fixupCount; // 0x20
	internal ISurrogateSelector m_selector; // 0x28
	internal StreamingContext m_context; // 0x2C

	// Properties
	internal object TopObject { get; set; }
	internal ObjectHolderList SpecialFixupObjects { get; }

	// Methods

	// RVA: 0x55 Offset: 0x55 VA: 0x55
	internal void .ctor(ISurrogateSelector selector, StreamingContext context, bool checkSecurity, bool isCrossAppDomain) { }

	// RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
	private bool CanCallGetType(object obj) { }

	// RVA: 0x383 Offset: 0x383 VA: 0x383
	internal void set_TopObject(object value) { }

	// RVA: 0x794 Offset: 0x794 VA: 0x794
	internal object get_TopObject() { }

	// RVA: 0x795 Offset: 0x795 VA: 0x795
	internal ObjectHolderList get_SpecialFixupObjects() { }

	// RVA: 0xEE0 Offset: 0xEE0 VA: 0xEE0
	private static void .cctor() { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	internal ObjectHolder FindObjectHolder(long objectID) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	internal ObjectHolder FindOrCreateObjectHolder(long objectID) { }

	// RVA: 0x384 Offset: 0x384 VA: 0x384
	private void AddObjectHolder(ObjectHolder holder) { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A
	private bool GetCompletionInfo(FixupHolder fixup, out ObjectHolder holder, out object member, bool bThrowIfMissing) { }

	// RVA: 0x385 Offset: 0x385 VA: 0x385
	private void FixupSpecialObject(ObjectHolder holder) { }

	// RVA: 0x3C2 Offset: 0x3C2 VA: 0x3C2
	private bool ResolveObjectReference(ObjectHolder holder) { }

	// RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value) { }

	// RVA: 0x243 Offset: 0x243 VA: 0x243
	internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete) { }

	// RVA: 0x386 Offset: 0x386 VA: 0x386
	private void DoNewlyRegisteredObjectFixups(ObjectHolder holder) { }

	// RVA: 0xC Offset: 0xC VA: 0xC Slot: 4
	public virtual object GetObject(long objectID) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void RegisterString(string obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex) { }

	// RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context) { }

	// RVA: 0x796 Offset: 0x796 VA: 0x796
	internal static RuntimeConstructorInfo GetConstructor(RuntimeType t) { }

	// RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5 Slot: 5
	public virtual void DoFixups() { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 6
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 7
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 8
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired) { }

	// RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6 Slot: 9
	public virtual void RaiseDeserializationEvent() { }

	// RVA: 0x387 Offset: 0x387 VA: 0x387 Slot: 10
	internal virtual void AddOnDeserialization(DeserializationEventHandler handler) { }

	// RVA: 0x388 Offset: 0x388 VA: 0x388 Slot: 11
	internal virtual void AddOnDeserialized(object obj) { }

	// RVA: 0x389 Offset: 0x389 VA: 0x389 Slot: 12
	internal virtual void RaiseOnDeserializedEvent(object obj) { }

	// RVA: 0x38A Offset: 0x38A VA: 0x38A
	public void RaiseOnDeserializingEvent(object obj) { }
}

// Namespace: System.Runtime.Serialization
internal sealed class ObjectHolder // TypeDefIndex: 824
{
	// Fields
	private object m_object; // 0x8
	internal long m_id; // 0x10
	private int m_missingElementsRemaining; // 0x18
	private int m_missingDecendents; // 0x1C
	internal SerializationInfo m_serInfo; // 0x20
	internal ISerializationSurrogate m_surrogate; // 0x24
	internal FixupHolderList m_missingElements; // 0x28
	internal LongList m_dependentObjects; // 0x2C
	internal ObjectHolder m_next; // 0x30
	internal int m_flags; // 0x34
	private bool m_markForFixupWhenAvailable; // 0x38
	private ValueTypeFixupInfo m_valueFixup; // 0x3C
	private TypeLoadExceptionHolder m_typeLoad; // 0x40
	private bool m_reachable; // 0x44

	// Properties
	internal bool IsIncompleteObjectReference { get; set; }
	internal bool RequiresDelayedFixup { get; }
	internal bool RequiresValueTypeFixup { get; }
	internal bool ValueTypeFixupPerformed { get; set; }
	internal bool HasISerializable { get; }
	internal bool HasSurrogate { get; }
	internal bool CanSurrogatedObjectValueChange { get; }
	internal bool CanObjectValueChange { get; }
	internal int DirectlyDependentObjects { get; }
	internal int TotalDependentObjects { get; }
	internal bool Reachable { get; set; }
	internal bool TypeLoadExceptionReachable { get; }
	internal TypeLoadExceptionHolder TypeLoadException { get; set; }
	internal object ObjectValue { get; }
	internal SerializationInfo SerializationInfo { get; set; }
	internal ISerializationSurrogate Surrogate { get; }
	internal LongList DependentObjects { get; set; }
	internal bool RequiresSerInfoFixup { get; set; }
	internal ValueTypeFixupInfo ValueFixup { get; }
	internal bool CompletelyFixed { get; }
	internal long ContainerID { get; }

	// Methods

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	internal void .ctor(long objID) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal void .ctor(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex) { }

	// RVA: 0x378 Offset: 0x378 VA: 0x378
	private void IncrementDescendentFixups(int amount) { }

	// RVA: 0x379 Offset: 0x379 VA: 0x379
	internal void DecrementFixupsRemaining(ObjectManager manager) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	internal void RemoveDependency(long id) { }

	// RVA: 0x23F Offset: 0x23F VA: 0x23F
	internal void AddFixup(FixupHolder fixup, ObjectManager manager) { }

	// RVA: 0x240 Offset: 0x240 VA: 0x240
	private void UpdateDescendentDependencyChain(int amount, ObjectManager manager) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	internal void AddDependency(long dependentObject) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, int[] arrayIndex, ObjectManager manager) { }

	// RVA: 0x4DF Offset: 0x4DF VA: 0x4DF
	internal void MarkForCompletionWhenAvailable() { }

	// RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0
	internal void SetFlags() { }

	// RVA: 0x77B Offset: 0x77B VA: 0x77B
	internal bool get_IsIncompleteObjectReference() { }

	// RVA: 0x37A Offset: 0x37A VA: 0x37A
	internal void set_IsIncompleteObjectReference(bool value) { }

	// RVA: 0x77C Offset: 0x77C VA: 0x77C
	internal bool get_RequiresDelayedFixup() { }

	// RVA: 0x77D Offset: 0x77D VA: 0x77D
	internal bool get_RequiresValueTypeFixup() { }

	// RVA: 0x77E Offset: 0x77E VA: 0x77E
	internal bool get_ValueTypeFixupPerformed() { }

	// RVA: 0x37B Offset: 0x37B VA: 0x37B
	internal void set_ValueTypeFixupPerformed(bool value) { }

	// RVA: 0x77F Offset: 0x77F VA: 0x77F
	internal bool get_HasISerializable() { }

	// RVA: 0x780 Offset: 0x780 VA: 0x780
	internal bool get_HasSurrogate() { }

	// RVA: 0x781 Offset: 0x781 VA: 0x781
	internal bool get_CanSurrogatedObjectValueChange() { }

	// RVA: 0x782 Offset: 0x782 VA: 0x782
	internal bool get_CanObjectValueChange() { }

	// RVA: 0x783 Offset: 0x783 VA: 0x783
	internal int get_DirectlyDependentObjects() { }

	// RVA: 0x784 Offset: 0x784 VA: 0x784
	internal int get_TotalDependentObjects() { }

	// RVA: 0x785 Offset: 0x785 VA: 0x785
	internal bool get_Reachable() { }

	// RVA: 0x37C Offset: 0x37C VA: 0x37C
	internal void set_Reachable(bool value) { }

	// RVA: 0x786 Offset: 0x786 VA: 0x786
	internal bool get_TypeLoadExceptionReachable() { }

	// RVA: 0x787 Offset: 0x787 VA: 0x787
	internal TypeLoadExceptionHolder get_TypeLoadException() { }

	// RVA: 0x37D Offset: 0x37D VA: 0x37D
	internal void set_TypeLoadException(TypeLoadExceptionHolder value) { }

	// RVA: 0x788 Offset: 0x788 VA: 0x788
	internal object get_ObjectValue() { }

	// RVA: 0x241 Offset: 0x241 VA: 0x241
	internal void SetObjectValue(object obj, ObjectManager manager) { }

	// RVA: 0x789 Offset: 0x789 VA: 0x789
	internal SerializationInfo get_SerializationInfo() { }

	// RVA: 0x37E Offset: 0x37E VA: 0x37E
	internal void set_SerializationInfo(SerializationInfo value) { }

	// RVA: 0x78A Offset: 0x78A VA: 0x78A
	internal ISerializationSurrogate get_Surrogate() { }

	// RVA: 0x78B Offset: 0x78B VA: 0x78B
	internal LongList get_DependentObjects() { }

	// RVA: 0x37F Offset: 0x37F VA: 0x37F
	internal void set_DependentObjects(LongList value) { }

	// RVA: 0x78C Offset: 0x78C VA: 0x78C
	internal bool get_RequiresSerInfoFixup() { }

	// RVA: 0x380 Offset: 0x380 VA: 0x380
	internal void set_RequiresSerInfoFixup(bool value) { }

	// RVA: 0x78D Offset: 0x78D VA: 0x78D
	internal ValueTypeFixupInfo get_ValueFixup() { }

	// RVA: 0x78E Offset: 0x78E VA: 0x78E
	internal bool get_CompletelyFixed() { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A
	internal long get_ContainerID() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class FixupHolder // TypeDefIndex: 825
{
	// Fields
	internal long m_id; // 0x8
	internal object m_fixupInfo; // 0x10
	internal int m_fixupType; // 0x14

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal void .ctor(long id, object fixupInfo, int fixupType) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class FixupHolderList // TypeDefIndex: 826
{
	// Fields
	internal FixupHolder[] m_values; // 0x8
	internal int m_count; // 0xC

	// Methods

	// RVA: 0x48B Offset: 0x48B VA: 0x48B
	internal void .ctor() { }

	// RVA: 0x318 Offset: 0x318 VA: 0x318
	internal void .ctor(int startingSize) { }

	// RVA: 0x319 Offset: 0x319 VA: 0x319 Slot: 4
	internal virtual void Add(FixupHolder fixup) { }

	// RVA: 0x48C Offset: 0x48C VA: 0x48C
	private void EnlargeArray() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class LongList // TypeDefIndex: 827
{
	// Fields
	private long[] m_values; // 0x8
	private int m_count; // 0xC
	private int m_totalItems; // 0x10
	private int m_currentItem; // 0x14

	// Properties
	internal int Count { get; }
	internal long Current { get; }

	// Methods

	// RVA: 0x4DC Offset: 0x4DC VA: 0x4DC
	internal void .ctor() { }

	// RVA: 0x377 Offset: 0x377 VA: 0x377
	internal void .ctor(int startingSize) { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	internal void Add(long value) { }

	// RVA: 0x778 Offset: 0x778 VA: 0x778
	internal int get_Count() { }

	// RVA: 0x4DD Offset: 0x4DD VA: 0x4DD
	internal void StartEnumeration() { }

	// RVA: 0x779 Offset: 0x779 VA: 0x779
	internal bool MoveNext() { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59
	internal long get_Current() { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	internal bool RemoveElement(long value) { }

	// RVA: 0x4DE Offset: 0x4DE VA: 0x4DE
	private void EnlargeArray() { }
}

// Namespace: System.Runtime.Serialization
internal class ObjectHolderList // TypeDefIndex: 828
{
	// Fields
	internal ObjectHolder[] m_values; // 0x8
	internal int m_count; // 0xC

	// Properties
	internal int Version { get; }
	internal int Count { get; }

	// Methods

	// RVA: 0x4E1 Offset: 0x4E1 VA: 0x4E1
	internal void .ctor() { }

	// RVA: 0x381 Offset: 0x381 VA: 0x381
	internal void .ctor(int startingSize) { }

	// RVA: 0x382 Offset: 0x382 VA: 0x382 Slot: 4
	internal virtual void Add(ObjectHolder value) { }

	// RVA: 0x78F Offset: 0x78F VA: 0x78F
	internal ObjectHolderListEnumerator GetFixupEnumerator() { }

	// RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2
	private void EnlargeArray() { }

	// RVA: 0x790 Offset: 0x790 VA: 0x790
	internal int get_Version() { }

	// RVA: 0x791 Offset: 0x791 VA: 0x791
	internal int get_Count() { }
}

// Namespace: System.Runtime.Serialization
internal class ObjectHolderListEnumerator // TypeDefIndex: 829
{
	// Fields
	private bool m_isFixupEnumerator; // 0x8
	private ObjectHolderList m_list; // 0xC
	private int m_startingVersion; // 0x10
	private int m_currPos; // 0x14

	// Properties
	internal ObjectHolder Current { get; }

	// Methods

	// RVA: 0x242 Offset: 0x242 VA: 0x242
	internal void .ctor(ObjectHolderList list, bool isFixupEnumerator) { }

	// RVA: 0x792 Offset: 0x792 VA: 0x792
	internal bool MoveNext() { }

	// RVA: 0x793 Offset: 0x793 VA: 0x793
	internal ObjectHolder get_Current() { }
}

// Namespace: System.Runtime.Serialization
internal class TypeLoadExceptionHolder // TypeDefIndex: 830
{
	// Fields
	private string m_typeName; // 0x8

	// Properties
	internal string TypeName { get; }

	// Methods

	// RVA: 0x39A Offset: 0x39A VA: 0x39A
	internal void .ctor(string typeName) { }

	// RVA: 0x7B4 Offset: 0x7B4 VA: 0x7B4
	internal string get_TypeName() { }
}

// Namespace: System.Runtime.Serialization
public sealed class SafeSerializationEventArgs : EventArgs // TypeDefIndex: 831
{
	// Fields
	private StreamingContext m_streamingContext; // 0x8
	private List<object> m_serializedStates; // 0x10

	// Properties
	internal IList<object> SerializedStates { get; }

	// Methods

	// RVA: 0x38C Offset: 0x38C VA: 0x38C
	internal void .ctor(StreamingContext streamingContext) { }

	// RVA: 0x797 Offset: 0x797 VA: 0x797
	internal IList<object> get_SerializedStates() { }
}

// Namespace: System.Runtime.Serialization
public interface ISafeSerializationData // TypeDefIndex: 832
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CompleteDeserialization(object deserialized) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal sealed class SafeSerializationManager : IObjectReference, ISerializable // TypeDefIndex: 833
{
	// Fields
	private IList<object> m_serializedStates; // 0x8
	private SerializationInfo m_savedSerializationInfo; // 0xC
	private object m_realObject; // 0x10
	private RuntimeType m_realType; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0x5A1 Offset: 0x5A1 VA: 0x5A1
	private EventHandler<SafeSerializationEventArgs> SerializeObjectState; // 0x18

	// Properties
	internal bool IsActive { get; }

	// Methods

	// RVA: 0x4EB Offset: 0x4EB VA: 0x4EB
	internal void .ctor() { }

	// RVA: 0x244 Offset: 0x244 VA: 0x244
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x798 Offset: 0x798 VA: 0x798
	internal bool get_IsActive() { }

	// RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	internal void CompleteSerialization(object serializedObject, SerializationInfo info, StreamingContext context) { }

	// RVA: 0x38D Offset: 0x38D VA: 0x38D
	internal void CompleteDeserialization(object deserializedObject) { }

	// RVA: 0x245 Offset: 0x245 VA: 0x245 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3 Slot: 4
	private object System.Runtime.Serialization.IObjectReference.GetRealObject(StreamingContext context) { }

	[OnDeserializedAttribute] // RVA: 0x755 Offset: 0x755 VA: 0x755
	// RVA: 0x38E Offset: 0x38E VA: 0x38E
	private void OnDeserialized(StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x42E Offset: 0x42E VA: 0x42E
[AttributeUsageAttribute] // RVA: 0x42E Offset: 0x42E VA: 0x42E
public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 834
{
	// Fields
	private int versionAdded; // 0x8

	// Properties
	public int VersionAdded { set; }

	// Methods

	// RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
	public void .ctor() { }

	// RVA: 0x38B Offset: 0x38B VA: 0x38B
	public void set_VersionAdded(int value) { }
}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0x42F Offset: 0x42F VA: 0x42F
[ComVisibleAttribute] // RVA: 0x42F Offset: 0x42F VA: 0x42F
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 835
{
	// Methods

	// RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0x430 Offset: 0x430 VA: 0x430
[ComVisibleAttribute] // RVA: 0x430 Offset: 0x430 VA: 0x430
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 836
{}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0x431 Offset: 0x431 VA: 0x431
[ComVisibleAttribute] // RVA: 0x431 Offset: 0x431 VA: 0x431
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 837
{
	// Methods

	// RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x432 Offset: 0x432 VA: 0x432
[AttributeUsageAttribute] // RVA: 0x432 Offset: 0x432 VA: 0x432
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 838
{
	// Methods

	// RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x433 Offset: 0x433 VA: 0x433
[Serializable]
public abstract class SerializationBinder // TypeDefIndex: 839
{
	// Methods

	// RVA: 0xC3 Offset: 0xC3 VA: 0xC3 Slot: 4
	public virtual void BindToName(Type serializedType, out string assemblyName, out string typeName) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract Type BindToType(string assemblyName, string typeName) { }

	// RVA: 0x4EC Offset: 0x4EC VA: 0x4EC
	protected void .ctor() { }
}

// Namespace: System.Runtime.Serialization
internal class SerializationEvents // TypeDefIndex: 840
{
	// Fields
	private List<MethodInfo> m_OnSerializingMethods; // 0x8
	private List<MethodInfo> m_OnSerializedMethods; // 0xC
	private List<MethodInfo> m_OnDeserializingMethods; // 0x10
	private List<MethodInfo> m_OnDeserializedMethods; // 0x14

	// Properties
	internal bool HasOnSerializingEvents { get; }

	// Methods

	// RVA: 0x94C Offset: 0x94C VA: 0x94C
	private List<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t) { }

	// RVA: 0x391 Offset: 0x391 VA: 0x391
	internal void .ctor(Type t) { }

	// RVA: 0x79B Offset: 0x79B VA: 0x79B
	internal bool get_HasOnSerializingEvents() { }

	// RVA: 0x247 Offset: 0x247 VA: 0x247
	internal void InvokeOnSerializing(object obj, StreamingContext context) { }

	// RVA: 0x248 Offset: 0x248 VA: 0x248
	internal void InvokeOnDeserializing(object obj, StreamingContext context) { }

	// RVA: 0x249 Offset: 0x249 VA: 0x249
	internal void InvokeOnDeserialized(object obj, StreamingContext context) { }

	// RVA: 0x94D Offset: 0x94D VA: 0x94D
	internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler) { }

	// RVA: 0x94E Offset: 0x94E VA: 0x94E
	internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler) { }
}

// Namespace: System.Runtime.Serialization
internal static class SerializationEventsCache // TypeDefIndex: 841
{
	// Fields
	private static Hashtable cache; // 0xFFFFFFFF

	// Methods

	// RVA: 0x79C Offset: 0x79C VA: 0x79C
	internal static SerializationEvents GetSerializationEventsForType(Type t) { }

	// RVA: 0xEE1 Offset: 0xEE1 VA: 0xEE1
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x434 Offset: 0x434 VA: 0x434
[Serializable]
public class SerializationException : SystemException // TypeDefIndex: 842
{
	// Fields
	private static string _nullMessage; // 0xFFFFFFFF

	// Methods

	// RVA: 0x4ED Offset: 0x4ED VA: 0x4ED
	public void .ctor() { }

	// RVA: 0x392 Offset: 0x392 VA: 0x392
	public void .ctor(string message) { }

	// RVA: 0x24A Offset: 0x24A VA: 0x24A
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x24B Offset: 0x24B VA: 0x24B
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEE2 Offset: 0xEE2 VA: 0xEE2
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationFieldInfo : FieldInfo // TypeDefIndex: 843
{
	// Fields
	private RuntimeFieldInfo m_field; // 0x8
	private string m_serializationName; // 0xC

	// Properties
	public override Module Module { get; }
	public override int MetadataToken { get; }
	public override string Name { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override Type FieldType { get; }
	internal RuntimeFieldInfo FieldInfo { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override FieldAttributes Attributes { get; }

	// Methods

	// RVA: 0x79D Offset: 0x79D VA: 0x79D Slot: 15
	public override Module get_Module() { }

	// RVA: 0x79E Offset: 0x79E VA: 0x79E Slot: 14
	public override int get_MetadataToken() { }

	// RVA: 0x24C Offset: 0x24C VA: 0x24C
	internal void .ctor(RuntimeFieldInfo field, string namePrefix) { }

	// RVA: 0x79F Offset: 0x79F VA: 0x79F Slot: 7
	public override string get_Name() { }

	// RVA: 0x7A0 Offset: 0x7A0 VA: 0x7A0 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x7A1 Offset: 0x7A1 VA: 0x7A1 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x94F Offset: 0x94F VA: 0x94F Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x950 Offset: 0x950 VA: 0x950 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x7A2 Offset: 0x7A2 VA: 0x7A2 Slot: 18
	public override Type get_FieldType() { }

	// RVA: 0x3C5 Offset: 0x3C5 VA: 0x3C5 Slot: 19
	public override object GetValue(object obj) { }

	// RVA: 0x3C6 Offset: 0x3C6 VA: 0x3C6
	internal object InternalGetValue(object obj) { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20 Slot: 24
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	internal void InternalSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x7A3 Offset: 0x7A3 VA: 0x7A3
	internal RuntimeFieldInfo get_FieldInfo() { }

	// RVA: 0x7A4 Offset: 0x7A4 VA: 0x7A4 Slot: 17
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x7A5 Offset: 0x7A5 VA: 0x7A5 Slot: 16
	public override FieldAttributes get_Attributes() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x435 Offset: 0x435 VA: 0x435
public sealed class SerializationInfo // TypeDefIndex: 844
{
	// Fields
	private const int defaultSize = 4;
	private const string s_mscorlibAssemblySimpleName = "mscorlib";
	private const string s_mscorlibFileName = "mscorlib.dll";
	internal string[] m_members; // 0x8
	internal object[] m_data; // 0xC
	internal Type[] m_types; // 0x10
	private Dictionary<string, int> m_nameToIndex; // 0x14
	internal int m_currMember; // 0x18
	internal IFormatterConverter m_converter; // 0x1C
	private string m_fullTypeName; // 0x20
	private string m_assemName; // 0x24
	private Type objectType; // 0x28
	private bool isFullTypeNameSetExplicit; // 0x2C
	private bool isAssemblyNameSetExplicit; // 0x2D
	private bool requireSameTokenInPartialTrust; // 0x2E

	// Properties
	public string FullTypeName { get; }
	public string AssemblyName { get; }
	public int MemberCount { get; }
	public Type ObjectType { get; }
	public bool IsFullTypeNameSetExplicit { get; }
	public bool IsAssemblyNameSetExplicit { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0x756 Offset: 0x756 VA: 0x756
	// RVA: 0x24D Offset: 0x24D VA: 0x24D
	public void .ctor(Type type, IFormatterConverter converter) { }

	[CLSCompliantAttribute] // RVA: 0x757 Offset: 0x757 VA: 0x757
	// RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	public void .ctor(Type type, IFormatterConverter converter, bool requireSameTokenInPartialTrust) { }

	// RVA: 0x7A6 Offset: 0x7A6 VA: 0x7A6
	public string get_FullTypeName() { }

	// RVA: 0x7A7 Offset: 0x7A7 VA: 0x7A7
	public string get_AssemblyName() { }

	// RVA: 0x393 Offset: 0x393 VA: 0x393
	public void SetType(Type type) { }

	// RVA: 0x3C7 Offset: 0x3C7 VA: 0x3C7
	private static bool Compare(byte[] a, byte[] b) { }

	// RVA: 0x394 Offset: 0x394 VA: 0x394
	internal static void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName) { }

	// RVA: 0x3C8 Offset: 0x3C8 VA: 0x3C8
	internal static bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName) { }

	// RVA: 0x7A8 Offset: 0x7A8 VA: 0x7A8
	public int get_MemberCount() { }

	// RVA: 0x7A9 Offset: 0x7A9 VA: 0x7A9
	public Type get_ObjectType() { }

	// RVA: 0x7AA Offset: 0x7AA VA: 0x7AA
	public bool get_IsFullTypeNameSetExplicit() { }

	// RVA: 0x7AB Offset: 0x7AB VA: 0x7AB
	public bool get_IsAssemblyNameSetExplicit() { }

	// RVA: 0x7AC Offset: 0x7AC VA: 0x7AC
	public SerializationInfoEnumerator GetEnumerator() { }

	// RVA: 0x4EE Offset: 0x4EE VA: 0x4EE
	private void ExpandArrays() { }

	// RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	public void AddValue(string name, object value, Type type) { }

	// RVA: 0x24E Offset: 0x24E VA: 0x24E
	public void AddValue(string name, object value) { }

	// RVA: 0x24F Offset: 0x24F VA: 0x24F
	public void AddValue(string name, bool value) { }

	// RVA: 0x250 Offset: 0x250 VA: 0x250
	public void AddValue(string name, char value) { }

	// RVA: 0x251 Offset: 0x251 VA: 0x251
	public void AddValue(string name, byte value) { }

	// RVA: 0x252 Offset: 0x252 VA: 0x252
	public void AddValue(string name, short value) { }

	// RVA: 0x253 Offset: 0x253 VA: 0x253
	public void AddValue(string name, int value) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public void AddValue(string name, long value) { }

	[CLSCompliantAttribute] // RVA: 0x758 Offset: 0x758 VA: 0x758
	// RVA: 0xE Offset: 0xE VA: 0xE
	public void AddValue(string name, ulong value) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public void AddValue(string name, float value) { }

	// RVA: 0x254 Offset: 0x254 VA: 0x254
	public void AddValue(string name, DateTime value) { }

	// RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	internal void AddValueInternal(string name, object value, Type type) { }

	// RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	internal void UpdateValue(string name, object value, Type type) { }

	// RVA: 0x3C9 Offset: 0x3C9 VA: 0x3C9
	private int FindElement(string name) { }

	// RVA: 0x951 Offset: 0x951 VA: 0x951
	private object GetElement(string name, out Type foundType) { }

	[ComVisibleAttribute] // RVA: 0x759 Offset: 0x759 VA: 0x759
	// RVA: 0x952 Offset: 0x952 VA: 0x952
	private object GetElementNoThrow(string name, out Type foundType) { }

	// RVA: 0x953 Offset: 0x953 VA: 0x953
	public object GetValue(string name, Type type) { }

	[ComVisibleAttribute] // RVA: 0x75A Offset: 0x75A VA: 0x75A
	// RVA: 0x954 Offset: 0x954 VA: 0x954
	internal object GetValueNoThrow(string name, Type type) { }

	// RVA: 0x3CA Offset: 0x3CA VA: 0x3CA
	public bool GetBoolean(string name) { }

	// RVA: 0x3CB Offset: 0x3CB VA: 0x3CB
	public int GetInt32(string name) { }

	// RVA: 0x3D Offset: 0x3D VA: 0x3D
	public long GetInt64(string name) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public float GetSingle(string name) { }

	// RVA: 0x3CC Offset: 0x3CC VA: 0x3CC
	public string GetString(string name) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x436 Offset: 0x436 VA: 0x436
public struct SerializationEntry // TypeDefIndex: 845
{
	// Fields
	private Type m_type; // 0x0
	private object m_value; // 0x4
	private string m_name; // 0x8

	// Properties
	public object Value { get; }
	public string Name { get; }

	// Methods

	// RVA: 0x799 Offset: 0x799 VA: 0x799
	public object get_Value() { }

	// RVA: 0x79A Offset: 0x79A VA: 0x79A
	public string get_Name() { }

	// RVA: 0xC4 Offset: 0xC4 VA: 0xC4
	internal void .ctor(string entryName, object entryValue, Type entryType) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x437 Offset: 0x437 VA: 0x437
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 846
{
	// Fields
	private string[] m_members; // 0x8
	private object[] m_data; // 0xC
	private Type[] m_types; // 0x10
	private int m_numItems; // 0x14
	private int m_currItem; // 0x18
	private bool m_current; // 0x1C

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public SerializationEntry Current { get; }
	public string Name { get; }
	public object Value { get; }
	public Type ObjectType { get; }

	// Methods

	// RVA: 0x56 Offset: 0x56 VA: 0x56
	internal void .ctor(string[] members, object[] info, Type[] types, int numItems) { }

	// RVA: 0x7AD Offset: 0x7AD VA: 0x7AD Slot: 4
	public bool MoveNext() { }

	// RVA: 0x7AE Offset: 0x7AE VA: 0x7AE Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x395 Offset: 0x395 VA: 0x395
	public SerializationEntry get_Current() { }

	// RVA: 0x7AF Offset: 0x7AF VA: 0x7AF
	public string get_Name() { }

	// RVA: 0x7B0 Offset: 0x7B0 VA: 0x7B0
	public object get_Value() { }

	// RVA: 0x7B1 Offset: 0x7B1 VA: 0x7B1
	public Type get_ObjectType() { }
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 847
{
	// Fields
	private Hashtable m_objectSeenTable; // 0x8
	private SerializationEventHandler m_onSerializedHandler; // 0xC
	private StreamingContext m_context; // 0x10

	// Methods

	// RVA: 0x396 Offset: 0x396 VA: 0x396
	public void .ctor(StreamingContext context) { }

	// RVA: 0x397 Offset: 0x397 VA: 0x397
	public void RegisterObject(object obj) { }

	// RVA: 0x4EF Offset: 0x4EF VA: 0x4EF
	public void RaiseOnSerializedEvent() { }

	// RVA: 0x398 Offset: 0x398 VA: 0x398
	private void AddOnSerialized(object obj) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0x438 Offset: 0x438 VA: 0x438
[Serializable]
public struct StreamingContext // TypeDefIndex: 848
{
	// Fields
	internal object m_additionalContext; // 0x0
	internal StreamingContextStates m_state; // 0x4

	// Properties
	public StreamingContextStates State { get; }

	// Methods

	// RVA: 0x399 Offset: 0x399 VA: 0x399
	public void .ctor(StreamingContextStates state) { }

	// RVA: 0x255 Offset: 0x255 VA: 0x255
	public void .ctor(StreamingContextStates state, object additional) { }

	// RVA: 0x3CD Offset: 0x3CD VA: 0x3CD Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x7B2 Offset: 0x7B2 VA: 0x7B2 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x7B3 Offset: 0x7B3 VA: 0x7B3
	public StreamingContextStates get_State() { }
}

// Namespace: System.Runtime.Serialization
[FlagsAttribute] // RVA: 0x439 Offset: 0x439 VA: 0x439
[ComVisibleAttribute] // RVA: 0x439 Offset: 0x439 VA: 0x439
[Serializable]
public enum StreamingContextStates // TypeDefIndex: 849
{
	// Fields
	public int value__; // 0x0
	public const StreamingContextStates CrossProcess = 1;
	public const StreamingContextStates CrossMachine = 2;
	public const StreamingContextStates File = 4;
	public const StreamingContextStates Persistence = 8;
	public const StreamingContextStates Remoting = 16;
	public const StreamingContextStates Other = 32;
	public const StreamingContextStates Clone = 64;
	public const StreamingContextStates CrossAppDomain = 128;
	public const StreamingContextStates All = 255;
}

// Namespace: System.Runtime.Serialization
internal class ValueTypeFixupInfo // TypeDefIndex: 850
{
	// Fields
	private long m_containerID; // 0x8
	private FieldInfo m_parentField; // 0x10
	private int[] m_parentIndex; // 0x14

	// Properties
	public long ContainerID { get; }
	public FieldInfo ParentField { get; }
	public int[] ParentIndex { get; }

	// Methods

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public void .ctor(long containerID, FieldInfo member, int[] parentIndex) { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B
	public long get_ContainerID() { }

	// RVA: 0x7B5 Offset: 0x7B5 VA: 0x7B5
	public FieldInfo get_ParentField() { }

	// RVA: 0x7B6 Offset: 0x7B6 VA: 0x7B6
	public int[] get_ParentIndex() { }
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0x43A Offset: 0x43A VA: 0x43A
[Serializable]
public enum FormatterTypeStyle // TypeDefIndex: 851
{
	// Fields
	public int value__; // 0x0
	public const FormatterTypeStyle TypesWhenNeeded = 0;
	public const FormatterTypeStyle TypesAlways = 1;
	public const FormatterTypeStyle XsdString = 2;
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0x43B Offset: 0x43B VA: 0x43B
[Serializable]
public enum FormatterAssemblyStyle // TypeDefIndex: 852
{
	// Fields
	public int value__; // 0x0
	public const FormatterAssemblyStyle Simple = 0;
	public const FormatterAssemblyStyle Full = 1;
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0x43C Offset: 0x43C VA: 0x43C
public enum TypeFilterLevel // TypeDefIndex: 853
{
	// Fields
	public int value__; // 0x0
	public const TypeFilterLevel Low = 2;
	public const TypeFilterLevel Full = 3;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal static class BinaryConverter // TypeDefIndex: 854
{
	// Methods

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	internal static BinaryTypeEnum GetBinaryTypeInfo(Type type, WriteObjectInfo objectInfo, string typeName, ObjectWriter objectWriter, out object typeInformation, out int assemId) { }

	// RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5
	internal static BinaryTypeEnum GetParserBinaryTypeInfo(Type type, out object typeInformation) { }

	// RVA: 0xAF Offset: 0xAF VA: 0xAF
	internal static void WriteTypeInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, __BinaryWriter sout) { }

	// RVA: 0x941 Offset: 0x941 VA: 0x941
	internal static object ReadTypeInfo(BinaryTypeEnum binaryTypeEnum, __BinaryParser input, out int assemId) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	internal static void TypeFromInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, ObjectReader objectReader, BinaryAssemblyInfo assemblyInfo, out InternalPrimitiveTypeE primitiveTypeEnum, out string typeString, out Type type, out bool isVariant) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal static class IOUtil // TypeDefIndex: 855
{
	// Methods

	// RVA: 0x3AA Offset: 0x3AA VA: 0x3AA
	internal static bool FlagTest(MessageEnum flag, MessageEnum target) { }

	// RVA: 0x331 Offset: 0x331 VA: 0x331
	internal static void WriteStringWithCode(string value, __BinaryWriter sout) { }

	// RVA: 0x222 Offset: 0x222 VA: 0x222
	internal static void WriteWithCode(Type type, object value, __BinaryWriter sout) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal interface IStreamable // TypeDefIndex: 856
{}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryAssemblyInfo // TypeDefIndex: 857
{
	// Fields
	internal string assemblyString; // 0x8
	private Assembly assembly; // 0xC

	// Methods

	// RVA: 0x31F Offset: 0x31F VA: 0x31F
	internal void .ctor(string assemblyString) { }

	// RVA: 0x21D Offset: 0x21D VA: 0x21D
	internal void .ctor(string assemblyString, Assembly assembly) { }

	// RVA: 0x74C Offset: 0x74C VA: 0x74C
	internal Assembly GetAssembly() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerializationHeaderRecord : IStreamable // TypeDefIndex: 858
{
	// Fields
	internal int binaryFormatterMajorVersion; // 0x8
	internal int binaryFormatterMinorVersion; // 0xC
	internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
	internal int topId; // 0x14
	internal int headerId; // 0x18
	internal int majorVersion; // 0x1C
	internal int minorVersion; // 0x20

	// Methods

	// RVA: 0x4C1 Offset: 0x4C1 VA: 0x4C1
	internal void .ctor() { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion) { }

	// RVA: 0x356 Offset: 0x356 VA: 0x356 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x3BA Offset: 0x3BA VA: 0x3BA
	private static int GetInt32(byte[] buffer, int index) { }

	// RVA: 0x357 Offset: 0x357 VA: 0x357 Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4C2 Offset: 0x4C2 VA: 0x4C2
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryAssembly : IStreamable // TypeDefIndex: 859
{
	// Fields
	internal int assemId; // 0x8
	internal string assemblyString; // 0xC

	// Methods

	// RVA: 0x490 Offset: 0x490 VA: 0x490
	internal void .ctor() { }

	// RVA: 0x21C Offset: 0x21C VA: 0x21C
	internal void Set(int assemId, string assemblyString) { }

	// RVA: 0x31D Offset: 0x31D VA: 0x31D Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x31E Offset: 0x31E VA: 0x31E Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x491 Offset: 0x491 VA: 0x491
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryCrossAppDomainAssembly : IStreamable // TypeDefIndex: 860
{
	// Fields
	internal int assemId; // 0x8
	internal int assemblyIndex; // 0xC

	// Methods

	// RVA: 0x492 Offset: 0x492 VA: 0x492
	internal void .ctor() { }

	// RVA: 0x320 Offset: 0x320 VA: 0x320 Slot: 4
	public void Read(__BinaryParser input) { }

	// RVA: 0x493 Offset: 0x493 VA: 0x493
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObject : IStreamable // TypeDefIndex: 861
{
	// Fields
	internal int objectId; // 0x8
	internal int mapId; // 0xC

	// Methods

	// RVA: 0x49D Offset: 0x49D VA: 0x49D
	internal void .ctor() { }

	// RVA: 0x220 Offset: 0x220 VA: 0x220
	internal void Set(int objectId, int mapId) { }

	// RVA: 0x327 Offset: 0x327 VA: 0x327 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x328 Offset: 0x328 VA: 0x328 Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x49E Offset: 0x49E VA: 0x49E
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryMethodCall // TypeDefIndex: 862
{
	// Fields
	private string methodName; // 0x8
	private string typeName; // 0xC
	private object[] args; // 0x10
	private object callContext; // 0x14
	private Type[] argTypes; // 0x18
	private bool bArgsPrimitive; // 0x1C
	private MessageEnum messageEnum; // 0x20

	// Methods

	// RVA: 0x325 Offset: 0x325 VA: 0x325
	internal void Write(__BinaryWriter sout) { }

	// RVA: 0x499 Offset: 0x499 VA: 0x499
	internal void Dump() { }

	// RVA: 0x49A Offset: 0x49A VA: 0x49A
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryMethodReturn : IStreamable // TypeDefIndex: 863
{
	// Fields
	private object returnValue; // 0x8
	private object[] args; // 0xC
	private object callContext; // 0x10
	private Type[] argTypes; // 0x14
	private bool bArgsPrimitive; // 0x18
	private MessageEnum messageEnum; // 0x1C
	private Type returnType; // 0x20
	private static object instanceOfVoid; // 0x0

	// Methods

	// RVA: 0xED4 Offset: 0xED4 VA: 0xED4
	private static void .cctor() { }

	// RVA: 0x49B Offset: 0x49B VA: 0x49B
	internal void .ctor() { }

	// RVA: 0x326 Offset: 0x326 VA: 0x326 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x49C Offset: 0x49C VA: 0x49C
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObjectString : IStreamable // TypeDefIndex: 864
{
	// Fields
	internal int objectId; // 0x8
	internal string value; // 0xC

	// Methods

	// RVA: 0x49F Offset: 0x49F VA: 0x49F
	internal void .ctor() { }

	// RVA: 0x221 Offset: 0x221 VA: 0x221
	internal void Set(int objectId, string value) { }

	// RVA: 0x329 Offset: 0x329 VA: 0x329 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x32A Offset: 0x32A VA: 0x32A Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4A0 Offset: 0x4A0 VA: 0x4A0
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryCrossAppDomainString : IStreamable // TypeDefIndex: 865
{
	// Fields
	internal int objectId; // 0x8
	internal int value; // 0xC

	// Methods

	// RVA: 0x496 Offset: 0x496 VA: 0x496
	internal void .ctor() { }

	// RVA: 0x322 Offset: 0x322 VA: 0x322 Slot: 4
	public void Read(__BinaryParser input) { }

	// RVA: 0x497 Offset: 0x497 VA: 0x497
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryCrossAppDomainMap : IStreamable // TypeDefIndex: 866
{
	// Fields
	internal int crossAppDomainArrayIndex; // 0x8

	// Methods

	// RVA: 0x494 Offset: 0x494 VA: 0x494
	internal void .ctor() { }

	// RVA: 0x321 Offset: 0x321 VA: 0x321 Slot: 4
	public void Read(__BinaryParser input) { }

	// RVA: 0x495 Offset: 0x495 VA: 0x495
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MemberPrimitiveTyped : IStreamable // TypeDefIndex: 867
{
	// Fields
	internal InternalPrimitiveTypeE primitiveTypeEnum; // 0x8
	internal object value; // 0xC

	// Methods

	// RVA: 0x4A6 Offset: 0x4A6 VA: 0x4A6
	internal void .ctor() { }

	// RVA: 0x224 Offset: 0x224 VA: 0x224
	internal void Set(InternalPrimitiveTypeE primitiveTypeEnum, object value) { }

	// RVA: 0x334 Offset: 0x334 VA: 0x334 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x335 Offset: 0x335 VA: 0x335 Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObjectWithMap : IStreamable // TypeDefIndex: 868
{
	// Fields
	internal BinaryHeaderEnum binaryHeaderEnum; // 0x8
	internal int objectId; // 0xC
	internal string name; // 0x10
	internal int numMembers; // 0x14
	internal string[] memberNames; // 0x18
	internal int assemId; // 0x1C

	// Methods

	// RVA: 0x4A1 Offset: 0x4A1 VA: 0x4A1
	internal void .ctor() { }

	// RVA: 0x32B Offset: 0x32B VA: 0x32B
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	internal void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId) { }

	// RVA: 0x32C Offset: 0x32C VA: 0x32C Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x32D Offset: 0x32D VA: 0x32D Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4A2 Offset: 0x4A2 VA: 0x4A2
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObjectWithMapTyped : IStreamable // TypeDefIndex: 869
{
	// Fields
	internal BinaryHeaderEnum binaryHeaderEnum; // 0x8
	internal int objectId; // 0xC
	internal string name; // 0x10
	internal int numMembers; // 0x14
	internal string[] memberNames; // 0x18
	internal BinaryTypeEnum[] binaryTypeEnumA; // 0x1C
	internal object[] typeInformationA; // 0x20
	internal int[] memberAssemIds; // 0x24
	internal int assemId; // 0x28

	// Methods

	// RVA: 0x4A3 Offset: 0x4A3 VA: 0x4A3
	internal void .ctor() { }

	// RVA: 0x32E Offset: 0x32E VA: 0x32E
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	internal void Set(int objectId, string name, int numMembers, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId) { }

	// RVA: 0x32F Offset: 0x32F VA: 0x32F Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x330 Offset: 0x330 VA: 0x330 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryArray : IStreamable // TypeDefIndex: 870
{
	// Fields
	internal int objectId; // 0x8
	internal int rank; // 0xC
	internal int[] lengthA; // 0x10
	internal int[] lowerBoundA; // 0x14
	internal BinaryTypeEnum binaryTypeEnum; // 0x18
	internal object typeInformation; // 0x1C
	internal int assemId; // 0x20
	private BinaryHeaderEnum binaryHeaderEnum; // 0x24
	internal BinaryArrayTypeEnum binaryArrayTypeEnum; // 0x28

	// Methods

	// RVA: 0x48F Offset: 0x48F VA: 0x48F
	internal void .ctor() { }

	// RVA: 0x31A Offset: 0x31A VA: 0x31A
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	internal void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, BinaryTypeEnum binaryTypeEnum, object typeInformation, BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId) { }

	// RVA: 0x31B Offset: 0x31B VA: 0x31B Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x31C Offset: 0x31C VA: 0x31C Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MemberPrimitiveUnTyped : IStreamable // TypeDefIndex: 871
{
	// Fields
	internal InternalPrimitiveTypeE typeInformation; // 0x8
	internal object value; // 0xC

	// Methods

	// RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8
	internal void .ctor() { }

	// RVA: 0x225 Offset: 0x225 VA: 0x225
	internal void Set(InternalPrimitiveTypeE typeInformation, object value) { }

	// RVA: 0x336 Offset: 0x336 VA: 0x336
	internal void Set(InternalPrimitiveTypeE typeInformation) { }

	// RVA: 0x337 Offset: 0x337 VA: 0x337 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x338 Offset: 0x338 VA: 0x338 Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4A9 Offset: 0x4A9 VA: 0x4A9
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MemberReference : IStreamable // TypeDefIndex: 872
{
	// Fields
	internal int idRef; // 0x8

	// Methods

	// RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
	internal void .ctor() { }

	// RVA: 0x339 Offset: 0x339 VA: 0x339
	internal void Set(int idRef) { }

	// RVA: 0x33A Offset: 0x33A VA: 0x33A Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x33B Offset: 0x33B VA: 0x33B Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectNull : IStreamable // TypeDefIndex: 873
{
	// Fields
	internal int nullCount; // 0x8

	// Methods

	// RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1
	internal void .ctor() { }

	// RVA: 0x341 Offset: 0x341 VA: 0x341
	internal void SetNullCount(int nullCount) { }

	// RVA: 0x342 Offset: 0x342 VA: 0x342 Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x226 Offset: 0x226 VA: 0x226
	public void Read(__BinaryParser input, BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2
	public void Dump() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MessageEnd : IStreamable // TypeDefIndex: 874
{
	// Methods

	// RVA: 0x4AC Offset: 0x4AC VA: 0x4AC
	internal void .ctor() { }

	// RVA: 0x33C Offset: 0x33C VA: 0x33C Slot: 4
	public void Write(__BinaryWriter sout) { }

	// RVA: 0x33D Offset: 0x33D VA: 0x33D Slot: 5
	public void Read(__BinaryParser input) { }

	// RVA: 0x4AD Offset: 0x4AD VA: 0x4AD
	public void Dump() { }

	// RVA: 0x33E Offset: 0x33E VA: 0x33E
	public void Dump(Stream sout) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectMap // TypeDefIndex: 875
{
	// Fields
	internal string objectName; // 0x8
	internal Type objectType; // 0xC
	internal BinaryTypeEnum[] binaryTypeEnumA; // 0x10
	internal object[] typeInformationA; // 0x14
	internal Type[] memberTypes; // 0x18
	internal string[] memberNames; // 0x1C
	internal ReadObjectInfo objectInfo; // 0x20
	internal bool isInitObjectInfo; // 0x24
	internal ObjectReader objectReader; // 0x28
	internal int objectId; // 0x2C
	internal BinaryAssemblyInfo assemblyInfo; // 0x30

	// Methods

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	internal void .ctor(string objectName, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	internal void .ctor(string objectName, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable) { }

	// RVA: 0x943 Offset: 0x943 VA: 0x943
	internal ReadObjectInfo CreateObjectInfo(ref SerializationInfo si, ref object[] memberData) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	internal static ObjectMap Create(string name, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	internal static ObjectMap Create(string name, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectProgress // TypeDefIndex: 876
{
	// Fields
	internal static int opRecordIdCount; // 0x0
	internal bool isInitial; // 0x8
	internal int count; // 0xC
	internal BinaryTypeEnum expectedType; // 0x10
	internal object expectedTypeInformation; // 0x14
	internal string name; // 0x18
	internal InternalObjectTypeE objectTypeEnum; // 0x1C
	internal InternalMemberTypeE memberTypeEnum; // 0x20
	internal InternalMemberValueE memberValueEnum; // 0x24
	internal Type dtType; // 0x28
	internal int numItems; // 0x2C
	internal BinaryTypeEnum binaryTypeEnum; // 0x30
	internal object typeInformation; // 0x34
	internal int nullCount; // 0x38
	internal int memberLength; // 0x3C
	internal BinaryTypeEnum[] binaryTypeEnumA; // 0x40
	internal object[] typeInformationA; // 0x44
	internal string[] memberNames; // 0x48
	internal Type[] memberTypes; // 0x4C
	internal ParseRecord pr; // 0x50

	// Methods

	// RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3
	internal void .ctor() { }

	// RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4
	internal void Init() { }

	// RVA: 0x343 Offset: 0x343 VA: 0x343
	internal void ArrayCountIncrement(int value) { }

	// RVA: 0x944 Offset: 0x944 VA: 0x944
	internal bool GetNext(out BinaryTypeEnum outBinaryTypeEnum, out object outTypeInformation) { }

	// RVA: 0xEDC Offset: 0xEDC VA: 0xEDC
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class Converter // TypeDefIndex: 877
{
	// Fields
	private static int primitiveTypeEnumLength; // 0x0
	private static Type[] typeA; // 0x4
	private static Type[] arrayTypeA; // 0x8
	private static string[] valueA; // 0xC
	private static TypeCode[] typeCodeA; // 0x10
	private static InternalPrimitiveTypeE[] codeA; // 0x14
	internal static Type typeofISerializable; // 0x18
	internal static Type typeofString; // 0x1C
	internal static Type typeofConverter; // 0x20
	internal static Type typeofBoolean; // 0x24
	internal static Type typeofByte; // 0x28
	internal static Type typeofChar; // 0x2C
	internal static Type typeofDecimal; // 0x30
	internal static Type typeofDouble; // 0x34
	internal static Type typeofInt16; // 0x38
	internal static Type typeofInt32; // 0x3C
	internal static Type typeofInt64; // 0x40
	internal static Type typeofSByte; // 0x44
	internal static Type typeofSingle; // 0x48
	internal static Type typeofTimeSpan; // 0x4C
	internal static Type typeofDateTime; // 0x50
	internal static Type typeofUInt16; // 0x54
	internal static Type typeofUInt32; // 0x58
	internal static Type typeofUInt64; // 0x5C
	internal static Type typeofObject; // 0x60
	internal static Type typeofSystemVoid; // 0x64
	internal static Assembly urtAssembly; // 0x68
	internal static string urtAssemblyString; // 0x6C
	internal static Type typeofTypeArray; // 0x70
	internal static Type typeofObjectArray; // 0x74
	internal static Type typeofStringArray; // 0x78
	internal static Type typeofBooleanArray; // 0x7C
	internal static Type typeofByteArray; // 0x80
	internal static Type typeofCharArray; // 0x84
	internal static Type typeofDecimalArray; // 0x88
	internal static Type typeofDoubleArray; // 0x8C
	internal static Type typeofInt16Array; // 0x90
	internal static Type typeofInt32Array; // 0x94
	internal static Type typeofInt64Array; // 0x98
	internal static Type typeofSByteArray; // 0x9C
	internal static Type typeofSingleArray; // 0xA0
	internal static Type typeofTimeSpanArray; // 0xA4
	internal static Type typeofDateTimeArray; // 0xA8
	internal static Type typeofUInt16Array; // 0xAC
	internal static Type typeofUInt32Array; // 0xB0
	internal static Type typeofUInt64Array; // 0xB4
	internal static Type typeofMarshalByRefObject; // 0xB8

	// Methods

	// RVA: 0x74E Offset: 0x74E VA: 0x74E
	internal static InternalPrimitiveTypeE ToCode(Type type) { }

	// RVA: 0x74F Offset: 0x74F VA: 0x74F
	internal static bool IsWriteAsByteArray(InternalPrimitiveTypeE code) { }

	// RVA: 0x750 Offset: 0x750 VA: 0x750
	internal static int TypeLength(InternalPrimitiveTypeE code) { }

	// RVA: 0x751 Offset: 0x751 VA: 0x751
	internal static Type ToArrayType(InternalPrimitiveTypeE code) { }

	// RVA: 0xED5 Offset: 0xED5 VA: 0xED5
	private static void InitTypeA() { }

	// RVA: 0xED6 Offset: 0xED6 VA: 0xED6
	private static void InitArrayTypeA() { }

	// RVA: 0x752 Offset: 0x752 VA: 0x752
	internal static Type ToType(InternalPrimitiveTypeE code) { }

	// RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7
	internal static Array CreatePrimitiveArray(InternalPrimitiveTypeE code, int length) { }

	// RVA: 0x3A8 Offset: 0x3A8 VA: 0x3A8
	internal static bool IsPrimitiveArray(Type type, out object typeInformation) { }

	// RVA: 0xED7 Offset: 0xED7 VA: 0xED7
	private static void InitValueA() { }

	// RVA: 0x753 Offset: 0x753 VA: 0x753
	internal static string ToComType(InternalPrimitiveTypeE code) { }

	// RVA: 0xED8 Offset: 0xED8 VA: 0xED8
	private static void InitTypeCodeA() { }

	// RVA: 0x754 Offset: 0x754 VA: 0x754
	internal static TypeCode ToTypeCode(InternalPrimitiveTypeE code) { }

	// RVA: 0xED9 Offset: 0xED9 VA: 0xED9
	private static void InitCodeA() { }

	// RVA: 0x755 Offset: 0x755 VA: 0x755
	internal static InternalPrimitiveTypeE ToPrimitiveTypeEnum(TypeCode typeCode) { }

	// RVA: 0x3A9 Offset: 0x3A9 VA: 0x3A9
	internal static object FromString(string value, InternalPrimitiveTypeE code) { }

	// RVA: 0xEDA Offset: 0xEDA VA: 0xEDA
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum BinaryHeaderEnum // TypeDefIndex: 878
{
	// Fields
	public int value__; // 0x0
	public const BinaryHeaderEnum SerializedStreamHeader = 0;
	public const BinaryHeaderEnum Object = 1;
	public const BinaryHeaderEnum ObjectWithMap = 2;
	public const BinaryHeaderEnum ObjectWithMapAssemId = 3;
	public const BinaryHeaderEnum ObjectWithMapTyped = 4;
	public const BinaryHeaderEnum ObjectWithMapTypedAssemId = 5;
	public const BinaryHeaderEnum ObjectString = 6;
	public const BinaryHeaderEnum Array = 7;
	public const BinaryHeaderEnum MemberPrimitiveTyped = 8;
	public const BinaryHeaderEnum MemberReference = 9;
	public const BinaryHeaderEnum ObjectNull = 10;
	public const BinaryHeaderEnum MessageEnd = 11;
	public const BinaryHeaderEnum Assembly = 12;
	public const BinaryHeaderEnum ObjectNullMultiple256 = 13;
	public const BinaryHeaderEnum ObjectNullMultiple = 14;
	public const BinaryHeaderEnum ArraySinglePrimitive = 15;
	public const BinaryHeaderEnum ArraySingleObject = 16;
	public const BinaryHeaderEnum ArraySingleString = 17;
	public const BinaryHeaderEnum CrossAppDomainMap = 18;
	public const BinaryHeaderEnum CrossAppDomainString = 19;
	public const BinaryHeaderEnum CrossAppDomainAssembly = 20;
	public const BinaryHeaderEnum MethodCall = 21;
	public const BinaryHeaderEnum MethodReturn = 22;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum BinaryTypeEnum // TypeDefIndex: 879
{
	// Fields
	public int value__; // 0x0
	public const BinaryTypeEnum Primitive = 0;
	public const BinaryTypeEnum String = 1;
	public const BinaryTypeEnum Object = 2;
	public const BinaryTypeEnum ObjectUrt = 3;
	public const BinaryTypeEnum ObjectUser = 4;
	public const BinaryTypeEnum ObjectArray = 5;
	public const BinaryTypeEnum StringArray = 6;
	public const BinaryTypeEnum PrimitiveArray = 7;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum BinaryArrayTypeEnum // TypeDefIndex: 880
{
	// Fields
	public int value__; // 0x0
	public const BinaryArrayTypeEnum Single = 0;
	public const BinaryArrayTypeEnum Jagged = 1;
	public const BinaryArrayTypeEnum Rectangular = 2;
	public const BinaryArrayTypeEnum SingleOffset = 3;
	public const BinaryArrayTypeEnum JaggedOffset = 4;
	public const BinaryArrayTypeEnum RectangularOffset = 5;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalSerializerTypeE // TypeDefIndex: 881
{
	// Fields
	public int value__; // 0x0
	public const InternalSerializerTypeE Soap = 1;
	public const InternalSerializerTypeE Binary = 2;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalParseTypeE // TypeDefIndex: 882
{
	// Fields
	public int value__; // 0x0
	public const InternalParseTypeE Empty = 0;
	public const InternalParseTypeE SerializedStreamHeader = 1;
	public const InternalParseTypeE Object = 2;
	public const InternalParseTypeE Member = 3;
	public const InternalParseTypeE ObjectEnd = 4;
	public const InternalParseTypeE MemberEnd = 5;
	public const InternalParseTypeE Headers = 6;
	public const InternalParseTypeE HeadersEnd = 7;
	public const InternalParseTypeE SerializedStreamHeaderEnd = 8;
	public const InternalParseTypeE Envelope = 9;
	public const InternalParseTypeE EnvelopeEnd = 10;
	public const InternalParseTypeE Body = 11;
	public const InternalParseTypeE BodyEnd = 12;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalObjectTypeE // TypeDefIndex: 883
{
	// Fields
	public int value__; // 0x0
	public const InternalObjectTypeE Empty = 0;
	public const InternalObjectTypeE Object = 1;
	public const InternalObjectTypeE Array = 2;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalObjectPositionE // TypeDefIndex: 884
{
	// Fields
	public int value__; // 0x0
	public const InternalObjectPositionE Empty = 0;
	public const InternalObjectPositionE Top = 1;
	public const InternalObjectPositionE Child = 2;
	public const InternalObjectPositionE Headers = 3;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalArrayTypeE // TypeDefIndex: 885
{
	// Fields
	public int value__; // 0x0
	public const InternalArrayTypeE Empty = 0;
	public const InternalArrayTypeE Single = 1;
	public const InternalArrayTypeE Jagged = 2;
	public const InternalArrayTypeE Rectangular = 3;
	public const InternalArrayTypeE Base64 = 4;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalMemberTypeE // TypeDefIndex: 886
{
	// Fields
	public int value__; // 0x0
	public const InternalMemberTypeE Empty = 0;
	public const InternalMemberTypeE Header = 1;
	public const InternalMemberTypeE Field = 2;
	public const InternalMemberTypeE Item = 3;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalMemberValueE // TypeDefIndex: 887
{
	// Fields
	public int value__; // 0x0
	public const InternalMemberValueE Empty = 0;
	public const InternalMemberValueE InlineValue = 1;
	public const InternalMemberValueE Nested = 2;
	public const InternalMemberValueE Reference = 3;
	public const InternalMemberValueE Null = 4;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalPrimitiveTypeE // TypeDefIndex: 888
{
	// Fields
	public int value__; // 0x0
	public const InternalPrimitiveTypeE Invalid = 0;
	public const InternalPrimitiveTypeE Boolean = 1;
	public const InternalPrimitiveTypeE Byte = 2;
	public const InternalPrimitiveTypeE Char = 3;
	public const InternalPrimitiveTypeE Currency = 4;
	public const InternalPrimitiveTypeE Decimal = 5;
	public const InternalPrimitiveTypeE Double = 6;
	public const InternalPrimitiveTypeE Int16 = 7;
	public const InternalPrimitiveTypeE Int32 = 8;
	public const InternalPrimitiveTypeE Int64 = 9;
	public const InternalPrimitiveTypeE SByte = 10;
	public const InternalPrimitiveTypeE Single = 11;
	public const InternalPrimitiveTypeE TimeSpan = 12;
	public const InternalPrimitiveTypeE DateTime = 13;
	public const InternalPrimitiveTypeE UInt16 = 14;
	public const InternalPrimitiveTypeE UInt32 = 15;
	public const InternalPrimitiveTypeE UInt64 = 16;
	public const InternalPrimitiveTypeE Null = 17;
	public const InternalPrimitiveTypeE String = 18;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[FlagsAttribute] // RVA: 0x43D Offset: 0x43D VA: 0x43D
[Serializable]
internal enum MessageEnum // TypeDefIndex: 889
{
	// Fields
	public int value__; // 0x0
	public const MessageEnum NoArgs = 1;
	public const MessageEnum ArgsInline = 2;
	public const MessageEnum ArgsIsArray = 4;
	public const MessageEnum ArgsInArray = 8;
	public const MessageEnum NoContext = 16;
	public const MessageEnum ContextInline = 32;
	public const MessageEnum ContextInArray = 64;
	public const MessageEnum MethodSignatureInArray = 128;
	public const MessageEnum PropertyInArray = 256;
	public const MessageEnum NoReturnValue = 512;
	public const MessageEnum ReturnValueVoid = 1024;
	public const MessageEnum ReturnValueInline = 2048;
	public const MessageEnum ReturnValueInArray = 4096;
	public const MessageEnum ExceptionInArray = 8192;
	public const MessageEnum GenericMethod = 32768;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum ValueFixupEnum // TypeDefIndex: 890
{
	// Fields
	public int value__; // 0x0
	public const ValueFixupEnum Empty = 0;
	public const ValueFixupEnum Array = 1;
	public const ValueFixupEnum Header = 2;
	public const ValueFixupEnum Member = 3;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[ComVisibleAttribute] // RVA: 0x43E Offset: 0x43E VA: 0x43E
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter // TypeDefIndex: 891
{
	// Fields
	internal ISurrogateSelector m_surrogates; // 0x8
	internal StreamingContext m_context; // 0xC
	internal SerializationBinder m_binder; // 0x14
	internal FormatterTypeStyle m_typeFormat; // 0x18
	internal FormatterAssemblyStyle m_assemblyFormat; // 0x1C
	internal TypeFilterLevel m_securityLevel; // 0x20
	internal object[] m_crossAppDomainArray; // 0x24
	private static Dictionary<Type, TypeInformation> typeNameCache; // 0x0

	// Properties
	public FormatterAssemblyStyle AssemblyFormat { set; }
	public ISurrogateSelector SurrogateSelector { set; }

	// Methods

	// RVA: 0x323 Offset: 0x323 VA: 0x323
	public void set_AssemblyFormat(FormatterAssemblyStyle value) { }

	// RVA: 0x324 Offset: 0x324 VA: 0x324 Slot: 4
	public void set_SurrogateSelector(ISurrogateSelector value) { }

	// RVA: 0x498 Offset: 0x498 VA: 0x498
	public void .ctor() { }

	// RVA: 0x21E Offset: 0x21E VA: 0x21E
	public void .ctor(ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x3A6 Offset: 0x3A6 VA: 0x3A6 Slot: 5
	public object Deserialize(Stream serializationStream) { }

	// RVA: 0xAD Offset: 0xAD VA: 0xAD
	internal object Deserialize(Stream serializationStream, HeaderHandler handler, bool fCheck) { }

	// RVA: 0x942 Offset: 0x942 VA: 0x942 Slot: 6
	public object Deserialize(Stream serializationStream, HeaderHandler handler) { }

	// RVA: 0x21F Offset: 0x21F VA: 0x21F Slot: 7
	public void Serialize(Stream serializationStream, object graph) { }

	// RVA: 0xB0 Offset: 0xB0 VA: 0xB0 Slot: 8
	public void Serialize(Stream serializationStream, object graph, Header[] headers) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	internal void Serialize(Stream serializationStream, object graph, Header[] headers, bool fCheck) { }

	// RVA: 0x74D Offset: 0x74D VA: 0x74D
	internal static TypeInformation GetTypeInformation(Type type) { }

	// RVA: 0xED3 Offset: 0xED3 VA: 0xED3
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class __BinaryWriter // TypeDefIndex: 892
{
	// Fields
	internal Stream sout; // 0x8
	internal FormatterTypeStyle formatterTypeStyle; // 0xC
	internal Hashtable objectMapTable; // 0x10
	internal ObjectWriter objectWriter; // 0x14
	internal BinaryWriter dataWriter; // 0x18
	internal int m_nestedObjectCount; // 0x1C
	private int nullCount; // 0x20
	internal BinaryMethodCall binaryMethodCall; // 0x24
	internal BinaryMethodReturn binaryMethodReturn; // 0x28
	internal BinaryObject binaryObject; // 0x2C
	internal BinaryObjectWithMap binaryObjectWithMap; // 0x30
	internal BinaryObjectWithMapTyped binaryObjectWithMapTyped; // 0x34
	internal BinaryObjectString binaryObjectString; // 0x38
	internal BinaryArray binaryArray; // 0x3C
	private byte[] byteBuffer; // 0x40
	private int chunkSize; // 0x44
	internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x48
	internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x4C
	internal ObjectNull objectNull; // 0x50
	internal MemberReference memberReference; // 0x54
	internal BinaryAssembly binaryAssembly; // 0x58

	// Methods

	// RVA: 0xBC Offset: 0xBC VA: 0xBC
	internal void .ctor(Stream sout, ObjectWriter objectWriter, FormatterTypeStyle formatterTypeStyle) { }

	// RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
	internal void WriteBegin() { }

	// RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
	internal void WriteEnd() { }

	// RVA: 0x368 Offset: 0x368 VA: 0x368
	internal void WriteBoolean(bool value) { }

	// RVA: 0x369 Offset: 0x369 VA: 0x369
	internal void WriteByte(byte value) { }

	// RVA: 0x36A Offset: 0x36A VA: 0x36A
	private void WriteBytes(byte[] value) { }

	// RVA: 0xBD Offset: 0xBD VA: 0xBD
	private void WriteBytes(byte[] byteA, int offset, int size) { }

	// RVA: 0x36B Offset: 0x36B VA: 0x36B
	internal void WriteChar(char value) { }

	// RVA: 0x36C Offset: 0x36C VA: 0x36C
	internal void WriteChars(char[] value) { }

	// RVA: 0x36D Offset: 0x36D VA: 0x36D
	internal void WriteDecimal(Decimal value) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	internal void WriteSingle(float value) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	internal void WriteDouble(double value) { }

	// RVA: 0x36E Offset: 0x36E VA: 0x36E
	internal void WriteInt16(short value) { }

	// RVA: 0x36F Offset: 0x36F VA: 0x36F
	internal void WriteInt32(int value) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	internal void WriteInt64(long value) { }

	// RVA: 0x370 Offset: 0x370 VA: 0x370
	internal void WriteSByte(sbyte value) { }

	// RVA: 0x371 Offset: 0x371 VA: 0x371
	internal void WriteString(string value) { }

	// RVA: 0x372 Offset: 0x372 VA: 0x372
	internal void WriteTimeSpan(TimeSpan value) { }

	// RVA: 0x373 Offset: 0x373 VA: 0x373
	internal void WriteDateTime(DateTime value) { }

	// RVA: 0x374 Offset: 0x374 VA: 0x374
	internal void WriteUInt16(ushort value) { }

	// RVA: 0x375 Offset: 0x375 VA: 0x375
	internal void WriteUInt32(uint value) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	internal void WriteUInt64(ulong value) { }

	// RVA: 0x236 Offset: 0x236 VA: 0x236
	internal void WriteObjectEnd(NameInfo memberNameInfo, NameInfo typeNameInfo) { }

	// RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
	internal void WriteSerializationHeaderEnd() { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53
	internal void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion) { }

	// RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
	internal void WriteMethodCall() { }

	// RVA: 0x4D8 Offset: 0x4D8 VA: 0x4D8
	internal void WriteMethodReturn() { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	internal void WriteObject(NameInfo nameInfo, NameInfo typeNameInfo, int numMembers, string[] memberNames, Type[] memberTypes, WriteObjectInfo[] memberObjectInfos) { }

	// RVA: 0x237 Offset: 0x237 VA: 0x237
	internal void WriteObjectString(int objectId, string value) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	internal void WriteSingleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array) { }

	// RVA: 0x238 Offset: 0x238 VA: 0x238
	private void WriteArrayAsBytes(Array array, int typeLength) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	internal void WriteJaggedArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	internal void WriteRectangleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	internal void WriteObjectByteArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA) { }

	// RVA: 0xBE Offset: 0xBE VA: 0xBE
	internal void WriteMember(NameInfo memberNameInfo, NameInfo typeNameInfo, object value) { }

	// RVA: 0x239 Offset: 0x239 VA: 0x239
	internal void WriteNullMember(NameInfo memberNameInfo, NameInfo typeNameInfo) { }

	// RVA: 0x23A Offset: 0x23A VA: 0x23A
	internal void WriteMemberObjectRef(NameInfo memberNameInfo, int idRef) { }

	// RVA: 0x376 Offset: 0x376 VA: 0x376
	internal void WriteMemberNested(NameInfo memberNameInfo) { }

	// RVA: 0xBF Offset: 0xBF VA: 0xBF
	internal void WriteMemberString(NameInfo memberNameInfo, NameInfo typeNameInfo, string value) { }

	// RVA: 0xC0 Offset: 0xC0 VA: 0xC0
	internal void WriteItem(NameInfo itemNameInfo, NameInfo typeNameInfo, object value) { }

	// RVA: 0x23B Offset: 0x23B VA: 0x23B
	internal void WriteNullItem(NameInfo itemNameInfo, NameInfo typeNameInfo) { }

	// RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9
	internal void WriteDelayedNullItem() { }

	// RVA: 0x4DA Offset: 0x4DA VA: 0x4DA
	internal void WriteItemEnd() { }

	// RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
	private void InternalWriteItemNull() { }

	// RVA: 0x23C Offset: 0x23C VA: 0x23C
	internal void WriteItemObjectRef(NameInfo nameInfo, int idRef) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54
	internal void WriteAssembly(Type type, string assemblyString, int assemId, bool isNew) { }

	// RVA: 0x23D Offset: 0x23D VA: 0x23D
	internal void WriteValue(InternalPrimitiveTypeE code, object value) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectMapInfo // TypeDefIndex: 893
{
	// Fields
	internal int objectId; // 0x8
	private int numMembers; // 0xC
	private string[] memberNames; // 0x10
	private Type[] memberTypes; // 0x14

	// Methods

	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	internal void .ctor(int objectId, int numMembers, string[] memberNames, Type[] memberTypes) { }

	// RVA: 0xAE Offset: 0xAE VA: 0xAE
	internal bool isCompatible(int numMembers, string[] memberNames, Type[] memberTypes) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class WriteObjectInfo // TypeDefIndex: 894
{
	// Fields
	internal int objectInfoId; // 0x8
	internal object obj; // 0xC
	internal Type objectType; // 0x10
	internal bool isSi; // 0x14
	internal bool isNamed; // 0x15
	internal bool isTyped; // 0x16
	internal bool isArray; // 0x17
	internal SerializationInfo si; // 0x18
	internal SerObjectInfoCache cache; // 0x1C
	internal object[] memberData; // 0x20
	internal ISerializationSurrogate serializationSurrogate; // 0x24
	internal StreamingContext context; // 0x28
	internal SerObjectInfoInit serObjectInfoInit; // 0x30
	internal long objectId; // 0x38
	internal long assemId; // 0x40
	private string binderTypeName; // 0x48
	private string binderAssemblyString; // 0x4C

	// Methods

	// RVA: 0x4C4 Offset: 0x4C4 VA: 0x4C4
	internal void .ctor() { }

	// RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
	internal void ObjectEnd() { }

	// RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
	private void InternalInit() { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	internal static WriteObjectInfo Serialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	internal void InitSerialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45
	internal static WriteObjectInfo Serialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	internal void InitSerialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder) { }

	// RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
	private void InitSiWrite() { }

	// RVA: 0x234 Offset: 0x234 VA: 0x234
	private static void CheckTypeForwardedFrom(SerObjectInfoCache cache, Type objectType, string binderAssemblyString) { }

	// RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
	private void InitNoMembers() { }

	// RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
	private void InitMemberInfo() { }

	// RVA: 0x767 Offset: 0x767 VA: 0x767
	internal string GetTypeFullName() { }

	// RVA: 0x768 Offset: 0x768 VA: 0x768
	internal string GetAssemblyString() { }

	// RVA: 0x35B Offset: 0x35B VA: 0x35B
	private void InvokeSerializationBinder(SerializationBinder binder) { }

	// RVA: 0x3BC Offset: 0x3BC VA: 0x3BC
	internal Type GetMemberType(MemberInfo objMember) { }

	// RVA: 0xBA Offset: 0xBA VA: 0xBA
	internal void GetMemberInfo(out string[] outMemberNames, out Type[] outMemberTypes, out object[] outMemberData) { }

	// RVA: 0x769 Offset: 0x769 VA: 0x769
	private static WriteObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit) { }

	// RVA: 0x35C Offset: 0x35C VA: 0x35C
	private static void PutObjectInfo(SerObjectInfoInit serObjectInfoInit, WriteObjectInfo objectInfo) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ReadObjectInfo // TypeDefIndex: 895
{
	// Fields
	internal int objectInfoId; // 0x8
	internal static int readObjectInfoCounter; // 0x0
	internal Type objectType; // 0xC
	internal ObjectManager objectManager; // 0x10
	internal int count; // 0x14
	internal bool isSi; // 0x18
	internal bool isNamed; // 0x19
	internal bool isTyped; // 0x1A
	internal bool bSimpleAssembly; // 0x1B
	internal SerObjectInfoCache cache; // 0x1C
	internal string[] wireMemberNames; // 0x20
	internal Type[] wireMemberTypes; // 0x24
	private int lastPosition; // 0x28
	internal ISerializationSurrogate serializationSurrogate; // 0x2C
	internal StreamingContext context; // 0x30
	internal List<Type> memberTypesList; // 0x38
	internal SerObjectInfoInit serObjectInfoInit; // 0x3C
	internal IFormatterConverter formatterConverter; // 0x40

	// Methods

	// RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9
	internal void .ctor() { }

	// RVA: 0x4BA Offset: 0x4BA VA: 0x4BA
	internal void ObjectEnd() { }

	// RVA: 0x4BB Offset: 0x4BB VA: 0x4BB
	internal void PrepareForReuse() { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	internal static ReadObjectInfo Create(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	internal void Init(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	internal static ReadObjectInfo Create(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	internal void Init(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }

	// RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	private void InitReadConstructor(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context) { }

	// RVA: 0x4BC Offset: 0x4BC VA: 0x4BC
	private void InitSiRead() { }

	// RVA: 0x4BD Offset: 0x4BD VA: 0x4BD
	private void InitNoMembers() { }

	// RVA: 0x4BE Offset: 0x4BE VA: 0x4BE
	private void InitMemberInfo() { }

	// RVA: 0x3B6 Offset: 0x3B6 VA: 0x3B6
	internal MemberInfo GetMemberInfo(string name) { }

	// RVA: 0x3B7 Offset: 0x3B7 VA: 0x3B7
	internal Type GetType(string name) { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52
	internal void AddValue(string name, object value, ref SerializationInfo si, ref object[] memberData) { }

	// RVA: 0x22F Offset: 0x22F VA: 0x22F
	internal void InitDataStore(ref SerializationInfo si, ref object[] memberData) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void RecordFixup(long objectId, string name, long idRef) { }

	// RVA: 0x230 Offset: 0x230 VA: 0x230
	internal void PopulateObjectMembers(object obj, object[] memberData) { }

	// RVA: 0x3B8 Offset: 0x3B8 VA: 0x3B8
	private int Position(string name) { }

	// RVA: 0x94A Offset: 0x94A VA: 0x94A
	internal Type[] GetMemberTypes(string[] inMemberNames, Type objectType) { }

	// RVA: 0x3B9 Offset: 0x3B9 VA: 0x3B9
	internal Type GetMemberType(MemberInfo objMember) { }

	// RVA: 0x75E Offset: 0x75E VA: 0x75E
	private static ReadObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerObjectInfoInit // TypeDefIndex: 896
{
	// Fields
	internal Hashtable seenBeforeTable; // 0x8
	internal int objectInfoIdCount; // 0xC
	internal SerStack oiPool; // 0x10

	// Methods

	// RVA: 0x4BF Offset: 0x4BF VA: 0x4BF
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerObjectInfoCache // TypeDefIndex: 897
{
	// Fields
	internal string fullTypeName; // 0x8
	internal string assemblyString; // 0xC
	internal bool hasTypeForwardedFrom; // 0x10
	internal MemberInfo[] memberInfos; // 0x14
	internal string[] memberNames; // 0x18
	internal Type[] memberTypes; // 0x1C

	// Methods

	// RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	internal void .ctor(string typeName, string assemblyName, bool hasTypeForwardedFrom) { }

	// RVA: 0x353 Offset: 0x353 VA: 0x353
	internal void .ctor(Type type) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class TypeInformation // TypeDefIndex: 898
{
	// Fields
	private string fullTypeName; // 0x8
	private string assemblyString; // 0xC
	private bool hasTypeForwardedFrom; // 0x10

	// Properties
	internal string FullTypeName { get; }
	internal string AssemblyString { get; }
	internal bool HasTypeForwardedFrom { get; }

	// Methods

	// RVA: 0x764 Offset: 0x764 VA: 0x764
	internal string get_FullTypeName() { }

	// RVA: 0x765 Offset: 0x765 VA: 0x765
	internal string get_AssemblyString() { }

	// RVA: 0x766 Offset: 0x766 VA: 0x766
	internal bool get_HasTypeForwardedFrom() { }

	// RVA: 0xB8 Offset: 0xB8 VA: 0xB8
	internal void .ctor(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectReader // TypeDefIndex: 899
{
	// Fields
	internal Stream m_stream; // 0x8
	internal ISurrogateSelector m_surrogates; // 0xC
	internal StreamingContext m_context; // 0x10
	internal ObjectManager m_objectManager; // 0x18
	internal InternalFE formatterEnums; // 0x1C
	internal SerializationBinder m_binder; // 0x20
	internal long topId; // 0x28
	internal bool bSimpleAssembly; // 0x30
	internal object handlerObject; // 0x34
	internal object m_topObject; // 0x38
	internal Header[] headers; // 0x3C
	internal HeaderHandler handler; // 0x40
	internal SerObjectInfoInit serObjectInfoInit; // 0x44
	internal IFormatterConverter m_formatterConverter; // 0x48
	internal SerStack stack; // 0x4C
	private SerStack valueFixupStack; // 0x50
	internal object[] crossAppDomainArray; // 0x54
	private bool bFullDeserialization; // 0x58
	private bool bOldFormatDetected; // 0x59
	private IntSizedArray valTypeObjectIdTable; // 0x5C
	private NameCache typeCache; // 0x60
	private string previousAssemblyString; // 0x64
	private string previousName; // 0x68
	private Type previousType; // 0x6C

	// Properties
	private SerStack ValueFixupStack { get; }
	internal object TopObject { get; set; }

	// Methods

	// RVA: 0x759 Offset: 0x759 VA: 0x759
	private SerStack get_ValueFixupStack() { }

	// RVA: 0x75A Offset: 0x75A VA: 0x75A
	internal object get_TopObject() { }

	// RVA: 0x344 Offset: 0x344 VA: 0x344
	internal void set_TopObject(object value) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	internal void .ctor(Stream stream, ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder) { }

	// RVA: 0xAF Offset: 0xAF VA: 0xAF
	internal object Deserialize(HeaderHandler handler, __BinaryParser serParser, bool fCheck) { }

	// RVA: 0x3AD Offset: 0x3AD VA: 0x3AD
	private bool HasSurrogate(Type t) { }

	// RVA: 0x345 Offset: 0x345 VA: 0x345
	private void CheckSerializable(Type t) { }

	// RVA: 0x4B5 Offset: 0x4B5 VA: 0x4B5
	private void InitFullDeserialization() { }

	// RVA: 0x3AE Offset: 0x3AE VA: 0x3AE
	internal object CrossAppDomainArray(int index) { }

	// RVA: 0x3AF Offset: 0x3AF VA: 0x3AF
	internal ReadObjectInfo CreateReadObjectInfo(Type objectType) { }

	// RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	internal ReadObjectInfo CreateReadObjectInfo(Type objectType, string[] memberNames, Type[] memberTypes) { }

	// RVA: 0x346 Offset: 0x346 VA: 0x346
	internal void Parse(ParseRecord pr) { }

	// RVA: 0x227 Offset: 0x227 VA: 0x227
	private void ParseError(ParseRecord processing, ParseRecord onStack) { }

	// RVA: 0x347 Offset: 0x347 VA: 0x347
	private void ParseSerializedStreamHeader(ParseRecord pr) { }

	// RVA: 0x348 Offset: 0x348 VA: 0x348
	private void ParseSerializedStreamHeaderEnd(ParseRecord pr) { }

	// RVA: 0x349 Offset: 0x349 VA: 0x349
	private void ParseObject(ParseRecord pr) { }

	// RVA: 0x34A Offset: 0x34A VA: 0x34A
	private void ParseObjectEnd(ParseRecord pr) { }

	// RVA: 0x34B Offset: 0x34B VA: 0x34B
	private void ParseArray(ParseRecord pr) { }

	// RVA: 0x34C Offset: 0x34C VA: 0x34C
	private void NextRectangleMap(ParseRecord pr) { }

	// RVA: 0x34D Offset: 0x34D VA: 0x34D
	private void ParseArrayMember(ParseRecord pr) { }

	// RVA: 0x34E Offset: 0x34E VA: 0x34E
	private void ParseArrayMemberEnd(ParseRecord pr) { }

	// RVA: 0x34F Offset: 0x34F VA: 0x34F
	private void ParseMember(ParseRecord pr) { }

	// RVA: 0x350 Offset: 0x350 VA: 0x350
	private void ParseMemberEnd(ParseRecord pr) { }

	// RVA: 0x228 Offset: 0x228 VA: 0x228
	private void ParseString(ParseRecord pr, ParseRecord parentPr) { }

	// RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr) { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F
	private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr, bool bIsString) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal long GetId(long objectId) { }

	// RVA: 0x945 Offset: 0x945 VA: 0x945
	internal Type Bind(string assemblyString, string typeString) { }

	// RVA: 0x946 Offset: 0x946 VA: 0x946
	internal Type FastBindToType(string assemblyName, string typeName) { }

	// RVA: 0x75B Offset: 0x75B VA: 0x75B
	private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName) { }

	// RVA: 0x229 Offset: 0x229 VA: 0x229
	private static void GetSimplyNamedTypeFromAssembly(Assembly assm, string typeName, ref Type type) { }

	// RVA: 0x947 Offset: 0x947 VA: 0x947
	internal Type GetType(BinaryAssemblyInfo assemblyInfo, string name) { }

	// RVA: 0x22A Offset: 0x22A VA: 0x22A
	private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destAssembly, Type resolvedType) { }
}

// Namespace: 
internal class ObjectReader.TypeNAssembly // TypeDefIndex: 900
{
	// Fields
	public Type type; // 0x8
	public string assemblyName; // 0xC

	// Methods

	// RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
	public void .ctor() { }
}

// Namespace: 
internal sealed class ObjectReader.TopLevelAssemblyTypeResolver // TypeDefIndex: 901
{
	// Fields
	private Assembly m_topLevelAssembly; // 0x8

	// Methods

	// RVA: 0x351 Offset: 0x351 VA: 0x351
	public void .ctor(Assembly topLevelAssembly) { }

	// RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	public Type ResolveType(Assembly assembly, string simpleTypeName, bool ignoreCase) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectWriter // TypeDefIndex: 902
{
	// Fields
	private Queue m_objectQueue; // 0x8
	private ObjectIDGenerator m_idGenerator; // 0xC
	private int m_currentId; // 0x10
	private ISurrogateSelector m_surrogates; // 0x14
	private StreamingContext m_context; // 0x18
	private __BinaryWriter serWriter; // 0x20
	private SerializationObjectManager m_objectManager; // 0x24
	private long topId; // 0x28
	private string topName; // 0x30
	private Header[] headers; // 0x34
	private InternalFE formatterEnums; // 0x38
	private SerializationBinder m_binder; // 0x3C
	private SerObjectInfoInit serObjectInfoInit; // 0x40
	private IFormatterConverter m_formatterConverter; // 0x44
	internal object[] crossAppDomainArray; // 0x48
	private object previousObj; // 0x4C
	private long previousId; // 0x50
	private Type previousType; // 0x58
	private InternalPrimitiveTypeE previousCode; // 0x5C
	private Hashtable assemblyToIdTable; // 0x60
	private SerStack niPool; // 0x64

	// Properties
	internal SerializationObjectManager ObjectManager { get; }

	// Methods

	// RVA: 0x50 Offset: 0x50 VA: 0x50
	internal void .ctor(ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder) { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51
	internal void Serialize(object graph, Header[] inHeaders, __BinaryWriter serWriter, bool fCheck) { }

	// RVA: 0x75C Offset: 0x75C VA: 0x75C
	internal SerializationObjectManager get_ObjectManager() { }

	// RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string[] memberNames, Type[] memberTypes, object[] memberData, WriteObjectInfo[] memberObjectInfos) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	private void WriteMemberSetup(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string memberName, Type memberType, object memberData, WriteObjectInfo memberObjectInfo) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	private void WriteMembers(NameInfo memberNameInfo, NameInfo memberTypeNameInfo, object memberData, WriteObjectInfo objectInfo, NameInfo typeNameInfo, WriteObjectInfo memberObjectInfo) { }

	// RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	private void WriteArray(WriteObjectInfo objectInfo, NameInfo memberNameInfo, WriteObjectInfo memberObjectInfo) { }

	// RVA: 0xB4 Offset: 0xB4 VA: 0xB4
	private void WriteArrayMember(WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, object data) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	private void WriteRectangle(WriteObjectInfo objectInfo, int rank, int[] maxA, Array array, NameInfo arrayElemNameTypeInfo, int[] lowerBoundA) { }

	// RVA: 0x3B0 Offset: 0x3B0 VA: 0x3B0
	private object GetNext(out long objID) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, out bool isNew) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private long Schedule(object obj, bool assignUniqueIdToValueType, Type type) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, WriteObjectInfo objectInfo) { }

	// RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	private bool WriteKnownValueClass(NameInfo memberNameInfo, NameInfo typeNameInfo, object data) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	private void WriteObjectRef(NameInfo nameInfo, long objectId) { }

	// RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	private void WriteString(NameInfo memberNameInfo, NameInfo typeNameInfo, object stringObject) { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	private bool CheckForNull(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, object data) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private void WriteSerializedStreamHeader(long topId, long headerId) { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49
	private NameInfo TypeToNameInfo(Type type, WriteObjectInfo objectInfo, InternalPrimitiveTypeE code, NameInfo nameInfo) { }

	// RVA: 0x3B1 Offset: 0x3B1 VA: 0x3B1
	private NameInfo TypeToNameInfo(Type type) { }

	// RVA: 0x3B2 Offset: 0x3B2 VA: 0x3B2
	private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo) { }

	// RVA: 0x948 Offset: 0x948 VA: 0x948
	private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo, NameInfo nameInfo) { }

	// RVA: 0x22B Offset: 0x22B VA: 0x22B
	private void TypeToNameInfo(Type type, NameInfo nameInfo) { }

	// RVA: 0x3B3 Offset: 0x3B3 VA: 0x3B3
	private NameInfo MemberToNameInfo(string name) { }

	// RVA: 0x3B4 Offset: 0x3B4 VA: 0x3B4
	internal InternalPrimitiveTypeE ToCode(Type type) { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C
	private long GetAssemblyId(WriteObjectInfo objectInfo) { }

	// RVA: 0x3B5 Offset: 0x3B5 VA: 0x3B5
	private Type GetType(object obj) { }

	// RVA: 0x75D Offset: 0x75D VA: 0x75D
	private NameInfo GetNameInfo() { }

	// RVA: 0x949 Offset: 0x949 VA: 0x949
	private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want) { }

	// RVA: 0x352 Offset: 0x352 VA: 0x352
	private void PutNameInfo(NameInfo nameInfo) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class __BinaryParser // TypeDefIndex: 903
{
	// Fields
	internal ObjectReader objectReader; // 0x8
	internal Stream input; // 0xC
	internal long topId; // 0x10
	internal long headerId; // 0x18
	internal SizedArray objectMapIdTable; // 0x20
	internal SizedArray assemIdToAssemblyTable; // 0x24
	internal SerStack stack; // 0x28
	internal BinaryTypeEnum expectedType; // 0x2C
	internal object expectedTypeInformation; // 0x30
	internal ParseRecord PRS; // 0x34
	private BinaryAssemblyInfo systemAssemblyInfo; // 0x38
	private BinaryReader dataReader; // 0x3C
	private static Encoding encoding; // 0x0
	private SerStack opPool; // 0x40
	private BinaryObject binaryObject; // 0x44
	private BinaryObjectWithMap bowm; // 0x48
	private BinaryObjectWithMapTyped bowmt; // 0x4C
	internal BinaryObjectString objectString; // 0x50
	internal BinaryCrossAppDomainString crossAppDomainString; // 0x54
	internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x58
	private byte[] byteBuffer; // 0x5C
	internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x60
	internal MemberReference memberReference; // 0x64
	internal ObjectNull objectNull; // 0x68
	internal static MessageEnd messageEnd; // 0x4

	// Properties
	internal BinaryAssemblyInfo SystemAssemblyInfo { get; }
	internal SizedArray ObjectMapIdTable { get; }
	internal SizedArray AssemIdToAssemblyTable { get; }
	internal ParseRecord prs { get; }

	// Methods

	// RVA: 0x235 Offset: 0x235 VA: 0x235
	internal void .ctor(Stream stream, ObjectReader objectReader) { }

	// RVA: 0x76A Offset: 0x76A VA: 0x76A
	internal BinaryAssemblyInfo get_SystemAssemblyInfo() { }

	// RVA: 0x76B Offset: 0x76B VA: 0x76B
	internal SizedArray get_ObjectMapIdTable() { }

	// RVA: 0x76C Offset: 0x76C VA: 0x76C
	internal SizedArray get_AssemIdToAssemblyTable() { }

	// RVA: 0x76D Offset: 0x76D VA: 0x76D
	internal ParseRecord get_prs() { }

	// RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
	internal void Run() { }

	// RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
	internal void ReadBegin() { }

	// RVA: 0x4CC Offset: 0x4CC VA: 0x4CC
	internal void ReadEnd() { }

	// RVA: 0x76E Offset: 0x76E VA: 0x76E
	internal bool ReadBoolean() { }

	// RVA: 0x76F Offset: 0x76F VA: 0x76F
	internal byte ReadByte() { }

	// RVA: 0x3BD Offset: 0x3BD VA: 0x3BD
	internal byte[] ReadBytes(int length) { }

	// RVA: 0xBB Offset: 0xBB VA: 0xBB
	internal void ReadBytes(byte[] byteA, int offset, int size) { }

	// RVA: 0x770 Offset: 0x770 VA: 0x770
	internal char ReadChar() { }

	// RVA: 0x3BE Offset: 0x3BE VA: 0x3BE
	internal char[] ReadChars(int length) { }

	// RVA: 0x35D Offset: 0x35D VA: 0x35D
	internal Decimal ReadDecimal() { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	internal float ReadSingle() { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	internal double ReadDouble() { }

	// RVA: 0x771 Offset: 0x771 VA: 0x771
	internal short ReadInt16() { }

	// RVA: 0x772 Offset: 0x772 VA: 0x772
	internal int ReadInt32() { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55
	internal long ReadInt64() { }

	// RVA: 0x773 Offset: 0x773 VA: 0x773
	internal sbyte ReadSByte() { }

	// RVA: 0x774 Offset: 0x774 VA: 0x774
	internal string ReadString() { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56
	internal TimeSpan ReadTimeSpan() { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57
	internal DateTime ReadDateTime() { }

	// RVA: 0x775 Offset: 0x775 VA: 0x775
	internal ushort ReadUInt16() { }

	// RVA: 0x776 Offset: 0x776 VA: 0x776
	internal uint ReadUInt32() { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58
	internal ulong ReadUInt64() { }

	// RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
	internal void ReadSerializationHeaderRecord() { }

	// RVA: 0x35E Offset: 0x35E VA: 0x35E
	internal void ReadAssembly(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
	private void ReadObject() { }

	// RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
	internal void ReadCrossAppDomainMap() { }

	// RVA: 0x35F Offset: 0x35F VA: 0x35F
	internal void ReadObjectWithMap(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x360 Offset: 0x360 VA: 0x360
	private void ReadObjectWithMap(BinaryObjectWithMap record) { }

	// RVA: 0x361 Offset: 0x361 VA: 0x361
	internal void ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x362 Offset: 0x362 VA: 0x362
	private void ReadObjectWithMapTyped(BinaryObjectWithMapTyped record) { }

	// RVA: 0x363 Offset: 0x363 VA: 0x363
	private void ReadObjectString(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
	private void ReadMemberPrimitiveTyped() { }

	// RVA: 0x364 Offset: 0x364 VA: 0x364
	private void ReadArray(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x365 Offset: 0x365 VA: 0x365
	private void ReadArrayAsBytes(ParseRecord pr) { }

	// RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
	private void ReadMemberPrimitiveUnTyped() { }

	// RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
	private void ReadMemberReference() { }

	// RVA: 0x366 Offset: 0x366 VA: 0x366
	private void ReadObjectNull(BinaryHeaderEnum binaryHeaderEnum) { }

	// RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
	private void ReadMessageEnd() { }

	// RVA: 0x3BF Offset: 0x3BF VA: 0x3BF
	internal object ReadValue(InternalPrimitiveTypeE code) { }

	// RVA: 0x777 Offset: 0x777 VA: 0x777
	private ObjectProgress GetOp() { }

	// RVA: 0x367 Offset: 0x367 VA: 0x367
	private void PutOp(ObjectProgress op) { }

	// RVA: 0xEDE Offset: 0xEDE VA: 0xEDE
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ParseRecord // TypeDefIndex: 904
{
	// Fields
	internal static int parseRecordIdCount; // 0x0
	internal InternalParseTypeE PRparseTypeEnum; // 0x8
	internal InternalObjectTypeE PRobjectTypeEnum; // 0xC
	internal InternalArrayTypeE PRarrayTypeEnum; // 0x10
	internal InternalMemberTypeE PRmemberTypeEnum; // 0x14
	internal InternalMemberValueE PRmemberValueEnum; // 0x18
	internal InternalObjectPositionE PRobjectPositionEnum; // 0x1C
	internal string PRname; // 0x20
	internal string PRvalue; // 0x24
	internal object PRvarValue; // 0x28
	internal string PRkeyDt; // 0x2C
	internal Type PRdtType; // 0x30
	internal InternalPrimitiveTypeE PRdtTypeCode; // 0x34
	internal bool PRisEnum; // 0x38
	internal long PRobjectId; // 0x40
	internal long PRidRef; // 0x48
	internal string PRarrayElementTypeString; // 0x50
	internal Type PRarrayElementType; // 0x54
	internal bool PRisArrayVariant; // 0x58
	internal InternalPrimitiveTypeE PRarrayElementTypeCode; // 0x5C
	internal int PRrank; // 0x60
	internal int[] PRlengthA; // 0x64
	internal int[] PRpositionA; // 0x68
	internal int[] PRlowerBoundA; // 0x6C
	internal int[] PRupperBoundA; // 0x70
	internal int[] PRindexMap; // 0x74
	internal int PRmemberIndex; // 0x78
	internal int PRlinearlength; // 0x7C
	internal int[] PRrectangularMap; // 0x80
	internal bool PRisLowerBound; // 0x84
	internal long PRtopId; // 0x88
	internal long PRheaderId; // 0x90
	internal ReadObjectInfo PRobjectInfo; // 0x98
	internal bool PRisValueTypeFixup; // 0x9C
	internal object PRnewObj; // 0xA0
	internal object[] PRobjectA; // 0xA4
	internal PrimitiveArray PRprimitiveArray; // 0xA8
	internal bool PRisRegistered; // 0xAC
	internal object[] PRmemberData; // 0xB0
	internal SerializationInfo PRsi; // 0xB4
	internal int PRnullCount; // 0xB8

	// Methods

	// RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7
	internal void .ctor() { }

	// RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
	internal void Init() { }

	// RVA: 0xEDD Offset: 0xEDD VA: 0xEDD
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerStack // TypeDefIndex: 905
{
	// Fields
	internal object[] objects; // 0x8
	internal string stackId; // 0xC
	internal int top; // 0x10

	// Methods

	// RVA: 0x354 Offset: 0x354 VA: 0x354
	internal void .ctor(string stackId) { }

	// RVA: 0x355 Offset: 0x355 VA: 0x355
	internal void Push(object obj) { }

	// RVA: 0x75F Offset: 0x75F VA: 0x75F
	internal object Pop() { }

	// RVA: 0x4C0 Offset: 0x4C0 VA: 0x4C0
	internal void IncreaseCapacity() { }

	// RVA: 0x760 Offset: 0x760 VA: 0x760
	internal object Peek() { }

	// RVA: 0x761 Offset: 0x761 VA: 0x761
	internal object PeekPeek() { }

	// RVA: 0x762 Offset: 0x762 VA: 0x762
	internal bool IsEmpty() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[DefaultMemberAttribute] // RVA: 0x43F Offset: 0x43F VA: 0x43F
[Serializable]
internal sealed class SizedArray : ICloneable // TypeDefIndex: 906
{
	// Fields
	internal object[] objects; // 0x8
	internal object[] negObjects; // 0xC

	// Properties
	internal object Item { get; set; }

	// Methods

	// RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3
	internal void .ctor() { }

	// RVA: 0x358 Offset: 0x358 VA: 0x358
	internal void .ctor(int length) { }

	// RVA: 0x359 Offset: 0x359 VA: 0x359
	private void .ctor(SizedArray sizedArray) { }

	// RVA: 0x763 Offset: 0x763 VA: 0x763 Slot: 4
	public object Clone() { }

	// RVA: 0x3BB Offset: 0x3BB VA: 0x3BB
	internal object get_Item(int index) { }

	// RVA: 0x231 Offset: 0x231 VA: 0x231
	internal void set_Item(int index, object value) { }

	// RVA: 0x35A Offset: 0x35A VA: 0x35A
	internal void IncreaseCapacity(int index) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[DefaultMemberAttribute] // RVA: 0x440 Offset: 0x440 VA: 0x440
[Serializable]
internal sealed class IntSizedArray : ICloneable // TypeDefIndex: 907
{
	// Fields
	internal int[] objects; // 0x8
	internal int[] negObjects; // 0xC

	// Properties
	internal int Item { get; set; }

	// Methods

	// RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
	public void .ctor() { }

	// RVA: 0x332 Offset: 0x332 VA: 0x332
	private void .ctor(IntSizedArray sizedArray) { }

	// RVA: 0x756 Offset: 0x756 VA: 0x756 Slot: 4
	public object Clone() { }

	// RVA: 0x3AB Offset: 0x3AB VA: 0x3AB
	internal int get_Item(int index) { }

	// RVA: 0x223 Offset: 0x223 VA: 0x223
	internal void set_Item(int index, int value) { }

	// RVA: 0x333 Offset: 0x333 VA: 0x333
	internal void IncreaseCapacity(int index) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class NameCache // TypeDefIndex: 908
{
	// Fields
	private static ConcurrentDictionary<string, object> ht; // 0x0
	private string name; // 0x8

	// Methods

	// RVA: 0x3AC Offset: 0x3AC VA: 0x3AC
	internal object GetCachedValue(string name) { }

	// RVA: 0x33F Offset: 0x33F VA: 0x33F
	internal void SetCachedValue(object value) { }

	// RVA: 0x4AE Offset: 0x4AE VA: 0x4AE
	public void .ctor() { }

	// RVA: 0xEDB Offset: 0xEDB VA: 0xEDB
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ValueFixup // TypeDefIndex: 909
{
	// Fields
	internal ValueFixupEnum valueFixupEnum; // 0x8
	internal Array arrayObj; // 0xC
	internal int[] indexMap; // 0x10
	internal object header; // 0x14
	internal object memberObject; // 0x18
	internal static MemberInfo valueInfo; // 0x0
	internal ReadObjectInfo objectInfo; // 0x1C
	internal string memberName; // 0x20

	// Methods

	// RVA: 0x232 Offset: 0x232 VA: 0x232
	internal void .ctor(Array arrayObj, int[] indexMap) { }

	// RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	internal void .ctor(object memberObject, string memberName, ReadObjectInfo objectInfo) { }

	// RVA: 0x233 Offset: 0x233 VA: 0x233
	internal void Fixup(ParseRecord record, ParseRecord parent) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class InternalFE // TypeDefIndex: 910
{
	// Fields
	internal FormatterTypeStyle FEtypeFormat; // 0x8
	internal FormatterAssemblyStyle FEassemblyFormat; // 0xC
	internal TypeFilterLevel FEsecurityLevel; // 0x10
	internal InternalSerializerTypeE FEserializerTypeEnum; // 0x14

	// Methods

	// RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class NameInfo // TypeDefIndex: 911
{
	// Fields
	internal string NIFullName; // 0x8
	internal long NIobjectId; // 0x10
	internal long NIassemId; // 0x18
	internal InternalPrimitiveTypeE NIprimitiveTypeEnum; // 0x20
	internal Type NItype; // 0x24
	internal bool NIisSealed; // 0x28
	internal bool NIisArray; // 0x29
	internal bool NIisArrayItem; // 0x2A
	internal bool NItransmitTypeOnObject; // 0x2B
	internal bool NItransmitTypeOnMember; // 0x2C
	internal bool NIisParentTypeOnObject; // 0x2D
	internal InternalArrayTypeE NIarrayEnum; // 0x30
	private bool NIsealedStatusChecked; // 0x34

	// Properties
	public bool IsSealed { get; }
	public string NIname { get; set; }

	// Methods

	// RVA: 0x4AF Offset: 0x4AF VA: 0x4AF
	internal void .ctor() { }

	// RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0
	internal void Init() { }

	// RVA: 0x757 Offset: 0x757 VA: 0x757
	public bool get_IsSealed() { }

	// RVA: 0x758 Offset: 0x758 VA: 0x758
	public string get_NIname() { }

	// RVA: 0x340 Offset: 0x340 VA: 0x340
	public void set_NIname(string value) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class PrimitiveArray // TypeDefIndex: 912
{
	// Fields
	private InternalPrimitiveTypeE code; // 0x8
	private bool[] booleanA; // 0xC
	private char[] charA; // 0x10
	private double[] doubleA; // 0x14
	private short[] int16A; // 0x18
	private int[] int32A; // 0x1C
	private long[] int64A; // 0x20
	private sbyte[] sbyteA; // 0x24
	private float[] singleA; // 0x28
	private ushort[] uint16A; // 0x2C
	private uint[] uint32A; // 0x30
	private ulong[] uint64A; // 0x34

	// Methods

	// RVA: 0x22C Offset: 0x22C VA: 0x22C
	internal void .ctor(InternalPrimitiveTypeE code, Array array) { }

	// RVA: 0x22D Offset: 0x22D VA: 0x22D
	internal void Init(InternalPrimitiveTypeE code, Array array) { }

	// RVA: 0x22E Offset: 0x22E VA: 0x22E
	internal void SetValue(string value, int index) { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 913
{
	// Fields
	private object[] channelData; // 0x8

	// Properties
	public object[] ChannelData { get; }

	// Methods

	// RVA: 0x43D Offset: 0x43D VA: 0x43D
	public void .ctor() { }

	// RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7
	public void .ctor(object remoteChannelData) { }

	// RVA: 0x64E Offset: 0x64E VA: 0x64E Slot: 4
	public object[] get_ChannelData() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x441 Offset: 0x441 VA: 0x441
public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 914
{
	// Fields
	private string applicationUrl; // 0x10
	private Type obj_type; // 0x14

	// Properties
	public string ApplicationUrl { get; }
	public IContextAttribute[] ContextAttributes { get; }
	public Type ObjectType { get; }

	// Methods

	// RVA: 0x9F Offset: 0x9F VA: 0x9F
	public void .ctor(string typeName, string assemblyName, string appUrl) { }

	// RVA: 0x63C Offset: 0x63C VA: 0x63C
	public string get_ApplicationUrl() { }

	// RVA: 0x63D Offset: 0x63D VA: 0x63D
	public IContextAttribute[] get_ContextAttributes() { }

	// RVA: 0x63E Offset: 0x63E VA: 0x63E
	public Type get_ObjectType() { }

	// RVA: 0x63F Offset: 0x63F VA: 0x63F Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x442 Offset: 0x442 VA: 0x442
public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 915
{
	// Fields
	private Type obj_type; // 0x10

	// Properties
	public Type ObjectType { get; }

	// Methods

	// RVA: 0x1DF Offset: 0x1DF VA: 0x1DF
	public void .ctor(string typeName, string assemblyName) { }

	// RVA: 0x640 Offset: 0x640 VA: 0x640
	public Type get_ObjectType() { }

	// RVA: 0x641 Offset: 0x641 VA: 0x641 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 916
{
	// Fields
	private IMessageSink envoySinks; // 0x8

	// Properties
	public IMessageSink EnvoySinks { get; }

	// Methods

	// RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2
	public void .ctor(IMessageSink sinks) { }

	// RVA: 0x673 Offset: 0x673 VA: 0x673 Slot: 4
	public IMessageSink get_EnvoySinks() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x443 Offset: 0x443 VA: 0x443
public interface IChannelInfo // TypeDefIndex: 917
{
	// Properties
	public abstract object[] ChannelData { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] get_ChannelData() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x444 Offset: 0x444 VA: 0x444
public interface IEnvoyInfo // TypeDefIndex: 918
{
	// Properties
	public abstract IMessageSink EnvoySinks { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink get_EnvoySinks() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x445 Offset: 0x445 VA: 0x445
public interface IRemotingTypeInfo // TypeDefIndex: 919
{
	// Properties
	public abstract string TypeName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_TypeName() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool CanCastTo(Type fromType, object o) { }
}

// Namespace: System.Runtime.Remoting
internal abstract class Identity // TypeDefIndex: 920
{
	// Fields
	protected string _objectUri; // 0x8
	protected IMessageSink _channelSink; // 0xC
	protected IMessageSink _envoySink; // 0x10
	private DynamicPropertyCollection _clientDynamicProperties; // 0x14
	private DynamicPropertyCollection _serverDynamicProperties; // 0x18
	protected ObjRef _objRef; // 0x1C
	private bool _disposed; // 0x20

	// Properties
	public IMessageSink ChannelSink { get; set; }
	public IMessageSink EnvoySink { get; }
	public string ObjectUri { get; set; }
	public bool IsConnected { get; }
	public bool Disposed { get; set; }
	public DynamicPropertyCollection ClientDynamicProperties { get; }
	public bool HasServerDynamicSinks { get; }

	// Methods

	// RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
	public void .ctor(string objectUri) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x674 Offset: 0x674 VA: 0x674
	public IMessageSink get_ChannelSink() { }

	// RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4
	public void set_ChannelSink(IMessageSink value) { }

	// RVA: 0x675 Offset: 0x675 VA: 0x675
	public IMessageSink get_EnvoySink() { }

	// RVA: 0x676 Offset: 0x676 VA: 0x676
	public string get_ObjectUri() { }

	// RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5
	public void set_ObjectUri(string value) { }

	// RVA: 0x677 Offset: 0x677 VA: 0x677
	public bool get_IsConnected() { }

	// RVA: 0x678 Offset: 0x678 VA: 0x678
	public bool get_Disposed() { }

	// RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6
	public void set_Disposed(bool value) { }

	// RVA: 0x679 Offset: 0x679 VA: 0x679
	public DynamicPropertyCollection get_ClientDynamicProperties() { }

	// RVA: 0x67A Offset: 0x67A VA: 0x67A
	public bool get_HasServerDynamicSinks() { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49
	public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A
	public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }
}

// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity // TypeDefIndex: 921
{
	// Fields
	private WeakReference _proxyReference; // 0x24

	// Properties
	public MarshalByRefObject ClientProxy { get; set; }
	public string TargetUri { get; }

	// Methods

	// RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4
	public void .ctor(string objectUri, ObjRef objRef) { }

	// RVA: 0x661 Offset: 0x661 VA: 0x661
	public MarshalByRefObject get_ClientProxy() { }

	// RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
	public void set_ClientProxy(MarshalByRefObject value) { }

	// RVA: 0x361 Offset: 0x361 VA: 0x361 Slot: 4
	public override ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x662 Offset: 0x662 VA: 0x662
	public string get_TargetUri() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x446 Offset: 0x446 VA: 0x446
public class InternalRemotingServices // TypeDefIndex: 922
{
	// Fields
	private static Hashtable _soapAttributes; // 0xFFFFFFFF

	// Methods

	// RVA: 0x67B Offset: 0x67B VA: 0x67B
	public static SoapAttribute GetCachedSoapAttribute(object reflectionObject) { }

	// RVA: 0xEC0 Offset: 0xEC0 VA: 0xEC0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x447 Offset: 0x447 VA: 0x447
[Serializable]
public class ObjRef : IObjectReference, ISerializable // TypeDefIndex: 923
{
	// Fields
	private IChannelInfo channel_info; // 0x8
	private string uri; // 0xC
	private IRemotingTypeInfo typeInfo; // 0x10
	private IEnvoyInfo envoyInfo; // 0x14
	private int flags; // 0x18
	private Type _serverType; // 0x1C
	private static int MarshalledObjectRef; // 0x0
	private static int WellKnowObjectRef; // 0x4

	// Properties
	internal bool IsReferenceToWellKnow { get; }
	public virtual IChannelInfo ChannelInfo { get; }
	public virtual IEnvoyInfo EnvoyInfo { get; set; }
	public virtual IRemotingTypeInfo TypeInfo { get; set; }
	public virtual string URI { get; set; }
	internal Type ServerType { get; }

	// Methods

	// RVA: 0x472 Offset: 0x472 VA: 0x472
	public void .ctor() { }

	// RVA: 0x20E Offset: 0x20E VA: 0x20E
	internal void .ctor(string uri, IChannelInfo cinfo) { }

	// RVA: 0x92B Offset: 0x92B VA: 0x92B
	internal ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo) { }

	// RVA: 0x70A Offset: 0x70A VA: 0x70A
	internal byte[] SerializeType() { }

	// RVA: 0xA7 Offset: 0xA7 VA: 0xA7
	internal void .ctor(Type type, string url, object remoteChannelData) { }

	// RVA: 0x20F Offset: 0x20F VA: 0x20F
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x70B Offset: 0x70B VA: 0x70B
	internal bool get_IsReferenceToWellKnow() { }

	[ReliabilityContractAttribute] // RVA: 0x75B Offset: 0x75B VA: 0x75B
	// RVA: 0x70C Offset: 0x70C VA: 0x70C Slot: 6
	public virtual IChannelInfo get_ChannelInfo() { }

	// RVA: 0x70D Offset: 0x70D VA: 0x70D Slot: 7
	public virtual IEnvoyInfo get_EnvoyInfo() { }

	// RVA: 0x302 Offset: 0x302 VA: 0x302 Slot: 8
	public virtual void set_EnvoyInfo(IEnvoyInfo value) { }

	// RVA: 0x70E Offset: 0x70E VA: 0x70E Slot: 9
	public virtual IRemotingTypeInfo get_TypeInfo() { }

	// RVA: 0x303 Offset: 0x303 VA: 0x303 Slot: 10
	public virtual void set_TypeInfo(IRemotingTypeInfo value) { }

	// RVA: 0x70F Offset: 0x70F VA: 0x70F Slot: 11
	public virtual string get_URI() { }

	// RVA: 0x304 Offset: 0x304 VA: 0x304 Slot: 12
	public virtual void set_URI(string value) { }

	// RVA: 0x210 Offset: 0x210 VA: 0x210 Slot: 13
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x38A Offset: 0x38A VA: 0x38A Slot: 14
	public virtual object GetRealObject(StreamingContext context) { }

	// RVA: 0x473 Offset: 0x473 VA: 0x473
	internal void UpdateChannelInfo() { }

	// RVA: 0x710 Offset: 0x710 VA: 0x710
	internal Type get_ServerType() { }

	// RVA: 0xECA Offset: 0xECA VA: 0xECA
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x448 Offset: 0x448 VA: 0x448
public static class RemotingConfiguration // TypeDefIndex: 924
{
	// Fields
	private static string applicationID; // 0x0
	private static string applicationName; // 0x4
	private static string processGuid; // 0x8
	private static bool defaultConfigRead; // 0xC
	private static bool defaultDelayedConfigRead; // 0xD
	private static string _errorMode; // 0x10
	private static Hashtable wellKnownClientEntries; // 0x14
	private static Hashtable activatedClientEntries; // 0x18
	private static Hashtable wellKnownServiceEntries; // 0x1C
	private static Hashtable activatedServiceEntries; // 0x20
	private static Hashtable channelTemplates; // 0x24
	private static Hashtable clientProviderTemplates; // 0x28
	private static Hashtable serverProviderTemplates; // 0x2C

	// Properties
	public static string ApplicationName { get; set; }
	public static string ProcessId { get; }

	// Methods

	// RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7
	public static string get_ApplicationName() { }

	// RVA: 0x476 Offset: 0x476 VA: 0x476
	public static void set_ApplicationName(string value) { }

	// RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8
	public static string get_ProcessId() { }

	// RVA: 0xECC Offset: 0xECC VA: 0xECC
	internal static void LoadDefaultDelayedChannels() { }

	// RVA: 0x71B Offset: 0x71B VA: 0x71B
	public static bool IsActivationAllowed(Type svrType) { }

	// RVA: 0x71C Offset: 0x71C VA: 0x71C
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType) { }

	// RVA: 0x71D Offset: 0x71D VA: 0x71D
	public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType) { }

	// RVA: 0x477 Offset: 0x477 VA: 0x477
	public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry) { }

	// RVA: 0x478 Offset: 0x478 VA: 0x478
	public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry) { }

	// RVA: 0x479 Offset: 0x479 VA: 0x479
	public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry) { }

	// RVA: 0x47A Offset: 0x47A VA: 0x47A
	public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry) { }

	// RVA: 0x47B Offset: 0x47B VA: 0x47B
	internal static void RegisterChannelTemplate(ChannelData channel) { }

	// RVA: 0x47C Offset: 0x47C VA: 0x47C
	internal static void RegisterClientProviderTemplate(ProviderData prov) { }

	// RVA: 0x47D Offset: 0x47D VA: 0x47D
	internal static void RegisterServerProviderTemplate(ProviderData prov) { }

	// RVA: 0x30C Offset: 0x30C VA: 0x30C
	internal static void RegisterChannels(ArrayList channels, bool onlyDelayed) { }

	// RVA: 0x47E Offset: 0x47E VA: 0x47E
	internal static void RegisterTypes(ArrayList types) { }

	// RVA: 0x71E Offset: 0x71E VA: 0x71E
	public static bool CustomErrorsEnabled(bool isLocalRequest) { }

	// RVA: 0x47F Offset: 0x47F VA: 0x47F
	internal static void SetCustomErrorsMode(string mode) { }

	// RVA: 0xECD Offset: 0xECD VA: 0xECD
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting
internal class ConfigHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 925
{
	// Fields
	private ArrayList typeEntries; // 0x8
	private ArrayList channelInstances; // 0xC
	private ChannelData currentChannel; // 0x10
	private Stack currentProviderData; // 0x14
	private string currentClientUrl; // 0x18
	private string appName; // 0x1C
	private string currentXmlPath; // 0x20
	private bool onlyDelayedChannels; // 0x24

	// Methods

	// RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1
	public void .ctor(bool onlyDelayedChannels) { }

	// RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5
	private void ValidatePath(string element, string[] paths) { }

	// RVA: 0x362 Offset: 0x362 VA: 0x362
	private bool CheckPath(string path) { }

	// RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2 Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }

	// RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6 Slot: 8
	public void OnProcessingInstruction(string name, string text) { }

	// RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3 Slot: 10
	public void OnIgnorableWhitespace(string s) { }

	// RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8
	public void ParseElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4 Slot: 7
	public void OnEndElement(string name) { }

	// RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9
	private void ReadCustomProviderData(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
	private void ReadLifetine(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37
	private TimeSpan ParseTime(string s) { }

	// RVA: 0x1EA Offset: 0x1EA VA: 0x1EA
	private void ReadChannel(SmallXmlParser.IAttrList attrs, bool isTemplate) { }

	// RVA: 0xA6 Offset: 0xA6 VA: 0xA6
	private ProviderData ReadProvider(string name, SmallXmlParser.IAttrList attrs, bool isTemplate) { }

	// RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6
	private void ReadClientActivated(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
	private void ReadServiceActivated(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
	private void ReadClientWellKnown(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
	private void ReadServiceWellKnown(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x1EB Offset: 0x1EB VA: 0x1EB
	private void ReadInteropXml(SmallXmlParser.IAttrList attrs, bool isElement) { }

	// RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
	private void ReadPreload(SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x915 Offset: 0x915 VA: 0x915
	private string GetNotNull(SmallXmlParser.IAttrList attrs, string name) { }

	// RVA: 0x363 Offset: 0x363 VA: 0x363
	private string ExtractAssembly(ref string type) { }

	// RVA: 0x2BB Offset: 0x2BB VA: 0x2BB Slot: 9
	public void OnChars(string ch) { }

	// RVA: 0x2BC Offset: 0x2BC VA: 0x2BC Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }
}

// Namespace: System.Runtime.Remoting
internal class ChannelData // TypeDefIndex: 926
{
	// Fields
	internal string Ref; // 0x8
	internal string Type; // 0xC
	internal string Id; // 0x10
	internal string DelayLoadAsClientChannel; // 0x14
	private ArrayList _serverProviders; // 0x18
	private ArrayList _clientProviders; // 0x1C
	private Hashtable _customProperties; // 0x20

	// Properties
	internal ArrayList ServerProviders { get; }
	public ArrayList ClientProviders { get; }
	public Hashtable CustomProperties { get; }

	// Methods

	// RVA: 0x64B Offset: 0x64B VA: 0x64B
	internal ArrayList get_ServerProviders() { }

	// RVA: 0x64C Offset: 0x64C VA: 0x64C
	public ArrayList get_ClientProviders() { }

	// RVA: 0x64D Offset: 0x64D VA: 0x64D
	public Hashtable get_CustomProperties() { }

	// RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6
	public void CopyFrom(ChannelData other) { }

	// RVA: 0x43C Offset: 0x43C VA: 0x43C
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
internal class ProviderData // TypeDefIndex: 927
{
	// Fields
	internal string Ref; // 0x8
	internal string Type; // 0xC
	internal string Id; // 0x10
	internal Hashtable CustomProperties; // 0x14
	internal IList CustomData; // 0x18

	// Methods

	// RVA: 0x305 Offset: 0x305 VA: 0x305
	public void CopyFrom(ProviderData other) { }

	// RVA: 0x474 Offset: 0x474 VA: 0x474
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData // TypeDefIndex: 928
{
	// Methods

	// RVA: 0x44D Offset: 0x44D VA: 0x44D
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x449 Offset: 0x449 VA: 0x449
[Serializable]
public class RemotingException : SystemException // TypeDefIndex: 929
{
	// Methods

	// RVA: 0x480 Offset: 0x480 VA: 0x480
	public void .ctor() { }

	// RVA: 0x30D Offset: 0x30D VA: 0x30D
	public void .ctor(string message) { }

	// RVA: 0x214 Offset: 0x214 VA: 0x214
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x215 Offset: 0x215 VA: 0x215
	public void .ctor(string message, Exception InnerException) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x44A Offset: 0x44A VA: 0x44A
public static class RemotingServices // TypeDefIndex: 930
{
	// Fields
	private static Hashtable uri_hash; // 0x0
	private static BinaryFormatter _serializationFormatter; // 0x4
	private static BinaryFormatter _deserializationFormatter; // 0x8
	private static string app_id; // 0xC
	private static readonly object app_id_lock; // 0x10
	private static int next_id; // 0x14
	private static readonly MethodInfo FieldSetterMethod; // 0x18
	private static readonly MethodInfo FieldGetterMethod; // 0x1C

	// Methods

	// RVA: 0xECE Offset: 0xECE VA: 0xECE
	private static void .cctor() { }

	// RVA: 0xAB Offset: 0xAB VA: 0xAB
	internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args) { }

	// RVA: 0x390 Offset: 0x390 VA: 0x390
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method) { }

	// RVA: 0x71F Offset: 0x71F VA: 0x71F
	public static bool IsTransparentProxy(object proxy) { }

	// RVA: 0x391 Offset: 0x391 VA: 0x391
	internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg) { }

	[ComVisibleAttribute] // RVA: 0x75C Offset: 0x75C VA: 0x75C
	// RVA: 0x392 Offset: 0x392 VA: 0x392
	public static object Connect(Type classToProxy, string url) { }

	[ComVisibleAttribute] // RVA: 0x75D Offset: 0x75D VA: 0x75D
	// RVA: 0x92F Offset: 0x92F VA: 0x92F
	public static object Connect(Type classToProxy, string url, object data) { }

	// RVA: 0x720 Offset: 0x720 VA: 0x720
	public static Type GetServerTypeForUri(string URI) { }

	// RVA: 0x721 Offset: 0x721 VA: 0x721
	public static object Unmarshal(ObjRef objectRef) { }

	// RVA: 0x393 Offset: 0x393 VA: 0x393
	public static object Unmarshal(ObjRef objectRef, bool fRefine) { }

	// RVA: 0x722 Offset: 0x722 VA: 0x722
	public static ObjRef Marshal(MarshalByRefObject Obj) { }

	// RVA: 0x930 Offset: 0x930 VA: 0x930
	public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType) { }

	// RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9
	private static string NewUri() { }

	[ReliabilityContractAttribute] // RVA: 0x75E Offset: 0x75E VA: 0x75E
	// RVA: 0x723 Offset: 0x723 VA: 0x723
	public static RealProxy GetRealProxy(object proxy) { }

	// RVA: 0x724 Offset: 0x724 VA: 0x724
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg) { }

	// RVA: 0x931 Offset: 0x931 VA: 0x931
	internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature) { }

	// RVA: 0x932 Offset: 0x932 VA: 0x932
	private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature) { }

	// RVA: 0x216 Offset: 0x216 VA: 0x216
	public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context) { }

	// RVA: 0x725 Offset: 0x725 VA: 0x725
	public static bool IsOneWay(MethodBase method) { }

	// RVA: 0x394 Offset: 0x394 VA: 0x394
	internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes) { }

	// RVA: 0x933 Offset: 0x933 VA: 0x933
	internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes) { }

	// RVA: 0x726 Offset: 0x726 VA: 0x726
	internal static object CreateClientProxy(WellKnownClientTypeEntry entry) { }

	// RVA: 0x395 Offset: 0x395 VA: 0x395
	internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes) { }

	// RVA: 0x727 Offset: 0x727 VA: 0x727
	internal static Identity GetIdentityForUri(string uri) { }

	// RVA: 0x728 Offset: 0x728 VA: 0x728
	private static string RemoveAppNameFromUri(string uri) { }

	// RVA: 0x934 Offset: 0x934 VA: 0x934
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy) { }

	// RVA: 0x935 Offset: 0x935 VA: 0x935
	private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri) { }

	// RVA: 0x729 Offset: 0x729 VA: 0x729
	internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType) { }

	// RVA: 0x936 Offset: 0x936 VA: 0x936
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri) { }

	// RVA: 0x937 Offset: 0x937 VA: 0x937
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode) { }

	// RVA: 0x481 Offset: 0x481 VA: 0x481
	private static void RegisterServerIdentity(ServerIdentity identity) { }

	// RVA: 0x396 Offset: 0x396 VA: 0x396
	internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy) { }

	// RVA: 0x397 Offset: 0x397 VA: 0x397
	internal static object GetRemoteObject(ObjRef objRef, Type proxyType) { }

	// RVA: 0x72A Offset: 0x72A VA: 0x72A
	internal static byte[] SerializeCallData(object obj) { }

	// RVA: 0x72B Offset: 0x72B VA: 0x72B
	internal static object DeserializeCallData(byte[] array) { }

	// RVA: 0x72C Offset: 0x72C VA: 0x72C
	internal static byte[] SerializeExceptionData(Exception ex) { }

	// RVA: 0xECF Offset: 0xECF VA: 0xECF
	private static void RegisterInternalChannels() { }

	// RVA: 0x482 Offset: 0x482 VA: 0x482
	internal static void DisposeIdentity(Identity ident) { }

	// RVA: 0x72D Offset: 0x72D VA: 0x72D
	internal static Identity GetMessageTargetIdentity(IMessage msg) { }

	// RVA: 0x30E Offset: 0x30E VA: 0x30E
	internal static void SetMessageTargetIdentity(IMessage msg, Identity ident) { }

	// RVA: 0x938 Offset: 0x938 VA: 0x938
	internal static bool UpdateOutArgObject(ParameterInfo pi, object local, object remote) { }

	// RVA: 0x72E Offset: 0x72E VA: 0x72E
	private static string GetNormalizedUri(string uri) { }
}

// Namespace: 
[Serializable]
private class RemotingServices.CACD // TypeDefIndex: 931
{
	// Fields
	public object d; // 0x8
	public object c; // 0xC

	// Methods

	// RVA: 0x483 Offset: 0x483 VA: 0x483
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity // TypeDefIndex: 932
{
	// Fields
	protected Type _objectType; // 0x24
	protected MarshalByRefObject _serverObject; // 0x28
	protected IMessageSink _serverSink; // 0x2C
	protected Context _context; // 0x30
	protected Lease _lease; // 0x34

	// Properties
	public Type ObjectType { get; }
	public Lease Lease { get; }
	public Context Context { get; set; }

	// Methods

	// RVA: 0xAB Offset: 0xAB VA: 0xAB
	public void .ctor(string objectUri, Context context, Type objectType) { }

	// RVA: 0x72F Offset: 0x72F VA: 0x72F
	public Type get_ObjectType() { }

	// RVA: 0x30F Offset: 0x30F VA: 0x30F
	public void StartTrackingLifetime(ILease lease) { }

	// RVA: 0x484 Offset: 0x484 VA: 0x484 Slot: 5
	public virtual void OnLifetimeExpired() { }

	// RVA: 0x398 Offset: 0x398 VA: 0x398 Slot: 4
	public override ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x217 Offset: 0x217 VA: 0x217
	public void AttachServerObject(MarshalByRefObject serverObject, Context context) { }

	// RVA: 0x730 Offset: 0x730 VA: 0x730
	public Lease get_Lease() { }

	// RVA: 0x731 Offset: 0x731 VA: 0x731
	public Context get_Context() { }

	// RVA: 0x310 Offset: 0x310 VA: 0x310
	public void set_Context(Context value) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x485 Offset: 0x485 VA: 0x485
	protected void DisposeServerObject() { }
}

// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 933
{
	// Fields
	private MarshalByRefObject _targetThis; // 0x38

	// Methods

	// RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3
	public void .ctor(string objectUri, Type objectType) { }

	// RVA: 0x660 Offset: 0x660 VA: 0x660
	public MarshalByRefObject GetServerObject() { }

	// RVA: 0x2AF Offset: 0x2AF VA: 0x2AF
	public void SetClientProxy(MarshalByRefObject obj) { }

	// RVA: 0x441 Offset: 0x441 VA: 0x441 Slot: 5
	public override void OnLifetimeExpired() { }

	// RVA: 0x360 Offset: 0x360 VA: 0x360 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: 0x914 Offset: 0x914 VA: 0x914 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 934
{
	// Methods

	// RVA: 0xAD Offset: 0xAD VA: 0xAD
	public void .ctor(string objectUri, Context context, Type objectType) { }

	// RVA: 0x732 Offset: 0x732 VA: 0x732
	public MarshalByRefObject GetServerObject() { }

	// RVA: 0x39A Offset: 0x39A VA: 0x39A Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: 0x93A Offset: 0x93A VA: 0x93A Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 935
{
	// Methods

	// RVA: 0xAC Offset: 0xAC VA: 0xAC
	public void .ctor(string objectUri, Context context, Type objectType) { }

	// RVA: 0x399 Offset: 0x399 VA: 0x399 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }

	// RVA: 0x939 Offset: 0x939 VA: 0x939 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class DisposerReplySink : IMessageSink // TypeDefIndex: 936
{
	// Fields
	private IMessageSink _next; // 0x8
	private IDisposable _disposable; // 0xC

	// Methods

	// RVA: 0x1ED Offset: 0x1ED VA: 0x1ED
	public void .ctor(IMessageSink next, IDisposable disposable) { }

	// RVA: 0x36C Offset: 0x36C VA: 0x36C Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x91C Offset: 0x91C VA: 0x91C Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x44B Offset: 0x44B VA: 0x44B
public class SoapServices // TypeDefIndex: 937
{
	// Fields
	private static Hashtable _xmlTypes; // 0x0
	private static Hashtable _xmlElements; // 0x4
	private static Hashtable _soapActions; // 0x8
	private static Hashtable _soapActionsMethods; // 0xC
	private static Hashtable _typeInfos; // 0x10

	// Properties
	public static string XmlNsForClrTypeWithAssembly { get; }
	public static string XmlNsForClrTypeWithNs { get; }
	public static string XmlNsForClrTypeWithNsAndAssembly { get; }

	// Methods

	// RVA: 0x1FA Offset: 0x1FA VA: 0x1FA
	public static string get_XmlNsForClrTypeWithAssembly() { }

	// RVA: 0x1FB Offset: 0x1FB VA: 0x1FB
	public static string get_XmlNsForClrTypeWithNs() { }

	// RVA: 0x1FC Offset: 0x1FC VA: 0x1FC
	public static string get_XmlNsForClrTypeWithNsAndAssembly() { }

	// RVA: 0x39B Offset: 0x39B VA: 0x39B
	public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName) { }

	// RVA: 0x39C Offset: 0x39C VA: 0x39C
	private static string GetNameKey(string name, string namspace) { }

	// RVA: 0x733 Offset: 0x733 VA: 0x733
	private static string GetAssemblyName(MethodBase mb) { }

	// RVA: 0x93B Offset: 0x93B VA: 0x93B
	public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace) { }

	// RVA: 0x734 Offset: 0x734 VA: 0x734
	public static string GetXmlNamespaceForMethodCall(MethodBase mb) { }

	// RVA: 0x735 Offset: 0x735 VA: 0x735
	public static string GetXmlNamespaceForMethodResponse(MethodBase mb) { }

	// RVA: 0x93C Offset: 0x93C VA: 0x93C
	public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace) { }

	// RVA: 0x487 Offset: 0x487 VA: 0x487
	public static void PreLoad(Assembly assembly) { }

	// RVA: 0x488 Offset: 0x488 VA: 0x488
	public static void PreLoad(Type type) { }

	// RVA: 0x218 Offset: 0x218 VA: 0x218
	public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type) { }

	// RVA: 0x219 Offset: 0x219 VA: 0x219
	public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type) { }

	// RVA: 0x736 Offset: 0x736 VA: 0x736
	private static string EncodeNs(string ns) { }

	// RVA: 0xED1 Offset: 0xED1 VA: 0xED1
	private static void .cctor() { }
}

// Namespace: 
private class SoapServices.TypeInfo // TypeDefIndex: 938
{
	// Fields
	public Hashtable Attributes; // 0x8
	public Hashtable Elements; // 0xC

	// Methods

	// RVA: 0x489 Offset: 0x489 VA: 0x489
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x44C Offset: 0x44C VA: 0x44C
public class TypeEntry // TypeDefIndex: 939
{
	// Fields
	private string assembly_name; // 0x8
	private string type_name; // 0xC

	// Properties
	public string AssemblyName { get; set; }
	public string TypeName { get; set; }

	// Methods

	// RVA: 0x48A Offset: 0x48A VA: 0x48A
	protected void .ctor() { }

	// RVA: 0x737 Offset: 0x737 VA: 0x737
	public string get_AssemblyName() { }

	// RVA: 0x313 Offset: 0x313 VA: 0x313
	public void set_AssemblyName(string value) { }

	// RVA: 0x738 Offset: 0x738 VA: 0x738
	public string get_TypeName() { }

	// RVA: 0x314 Offset: 0x314 VA: 0x314
	public void set_TypeName(string value) { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 940
{
	// Fields
	private string serverType; // 0x8
	private string[] serverHierarchy; // 0xC
	private string[] interfacesImplemented; // 0x10

	// Properties
	public string TypeName { get; }

	// Methods

	// RVA: 0x315 Offset: 0x315 VA: 0x315
	public void .ctor(Type type) { }

	// RVA: 0x739 Offset: 0x739 VA: 0x739 Slot: 4
	public string get_TypeName() { }

	// RVA: 0x93D Offset: 0x93D VA: 0x93D Slot: 5
	public bool CanCastTo(Type fromType, object o) { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x44D Offset: 0x44D VA: 0x44D
public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 941
{
	// Fields
	private Type obj_type; // 0x10
	private string obj_url; // 0x14
	private string app_url; // 0x18

	// Properties
	public string ApplicationUrl { get; }
	public Type ObjectType { get; }
	public string ObjectUrl { get; }

	// Methods

	// RVA: 0xAE Offset: 0xAE VA: 0xAE
	public void .ctor(string typeName, string assemblyName, string objectUrl) { }

	// RVA: 0x73A Offset: 0x73A VA: 0x73A
	public string get_ApplicationUrl() { }

	// RVA: 0x73B Offset: 0x73B VA: 0x73B
	public Type get_ObjectType() { }

	// RVA: 0x73C Offset: 0x73C VA: 0x73C
	public string get_ObjectUrl() { }

	// RVA: 0x73D Offset: 0x73D VA: 0x73D Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x44E Offset: 0x44E VA: 0x44E
[Serializable]
public enum WellKnownObjectMode // TypeDefIndex: 942
{
	// Fields
	public int value__; // 0x0
	public const WellKnownObjectMode Singleton = 1;
	public const WellKnownObjectMode SingleCall = 2;
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0x44F Offset: 0x44F VA: 0x44F
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 943
{
	// Fields
	private Type obj_type; // 0x10
	private string obj_uri; // 0x14
	private WellKnownObjectMode obj_mode; // 0x18

	// Properties
	public WellKnownObjectMode Mode { get; }
	public Type ObjectType { get; }
	public string ObjectUri { get; }

	// Methods

	// RVA: 0x4C Offset: 0x4C VA: 0x4C
	public void .ctor(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode) { }

	// RVA: 0x73E Offset: 0x73E VA: 0x73E
	public WellKnownObjectMode get_Mode() { }

	// RVA: 0x73F Offset: 0x73F VA: 0x73F
	public Type get_ObjectType() { }

	// RVA: 0x740 Offset: 0x740 VA: 0x740
	public string get_ObjectUri() { }

	// RVA: 0x741 Offset: 0x741 VA: 0x741 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting.Services
[ComVisibleAttribute] // RVA: 0x450 Offset: 0x450 VA: 0x450
public interface ITrackingHandler // TypeDefIndex: 944
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void DisconnectedObject(object obj) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void MarshaledObject(object obj, ObjRef or) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void UnmarshaledObject(object obj, ObjRef or) { }
}

// Namespace: System.Runtime.Remoting.Services
[ComVisibleAttribute] // RVA: 0x451 Offset: 0x451 VA: 0x451
public class TrackingServices // TypeDefIndex: 945
{
	// Fields
	private static ArrayList _handlers; // 0xFFFFFFFF

	// Methods

	// RVA: 0x311 Offset: 0x311 VA: 0x311
	internal static void NotifyMarshaledObject(object obj, ObjRef or) { }

	// RVA: 0x312 Offset: 0x312 VA: 0x312
	internal static void NotifyUnmarshaledObject(object obj, ObjRef or) { }

	// RVA: 0x486 Offset: 0x486 VA: 0x486
	internal static void NotifyDisconnectedObject(object obj) { }

	// RVA: 0xED0 Offset: 0xED0 VA: 0xED0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Proxies
[AttributeUsageAttribute] // RVA: 0x452 Offset: 0x452 VA: 0x452
[ComVisibleAttribute] // RVA: 0x452 Offset: 0x452 VA: 0x452
public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 946
{
	// Methods

	// RVA: 0x38B Offset: 0x38B VA: 0x38B Slot: 6
	public virtual MarshalByRefObject CreateInstance(Type serverType) { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47 Slot: 7
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext) { }

	[ComVisibleAttribute] // RVA: 0x75F Offset: 0x75F VA: 0x75F
	// RVA: 0x306 Offset: 0x306 VA: 0x306 Slot: 4
	public void GetPropertiesForNewContext(IConstructionCallMessage msg) { }

	[ComVisibleAttribute] // RVA: 0x760 Offset: 0x760 VA: 0x760
	// RVA: 0x92C Offset: 0x92C VA: 0x92C Slot: 5
	public bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy // TypeDefIndex: 947
{
	// Fields
	public RealProxy _rp; // 0x8
	private RuntimeRemoteClassHandle _class; // 0xC
	private bool _custom_type_info; // 0x10

	// Properties
	private bool IsContextBoundObject { get; }
	private Context TargetContext { get; }

	// Methods

	// RVA: 0x717 Offset: 0x717 VA: 0x717
	internal RuntimeType GetProxyType() { }

	// RVA: 0x718 Offset: 0x718 VA: 0x718
	private bool get_IsContextBoundObject() { }

	// RVA: 0x719 Offset: 0x719 VA: 0x719
	private Context get_TargetContext() { }

	// RVA: 0x71A Offset: 0x71A VA: 0x71A
	private bool InCurrentContext() { }

	// RVA: 0x92E Offset: 0x92E VA: 0x92E
	internal object LoadRemoteFieldNew(IntPtr classPtr, IntPtr fieldPtr) { }

	// RVA: 0xAA Offset: 0xAA VA: 0xAA
	internal void StoreRemoteField(IntPtr classPtr, IntPtr fieldPtr, object arg) { }
}

// Namespace: System.Runtime.Remoting.Proxies
[ComVisibleAttribute] // RVA: 0x453 Offset: 0x453 VA: 0x453
public abstract class RealProxy // TypeDefIndex: 948
{
	// Fields
	private Type class_to_proxy; // 0x8
	internal Context _targetContext; // 0xC
	internal MarshalByRefObject _server; // 0x10
	private int _targetDomainId; // 0x14
	internal string _targetUri; // 0x18
	internal Identity _objectIdentity; // 0x1C
	private object _objTP; // 0x20
	private object _stubData; // 0x24

	// Properties
	internal Identity ObjectIdentity { get; set; }

	// Methods

	// RVA: 0x307 Offset: 0x307 VA: 0x307
	protected void .ctor(Type classToProxy) { }

	// RVA: 0x211 Offset: 0x211 VA: 0x211
	internal void .ctor(Type classToProxy, ClientIdentity identity) { }

	// RVA: 0xA8 Offset: 0xA8 VA: 0xA8
	protected void .ctor(Type classToProxy, IntPtr stub, object stubData) { }

	// RVA: 0x711 Offset: 0x711 VA: 0x711
	private static Type InternalGetProxyType(object transparentProxy) { }

	// RVA: 0x712 Offset: 0x712 VA: 0x712
	public Type GetProxiedType() { }

	// RVA: 0x212 Offset: 0x212 VA: 0x212 Slot: 4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x713 Offset: 0x713 VA: 0x713
	internal Identity get_ObjectIdentity() { }

	// RVA: 0x308 Offset: 0x308 VA: 0x308
	internal void set_ObjectIdentity(Identity value) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IMessage Invoke(IMessage msg) { }

	// RVA: 0xAA Offset: 0xAA VA: 0xAA
	internal static object PrivateInvoke(RealProxy rp, IMessage msg, out Exception exc, out object[] out_args) { }

	// RVA: 0x38C Offset: 0x38C VA: 0x38C Slot: 6
	internal virtual object InternalGetTransparentProxy(string className) { }

	// RVA: 0x714 Offset: 0x714 VA: 0x714 Slot: 7
	public virtual object GetTransparentProxy() { }

	// RVA: 0x309 Offset: 0x309 VA: 0x309
	protected void AttachServer(MarshalByRefObject s) { }

	// RVA: 0x30A Offset: 0x30A VA: 0x30A
	internal void SetTargetDomain(int domainId) { }

	// RVA: 0x715 Offset: 0x715 VA: 0x715
	internal object GetAppDomainTarget() { }

	// RVA: 0x38D Offset: 0x38D VA: 0x38D
	private static object[] ProcessResponse(IMethodReturnMessage mrm, MonoMethodMessage call) { }
}

// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 949
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x0
	private static MethodInfo _cache_GetHashCodeMethod; // 0x4
	private IMessageSink _sink; // 0x28
	private bool _hasEnvoySink; // 0x2C
	private ConstructionCall _ctorCall; // 0x30

	// Properties
	public string TypeName { get; }

	// Methods

	// RVA: 0x213 Offset: 0x213 VA: 0x213
	internal void .ctor(Type type, ClientIdentity identity) { }

	// RVA: 0xA9 Offset: 0xA9 VA: 0xA9
	internal void .ctor(Type type, string activationUrl, object[] activationAttributes) { }

	// RVA: 0x38E Offset: 0x38E VA: 0x38E Slot: 5
	public override IMessage Invoke(IMessage request) { }

	// RVA: 0x30B Offset: 0x30B VA: 0x30B
	internal void AttachIdentity(Identity identity) { }

	// RVA: 0x38F Offset: 0x38F VA: 0x38F
	internal IMessage ActivateRemoteObject(IMethodMessage request) { }

	// RVA: 0x716 Offset: 0x716 VA: 0x716 Slot: 8
	public string get_TypeName() { }

	// RVA: 0x92D Offset: 0x92D VA: 0x92D Slot: 9
	public bool CanCastTo(Type fromType, object o) { }

	// RVA: 0x475 Offset: 0x475 VA: 0x475 Slot: 1
	protected override void Finalize() { }

	// RVA: 0xECB Offset: 0xECB VA: 0xECB
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x454 Offset: 0x454 VA: 0x454
public interface ILease // TypeDefIndex: 950
{
	// Properties
	public abstract TimeSpan CurrentLeaseTime { get; }
	public abstract LeaseState CurrentState { get; }
	public abstract TimeSpan InitialLeaseTime { set; }
	public abstract TimeSpan RenewOnCallTime { get; set; }
	public abstract TimeSpan SponsorshipTimeout { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan get_CurrentLeaseTime() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract LeaseState get_CurrentState() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_InitialLeaseTime(TimeSpan value) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract TimeSpan get_RenewOnCallTime() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract TimeSpan Renew(TimeSpan renewalTime) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x455 Offset: 0x455 VA: 0x455
public interface ISponsor // TypeDefIndex: 951
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan Renewal(ILease lease) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 952
{
	// Fields
	private DateTime _leaseExpireTime; // 0x10
	private LeaseState _currentState; // 0x18
	private TimeSpan _initialLeaseTime; // 0x20
	private TimeSpan _renewOnCallTime; // 0x28
	private TimeSpan _sponsorshipTimeout; // 0x30
	private ArrayList _sponsors; // 0x38
	private Queue _renewingSponsors; // 0x3C
	private Lease.RenewalDelegate _renewalDelegate; // 0x40

	// Properties
	public TimeSpan CurrentLeaseTime { get; }
	public LeaseState CurrentState { get; }
	public TimeSpan InitialLeaseTime { set; }
	public TimeSpan RenewOnCallTime { get; set; }
	public TimeSpan SponsorshipTimeout { set; }

	// Methods

	// RVA: 0x44E Offset: 0x44E VA: 0x44E
	public void .ctor() { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53 Slot: 6
	public TimeSpan get_CurrentLeaseTime() { }

	// RVA: 0x67C Offset: 0x67C VA: 0x67C Slot: 7
	public LeaseState get_CurrentState() { }

	// RVA: 0x44F Offset: 0x44F VA: 0x44F
	public void Activate() { }

	// RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7 Slot: 8
	public void set_InitialLeaseTime(TimeSpan value) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54 Slot: 9
	public TimeSpan get_RenewOnCallTime() { }

	// RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8 Slot: 10
	public void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9 Slot: 11
	public void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38 Slot: 12
	public TimeSpan Renew(TimeSpan renewalTime) { }

	// RVA: 0x2CA Offset: 0x2CA VA: 0x2CA Slot: 13
	public void Unregister(ISponsor obj) { }

	// RVA: 0x450 Offset: 0x450 VA: 0x450
	internal void UpdateState() { }

	// RVA: 0x451 Offset: 0x451 VA: 0x451
	private void CheckNextSponsor() { }

	// RVA: 0x1EE Offset: 0x1EE VA: 0x1EE
	private void ProcessSponsorResponse(object state, bool timedOut) { }
}

// Namespace: 
private sealed class Lease.RenewalDelegate : MulticastDelegate // TypeDefIndex: 953
{
	// Methods

	// RVA: 0x1EF Offset: 0x1EF VA: 0x1EF
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39 Slot: 12
	public virtual TimeSpan Invoke(ILease lease) { }

	// RVA: 0xA7 Offset: 0xA7 VA: 0xA7 Slot: 13
	public virtual IAsyncResult BeginInvoke(ILease lease, AsyncCallback callback, object object) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A Slot: 14
	public virtual TimeSpan EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 954
{
	// Fields
	private ArrayList _objects; // 0x8
	private Timer _timer; // 0xC

	// Methods

	// RVA: 0x2CB Offset: 0x2CB VA: 0x2CB
	public void SetPollTime(TimeSpan timeSpan) { }

	// RVA: 0x2CC Offset: 0x2CC VA: 0x2CC
	public void TrackLifetime(ServerIdentity identity) { }

	// RVA: 0x452 Offset: 0x452 VA: 0x452
	public void StartManager() { }

	// RVA: 0x453 Offset: 0x453 VA: 0x453
	public void StopManager() { }

	// RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
	public void ManageLeases(object state) { }

	// RVA: 0x454 Offset: 0x454 VA: 0x454
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 955
{
	// Fields
	private IMessageSink _nextSink; // 0x8

	// Methods

	// RVA: 0x2CE Offset: 0x2CE VA: 0x2CE
	public void .ctor(IMessageSink nextSink) { }

	// RVA: 0x36D Offset: 0x36D VA: 0x36D Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x91D Offset: 0x91D VA: 0x91D Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x2CF Offset: 0x2CF VA: 0x2CF
	private void RenewLease(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x456 Offset: 0x456 VA: 0x456
[Serializable]
public enum LeaseState // TypeDefIndex: 956
{
	// Fields
	public int value__; // 0x0
	public const LeaseState Null = 0;
	public const LeaseState Initial = 1;
	public const LeaseState Active = 2;
	public const LeaseState Renewing = 3;
	public const LeaseState Expired = 4;
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0x457 Offset: 0x457 VA: 0x457
public sealed class LifetimeServices // TypeDefIndex: 957
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x0
	private static TimeSpan _leaseTime; // 0x8
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Properties
	public static TimeSpan LeaseManagerPollTime { get; set; }
	public static TimeSpan LeaseTime { get; set; }
	public static TimeSpan RenewOnCallTime { get; set; }
	public static TimeSpan SponsorshipTimeout { get; set; }

	// Methods

	// RVA: 0xEC1 Offset: 0xEC1 VA: 0xEC1
	private static void .cctor() { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public static TimeSpan get_LeaseManagerPollTime() { }

	// RVA: 0x455 Offset: 0x455 VA: 0x455
	public static void set_LeaseManagerPollTime(TimeSpan value) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public static TimeSpan get_LeaseTime() { }

	// RVA: 0x456 Offset: 0x456 VA: 0x456
	public static void set_LeaseTime(TimeSpan value) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public static TimeSpan get_RenewOnCallTime() { }

	// RVA: 0x457 Offset: 0x457 VA: 0x457
	public static void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public static TimeSpan get_SponsorshipTimeout() { }

	// RVA: 0x458 Offset: 0x458 VA: 0x458
	public static void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: 0x459 Offset: 0x459 VA: 0x459
	internal static void TrackLifetime(ServerIdentity identity) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x458 Offset: 0x458 VA: 0x458
public class Context // TypeDefIndex: 958
{
	// Fields
	private int domain_id; // 0x8
	private int context_id; // 0xC
	private UIntPtr static_data; // 0x10
	private UIntPtr data; // 0x14
	[ContextStaticAttribute] // RVA: 0x5A2 Offset: 0x5A2 VA: 0x5A2
	private static object[] local_slots; // 0x0
	private static IMessageSink default_server_context_sink; // 0x4
	private IMessageSink server_context_sink_chain; // 0x18
	private IMessageSink client_context_sink_chain; // 0x1C
	private List<IContextProperty> context_properties; // 0x20
	private static int global_count; // 0x8
	private LocalDataStoreHolder _localDataStore; // 0x24
	private static LocalDataStoreMgr _localDataStoreMgr; // 0xC
	private static DynamicPropertyCollection global_dynamic_properties; // 0x10
	private DynamicPropertyCollection context_dynamic_properties; // 0x28
	private ContextCallbackObject callback_object; // 0x2C

	// Properties
	public static Context DefaultContext { get; }
	public virtual int ContextID { get; }
	public virtual IContextProperty[] ContextProperties { get; }
	internal bool IsDefaultContext { get; }
	internal bool NeedsContextSink { get; }
	internal static bool HasGlobalDynamicSinks { get; }
	internal bool HasDynamicSinks { get; }
	internal bool HasExitSinks { get; }
	private LocalDataStore MyLocalStore { get; }

	// Methods

	// RVA: 0x442 Offset: 0x442 VA: 0x442
	private static void RegisterContext(Context ctx) { }

	// RVA: 0x443 Offset: 0x443 VA: 0x443
	private static void ReleaseContext(Context ctx) { }

	// RVA: 0x444 Offset: 0x444 VA: 0x444
	public void .ctor() { }

	// RVA: 0x445 Offset: 0x445 VA: 0x445 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4
	public static Context get_DefaultContext() { }

	// RVA: 0x663 Offset: 0x663 VA: 0x663 Slot: 4
	public virtual int get_ContextID() { }

	// RVA: 0x664 Offset: 0x664 VA: 0x664 Slot: 5
	public virtual IContextProperty[] get_ContextProperties() { }

	// RVA: 0x665 Offset: 0x665 VA: 0x665
	internal bool get_IsDefaultContext() { }

	// RVA: 0x666 Offset: 0x666 VA: 0x666
	internal bool get_NeedsContextSink() { }

	// RVA: 0x916 Offset: 0x916 VA: 0x916
	public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx) { }

	// RVA: 0x917 Offset: 0x917 VA: 0x917
	public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx) { }

	// RVA: 0x364 Offset: 0x364 VA: 0x364
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx) { }

	// RVA: 0xA0 Offset: 0xA0 VA: 0xA0
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5
	internal static bool get_HasGlobalDynamicSinks() { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x667 Offset: 0x667 VA: 0x667
	internal bool get_HasDynamicSinks() { }

	// RVA: 0x668 Offset: 0x668 VA: 0x668
	internal bool get_HasExitSinks() { }

	// RVA: 0x365 Offset: 0x365 VA: 0x365 Slot: 6
	public virtual IContextProperty GetProperty(string name) { }

	// RVA: 0x2BD Offset: 0x2BD VA: 0x2BD Slot: 7
	public virtual void SetProperty(IContextProperty prop) { }

	// RVA: 0x446 Offset: 0x446 VA: 0x446 Slot: 8
	public virtual void Freeze() { }

	// RVA: 0x669 Offset: 0x669 VA: 0x669 Slot: 3
	public override string ToString() { }

	// RVA: 0x66A Offset: 0x66A VA: 0x66A
	internal IMessageSink GetServerContextSinkChain() { }

	// RVA: 0x66B Offset: 0x66B VA: 0x66B
	internal IMessageSink GetClientContextSinkChain() { }

	// RVA: 0x918 Offset: 0x918 VA: 0x918
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute) { }

	// RVA: 0x366 Offset: 0x366 VA: 0x366
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject) { }

	// RVA: 0x66C Offset: 0x66C VA: 0x66C
	internal static Context SwitchToContext(Context newContext) { }

	// RVA: 0x66D Offset: 0x66D VA: 0x66D
	internal static Context CreateNewContext(IConstructionCallMessage msg) { }

	// RVA: 0x2BE Offset: 0x2BE VA: 0x2BE
	public void DoCallBack(CrossContextDelegate deleg) { }

	// RVA: 0x66E Offset: 0x66E VA: 0x66E
	private LocalDataStore get_MyLocalStore() { }

	// RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6
	public static LocalDataStoreSlot AllocateDataSlot() { }

	// RVA: 0x66F Offset: 0x66F VA: 0x66F
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name) { }

	// RVA: 0x447 Offset: 0x447 VA: 0x447
	public static void FreeNamedDataSlot(string name) { }

	// RVA: 0x670 Offset: 0x670 VA: 0x670
	public static LocalDataStoreSlot GetNamedDataSlot(string name) { }

	// RVA: 0x671 Offset: 0x671 VA: 0x671
	public static object GetData(LocalDataStoreSlot slot) { }

	// RVA: 0x2BF Offset: 0x2BF VA: 0x2BF
	public static void SetData(LocalDataStoreSlot slot, object data) { }

	// RVA: 0xEBF Offset: 0xEBF VA: 0xEBF
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 959
{
	// Fields
	private ArrayList _properties; // 0x8

	// Properties
	public bool HasProperties { get; }

	// Methods

	// RVA: 0x672 Offset: 0x672 VA: 0x672
	public bool get_HasProperties() { }

	// RVA: 0x369 Offset: 0x369 VA: 0x369
	public bool RegisterDynamicProperty(IDynamicProperty prop) { }

	// RVA: 0x36A Offset: 0x36A VA: 0x36A
	public bool UnregisterDynamicProperty(string name) { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async) { }

	// RVA: 0x36B Offset: 0x36B VA: 0x36B
	private int FindProperty(string name) { }

	// RVA: 0x44B Offset: 0x44B VA: 0x44B
	public void .ctor() { }
}

// Namespace: 
private class DynamicPropertyCollection.DynamicPropertyReg // TypeDefIndex: 960
{
	// Fields
	public IDynamicProperty Property; // 0x8
	public IDynamicMessageSink Sink; // 0xC

	// Methods

	// RVA: 0x44C Offset: 0x44C VA: 0x44C
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 961
{
	// Methods

	// RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
	public void DoCallBack(CrossContextDelegate deleg) { }

	// RVA: 0x448 Offset: 0x448 VA: 0x448
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 962
{
	// Methods

	// RVA: 0x367 Offset: 0x367 VA: 0x367 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x919 Offset: 0x919 VA: 0x919 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x449 Offset: 0x449 VA: 0x449
	public void .ctor() { }
}

// Namespace: 
private class CrossContextChannel.ContextRestoreSink : IMessageSink // TypeDefIndex: 963
{
	// Fields
	private IMessageSink _next; // 0x8
	private Context _context; // 0xC
	private IMessage _call; // 0x10

	// Methods

	// RVA: 0xA1 Offset: 0xA1 VA: 0xA1
	public void .ctor(IMessageSink next, Context context, IMessage call) { }

	// RVA: 0x368 Offset: 0x368 VA: 0x368 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x91A Offset: 0x91A VA: 0x91A Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x459 Offset: 0x459 VA: 0x459
public sealed class CrossContextDelegate : MulticastDelegate // TypeDefIndex: 964
{
	// Methods

	// RVA: 0x1EC Offset: 0x1EC VA: 0x1EC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x44A Offset: 0x44A VA: 0x44A Slot: 12
	public virtual void Invoke() { }

	// RVA: 0x91B Offset: 0x91B VA: 0x91B Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x45A Offset: 0x45A VA: 0x45A
public interface IContextAttribute // TypeDefIndex: 965
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetPropertiesForNewContext(IConstructionCallMessage msg) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x45B Offset: 0x45B VA: 0x45B
public interface IContextProperty // TypeDefIndex: 966
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Freeze(Context newContext) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool IsNewContextOK(Context newCtx) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x45C Offset: 0x45C VA: 0x45C
public interface IContributeClientContextSink // TypeDefIndex: 967
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetClientContextSink(IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x45D Offset: 0x45D VA: 0x45D
public interface IContributeDynamicSink // TypeDefIndex: 968
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDynamicMessageSink GetDynamicSink() { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x45E Offset: 0x45E VA: 0x45E
public interface IContributeEnvoySink // TypeDefIndex: 969
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x45F Offset: 0x45F VA: 0x45F
public interface IContributeObjectSink // TypeDefIndex: 970
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x460 Offset: 0x460 VA: 0x460
public interface IContributeServerContextSink // TypeDefIndex: 971
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetServerContextSink(IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x461 Offset: 0x461 VA: 0x461
public interface IDynamicMessageSink // TypeDefIndex: 972
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0x462 Offset: 0x462 VA: 0x462
public interface IDynamicProperty // TypeDefIndex: 973
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name() { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x463 Offset: 0x463 VA: 0x463
public sealed class ChannelServices // TypeDefIndex: 974
{
	// Fields
	private static ArrayList registeredChannels; // 0x0
	private static ArrayList delayedClientChannels; // 0x4
	private static CrossContextChannel _crossContextSink; // 0x8
	internal static string CrossContextUrl; // 0xC
	private static IList oldStartModeTypes; // 0x10

	// Properties
	internal static CrossContextChannel CrossContextChannel { get; }

	// Methods

	// RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2
	internal static CrossContextChannel get_CrossContextChannel() { }

	// RVA: 0x912 Offset: 0x912 VA: 0x912
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri) { }

	// RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri) { }

	[ObsoleteAttribute] // RVA: 0x761 Offset: 0x761 VA: 0x761
	// RVA: 0x43E Offset: 0x43E VA: 0x43E
	public static void RegisterChannel(IChannel chnl) { }

	// RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity) { }

	// RVA: 0x43F Offset: 0x43F VA: 0x43F
	internal static void RegisterChannelConfig(ChannelData channel) { }

	// RVA: 0x653 Offset: 0x653 VA: 0x653
	private static object CreateProvider(ProviderData prov) { }

	// RVA: 0x654 Offset: 0x654 VA: 0x654
	public static IMessage SyncDispatchMessage(IMessage msg) { }

	// RVA: 0x655 Offset: 0x655 VA: 0x655
	private static ReturnMessage CheckIncomingMessage(IMessage msg) { }

	// RVA: 0x35E Offset: 0x35E VA: 0x35E
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg) { }

	// RVA: 0x656 Offset: 0x656 VA: 0x656
	private static bool IsLocalCall(IMessage callMsg) { }

	// RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3
	internal static object[] GetCurrentChannelInfo() { }

	// RVA: 0xEBB Offset: 0xEBB VA: 0xEBB
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData // TypeDefIndex: 975
{
	// Fields
	private object _ContextID; // 0x8
	private int _DomainID; // 0xC
	private string _processGuid; // 0x10

	// Properties
	internal int DomainID { get; }
	internal string ProcessID { get; }

	// Methods

	// RVA: 0x2AA Offset: 0x2AA VA: 0x2AA
	internal void .ctor(int domainId) { }

	// RVA: 0x65A Offset: 0x65A VA: 0x65A
	internal int get_DomainID() { }

	// RVA: 0x65B Offset: 0x65B VA: 0x65B
	internal string get_ProcessID() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelSender, IChannelReceiver // TypeDefIndex: 976
{
	// Fields
	private static object s_lock; // 0xFFFFFFFF

	// Properties
	public virtual string ChannelName { get; }
	public virtual int ChannelPriority { get; }
	public virtual object ChannelData { get; }

	// Methods

	// RVA: 0xEBC Offset: 0xEBC VA: 0xEBC
	internal static void RegisterCrossAppDomainChannel() { }

	// RVA: 0x657 Offset: 0x657 VA: 0x657 Slot: 9
	public virtual string get_ChannelName() { }

	// RVA: 0x658 Offset: 0x658 VA: 0x658 Slot: 10
	public virtual int get_ChannelPriority() { }

	// RVA: 0x659 Offset: 0x659 VA: 0x659 Slot: 11
	public virtual object get_ChannelData() { }

	// RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9 Slot: 12
	public virtual void StartListening(object data) { }

	// RVA: 0xA5 Offset: 0xA5 VA: 0xA5 Slot: 13
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri) { }

	// RVA: 0x440 Offset: 0x440 VA: 0x440
	public void .ctor() { }

	// RVA: 0xEBD Offset: 0xEBD VA: 0xEBD
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Channels
[MonoTODOAttribute] // RVA: 0x464 Offset: 0x464 VA: 0x464
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 977
{
	// Fields
	private static Hashtable s_sinks; // 0x0
	private static MethodInfo processMessageMethod; // 0x4
	private int _domainID; // 0x8

	// Properties
	internal int TargetDomainId { get; }

	// Methods

	// RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
	internal void .ctor(int domainID) { }

	// RVA: 0x65C Offset: 0x65C VA: 0x65C
	internal static CrossAppDomainSink GetSink(int domainID) { }

	// RVA: 0x65D Offset: 0x65D VA: 0x65D
	internal int get_TargetDomainId() { }

	// RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2
	private static CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg) { }

	// RVA: 0x35F Offset: 0x35F VA: 0x35F Slot: 6
	public virtual IMessage SyncProcessMessage(IMessage msgRequest) { }

	// RVA: 0x913 Offset: 0x913 VA: 0x913 Slot: 7
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink) { }

	// RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
	public void SendAsyncMessage(object data) { }

	// RVA: 0xEBE Offset: 0xEBE VA: 0xEBE
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0x762 Offset: 0x762 VA: 0x762
	// RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
	private void <AsyncProcessMessage>b__10_0(object data) { }
}

// Namespace: 
private struct CrossAppDomainSink.ProcessMessageRes // TypeDefIndex: 978
{
	// Fields
	public byte[] arrResponse; // 0x0
	public CADMethodReturnMessage cadMrm; // 0x4
}

// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer // TypeDefIndex: 979
{
	// Methods

	// RVA: 0x35D Offset: 0x35D VA: 0x35D
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg) { }

	// RVA: 0x64F Offset: 0x64F VA: 0x64F
	internal static MemoryStream SerializeMessage(IMessage msg) { }

	// RVA: 0x650 Offset: 0x650 VA: 0x650
	internal static object DeserializeObjectSafe(byte[] mem) { }

	// RVA: 0x651 Offset: 0x651 VA: 0x651
	internal static MemoryStream SerializeObject(object obj) { }

	// RVA: 0x652 Offset: 0x652 VA: 0x652
	internal static object DeserializeObject(MemoryStream mem) { }
}

// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest // TypeDefIndex: 980
{
	// Fields
	internal IMessageSink ReplySink; // 0x8
	internal IMessage MsgRequest; // 0xC

	// Methods

	// RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1
	public void .ctor(IMessage msgRequest, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x465 Offset: 0x465 VA: 0x465
public interface IChannel // TypeDefIndex: 981
{
	// Properties
	public abstract string ChannelName { get; }
	public abstract int ChannelPriority { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_ChannelName() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_ChannelPriority() { }
}

// Namespace: System.Runtime.Remoting.Channels
[DefaultMemberAttribute] // RVA: 0x466 Offset: 0x466 VA: 0x466
[ComVisibleAttribute] // RVA: 0x466 Offset: 0x466 VA: 0x466
public interface IChannelDataStore // TypeDefIndex: 982
{}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x467 Offset: 0x467 VA: 0x467
public interface IChannelReceiver : IChannel // TypeDefIndex: 983
{
	// Properties
	public abstract object ChannelData { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_ChannelData() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void StartListening(object data) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x468 Offset: 0x468 VA: 0x468
public interface IChannelSender : IChannel // TypeDefIndex: 984
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x469 Offset: 0x469 VA: 0x469
public interface IClientChannelSinkProvider // TypeDefIndex: 985
{
	// Properties
	public abstract IClientChannelSinkProvider Next { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IClientChannelSinkProvider value) { }
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 986
{
	// Properties
	public abstract bool IsSecured { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_IsSecured(bool value) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x46A Offset: 0x46A VA: 0x46A
public interface IServerChannelSinkProvider // TypeDefIndex: 987
{
	// Properties
	public abstract IServerChannelSinkProvider Next { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IServerChannelSinkProvider value) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0x46B Offset: 0x46B VA: 0x46B
public class SinkProviderData // TypeDefIndex: 988
{
	// Fields
	private string sinkName; // 0x8
	private ArrayList children; // 0xC
	private Hashtable properties; // 0x10

	// Properties
	public IList Children { get; }
	public IDictionary Properties { get; }

	// Methods

	// RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
	public void .ctor(string name) { }

	// RVA: 0x65E Offset: 0x65E VA: 0x65E
	public IList get_Children() { }

	// RVA: 0x65F Offset: 0x65F VA: 0x65F
	public IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices // TypeDefIndex: 989
{
	// Fields
	private static IActivator _constructionActivator; // 0xFFFFFFFF

	// Properties
	private static IActivator ConstructionActivator { get; }

	// Methods

	// RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1
	private static IActivator get_ConstructionActivator() { }

	// RVA: 0x358 Offset: 0x358 VA: 0x358
	public static IMessage Activate(RemotingProxy proxy, ConstructionCall ctorCall) { }

	// RVA: 0x642 Offset: 0x642 VA: 0x642
	public static IMessage RemoteActivate(IConstructionCallMessage ctorCall) { }

	// RVA: 0x910 Offset: 0x910 VA: 0x910
	public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes) { }

	// RVA: 0x643 Offset: 0x643 VA: 0x643
	public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall) { }

	// RVA: 0x644 Offset: 0x644 VA: 0x644
	public static object CreateProxyForType(Type type) { }

	// RVA: 0x645 Offset: 0x645 VA: 0x645
	public static object AllocateUninitializedClassInstance(Type type) { }

	// RVA: 0x2A2 Offset: 0x2A2 VA: 0x2A2
	public static void EnableProxyActivation(Type type, bool enable) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 990
{
	// Fields
	private string _activationUrl; // 0x8
	private IActivator _next; // 0xC

	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0
	public void .ctor(string activationUrl, IActivator next) { }

	// RVA: 0x646 Offset: 0x646 VA: 0x646 Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x359 Offset: 0x359 VA: 0x359 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 991
{
	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x647 Offset: 0x647 VA: 0x647 Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x35A Offset: 0x35A VA: 0x35A Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }

	// RVA: 0x43B Offset: 0x43B VA: 0x43B
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator // TypeDefIndex: 992
{
	// Fields
	private IActivator m_NextActivator; // 0x8

	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x2A3 Offset: 0x2A3 VA: 0x2A3
	public void .ctor(IActivator next) { }

	// RVA: 0x648 Offset: 0x648 VA: 0x648 Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x35B Offset: 0x35B VA: 0x35B Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x46C Offset: 0x46C VA: 0x46C
public interface IActivator // TypeDefIndex: 993
{
	// Properties
	public abstract IActivator NextActivator { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IActivator get_NextActivator() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x46D Offset: 0x46D VA: 0x46D
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 994
{
	// Properties
	public abstract Type ActivationType { get; }
	public abstract string ActivationTypeName { get; }
	public abstract IActivator Activator { get; set; }
	public abstract object[] CallSiteActivationAttributes { get; }
	public abstract IList ContextProperties { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Type get_ActivationType() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_ActivationTypeName() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract IActivator get_Activator() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Activator(IActivator value) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract object[] get_CallSiteActivationAttributes() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IList get_ContextProperties() { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0x46E Offset: 0x46E VA: 0x46E
public interface IConstructionReturnMessage : IMethodReturnMessage, IMethodMessage, IMessage // TypeDefIndex: 995
{}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 996
{
	// Fields
	private IList _contextProperties; // 0x8

	// Methods

	// RVA: 0x2A4 Offset: 0x2A4 VA: 0x2A4
	public void .ctor(IList contextProperties) { }

	// RVA: 0x911 Offset: 0x911 VA: 0x911 Slot: 5
	public bool IsContextOK(Context ctx, IConstructionCallMessage ctor) { }

	// RVA: 0x2A5 Offset: 0x2A5 VA: 0x2A5 Slot: 4
	public void GetPropertiesForNewContext(IConstructionCallMessage ctor) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 997
{
	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x35C Offset: 0x35C VA: 0x35C Slot: 7
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }

	// RVA: 0x649 Offset: 0x649 VA: 0x649 Slot: 5
	public override object InitializeLifetimeService() { }

	// RVA: 0x64A Offset: 0x64A VA: 0x64A Slot: 6
	public IActivator get_NextActivator() { }
}

// Namespace: System.Runtime.Remoting.Metadata
[ComVisibleAttribute] // RVA: 0x46F Offset: 0x46F VA: 0x46F
public class SoapAttribute : Attribute // TypeDefIndex: 998
{
	// Fields
	private bool _useAttribute; // 0x8
	protected string ProtXmlNamespace; // 0xC
	protected object ReflectInfo; // 0x10

	// Properties
	public virtual bool UseAttribute { get; }
	public virtual string XmlNamespace { get; }

	// Methods

	// RVA: 0x46D Offset: 0x46D VA: 0x46D
	public void .ctor() { }

	// RVA: 0x6FD Offset: 0x6FD VA: 0x6FD Slot: 4
	public virtual bool get_UseAttribute() { }

	// RVA: 0x6FE Offset: 0x6FE VA: 0x6FE Slot: 5
	public virtual string get_XmlNamespace() { }

	// RVA: 0x2FE Offset: 0x2FE VA: 0x2FE Slot: 6
	internal virtual void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[ComVisibleAttribute] // RVA: 0x470 Offset: 0x470 VA: 0x470
[AttributeUsageAttribute] // RVA: 0x470 Offset: 0x470 VA: 0x470
public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 999
{
	// Fields
	private string _elementName; // 0x14
	private bool _isElement; // 0x18

	// Properties
	public string XmlElementName { get; }

	// Methods

	// RVA: 0x46E Offset: 0x46E VA: 0x46E
	public void .ctor() { }

	// RVA: 0x6FF Offset: 0x6FF VA: 0x6FF
	public string get_XmlElementName() { }

	// RVA: 0x700 Offset: 0x700 VA: 0x700
	public bool IsInteropXmlElement() { }

	// RVA: 0x2FF Offset: 0x2FF VA: 0x2FF Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0x471 Offset: 0x471 VA: 0x471
[ComVisibleAttribute] // RVA: 0x471 Offset: 0x471 VA: 0x471
public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 1000
{
	// Fields
	private string _responseElement; // 0x14
	private string _responseNamespace; // 0x18
	private string _returnElement; // 0x1C
	private string _soapAction; // 0x20
	private bool _useAttribute; // 0x24
	private string _namespace; // 0x28

	// Properties
	public override bool UseAttribute { get; }
	public override string XmlNamespace { get; }

	// Methods

	// RVA: 0x46F Offset: 0x46F VA: 0x46F
	public void .ctor() { }

	// RVA: 0x701 Offset: 0x701 VA: 0x701 Slot: 4
	public override bool get_UseAttribute() { }

	// RVA: 0x702 Offset: 0x702 VA: 0x702 Slot: 5
	public override string get_XmlNamespace() { }

	// RVA: 0x300 Offset: 0x300 VA: 0x300 Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[ComVisibleAttribute] // RVA: 0x472 Offset: 0x472 VA: 0x472
[AttributeUsageAttribute] // RVA: 0x472 Offset: 0x472 VA: 0x472
public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 1001
{
	// Methods

	// RVA: 0x470 Offset: 0x470 VA: 0x470
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Metadata
[ComVisibleAttribute] // RVA: 0x473 Offset: 0x473 VA: 0x473
[AttributeUsageAttribute] // RVA: 0x473 Offset: 0x473 VA: 0x473
public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 1002
{
	// Fields
	private bool _useAttribute; // 0x14
	private string _xmlElementName; // 0x18
	private string _xmlNamespace; // 0x1C
	private string _xmlTypeName; // 0x20
	private string _xmlTypeNamespace; // 0x24
	private bool _isType; // 0x28
	private bool _isElement; // 0x29

	// Properties
	public override bool UseAttribute { get; }
	public string XmlElementName { get; }
	public override string XmlNamespace { get; }
	public string XmlTypeName { get; }
	public string XmlTypeNamespace { get; }
	internal bool IsInteropXmlElement { get; }
	internal bool IsInteropXmlType { get; }

	// Methods

	// RVA: 0x471 Offset: 0x471 VA: 0x471
	public void .ctor() { }

	// RVA: 0x703 Offset: 0x703 VA: 0x703 Slot: 4
	public override bool get_UseAttribute() { }

	// RVA: 0x704 Offset: 0x704 VA: 0x704
	public string get_XmlElementName() { }

	// RVA: 0x705 Offset: 0x705 VA: 0x705 Slot: 5
	public override string get_XmlNamespace() { }

	// RVA: 0x706 Offset: 0x706 VA: 0x706
	public string get_XmlTypeName() { }

	// RVA: 0x707 Offset: 0x707 VA: 0x707
	public string get_XmlTypeNamespace() { }

	// RVA: 0x708 Offset: 0x708 VA: 0x708
	internal bool get_IsInteropXmlElement() { }

	// RVA: 0x709 Offset: 0x709 VA: 0x709
	internal bool get_IsInteropXmlType() { }

	// RVA: 0x301 Offset: 0x301 VA: 0x301 Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x474 Offset: 0x474 VA: 0x474
[Serializable]
public sealed class CallContext // TypeDefIndex: 1003
{
	// Methods

	// RVA: 0x45D Offset: 0x45D VA: 0x45D
	private void .ctor() { }

	// RVA: 0x692 Offset: 0x692 VA: 0x692
	internal static object SetCurrentCallContext(LogicalCallContext ctx) { }

	// RVA: 0x693 Offset: 0x693 VA: 0x693
	internal static LogicalCallContext SetLogicalCallContext(LogicalCallContext callCtx) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class IllogicalCallContext // TypeDefIndex: 1004
{
	// Fields
	private Hashtable m_Datastore; // 0x8
	private object m_HostContext; // 0xC

	// Properties
	private Hashtable Datastore { get; }
	internal object HostContext { get; set; }
	internal bool HasUserData { get; }

	// Methods

	// RVA: 0x6AB Offset: 0x6AB VA: 0x6AB
	private Hashtable get_Datastore() { }

	// RVA: 0x6AC Offset: 0x6AC VA: 0x6AC
	internal object get_HostContext() { }

	// RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3
	internal void set_HostContext(object value) { }

	// RVA: 0x6AD Offset: 0x6AD VA: 0x6AD
	internal bool get_HasUserData() { }

	// RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	public IllogicalCallContext CreateCopy() { }

	// RVA: 0x463 Offset: 0x463 VA: 0x463
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x475 Offset: 0x475 VA: 0x475
[Serializable]
public sealed class LogicalCallContext : ISerializable, ICloneable // TypeDefIndex: 1005
{
	// Fields
	private static Type s_callContextType; // 0x0
	private Hashtable m_Datastore; // 0x8
	private CallContextRemotingData m_RemotingData; // 0xC
	private CallContextSecurityData m_SecurityData; // 0x10
	private object m_HostContext; // 0x14
	private bool m_IsCorrelationMgr; // 0x18

	// Properties
	public bool HasInfo { get; }
	private bool HasUserData { get; }
	private Hashtable Datastore { get; }

	// Methods

	// RVA: 0x464 Offset: 0x464 VA: 0x464
	internal void .ctor() { }

	// RVA: 0x1FC Offset: 0x1FC VA: 0x1FC
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1FD Offset: 0x1FD VA: 0x1FD Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x6AF Offset: 0x6AF VA: 0x6AF Slot: 5
	public object Clone() { }

	// RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4
	internal void Merge(LogicalCallContext lc) { }

	// RVA: 0x6B0 Offset: 0x6B0 VA: 0x6B0
	public bool get_HasInfo() { }

	// RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	private bool get_HasUserData() { }

	// RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	private Hashtable get_Datastore() { }

	// RVA: 0xEC5 Offset: 0xEC5 VA: 0xEC5
	private static void .cctor() { }
}

// Namespace: 
internal struct LogicalCallContext.Reader // TypeDefIndex: 1006
{
	// Fields
	private LogicalCallContext m_ctx; // 0x0

	// Properties
	public bool IsNull { get; }
	public bool HasInfo { get; }

	// Methods

	// RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5
	public void .ctor(LogicalCallContext ctx) { }

	// RVA: 0x6B3 Offset: 0x6B3 VA: 0x6B3
	public bool get_IsNull() { }

	// RVA: 0x6B4 Offset: 0x6B4 VA: 0x6B4
	public bool get_HasInfo() { }

	// RVA: 0x6B5 Offset: 0x6B5 VA: 0x6B5
	public LogicalCallContext Clone() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextSecurityData : ICloneable // TypeDefIndex: 1007
{
	// Fields
	private IPrincipal _principal; // 0x8

	// Properties
	internal bool HasInfo { get; }

	// Methods

	// RVA: 0x697 Offset: 0x697 VA: 0x697
	internal bool get_HasInfo() { }

	// RVA: 0x698 Offset: 0x698 VA: 0x698 Slot: 4
	public object Clone() { }

	// RVA: 0x45F Offset: 0x45F VA: 0x45F
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 1008
{
	// Fields
	private string _logicalCallID; // 0x8

	// Properties
	internal string LogicalCallID { get; set; }
	internal bool HasInfo { get; }

	// Methods

	// RVA: 0x694 Offset: 0x694 VA: 0x694
	internal string get_LogicalCallID() { }

	// RVA: 0x2DB Offset: 0x2DB VA: 0x2DB
	internal void set_LogicalCallID(string value) { }

	// RVA: 0x695 Offset: 0x695 VA: 0x695
	internal bool get_HasInfo() { }

	// RVA: 0x696 Offset: 0x696 VA: 0x696 Slot: 4
	public object Clone() { }

	// RVA: 0x45E Offset: 0x45E VA: 0x45E
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType // TypeDefIndex: 1009
{
	// Fields
	public byte value__; // 0x0
	public const ArgInfoType In = 0;
	public const ArgInfoType Out = 1;
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 1010
{
	// Fields
	private int[] _paramMap; // 0x8
	private int _inoutArgCount; // 0xC
	private MethodBase _method; // 0x10

	// Methods

	// RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0
	public void .ctor(MethodBase method, ArgInfoType type) { }

	// RVA: 0x36E Offset: 0x36E VA: 0x36E
	public object[] GetInOutArgs(object[] args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x476 Offset: 0x476 VA: 0x476
public class AsyncResult : IAsyncResult, IMessageSink, IThreadPoolWorkItem // TypeDefIndex: 1011
{
	// Fields
	private object async_state; // 0x8
	private WaitHandle handle; // 0xC
	private object async_delegate; // 0x10
	private IntPtr data; // 0x14
	private object object_data; // 0x18
	private bool sync_completed; // 0x1C
	private bool completed; // 0x1D
	private bool endinvoke_called; // 0x1E
	private object async_callback; // 0x20
	private ExecutionContext current; // 0x24
	private ExecutionContext original; // 0x28
	private long add_time; // 0x30
	private MonoMethodMessage call_message; // 0x38
	private IMessageCtrl message_ctrl; // 0x3C
	private IMessage reply_message; // 0x40
	private WaitCallback orig_cb; // 0x44
	internal static ContextCallback ccb; // 0x0

	// Properties
	public virtual object AsyncState { get; }
	public virtual WaitHandle AsyncWaitHandle { get; }
	public virtual bool CompletedSynchronously { get; }
	public virtual bool IsCompleted { get; }
	public bool EndInvokeCalled { get; set; }
	public virtual object AsyncDelegate { get; }
	public IMessageSink NextSink { get; }
	internal MonoMethodMessage CallMessage { get; set; }

	// Methods

	// RVA: 0x45A Offset: 0x45A VA: 0x45A
	internal void .ctor() { }

	// RVA: 0xA2 Offset: 0xA2 VA: 0xA2
	internal void .ctor(WaitCallback cb, object state, bool capture_context) { }

	// RVA: 0x45B Offset: 0x45B VA: 0x45B
	private static void WaitCallback_Context(object state) { }

	// RVA: 0x67D Offset: 0x67D VA: 0x67D Slot: 9
	public virtual object get_AsyncState() { }

	// RVA: 0x67E Offset: 0x67E VA: 0x67E Slot: 10
	public virtual WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x67F Offset: 0x67F VA: 0x67F Slot: 11
	public virtual bool get_CompletedSynchronously() { }

	// RVA: 0x680 Offset: 0x680 VA: 0x680 Slot: 12
	public virtual bool get_IsCompleted() { }

	// RVA: 0x681 Offset: 0x681 VA: 0x681
	public bool get_EndInvokeCalled() { }

	// RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
	public void set_EndInvokeCalled(bool value) { }

	// RVA: 0x682 Offset: 0x682 VA: 0x682 Slot: 13
	public virtual object get_AsyncDelegate() { }

	// RVA: 0x683 Offset: 0x683 VA: 0x683 Slot: 14
	public IMessageSink get_NextSink() { }

	// RVA: 0x91E Offset: 0x91E VA: 0x91E Slot: 15
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x684 Offset: 0x684 VA: 0x684 Slot: 16
	public virtual IMessage GetReplyMessage() { }

	// RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1 Slot: 17
	public virtual void SetMessageCtrl(IMessageCtrl mc) { }

	// RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2
	internal void SetCompletedSynchronously(bool completed) { }

	// RVA: 0x685 Offset: 0x685 VA: 0x685
	internal IMessage EndInvoke() { }

	// RVA: 0x36F Offset: 0x36F VA: 0x36F Slot: 18
	public virtual IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x686 Offset: 0x686 VA: 0x686
	internal MonoMethodMessage get_CallMessage() { }

	// RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3
	internal void set_CallMessage(MonoMethodMessage value) { }

	// RVA: 0x45C Offset: 0x45C VA: 0x45C Slot: 7
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }

	// RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4 Slot: 8
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }

	// RVA: 0x687 Offset: 0x687 VA: 0x687
	internal object Invoke() { }

	// RVA: 0xEC2 Offset: 0xEC2 VA: 0xEC2
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0x763 Offset: 0x763 VA: 0x763
	// RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
	private void <.ctor>b__17_0(object <p0>) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder // TypeDefIndex: 1012
{
	// Fields
	public int index; // 0x8

	// Methods

	// RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
	public void .ctor(int i) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef // TypeDefIndex: 1013
{
	// Fields
	internal ObjRef objref; // 0x8
	internal int SourceDomain; // 0xC
	internal byte[] TypeInfo; // 0x10

	// Methods

	// RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3
	public void .ctor(ObjRef o, int sourceDomain) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CADMethodRef // TypeDefIndex: 1014
{
	// Fields
	private bool ctor; // 0x8
	private string typeName; // 0xC
	private string methodName; // 0x10
	private string[] param_names; // 0x14
	private string[] generic_arg_names; // 0x18

	// Methods

	// RVA: 0x374 Offset: 0x374 VA: 0x374
	private Type[] GetTypes(string[] typeArray) { }

	// RVA: 0x68E Offset: 0x68E VA: 0x68E
	public MethodBase Resolve() { }

	// RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
	public void .ctor(IMethodMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase // TypeDefIndex: 1015
{
	// Fields
	protected object[] _args; // 0x8
	protected byte[] _serializedArgs; // 0xC
	protected int _propertyCount; // 0x10
	protected CADArgHolder _callContext; // 0x14
	internal byte[] serializedMethod; // 0x18

	// Methods

	// RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7
	public void .ctor(IMethodMessage msg) { }

	// RVA: 0x688 Offset: 0x688 VA: 0x688
	internal MethodBase GetMethod() { }

	// RVA: 0x370 Offset: 0x370 VA: 0x370
	protected static Type[] GetSignature(MethodBase methodBase, bool load) { }

	// RVA: 0x371 Offset: 0x371 VA: 0x371
	internal static int MarshalProperties(IDictionary dict, ref ArrayList args) { }

	// RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1
	internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args) { }

	// RVA: 0x689 Offset: 0x689 VA: 0x689
	private static bool IsPossibleToIgnoreMarshal(object obj) { }

	// RVA: 0x91F Offset: 0x91F VA: 0x91F
	protected object MarshalArgument(object arg, ref ArrayList args) { }

	// RVA: 0x920 Offset: 0x920 VA: 0x920
	protected object UnmarshalArgument(object arg, ArrayList args) { }

	// RVA: 0x921 Offset: 0x921 VA: 0x921
	internal object[] MarshalArguments(object[] arguments, ref ArrayList args) { }

	// RVA: 0x922 Offset: 0x922 VA: 0x922
	internal object[] UnmarshalArguments(object[] arguments, ArrayList args) { }

	// RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2
	protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList) { }

	// RVA: 0x372 Offset: 0x372 VA: 0x372
	internal LogicalCallContext GetLogicalCallContext(ArrayList args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 1016
{
	// Fields
	private string _uri; // 0x1C

	// Properties
	internal string Uri { get; }
	internal int PropertiesCount { get; }

	// Methods

	// RVA: 0x68A Offset: 0x68A VA: 0x68A
	internal string get_Uri() { }

	// RVA: 0x68B Offset: 0x68B VA: 0x68B
	internal static CADMethodCallMessage Create(IMessage callMsg) { }

	// RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8
	internal void .ctor(IMethodCallMessage callMsg) { }

	// RVA: 0x68C Offset: 0x68C VA: 0x68C
	internal ArrayList GetArguments() { }

	// RVA: 0x373 Offset: 0x373 VA: 0x373
	internal object[] GetArgs(ArrayList args) { }

	// RVA: 0x68D Offset: 0x68D VA: 0x68D
	internal int get_PropertiesCount() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 1017
{
	// Fields
	private object _returnValue; // 0x1C
	private CADArgHolder _exception; // 0x20
	private Type[] _sig; // 0x24

	// Properties
	internal int PropertiesCount { get; }

	// Methods

	// RVA: 0x68F Offset: 0x68F VA: 0x68F
	internal static CADMethodReturnMessage Create(IMessage callMsg) { }

	// RVA: 0x2DA Offset: 0x2DA VA: 0x2DA
	internal void .ctor(IMethodReturnMessage retMsg) { }

	// RVA: 0x690 Offset: 0x690 VA: 0x690
	internal ArrayList GetArguments() { }

	// RVA: 0x375 Offset: 0x375 VA: 0x375
	internal object[] GetArgs(ArrayList args) { }

	// RVA: 0x376 Offset: 0x376 VA: 0x376
	internal object GetReturnValue(ArrayList args) { }

	// RVA: 0x377 Offset: 0x377 VA: 0x377
	internal Exception GetException(ArrayList args) { }

	// RVA: 0x691 Offset: 0x691 VA: 0x691
	internal int get_PropertiesCount() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 1018
{
	// Fields
	private Context _context; // 0x8

	// Methods

	// RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
	public void .ctor(Context ctx) { }

	// RVA: 0x379 Offset: 0x379 VA: 0x379 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x924 Offset: 0x924 VA: 0x924 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 1019
{
	// Fields
	private IMessageSink _replySink; // 0x8
	private Context _context; // 0xC

	// Methods

	// RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4
	public void .ctor(Context ctx, IMessageSink replySink) { }

	// RVA: 0x378 Offset: 0x378 VA: 0x378 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x923 Offset: 0x923 VA: 0x923 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0x477 Offset: 0x477 VA: 0x477
[ComVisibleAttribute] // RVA: 0x477 Offset: 0x477 VA: 0x477
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1020
{
	// Fields
	private IActivator _activator; // 0x34
	private object[] _activationAttributes; // 0x38
	private IList _contextProperties; // 0x3C
	private Type _activationType; // 0x40
	private string _activationTypeName; // 0x44
	private bool _isContextOk; // 0x48
	private RemotingProxy _sourceProxy; // 0x4C

	// Properties
	internal bool IsContextOk { get; set; }
	public Type ActivationType { get; }
	public string ActivationTypeName { get; }
	public IActivator Activator { get; set; }
	public object[] CallSiteActivationAttributes { get; }
	public IList ContextProperties { get; }
	public override IDictionary Properties { get; }
	internal RemotingProxy SourceProxy { get; set; }

	// Methods

	// RVA: 0x2DD Offset: 0x2DD VA: 0x2DD
	internal void .ctor(Type type) { }

	// RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x460 Offset: 0x460 VA: 0x460 Slot: 22
	internal override void InitDictionary() { }

	// RVA: 0x699 Offset: 0x699 VA: 0x699
	internal bool get_IsContextOk() { }

	// RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
	internal void set_IsContextOk(bool value) { }

	// RVA: 0x69A Offset: 0x69A VA: 0x69A Slot: 24
	public Type get_ActivationType() { }

	// RVA: 0x69B Offset: 0x69B VA: 0x69B Slot: 25
	public string get_ActivationTypeName() { }

	// RVA: 0x69C Offset: 0x69C VA: 0x69C Slot: 26
	public IActivator get_Activator() { }

	// RVA: 0x2DF Offset: 0x2DF VA: 0x2DF Slot: 27
	public void set_Activator(IActivator value) { }

	// RVA: 0x69D Offset: 0x69D VA: 0x69D Slot: 28
	public object[] get_CallSiteActivationAttributes() { }

	// RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0
	internal void SetActivationAttributes(object[] attributes) { }

	// RVA: 0x69E Offset: 0x69E VA: 0x69E Slot: 29
	public IList get_ContextProperties() { }

	// RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6 Slot: 19
	internal override void InitMethodProperty(string key, object value) { }

	// RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7 Slot: 20
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x69F Offset: 0x69F VA: 0x69F Slot: 21
	public override IDictionary get_Properties() { }

	// RVA: 0x6A0 Offset: 0x6A0 VA: 0x6A0
	internal RemotingProxy get_SourceProxy() { }

	// RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
	internal void set_SourceProxy(RemotingProxy value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MessageDictionary // TypeDefIndex: 1021
{
	// Fields
	public static string[] InternalKeys; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2
	public void .ctor(IConstructionCallMessage message) { }

	// RVA: 0x37A Offset: 0x37A VA: 0x37A Slot: 12
	protected override object GetMethodProperty(string key) { }

	// RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8 Slot: 13
	protected override void SetMethodProperty(string key, object value) { }

	// RVA: 0xEC3 Offset: 0xEC3 VA: 0xEC3
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x478 Offset: 0x478 VA: 0x478
[CLSCompliantAttribute] // RVA: 0x478 Offset: 0x478 VA: 0x478
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMethodReturnMessage, IMethodMessage, IMessage // TypeDefIndex: 1022
{
	// Properties
	public override IDictionary Properties { get; }

	// Methods

	// RVA: 0xA3 Offset: 0xA3 VA: 0xA3
	internal void .ctor(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg) { }

	// RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9
	internal void .ctor(Exception e, IMethodCallMessage msg) { }

	// RVA: 0x1FA Offset: 0x1FA VA: 0x1FA
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x6A1 Offset: 0x6A1 VA: 0x6A1 Slot: 22
	public override IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 1023
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0xFFFFFFFF

	// Methods

	// RVA: 0x37B Offset: 0x37B VA: 0x37B Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x925 Offset: 0x925 VA: 0x925 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x461 Offset: 0x461 VA: 0x461
	public void .ctor() { }

	// RVA: 0xEC4 Offset: 0xEC4 VA: 0xEC4
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMethodCallMessage, IMethodMessage, IMessage // TypeDefIndex: 1024
{
	// Fields
	private string _uri; // 0x8

	// Properties
	public int ArgCount { get; }
	public object[] Args { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; }
	public LogicalCallContext LogicalCallContext { get; }

	// Methods

	// RVA: 0x462 Offset: 0x462 VA: 0x462
	public void .ctor() { }

	// RVA: 0x6A2 Offset: 0x6A2 VA: 0x6A2 Slot: 4
	public int get_ArgCount() { }

	// RVA: 0x6A3 Offset: 0x6A3 VA: 0x6A3 Slot: 5
	public object[] get_Args() { }

	// RVA: 0x6A4 Offset: 0x6A4 VA: 0x6A4 Slot: 7
	public MethodBase get_MethodBase() { }

	// RVA: 0x6A5 Offset: 0x6A5 VA: 0x6A5 Slot: 8
	public string get_MethodName() { }

	// RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6 Slot: 9
	public object get_MethodSignature() { }

	// RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7 Slot: 14
	public virtual IDictionary get_Properties() { }

	// RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8 Slot: 10
	public string get_TypeName() { }

	// RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9 Slot: 11
	public string get_Uri() { }

	// RVA: 0x37C Offset: 0x37C VA: 0x37C Slot: 12
	public object GetArg(int arg_num) { }

	// RVA: 0x6AA Offset: 0x6AA VA: 0x6AA Slot: 6
	public LogicalCallContext get_LogicalCallContext() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x479 Offset: 0x479 VA: 0x479
[Serializable]
public class Header // TypeDefIndex: 1025
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x47A Offset: 0x47A VA: 0x47A
public sealed class HeaderHandler : MulticastDelegate // TypeDefIndex: 1026
{
	// Methods

	// RVA: 0x1FB Offset: 0x1FB VA: 0x1FB
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x37D Offset: 0x37D VA: 0x37D Slot: 12
	public virtual object Invoke(Header[] headers) { }

	// RVA: 0xA8 Offset: 0xA8 VA: 0xA8 Slot: 13
	public virtual IAsyncResult BeginInvoke(Header[] headers, AsyncCallback callback, object object) { }

	// RVA: 0x37E Offset: 0x37E VA: 0x37E Slot: 14
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 1027
{
	// Properties
	public abstract Identity TargetIdentity { get; set; }
	public abstract string Uri { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Identity get_TargetIdentity() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_TargetIdentity(Identity value) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string get_Uri() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Uri(string value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x47B Offset: 0x47B VA: 0x47B
public interface IMessage // TypeDefIndex: 1028
{
	// Properties
	public abstract IDictionary Properties { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x47C Offset: 0x47C VA: 0x47C
public interface IMessageCtrl // TypeDefIndex: 1029
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x47D Offset: 0x47D VA: 0x47D
public interface IMessageSink // TypeDefIndex: 1030
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x47E Offset: 0x47E VA: 0x47E
public interface IMethodCallMessage : IMethodMessage, IMessage // TypeDefIndex: 1031
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x47F Offset: 0x47F VA: 0x47F
public interface IMethodMessage : IMessage // TypeDefIndex: 1032
{
	// Properties
	public abstract int ArgCount { get; }
	public abstract object[] Args { get; }
	public abstract LogicalCallContext LogicalCallContext { get; }
	public abstract MethodBase MethodBase { get; }
	public abstract string MethodName { get; }
	public abstract object MethodSignature { get; }
	public abstract string TypeName { get; }
	public abstract string Uri { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_ArgCount() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object[] get_Args() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract LogicalCallContext get_LogicalCallContext() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract MethodBase get_MethodBase() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string get_MethodName() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object get_MethodSignature() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract string get_TypeName() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Uri() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract object GetArg(int argNum) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x480 Offset: 0x480 VA: 0x480
public interface IMethodReturnMessage : IMethodMessage, IMessage // TypeDefIndex: 1033
{
	// Properties
	public abstract Exception Exception { get; }
	public abstract object[] OutArgs { get; }
	public abstract object ReturnValue { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Exception get_Exception() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object[] get_OutArgs() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_ReturnValue() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x481 Offset: 0x481 VA: 0x481
public interface IRemotingFormatter : IFormatter // TypeDefIndex: 1034
{}

// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject // TypeDefIndex: 1035
{}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0x482 Offset: 0x482 VA: 0x482
[ComVisibleAttribute] // RVA: 0x482 Offset: 0x482 VA: 0x482
[Serializable]
public class MethodCall : IMethodCallMessage, IMethodMessage, IMessage, ISerializable, IInternalMessage, ISerializationRootObject // TypeDefIndex: 1036
{
	// Fields
	private string _uri; // 0x8
	private string _typeName; // 0xC
	private string _methodName; // 0x10
	private object[] _args; // 0x14
	private Type[] _methodSignature; // 0x18
	private MethodBase _methodBase; // 0x1C
	private LogicalCallContext _callContext; // 0x20
	private Identity _targetIdentity; // 0x24
	private Type[] _genericArguments; // 0x28
	protected IDictionary ExternalProperties; // 0x2C
	protected IDictionary InternalProperties; // 0x30

	// Properties
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	private Type[] GenericArguments { get; }

	// Methods

	// RVA: 0x202 Offset: 0x202 VA: 0x202
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2EB Offset: 0x2EB VA: 0x2EB
	internal void .ctor(CADMethodCallMessage msg) { }

	// RVA: 0x465 Offset: 0x465 VA: 0x465
	internal void .ctor() { }

	// RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
	internal void CopyFrom(IMethodMessage call) { }

	// RVA: 0x203 Offset: 0x203 VA: 0x203 Slot: 19
	internal virtual void InitMethodProperty(string key, object value) { }

	// RVA: 0x204 Offset: 0x204 VA: 0x204 Slot: 20
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x6C4 Offset: 0x6C4 VA: 0x6C4 Slot: 4
	public int get_ArgCount() { }

	// RVA: 0x6C5 Offset: 0x6C5 VA: 0x6C5 Slot: 5
	public object[] get_Args() { }

	// RVA: 0x6C6 Offset: 0x6C6 VA: 0x6C6 Slot: 6
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x6C7 Offset: 0x6C7 VA: 0x6C7 Slot: 7
	public MethodBase get_MethodBase() { }

	// RVA: 0x6C8 Offset: 0x6C8 VA: 0x6C8 Slot: 8
	public string get_MethodName() { }

	// RVA: 0x6C9 Offset: 0x6C9 VA: 0x6C9 Slot: 9
	public object get_MethodSignature() { }

	// RVA: 0x6CA Offset: 0x6CA VA: 0x6CA Slot: 21
	public virtual IDictionary get_Properties() { }

	// RVA: 0x466 Offset: 0x466 VA: 0x466 Slot: 22
	internal virtual void InitDictionary() { }

	// RVA: 0x6CB Offset: 0x6CB VA: 0x6CB Slot: 10
	public string get_TypeName() { }

	// RVA: 0x6CC Offset: 0x6CC VA: 0x6CC Slot: 11
	public string get_Uri() { }

	// RVA: 0x2ED Offset: 0x2ED VA: 0x2ED
	public void set_Uri(string value) { }

	// RVA: 0x6CD Offset: 0x6CD VA: 0x6CD Slot: 17
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x2EE Offset: 0x2EE VA: 0x2EE Slot: 18
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x381 Offset: 0x381 VA: 0x381 Slot: 12
	public object GetArg(int argNum) { }

	// RVA: 0x467 Offset: 0x467 VA: 0x467 Slot: 23
	public virtual void Init() { }

	// RVA: 0x468 Offset: 0x468 VA: 0x468
	public void ResolveMethod() { }

	// RVA: 0x926 Offset: 0x926 VA: 0x926
	private Type CastTo(string clientType, Type serverType) { }

	// RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	private static string GetTypeNameFromAssemblyQualifiedName(string aqname) { }

	// RVA: 0x6CF Offset: 0x6CF VA: 0x6CF Slot: 15
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x2EF Offset: 0x2EF VA: 0x2EF Slot: 16
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }

	// RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	private Type[] get_GenericArguments() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MCMDictionary : MessageDictionary // TypeDefIndex: 1037
{
	// Fields
	public static string[] InternalKeys; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6
	public void .ctor(IMethodMessage message) { }

	// RVA: 0xEC6 Offset: 0xEC6 VA: 0xEC6
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[DefaultMemberAttribute] // RVA: 0x483 Offset: 0x483 VA: 0x483
[Serializable]
internal class MessageDictionary : IDictionary, ICollection, IEnumerable // TypeDefIndex: 1038
{
	// Fields
	private IDictionary _internalProperties; // 0x8
	protected IMethodMessage _message; // 0xC
	private string[] _methodKeys; // 0x10
	private bool _ownProperties; // 0x14

	// Properties
	internal IDictionary InternalDictionary { get; }
	public string[] MethodKeys { set; }
	public object Item { set; }
	public ICollection Values { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
	public void .ctor(IMethodMessage message) { }

	// RVA: 0x6B6 Offset: 0x6B6 VA: 0x6B6
	internal bool HasUserData() { }

	// RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	internal IDictionary get_InternalDictionary() { }

	// RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
	public void set_MethodKeys(string[] value) { }

	// RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8 Slot: 11
	protected virtual IDictionary AllocInternalProperties() { }

	// RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	public IDictionary GetInternalProperties() { }

	// RVA: 0x37F Offset: 0x37F VA: 0x37F
	private bool IsOverridenKey(string key) { }

	// RVA: 0x1FE Offset: 0x1FE VA: 0x1FE Slot: 4
	public void set_Item(object key, object value) { }

	// RVA: 0x380 Offset: 0x380 VA: 0x380 Slot: 12
	protected virtual object GetMethodProperty(string key) { }

	// RVA: 0x1FF Offset: 0x1FF VA: 0x1FF Slot: 13
	protected virtual void SetMethodProperty(string key, object value) { }

	// RVA: 0x6BA Offset: 0x6BA VA: 0x6BA Slot: 14
	public ICollection get_Values() { }

	// RVA: 0x200 Offset: 0x200 VA: 0x200 Slot: 15
	public void Add(object key, object value) { }

	// RVA: 0x6BB Offset: 0x6BB VA: 0x6BB Slot: 7
	public int get_Count() { }

	// RVA: 0x6BC Offset: 0x6BC VA: 0x6BC Slot: 9
	public bool get_IsSynchronized() { }

	// RVA: 0x6BD Offset: 0x6BD VA: 0x6BD Slot: 8
	public object get_SyncRoot() { }

	// RVA: 0x201 Offset: 0x201 VA: 0x201 Slot: 6
	public void CopyTo(Array array, int index) { }

	// RVA: 0x6BE Offset: 0x6BE VA: 0x6BE Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x6BF Offset: 0x6BF VA: 0x6BF Slot: 5
	public IDictionaryEnumerator GetEnumerator() { }
}

// Namespace: 
private class MessageDictionary.DictionaryEnumerator : IDictionaryEnumerator, IEnumerator // TypeDefIndex: 1039
{
	// Fields
	private MessageDictionary _methodDictionary; // 0x8
	private IDictionaryEnumerator _hashtableEnum; // 0xC
	private int _posMethod; // 0x10

	// Properties
	public object Current { get; }
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9
	public void .ctor(MessageDictionary methodDictionary) { }

	// RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0 Slot: 8
	public object get_Current() { }

	// RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x2EA Offset: 0x2EA VA: 0x2EA Slot: 6
	public DictionaryEntry get_Entry() { }

	// RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2 Slot: 4
	public object get_Key() { }

	// RVA: 0x6C3 Offset: 0x6C3 VA: 0x6C3 Slot: 5
	public object get_Value() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0x484 Offset: 0x484 VA: 0x484
[ComVisibleAttribute] // RVA: 0x484 Offset: 0x484 VA: 0x484
[Serializable]
public class MethodResponse : IMethodReturnMessage, IMethodMessage, IMessage, ISerializable, IInternalMessage, ISerializationRootObject // TypeDefIndex: 1040
{
	// Fields
	private string _methodName; // 0x8
	private string _uri; // 0xC
	private string _typeName; // 0x10
	private MethodBase _methodBase; // 0x14
	private object _returnValue; // 0x18
	private Exception _exception; // 0x1C
	private Type[] _methodSignature; // 0x20
	private ArgInfo _inArgInfo; // 0x24
	private object[] _args; // 0x28
	private object[] _outArgs; // 0x2C
	private IMethodCallMessage _callMsg; // 0x30
	private LogicalCallContext _callContext; // 0x34
	private Identity _targetIdentity; // 0x38
	protected IDictionary ExternalProperties; // 0x3C
	protected IDictionary InternalProperties; // 0x40

	// Properties
	public int ArgCount { get; }
	public object[] Args { get; }
	public Exception Exception { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public object[] OutArgs { get; }
	public virtual IDictionary Properties { get; }
	public object ReturnValue { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }

	// Methods

	// RVA: 0x205 Offset: 0x205 VA: 0x205
	internal void .ctor(Exception e, IMethodCallMessage msg) { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B
	internal void .ctor(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg) { }

	// RVA: 0x206 Offset: 0x206 VA: 0x206
	internal void .ctor(IMethodCallMessage msg, CADMethodReturnMessage retmsg) { }

	// RVA: 0x207 Offset: 0x207 VA: 0x207
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x208 Offset: 0x208 VA: 0x208
	internal void InitMethodProperty(string key, object value) { }

	// RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1 Slot: 7
	public int get_ArgCount() { }

	// RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2 Slot: 8
	public object[] get_Args() { }

	// RVA: 0x6D3 Offset: 0x6D3 VA: 0x6D3 Slot: 4
	public Exception get_Exception() { }

	// RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4 Slot: 9
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5 Slot: 10
	public MethodBase get_MethodBase() { }

	// RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6 Slot: 11
	public string get_MethodName() { }

	// RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7 Slot: 12
	public object get_MethodSignature() { }

	// RVA: 0x6D8 Offset: 0x6D8 VA: 0x6D8 Slot: 5
	public object[] get_OutArgs() { }

	// RVA: 0x6D9 Offset: 0x6D9 VA: 0x6D9 Slot: 22
	public virtual IDictionary get_Properties() { }

	// RVA: 0x6DA Offset: 0x6DA VA: 0x6DA Slot: 6
	public object get_ReturnValue() { }

	// RVA: 0x6DB Offset: 0x6DB VA: 0x6DB Slot: 13
	public string get_TypeName() { }

	// RVA: 0x6DC Offset: 0x6DC VA: 0x6DC Slot: 14
	public string get_Uri() { }

	// RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0
	public void set_Uri(string value) { }

	// RVA: 0x6DD Offset: 0x6DD VA: 0x6DD Slot: 20
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1 Slot: 21
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x382 Offset: 0x382 VA: 0x382 Slot: 15
	public object GetArg(int argNum) { }

	// RVA: 0x209 Offset: 0x209 VA: 0x209 Slot: 23
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x6DE Offset: 0x6DE VA: 0x6DE Slot: 18
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2 Slot: 19
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MessageDictionary // TypeDefIndex: 1041
{
	// Fields
	public static string[] InternalReturnKeys; // 0x0
	public static string[] InternalExceptionKeys; // 0x4

	// Methods

	// RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3
	public void .ctor(IMethodReturnMessage message) { }

	// RVA: 0xEC7 Offset: 0xEC7 VA: 0xEC7
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MonoMethodMessage : IMethodCallMessage, IMethodMessage, IMessage, IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1042
{
	// Fields
	private MonoMethod method; // 0x8
	private object[] args; // 0xC
	private string[] names; // 0x10
	private byte[] arg_types; // 0x14
	public LogicalCallContext ctx; // 0x18
	public object rval; // 0x1C
	public Exception exc; // 0x20
	private AsyncResult asyncResult; // 0x24
	private CallType call_type; // 0x28
	private string uri; // 0x2C
	private MCMDictionary properties; // 0x30
	private Type[] methodSignature; // 0x34
	private Identity identity; // 0x38
	internal static string CallContextKey; // 0x0
	internal static string UriKey; // 0x4

	// Properties
	public IDictionary Properties { get; }
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; set; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	public Exception Exception { get; }
	public int OutArgCount { get; }
	public object[] OutArgs { get; }
	public object ReturnValue { get; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public AsyncResult AsyncResult { get; }
	internal CallType CallType { get; }

	// Methods

	// RVA: 0x20A Offset: 0x20A VA: 0x20A
	internal void InitMessage(MonoMethod method, object[] out_args) { }

	// RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	internal void .ctor(MethodInfo minfo, object[] in_args, object[] out_args) { }

	// RVA: 0x6DF Offset: 0x6DF VA: 0x6DF Slot: 13
	public IDictionary get_Properties() { }

	// RVA: 0x6E0 Offset: 0x6E0 VA: 0x6E0 Slot: 4
	public int get_ArgCount() { }

	// RVA: 0x6E1 Offset: 0x6E1 VA: 0x6E1 Slot: 5
	public object[] get_Args() { }

	// RVA: 0x6E2 Offset: 0x6E2 VA: 0x6E2 Slot: 6
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4
	public void set_LogicalCallContext(LogicalCallContext value) { }

	// RVA: 0x6E3 Offset: 0x6E3 VA: 0x6E3 Slot: 7
	public MethodBase get_MethodBase() { }

	// RVA: 0x6E4 Offset: 0x6E4 VA: 0x6E4 Slot: 8
	public string get_MethodName() { }

	// RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5 Slot: 9
	public object get_MethodSignature() { }

	// RVA: 0x6E6 Offset: 0x6E6 VA: 0x6E6 Slot: 10
	public string get_TypeName() { }

	// RVA: 0x6E7 Offset: 0x6E7 VA: 0x6E7 Slot: 19
	public string get_Uri() { }

	// RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5 Slot: 20
	public void set_Uri(string value) { }

	// RVA: 0x383 Offset: 0x383 VA: 0x383 Slot: 12
	public object GetArg(int arg_num) { }

	// RVA: 0x6E8 Offset: 0x6E8 VA: 0x6E8 Slot: 14
	public Exception get_Exception() { }

	// RVA: 0x6E9 Offset: 0x6E9 VA: 0x6E9 Slot: 21
	public int get_OutArgCount() { }

	// RVA: 0x6EA Offset: 0x6EA VA: 0x6EA Slot: 15
	public object[] get_OutArgs() { }

	// RVA: 0x6EB Offset: 0x6EB VA: 0x6EB Slot: 16
	public object get_ReturnValue() { }

	// RVA: 0x6EC Offset: 0x6EC VA: 0x6EC Slot: 17
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6 Slot: 18
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }

	// RVA: 0x6ED Offset: 0x6ED VA: 0x6ED
	public AsyncResult get_AsyncResult() { }

	// RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	internal CallType get_CallType() { }

	// RVA: 0x384 Offset: 0x384 VA: 0x384
	public bool NeedsOutProcessing(out int outCount) { }

	// RVA: 0xEC8 Offset: 0xEC8 VA: 0xEC8
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum CallType // TypeDefIndex: 1043
{
	// Fields
	public int value__; // 0x0
	public const CallType Sync = 0;
	public const CallType BeginInvoke = 1;
	public const CallType EndInvoke = 2;
	public const CallType OneWay = 3;
}

// Namespace: System.Runtime.Remoting.Messaging
[AttributeUsageAttribute] // RVA: 0x485 Offset: 0x485 VA: 0x485
[ComVisibleAttribute] // RVA: 0x485 Offset: 0x485 VA: 0x485
public class OneWayAttribute : Attribute // TypeDefIndex: 1044
{}

// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 1045
{
	// Methods

	// RVA: 0xA6 Offset: 0xA6 VA: 0xA6 Slot: 6
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46 Slot: 7
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }

	// RVA: 0x46A Offset: 0x46A VA: 0x46A
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 1046
{
	// Methods

	// RVA: 0xA5 Offset: 0xA5 VA: 0xA5 Slot: 6
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45 Slot: 7
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }

	// RVA: 0x469 Offset: 0x469 VA: 0x469
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x486 Offset: 0x486 VA: 0x486
public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 1047
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x0
	private static ObjRefSurrogate _objRefSurrogate; // 0x4
	private static RemotingSurrogate _objRemotingSurrogate; // 0x8
	private ISurrogateSelector _next; // 0x8

	// Methods

	// RVA: 0x46B Offset: 0x46B VA: 0x46B
	public void .ctor() { }

	// RVA: 0xA9 Offset: 0xA9 VA: 0xA9 Slot: 5
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout) { }

	// RVA: 0xEC9 Offset: 0xEC9 VA: 0xEC9
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0x487 Offset: 0x487 VA: 0x487
public class ReturnMessage : IMethodReturnMessage, IMethodMessage, IMessage, IInternalMessage // TypeDefIndex: 1048
{
	// Fields
	private object[] _outArgs; // 0x8
	private object[] _args; // 0xC
	private LogicalCallContext _callCtx; // 0x10
	private object _returnValue; // 0x14
	private string _uri; // 0x18
	private Exception _exception; // 0x1C
	private MethodBase _methodBase; // 0x20
	private string _methodName; // 0x24
	private Type[] _methodSignature; // 0x28
	private string _typeName; // 0x2C
	private MethodReturnDictionary _properties; // 0x30
	private Identity _targetIdentity; // 0x34
	private ArgInfo _inArgInfo; // 0x38

	// Properties
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	public Exception Exception { get; }
	public object[] OutArgs { get; }
	public virtual object ReturnValue { get; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }

	// Methods

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public void .ctor(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm) { }

	// RVA: 0x20B Offset: 0x20B VA: 0x20B
	public void .ctor(Exception e, IMethodCallMessage mcm) { }

	// RVA: 0x6EF Offset: 0x6EF VA: 0x6EF Slot: 7
	public int get_ArgCount() { }

	// RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0 Slot: 8
	public object[] get_Args() { }

	// RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1 Slot: 9
	public LogicalCallContext get_LogicalCallContext() { }

	// RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2 Slot: 10
	public MethodBase get_MethodBase() { }

	// RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3 Slot: 11
	public string get_MethodName() { }

	// RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4 Slot: 12
	public object get_MethodSignature() { }

	// RVA: 0x6F5 Offset: 0x6F5 VA: 0x6F5 Slot: 21
	public virtual IDictionary get_Properties() { }

	// RVA: 0x6F6 Offset: 0x6F6 VA: 0x6F6 Slot: 13
	public string get_TypeName() { }

	// RVA: 0x6F7 Offset: 0x6F7 VA: 0x6F7 Slot: 14
	public string get_Uri() { }

	// RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
	public void set_Uri(string value) { }

	// RVA: 0x6F8 Offset: 0x6F8 VA: 0x6F8 Slot: 19
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8 Slot: 20
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x385 Offset: 0x385 VA: 0x385 Slot: 15
	public object GetArg(int argNum) { }

	// RVA: 0x6F9 Offset: 0x6F9 VA: 0x6F9 Slot: 4
	public Exception get_Exception() { }

	// RVA: 0x6FA Offset: 0x6FA VA: 0x6FA Slot: 5
	public object[] get_OutArgs() { }

	// RVA: 0x6FB Offset: 0x6FB VA: 0x6FB Slot: 22
	public virtual object get_ReturnValue() { }

	// RVA: 0x6FC Offset: 0x6FC VA: 0x6FC Slot: 17
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }

	// RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9 Slot: 18
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 1049
{
	// Methods

	// RVA: 0x386 Offset: 0x386 VA: 0x386 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x927 Offset: 0x927 VA: 0x927 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x46C Offset: 0x46C VA: 0x46C
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 1050
{
	// Fields
	private IMessageSink _nextSink; // 0x8

	// Methods

	// RVA: 0x2FA Offset: 0x2FA VA: 0x2FA
	public void .ctor(IMessageSink nextSink) { }

	// RVA: 0x388 Offset: 0x388 VA: 0x388 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x929 Offset: 0x929 VA: 0x929 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 1051
{
	// Fields
	private IMessageSink _replySink; // 0x8
	private ServerIdentity _identity; // 0xC

	// Methods

	// RVA: 0x20C Offset: 0x20C VA: 0x20C
	public void .ctor(ServerIdentity identity, IMessageSink replySink) { }

	// RVA: 0x387 Offset: 0x387 VA: 0x387 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x928 Offset: 0x928 VA: 0x928 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink // TypeDefIndex: 1052
{
	// Fields
	private MarshalByRefObject _target; // 0x8
	private RealProxy _rp; // 0xC

	// Methods

	// RVA: 0x20D Offset: 0x20D VA: 0x20D
	public void .ctor(MarshalByRefObject obj, bool forceInternalExecute) { }

	// RVA: 0x389 Offset: 0x389 VA: 0x389 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x92A Offset: 0x92A VA: 0x92A Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x2FB Offset: 0x2FB VA: 0x2FB
	private void ExecuteAsyncMessage(object ob) { }

	// RVA: 0x2FC Offset: 0x2FC VA: 0x2FC
	private void CheckParameters(IMessage msg) { }

	[CompilerGeneratedAttribute] // RVA: 0x764 Offset: 0x764 VA: 0x764
	// RVA: 0x2FD Offset: 0x2FD VA: 0x2FD
	private void <AsyncProcessMessage>b__4_0(object data) { }
}

// Namespace: System.Runtime.ExceptionServices
[AttributeUsageAttribute] // RVA: 0x488 Offset: 0x488 VA: 0x488
public sealed class HandleProcessCorruptedStateExceptionsAttribute : Attribute // TypeDefIndex: 1053
{
	// Methods

	// RVA: 0x427 Offset: 0x427 VA: 0x427
	public void .ctor() { }
}

// Namespace: System.Runtime.ExceptionServices
public class FirstChanceExceptionEventArgs : EventArgs // TypeDefIndex: 1054
{}

// Namespace: System.Runtime.ExceptionServices
public sealed class ExceptionDispatchInfo // TypeDefIndex: 1055
{
	// Fields
	private Exception m_Exception; // 0x8
	private object m_stackTrace; // 0xC

	// Properties
	internal object BinaryStackTraceArray { get; }
	public Exception SourceException { get; }

	// Methods

	// RVA: 0x28B Offset: 0x28B VA: 0x28B
	private void .ctor(Exception exception) { }

	// RVA: 0x621 Offset: 0x621 VA: 0x621
	internal object get_BinaryStackTraceArray() { }

	// RVA: 0x622 Offset: 0x622 VA: 0x622
	public static ExceptionDispatchInfo Capture(Exception source) { }

	// RVA: 0x623 Offset: 0x623 VA: 0x623
	public Exception get_SourceException() { }

	// RVA: 0x426 Offset: 0x426 VA: 0x426
	public void Throw() { }
}

// Namespace: System.Runtime.ConstrainedExecution
[ComVisibleAttribute] // RVA: 0x489 Offset: 0x489 VA: 0x489
public abstract class CriticalFinalizerObject // TypeDefIndex: 1056
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x765 Offset: 0x765 VA: 0x765
	// RVA: 0x424 Offset: 0x424 VA: 0x424
	protected void .ctor() { }

	[ReliabilityContractAttribute] // RVA: 0x766 Offset: 0x766 VA: 0x766
	// RVA: 0x425 Offset: 0x425 VA: 0x425 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Consistency // TypeDefIndex: 1057
{
	// Fields
	public int value__; // 0x0
	public const Consistency MayCorruptProcess = 0;
	public const Consistency MayCorruptAppDomain = 1;
	public const Consistency MayCorruptInstance = 2;
	public const Consistency WillNotCorruptState = 3;
}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Cer // TypeDefIndex: 1058
{
	// Fields
	public int value__; // 0x0
	public const Cer None = 0;
	public const Cer MayFail = 1;
	public const Cer Success = 2;
}

// Namespace: System.Runtime.ConstrainedExecution
[AttributeUsageAttribute] // RVA: 0x48A Offset: 0x48A VA: 0x48A
public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 1059
{
	// Fields
	private Consistency _consistency; // 0x8
	private Cer _cer; // 0xC

	// Methods

	// RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7
	public void .ctor(Consistency consistencyGuarantee, Cer cer) { }
}

// Namespace: System.Runtime.CompilerServices
[DefaultMemberAttribute] // RVA: 0x48B Offset: 0x48B VA: 0x48B
public interface ITuple // TypeDefIndex: 1060
{}

// Namespace: System.Runtime.CompilerServices
public struct AsyncTaskMethodBuilder<TResult> // TypeDefIndex: 1061
{
	// Fields
	internal static readonly Task<TResult> s_defaultResultTask; // 0xFFFFFFFF
	private AsyncMethodBuilderCore m_coreState; // 0xFFFFFFFF
	private Task<TResult> m_task; // 0xFFFFFFFF

	// Properties
	public Task<TResult> Task { get; }

	// Methods

	// RVA: -1 Offset: -1
	public static AsyncTaskMethodBuilder<TResult> Create() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x92E Offset: 0x92E VA: 0x92E
	|-AsyncTaskMethodBuilder<bool>.Create
	|
	|-RVA: 0x8CD Offset: 0x8CD VA: 0x8CD
	|-AsyncTaskMethodBuilder<object>.Create
	*/

	[DebuggerStepThroughAttribute] // RVA: 0x767 Offset: 0x767 VA: 0x767
	// RVA: -1 Offset: -1
	public void Start<TStateMachine>(ref TStateMachine stateMachine) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x870 Offset: 0x870 VA: 0x870
	|-AsyncTaskMethodBuilder<bool>.Start<SemaphoreSlim.<WaitUntilCountOrTimeoutAsync>d__31>
	|
	|-RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	|-AsyncTaskMethodBuilder<object>.Start<object>
	*/

	// RVA: -1 Offset: -1
	public void SetStateMachine(IAsyncStateMachine stateMachine) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x874 Offset: 0x874 VA: 0x874
	|-AsyncTaskMethodBuilder<bool>.SetStateMachine
	|
	|-RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	|-AsyncTaskMethodBuilder<object>.SetStateMachine
	*/

	// RVA: -1 Offset: -1
	public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x469 Offset: 0x469 VA: 0x469
	|-AsyncTaskMethodBuilder<bool>.AwaitUnsafeOnCompleted<ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool>, SemaphoreSlim.<WaitUntilCountOrTimeoutAsync>d__31>
	|
	|-RVA: 0x467 Offset: 0x467 VA: 0x467
	|-AsyncTaskMethodBuilder<bool>.AwaitUnsafeOnCompleted<ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<object>, SemaphoreSlim.<WaitUntilCountOrTimeoutAsync>d__31>
	|-AsyncTaskMethodBuilder<bool>.AwaitUnsafeOnCompleted<ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<Task>, SemaphoreSlim.<WaitUntilCountOrTimeoutAsync>d__31>
	|
	|-RVA: 0x3F5 Offset: 0x3F5 VA: 0x3F5
	|-AsyncTaskMethodBuilder<object>.AwaitUnsafeOnCompleted<object, object>
	*/

	// RVA: -1 Offset: -1
	public Task<TResult> get_Task() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDEE Offset: 0xDEE VA: 0xDEE
	|-AsyncTaskMethodBuilder<bool>.get_Task
	|
	|-RVA: 0xD33 Offset: 0xD33 VA: 0xD33
	|-AsyncTaskMethodBuilder<object>.get_Task
	*/

	// RVA: -1 Offset: -1
	public void SetResult(TResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x873 Offset: 0x873 VA: 0x873
	|-AsyncTaskMethodBuilder<bool>.SetResult
	|
	|-RVA: 0x7FF Offset: 0x7FF VA: 0x7FF
	|-AsyncTaskMethodBuilder<object>.SetResult
	*/

	// RVA: -1 Offset: -1
	public void SetException(Exception exception) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x872 Offset: 0x872 VA: 0x872
	|-AsyncTaskMethodBuilder<bool>.SetException
	|
	|-RVA: 0x800 Offset: 0x800 VA: 0x800
	|-AsyncTaskMethodBuilder<object>.SetException
	*/

	// RVA: -1 Offset: -1
	private Task<TResult> GetTaskForResult(TResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBAE Offset: 0xBAE VA: 0xBAE
	|-AsyncTaskMethodBuilder<bool>.GetTaskForResult
	|
	|-RVA: 0x657 Offset: 0x657 VA: 0x657
	|-AsyncTaskMethodBuilder<object>.GetTaskForResult
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10A9 Offset: 0x10A9 VA: 0x10A9
	|-AsyncTaskMethodBuilder<bool>..cctor
	|
	|-RVA: 0xF8C Offset: 0xF8C VA: 0xF8C
	|-AsyncTaskMethodBuilder<object>..cctor
	*/
}

// Namespace: System.Runtime.CompilerServices
internal static class AsyncTaskCache // TypeDefIndex: 1062
{
	// Fields
	internal static readonly Task<bool> TrueTask; // 0x0
	internal static readonly Task<bool> FalseTask; // 0x4
	internal static readonly Task<int>[] Int32Tasks; // 0x8

	// Methods

	// RVA: 0x1EE Offset: 0x1EE VA: 0x1EE
	private static Task<int>[] CreateInt32Tasks() { }

	// RVA: -1 Offset: -1
	internal static Task<TResult> CreateCacheableTask<TResult>(TResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDEA Offset: 0xDEA VA: 0xDEA
	|-AsyncTaskCache.CreateCacheableTask<bool>
	|
	|-RVA: 0xDE9 Offset: 0xDE9 VA: 0xDE9
	|-AsyncTaskCache.CreateCacheableTask<int>
	|
	|-RVA: 0xD34 Offset: 0xD34 VA: 0xD34
	|-AsyncTaskCache.CreateCacheableTask<object>
	*/

	// RVA: 0xEB8 Offset: 0xEB8 VA: 0xEB8
	private static void .cctor() { }
}

// Namespace: System.Runtime.CompilerServices
internal struct AsyncMethodBuilderCore // TypeDefIndex: 1063
{
	// Fields
	internal IAsyncStateMachine m_stateMachine; // 0x0
	internal Action m_defaultContextAction; // 0x4

	// Methods

	// RVA: 0x276 Offset: 0x276 VA: 0x276
	public void SetStateMachine(IAsyncStateMachine stateMachine) { }

	// RVA: 0x90C Offset: 0x90C VA: 0x90C
	internal Action GetCompletionAction(Task taskForTracing, ref AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize) { }

	// RVA: 0x90D Offset: 0x90D VA: 0x90D
	private Action OutputAsyncCausalityEvents(Task innerTask, Action continuation) { }

	// RVA: 0x99 Offset: 0x99 VA: 0x99
	internal void PostBoxInitialization(IAsyncStateMachine stateMachine, AsyncMethodBuilderCore.MoveNextRunner runner, Task builtTask) { }

	// RVA: 0x277 Offset: 0x277 VA: 0x277
	internal static void ThrowAsync(Exception exception, SynchronizationContext targetContext) { }

	// RVA: 0x90E Offset: 0x90E VA: 0x90E
	internal static Action CreateContinuationWrapper(Action continuation, Action invokeAction, Task innerTask) { }

	// RVA: 0x618 Offset: 0x618 VA: 0x618
	internal static Task TryGetContinuationTask(Action action) { }
}

// Namespace: 
internal sealed class AsyncMethodBuilderCore.MoveNextRunner // TypeDefIndex: 1064
{
	// Fields
	private readonly ExecutionContext m_context; // 0x8
	internal IAsyncStateMachine m_stateMachine; // 0xC
	private static ContextCallback s_invokeMoveNext; // 0x0

	// Methods

	// RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2
	internal void .ctor(ExecutionContext context, IAsyncStateMachine stateMachine) { }

	// RVA: 0x417 Offset: 0x417 VA: 0x417
	internal void Run() { }

	// RVA: 0x418 Offset: 0x418 VA: 0x418
	private static void InvokeMoveNext(object stateMachine) { }
}

// Namespace: 
private class AsyncMethodBuilderCore.ContinuationWrapper // TypeDefIndex: 1065
{
	// Fields
	internal readonly Action m_continuation; // 0x8
	private readonly Action m_invokeAction; // 0xC
	internal readonly Task m_innerTask; // 0x10

	// Methods

	// RVA: 0x9A Offset: 0x9A VA: 0x9A
	internal void .ctor(Action continuation, Action invokeAction, Task innerTask) { }

	// RVA: 0x416 Offset: 0x416 VA: 0x416
	internal void Invoke() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x48C Offset: 0x48C VA: 0x48C
private sealed class AsyncMethodBuilderCore.<>c__DisplayClass4_0 // TypeDefIndex: 1066
{
	// Fields
	public Task innerTask; // 0x8
	public Action continuation; // 0xC

	// Methods

	// RVA: 0x414 Offset: 0x414 VA: 0x414
	public void .ctor() { }

	// RVA: 0x415 Offset: 0x415 VA: 0x415
	internal void <OutputAsyncCausalityEvents>b__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x48D Offset: 0x48D VA: 0x48D
[Serializable]
private sealed class AsyncMethodBuilderCore.<>c // TypeDefIndex: 1067
{
	// Fields
	public static readonly AsyncMethodBuilderCore.<>c <>9; // 0x0
	public static SendOrPostCallback <>9__6_0; // 0x4
	public static WaitCallback <>9__6_1; // 0x8

	// Methods

	// RVA: 0xEB7 Offset: 0xEB7 VA: 0xEB7
	private static void .cctor() { }

	// RVA: 0x413 Offset: 0x413 VA: 0x413
	public void .ctor() { }

	// RVA: 0x278 Offset: 0x278 VA: 0x278
	internal void <ThrowAsync>b__6_0(object state) { }

	// RVA: 0x279 Offset: 0x279 VA: 0x279
	internal void <ThrowAsync>b__6_1(object state) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x48E Offset: 0x48E VA: 0x48E
[Serializable]
public sealed class AsyncStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1068
{
	// Methods

	// RVA: 0x27A Offset: 0x27A VA: 0x27A
	public void .ctor(Type stateMachineType) { }
}

// Namespace: System.Runtime.CompilerServices
public interface IAsyncStateMachine // TypeDefIndex: 1069
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void MoveNext() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void SetStateMachine(IAsyncStateMachine stateMachine) { }
}

// Namespace: System.Runtime.CompilerServices
public interface INotifyCompletion // TypeDefIndex: 1070
{}

// Namespace: System.Runtime.CompilerServices
public interface ICriticalNotifyCompletion : INotifyCompletion // TypeDefIndex: 1071
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void UnsafeOnCompleted(Action continuation) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x48F Offset: 0x48F VA: 0x48F
[Serializable]
public sealed class IteratorStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1072
{
	// Methods

	// RVA: 0x281 Offset: 0x281 VA: 0x281
	public void .ctor(Type stateMachineType) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x490 Offset: 0x490 VA: 0x490
[Serializable]
public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 1073
{
	// Fields
	private bool m_wrapNonExceptionThrows; // 0x8

	// Properties
	public bool WrapNonExceptionThrows { set; }

	// Methods

	// RVA: 0x41D Offset: 0x41D VA: 0x41D
	public void .ctor() { }

	// RVA: 0x282 Offset: 0x282 VA: 0x282
	public void set_WrapNonExceptionThrows(bool value) { }
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 1074
{
	// Fields
	private object m_wrappedException; // 0x44

	// Methods

	// RVA: 0x285 Offset: 0x285 VA: 0x285
	private void .ctor(object thrownObject) { }

	// RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x41E Offset: 0x41E VA: 0x41E
	internal void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x491 Offset: 0x491 VA: 0x491
[Serializable]
public class StateMachineAttribute : Attribute // TypeDefIndex: 1075
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5A3 Offset: 0x5A3 VA: 0x5A3
	private Type <StateMachineType>k__BackingField; // 0x8

	// Properties
	private Type StateMachineType { set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x768 Offset: 0x768 VA: 0x768
	// RVA: 0x286 Offset: 0x286 VA: 0x286
	private void set_StateMachineType(Type value) { }

	// RVA: 0x287 Offset: 0x287 VA: 0x287
	public void .ctor(Type stateMachineType) { }
}

// Namespace: System.Runtime.CompilerServices
public struct TaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion // TypeDefIndex: 1076
{
	// Fields
	private readonly Task m_task; // 0x0

	// Methods

	// RVA: 0x288 Offset: 0x288 VA: 0x288 Slot: 4
	public void UnsafeOnCompleted(Action continuation) { }

	// RVA: 0x420 Offset: 0x420 VA: 0x420
	internal static void ValidateEnd(Task task) { }

	// RVA: 0x421 Offset: 0x421 VA: 0x421
	private static void HandleNonSuccessAndDebuggerNotification(Task task) { }

	// RVA: 0x422 Offset: 0x422 VA: 0x422
	private static void ThrowForNonSuccess(Task task) { }

	// RVA: 0x9B Offset: 0x9B VA: 0x9B
	internal static void OnCompletedInternal(Task task, Action continuation, bool continueOnCapturedContext, bool flowExecutionContext) { }
}

// Namespace: System.Runtime.CompilerServices
public struct TaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion // TypeDefIndex: 1077
{
	// Fields
	private readonly Task<TResult> m_task; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Task<TResult> task) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB57 Offset: 0xB57 VA: 0xB57
	|-TaskAwaiter<bool>..ctor
	|
	|-RVA: 0xB59 Offset: 0xB59 VA: 0xB59
	|-TaskAwaiter<int>..ctor
	|
	|-RVA: 0x801 Offset: 0x801 VA: 0x801
	|-TaskAwaiter<object>..ctor
	|
	|-RVA: 0xB5B Offset: 0xB5B VA: 0xB5B
	|-TaskAwaiter<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public void UnsafeOnCompleted(Action continuation) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB58 Offset: 0xB58 VA: 0xB58
	|-TaskAwaiter<bool>.UnsafeOnCompleted
	|
	|-RVA: 0xB5A Offset: 0xB5A VA: 0xB5A
	|-TaskAwaiter<int>.UnsafeOnCompleted
	|
	|-RVA: 0x802 Offset: 0x802 VA: 0x802
	|-TaskAwaiter<object>.UnsafeOnCompleted
	|
	|-RVA: 0xB5C Offset: 0xB5C VA: 0xB5C
	|-TaskAwaiter<VoidTaskResult>.UnsafeOnCompleted
	*/

	// RVA: -1 Offset: -1
	public TResult GetResult() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDEC Offset: 0xDEC VA: 0xDEC
	|-TaskAwaiter<bool>.GetResult
	|
	|-RVA: 0xDDE Offset: 0xDDE VA: 0xDDE
	|-TaskAwaiter<int>.GetResult
	|
	|-RVA: 0xD35 Offset: 0xD35 VA: 0xD35
	|-TaskAwaiter<object>.GetResult
	|
	|-RVA: 0xB5D Offset: 0xB5D VA: 0xB5D
	|-TaskAwaiter<VoidTaskResult>.GetResult
	*/
}

// Namespace: System.Runtime.CompilerServices
public struct ConfiguredTaskAwaitable<TResult> // TypeDefIndex: 1078
{
	// Fields
	private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Task<TResult> task, bool continueOnCapturedContext) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x994 Offset: 0x994 VA: 0x994
	|-ConfiguredTaskAwaitable<bool>..ctor
	|
	|-RVA: 0x995 Offset: 0x995 VA: 0x995
	|-ConfiguredTaskAwaitable<int>..ctor
	|
	|-RVA: 0x3F6 Offset: 0x3F6 VA: 0x3F6
	|-ConfiguredTaskAwaitable<object>..ctor
	|
	|-RVA: 0x996 Offset: 0x996 VA: 0x996
	|-ConfiguredTaskAwaitable<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	public ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> GetAwaiter() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x871 Offset: 0x871 VA: 0x871
	|-ConfiguredTaskAwaitable<bool>.GetAwaiter
	|
	|-RVA: 0xB55 Offset: 0xB55 VA: 0xB55
	|-ConfiguredTaskAwaitable<int>.GetAwaiter
	|
	|-RVA: 0x803 Offset: 0x803 VA: 0x803
	|-ConfiguredTaskAwaitable<object>.GetAwaiter
	|-ConfiguredTaskAwaitable<Task>.GetAwaiter
	|
	|-RVA: 0xB56 Offset: 0xB56 VA: 0xB56
	|-ConfiguredTaskAwaitable<VoidTaskResult>.GetAwaiter
	*/
}

// Namespace: 
public struct ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion // TypeDefIndex: 1079
{
	// Fields
	private readonly Task<TResult> m_task; // 0xFFFFFFFF
	private readonly bool m_continueOnCapturedContext; // 0xFFFFFFFF

	// Properties
	public bool IsCompleted { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Task<TResult> task, bool continueOnCapturedContext) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x991 Offset: 0x991 VA: 0x991
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool>..ctor
	|
	|-RVA: 0x992 Offset: 0x992 VA: 0x992
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int>..ctor
	|
	|-RVA: 0x3F7 Offset: 0x3F7 VA: 0x3F7
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<object>..ctor
	|
	|-RVA: 0x993 Offset: 0x993 VA: 0x993
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<VoidTaskResult>..ctor
	*/

	// RVA: -1 Offset: -1
	public bool get_IsCompleted() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDEF Offset: 0xDEF VA: 0xDEF
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool>.get_IsCompleted
	|
	|-RVA: 0x1272 Offset: 0x1272 VA: 0x1272
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int>.get_IsCompleted
	|
	|-RVA: 0xD36 Offset: 0xD36 VA: 0xD36
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<object>.get_IsCompleted
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<Task>.get_IsCompleted
	|
	|-RVA: 0x1274 Offset: 0x1274 VA: 0x1274
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<VoidTaskResult>.get_IsCompleted
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public void UnsafeOnCompleted(Action continuation) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB51 Offset: 0xB51 VA: 0xB51
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool>.UnsafeOnCompleted
	|
	|-RVA: 0xB52 Offset: 0xB52 VA: 0xB52
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int>.UnsafeOnCompleted
	|
	|-RVA: 0x804 Offset: 0x804 VA: 0x804
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<object>.UnsafeOnCompleted
	|
	|-RVA: 0xB53 Offset: 0xB53 VA: 0xB53
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<VoidTaskResult>.UnsafeOnCompleted
	*/

	// RVA: -1 Offset: -1
	public TResult GetResult() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDF0 Offset: 0xDF0 VA: 0xDF0
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool>.GetResult
	|
	|-RVA: 0x1273 Offset: 0x1273 VA: 0x1273
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int>.GetResult
	|
	|-RVA: 0xD37 Offset: 0xD37 VA: 0xD37
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<object>.GetResult
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<Task>.GetResult
	|
	|-RVA: 0xB54 Offset: 0xB54 VA: 0xB54
	|-ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<VoidTaskResult>.GetResult
	*/
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x492 Offset: 0x492 VA: 0x492
public sealed class TypeForwardedFromAttribute : Attribute // TypeDefIndex: 1080
{
	// Fields
	private string assemblyFullName; // 0x8

	// Properties
	public string AssemblyFullName { get; }

	// Methods

	// RVA: 0x28A Offset: 0x28A VA: 0x28A
	public void .ctor(string assemblyFullName) { }

	// RVA: 0x620 Offset: 0x620 VA: 0x620
	public string get_AssemblyFullName() { }
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum LoadHint // TypeDefIndex: 1081
{
	// Fields
	public int value__; // 0x0
	public const LoadHint Default = 0;
	public const LoadHint Always = 1;
	public const LoadHint Sometimes = 2;
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x493 Offset: 0x493 VA: 0x493
[Serializable]
public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 1082
{
	// Fields
	private LoadHint loadHint; // 0x8

	// Methods

	// RVA: 0x27E Offset: 0x27E VA: 0x27E
	public void .ctor(LoadHint loadHintArgument) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x494 Offset: 0x494 VA: 0x494
[Serializable]
public sealed class DependencyAttribute : Attribute // TypeDefIndex: 1083
{
	// Fields
	private string dependentAssembly; // 0x8
	private LoadHint loadHint; // 0xC

	// Methods

	// RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3
	public void .ctor(string dependentAssemblyArgument, LoadHint loadHintArgument) { }
}

// Namespace: System.Runtime.CompilerServices
[FlagsAttribute] // RVA: 0x495 Offset: 0x495 VA: 0x495
[ComVisibleAttribute] // RVA: 0x495 Offset: 0x495 VA: 0x495
[Serializable]
public enum CompilationRelaxations // TypeDefIndex: 1084
{
	// Fields
	public int value__; // 0x0
	public const CompilationRelaxations NoStringInterning = 8;
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x496 Offset: 0x496 VA: 0x496
[ComVisibleAttribute] // RVA: 0x496 Offset: 0x496 VA: 0x496
[Serializable]
public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 1085
{
	// Fields
	private int m_relaxations; // 0x8

	// Properties
	public int CompilationRelaxations { get; }

	// Methods

	// RVA: 0x27B Offset: 0x27B VA: 0x27B
	public void .ctor(int relaxations) { }

	// RVA: 0x27C Offset: 0x27C VA: 0x27C
	public void .ctor(CompilationRelaxations relaxations) { }

	// RVA: 0x619 Offset: 0x619 VA: 0x619
	public int get_CompilationRelaxations() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x497 Offset: 0x497 VA: 0x497
[Serializable]
public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 1086
{
	// Methods

	// RVA: 0x419 Offset: 0x419 VA: 0x419
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x498 Offset: 0x498 VA: 0x498
[ComVisibleAttribute] // RVA: 0x498 Offset: 0x498 VA: 0x498
[Serializable]
public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 1087
{
	// Properties
	public abstract object Value { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract object get_Value() { }

	// RVA: 0x41A Offset: 0x41A VA: 0x41A
	protected void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x499 Offset: 0x499 VA: 0x499
[ComVisibleAttribute] // RVA: 0x499 Offset: 0x499 VA: 0x499
[Serializable]
public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 1088
{
	// Fields
	private DateTime date; // 0x8

	// Properties
	public override object Value { get; }

	// Methods

	// RVA: 0x61A Offset: 0x61A VA: 0x61A Slot: 4
	public override object get_Value() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x49A Offset: 0x49A VA: 0x49A
[ComVisibleAttribute] // RVA: 0x49A Offset: 0x49A VA: 0x49A
[Serializable]
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 1089
{
	// Fields
	private Decimal dec; // 0x8

	// Properties
	public Decimal Value { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0x769 Offset: 0x769 VA: 0x769
	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public void .ctor(byte scale, byte sign, uint hi, uint mid, uint low) { }

	// RVA: 0x27D Offset: 0x27D VA: 0x27D
	public Decimal get_Value() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x49B Offset: 0x49B VA: 0x49B
public sealed class ExtensionAttribute : Attribute // TypeDefIndex: 1090
{
	// Methods

	// RVA: 0x41B Offset: 0x41B VA: 0x41B
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x49C Offset: 0x49C VA: 0x49C
public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 1091
{
	// Fields
	private Type elementType; // 0x8
	private int length; // 0xC

	// Properties
	public Type ElementType { get; }
	public int Length { get; }

	// Methods

	// RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4
	public void .ctor(Type elementType, int length) { }

	// RVA: 0x61B Offset: 0x61B VA: 0x61B
	public Type get_ElementType() { }

	// RVA: 0x61C Offset: 0x61C VA: 0x61C
	public int get_Length() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x49D Offset: 0x49D VA: 0x49D
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 1092
{
	// Fields
	private string _assemblyName; // 0x8
	private bool _allInternalsVisible; // 0xC

	// Properties
	public string AssemblyName { get; }
	public bool AllInternalsVisible { get; set; }

	// Methods

	// RVA: 0x27F Offset: 0x27F VA: 0x27F
	public void .ctor(string assemblyName) { }

	// RVA: 0x61D Offset: 0x61D VA: 0x61D
	public string get_AssemblyName() { }

	// RVA: 0x61E Offset: 0x61E VA: 0x61E
	public bool get_AllInternalsVisible() { }

	// RVA: 0x280 Offset: 0x280 VA: 0x280
	public void set_AllInternalsVisible(bool value) { }
}

// Namespace: System.Runtime.CompilerServices
[FriendAccessAllowedAttribute] // RVA: 0x49E Offset: 0x49E VA: 0x49E
[AttributeUsageAttribute] // RVA: 0x49E Offset: 0x49E VA: 0x49E
internal sealed class FriendAccessAllowedAttribute : Attribute // TypeDefIndex: 1093
{
	// Methods

	// RVA: 0x41C Offset: 0x41C VA: 0x41C
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[ComVisibleAttribute] // RVA: 0x49F Offset: 0x49F VA: 0x49F
public static class IsVolatile // TypeDefIndex: 1094
{}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x4A0 Offset: 0x4A0 VA: 0x4A0
internal sealed class TypeDependencyAttribute : Attribute // TypeDefIndex: 1095
{
	// Fields
	private string typeName; // 0x8

	// Methods

	// RVA: 0x289 Offset: 0x289 VA: 0x289
	public void .ctor(string typeName) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x4A1 Offset: 0x4A1 VA: 0x4A1
[Serializable]
public sealed class UnsafeValueTypeAttribute : Attribute // TypeDefIndex: 1096
{
	// Methods

	// RVA: 0x423 Offset: 0x423 VA: 0x423
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0x4A2 Offset: 0x4A2 VA: 0x4A2
[Serializable]
public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 1097
{
	// Methods

	// RVA: 0x41F Offset: 0x41F VA: 0x41F
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[FriendAccessAllowedAttribute] // RVA: 0x4A3 Offset: 0x4A3 VA: 0x4A3
internal static class JitHelpers // TypeDefIndex: 1098
{
	// Methods

	// RVA: -1 Offset: -1
	internal static T UnsafeCast<T>(object o) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD38 Offset: 0xD38 VA: 0xD38
	|-JitHelpers.UnsafeCast<object>
	*/

	// RVA: -1 Offset: -1
	internal static int UnsafeEnumCast<T>(T val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE69 Offset: 0xE69 VA: 0xE69
	|-JitHelpers.UnsafeEnumCast<Int32Enum>
	*/

	// RVA: -1 Offset: -1
	internal static long UnsafeEnumCastLong<T>(T val) { }
}

// Namespace: System.Runtime.CompilerServices
internal struct Ephemeron // TypeDefIndex: 1099
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x4
}

// Namespace: System.Runtime.CompilerServices
public sealed class ConditionalWeakTable<TKey, TValue> // TypeDefIndex: 1100
{
	// Fields
	private Ephemeron[] data; // 0xFFFFFFFF
	private object _lock; // 0xFFFFFFFF
	private int size; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8CE Offset: 0x8CE VA: 0x8CE
	|-ConditionalWeakTable<object, object>..ctor
	|-ConditionalWeakTable<object, SerializationInfo>..ctor
	|-ConditionalWeakTable<TaskScheduler, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 1
	protected override void Finalize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8CF Offset: 0x8CF VA: 0x8CF
	|-ConditionalWeakTable<object, object>.Finalize
	*/

	// RVA: -1 Offset: -1
	private void RehashWithoutResize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0
	|-ConditionalWeakTable<object, object>.RehashWithoutResize
	*/

	// RVA: -1 Offset: -1
	private void RecomputeSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1
	|-ConditionalWeakTable<object, object>.RecomputeSize
	*/

	// RVA: -1 Offset: -1
	private void Rehash() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2
	|-ConditionalWeakTable<object, object>.Rehash
	*/

	// RVA: -1 Offset: -1
	public void Add(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3F8 Offset: 0x3F8 VA: 0x3F8
	|-ConditionalWeakTable<object, object>.Add
	|-ConditionalWeakTable<object, SerializationInfo>.Add
	|-ConditionalWeakTable<TaskScheduler, object>.Add
	*/

	// RVA: -1 Offset: -1
	public bool Remove(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x658 Offset: 0x658 VA: 0x658
	|-ConditionalWeakTable<object, object>.Remove
	|-ConditionalWeakTable<object, SerializationInfo>.Remove
	*/

	// RVA: -1 Offset: -1
	public bool TryGetValue(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA49 Offset: 0xA49 VA: 0xA49
	|-ConditionalWeakTable<object, object>.TryGetValue
	|-ConditionalWeakTable<object, SerializationInfo>.TryGetValue
	*/
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 1101
{
	// Properties
	public static int OffsetToStringData { get; }

	// Methods

	// RVA: 0x283 Offset: 0x283 VA: 0x283
	private static void InitializeArray(Array array, IntPtr fldHandle) { }

	// RVA: 0x284 Offset: 0x284 VA: 0x284
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }

	// RVA: 0x1EF Offset: 0x1EF VA: 0x1EF
	public static int get_OffsetToStringData() { }

	// RVA: 0x61F Offset: 0x61F VA: 0x61F
	public static int GetHashCode(object o) { }

	[MonoTODOAttribute] // RVA: 0x76A Offset: 0x76A VA: 0x76A
	[ReliabilityContractAttribute] // RVA: 0x76A Offset: 0x76A VA: 0x76A
	// RVA: 0xEB9 Offset: 0xEB9 VA: 0xEB9
	public static void PrepareConstrainedRegions() { }

	// RVA: -1 Offset: -1
	public static bool IsReferenceOrContainsReferences<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2A5 Offset: 0x2A5 VA: 0x2A5
	|-RuntimeHelpers.IsReferenceOrContainsReferences<object>
	*/
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
[ComVisibleAttribute] // RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 1102
{
	// Fields
	private CallingConvention m_callingConvention; // 0x8
	public CharSet CharSet; // 0xC
	public bool BestFitMapping; // 0x10
	public bool ThrowOnUnmappableChar; // 0x11
	public bool SetLastError; // 0x12

	// Methods

	// RVA: 0x2A1 Offset: 0x2A1 VA: 0x2A1
	public void .ctor(CallingConvention callingConvention) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
[AttributeUsageAttribute] // RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
public sealed class DispIdAttribute : Attribute // TypeDefIndex: 1103
{
	// Fields
	internal int _val; // 0x8

	// Methods

	// RVA: 0x291 Offset: 0x291 VA: 0x291
	public void .ctor(int dispId) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4A6 Offset: 0x4A6 VA: 0x4A6
[Serializable]
public enum ComInterfaceType // TypeDefIndex: 1104
{
	// Fields
	public int value__; // 0x0
	public const ComInterfaceType InterfaceIsDual = 0;
	public const ComInterfaceType InterfaceIsIUnknown = 1;
	public const ComInterfaceType InterfaceIsIDispatch = 2;
	[ComVisibleAttribute] // RVA: 0x5A4 Offset: 0x5A4 VA: 0x5A4
	public const ComInterfaceType InterfaceIsIInspectable = 3;
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
[ComVisibleAttribute] // RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 1105
{
	// Fields
	internal ComInterfaceType _val; // 0x8

	// Methods

	// RVA: 0x299 Offset: 0x299 VA: 0x299
	public void .ctor(ComInterfaceType interfaceType) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8
[AttributeUsageAttribute] // RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8
public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 1106
{
	// Fields
	internal Type _val; // 0x8

	// Methods

	// RVA: 0x28E Offset: 0x28E VA: 0x28E
	public void .ctor(Type defaultInterface) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4A9 Offset: 0x4A9 VA: 0x4A9
[Serializable]
public enum ClassInterfaceType // TypeDefIndex: 1107
{
	// Fields
	public int value__; // 0x0
	public const ClassInterfaceType None = 0;
	public const ClassInterfaceType AutoDispatch = 1;
	public const ClassInterfaceType AutoDual = 2;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
[AttributeUsageAttribute] // RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 1108
{
	// Fields
	internal ClassInterfaceType _val; // 0x8

	// Methods

	// RVA: 0x28D Offset: 0x28D VA: 0x28D
	public void .ctor(ClassInterfaceType classInterfaceType) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
[AttributeUsageAttribute] // RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 1109
{
	// Fields
	internal bool _val; // 0x8

	// Methods

	// RVA: 0x28F Offset: 0x28F VA: 0x28F
	public void .ctor(bool visibility) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4AC Offset: 0x4AC VA: 0x4AC
[ComVisibleAttribute] // RVA: 0x4AC Offset: 0x4AC VA: 0x4AC
public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 1110
{
	// Fields
	internal string _importClassName; // 0x8

	// Methods

	// RVA: 0x2A0 Offset: 0x2A0 VA: 0x2A0
	public void .ctor(Type importClass) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4AD Offset: 0x4AD VA: 0x4AD
[Serializable]
public enum VarEnum // TypeDefIndex: 1111
{
	// Fields
	public int value__; // 0x0
	public const VarEnum VT_EMPTY = 0;
	public const VarEnum VT_NULL = 1;
	public const VarEnum VT_I2 = 2;
	public const VarEnum VT_I4 = 3;
	public const VarEnum VT_R4 = 4;
	public const VarEnum VT_R8 = 5;
	public const VarEnum VT_CY = 6;
	public const VarEnum VT_DATE = 7;
	public const VarEnum VT_BSTR = 8;
	public const VarEnum VT_DISPATCH = 9;
	public const VarEnum VT_ERROR = 10;
	public const VarEnum VT_BOOL = 11;
	public const VarEnum VT_VARIANT = 12;
	public const VarEnum VT_UNKNOWN = 13;
	public const VarEnum VT_DECIMAL = 14;
	public const VarEnum VT_I1 = 16;
	public const VarEnum VT_UI1 = 17;
	public const VarEnum VT_UI2 = 18;
	public const VarEnum VT_UI4 = 19;
	public const VarEnum VT_I8 = 20;
	public const VarEnum VT_UI8 = 21;
	public const VarEnum VT_INT = 22;
	public const VarEnum VT_UINT = 23;
	public const VarEnum VT_VOID = 24;
	public const VarEnum VT_HRESULT = 25;
	public const VarEnum VT_PTR = 26;
	public const VarEnum VT_SAFEARRAY = 27;
	public const VarEnum VT_CARRAY = 28;
	public const VarEnum VT_USERDEFINED = 29;
	public const VarEnum VT_LPSTR = 30;
	public const VarEnum VT_LPWSTR = 31;
	public const VarEnum VT_RECORD = 36;
	public const VarEnum VT_FILETIME = 64;
	public const VarEnum VT_BLOB = 65;
	public const VarEnum VT_STREAM = 66;
	public const VarEnum VT_STORAGE = 67;
	public const VarEnum VT_STREAMED_OBJECT = 68;
	public const VarEnum VT_STORED_OBJECT = 69;
	public const VarEnum VT_BLOB_OBJECT = 70;
	public const VarEnum VT_CF = 71;
	public const VarEnum VT_CLSID = 72;
	public const VarEnum VT_VECTOR = 4096;
	public const VarEnum VT_ARRAY = 8192;
	public const VarEnum VT_BYREF = 16384;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4AE Offset: 0x4AE VA: 0x4AE
[Serializable]
public enum UnmanagedType // TypeDefIndex: 1112
{
	// Fields
	public int value__; // 0x0
	public const UnmanagedType Bool = 2;
	public const UnmanagedType I1 = 3;
	public const UnmanagedType U1 = 4;
	public const UnmanagedType I2 = 5;
	public const UnmanagedType U2 = 6;
	public const UnmanagedType I4 = 7;
	public const UnmanagedType U4 = 8;
	public const UnmanagedType I8 = 9;
	public const UnmanagedType U8 = 10;
	public const UnmanagedType R4 = 11;
	public const UnmanagedType R8 = 12;
	public const UnmanagedType Currency = 15;
	public const UnmanagedType BStr = 19;
	public const UnmanagedType LPStr = 20;
	public const UnmanagedType LPWStr = 21;
	public const UnmanagedType LPTStr = 22;
	public const UnmanagedType ByValTStr = 23;
	public const UnmanagedType IUnknown = 25;
	public const UnmanagedType IDispatch = 26;
	public const UnmanagedType Struct = 27;
	public const UnmanagedType Interface = 28;
	public const UnmanagedType SafeArray = 29;
	public const UnmanagedType ByValArray = 30;
	public const UnmanagedType SysInt = 31;
	public const UnmanagedType SysUInt = 32;
	public const UnmanagedType VBByRefStr = 34;
	public const UnmanagedType AnsiBStr = 35;
	public const UnmanagedType TBStr = 36;
	public const UnmanagedType VariantBool = 37;
	public const UnmanagedType FunctionPtr = 38;
	public const UnmanagedType AsAny = 40;
	public const UnmanagedType LPArray = 42;
	public const UnmanagedType LPStruct = 43;
	public const UnmanagedType CustomMarshaler = 44;
	public const UnmanagedType Error = 45;
	[ComVisibleAttribute] // RVA: 0x5A5 Offset: 0x5A5 VA: 0x5A5
	public const UnmanagedType IInspectable = 46;
	[ComVisibleAttribute] // RVA: 0x5A6 Offset: 0x5A6 VA: 0x5A6
	public const UnmanagedType HString = 47;
	[ComVisibleAttribute] // RVA: 0x5A7 Offset: 0x5A7 VA: 0x5A7
	public const UnmanagedType LPUTF8Str = 48;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4AF Offset: 0x4AF VA: 0x4AF
[AttributeUsageAttribute] // RVA: 0x4AF Offset: 0x4AF VA: 0x4AF
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 1113
{
	// Methods

	// RVA: 0x429 Offset: 0x429 VA: 0x429
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0
[AttributeUsageAttribute] // RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0
public sealed class GuidAttribute : Attribute // TypeDefIndex: 1114
{
	// Fields
	internal string _val; // 0x8

	// Methods

	// RVA: 0x298 Offset: 0x298 VA: 0x298
	public void .ctor(string guid) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1
[ComVisibleAttribute] // RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1
public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 1115
{
	// Methods

	// RVA: 0x432 Offset: 0x432 VA: 0x432
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2
[ComVisibleAttribute] // RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2
public sealed class InAttribute : Attribute // TypeDefIndex: 1116
{
	// Methods

	// RVA: 0x42D Offset: 0x42D VA: 0x42D
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3
[AttributeUsageAttribute] // RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3
public sealed class OutAttribute : Attribute // TypeDefIndex: 1117
{
	// Methods

	// RVA: 0x431 Offset: 0x431 VA: 0x431
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4
[ComVisibleAttribute] // RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 1118
{
	// Methods

	// RVA: 0x430 Offset: 0x430 VA: 0x430
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[FlagsAttribute] // RVA: 0x4B5 Offset: 0x4B5 VA: 0x4B5
public enum DllImportSearchPath // TypeDefIndex: 1119
{
	// Fields
	public int value__; // 0x0
	public const DllImportSearchPath UseDllDirectoryForDependencies = 256;
	public const DllImportSearchPath ApplicationDirectory = 512;
	public const DllImportSearchPath UserDirectories = 1024;
	public const DllImportSearchPath System32 = 2048;
	public const DllImportSearchPath SafeDirectories = 4096;
	public const DllImportSearchPath AssemblyDirectory = 2;
	public const DllImportSearchPath LegacyBehavior = 0;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
[AttributeUsageAttribute] // RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
public sealed class DefaultDllImportSearchPathsAttribute : Attribute // TypeDefIndex: 1120
{
	// Fields
	internal DllImportSearchPath _paths; // 0x8

	// Methods

	// RVA: 0x290 Offset: 0x290 VA: 0x290
	public void .ctor(DllImportSearchPath paths) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7
[ComVisibleAttribute] // RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 1121
{
	// Fields
	internal string _val; // 0x8
	public string EntryPoint; // 0xC
	public CharSet CharSet; // 0x10
	public bool SetLastError; // 0x14
	public bool ExactSpelling; // 0x15
	public bool PreserveSig; // 0x16
	public CallingConvention CallingConvention; // 0x18
	public bool BestFitMapping; // 0x1C
	public bool ThrowOnUnmappableChar; // 0x1D

	// Properties
	public string Value { get; }

	// Methods

	// RVA: 0x625 Offset: 0x625 VA: 0x625
	internal static Attribute GetCustomAttribute(RuntimeMethodInfo method) { }

	// RVA: 0x626 Offset: 0x626 VA: 0x626
	internal static bool IsDefined(RuntimeMethodInfo method) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	internal void .ctor(string dllName, string entryPoint, CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar) { }

	// RVA: 0x292 Offset: 0x292 VA: 0x292
	public void .ctor(string dllName) { }

	// RVA: 0x627 Offset: 0x627 VA: 0x627
	public string get_Value() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
[ComVisibleAttribute] // RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 1122
{
	// Fields
	internal int _val; // 0x8

	// Methods

	// RVA: 0x294 Offset: 0x294 VA: 0x294
	public void .ctor(int offset) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9
[AttributeUsageAttribute] // RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9
public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 1123
{
	// Fields
	internal int _major; // 0x8
	internal int _minor; // 0xC

	// Methods

	// RVA: 0x1DE Offset: 0x1DE VA: 0x1DE
	public void .ctor(int major, int minor) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4BA Offset: 0x4BA VA: 0x4BA
[ComVisibleAttribute] // RVA: 0x4BA Offset: 0x4BA VA: 0x4BA
public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 1124
{
	// Fields
	internal int _major; // 0x8
	internal int _minor; // 0xC
	internal int _build; // 0x10
	internal int _revision; // 0x14

	// Methods

	// RVA: 0x46 Offset: 0x46 VA: 0x46
	public void .ctor(int major, int minor, int build, int revision) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4BB Offset: 0x4BB VA: 0x4BB
[ComVisibleAttribute] // RVA: 0x4BB Offset: 0x4BB VA: 0x4BB
public sealed class BestFitMappingAttribute : Attribute // TypeDefIndex: 1125
{
	// Fields
	internal bool _bestFitMapping; // 0x8

	// Methods

	// RVA: 0x28C Offset: 0x28C VA: 0x28C
	public void .ctor(bool BestFitMapping) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4BC Offset: 0x4BC VA: 0x4BC
[Serializable]
public enum CallingConvention // TypeDefIndex: 1126
{
	// Fields
	public int value__; // 0x0
	public const CallingConvention Winapi = 1;
	public const CallingConvention Cdecl = 2;
	public const CallingConvention StdCall = 3;
	public const CallingConvention ThisCall = 4;
	public const CallingConvention FastCall = 5;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4BD Offset: 0x4BD VA: 0x4BD
[Serializable]
public enum CharSet // TypeDefIndex: 1127
{
	// Fields
	public int value__; // 0x0
	public const CharSet None = 1;
	public const CharSet Ansi = 2;
	public const CharSet Unicode = 3;
	public const CharSet Auto = 4;
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4BE Offset: 0x4BE VA: 0x4BE
[Serializable]
public class COMException : ExternalException // TypeDefIndex: 1128
{
	// Methods

	// RVA: 0x428 Offset: 0x428 VA: 0x428
	public void .ctor() { }

	// RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x624 Offset: 0x624 VA: 0x624 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4BF Offset: 0x4BF VA: 0x4BF
[Serializable]
public sealed class ErrorWrapper // TypeDefIndex: 1129
{
	// Fields
	private int m_ErrorCode; // 0x8
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4C0 Offset: 0x4C0 VA: 0x4C0
[Serializable]
public class ExternalException : SystemException // TypeDefIndex: 1130
{
	// Methods

	// RVA: 0x42A Offset: 0x42A VA: 0x42A
	public void .ctor() { }

	// RVA: 0x293 Offset: 0x293 VA: 0x293
	public void .ctor(string message) { }

	// RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x628 Offset: 0x628 VA: 0x628 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4C1 Offset: 0x4C1 VA: 0x4C1
public interface ICustomMarshaler // TypeDefIndex: 1131
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object MarshalNativeToManaged(IntPtr pNativeData) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IntPtr MarshalManagedToNative(object ManagedObj) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void CleanUpNativeData(IntPtr pNativeData) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void CleanUpManagedData(object ManagedObj) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int GetNativeDataSize() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4C2 Offset: 0x4C2 VA: 0x4C2
[Serializable]
public class MarshalDirectiveException : SystemException // TypeDefIndex: 1132
{
	// Methods

	// RVA: 0x42F Offset: 0x42F VA: 0x42F
	public void .ctor() { }

	// RVA: 0x29A Offset: 0x29A VA: 0x29A
	public void .ctor(string message) { }

	// RVA: 0x1DC Offset: 0x1DC VA: 0x1DC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1133
{
	// Fields
	protected IntPtr handle; // 0x8
	private int _state; // 0xC
	private bool _ownsHandle; // 0x10
	private bool _fullyInitialized; // 0x11
	private const int RefCount_Mask = 2147483644;
	private const int RefCount_One = 4;

	// Properties
	public bool IsClosed { get; }
	public abstract bool IsInvalid { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x76B Offset: 0x76B VA: 0x76B
	// RVA: 0x1DD Offset: 0x1DD VA: 0x1DD
	protected void .ctor(IntPtr invalidHandleValue, bool ownsHandle) { }

	// RVA: 0x434 Offset: 0x434 VA: 0x434 Slot: 1
	protected override void Finalize() { }

	[ReliabilityContractAttribute] // RVA: 0x76C Offset: 0x76C VA: 0x76C
	// RVA: 0x29C Offset: 0x29C VA: 0x29C
	protected void SetHandle(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0x76D Offset: 0x76D VA: 0x76D
	// RVA: 0x63A Offset: 0x63A VA: 0x63A
	public IntPtr DangerousGetHandle() { }

	[ReliabilityContractAttribute] // RVA: 0x76E Offset: 0x76E VA: 0x76E
	// RVA: 0x63B Offset: 0x63B VA: 0x63B
	public bool get_IsClosed() { }

	[ReliabilityContractAttribute] // RVA: 0x76F Offset: 0x76F VA: 0x76F
	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsInvalid() { }

	[ReliabilityContractAttribute] // RVA: 0x770 Offset: 0x770 VA: 0x770
	// RVA: 0x435 Offset: 0x435 VA: 0x435
	public void Close() { }

	[ReliabilityContractAttribute] // RVA: 0x771 Offset: 0x771 VA: 0x771
	// RVA: 0x436 Offset: 0x436 VA: 0x436 Slot: 4
	public void Dispose() { }

	[ReliabilityContractAttribute] // RVA: 0x772 Offset: 0x772 VA: 0x772
	// RVA: 0x29D Offset: 0x29D VA: 0x29D Slot: 6
	protected virtual void Dispose(bool disposing) { }

	[ReliabilityContractAttribute] // RVA: 0x773 Offset: 0x773 VA: 0x773
	// RVA: -1 Offset: -1 Slot: 7
	protected abstract bool ReleaseHandle() { }

	[ReliabilityContractAttribute] // RVA: 0x774 Offset: 0x774 VA: 0x774
	// RVA: 0x437 Offset: 0x437 VA: 0x437
	public void SetHandleAsInvalid() { }

	[ReliabilityContractAttribute] // RVA: 0x775 Offset: 0x775 VA: 0x775
	// RVA: 0x29E Offset: 0x29E VA: 0x29E
	public void DangerousAddRef(ref bool success) { }

	[ReliabilityContractAttribute] // RVA: 0x776 Offset: 0x776 VA: 0x776
	// RVA: 0x438 Offset: 0x438 VA: 0x438
	public void DangerousRelease() { }

	// RVA: 0x439 Offset: 0x439 VA: 0x439
	private void InternalDispose() { }

	// RVA: 0x43A Offset: 0x43A VA: 0x43A
	private void InternalFinalize() { }

	// RVA: 0x29F Offset: 0x29F VA: 0x29F
	private void DangerousReleaseInternal(bool dispose) { }
}

// Namespace: System.Runtime.InteropServices
[MonoTODOAttribute] // RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3
[ComVisibleAttribute] // RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3
public struct GCHandle // TypeDefIndex: 1134
{
	// Fields
	private int handle; // 0x0

	// Properties
	public bool IsAllocated { get; }
	public object Target { get; set; }

	// Methods

	// RVA: 0x295 Offset: 0x295 VA: 0x295
	private void .ctor(IntPtr h) { }

	// RVA: 0x296 Offset: 0x296 VA: 0x296
	private void .ctor(object obj) { }

	// RVA: 0x1DA Offset: 0x1DA VA: 0x1DA
	internal void .ctor(object value, GCHandleType type) { }

	// RVA: 0x629 Offset: 0x629 VA: 0x629
	public bool get_IsAllocated() { }

	// RVA: 0x62A Offset: 0x62A VA: 0x62A
	public object get_Target() { }

	// RVA: 0x297 Offset: 0x297 VA: 0x297
	public void set_Target(object value) { }

	// RVA: 0x62B Offset: 0x62B VA: 0x62B
	public IntPtr AddrOfPinnedObject() { }

	// RVA: 0x62C Offset: 0x62C VA: 0x62C
	public static GCHandle Alloc(object value) { }

	// RVA: 0x355 Offset: 0x355 VA: 0x355
	public static GCHandle Alloc(object value, GCHandleType type) { }

	// RVA: 0x42B Offset: 0x42B VA: 0x42B
	public void Free() { }

	// RVA: 0x62D Offset: 0x62D VA: 0x62D
	public static IntPtr op_Explicit(GCHandle value) { }

	// RVA: 0x62E Offset: 0x62E VA: 0x62E
	public static GCHandle op_Explicit(IntPtr value) { }

	// RVA: 0x62F Offset: 0x62F VA: 0x62F
	private static bool CheckCurrentDomain(int handle) { }

	// RVA: 0x630 Offset: 0x630 VA: 0x630
	private static object GetTarget(int handle) { }

	// RVA: 0x90F Offset: 0x90F VA: 0x90F
	private static int GetTargetHandle(object obj, int handle, GCHandleType type) { }

	// RVA: 0x42C Offset: 0x42C VA: 0x42C
	private static void FreeHandle(int handle) { }

	// RVA: 0x631 Offset: 0x631 VA: 0x631
	private static IntPtr GetAddrOfPinnedObject(int handle) { }

	// RVA: 0x356 Offset: 0x356 VA: 0x356
	public static bool op_Equality(GCHandle a, GCHandle b) { }

	// RVA: 0x357 Offset: 0x357 VA: 0x357 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x632 Offset: 0x632 VA: 0x632 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x633 Offset: 0x633 VA: 0x633
	public static GCHandle FromIntPtr(IntPtr value) { }

	// RVA: 0x634 Offset: 0x634 VA: 0x634
	public static IntPtr ToIntPtr(GCHandle value) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4C4 Offset: 0x4C4 VA: 0x4C4
[Serializable]
public enum GCHandleType // TypeDefIndex: 1135
{
	// Fields
	public int value__; // 0x0
	public const GCHandleType Weak = 0;
	public const GCHandleType WeakTrackResurrection = 1;
	public const GCHandleType Normal = 2;
	public const GCHandleType Pinned = 3;
}

// Namespace: System.Runtime.InteropServices
public static class Marshal // TypeDefIndex: 1136
{
	// Fields
	public static readonly int SystemMaxDBCSCharSize; // 0x0
	public static readonly int SystemDefaultCharSize; // 0x4

	// Methods

	// RVA: 0x9C Offset: 0x9C VA: 0x9C
	internal static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length) { }

	// RVA: 0x9D Offset: 0x9D VA: 0x9D
	public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }

	// RVA: 0x9E Offset: 0x9E VA: 0x9E
	public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }

	// RVA: 0x42E Offset: 0x42E VA: 0x42E
	public static void FreeBSTR(IntPtr ptr) { }

	// RVA: 0x635 Offset: 0x635 VA: 0x635
	public static int GetHRForException(Exception e) { }

	[ReliabilityContractAttribute] // RVA: 0x777 Offset: 0x777 VA: 0x777
	// RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0
	public static int GetLastWin32Error() { }

	// RVA: 0x636 Offset: 0x636 VA: 0x636
	public static string PtrToStringUni(IntPtr ptr) { }

	[ReliabilityContractAttribute] // RVA: 0x778 Offset: 0x778 VA: 0x778
	// RVA: 0x637 Offset: 0x637 VA: 0x637
	private static int ReleaseInternal(IntPtr pUnk) { }

	[ReliabilityContractAttribute] // RVA: 0x779 Offset: 0x779 VA: 0x779
	// RVA: 0x638 Offset: 0x638 VA: 0x638
	public static int Release(IntPtr pUnk) { }

	[ReliabilityContractAttribute] // RVA: 0x77A Offset: 0x77A VA: 0x77A
	[ComVisibleAttribute] // RVA: 0x77A Offset: 0x77A VA: 0x77A
	// RVA: 0x1DB Offset: 0x1DB VA: 0x1DB
	public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }

	// RVA: -1 Offset: -1
	public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3F9 Offset: 0x3F9 VA: 0x3F9
	|-Marshal.StructureToPtr<object>
	*/

	// RVA: 0xEBA Offset: 0xEBA VA: 0xEBA
	private static void .cctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
[ComVisibleAttribute] // RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 1137
{
	// Fields
	public string MarshalCookie; // 0x8
	[ComVisibleAttribute] // RVA: 0x5A8 Offset: 0x5A8 VA: 0x5A8
	public string MarshalType; // 0xC
	[ComVisibleAttribute] // RVA: 0x5A9 Offset: 0x5A9 VA: 0x5A9
	public Type MarshalTypeRef; // 0x10
	public Type SafeArrayUserDefinedSubType; // 0x14
	private UnmanagedType utype; // 0x18
	public UnmanagedType ArraySubType; // 0x1C
	public VarEnum SafeArraySubType; // 0x20
	public int SizeConst; // 0x24
	public int IidParameterIndex; // 0x28
	public short SizeParamIndex; // 0x2C

	// Methods

	// RVA: 0x639 Offset: 0x639 VA: 0x639
	internal MarshalAsAttribute Copy() { }
}

// Namespace: System.Runtime.InteropServices
public abstract class SafeBuffer : SafeHandleZeroOrMinusOneIsInvalid, IDisposable // TypeDefIndex: 1138
{
	// Fields
	private bool inited; // 0x12

	// Methods

	[ReliabilityContractAttribute] // RVA: 0x77B Offset: 0x77B VA: 0x77B
	[CLSCompliantAttribute] // RVA: 0x77B Offset: 0x77B VA: 0x77B
	// RVA: 0x29B Offset: 0x29B VA: 0x29B
	public void AcquirePointer(ref byte* pointer) { }

	[ReliabilityContractAttribute] // RVA: 0x77C Offset: 0x77C VA: 0x77C
	// RVA: 0x433 Offset: 0x433 VA: 0x433
	public void ReleasePointer() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
[InterfaceTypeAttribute] // RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
[CLSCompliantAttribute] // RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
[GuidAttribute] // RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
public interface _Activator // TypeDefIndex: 1139
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
[CLSCompliantAttribute] // RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
[GuidAttribute] // RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
[ComVisibleAttribute] // RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
public interface _Assembly // TypeDefIndex: 1140
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
[CLSCompliantAttribute] // RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
[ComVisibleAttribute] // RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
[GuidAttribute] // RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
public interface _AssemblyName // TypeDefIndex: 1141
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
[GuidAttribute] // RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
[ComVisibleAttribute] // RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
[CLSCompliantAttribute] // RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
public interface _Attribute // TypeDefIndex: 1142
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
[CLSCompliantAttribute] // RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
[InterfaceTypeAttribute] // RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
[GuidAttribute] // RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
public interface _ConstructorInfo // TypeDefIndex: 1143
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
[GuidAttribute] // RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
[CLSCompliantAttribute] // RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
[InterfaceTypeAttribute] // RVA: 0x4CB Offset: 0x4CB VA: 0x4CB
public interface _EventInfo // TypeDefIndex: 1144
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x4CC Offset: 0x4CC VA: 0x4CC
[ComVisibleAttribute] // RVA: 0x4CC Offset: 0x4CC VA: 0x4CC
[CLSCompliantAttribute] // RVA: 0x4CC Offset: 0x4CC VA: 0x4CC
[GuidAttribute] // RVA: 0x4CC Offset: 0x4CC VA: 0x4CC
public interface _Exception // TypeDefIndex: 1145
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
[CLSCompliantAttribute] // RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
[GuidAttribute] // RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
[InterfaceTypeAttribute] // RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
public interface _FieldInfo // TypeDefIndex: 1146
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
[ComVisibleAttribute] // RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
[InterfaceTypeAttribute] // RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
[GuidAttribute] // RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
public interface _MemberInfo // TypeDefIndex: 1147
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
[GuidAttribute] // RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
[InterfaceTypeAttribute] // RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
[ComVisibleAttribute] // RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
public interface _MethodBase // TypeDefIndex: 1148
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
[ComVisibleAttribute] // RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
[GuidAttribute] // RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
[InterfaceTypeAttribute] // RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
public interface _MethodInfo // TypeDefIndex: 1149
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
[ComVisibleAttribute] // RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
[CLSCompliantAttribute] // RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
[InterfaceTypeAttribute] // RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
public interface _Module // TypeDefIndex: 1150
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
[CLSCompliantAttribute] // RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
[InterfaceTypeAttribute] // RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
[ComVisibleAttribute] // RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
public interface _ParameterInfo // TypeDefIndex: 1151
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
[InterfaceTypeAttribute] // RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
[ComVisibleAttribute] // RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
[GuidAttribute] // RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
public interface _PropertyInfo // TypeDefIndex: 1152
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
[CLSCompliantAttribute] // RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
[InterfaceTypeAttribute] // RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
[ComVisibleAttribute] // RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
public interface _SignatureHelper // TypeDefIndex: 1153
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
[ComVisibleAttribute] // RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
[InterfaceTypeAttribute] // RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
[GuidAttribute] // RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
public interface _Thread // TypeDefIndex: 1154
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
[InterfaceTypeAttribute] // RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
[ComVisibleAttribute] // RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
[GuidAttribute] // RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
public interface _Type // TypeDefIndex: 1155
{}

// Namespace: System.Collections
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 1156
{
	// Fields
	private object _key; // 0x0
	private object _value; // 0x4

	// Properties
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x9B Offset: 0x9B VA: 0x9B
	public void .ctor(object key, object value) { }

	// RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	public object get_Key() { }

	// RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8
	public object get_Value() { }
}

// Namespace: System.Collections
internal sealed class LowLevelComparer : IComparer // TypeDefIndex: 1157
{
	// Fields
	internal static readonly LowLevelComparer Default; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
	private void .ctor() { }

	// RVA: 0x825 Offset: 0x825 VA: 0x825 Slot: 4
	public int Compare(object a, object b) { }

	// RVA: 0xE60 Offset: 0xE60 VA: 0xE60
	private static void .cctor() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
[DebuggerTypeProxyAttribute] // RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
[DebuggerDisplayAttribute] // RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
[DefaultMemberAttribute] // RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
[Serializable]
public class ArrayList : IList, ICollection, IEnumerable, ICloneable // TypeDefIndex: 1158
{
	// Fields
	private object[] _items; // 0x8
	private int _size; // 0xC
	private int _version; // 0x10
	private object _syncRoot; // 0x14
	private static readonly object[] emptyArray; // 0x0

	// Properties
	public virtual int Capacity { set; }
	public virtual int Count { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1
	public void .ctor() { }

	// RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	public void .ctor(int capacity) { }

	// RVA: 0xB4 Offset: 0xB4 VA: 0xB4
	public void .ctor(ICollection c) { }

	// RVA: 0xB5 Offset: 0xB5 VA: 0xB5 Slot: 21
	public virtual void set_Capacity(int value) { }

	// RVA: 0x1AA Offset: 0x1AA VA: 0x1AA Slot: 22
	public virtual int get_Count() { }

	// RVA: 0x1AB Offset: 0x1AB VA: 0x1AB Slot: 23
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x1AC Offset: 0x1AC VA: 0x1AC Slot: 24
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1AD Offset: 0x1AD VA: 0x1AD Slot: 25
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1AE Offset: 0x1AE VA: 0x1AE Slot: 26
	public virtual object get_SyncRoot() { }

	// RVA: 0xFC Offset: 0xFC VA: 0xFC Slot: 27
	public virtual object get_Item(int index) { }

	// RVA: 0x94 Offset: 0x94 VA: 0x94 Slot: 28
	public virtual void set_Item(int index, object value) { }

	// RVA: 0xFD Offset: 0xFD VA: 0xFD Slot: 29
	public virtual int Add(object value) { }

	// RVA: 0xB6 Offset: 0xB6 VA: 0xB6 Slot: 30
	public virtual void AddRange(ICollection c) { }

	// RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2 Slot: 31
	public virtual void Clear() { }

	// RVA: 0x1AF Offset: 0x1AF VA: 0x1AF Slot: 32
	public virtual object Clone() { }

	// RVA: 0xFE Offset: 0xFE VA: 0xFE Slot: 33
	public virtual bool Contains(object item) { }

	// RVA: 0x95 Offset: 0x95 VA: 0x95 Slot: 34
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	private void EnsureCapacity(int min) { }

	// RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0 Slot: 35
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0xFF Offset: 0xFF VA: 0xFF Slot: 36
	public virtual int IndexOf(object value) { }

	// RVA: 0x96 Offset: 0x96 VA: 0x96 Slot: 37
	public virtual void Insert(int index, object value) { }

	// RVA: 0x97 Offset: 0x97 VA: 0x97 Slot: 38
	public virtual void InsertRange(int index, ICollection c) { }

	// RVA: 0xB8 Offset: 0xB8 VA: 0xB8 Slot: 39
	public virtual void Remove(object obj) { }

	// RVA: 0xB9 Offset: 0xB9 VA: 0xB9 Slot: 40
	public virtual void RemoveAt(int index) { }

	// RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1 Slot: 41
	public virtual object[] ToArray() { }

	// RVA: 0x100 Offset: 0x100 VA: 0x100 Slot: 42
	public virtual Array ToArray(Type type) { }

	// RVA: 0xE58 Offset: 0xE58 VA: 0xE58
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class ArrayList.ArrayListEnumeratorSimple : IEnumerator, ICloneable // TypeDefIndex: 1159
{
	// Fields
	private ArrayList list; // 0x8
	private int index; // 0xC
	private int version; // 0x10
	private object currentElement; // 0x14
	private bool isArrayList; // 0x18
	private static object dummyObject; // 0x0

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0xBA Offset: 0xBA VA: 0xBA
	internal void .ctor(ArrayList list) { }

	// RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2 Slot: 6
	public object Clone() { }

	// RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3 Slot: 4
	public bool MoveNext() { }

	// RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4 Slot: 5
	public object get_Current() { }

	// RVA: 0xE59 Offset: 0xE59 VA: 0xE59
	private static void .cctor() { }
}

// Namespace: 
internal class ArrayList.ArrayListDebugView // TypeDefIndex: 1160
{}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4D8 Offset: 0x4D8 VA: 0x4D8
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 1161
{
	// Fields
	private CompareInfo m_compareInfo; // 0x8

	// Properties
	public static CaseInsensitiveComparer Default { get; }

	// Methods

	// RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3
	public void .ctor() { }

	// RVA: 0xBB Offset: 0xBB VA: 0xBB
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x18C Offset: 0x18C VA: 0x18C
	public static CaseInsensitiveComparer get_Default() { }

	// RVA: 0x81C Offset: 0x81C VA: 0x81C Slot: 4
	public int Compare(object a, object b) { }
}

// Namespace: System.Collections
[ObsoleteAttribute] // RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9
[ComVisibleAttribute] // RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 1162
{
	// Fields
	private TextInfo m_text; // 0x8

	// Properties
	public static CaseInsensitiveHashCodeProvider Default { get; }

	// Methods

	// RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4
	public void .ctor() { }

	// RVA: 0xBC Offset: 0xBC VA: 0xBC
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x18D Offset: 0x18D VA: 0x18D
	public static CaseInsensitiveHashCodeProvider get_Default() { }

	// RVA: 0x101 Offset: 0x101 VA: 0x101 Slot: 4
	public int GetHashCode(object obj) { }

	// RVA: 0xE5A Offset: 0xE5A VA: 0xE5A
	private static void .cctor() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4DA Offset: 0x4DA VA: 0x4DA
[Serializable]
public sealed class Comparer : IComparer, ISerializable // TypeDefIndex: 1163
{
	// Fields
	private CompareInfo m_compareInfo; // 0x8
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x4

	// Methods

	// RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
	private void .ctor() { }

	// RVA: 0xBD Offset: 0xBD VA: 0xBD
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x98 Offset: 0x98 VA: 0x98
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x81D Offset: 0x81D VA: 0x81D Slot: 4
	public int Compare(object a, object b) { }

	// RVA: 0x99 Offset: 0x99 VA: 0x99 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xE5B Offset: 0xE5B VA: 0xE5B
	private static void .cctor() { }
}

// Namespace: System.Collections
[Serializable]
internal class CompatibleComparer : IEqualityComparer // TypeDefIndex: 1164
{
	// Fields
	private IComparer _comparer; // 0x8
	private IHashCodeProvider _hcp; // 0xC

	// Properties
	internal IComparer Comparer { get; }
	internal IHashCodeProvider HashCodeProvider { get; }

	// Methods

	// RVA: 0x9A Offset: 0x9A VA: 0x9A
	internal void .ctor(IComparer comparer, IHashCodeProvider hashCodeProvider) { }

	// RVA: 0x81E Offset: 0x81E VA: 0x81E
	public int Compare(object a, object b) { }

	// RVA: 0x81F Offset: 0x81F VA: 0x81F Slot: 4
	public bool Equals(object a, object b) { }

	// RVA: 0x102 Offset: 0x102 VA: 0x102 Slot: 5
	public int GetHashCode(object obj) { }

	// RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5
	internal IComparer get_Comparer() { }

	// RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	internal IHashCodeProvider get_HashCodeProvider() { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
[ComVisibleAttribute] // RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
[DebuggerDisplayAttribute] // RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
[DebuggerTypeProxyAttribute] // RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
[Serializable]
public class Hashtable : IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback, ICloneable // TypeDefIndex: 1165
{
	// Fields
	private Hashtable.bucket[] buckets; // 0x8
	private int count; // 0xC
	private int occupancy; // 0x10
	private int loadsize; // 0x14
	private float loadFactor; // 0x18
	private int version; // 0x1C
	private bool isWriterInProgress; // 0x20
	private ICollection keys; // 0x24
	private IEqualityComparer _keycomparer; // 0x28
	private object _syncRoot; // 0x2C

	// Properties
	public virtual object Item { get; set; }
	public virtual bool IsSynchronized { get; }
	public virtual ICollection Keys { get; }
	public virtual object SyncRoot { get; }
	public virtual int Count { get; }

	// Methods

	// RVA: 0xC0 Offset: 0xC0 VA: 0xC0
	internal void .ctor(bool trash) { }

	// RVA: 0x2BD Offset: 0x2BD VA: 0x2BD
	public void .ctor() { }

	// RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	public void .ctor(int capacity) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(int capacity, float loadFactor) { }

	[ObsoleteAttribute] // RVA: 0x77D Offset: 0x77D VA: 0x77D
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(int capacity, float loadFactor, IEqualityComparer equalityComparer) { }

	[ObsoleteAttribute] // RVA: 0x77E Offset: 0x77E VA: 0x77E
	// RVA: 0x9D Offset: 0x9D VA: 0x9D
	public void .ctor(IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	public void .ctor(IEqualityComparer equalityComparer) { }

	// RVA: 0x9E Offset: 0x9E VA: 0x9E
	public void .ctor(int capacity, IEqualityComparer equalityComparer) { }

	// RVA: 0x9F Offset: 0x9F VA: 0x9F
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	private uint InitHash(object key, int hashsize, out uint seed, out uint incr) { }

	// RVA: 0xA0 Offset: 0xA0 VA: 0xA0 Slot: 14
	public virtual void Add(object key, object value) { }

	[ReliabilityContractAttribute] // RVA: 0x77F Offset: 0x77F VA: 0x77F
	// RVA: 0x2BE Offset: 0x2BE VA: 0x2BE Slot: 15
	public virtual void Clear() { }

	// RVA: 0x1BE Offset: 0x1BE VA: 0x1BE Slot: 16
	public virtual object Clone() { }

	// RVA: 0x109 Offset: 0x109 VA: 0x109 Slot: 17
	public virtual bool Contains(object key) { }

	// RVA: 0x10A Offset: 0x10A VA: 0x10A Slot: 18
	public virtual bool ContainsKey(object key) { }

	// RVA: 0xA1 Offset: 0xA1 VA: 0xA1
	private void CopyKeys(Array array, int arrayIndex) { }

	// RVA: 0xA2 Offset: 0xA2 VA: 0xA2
	private void CopyEntries(Array array, int arrayIndex) { }

	// RVA: 0xA3 Offset: 0xA3 VA: 0xA3 Slot: 19
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	private void CopyValues(Array array, int arrayIndex) { }

	// RVA: 0x10B Offset: 0x10B VA: 0x10B Slot: 20
	public virtual object get_Item(object key) { }

	// RVA: 0xA5 Offset: 0xA5 VA: 0xA5 Slot: 21
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x2BF Offset: 0x2BF VA: 0x2BF
	private void expand() { }

	// RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
	private void rehash() { }

	// RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1
	private void UpdateVersion() { }

	[ReliabilityContractAttribute] // RVA: 0x780 Offset: 0x780 VA: 0x780
	// RVA: 0xA6 Offset: 0xA6 VA: 0xA6
	private void rehash(int newsize, bool forceNewHashCode) { }

	// RVA: 0x1BF Offset: 0x1BF VA: 0x1BF Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0 Slot: 22
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x10C Offset: 0x10C VA: 0x10C Slot: 23
	protected virtual int GetHash(object key) { }

	// RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1 Slot: 24
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x824 Offset: 0x824 VA: 0x824 Slot: 25
	protected virtual bool KeyEquals(object item, object key) { }

	// RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2 Slot: 26
	public virtual ICollection get_Keys() { }

	[ReliabilityContractAttribute] // RVA: 0x781 Offset: 0x781 VA: 0x781
	// RVA: 0x29 Offset: 0x29 VA: 0x29
	private void Insert(object key, object nvalue, bool add) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	private void putEntry(Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode) { }

	[ReliabilityContractAttribute] // RVA: 0x782 Offset: 0x782 VA: 0x782
	// RVA: 0xC3 Offset: 0xC3 VA: 0xC3 Slot: 27
	public virtual void Remove(object key) { }

	// RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3 Slot: 28
	public virtual object get_SyncRoot() { }

	// RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4 Slot: 29
	public virtual int get_Count() { }

	// RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5
	public static Hashtable Synchronized(Hashtable table) { }

	// RVA: 0xA7 Offset: 0xA7 VA: 0xA7 Slot: 30
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xC4 Offset: 0xC4 VA: 0xC4 Slot: 31
	public virtual void OnDeserialization(object sender) { }
}

// Namespace: 
private struct Hashtable.bucket // TypeDefIndex: 1166
{
	// Fields
	public object key; // 0x0
	public object val; // 0x4
	public int hash_coll; // 0x8
}

// Namespace: 
[Serializable]
private class Hashtable.KeyCollection : ICollection, IEnumerable // TypeDefIndex: 1167
{
	// Fields
	private Hashtable _hashtable; // 0x8

	// Properties
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual int Count { get; }

	// Methods

	// RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	internal void .ctor(Hashtable hashtable) { }

	// RVA: 0xA9 Offset: 0xA9 VA: 0xA9 Slot: 9
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x1CB Offset: 0x1CB VA: 0x1CB Slot: 10
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x1CC Offset: 0x1CC VA: 0x1CC Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1CD Offset: 0x1CD VA: 0x1CD Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x1CE Offset: 0x1CE VA: 0x1CE Slot: 13
	public virtual int get_Count() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x4DC Offset: 0x4DC VA: 0x4DC
[Serializable]
private class Hashtable.SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 1168
{
	// Fields
	protected Hashtable _table; // 0x30

	// Properties
	public override int Count { get; }
	public override bool IsSynchronized { get; }
	public override object Item { get; set; }
	public override object SyncRoot { get; }
	public override ICollection Keys { get; }

	// Methods

	// RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	internal void .ctor(Hashtable table) { }

	// RVA: 0xAA Offset: 0xAA VA: 0xAA
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xAB Offset: 0xAB VA: 0xAB Slot: 30
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1CF Offset: 0x1CF VA: 0x1CF Slot: 29
	public override int get_Count() { }

	// RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0 Slot: 24
	public override bool get_IsSynchronized() { }

	// RVA: 0x10D Offset: 0x10D VA: 0x10D Slot: 20
	public override object get_Item(object key) { }

	// RVA: 0xAC Offset: 0xAC VA: 0xAC Slot: 21
	public override void set_Item(object key, object value) { }

	// RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1 Slot: 28
	public override object get_SyncRoot() { }

	// RVA: 0xAD Offset: 0xAD VA: 0xAD Slot: 14
	public override void Add(object key, object value) { }

	// RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2 Slot: 15
	public override void Clear() { }

	// RVA: 0x10E Offset: 0x10E VA: 0x10E Slot: 17
	public override bool Contains(object key) { }

	// RVA: 0x10F Offset: 0x10F VA: 0x10F Slot: 18
	public override bool ContainsKey(object key) { }

	// RVA: 0xAE Offset: 0xAE VA: 0xAE Slot: 19
	public override void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2 Slot: 16
	public override object Clone() { }

	// RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4 Slot: 22
	public override IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5 Slot: 26
	public override ICollection get_Keys() { }

	// RVA: 0xC8 Offset: 0xC8 VA: 0xC8 Slot: 27
	public override void Remove(object key) { }

	// RVA: 0xC9 Offset: 0xC9 VA: 0xC9 Slot: 31
	public override void OnDeserialization(object sender) { }
}

// Namespace: 
[Serializable]
private class Hashtable.HashtableEnumerator : IDictionaryEnumerator, IEnumerator, ICloneable // TypeDefIndex: 1169
{
	// Fields
	private Hashtable hashtable; // 0x8
	private int bucket; // 0xC
	private int version; // 0x10
	private bool current; // 0x14
	private int getObjectRetType; // 0x18
	private object currentKey; // 0x1C
	private object currentValue; // 0x20

	// Properties
	public virtual object Key { get; }
	public virtual DictionaryEntry Entry { get; }
	public virtual object Current { get; }
	public virtual object Value { get; }

	// Methods

	// RVA: 0xA8 Offset: 0xA8 VA: 0xA8
	internal void .ctor(Hashtable hashtable, int getObjRetType) { }

	// RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6 Slot: 9
	public object Clone() { }

	// RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7 Slot: 10
	public virtual object get_Key() { }

	// RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8 Slot: 11
	public virtual bool MoveNext() { }

	// RVA: 0xC5 Offset: 0xC5 VA: 0xC5 Slot: 12
	public virtual DictionaryEntry get_Entry() { }

	// RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9 Slot: 13
	public virtual object get_Current() { }

	// RVA: 0x1CA Offset: 0x1CA VA: 0x1CA Slot: 14
	public virtual object get_Value() { }
}

// Namespace: 
internal class Hashtable.HashtableDebugView // TypeDefIndex: 1170
{}

// Namespace: System.Collections
[FriendAccessAllowedAttribute] // RVA: 0x4DD Offset: 0x4DD VA: 0x4DD
internal static class HashHelpers // TypeDefIndex: 1171
{
	// Fields
	public static readonly int[] primes; // 0x0
	private static ConditionalWeakTable<object, SerializationInfo> s_SerializationInfoTable; // 0x4

	// Properties
	internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { get; }

	// Methods

	// RVA: 0x18F Offset: 0x18F VA: 0x18F
	internal static ConditionalWeakTable<object, SerializationInfo> get_SerializationInfoTable() { }

	[ReliabilityContractAttribute] // RVA: 0x783 Offset: 0x783 VA: 0x783
	// RVA: 0x1BB Offset: 0x1BB VA: 0x1BB
	public static bool IsPrime(int candidate) { }

	[ReliabilityContractAttribute] // RVA: 0x784 Offset: 0x784 VA: 0x784
	// RVA: 0x1BC Offset: 0x1BC VA: 0x1BC
	public static int GetPrime(int min) { }

	// RVA: 0x1BD Offset: 0x1BD VA: 0x1BD
	public static int ExpandPrime(int oldSize) { }

	// RVA: 0xE5F Offset: 0xE5F VA: 0xE5F
	private static void .cctor() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4DE Offset: 0x4DE VA: 0x4DE
public interface ICollection : IEnumerable // TypeDefIndex: 1172
{
	// Properties
	public abstract int Count { get; }
	public abstract object SyncRoot { get; }
	public abstract bool IsSynchronized { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CopyTo(Array array, int index) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Count() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_SyncRoot() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_IsSynchronized() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4DF Offset: 0x4DF VA: 0x4DF
public interface IComparer // TypeDefIndex: 1173
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(object x, object y) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0
[DefaultMemberAttribute] // RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0
public interface IDictionary : ICollection, IEnumerable // TypeDefIndex: 1174
{
	// Properties
	public abstract object Item { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Item(object key, object value) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IDictionaryEnumerator GetEnumerator() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E1 Offset: 0x4E1 VA: 0x4E1
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 1175
{
	// Properties
	public abstract object Key { get; }
	public abstract object Value { get; }
	public abstract DictionaryEntry Entry { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Key() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Value() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract DictionaryEntry get_Entry() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2
[GuidAttribute] // RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2
public interface IEnumerable // TypeDefIndex: 1176
{
	// Methods

	[DispIdAttribute] // RVA: 0x785 Offset: 0x785 VA: 0x785
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator GetEnumerator() { }
}

// Namespace: System.Collections
[GuidAttribute] // RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3
[ComVisibleAttribute] // RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3
public interface IEnumerator // TypeDefIndex: 1177
{
	// Properties
	public abstract object Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool MoveNext() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Current() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E4 Offset: 0x4E4 VA: 0x4E4
public interface IEqualityComparer // TypeDefIndex: 1178
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object x, object y) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5
[ObsoleteAttribute] // RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5
public interface IHashCodeProvider // TypeDefIndex: 1179
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6
[ComVisibleAttribute] // RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6
public interface IList : ICollection, IEnumerable // TypeDefIndex: 1180
{
	// Properties
	public abstract object Item { get; set; }
	public abstract bool IsReadOnly { get; }
	public abstract bool IsFixedSize { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Item(int index) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Item(int index, object value) { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int Add(object value) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool Contains(object value) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Clear() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsReadOnly() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsFixedSize() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int IndexOf(object value) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void Insert(int index, object value) { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void Remove(object value) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void RemoveAt(int index) { }
}

// Namespace: System.Collections
public interface IStructuralComparable // TypeDefIndex: 1181
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object other, IComparer comparer) { }
}

// Namespace: System.Collections
public interface IStructuralEquatable // TypeDefIndex: 1182
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object other, IEqualityComparer comparer) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(IEqualityComparer comparer) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7
[DebuggerDisplayAttribute] // RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7
[DebuggerTypeProxyAttribute] // RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7
[Serializable]
public class Queue : ICollection, IEnumerable, ICloneable // TypeDefIndex: 1183
{
	// Fields
	private object[] _array; // 0x8
	private int _head; // 0xC
	private int _tail; // 0x10
	private int _size; // 0x14
	private int _growFactor; // 0x18
	private int _version; // 0x1C
	private object _syncRoot; // 0x20

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4
	public void .ctor() { }

	// RVA: 0xCA Offset: 0xCA VA: 0xCA
	public void .ctor(int capacity) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(int capacity, float growFactor) { }

	// RVA: 0xCB Offset: 0xCB VA: 0xCB
	public void .ctor(ICollection col) { }

	// RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6 Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7 Slot: 11
	public virtual object Clone() { }

	// RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8 Slot: 12
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9 Slot: 13
	public virtual object get_SyncRoot() { }

	// RVA: 0xAF Offset: 0xAF VA: 0xAF Slot: 14
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0xCC Offset: 0xCC VA: 0xCC Slot: 15
	public virtual void Enqueue(object obj) { }

	// RVA: 0x1DA Offset: 0x1DA VA: 0x1DA Slot: 16
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x1DB Offset: 0x1DB VA: 0x1DB Slot: 17
	public virtual object Dequeue() { }

	// RVA: 0x1DC Offset: 0x1DC VA: 0x1DC Slot: 18
	public virtual object Peek() { }

	// RVA: 0x110 Offset: 0x110 VA: 0x110
	internal object GetElement(int i) { }

	// RVA: 0xCD Offset: 0xCD VA: 0xCD
	private void SetCapacity(int capacity) { }
}

// Namespace: 
[Serializable]
private class Queue.QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1184
{
	// Fields
	private Queue _q; // 0x8
	private int _index; // 0xC
	private int _version; // 0x10
	private object currentElement; // 0x14

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0xCE Offset: 0xCE VA: 0xCE
	internal void .ctor(Queue q) { }

	// RVA: 0x1DD Offset: 0x1DD VA: 0x1DD Slot: 6
	public object Clone() { }

	// RVA: 0x1DE Offset: 0x1DE VA: 0x1DE Slot: 7
	public virtual bool MoveNext() { }

	// RVA: 0x1DF Offset: 0x1DF VA: 0x1DF Slot: 8
	public virtual object get_Current() { }
}

// Namespace: 
internal class Queue.QueueDebugView // TypeDefIndex: 1185
{}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
[DebuggerDisplayAttribute] // RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
[DebuggerTypeProxyAttribute] // RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
[DefaultMemberAttribute] // RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
[Serializable]
public class SortedList : IDictionary, ICollection, IEnumerable, ICloneable // TypeDefIndex: 1186
{
	// Fields
	private object[] keys; // 0x8
	private object[] values; // 0xC
	private int _size; // 0x10
	private int version; // 0x14
	private IComparer comparer; // 0x18
	private object _syncRoot; // 0x1C
	private static object[] emptyArray; // 0x0

	// Properties
	public virtual int Capacity { get; set; }
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual object Item { set; }

	// Methods

	// RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5
	public void .ctor() { }

	// RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6
	private void Init() { }

	// RVA: 0xCF Offset: 0xCF VA: 0xCF
	public void .ctor(int initialCapacity) { }

	// RVA: 0xD0 Offset: 0xD0 VA: 0xD0
	public void .ctor(IComparer comparer) { }

	// RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	public void .ctor(IComparer comparer, int capacity) { }

	// RVA: 0xB1 Offset: 0xB1 VA: 0xB1 Slot: 12
	public virtual void Add(object key, object value) { }

	// RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0 Slot: 13
	public virtual int get_Capacity() { }

	// RVA: 0xD1 Offset: 0xD1 VA: 0xD1 Slot: 14
	public virtual void set_Capacity(int value) { }

	// RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1 Slot: 15
	public virtual int get_Count() { }

	// RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2 Slot: 16
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3 Slot: 17
	public virtual object get_SyncRoot() { }

	// RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4 Slot: 18
	public virtual object Clone() { }

	// RVA: 0xB2 Offset: 0xB2 VA: 0xB2 Slot: 19
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0xD2 Offset: 0xD2 VA: 0xD2
	private void EnsureCapacity(int min) { }

	// RVA: 0x111 Offset: 0x111 VA: 0x111 Slot: 20
	public virtual object GetByIndex(int index) { }

	// RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6 Slot: 21
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x112 Offset: 0x112 VA: 0x112 Slot: 22
	public virtual object GetKey(int index) { }

	// RVA: 0xB3 Offset: 0xB3 VA: 0xB3 Slot: 23
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x113 Offset: 0x113 VA: 0x113 Slot: 24
	public virtual int IndexOfKey(object key) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	private void Insert(int index, object key, object value) { }

	// RVA: 0xD3 Offset: 0xD3 VA: 0xD3 Slot: 25
	public virtual void RemoveAt(int index) { }

	// RVA: 0xE61 Offset: 0xE61 VA: 0xE61
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private class SortedList.SortedListEnumerator : IDictionaryEnumerator, IEnumerator, ICloneable // TypeDefIndex: 1187
{
	// Fields
	private SortedList sortedList; // 0x8
	private object key; // 0xC
	private object value; // 0x10
	private int index; // 0x14
	private int startIndex; // 0x18
	private int endIndex; // 0x1C
	private int version; // 0x20
	private bool current; // 0x24
	private int getObjectRetType; // 0x28

	// Properties
	public virtual object Key { get; }
	public virtual DictionaryEntry Entry { get; }
	public virtual object Current { get; }
	public virtual object Value { get; }

	// Methods

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	internal void .ctor(SortedList sortedList, int index, int count, int getObjRetType) { }

	// RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7 Slot: 9
	public object Clone() { }

	// RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8 Slot: 10
	public virtual object get_Key() { }

	// RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9 Slot: 11
	public virtual bool MoveNext() { }

	// RVA: 0xD4 Offset: 0xD4 VA: 0xD4 Slot: 12
	public virtual DictionaryEntry get_Entry() { }

	// RVA: 0x1EA Offset: 0x1EA VA: 0x1EA Slot: 13
	public virtual object get_Current() { }

	// RVA: 0x1EB Offset: 0x1EB VA: 0x1EB Slot: 14
	public virtual object get_Value() { }
}

// Namespace: 
internal class SortedList.SortedListDebugView // TypeDefIndex: 1188
{}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9
[DebuggerDisplayAttribute] // RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9
[DebuggerTypeProxyAttribute] // RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9
[Serializable]
public class Stack : ICollection, IEnumerable, ICloneable // TypeDefIndex: 1189
{
	// Fields
	private object[] _array; // 0x8
	private int _size; // 0xC
	private int _version; // 0x10
	private object _syncRoot; // 0x14

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7
	public void .ctor() { }

	// RVA: 0xD5 Offset: 0xD5 VA: 0xD5
	public void .ctor(int initialCapacity) { }

	// RVA: 0x1EC Offset: 0x1EC VA: 0x1EC Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x1ED Offset: 0x1ED VA: 0x1ED Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1EE Offset: 0x1EE VA: 0x1EE Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8 Slot: 13
	public virtual void Clear() { }

	// RVA: 0x1EF Offset: 0x1EF VA: 0x1EF Slot: 14
	public virtual object Clone() { }

	// RVA: 0xB4 Offset: 0xB4 VA: 0xB4 Slot: 15
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0 Slot: 16
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1 Slot: 17
	public virtual object Peek() { }

	// RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2 Slot: 18
	public virtual object Pop() { }

	// RVA: 0xD6 Offset: 0xD6 VA: 0xD6 Slot: 19
	public virtual void Push(object obj) { }
}

// Namespace: 
[Serializable]
private class Stack.StackEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1190
{
	// Fields
	private Stack _stack; // 0x8
	private int _index; // 0xC
	private int _version; // 0x10
	private object currentElement; // 0x14

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0xD7 Offset: 0xD7 VA: 0xD7
	internal void .ctor(Stack stack) { }

	// RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3 Slot: 6
	public object Clone() { }

	// RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4 Slot: 7
	public virtual bool MoveNext() { }

	// RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5 Slot: 8
	public virtual object get_Current() { }
}

// Namespace: 
internal class Stack.StackDebugView // TypeDefIndex: 1191
{}

// Namespace: System.Collections.ObjectModel
[DebuggerTypeProxyAttribute] // RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
[DebuggerDisplayAttribute] // RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
[ComVisibleAttribute] // RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
[DefaultMemberAttribute] // RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
[Serializable]
public class ReadOnlyCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T> // TypeDefIndex: 1192
{
	// Fields
	private IList<T> list; // 0xFFFFFFFF
	private object _syncRoot; // 0xFFFFFFFF

	// Properties
	public int Count { get; }
	public T Item { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private T System.Collections.Generic.IList<T>.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(IList<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA8F Offset: 0xA8F VA: 0xA8F
	|-ReadOnlyCollection<byte>..ctor
	|
	|-RVA: 0xA94 Offset: 0xA94 VA: 0xA94
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xA99 Offset: 0xA99 VA: 0xA99
	|-ReadOnlyCollection<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x805 Offset: 0x805 VA: 0x805
	|-ReadOnlyCollection<Exception>..ctor
	|-ReadOnlyCollection<object>..ctor
	|-ReadOnlyCollection<ExceptionDispatchInfo>..ctor
	|-ReadOnlyCollection<string>..ctor
	|-ReadOnlyCollection<TimeZoneInfo>..ctor
	|
	|-RVA: 0xA9E Offset: 0xA9E VA: 0xA9E
	|-ReadOnlyCollection<int>..ctor
	|
	|-RVA: 0xAA3 Offset: 0xAA3 VA: 0xAA3
	|-ReadOnlyCollection<CustomAttributeNamedArgument>..ctor
	|
	|-RVA: 0x86E Offset: 0x86E VA: 0x86E
	|-ReadOnlyCollection<CustomAttributeTypedArgument>..ctor
	|
	|-RVA: 0xAAC Offset: 0xAAC VA: 0xAAC
	|-ReadOnlyCollection<ulong>..ctor
	|
	|-RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xAB5 Offset: 0xAB5 VA: 0xAB5
	|-ReadOnlyCollection<Color32>..ctor
	|
	|-RVA: 0xABA Offset: 0xABA VA: 0xABA
	|-ReadOnlyCollection<RaycastResult>..ctor
	|
	|-RVA: 0xABF Offset: 0xABF VA: 0xABF
	|-ReadOnlyCollection<UICharInfo>..ctor
	|
	|-RVA: 0xAC4 Offset: 0xAC4 VA: 0xAC4
	|-ReadOnlyCollection<UILineInfo>..ctor
	|
	|-RVA: 0xAC9 Offset: 0xAC9 VA: 0xAC9
	|-ReadOnlyCollection<UIVertex>..ctor
	|
	|-RVA: 0xACE Offset: 0xACE VA: 0xACE
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xAD3 Offset: 0xAD3 VA: 0xAD3
	|-ReadOnlyCollection<Vector2>..ctor
	|
	|-RVA: 0xAD8 Offset: 0xAD8 VA: 0xAD8
	|-ReadOnlyCollection<Vector3>..ctor
	|
	|-RVA: 0xADD Offset: 0xADD VA: 0xADD
	|-ReadOnlyCollection<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 34
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11A8 Offset: 0x11A8 VA: 0x11A8
	|-ReadOnlyCollection<byte>.get_Count
	|
	|-RVA: 0x11B1 Offset: 0x11B1 VA: 0x11B1
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.get_Count
	|
	|-RVA: 0x11BA Offset: 0x11BA VA: 0x11BA
	|-ReadOnlyCollection<EventProvider.SessionInfo>.get_Count
	|
	|-RVA: 0xD39 Offset: 0xD39 VA: 0xD39
	|-ReadOnlyCollection<Exception>.get_Count
	|-ReadOnlyCollection<object>.get_Count
	|-ReadOnlyCollection<ExceptionDispatchInfo>.get_Count
	|
	|-RVA: 0x11C3 Offset: 0x11C3 VA: 0x11C3
	|-ReadOnlyCollection<int>.get_Count
	|
	|-RVA: 0x11CC Offset: 0x11CC VA: 0x11CC
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.get_Count
	|
	|-RVA: 0x11D5 Offset: 0x11D5 VA: 0x11D5
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.get_Count
	|
	|-RVA: 0x11DE Offset: 0x11DE VA: 0x11DE
	|-ReadOnlyCollection<ulong>.get_Count
	|
	|-RVA: 0x11E7 Offset: 0x11E7 VA: 0x11E7
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.get_Count
	|
	|-RVA: 0x11F0 Offset: 0x11F0 VA: 0x11F0
	|-ReadOnlyCollection<Color32>.get_Count
	|
	|-RVA: 0x11F9 Offset: 0x11F9 VA: 0x11F9
	|-ReadOnlyCollection<RaycastResult>.get_Count
	|
	|-RVA: 0x1202 Offset: 0x1202 VA: 0x1202
	|-ReadOnlyCollection<UICharInfo>.get_Count
	|
	|-RVA: 0x120B Offset: 0x120B VA: 0x120B
	|-ReadOnlyCollection<UILineInfo>.get_Count
	|
	|-RVA: 0x1214 Offset: 0x1214 VA: 0x1214
	|-ReadOnlyCollection<UIVertex>.get_Count
	|
	|-RVA: 0x121D Offset: 0x121D VA: 0x121D
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.get_Count
	|
	|-RVA: 0x1226 Offset: 0x1226 VA: 0x1226
	|-ReadOnlyCollection<Vector2>.get_Count
	|
	|-RVA: 0x122F Offset: 0x122F VA: 0x122F
	|-ReadOnlyCollection<Vector3>.get_Count
	|
	|-RVA: 0x1238 Offset: 0x1238 VA: 0x1238
	|-ReadOnlyCollection<Vector4>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 33
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
	|-ReadOnlyCollection<byte>.get_Item
	|
	|-RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.get_Item
	|
	|-RVA: 0x6C9 Offset: 0x6C9 VA: 0x6C9
	|-ReadOnlyCollection<EventProvider.SessionInfo>.get_Item
	|
	|-RVA: 0x659 Offset: 0x659 VA: 0x659
	|-ReadOnlyCollection<Exception>.get_Item
	|-ReadOnlyCollection<object>.get_Item
	|-ReadOnlyCollection<ExceptionDispatchInfo>.get_Item
	|
	|-RVA: 0x8CC Offset: 0x8CC VA: 0x8CC
	|-ReadOnlyCollection<int>.get_Item
	|
	|-RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.get_Item
	|
	|-RVA: 0x6DF Offset: 0x6DF VA: 0x6DF
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.get_Item
	|
	|-RVA: 0x68 Offset: 0x68 VA: 0x68
	|-ReadOnlyCollection<ulong>.get_Item
	|
	|-RVA: 0x6EB Offset: 0x6EB VA: 0x6EB
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.get_Item
	|
	|-RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3
	|-ReadOnlyCollection<Color32>.get_Item
	|
	|-RVA: 0x6FB Offset: 0x6FB VA: 0x6FB
	|-ReadOnlyCollection<RaycastResult>.get_Item
	|
	|-RVA: 0x703 Offset: 0x703 VA: 0x703
	|-ReadOnlyCollection<UICharInfo>.get_Item
	|
	|-RVA: 0x70B Offset: 0x70B VA: 0x70B
	|-ReadOnlyCollection<UILineInfo>.get_Item
	|
	|-RVA: 0x713 Offset: 0x713 VA: 0x713
	|-ReadOnlyCollection<UIVertex>.get_Item
	|
	|-RVA: 0x71B Offset: 0x71B VA: 0x71B
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.get_Item
	|
	|-RVA: 0x723 Offset: 0x723 VA: 0x723
	|-ReadOnlyCollection<Vector2>.get_Item
	|
	|-RVA: 0x72B Offset: 0x72B VA: 0x72B
	|-ReadOnlyCollection<Vector3>.get_Item
	|
	|-RVA: 0x733 Offset: 0x733 VA: 0x733
	|-ReadOnlyCollection<Vector4>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public bool Contains(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
	|-ReadOnlyCollection<byte>.Contains
	|
	|-RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.Contains
	|
	|-RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5
	|-ReadOnlyCollection<EventProvider.SessionInfo>.Contains
	|
	|-RVA: 0x8CD Offset: 0x8CD VA: 0x8CD
	|-ReadOnlyCollection<int>.Contains
	|
	|-RVA: 0x65C Offset: 0x65C VA: 0x65C
	|-ReadOnlyCollection<object>.Contains
	|
	|-RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.Contains
	|
	|-RVA: 0x8DC Offset: 0x8DC VA: 0x8DC
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.Contains
	|
	|-RVA: 0x25 Offset: 0x25 VA: 0x25
	|-ReadOnlyCollection<ulong>.Contains
	|
	|-RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.Contains
	|
	|-RVA: 0x8EE Offset: 0x8EE VA: 0x8EE
	|-ReadOnlyCollection<Color32>.Contains
	|
	|-RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5
	|-ReadOnlyCollection<RaycastResult>.Contains
	|
	|-RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
	|-ReadOnlyCollection<UICharInfo>.Contains
	|
	|-RVA: 0x903 Offset: 0x903 VA: 0x903
	|-ReadOnlyCollection<UILineInfo>.Contains
	|
	|-RVA: 0x90A Offset: 0x90A VA: 0x90A
	|-ReadOnlyCollection<UIVertex>.Contains
	|
	|-RVA: 0x911 Offset: 0x911 VA: 0x911
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.Contains
	|
	|-RVA: 0x918 Offset: 0x918 VA: 0x918
	|-ReadOnlyCollection<Vector2>.Contains
	|
	|-RVA: 0x91F Offset: 0x91F VA: 0x91F
	|-ReadOnlyCollection<Vector3>.Contains
	|
	|-RVA: 0x926 Offset: 0x926 VA: 0x926
	|-ReadOnlyCollection<Vector4>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public void CopyTo(T[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6BB Offset: 0x6BB VA: 0x6BB
	|-ReadOnlyCollection<byte>.CopyTo
	|
	|-RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.CopyTo
	|
	|-RVA: 0x6CA Offset: 0x6CA VA: 0x6CA
	|-ReadOnlyCollection<EventProvider.SessionInfo>.CopyTo
	|
	|-RVA: 0x3FC Offset: 0x3FC VA: 0x3FC
	|-ReadOnlyCollection<Exception>.CopyTo
	|-ReadOnlyCollection<object>.CopyTo
	|
	|-RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1
	|-ReadOnlyCollection<int>.CopyTo
	|
	|-RVA: 0x6D8 Offset: 0x6D8 VA: 0x6D8
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.CopyTo
	|
	|-RVA: 0x6E0 Offset: 0x6E0 VA: 0x6E0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.CopyTo
	|
	|-RVA: 0x6E7 Offset: 0x6E7 VA: 0x6E7
	|-ReadOnlyCollection<ulong>.CopyTo
	|
	|-RVA: 0x6EC Offset: 0x6EC VA: 0x6EC
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.CopyTo
	|
	|-RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4
	|-ReadOnlyCollection<Color32>.CopyTo
	|
	|-RVA: 0x6FC Offset: 0x6FC VA: 0x6FC
	|-ReadOnlyCollection<RaycastResult>.CopyTo
	|
	|-RVA: 0x704 Offset: 0x704 VA: 0x704
	|-ReadOnlyCollection<UICharInfo>.CopyTo
	|
	|-RVA: 0x70C Offset: 0x70C VA: 0x70C
	|-ReadOnlyCollection<UILineInfo>.CopyTo
	|
	|-RVA: 0x714 Offset: 0x714 VA: 0x714
	|-ReadOnlyCollection<UIVertex>.CopyTo
	|
	|-RVA: 0x71C Offset: 0x71C VA: 0x71C
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.CopyTo
	|
	|-RVA: 0x724 Offset: 0x724 VA: 0x724
	|-ReadOnlyCollection<Vector2>.CopyTo
	|
	|-RVA: 0x72C Offset: 0x72C VA: 0x72C
	|-ReadOnlyCollection<Vector3>.CopyTo
	|
	|-RVA: 0x734 Offset: 0x734 VA: 0x734
	|-ReadOnlyCollection<Vector4>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 16
	public IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11A9 Offset: 0x11A9 VA: 0x11A9
	|-ReadOnlyCollection<byte>.GetEnumerator
	|
	|-RVA: 0x11B2 Offset: 0x11B2 VA: 0x11B2
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.GetEnumerator
	|
	|-RVA: 0x11BB Offset: 0x11BB VA: 0x11BB
	|-ReadOnlyCollection<EventProvider.SessionInfo>.GetEnumerator
	|
	|-RVA: 0xD3F Offset: 0xD3F VA: 0xD3F
	|-ReadOnlyCollection<Exception>.GetEnumerator
	|-ReadOnlyCollection<object>.GetEnumerator
	|-ReadOnlyCollection<TimeZoneInfo>.GetEnumerator
	|
	|-RVA: 0x11C4 Offset: 0x11C4 VA: 0x11C4
	|-ReadOnlyCollection<int>.GetEnumerator
	|
	|-RVA: 0x11CD Offset: 0x11CD VA: 0x11CD
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.GetEnumerator
	|
	|-RVA: 0x11D6 Offset: 0x11D6 VA: 0x11D6
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.GetEnumerator
	|
	|-RVA: 0x11DF Offset: 0x11DF VA: 0x11DF
	|-ReadOnlyCollection<ulong>.GetEnumerator
	|
	|-RVA: 0x11E8 Offset: 0x11E8 VA: 0x11E8
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.GetEnumerator
	|
	|-RVA: 0x11F1 Offset: 0x11F1 VA: 0x11F1
	|-ReadOnlyCollection<Color32>.GetEnumerator
	|
	|-RVA: 0x11FA Offset: 0x11FA VA: 0x11FA
	|-ReadOnlyCollection<RaycastResult>.GetEnumerator
	|
	|-RVA: 0x1203 Offset: 0x1203 VA: 0x1203
	|-ReadOnlyCollection<UICharInfo>.GetEnumerator
	|
	|-RVA: 0x120C Offset: 0x120C VA: 0x120C
	|-ReadOnlyCollection<UILineInfo>.GetEnumerator
	|
	|-RVA: 0x1215 Offset: 0x1215 VA: 0x1215
	|-ReadOnlyCollection<UIVertex>.GetEnumerator
	|
	|-RVA: 0x121E Offset: 0x121E VA: 0x121E
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.GetEnumerator
	|
	|-RVA: 0x1227 Offset: 0x1227 VA: 0x1227
	|-ReadOnlyCollection<Vector2>.GetEnumerator
	|
	|-RVA: 0x1230 Offset: 0x1230 VA: 0x1230
	|-ReadOnlyCollection<Vector3>.GetEnumerator
	|
	|-RVA: 0x1239 Offset: 0x1239 VA: 0x1239
	|-ReadOnlyCollection<Vector4>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public int IndexOf(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7
	|-ReadOnlyCollection<byte>.IndexOf
	|
	|-RVA: 0x8BF Offset: 0x8BF VA: 0x8BF
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.IndexOf
	|
	|-RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6
	|-ReadOnlyCollection<EventProvider.SessionInfo>.IndexOf
	|
	|-RVA: 0x8CE Offset: 0x8CE VA: 0x8CE
	|-ReadOnlyCollection<int>.IndexOf
	|
	|-RVA: 0x65D Offset: 0x65D VA: 0x65D
	|-ReadOnlyCollection<object>.IndexOf
	|
	|-RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.IndexOf
	|
	|-RVA: 0x8DD Offset: 0x8DD VA: 0x8DD
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.IndexOf
	|
	|-RVA: 0x26 Offset: 0x26 VA: 0x26
	|-ReadOnlyCollection<ulong>.IndexOf
	|
	|-RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0x8EF Offset: 0x8EF VA: 0x8EF
	|-ReadOnlyCollection<Color32>.IndexOf
	|
	|-RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6
	|-ReadOnlyCollection<RaycastResult>.IndexOf
	|
	|-RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
	|-ReadOnlyCollection<UICharInfo>.IndexOf
	|
	|-RVA: 0x904 Offset: 0x904 VA: 0x904
	|-ReadOnlyCollection<UILineInfo>.IndexOf
	|
	|-RVA: 0x90B Offset: 0x90B VA: 0x90B
	|-ReadOnlyCollection<UIVertex>.IndexOf
	|
	|-RVA: 0x912 Offset: 0x912 VA: 0x912
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0x919 Offset: 0x919 VA: 0x919
	|-ReadOnlyCollection<Vector2>.IndexOf
	|
	|-RVA: 0x920 Offset: 0x920 VA: 0x920
	|-ReadOnlyCollection<Vector3>.IndexOf
	|
	|-RVA: 0x927 Offset: 0x927 VA: 0x927
	|-ReadOnlyCollection<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11AA Offset: 0x11AA VA: 0x11AA
	|-ReadOnlyCollection<byte>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11B3 Offset: 0x11B3 VA: 0x11B3
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11BC Offset: 0x11BC VA: 0x11BC
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11C5 Offset: 0x11C5 VA: 0x11C5
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0xD3A Offset: 0xD3A VA: 0xD3A
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11CE Offset: 0x11CE VA: 0x11CE
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11D7 Offset: 0x11D7 VA: 0x11D7
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11E0 Offset: 0x11E0 VA: 0x11E0
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11E9 Offset: 0x11E9 VA: 0x11E9
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11F2 Offset: 0x11F2 VA: 0x11F2
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x11FB Offset: 0x11FB VA: 0x11FB
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1204 Offset: 0x1204 VA: 0x1204
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x120D Offset: 0x120D VA: 0x120D
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1216 Offset: 0x1216 VA: 0x1216
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x121F Offset: 0x121F VA: 0x121F
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1228 Offset: 0x1228 VA: 0x1228
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1231 Offset: 0x1231 VA: 0x1231
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x123A Offset: 0x123A VA: 0x123A
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private T System.Collections.Generic.IList<T>.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8
	|-ReadOnlyCollection<byte>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6C3 Offset: 0x6C3 VA: 0x6C3
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6CB Offset: 0x6CB VA: 0x6CB
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x8CF Offset: 0x8CF VA: 0x8CF
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x65A Offset: 0x65A VA: 0x65A
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6D9 Offset: 0x6D9 VA: 0x6D9
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6E1 Offset: 0x6E1 VA: 0x6E1
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x69 Offset: 0x69 VA: 0x69
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6ED Offset: 0x6ED VA: 0x6ED
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6F5 Offset: 0x6F5 VA: 0x6F5
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x6FD Offset: 0x6FD VA: 0x6FD
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x705 Offset: 0x705 VA: 0x705
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x70D Offset: 0x70D VA: 0x70D
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x715 Offset: 0x715 VA: 0x715
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x71D Offset: 0x71D VA: 0x71D
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x725 Offset: 0x725 VA: 0x725
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x72D Offset: 0x72D VA: 0x72D
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.get_Item
	|
	|-RVA: 0x735 Offset: 0x735 VA: 0x735
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private void System.Collections.Generic.IList<T>.set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6BC Offset: 0x6BC VA: 0x6BC
	|-ReadOnlyCollection<byte>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6C4 Offset: 0x6C4 VA: 0x6C4
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6CC Offset: 0x6CC VA: 0x6CC
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x3FA Offset: 0x3FA VA: 0x3FA
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6DA Offset: 0x6DA VA: 0x6DA
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6E2 Offset: 0x6E2 VA: 0x6E2
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x19 Offset: 0x19 VA: 0x19
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6F6 Offset: 0x6F6 VA: 0x6F6
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x6FE Offset: 0x6FE VA: 0x6FE
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x706 Offset: 0x706 VA: 0x706
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x70E Offset: 0x70E VA: 0x70E
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x716 Offset: 0x716 VA: 0x716
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x71E Offset: 0x71E VA: 0x71E
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x726 Offset: 0x726 VA: 0x726
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x72E Offset: 0x72E VA: 0x72E
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.set_Item
	|
	|-RVA: 0x736 Offset: 0x736 VA: 0x736
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private void System.Collections.Generic.ICollection<T>.Add(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA90 Offset: 0xA90 VA: 0xA90
	|-ReadOnlyCollection<byte>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xA95 Offset: 0xA95 VA: 0xA95
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xA9A Offset: 0xA9A VA: 0xA9A
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xA9F Offset: 0xA9F VA: 0xA9F
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x806 Offset: 0x806 VA: 0x806
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAA4 Offset: 0xAA4 VA: 0xAA4
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAA8 Offset: 0xAA8 VA: 0xAA8
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0x27 Offset: 0x27 VA: 0x27
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAB1 Offset: 0xAB1 VA: 0xAB1
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAB6 Offset: 0xAB6 VA: 0xAB6
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xABB Offset: 0xABB VA: 0xABB
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAC0 Offset: 0xAC0 VA: 0xAC0
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAC5 Offset: 0xAC5 VA: 0xAC5
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xACA Offset: 0xACA VA: 0xACA
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xACF Offset: 0xACF VA: 0xACF
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAD4 Offset: 0xAD4 VA: 0xAD4
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xAD9 Offset: 0xAD9 VA: 0xAD9
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.Add
	|
	|-RVA: 0xADE Offset: 0xADE VA: 0xADE
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.Generic.ICollection<T>.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAE7 Offset: 0xAE7 VA: 0xAE7
	|-ReadOnlyCollection<byte>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAE9 Offset: 0xAE9 VA: 0xAE9
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAEB Offset: 0xAEB VA: 0xAEB
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAED Offset: 0xAED VA: 0xAED
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAEF Offset: 0xAEF VA: 0xAEF
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAF1 Offset: 0xAF1 VA: 0xAF1
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAF3 Offset: 0xAF3 VA: 0xAF3
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAF5 Offset: 0xAF5 VA: 0xAF5
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAF7 Offset: 0xAF7 VA: 0xAF7
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAF9 Offset: 0xAF9 VA: 0xAF9
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAFB Offset: 0xAFB VA: 0xAFB
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAFD Offset: 0xAFD VA: 0xAFD
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xAFF Offset: 0xAFF VA: 0xAFF
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xB01 Offset: 0xB01 VA: 0xB01
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xB03 Offset: 0xB03 VA: 0xB03
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xB05 Offset: 0xB05 VA: 0xB05
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.Clear
	|
	|-RVA: 0xB07 Offset: 0xB07 VA: 0xB07
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private void System.Collections.Generic.IList<T>.Insert(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6BD Offset: 0x6BD VA: 0x6BD
	|-ReadOnlyCollection<byte>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6C5 Offset: 0x6C5 VA: 0x6C5
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6CD Offset: 0x6CD VA: 0x6CD
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6D3 Offset: 0x6D3 VA: 0x6D3
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x3FD Offset: 0x3FD VA: 0x3FD
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6DB Offset: 0x6DB VA: 0x6DB
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6E3 Offset: 0x6E3 VA: 0x6E3
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x1A Offset: 0x1A VA: 0x1A
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6EF Offset: 0x6EF VA: 0x6EF
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6F7 Offset: 0x6F7 VA: 0x6F7
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x6FF Offset: 0x6FF VA: 0x6FF
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x707 Offset: 0x707 VA: 0x707
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x70F Offset: 0x70F VA: 0x70F
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x717 Offset: 0x717 VA: 0x717
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x71F Offset: 0x71F VA: 0x71F
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x727 Offset: 0x727 VA: 0x727
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x72F Offset: 0x72F VA: 0x72F
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.Insert
	|
	|-RVA: 0x737 Offset: 0x737 VA: 0x737
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private bool System.Collections.Generic.ICollection<T>.Remove(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9
	|-ReadOnlyCollection<byte>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0
	|-ReadOnlyCollection<int>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x65E Offset: 0x65E VA: 0x65E
	|-ReadOnlyCollection<object>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x27 Offset: 0x27 VA: 0x27
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x905 Offset: 0x905 VA: 0x905
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x90C Offset: 0x90C VA: 0x90C
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x913 Offset: 0x913 VA: 0x913
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x91A Offset: 0x91A VA: 0x91A
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x921 Offset: 0x921 VA: 0x921
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.ICollection<T>.Remove
	|
	|-RVA: 0x928 Offset: 0x928 VA: 0x928
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.ICollection<T>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA91 Offset: 0xA91 VA: 0xA91
	|-ReadOnlyCollection<byte>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xA96 Offset: 0xA96 VA: 0xA96
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xA9B Offset: 0xA9B VA: 0xA9B
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAA0 Offset: 0xAA0 VA: 0xAA0
	|-ReadOnlyCollection<int>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0x807 Offset: 0x807 VA: 0x807
	|-ReadOnlyCollection<object>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAA5 Offset: 0xAA5 VA: 0xAA5
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAA9 Offset: 0xAA9 VA: 0xAA9
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAAD Offset: 0xAAD VA: 0xAAD
	|-ReadOnlyCollection<ulong>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAB2 Offset: 0xAB2 VA: 0xAB2
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAB7 Offset: 0xAB7 VA: 0xAB7
	|-ReadOnlyCollection<Color32>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xABC Offset: 0xABC VA: 0xABC
	|-ReadOnlyCollection<RaycastResult>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAC1 Offset: 0xAC1 VA: 0xAC1
	|-ReadOnlyCollection<UICharInfo>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAC6 Offset: 0xAC6 VA: 0xAC6
	|-ReadOnlyCollection<UILineInfo>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xACB Offset: 0xACB VA: 0xACB
	|-ReadOnlyCollection<UIVertex>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAD0 Offset: 0xAD0 VA: 0xAD0
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xAD5 Offset: 0xAD5 VA: 0xAD5
	|-ReadOnlyCollection<Vector2>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xADA Offset: 0xADA VA: 0xADA
	|-ReadOnlyCollection<Vector3>.System.Collections.Generic.IList<T>.RemoveAt
	|
	|-RVA: 0xADF Offset: 0xADF VA: 0xADF
	|-ReadOnlyCollection<Vector4>.System.Collections.Generic.IList<T>.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11AB Offset: 0x11AB VA: 0x11AB
	|-ReadOnlyCollection<byte>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11B4 Offset: 0x11B4 VA: 0x11B4
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11BD Offset: 0x11BD VA: 0x11BD
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11C6 Offset: 0x11C6 VA: 0x11C6
	|-ReadOnlyCollection<int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0xD40 Offset: 0xD40 VA: 0xD40
	|-ReadOnlyCollection<object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11CF Offset: 0x11CF VA: 0x11CF
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11D8 Offset: 0x11D8 VA: 0x11D8
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11E1 Offset: 0x11E1 VA: 0x11E1
	|-ReadOnlyCollection<ulong>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11EA Offset: 0x11EA VA: 0x11EA
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11F3 Offset: 0x11F3 VA: 0x11F3
	|-ReadOnlyCollection<Color32>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x11FC Offset: 0x11FC VA: 0x11FC
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1205 Offset: 0x1205 VA: 0x1205
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x120E Offset: 0x120E VA: 0x120E
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1217 Offset: 0x1217 VA: 0x1217
	|-ReadOnlyCollection<UIVertex>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1220 Offset: 0x1220 VA: 0x1220
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1229 Offset: 0x1229 VA: 0x1229
	|-ReadOnlyCollection<Vector2>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1232 Offset: 0x1232 VA: 0x1232
	|-ReadOnlyCollection<Vector3>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x123B Offset: 0x123B VA: 0x123B
	|-ReadOnlyCollection<Vector4>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 32
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11AC Offset: 0x11AC VA: 0x11AC
	|-ReadOnlyCollection<byte>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11B5 Offset: 0x11B5 VA: 0x11B5
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11BE Offset: 0x11BE VA: 0x11BE
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11C7 Offset: 0x11C7 VA: 0x11C7
	|-ReadOnlyCollection<int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0xD3B Offset: 0xD3B VA: 0xD3B
	|-ReadOnlyCollection<object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11D0 Offset: 0x11D0 VA: 0x11D0
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11D9 Offset: 0x11D9 VA: 0x11D9
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11E2 Offset: 0x11E2 VA: 0x11E2
	|-ReadOnlyCollection<ulong>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11EB Offset: 0x11EB VA: 0x11EB
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11F4 Offset: 0x11F4 VA: 0x11F4
	|-ReadOnlyCollection<Color32>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x11FD Offset: 0x11FD VA: 0x11FD
	|-ReadOnlyCollection<RaycastResult>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1206 Offset: 0x1206 VA: 0x1206
	|-ReadOnlyCollection<UICharInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x120F Offset: 0x120F VA: 0x120F
	|-ReadOnlyCollection<UILineInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1218 Offset: 0x1218 VA: 0x1218
	|-ReadOnlyCollection<UIVertex>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1221 Offset: 0x1221 VA: 0x1221
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x122A Offset: 0x122A VA: 0x122A
	|-ReadOnlyCollection<Vector2>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1233 Offset: 0x1233 VA: 0x1233
	|-ReadOnlyCollection<Vector3>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x123C Offset: 0x123C VA: 0x123C
	|-ReadOnlyCollection<Vector4>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 31
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11AD Offset: 0x11AD VA: 0x11AD
	|-ReadOnlyCollection<byte>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11B6 Offset: 0x11B6 VA: 0x11B6
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11BF Offset: 0x11BF VA: 0x11BF
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11C8 Offset: 0x11C8 VA: 0x11C8
	|-ReadOnlyCollection<int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0xD3C Offset: 0xD3C VA: 0xD3C
	|-ReadOnlyCollection<object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11D1 Offset: 0x11D1 VA: 0x11D1
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11DA Offset: 0x11DA VA: 0x11DA
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11E3 Offset: 0x11E3 VA: 0x11E3
	|-ReadOnlyCollection<ulong>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11EC Offset: 0x11EC VA: 0x11EC
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11F5 Offset: 0x11F5 VA: 0x11F5
	|-ReadOnlyCollection<Color32>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x11FE Offset: 0x11FE VA: 0x11FE
	|-ReadOnlyCollection<RaycastResult>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1207 Offset: 0x1207 VA: 0x1207
	|-ReadOnlyCollection<UICharInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1210 Offset: 0x1210 VA: 0x1210
	|-ReadOnlyCollection<UILineInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1219 Offset: 0x1219 VA: 0x1219
	|-ReadOnlyCollection<UIVertex>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1222 Offset: 0x1222 VA: 0x1222
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x122B Offset: 0x122B VA: 0x122B
	|-ReadOnlyCollection<Vector2>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1234 Offset: 0x1234 VA: 0x1234
	|-ReadOnlyCollection<Vector3>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x123D Offset: 0x123D VA: 0x123D
	|-ReadOnlyCollection<Vector4>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 29
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6BE Offset: 0x6BE VA: 0x6BE
	|-ReadOnlyCollection<byte>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6C6 Offset: 0x6C6 VA: 0x6C6
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4
	|-ReadOnlyCollection<int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x3FE Offset: 0x3FE VA: 0x3FE
	|-ReadOnlyCollection<object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6DC Offset: 0x6DC VA: 0x6DC
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6E4 Offset: 0x6E4 VA: 0x6E4
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6E8 Offset: 0x6E8 VA: 0x6E8
	|-ReadOnlyCollection<ulong>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6F8 Offset: 0x6F8 VA: 0x6F8
	|-ReadOnlyCollection<Color32>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x700 Offset: 0x700 VA: 0x700
	|-ReadOnlyCollection<RaycastResult>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x708 Offset: 0x708 VA: 0x708
	|-ReadOnlyCollection<UICharInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x710 Offset: 0x710 VA: 0x710
	|-ReadOnlyCollection<UILineInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x718 Offset: 0x718 VA: 0x718
	|-ReadOnlyCollection<UIVertex>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x720 Offset: 0x720 VA: 0x720
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x728 Offset: 0x728 VA: 0x728
	|-ReadOnlyCollection<Vector2>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x730 Offset: 0x730 VA: 0x730
	|-ReadOnlyCollection<Vector3>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x738 Offset: 0x738 VA: 0x738
	|-ReadOnlyCollection<Vector4>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 24
	private bool System.Collections.IList.get_IsFixedSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11AE Offset: 0x11AE VA: 0x11AE
	|-ReadOnlyCollection<byte>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11B7 Offset: 0x11B7 VA: 0x11B7
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11C0 Offset: 0x11C0 VA: 0x11C0
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11C9 Offset: 0x11C9 VA: 0x11C9
	|-ReadOnlyCollection<int>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0xD3D Offset: 0xD3D VA: 0xD3D
	|-ReadOnlyCollection<object>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11D2 Offset: 0x11D2 VA: 0x11D2
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11DB Offset: 0x11DB VA: 0x11DB
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11E4 Offset: 0x11E4 VA: 0x11E4
	|-ReadOnlyCollection<ulong>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11ED Offset: 0x11ED VA: 0x11ED
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11F6 Offset: 0x11F6 VA: 0x11F6
	|-ReadOnlyCollection<Color32>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x11FF Offset: 0x11FF VA: 0x11FF
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1208 Offset: 0x1208 VA: 0x1208
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1211 Offset: 0x1211 VA: 0x1211
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x121A Offset: 0x121A VA: 0x121A
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1223 Offset: 0x1223 VA: 0x1223
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x122C Offset: 0x122C VA: 0x122C
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1235 Offset: 0x1235 VA: 0x1235
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x123E Offset: 0x123E VA: 0x123E
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.get_IsFixedSize
	*/

	// RVA: -1 Offset: -1 Slot: 23
	private bool System.Collections.IList.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11AF Offset: 0x11AF VA: 0x11AF
	|-ReadOnlyCollection<byte>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11B8 Offset: 0x11B8 VA: 0x11B8
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11C1 Offset: 0x11C1 VA: 0x11C1
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11CA Offset: 0x11CA VA: 0x11CA
	|-ReadOnlyCollection<int>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0xD3E Offset: 0xD3E VA: 0xD3E
	|-ReadOnlyCollection<object>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11D3 Offset: 0x11D3 VA: 0x11D3
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11DC Offset: 0x11DC VA: 0x11DC
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11E5 Offset: 0x11E5 VA: 0x11E5
	|-ReadOnlyCollection<ulong>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11EE Offset: 0x11EE VA: 0x11EE
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x11F7 Offset: 0x11F7 VA: 0x11F7
	|-ReadOnlyCollection<Color32>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1200 Offset: 0x1200 VA: 0x1200
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1209 Offset: 0x1209 VA: 0x1209
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1212 Offset: 0x1212 VA: 0x1212
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x121B Offset: 0x121B VA: 0x121B
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1224 Offset: 0x1224 VA: 0x1224
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x122D Offset: 0x122D VA: 0x122D
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1236 Offset: 0x1236 VA: 0x1236
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x123F Offset: 0x123F VA: 0x123F
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private object System.Collections.IList.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8BA Offset: 0x8BA VA: 0x8BA
	|-ReadOnlyCollection<byte>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1
	|-ReadOnlyCollection<int>.System.Collections.IList.get_Item
	|
	|-RVA: 0x65B Offset: 0x65B VA: 0x65B
	|-ReadOnlyCollection<object>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8DF Offset: 0x8DF VA: 0x8DF
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3
	|-ReadOnlyCollection<ulong>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8EA Offset: 0x8EA VA: 0x8EA
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
	|-ReadOnlyCollection<Color32>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.get_Item
	|
	|-RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x906 Offset: 0x906 VA: 0x906
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x90D Offset: 0x90D VA: 0x90D
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.get_Item
	|
	|-RVA: 0x914 Offset: 0x914 VA: 0x914
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_Item
	|
	|-RVA: 0x91B Offset: 0x91B VA: 0x91B
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.get_Item
	|
	|-RVA: 0x922 Offset: 0x922 VA: 0x922
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.get_Item
	|
	|-RVA: 0x929 Offset: 0x929 VA: 0x929
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 19
	private void System.Collections.IList.set_Item(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6BF Offset: 0x6BF VA: 0x6BF
	|-ReadOnlyCollection<byte>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6C7 Offset: 0x6C7 VA: 0x6C7
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6CF Offset: 0x6CF VA: 0x6CF
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5
	|-ReadOnlyCollection<int>.System.Collections.IList.set_Item
	|
	|-RVA: 0x3FB Offset: 0x3FB VA: 0x3FB
	|-ReadOnlyCollection<object>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6DD Offset: 0x6DD VA: 0x6DD
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6E9 Offset: 0x6E9 VA: 0x6E9
	|-ReadOnlyCollection<ulong>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6F9 Offset: 0x6F9 VA: 0x6F9
	|-ReadOnlyCollection<Color32>.System.Collections.IList.set_Item
	|
	|-RVA: 0x701 Offset: 0x701 VA: 0x701
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.set_Item
	|
	|-RVA: 0x709 Offset: 0x709 VA: 0x709
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x711 Offset: 0x711 VA: 0x711
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x719 Offset: 0x719 VA: 0x719
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.set_Item
	|
	|-RVA: 0x721 Offset: 0x721 VA: 0x721
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.set_Item
	|
	|-RVA: 0x729 Offset: 0x729 VA: 0x729
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.set_Item
	|
	|-RVA: 0x731 Offset: 0x731 VA: 0x731
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.set_Item
	|
	|-RVA: 0x739 Offset: 0x739 VA: 0x739
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 20
	private int System.Collections.IList.Add(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8BB Offset: 0x8BB VA: 0x8BB
	|-ReadOnlyCollection<byte>.System.Collections.IList.Add
	|
	|-RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.Add
	|
	|-RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2
	|-ReadOnlyCollection<int>.System.Collections.IList.Add
	|
	|-RVA: 0x65F Offset: 0x65F VA: 0x65F
	|-ReadOnlyCollection<object>.System.Collections.IList.Add
	|
	|-RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Add
	|
	|-RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4
	|-ReadOnlyCollection<ulong>.System.Collections.IList.Add
	|
	|-RVA: 0x8EB Offset: 0x8EB VA: 0x8EB
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Add
	|
	|-RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Add
	|
	|-RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Add
	|
	|-RVA: 0x900 Offset: 0x900 VA: 0x900
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x907 Offset: 0x907 VA: 0x907
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x90E Offset: 0x90E VA: 0x90E
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Add
	|
	|-RVA: 0x915 Offset: 0x915 VA: 0x915
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Add
	|
	|-RVA: 0x91C Offset: 0x91C VA: 0x91C
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Add
	|
	|-RVA: 0x923 Offset: 0x923 VA: 0x923
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Add
	|
	|-RVA: 0x92A Offset: 0x92A VA: 0x92A
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Add
	*/

	// RVA: -1 Offset: -1 Slot: 22
	private void System.Collections.IList.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAE8 Offset: 0xAE8 VA: 0xAE8
	|-ReadOnlyCollection<byte>.System.Collections.IList.Clear
	|
	|-RVA: 0xAEA Offset: 0xAEA VA: 0xAEA
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.Clear
	|
	|-RVA: 0xAEC Offset: 0xAEC VA: 0xAEC
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.Clear
	|
	|-RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	|-ReadOnlyCollection<int>.System.Collections.IList.Clear
	|
	|-RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4
	|-ReadOnlyCollection<object>.System.Collections.IList.Clear
	|
	|-RVA: 0xAF0 Offset: 0xAF0 VA: 0xAF0
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Clear
	|
	|-RVA: 0xAF2 Offset: 0xAF2 VA: 0xAF2
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Clear
	|
	|-RVA: 0xAF4 Offset: 0xAF4 VA: 0xAF4
	|-ReadOnlyCollection<ulong>.System.Collections.IList.Clear
	|
	|-RVA: 0xAF6 Offset: 0xAF6 VA: 0xAF6
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Clear
	|
	|-RVA: 0xAF8 Offset: 0xAF8 VA: 0xAF8
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Clear
	|
	|-RVA: 0xAFA Offset: 0xAFA VA: 0xAFA
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Clear
	|
	|-RVA: 0xAFC Offset: 0xAFC VA: 0xAFC
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Clear
	|
	|-RVA: 0xAFE Offset: 0xAFE VA: 0xAFE
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Clear
	|
	|-RVA: 0xB00 Offset: 0xB00 VA: 0xB00
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Clear
	|
	|-RVA: 0xB02 Offset: 0xB02 VA: 0xB02
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Clear
	|
	|-RVA: 0xB04 Offset: 0xB04 VA: 0xB04
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Clear
	|
	|-RVA: 0xB06 Offset: 0xB06 VA: 0xB06
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Clear
	|
	|-RVA: 0xB08 Offset: 0xB08 VA: 0xB08
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Clear
	*/

	// RVA: -1 Offset: -1
	private static bool IsCompatibleObject(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x11B0 Offset: 0x11B0 VA: 0x11B0
	|-ReadOnlyCollection<byte>.IsCompatibleObject
	|
	|-RVA: 0x11B9 Offset: 0x11B9 VA: 0x11B9
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.IsCompatibleObject
	|
	|-RVA: 0x11C2 Offset: 0x11C2 VA: 0x11C2
	|-ReadOnlyCollection<EventProvider.SessionInfo>.IsCompatibleObject
	|
	|-RVA: 0x11CB Offset: 0x11CB VA: 0x11CB
	|-ReadOnlyCollection<int>.IsCompatibleObject
	|
	|-RVA: 0xD41 Offset: 0xD41 VA: 0xD41
	|-ReadOnlyCollection<object>.IsCompatibleObject
	|
	|-RVA: 0x11D4 Offset: 0x11D4 VA: 0x11D4
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.IsCompatibleObject
	|
	|-RVA: 0x11DD Offset: 0x11DD VA: 0x11DD
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.IsCompatibleObject
	|
	|-RVA: 0x11E6 Offset: 0x11E6 VA: 0x11E6
	|-ReadOnlyCollection<ulong>.IsCompatibleObject
	|
	|-RVA: 0x11EF Offset: 0x11EF VA: 0x11EF
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.IsCompatibleObject
	|
	|-RVA: 0x11F8 Offset: 0x11F8 VA: 0x11F8
	|-ReadOnlyCollection<Color32>.IsCompatibleObject
	|
	|-RVA: 0x1201 Offset: 0x1201 VA: 0x1201
	|-ReadOnlyCollection<RaycastResult>.IsCompatibleObject
	|
	|-RVA: 0x120A Offset: 0x120A VA: 0x120A
	|-ReadOnlyCollection<UICharInfo>.IsCompatibleObject
	|
	|-RVA: 0x1213 Offset: 0x1213 VA: 0x1213
	|-ReadOnlyCollection<UILineInfo>.IsCompatibleObject
	|
	|-RVA: 0x121C Offset: 0x121C VA: 0x121C
	|-ReadOnlyCollection<UIVertex>.IsCompatibleObject
	|
	|-RVA: 0x1225 Offset: 0x1225 VA: 0x1225
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.IsCompatibleObject
	|
	|-RVA: 0x122E Offset: 0x122E VA: 0x122E
	|-ReadOnlyCollection<Vector2>.IsCompatibleObject
	|
	|-RVA: 0x1237 Offset: 0x1237 VA: 0x1237
	|-ReadOnlyCollection<Vector3>.IsCompatibleObject
	|
	|-RVA: 0x1240 Offset: 0x1240 VA: 0x1240
	|-ReadOnlyCollection<Vector4>.IsCompatibleObject
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.IList.Contains(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8BC Offset: 0x8BC VA: 0x8BC
	|-ReadOnlyCollection<byte>.System.Collections.IList.Contains
	|
	|-RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.Contains
	|
	|-RVA: 0x8CA Offset: 0x8CA VA: 0x8CA
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3
	|-ReadOnlyCollection<int>.System.Collections.IList.Contains
	|
	|-RVA: 0x660 Offset: 0x660 VA: 0x660
	|-ReadOnlyCollection<object>.System.Collections.IList.Contains
	|
	|-RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Contains
	|
	|-RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5
	|-ReadOnlyCollection<ulong>.System.Collections.IList.Contains
	|
	|-RVA: 0x8EC Offset: 0x8EC VA: 0x8EC
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Contains
	|
	|-RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Contains
	|
	|-RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Contains
	|
	|-RVA: 0x901 Offset: 0x901 VA: 0x901
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x908 Offset: 0x908 VA: 0x908
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x90F Offset: 0x90F VA: 0x90F
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Contains
	|
	|-RVA: 0x916 Offset: 0x916 VA: 0x916
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Contains
	|
	|-RVA: 0x91D Offset: 0x91D VA: 0x91D
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Contains
	|
	|-RVA: 0x924 Offset: 0x924 VA: 0x924
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Contains
	|
	|-RVA: 0x92B Offset: 0x92B VA: 0x92B
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 25
	private int System.Collections.IList.IndexOf(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
	|-ReadOnlyCollection<byte>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8CB Offset: 0x8CB VA: 0x8CB
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4
	|-ReadOnlyCollection<int>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x661 Offset: 0x661 VA: 0x661
	|-ReadOnlyCollection<object>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6
	|-ReadOnlyCollection<ulong>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8ED Offset: 0x8ED VA: 0x8ED
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4
	|-ReadOnlyCollection<Color32>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x902 Offset: 0x902 VA: 0x902
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x909 Offset: 0x909 VA: 0x909
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x910 Offset: 0x910 VA: 0x910
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x917 Offset: 0x917 VA: 0x917
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x91E Offset: 0x91E VA: 0x91E
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x925 Offset: 0x925 VA: 0x925
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x92C Offset: 0x92C VA: 0x92C
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 26
	private void System.Collections.IList.Insert(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0
	|-ReadOnlyCollection<byte>.System.Collections.IList.Insert
	|
	|-RVA: 0x6C8 Offset: 0x6C8 VA: 0x6C8
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.Insert
	|
	|-RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6
	|-ReadOnlyCollection<int>.System.Collections.IList.Insert
	|
	|-RVA: 0x3FF Offset: 0x3FF VA: 0x3FF
	|-ReadOnlyCollection<object>.System.Collections.IList.Insert
	|
	|-RVA: 0x6DE Offset: 0x6DE VA: 0x6DE
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x6E6 Offset: 0x6E6 VA: 0x6E6
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Insert
	|
	|-RVA: 0x6EA Offset: 0x6EA VA: 0x6EA
	|-ReadOnlyCollection<ulong>.System.Collections.IList.Insert
	|
	|-RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Insert
	|
	|-RVA: 0x6FA Offset: 0x6FA VA: 0x6FA
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Insert
	|
	|-RVA: 0x702 Offset: 0x702 VA: 0x702
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Insert
	|
	|-RVA: 0x70A Offset: 0x70A VA: 0x70A
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x712 Offset: 0x712 VA: 0x712
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x71A Offset: 0x71A VA: 0x71A
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Insert
	|
	|-RVA: 0x722 Offset: 0x722 VA: 0x722
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Insert
	|
	|-RVA: 0x72A Offset: 0x72A VA: 0x72A
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Insert
	|
	|-RVA: 0x732 Offset: 0x732 VA: 0x732
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Insert
	|
	|-RVA: 0x73A Offset: 0x73A VA: 0x73A
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 27
	private void System.Collections.IList.Remove(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA92 Offset: 0xA92 VA: 0xA92
	|-ReadOnlyCollection<byte>.System.Collections.IList.Remove
	|
	|-RVA: 0xA97 Offset: 0xA97 VA: 0xA97
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.Remove
	|
	|-RVA: 0xA9C Offset: 0xA9C VA: 0xA9C
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0xAA1 Offset: 0xAA1 VA: 0xAA1
	|-ReadOnlyCollection<int>.System.Collections.IList.Remove
	|
	|-RVA: 0x808 Offset: 0x808 VA: 0x808
	|-ReadOnlyCollection<object>.System.Collections.IList.Remove
	|
	|-RVA: 0xAA6 Offset: 0xAA6 VA: 0xAA6
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.Remove
	|
	|-RVA: 0xAAE Offset: 0xAAE VA: 0xAAE
	|-ReadOnlyCollection<ulong>.System.Collections.IList.Remove
	|
	|-RVA: 0xAB3 Offset: 0xAB3 VA: 0xAB3
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Remove
	|
	|-RVA: 0xAB8 Offset: 0xAB8 VA: 0xAB8
	|-ReadOnlyCollection<Color32>.System.Collections.IList.Remove
	|
	|-RVA: 0xABD Offset: 0xABD VA: 0xABD
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.Remove
	|
	|-RVA: 0xAC2 Offset: 0xAC2 VA: 0xAC2
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0xAC7 Offset: 0xAC7 VA: 0xAC7
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0xACC Offset: 0xACC VA: 0xACC
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.Remove
	|
	|-RVA: 0xAD1 Offset: 0xAD1 VA: 0xAD1
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Remove
	|
	|-RVA: 0xAD6 Offset: 0xAD6 VA: 0xAD6
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.Remove
	|
	|-RVA: 0xADB Offset: 0xADB VA: 0xADB
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.Remove
	|
	|-RVA: 0xAE0 Offset: 0xAE0 VA: 0xAE0
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 28
	private void System.Collections.IList.RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA93 Offset: 0xA93 VA: 0xA93
	|-ReadOnlyCollection<byte>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xA98 Offset: 0xA98 VA: 0xA98
	|-ReadOnlyCollection<KeyValuePair<DateTime, object>>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xA9D Offset: 0xA9D VA: 0xA9D
	|-ReadOnlyCollection<EventProvider.SessionInfo>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAA2 Offset: 0xAA2 VA: 0xAA2
	|-ReadOnlyCollection<int>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0x809 Offset: 0x809 VA: 0x809
	|-ReadOnlyCollection<object>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAA7 Offset: 0xAA7 VA: 0xAA7
	|-ReadOnlyCollection<CustomAttributeNamedArgument>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAAB Offset: 0xAAB VA: 0xAAB
	|-ReadOnlyCollection<CustomAttributeTypedArgument>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAAF Offset: 0xAAF VA: 0xAAF
	|-ReadOnlyCollection<ulong>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAB4 Offset: 0xAB4 VA: 0xAB4
	|-ReadOnlyCollection<BeforeRenderHelper.OrderBlock>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAB9 Offset: 0xAB9 VA: 0xAB9
	|-ReadOnlyCollection<Color32>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xABE Offset: 0xABE VA: 0xABE
	|-ReadOnlyCollection<RaycastResult>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAC3 Offset: 0xAC3 VA: 0xAC3
	|-ReadOnlyCollection<UICharInfo>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAC8 Offset: 0xAC8 VA: 0xAC8
	|-ReadOnlyCollection<UILineInfo>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xACD Offset: 0xACD VA: 0xACD
	|-ReadOnlyCollection<UIVertex>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAD2 Offset: 0xAD2 VA: 0xAD2
	|-ReadOnlyCollection<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAD7 Offset: 0xAD7 VA: 0xAD7
	|-ReadOnlyCollection<Vector2>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xADC Offset: 0xADC VA: 0xADC
	|-ReadOnlyCollection<Vector3>.System.Collections.IList.RemoveAt
	|
	|-RVA: 0xAE1 Offset: 0xAE1 VA: 0xAE1
	|-ReadOnlyCollection<Vector4>.System.Collections.IList.RemoveAt
	*/
}

// Namespace: System.Collections.Concurrent
[EventSourceAttribute] // RVA: 0x4EB Offset: 0x4EB VA: 0x4EB
internal sealed class CDSCollectionETWBCLProvider : EventSource // TypeDefIndex: 1193
{
	// Fields
	public static CDSCollectionETWBCLProvider Log; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6
	private void .ctor() { }

	[EventAttribute] // RVA: 0x786 Offset: 0x786 VA: 0x786
	// RVA: 0xBE Offset: 0xBE VA: 0xBE
	public void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets) { }

	// RVA: 0xE5C Offset: 0xE5C VA: 0xE5C
	private static void .cctor() { }
}

// Namespace: System.Collections.Concurrent
[DebuggerTypeProxyAttribute] // RVA: 0x4EC Offset: 0x4EC VA: 0x4EC
[DebuggerDisplayAttribute] // RVA: 0x4EC Offset: 0x4EC VA: 0x4EC
[DefaultMemberAttribute] // RVA: 0x4EC Offset: 0x4EC VA: 0x4EC
[Serializable]
public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1194
{
	// Fields
	private ConcurrentDictionary.Tables<TKey, TValue> _tables; // 0xFFFFFFFF
	private IEqualityComparer<TKey> _comparer; // 0xFFFFFFFF
	private readonly bool _growLockArray; // 0xFFFFFFFF
	private int _budget; // 0xFFFFFFFF
	private static readonly bool s_isValueWriteAtomic; // 0xFFFFFFFF

	// Properties
	public TKey Item { set; }
	public int Count { get; }
	public bool IsEmpty { get; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	private object System.Collections.IDictionary.Item { set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private static int DefaultConcurrencyLevel { get; }

	// Methods

	// RVA: -1 Offset: -1
	private static bool IsValueWriteAtomic() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2BF Offset: 0x2BF VA: 0x2BF
	|-ConcurrentDictionary<Guid, int>.IsValueWriteAtomic
	|
	|-RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1
	|-ConcurrentDictionary<Guid, object>.IsValueWriteAtomic
	|
	|-RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7
	|-ConcurrentDictionary<object, object>.IsValueWriteAtomic
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x90F Offset: 0x90F VA: 0x90F
	|-ConcurrentDictionary<Guid, int>..ctor
	|
	|-RVA: 0x910 Offset: 0x910 VA: 0x910
	|-ConcurrentDictionary<Guid, object>..ctor
	|-ConcurrentDictionary<Guid, Tuple<Guid, int>>..ctor
	|
	|-RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5
	|-ConcurrentDictionary<object, object>..ctor
	|-ConcurrentDictionary<MemberHolder, MemberInfo[]>..ctor
	|-ConcurrentDictionary<string, object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal void .ctor(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9C Offset: 0x9C VA: 0x9C
	|-ConcurrentDictionary<Guid, int>..ctor
	|
	|-RVA: 0x9E Offset: 0x9E VA: 0x9E
	|-ConcurrentDictionary<Guid, object>..ctor
	|
	|-RVA: 0x8A Offset: 0x8A VA: 0x8A
	|-ConcurrentDictionary<object, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public bool TryAdd(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA6B Offset: 0xA6B VA: 0xA6B
	|-ConcurrentDictionary<Guid, int>.TryAdd
	|
	|-RVA: 0xA6E Offset: 0xA6E VA: 0xA6E
	|-ConcurrentDictionary<Guid, object>.TryAdd
	|
	|-RVA: 0xA4A Offset: 0xA4A VA: 0xA4A
	|-ConcurrentDictionary<object, object>.TryAdd
	*/

	// RVA: -1 Offset: -1 Slot: 24
	public bool ContainsKey(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6AF Offset: 0x6AF VA: 0x6AF
	|-ConcurrentDictionary<Guid, int>.ContainsKey
	|
	|-RVA: 0x7A4 Offset: 0x7A4 VA: 0x7A4
	|-ConcurrentDictionary<Guid, object>.ContainsKey
	|
	|-RVA: 0x662 Offset: 0x662 VA: 0x662
	|-ConcurrentDictionary<object, object>.ContainsKey
	*/

	// RVA: -1 Offset: -1
	public bool TryRemove(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA65 Offset: 0xA65 VA: 0xA65
	|-ConcurrentDictionary<Guid, int>.TryRemove
	|
	|-RVA: 0xA66 Offset: 0xA66 VA: 0xA66
	|-ConcurrentDictionary<Guid, object>.TryRemove
	|-ConcurrentDictionary<Guid, Tuple<Guid, int>>.TryRemove
	|
	|-RVA: 0xA4B Offset: 0xA4B VA: 0xA4B
	|-ConcurrentDictionary<object, object>.TryRemove
	*/

	// RVA: -1 Offset: -1
	private bool TryRemoveInternal(TKey key, out TValue value, bool matchValue, TValue oldValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA2 Offset: 0xA2 VA: 0xA2
	|-ConcurrentDictionary<Guid, int>.TryRemoveInternal
	|
	|-RVA: 0xA3 Offset: 0xA3 VA: 0xA3
	|-ConcurrentDictionary<Guid, object>.TryRemoveInternal
	|
	|-RVA: 0x93 Offset: 0x93 VA: 0x93
	|-ConcurrentDictionary<object, object>.TryRemoveInternal
	*/

	// RVA: -1 Offset: -1 Slot: 22
	public bool TryGetValue(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA6C Offset: 0xA6C VA: 0xA6C
	|-ConcurrentDictionary<Guid, int>.TryGetValue
	|
	|-RVA: 0xA64 Offset: 0xA64 VA: 0xA64
	|-ConcurrentDictionary<Guid, object>.TryGetValue
	|-ConcurrentDictionary<Guid, Tuple<Guid, int>>.TryGetValue
	|
	|-RVA: 0xA4C Offset: 0xA4C VA: 0xA4C
	|-ConcurrentDictionary<object, object>.TryGetValue
	|-ConcurrentDictionary<string, object>.TryGetValue
	*/

	// RVA: -1 Offset: -1
	private bool TryGetValueInternal(TKey key, int hashcode, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x188 Offset: 0x188 VA: 0x188
	|-ConcurrentDictionary<Guid, int>.TryGetValueInternal
	|
	|-RVA: 0x189 Offset: 0x189 VA: 0x189
	|-ConcurrentDictionary<Guid, object>.TryGetValueInternal
	|
	|-RVA: 0x15D Offset: 0x15D VA: 0x15D
	|-ConcurrentDictionary<object, object>.TryGetValueInternal
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA1F Offset: 0xA1F VA: 0xA1F
	|-ConcurrentDictionary<Guid, int>.Clear
	|
	|-RVA: 0xA20 Offset: 0xA20 VA: 0xA20
	|-ConcurrentDictionary<Guid, object>.Clear
	|
	|-RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6
	|-ConcurrentDictionary<object, object>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5CB Offset: 0x5CB VA: 0x5CB
	|-ConcurrentDictionary<Guid, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x5D3 Offset: 0x5D3 VA: 0x5D3
	|-ConcurrentDictionary<Guid, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x402 Offset: 0x402 VA: 0x402
	|-ConcurrentDictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public KeyValuePair<TKey, TValue>[] ToArray() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC8 Offset: 0xDC8 VA: 0xDC8
	|-ConcurrentDictionary<Guid, int>.ToArray
	|
	|-RVA: 0x1013 Offset: 0x1013 VA: 0x1013
	|-ConcurrentDictionary<Guid, object>.ToArray
	|
	|-RVA: 0xD47 Offset: 0xD47 VA: 0xD47
	|-ConcurrentDictionary<object, object>.ToArray
	*/

	// RVA: -1 Offset: -1
	private void CopyToPairs(KeyValuePair<TKey, TValue>[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5CC Offset: 0x5CC VA: 0x5CC
	|-ConcurrentDictionary<Guid, int>.CopyToPairs
	|
	|-RVA: 0x5D4 Offset: 0x5D4 VA: 0x5D4
	|-ConcurrentDictionary<Guid, object>.CopyToPairs
	|
	|-RVA: 0x403 Offset: 0x403 VA: 0x403
	|-ConcurrentDictionary<object, object>.CopyToPairs
	*/

	// RVA: -1 Offset: -1
	private void CopyToEntries(DictionaryEntry[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5CD Offset: 0x5CD VA: 0x5CD
	|-ConcurrentDictionary<Guid, int>.CopyToEntries
	|
	|-RVA: 0x5D5 Offset: 0x5D5 VA: 0x5D5
	|-ConcurrentDictionary<Guid, object>.CopyToEntries
	|
	|-RVA: 0x404 Offset: 0x404 VA: 0x404
	|-ConcurrentDictionary<object, object>.CopyToEntries
	*/

	// RVA: -1 Offset: -1
	private void CopyToObjects(object[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5CE Offset: 0x5CE VA: 0x5CE
	|-ConcurrentDictionary<Guid, int>.CopyToObjects
	|
	|-RVA: 0x5D6 Offset: 0x5D6 VA: 0x5D6
	|-ConcurrentDictionary<Guid, object>.CopyToObjects
	|
	|-RVA: 0x405 Offset: 0x405 VA: 0x405
	|-ConcurrentDictionary<object, object>.CopyToObjects
	*/

	[IteratorStateMachineAttribute] // RVA: 0x787 Offset: 0x787 VA: 0x787
	// RVA: -1 Offset: -1 Slot: 14
	public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x100C Offset: 0x100C VA: 0x100C
	|-ConcurrentDictionary<Guid, int>.GetEnumerator
	|
	|-RVA: 0x1014 Offset: 0x1014 VA: 0x1014
	|-ConcurrentDictionary<Guid, object>.GetEnumerator
	|
	|-RVA: 0xD48 Offset: 0xD48 VA: 0xD48
	|-ConcurrentDictionary<object, object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1
	private bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, out TValue resultingValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x28 Offset: 0x28 VA: 0x28
	|-ConcurrentDictionary<Guid, int>.TryAddInternal
	|
	|-RVA: 0x29 Offset: 0x29 VA: 0x29
	|-ConcurrentDictionary<Guid, object>.TryAddInternal
	|
	|-RVA: 0x26 Offset: 0x26 VA: 0x26
	|-ConcurrentDictionary<object, object>.TryAddInternal
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public void set_Item(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x455 Offset: 0x455 VA: 0x455
	|-ConcurrentDictionary<Guid, int>.set_Item
	|
	|-RVA: 0x456 Offset: 0x456 VA: 0x456
	|-ConcurrentDictionary<Guid, object>.set_Item
	|-ConcurrentDictionary<Guid, Tuple<Guid, int>>.set_Item
	|
	|-RVA: 0x400 Offset: 0x400 VA: 0x400
	|-ConcurrentDictionary<object, object>.set_Item
	|-ConcurrentDictionary<string, object>.set_Item
	*/

	// RVA: -1 Offset: -1
	private static void ThrowKeyNullException() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xFD6 Offset: 0xFD6 VA: 0xFD6
	|-ConcurrentDictionary<Guid, int>.ThrowKeyNullException
	|
	|-RVA: 0xFD8 Offset: 0xFD8 VA: 0xFD8
	|-ConcurrentDictionary<Guid, object>.ThrowKeyNullException
	|
	|-RVA: 0xF8D Offset: 0xF8D VA: 0xF8D
	|-ConcurrentDictionary<object, object>.ThrowKeyNullException
	*/

	// RVA: -1 Offset: -1 Slot: 23
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC7 Offset: 0xDC7 VA: 0xDC7
	|-ConcurrentDictionary<Guid, int>.get_Count
	|
	|-RVA: 0x1015 Offset: 0x1015 VA: 0x1015
	|-ConcurrentDictionary<Guid, object>.get_Count
	|
	|-RVA: 0xD42 Offset: 0xD42 VA: 0xD42
	|-ConcurrentDictionary<object, object>.get_Count
	*/

	// RVA: -1 Offset: -1
	private int GetCountInternal() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x100D Offset: 0x100D VA: 0x100D
	|-ConcurrentDictionary<Guid, int>.GetCountInternal
	|
	|-RVA: 0x1016 Offset: 0x1016 VA: 0x1016
	|-ConcurrentDictionary<Guid, object>.GetCountInternal
	|
	|-RVA: 0xD49 Offset: 0xD49 VA: 0xD49
	|-ConcurrentDictionary<object, object>.GetCountInternal
	*/

	// RVA: -1 Offset: -1
	public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA6D Offset: 0xA6D VA: 0xA6D
	|-ConcurrentDictionary<Guid, int>.GetOrAdd
	|
	|-RVA: 0xA6F Offset: 0xA6F VA: 0xA6F
	|-ConcurrentDictionary<Guid, object>.GetOrAdd
	|
	|-RVA: 0xA4D Offset: 0xA4D VA: 0xA4D
	|-ConcurrentDictionary<object, object>.GetOrAdd
	|-ConcurrentDictionary<MemberHolder, MemberInfo[]>.GetOrAdd
	*/

	// RVA: -1 Offset: -1
	public bool get_IsEmpty() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC6 Offset: 0xDC6 VA: 0xDC6
	|-ConcurrentDictionary<Guid, int>.get_IsEmpty
	|
	|-RVA: 0x1017 Offset: 0x1017 VA: 0x1017
	|-ConcurrentDictionary<Guid, object>.get_IsEmpty
	|
	|-RVA: 0xD43 Offset: 0xD43 VA: 0xD43
	|-ConcurrentDictionary<object, object>.get_IsEmpty
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5CF Offset: 0x5CF VA: 0x5CF
	|-ConcurrentDictionary<Guid, int>.System.Collections.Generic.IDictionary<TKey,TValue>.Add
	|
	|-RVA: 0x5D7 Offset: 0x5D7 VA: 0x5D7
	|-ConcurrentDictionary<Guid, object>.System.Collections.Generic.IDictionary<TKey,TValue>.Add
	|
	|-RVA: 0x406 Offset: 0x406 VA: 0x406
	|-ConcurrentDictionary<object, object>.System.Collections.Generic.IDictionary<TKey,TValue>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	|-ConcurrentDictionary<Guid, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6
	|-ConcurrentDictionary<Guid, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x80A Offset: 0x80A VA: 0x80A
	|-ConcurrentDictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7A1 Offset: 0x7A1 VA: 0x7A1
	|-ConcurrentDictionary<Guid, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x7A5 Offset: 0x7A5 VA: 0x7A5
	|-ConcurrentDictionary<Guid, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x663 Offset: 0x663 VA: 0x663
	|-ConcurrentDictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x100E Offset: 0x100E VA: 0x100E
	|-ConcurrentDictionary<Guid, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x1018 Offset: 0x1018 VA: 0x1018
	|-ConcurrentDictionary<Guid, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0xD44 Offset: 0xD44 VA: 0xD44
	|-ConcurrentDictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7A2 Offset: 0x7A2 VA: 0x7A2
	|-ConcurrentDictionary<Guid, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x7A6 Offset: 0x7A6 VA: 0x7A6
	|-ConcurrentDictionary<Guid, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x664 Offset: 0x664 VA: 0x664
	|-ConcurrentDictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x100F Offset: 0x100F VA: 0x100F
	|-ConcurrentDictionary<Guid, int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1019 Offset: 0x1019 VA: 0x1019
	|-ConcurrentDictionary<Guid, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0xD4A Offset: 0xD4A VA: 0xD4A
	|-ConcurrentDictionary<object, object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1010 Offset: 0x1010 VA: 0x1010
	|-ConcurrentDictionary<Guid, int>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x101A Offset: 0x101A VA: 0x101A
	|-ConcurrentDictionary<Guid, object>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0xD4B Offset: 0xD4B VA: 0xD4B
	|-ConcurrentDictionary<object, object>.System.Collections.IDictionary.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private void System.Collections.IDictionary.set_Item(object key, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5D0 Offset: 0x5D0 VA: 0x5D0
	|-ConcurrentDictionary<Guid, int>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x5D8 Offset: 0x5D8 VA: 0x5D8
	|-ConcurrentDictionary<Guid, object>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x401 Offset: 0x401 VA: 0x401
	|-ConcurrentDictionary<object, object>.System.Collections.IDictionary.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5D1 Offset: 0x5D1 VA: 0x5D1
	|-ConcurrentDictionary<Guid, int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5D9 Offset: 0x5D9 VA: 0x5D9
	|-ConcurrentDictionary<Guid, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x407 Offset: 0x407 VA: 0x407
	|-ConcurrentDictionary<object, object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1011 Offset: 0x1011 VA: 0x1011
	|-ConcurrentDictionary<Guid, int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x101B Offset: 0x101B VA: 0x101B
	|-ConcurrentDictionary<Guid, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0xD45 Offset: 0xD45 VA: 0xD45
	|-ConcurrentDictionary<object, object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 20
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1012 Offset: 0x1012 VA: 0x1012
	|-ConcurrentDictionary<Guid, int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x101C Offset: 0x101C VA: 0x101C
	|-ConcurrentDictionary<Guid, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0xD46 Offset: 0xD46 VA: 0xD46
	|-ConcurrentDictionary<object, object>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1
	private void GrowTable(ConcurrentDictionary.Tables<TKey, TValue> tables) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	|-ConcurrentDictionary<Guid, int>.GrowTable
	|
	|-RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7
	|-ConcurrentDictionary<Guid, object>.GrowTable
	|
	|-RVA: 0x80B Offset: 0x80B VA: 0x80B
	|-ConcurrentDictionary<object, object>.GrowTable
	*/

	// RVA: -1 Offset: -1
	private static int GetBucket(int hashcode, int bucketCount) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7A3 Offset: 0x7A3 VA: 0x7A3
	|-ConcurrentDictionary<Guid, int>.GetBucket
	|
	|-RVA: 0x7A7 Offset: 0x7A7 VA: 0x7A7
	|-ConcurrentDictionary<Guid, object>.GetBucket
	|
	|-RVA: 0x665 Offset: 0x665 VA: 0x665
	|-ConcurrentDictionary<object, object>.GetBucket
	*/

	// RVA: -1 Offset: -1
	private static void GetBucketAndLockNo(int hashcode, out int bucketNo, out int lockNo, int bucketCount, int lockCount) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9D Offset: 0x9D VA: 0x9D
	|-ConcurrentDictionary<Guid, int>.GetBucketAndLockNo
	|
	|-RVA: 0x9F Offset: 0x9F VA: 0x9F
	|-ConcurrentDictionary<Guid, object>.GetBucketAndLockNo
	|
	|-RVA: 0x8B Offset: 0x8B VA: 0x8B
	|-ConcurrentDictionary<object, object>.GetBucketAndLockNo
	*/

	// RVA: -1 Offset: -1
	private static int get_DefaultConcurrencyLevel() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
	|-ConcurrentDictionary<Guid, int>.get_DefaultConcurrencyLevel
	|
	|-RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2
	|-ConcurrentDictionary<Guid, object>.get_DefaultConcurrencyLevel
	|
	|-RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6
	|-ConcurrentDictionary<object, object>.get_DefaultConcurrencyLevel
	*/

	// RVA: -1 Offset: -1
	private void AcquireAllLocks(ref int locksAcquired) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5
	|-ConcurrentDictionary<Guid, int>.AcquireAllLocks
	|
	|-RVA: 0x9A8 Offset: 0x9A8 VA: 0x9A8
	|-ConcurrentDictionary<Guid, object>.AcquireAllLocks
	|
	|-RVA: 0x80C Offset: 0x80C VA: 0x80C
	|-ConcurrentDictionary<object, object>.AcquireAllLocks
	*/

	// RVA: -1 Offset: -1
	private void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x152 Offset: 0x152 VA: 0x152
	|-ConcurrentDictionary<Guid, int>.AcquireLocks
	|
	|-RVA: 0x153 Offset: 0x153 VA: 0x153
	|-ConcurrentDictionary<Guid, object>.AcquireLocks
	|
	|-RVA: 0x121 Offset: 0x121 VA: 0x121
	|-ConcurrentDictionary<object, object>.AcquireLocks
	*/

	// RVA: -1 Offset: -1
	private void ReleaseLocks(int fromInclusive, int toExclusive) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5D2 Offset: 0x5D2 VA: 0x5D2
	|-ConcurrentDictionary<Guid, int>.ReleaseLocks
	|
	|-RVA: 0x5DA Offset: 0x5DA VA: 0x5DA
	|-ConcurrentDictionary<Guid, object>.ReleaseLocks
	|
	|-RVA: 0x408 Offset: 0x408 VA: 0x408
	|-ConcurrentDictionary<object, object>.ReleaseLocks
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xFD7 Offset: 0xFD7 VA: 0xFD7
	|-ConcurrentDictionary<Guid, int>..cctor
	|
	|-RVA: 0xFD9 Offset: 0xFD9 VA: 0xFD9
	|-ConcurrentDictionary<Guid, object>..cctor
	|
	|-RVA: 0xF8E Offset: 0xF8E VA: 0xF8E
	|-ConcurrentDictionary<object, object>..cctor
	*/
}

// Namespace: 
private sealed class ConcurrentDictionary.Tables<TKey, TValue> // TypeDefIndex: 1195
{
	// Fields
	internal readonly ConcurrentDictionary.Node<TKey, TValue>[] _buckets; // 0xFFFFFFFF
	internal readonly object[] _locks; // 0xFFFFFFFF
	internal int[] _countPerLock; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(ConcurrentDictionary.Node<TKey, TValue>[] buckets, object[] locks, int[] countPerLock) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x150 Offset: 0x150 VA: 0x150
	|-ConcurrentDictionary.Tables<Guid, int>..ctor
	|
	|-RVA: 0x151 Offset: 0x151 VA: 0x151
	|-ConcurrentDictionary.Tables<Guid, object>..ctor
	|
	|-RVA: 0x122 Offset: 0x122 VA: 0x122
	|-ConcurrentDictionary.Tables<object, object>..ctor
	*/
}

// Namespace: 
[Serializable]
private sealed class ConcurrentDictionary.Node<TKey, TValue> // TypeDefIndex: 1196
{
	// Fields
	internal readonly TKey _key; // 0xFFFFFFFF
	internal TValue _value; // 0xFFFFFFFF
	internal ConcurrentDictionary.Node<TKey, TValue> _next; // 0xFFFFFFFF
	internal readonly int _hashcode; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(TKey key, TValue value, int hashcode, ConcurrentDictionary.Node<TKey, TValue> next) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9A Offset: 0x9A VA: 0x9A
	|-ConcurrentDictionary.Node<Guid, int>..ctor
	|
	|-RVA: 0x9B Offset: 0x9B VA: 0x9B
	|-ConcurrentDictionary.Node<Guid, object>..ctor
	|
	|-RVA: 0x8C Offset: 0x8C VA: 0x8C
	|-ConcurrentDictionary.Node<object, object>..ctor
	*/
}

// Namespace: 
[Serializable]
private sealed class ConcurrentDictionary.DictionaryEnumerator<TKey, TValue> : IDictionaryEnumerator, IEnumerator // TypeDefIndex: 1197
{
	// Fields
	private IEnumerator<KeyValuePair<TKey, TValue>> _enumerator; // 0xFFFFFFFF

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(ConcurrentDictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x99F Offset: 0x99F VA: 0x99F
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, int>..ctor
	|
	|-RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, object>..ctor
	|
	|-RVA: 0x80E Offset: 0x80E VA: 0x80E
	|-ConcurrentDictionary.DictionaryEnumerator<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public DictionaryEntry get_Entry() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, int>.get_Entry
	|
	|-RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, object>.get_Entry
	|
	|-RVA: 0x80D Offset: 0x80D VA: 0x80D
	|-ConcurrentDictionary.DictionaryEnumerator<object, object>.get_Entry
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public object get_Key() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1004 Offset: 0x1004 VA: 0x1004
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, int>.get_Key
	|
	|-RVA: 0x1008 Offset: 0x1008 VA: 0x1008
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, object>.get_Key
	|
	|-RVA: 0xD4C Offset: 0xD4C VA: 0xD4C
	|-ConcurrentDictionary.DictionaryEnumerator<object, object>.get_Key
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public object get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1005 Offset: 0x1005 VA: 0x1005
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, int>.get_Value
	|
	|-RVA: 0x1009 Offset: 0x1009 VA: 0x1009
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, object>.get_Value
	|
	|-RVA: 0xD4D Offset: 0xD4D VA: 0xD4D
	|-ConcurrentDictionary.DictionaryEnumerator<object, object>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public object get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1006 Offset: 0x1006 VA: 0x1006
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, int>.get_Current
	|
	|-RVA: 0x100A Offset: 0x100A VA: 0x100A
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, object>.get_Current
	|
	|-RVA: 0xD4E Offset: 0xD4E VA: 0xD4E
	|-ConcurrentDictionary.DictionaryEnumerator<object, object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1007 Offset: 0x1007 VA: 0x1007
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, int>.MoveNext
	|
	|-RVA: 0x100B Offset: 0x100B VA: 0x100B
	|-ConcurrentDictionary.DictionaryEnumerator<Guid, object>.MoveNext
	|
	|-RVA: 0xD4F Offset: 0xD4F VA: 0xD4F
	|-ConcurrentDictionary.DictionaryEnumerator<object, object>.MoveNext
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x4ED Offset: 0x4ED VA: 0x4ED
private sealed class ConcurrentDictionary.<GetEnumerator>d__32<TKey, TValue> : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator // TypeDefIndex: 1198
{
	// Fields
	private int <>1__state; // 0xFFFFFFFF
	private KeyValuePair<TKey, TValue> <>2__current; // 0xFFFFFFFF
	public ConcurrentDictionary<TKey, TValue> <>4__this; // 0xFFFFFFFF
	private ConcurrentDictionary.Node<TKey, TValue>[] <buckets>5__1; // 0xFFFFFFFF
	private ConcurrentDictionary.Node<TKey, TValue> <current>5__2; // 0xFFFFFFFF
	private int <i>5__3; // 0xFFFFFFFF

	// Properties
	private KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0x788 Offset: 0x788 VA: 0x788
	// RVA: -1 Offset: -1
	public void .ctor(int <>1__state) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x99B Offset: 0x99B VA: 0x99B
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, int>..ctor
	|
	|-RVA: 0x99D Offset: 0x99D VA: 0x99D
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, object>..ctor
	|
	|-RVA: 0x810 Offset: 0x810 VA: 0x810
	|-ConcurrentDictionary.<GetEnumerator>d__32<object, object>..ctor
	*/

	[DebuggerHiddenAttribute] // RVA: 0x789 Offset: 0x789 VA: 0x789
	// RVA: -1 Offset: -1 Slot: 5
	private void System.IDisposable.Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA1D Offset: 0xA1D VA: 0xA1D
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, int>.System.IDisposable.Dispose
	|
	|-RVA: 0xA1E Offset: 0xA1E VA: 0xA1E
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, object>.System.IDisposable.Dispose
	|
	|-RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7
	|-ConcurrentDictionary.<GetEnumerator>d__32<object, object>.System.IDisposable.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1000 Offset: 0x1000 VA: 0x1000
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, int>.MoveNext
	|
	|-RVA: 0x1002 Offset: 0x1002 VA: 0x1002
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, object>.MoveNext
	|
	|-RVA: 0xD51 Offset: 0xD51 VA: 0xD51
	|-ConcurrentDictionary.<GetEnumerator>d__32<object, object>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0x78A Offset: 0x78A VA: 0x78A
	// RVA: -1 Offset: -1 Slot: 4
	private KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x99C Offset: 0x99C VA: 0x99C
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, int>.System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current
	|
	|-RVA: 0x99E Offset: 0x99E VA: 0x99E
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, object>.System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current
	|
	|-RVA: 0x80F Offset: 0x80F VA: 0x80F
	|-ConcurrentDictionary.<GetEnumerator>d__32<object, object>.System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0x78B Offset: 0x78B VA: 0x78B
	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1001 Offset: 0x1001 VA: 0x1001
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1003 Offset: 0x1003 VA: 0x1003
	|-ConcurrentDictionary.<GetEnumerator>d__32<Guid, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD50 Offset: 0xD50 VA: 0xD50
	|-ConcurrentDictionary.<GetEnumerator>d__32<object, object>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: System.Collections.Concurrent
internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1199
{}

// Namespace: System.Collections.Generic
[ExtensionAttribute] // RVA: 0x4EE Offset: 0x4EE VA: 0x4EE
public static class CollectionExtensions // TypeDefIndex: 1200
{
	// Methods

	[ExtensionAttribute] // RVA: 0x78C Offset: 0x78C VA: 0x78C
	// RVA: -1 Offset: -1
	public static TValue GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue> dictionary, TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x666 Offset: 0x666 VA: 0x666
	|-CollectionExtensions.GetValueOrDefault<object, object>
	|-CollectionExtensions.GetValueOrDefault<string, LocalDataStoreSlot>
	*/

	[ExtensionAttribute] // RVA: 0x78D Offset: 0x78D VA: 0x78D
	// RVA: -1 Offset: -1
	public static TValue GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA4E Offset: 0xA4E VA: 0xA4E
	|-CollectionExtensions.GetValueOrDefault<object, object>
	*/
}

// Namespace: System.Collections.Generic
public static class KeyValuePair // TypeDefIndex: 1201
{
	// Methods

	// RVA: 0x106 Offset: 0x106 VA: 0x106
	internal static string PairToString(object key, object value) { }
}

// Namespace: System.Collections.Generic
[Serializable]
public struct KeyValuePair<TKey, TValue> // TypeDefIndex: 1202
{
	// Fields
	private TKey key; // 0xFFFFFFFF
	private TValue value; // 0xFFFFFFFF

	// Properties
	public TKey Key { get; }
	public TValue Value { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x46C Offset: 0x46C VA: 0x46C
	|-KeyValuePair<DateTime, object>..ctor
	|-KeyValuePair<DateTime, TimeType>..ctor
	|
	|-RVA: 0x628 Offset: 0x628 VA: 0x628
	|-KeyValuePair<Guid, int>..ctor
	|
	|-RVA: 0x629 Offset: 0x629 VA: 0x629
	|-KeyValuePair<Guid, object>..ctor
	|
	|-RVA: 0x46D Offset: 0x46D VA: 0x46D
	|-KeyValuePair<int, int>..ctor
	|
	|-RVA: 0x62A Offset: 0x62A VA: 0x62A
	|-KeyValuePair<int, object>..ctor
	|
	|-RVA: 0x62B Offset: 0x62B VA: 0x62B
	|-KeyValuePair<object, int>..ctor
	|
	|-RVA: 0x460 Offset: 0x460 VA: 0x460
	|-KeyValuePair<object, Int32Enum>..ctor
	|-KeyValuePair<string, EventTags>..ctor
	|
	|-RVA: 0x409 Offset: 0x409 VA: 0x409
	|-KeyValuePair<object, object>..ctor
	|-KeyValuePair<string, object>..ctor
	|
	|-RVA: 0x62C Offset: 0x62C VA: 0x62C
	|-KeyValuePair<object, ResourceLocator>..ctor
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-KeyValuePair<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public TKey get_Key() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDF5 Offset: 0xDF5 VA: 0xDF5
	|-KeyValuePair<int, int>.get_Key
	|
	|-RVA: 0xE09 Offset: 0xE09 VA: 0xE09
	|-KeyValuePair<int, PointerEventData>.get_Key
	|-KeyValuePair<int, object>.get_Key
	|
	|-RVA: 0x6C Offset: 0x6C VA: 0x6C
	|-KeyValuePair<DateTime, object>.get_Key
	|-KeyValuePair<DateTime, TimeType>.get_Key
	|
	|-RVA: 0x85A Offset: 0x85A VA: 0x85A
	|-KeyValuePair<Guid, int>.get_Key
	|
	|-RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4
	|-KeyValuePair<Guid, object>.get_Key
	|
	|-RVA: 0x10A6 Offset: 0x10A6 VA: 0x10A6
	|-KeyValuePair<object, int>.get_Key
	|
	|-RVA: 0xDD7 Offset: 0xDD7 VA: 0xDD7
	|-KeyValuePair<object, Int32Enum>.get_Key
	|-KeyValuePair<string, EventTags>.get_Key
	|
	|-RVA: 0xD52 Offset: 0xD52 VA: 0xD52
	|-KeyValuePair<object, object>.get_Key
	|-KeyValuePair<string, object>.get_Key
	|
	|-RVA: 0x10AA Offset: 0x10AA VA: 0x10AA
	|-KeyValuePair<object, ResourceLocator>.get_Key
	|
	|-RVA: 0x9A Offset: 0x9A VA: 0x9A
	|-KeyValuePair<ulong, object>.get_Key
	*/

	// RVA: -1 Offset: -1
	public TValue get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDF6 Offset: 0xDF6 VA: 0xDF6
	|-KeyValuePair<int, int>.get_Value
	|
	|-RVA: 0xE08 Offset: 0xE08 VA: 0xE08
	|-KeyValuePair<int, PointerEventData>.get_Value
	|-KeyValuePair<int, object>.get_Value
	|
	|-RVA: 0xDF2 Offset: 0xDF2 VA: 0xDF2
	|-KeyValuePair<DateTime, object>.get_Value
	|-KeyValuePair<DateTime, TimeType>.get_Value
	|
	|-RVA: 0xDC9 Offset: 0xDC9 VA: 0xDC9
	|-KeyValuePair<Guid, int>.get_Value
	|
	|-RVA: 0x10A3 Offset: 0x10A3 VA: 0x10A3
	|-KeyValuePair<Guid, object>.get_Value
	|
	|-RVA: 0x10A7 Offset: 0x10A7 VA: 0x10A7
	|-KeyValuePair<object, int>.get_Value
	|
	|-RVA: 0xDD8 Offset: 0xDD8 VA: 0xDD8
	|-KeyValuePair<object, Int32Enum>.get_Value
	|-KeyValuePair<string, EventTags>.get_Value
	|
	|-RVA: 0xD53 Offset: 0xD53 VA: 0xD53
	|-KeyValuePair<object, object>.get_Value
	|-KeyValuePair<string, string>.get_Value
	|
	|-RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5
	|-KeyValuePair<object, ResourceLocator>.get_Value
	|
	|-RVA: 0x10AC Offset: 0x10AC VA: 0x10AC
	|-KeyValuePair<ulong, object>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10A1 Offset: 0x10A1 VA: 0x10A1
	|-KeyValuePair<DateTime, object>.ToString
	|
	|-RVA: 0x10A2 Offset: 0x10A2 VA: 0x10A2
	|-KeyValuePair<Guid, int>.ToString
	|
	|-RVA: 0x10A4 Offset: 0x10A4 VA: 0x10A4
	|-KeyValuePair<Guid, object>.ToString
	|
	|-RVA: 0x10A5 Offset: 0x10A5 VA: 0x10A5
	|-KeyValuePair<int, int>.ToString
	|
	|-RVA: 0xE0B Offset: 0xE0B VA: 0xE0B
	|-KeyValuePair<int, object>.ToString
	|-KeyValuePair<int, PointerEventData>.ToString
	|
	|-RVA: 0x10A8 Offset: 0x10A8 VA: 0x10A8
	|-KeyValuePair<object, int>.ToString
	|
	|-RVA: 0x10A9 Offset: 0x10A9 VA: 0x10A9
	|-KeyValuePair<object, Int32Enum>.ToString
	|
	|-RVA: 0xD54 Offset: 0xD54 VA: 0xD54
	|-KeyValuePair<object, object>.ToString
	|
	|-RVA: 0x10AB Offset: 0x10AB VA: 0x10AB
	|-KeyValuePair<object, ResourceLocator>.ToString
	|
	|-RVA: 0x10AD Offset: 0x10AD VA: 0x10AD
	|-KeyValuePair<ulong, object>.ToString
	*/
}

// Namespace: System.Collections.Generic
internal static class IntrospectiveSortUtilities // TypeDefIndex: 1203
{
	// Methods

	// RVA: 0x1BA Offset: 0x1BA VA: 0x1BA
	internal static int FloorLog2(int n) { }

	// RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
	internal static void ThrowOrIgnoreBadComparer(object comparer) { }
}

// Namespace: System.Collections.Generic
internal class ArraySortHelper<T> // TypeDefIndex: 1204
{
	// Methods

	// RVA: -1 Offset: -1
	public static void Sort(T[] keys, int index, int length, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x154 Offset: 0x154 VA: 0x154
	|-ArraySortHelper<byte>.Sort
	|
	|-RVA: 0x15A Offset: 0x15A VA: 0x15A
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.Sort
	|
	|-RVA: 0x160 Offset: 0x160 VA: 0x160
	|-ArraySortHelper<KeyValuePair<Guid, int>>.Sort
	|
	|-RVA: 0x166 Offset: 0x166 VA: 0x166
	|-ArraySortHelper<EventProvider.SessionInfo>.Sort
	|
	|-RVA: 0x16C Offset: 0x16C VA: 0x16C
	|-ArraySortHelper<int>.Sort
	|
	|-RVA: 0x123 Offset: 0x123 VA: 0x123
	|-ArraySortHelper<object>.Sort
	|
	|-RVA: 0x172 Offset: 0x172 VA: 0x172
	|-ArraySortHelper<ulong>.Sort
	|
	|-RVA: 0x178 Offset: 0x178 VA: 0x178
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0x17E Offset: 0x17E VA: 0x17E
	|-ArraySortHelper<Color32>.Sort
	|
	|-RVA: 0x184 Offset: 0x184 VA: 0x184
	|-ArraySortHelper<RaycastResult>.Sort
	|
	|-RVA: 0x18A Offset: 0x18A VA: 0x18A
	|-ArraySortHelper<RaycastHit>.Sort
	|
	|-RVA: 0x190 Offset: 0x190 VA: 0x190
	|-ArraySortHelper<UICharInfo>.Sort
	|
	|-RVA: 0x196 Offset: 0x196 VA: 0x196
	|-ArraySortHelper<UILineInfo>.Sort
	|
	|-RVA: 0x19C Offset: 0x19C VA: 0x19C
	|-ArraySortHelper<UIVertex>.Sort
	|
	|-RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8
	|-ArraySortHelper<Vector2>.Sort
	|
	|-RVA: 0x1AE Offset: 0x1AE VA: 0x1AE
	|-ArraySortHelper<Vector3>.Sort
	|
	|-RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4
	|-ArraySortHelper<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public static int BinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	|-ArraySortHelper<byte>.BinarySearch
	|
	|-RVA: 0xA6 Offset: 0xA6 VA: 0xA6
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.BinarySearch
	|
	|-RVA: 0xA8 Offset: 0xA8 VA: 0xA8
	|-ArraySortHelper<KeyValuePair<Guid, int>>.BinarySearch
	|
	|-RVA: 0xAA Offset: 0xAA VA: 0xAA
	|-ArraySortHelper<EventProvider.SessionInfo>.BinarySearch
	|
	|-RVA: 0xAC Offset: 0xAC VA: 0xAC
	|-ArraySortHelper<int>.BinarySearch
	|
	|-RVA: 0x94 Offset: 0x94 VA: 0x94
	|-ArraySortHelper<object>.BinarySearch
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-ArraySortHelper<ulong>.BinarySearch
	|
	|-RVA: 0xAE Offset: 0xAE VA: 0xAE
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.BinarySearch
	|
	|-RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	|-ArraySortHelper<Color32>.BinarySearch
	|
	|-RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	|-ArraySortHelper<RaycastResult>.BinarySearch
	|
	|-RVA: 0xB4 Offset: 0xB4 VA: 0xB4
	|-ArraySortHelper<RaycastHit>.BinarySearch
	|
	|-RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	|-ArraySortHelper<UICharInfo>.BinarySearch
	|
	|-RVA: 0xB8 Offset: 0xB8 VA: 0xB8
	|-ArraySortHelper<UILineInfo>.BinarySearch
	|
	|-RVA: 0xBA Offset: 0xBA VA: 0xBA
	|-ArraySortHelper<UIVertex>.BinarySearch
	|
	|-RVA: 0xBC Offset: 0xBC VA: 0xBC
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.BinarySearch
	|
	|-RVA: 0xBE Offset: 0xBE VA: 0xBE
	|-ArraySortHelper<Vector2>.BinarySearch
	|
	|-RVA: 0xC0 Offset: 0xC0 VA: 0xC0
	|-ArraySortHelper<Vector3>.BinarySearch
	|
	|-RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	|-ArraySortHelper<Vector4>.BinarySearch
	*/

	// RVA: -1 Offset: -1
	internal static void Sort(T[] keys, int index, int length, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x155 Offset: 0x155 VA: 0x155
	|-ArraySortHelper<byte>.Sort
	|
	|-RVA: 0x15B Offset: 0x15B VA: 0x15B
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.Sort
	|
	|-RVA: 0x161 Offset: 0x161 VA: 0x161
	|-ArraySortHelper<KeyValuePair<Guid, int>>.Sort
	|
	|-RVA: 0x167 Offset: 0x167 VA: 0x167
	|-ArraySortHelper<EventProvider.SessionInfo>.Sort
	|
	|-RVA: 0x16D Offset: 0x16D VA: 0x16D
	|-ArraySortHelper<int>.Sort
	|
	|-RVA: 0x124 Offset: 0x124 VA: 0x124
	|-ArraySortHelper<object>.Sort
	|
	|-RVA: 0x173 Offset: 0x173 VA: 0x173
	|-ArraySortHelper<ulong>.Sort
	|
	|-RVA: 0x179 Offset: 0x179 VA: 0x179
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0x17F Offset: 0x17F VA: 0x17F
	|-ArraySortHelper<Color32>.Sort
	|
	|-RVA: 0x185 Offset: 0x185 VA: 0x185
	|-ArraySortHelper<RaycastResult>.Sort
	|
	|-RVA: 0x18B Offset: 0x18B VA: 0x18B
	|-ArraySortHelper<RaycastHit>.Sort
	|
	|-RVA: 0x191 Offset: 0x191 VA: 0x191
	|-ArraySortHelper<UICharInfo>.Sort
	|
	|-RVA: 0x197 Offset: 0x197 VA: 0x197
	|-ArraySortHelper<UILineInfo>.Sort
	|
	|-RVA: 0x19D Offset: 0x19D VA: 0x19D
	|-ArraySortHelper<UIVertex>.Sort
	|
	|-RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9
	|-ArraySortHelper<Vector2>.Sort
	|
	|-RVA: 0x1AF Offset: 0x1AF VA: 0x1AF
	|-ArraySortHelper<Vector3>.Sort
	|
	|-RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5
	|-ArraySortHelper<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	internal static int InternalBinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA5 Offset: 0xA5 VA: 0xA5
	|-ArraySortHelper<byte>.InternalBinarySearch
	|
	|-RVA: 0xA7 Offset: 0xA7 VA: 0xA7
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.InternalBinarySearch
	|
	|-RVA: 0xA9 Offset: 0xA9 VA: 0xA9
	|-ArraySortHelper<KeyValuePair<Guid, int>>.InternalBinarySearch
	|
	|-RVA: 0xAB Offset: 0xAB VA: 0xAB
	|-ArraySortHelper<EventProvider.SessionInfo>.InternalBinarySearch
	|
	|-RVA: 0xAD Offset: 0xAD VA: 0xAD
	|-ArraySortHelper<int>.InternalBinarySearch
	|
	|-RVA: 0x95 Offset: 0x95 VA: 0x95
	|-ArraySortHelper<object>.InternalBinarySearch
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-ArraySortHelper<ulong>.InternalBinarySearch
	|
	|-RVA: 0xAF Offset: 0xAF VA: 0xAF
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.InternalBinarySearch
	|
	|-RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	|-ArraySortHelper<Color32>.InternalBinarySearch
	|
	|-RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	|-ArraySortHelper<RaycastResult>.InternalBinarySearch
	|
	|-RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	|-ArraySortHelper<RaycastHit>.InternalBinarySearch
	|
	|-RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	|-ArraySortHelper<UICharInfo>.InternalBinarySearch
	|
	|-RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	|-ArraySortHelper<UILineInfo>.InternalBinarySearch
	|
	|-RVA: 0xBB Offset: 0xBB VA: 0xBB
	|-ArraySortHelper<UIVertex>.InternalBinarySearch
	|
	|-RVA: 0xBD Offset: 0xBD VA: 0xBD
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.InternalBinarySearch
	|
	|-RVA: 0xBF Offset: 0xBF VA: 0xBF
	|-ArraySortHelper<Vector2>.InternalBinarySearch
	|
	|-RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	|-ArraySortHelper<Vector3>.InternalBinarySearch
	|
	|-RVA: 0xC3 Offset: 0xC3 VA: 0xC3
	|-ArraySortHelper<Vector4>.InternalBinarySearch
	*/

	// RVA: -1 Offset: -1
	private static void SwapIfGreater(T[] keys, Comparison<T> comparer, int a, int b) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x156 Offset: 0x156 VA: 0x156
	|-ArraySortHelper<byte>.SwapIfGreater
	|
	|-RVA: 0x15C Offset: 0x15C VA: 0x15C
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.SwapIfGreater
	|
	|-RVA: 0x162 Offset: 0x162 VA: 0x162
	|-ArraySortHelper<KeyValuePair<Guid, int>>.SwapIfGreater
	|
	|-RVA: 0x168 Offset: 0x168 VA: 0x168
	|-ArraySortHelper<EventProvider.SessionInfo>.SwapIfGreater
	|
	|-RVA: 0x16E Offset: 0x16E VA: 0x16E
	|-ArraySortHelper<int>.SwapIfGreater
	|
	|-RVA: 0x125 Offset: 0x125 VA: 0x125
	|-ArraySortHelper<object>.SwapIfGreater
	|
	|-RVA: 0x174 Offset: 0x174 VA: 0x174
	|-ArraySortHelper<ulong>.SwapIfGreater
	|
	|-RVA: 0x17A Offset: 0x17A VA: 0x17A
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.SwapIfGreater
	|
	|-RVA: 0x180 Offset: 0x180 VA: 0x180
	|-ArraySortHelper<Color32>.SwapIfGreater
	|
	|-RVA: 0x186 Offset: 0x186 VA: 0x186
	|-ArraySortHelper<RaycastResult>.SwapIfGreater
	|
	|-RVA: 0x18C Offset: 0x18C VA: 0x18C
	|-ArraySortHelper<RaycastHit>.SwapIfGreater
	|
	|-RVA: 0x192 Offset: 0x192 VA: 0x192
	|-ArraySortHelper<UICharInfo>.SwapIfGreater
	|
	|-RVA: 0x198 Offset: 0x198 VA: 0x198
	|-ArraySortHelper<UILineInfo>.SwapIfGreater
	|
	|-RVA: 0x19E Offset: 0x19E VA: 0x19E
	|-ArraySortHelper<UIVertex>.SwapIfGreater
	|
	|-RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.SwapIfGreater
	|
	|-RVA: 0x1AA Offset: 0x1AA VA: 0x1AA
	|-ArraySortHelper<Vector2>.SwapIfGreater
	|
	|-RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0
	|-ArraySortHelper<Vector3>.SwapIfGreater
	|
	|-RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	|-ArraySortHelper<Vector4>.SwapIfGreater
	*/

	// RVA: -1 Offset: -1
	private static void Swap(T[] a, int i, int j) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5DB Offset: 0x5DB VA: 0x5DB
	|-ArraySortHelper<byte>.Swap
	|
	|-RVA: 0x5DC Offset: 0x5DC VA: 0x5DC
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.Swap
	|
	|-RVA: 0x5DD Offset: 0x5DD VA: 0x5DD
	|-ArraySortHelper<KeyValuePair<Guid, int>>.Swap
	|
	|-RVA: 0x5DE Offset: 0x5DE VA: 0x5DE
	|-ArraySortHelper<EventProvider.SessionInfo>.Swap
	|
	|-RVA: 0x5DF Offset: 0x5DF VA: 0x5DF
	|-ArraySortHelper<int>.Swap
	|
	|-RVA: 0x40A Offset: 0x40A VA: 0x40A
	|-ArraySortHelper<object>.Swap
	|
	|-RVA: 0x5E0 Offset: 0x5E0 VA: 0x5E0
	|-ArraySortHelper<ulong>.Swap
	|
	|-RVA: 0x5E1 Offset: 0x5E1 VA: 0x5E1
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.Swap
	|
	|-RVA: 0x5E2 Offset: 0x5E2 VA: 0x5E2
	|-ArraySortHelper<Color32>.Swap
	|
	|-RVA: 0x5E3 Offset: 0x5E3 VA: 0x5E3
	|-ArraySortHelper<RaycastResult>.Swap
	|
	|-RVA: 0x5E4 Offset: 0x5E4 VA: 0x5E4
	|-ArraySortHelper<RaycastHit>.Swap
	|
	|-RVA: 0x5E5 Offset: 0x5E5 VA: 0x5E5
	|-ArraySortHelper<UICharInfo>.Swap
	|
	|-RVA: 0x5E6 Offset: 0x5E6 VA: 0x5E6
	|-ArraySortHelper<UILineInfo>.Swap
	|
	|-RVA: 0x5E7 Offset: 0x5E7 VA: 0x5E7
	|-ArraySortHelper<UIVertex>.Swap
	|
	|-RVA: 0x5E8 Offset: 0x5E8 VA: 0x5E8
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.Swap
	|
	|-RVA: 0x5E9 Offset: 0x5E9 VA: 0x5E9
	|-ArraySortHelper<Vector2>.Swap
	|
	|-RVA: 0x5EA Offset: 0x5EA VA: 0x5EA
	|-ArraySortHelper<Vector3>.Swap
	|
	|-RVA: 0x5EB Offset: 0x5EB VA: 0x5EB
	|-ArraySortHelper<Vector4>.Swap
	*/

	// RVA: -1 Offset: -1
	internal static void IntrospectiveSort(T[] keys, int left, int length, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x157 Offset: 0x157 VA: 0x157
	|-ArraySortHelper<byte>.IntrospectiveSort
	|
	|-RVA: 0x15D Offset: 0x15D VA: 0x15D
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.IntrospectiveSort
	|
	|-RVA: 0x163 Offset: 0x163 VA: 0x163
	|-ArraySortHelper<KeyValuePair<Guid, int>>.IntrospectiveSort
	|
	|-RVA: 0x169 Offset: 0x169 VA: 0x169
	|-ArraySortHelper<EventProvider.SessionInfo>.IntrospectiveSort
	|
	|-RVA: 0x16F Offset: 0x16F VA: 0x16F
	|-ArraySortHelper<int>.IntrospectiveSort
	|
	|-RVA: 0x126 Offset: 0x126 VA: 0x126
	|-ArraySortHelper<object>.IntrospectiveSort
	|-ArraySortHelper<string>.IntrospectiveSort
	|
	|-RVA: 0x175 Offset: 0x175 VA: 0x175
	|-ArraySortHelper<ulong>.IntrospectiveSort
	|
	|-RVA: 0x17B Offset: 0x17B VA: 0x17B
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.IntrospectiveSort
	|
	|-RVA: 0x181 Offset: 0x181 VA: 0x181
	|-ArraySortHelper<Color32>.IntrospectiveSort
	|
	|-RVA: 0x187 Offset: 0x187 VA: 0x187
	|-ArraySortHelper<RaycastResult>.IntrospectiveSort
	|
	|-RVA: 0x18D Offset: 0x18D VA: 0x18D
	|-ArraySortHelper<RaycastHit>.IntrospectiveSort
	|
	|-RVA: 0x193 Offset: 0x193 VA: 0x193
	|-ArraySortHelper<UICharInfo>.IntrospectiveSort
	|
	|-RVA: 0x199 Offset: 0x199 VA: 0x199
	|-ArraySortHelper<UILineInfo>.IntrospectiveSort
	|
	|-RVA: 0x19F Offset: 0x19F VA: 0x19F
	|-ArraySortHelper<UIVertex>.IntrospectiveSort
	|
	|-RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.IntrospectiveSort
	|
	|-RVA: 0x1AB Offset: 0x1AB VA: 0x1AB
	|-ArraySortHelper<Vector2>.IntrospectiveSort
	|
	|-RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1
	|-ArraySortHelper<Vector3>.IntrospectiveSort
	|
	|-RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	|-ArraySortHelper<Vector4>.IntrospectiveSort
	*/

	// RVA: -1 Offset: -1
	private static void IntroSort(T[] keys, int lo, int hi, int depthLimit, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA0 Offset: 0xA0 VA: 0xA0
	|-ArraySortHelper<byte>.IntroSort
	|
	|-RVA: 0xA2 Offset: 0xA2 VA: 0xA2
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.IntroSort
	|
	|-RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	|-ArraySortHelper<KeyValuePair<Guid, int>>.IntroSort
	|
	|-RVA: 0xA6 Offset: 0xA6 VA: 0xA6
	|-ArraySortHelper<EventProvider.SessionInfo>.IntroSort
	|
	|-RVA: 0xA8 Offset: 0xA8 VA: 0xA8
	|-ArraySortHelper<int>.IntroSort
	|
	|-RVA: 0x8D Offset: 0x8D VA: 0x8D
	|-ArraySortHelper<object>.IntroSort
	|
	|-RVA: 0xAA Offset: 0xAA VA: 0xAA
	|-ArraySortHelper<ulong>.IntroSort
	|
	|-RVA: 0xAC Offset: 0xAC VA: 0xAC
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.IntroSort
	|
	|-RVA: 0xAE Offset: 0xAE VA: 0xAE
	|-ArraySortHelper<Color32>.IntroSort
	|
	|-RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	|-ArraySortHelper<RaycastResult>.IntroSort
	|
	|-RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	|-ArraySortHelper<RaycastHit>.IntroSort
	|
	|-RVA: 0xB4 Offset: 0xB4 VA: 0xB4
	|-ArraySortHelper<UICharInfo>.IntroSort
	|
	|-RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	|-ArraySortHelper<UILineInfo>.IntroSort
	|
	|-RVA: 0xB8 Offset: 0xB8 VA: 0xB8
	|-ArraySortHelper<UIVertex>.IntroSort
	|
	|-RVA: 0xBA Offset: 0xBA VA: 0xBA
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.IntroSort
	|
	|-RVA: 0xBC Offset: 0xBC VA: 0xBC
	|-ArraySortHelper<Vector2>.IntroSort
	|
	|-RVA: 0xBE Offset: 0xBE VA: 0xBE
	|-ArraySortHelper<Vector3>.IntroSort
	|
	|-RVA: 0xC0 Offset: 0xC0 VA: 0xC0
	|-ArraySortHelper<Vector4>.IntroSort
	*/

	// RVA: -1 Offset: -1
	private static int PickPivotAndPartition(T[] keys, int lo, int hi, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x18A Offset: 0x18A VA: 0x18A
	|-ArraySortHelper<byte>.PickPivotAndPartition
	|
	|-RVA: 0x18B Offset: 0x18B VA: 0x18B
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.PickPivotAndPartition
	|
	|-RVA: 0x18C Offset: 0x18C VA: 0x18C
	|-ArraySortHelper<KeyValuePair<Guid, int>>.PickPivotAndPartition
	|
	|-RVA: 0x18D Offset: 0x18D VA: 0x18D
	|-ArraySortHelper<EventProvider.SessionInfo>.PickPivotAndPartition
	|
	|-RVA: 0x18E Offset: 0x18E VA: 0x18E
	|-ArraySortHelper<int>.PickPivotAndPartition
	|
	|-RVA: 0x15E Offset: 0x15E VA: 0x15E
	|-ArraySortHelper<object>.PickPivotAndPartition
	|
	|-RVA: 0x18F Offset: 0x18F VA: 0x18F
	|-ArraySortHelper<ulong>.PickPivotAndPartition
	|
	|-RVA: 0x190 Offset: 0x190 VA: 0x190
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.PickPivotAndPartition
	|
	|-RVA: 0x191 Offset: 0x191 VA: 0x191
	|-ArraySortHelper<Color32>.PickPivotAndPartition
	|
	|-RVA: 0x192 Offset: 0x192 VA: 0x192
	|-ArraySortHelper<RaycastResult>.PickPivotAndPartition
	|
	|-RVA: 0x193 Offset: 0x193 VA: 0x193
	|-ArraySortHelper<RaycastHit>.PickPivotAndPartition
	|
	|-RVA: 0x194 Offset: 0x194 VA: 0x194
	|-ArraySortHelper<UICharInfo>.PickPivotAndPartition
	|
	|-RVA: 0x195 Offset: 0x195 VA: 0x195
	|-ArraySortHelper<UILineInfo>.PickPivotAndPartition
	|
	|-RVA: 0x196 Offset: 0x196 VA: 0x196
	|-ArraySortHelper<UIVertex>.PickPivotAndPartition
	|
	|-RVA: 0x197 Offset: 0x197 VA: 0x197
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.PickPivotAndPartition
	|
	|-RVA: 0x198 Offset: 0x198 VA: 0x198
	|-ArraySortHelper<Vector2>.PickPivotAndPartition
	|
	|-RVA: 0x199 Offset: 0x199 VA: 0x199
	|-ArraySortHelper<Vector3>.PickPivotAndPartition
	|
	|-RVA: 0x19A Offset: 0x19A VA: 0x19A
	|-ArraySortHelper<Vector4>.PickPivotAndPartition
	*/

	// RVA: -1 Offset: -1
	private static void Heapsort(T[] keys, int lo, int hi, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x158 Offset: 0x158 VA: 0x158
	|-ArraySortHelper<byte>.Heapsort
	|
	|-RVA: 0x15E Offset: 0x15E VA: 0x15E
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.Heapsort
	|
	|-RVA: 0x164 Offset: 0x164 VA: 0x164
	|-ArraySortHelper<KeyValuePair<Guid, int>>.Heapsort
	|
	|-RVA: 0x16A Offset: 0x16A VA: 0x16A
	|-ArraySortHelper<EventProvider.SessionInfo>.Heapsort
	|
	|-RVA: 0x170 Offset: 0x170 VA: 0x170
	|-ArraySortHelper<int>.Heapsort
	|
	|-RVA: 0x127 Offset: 0x127 VA: 0x127
	|-ArraySortHelper<object>.Heapsort
	|
	|-RVA: 0x176 Offset: 0x176 VA: 0x176
	|-ArraySortHelper<ulong>.Heapsort
	|
	|-RVA: 0x17C Offset: 0x17C VA: 0x17C
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.Heapsort
	|
	|-RVA: 0x182 Offset: 0x182 VA: 0x182
	|-ArraySortHelper<Color32>.Heapsort
	|
	|-RVA: 0x188 Offset: 0x188 VA: 0x188
	|-ArraySortHelper<RaycastResult>.Heapsort
	|
	|-RVA: 0x18E Offset: 0x18E VA: 0x18E
	|-ArraySortHelper<RaycastHit>.Heapsort
	|
	|-RVA: 0x194 Offset: 0x194 VA: 0x194
	|-ArraySortHelper<UICharInfo>.Heapsort
	|
	|-RVA: 0x19A Offset: 0x19A VA: 0x19A
	|-ArraySortHelper<UILineInfo>.Heapsort
	|
	|-RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0
	|-ArraySortHelper<UIVertex>.Heapsort
	|
	|-RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.Heapsort
	|
	|-RVA: 0x1AC Offset: 0x1AC VA: 0x1AC
	|-ArraySortHelper<Vector2>.Heapsort
	|
	|-RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2
	|-ArraySortHelper<Vector3>.Heapsort
	|
	|-RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8
	|-ArraySortHelper<Vector4>.Heapsort
	*/

	// RVA: -1 Offset: -1
	private static void DownHeap(T[] keys, int i, int n, int lo, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA1 Offset: 0xA1 VA: 0xA1
	|-ArraySortHelper<byte>.DownHeap
	|
	|-RVA: 0xA3 Offset: 0xA3 VA: 0xA3
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.DownHeap
	|
	|-RVA: 0xA5 Offset: 0xA5 VA: 0xA5
	|-ArraySortHelper<KeyValuePair<Guid, int>>.DownHeap
	|
	|-RVA: 0xA7 Offset: 0xA7 VA: 0xA7
	|-ArraySortHelper<EventProvider.SessionInfo>.DownHeap
	|
	|-RVA: 0xA9 Offset: 0xA9 VA: 0xA9
	|-ArraySortHelper<int>.DownHeap
	|
	|-RVA: 0x8E Offset: 0x8E VA: 0x8E
	|-ArraySortHelper<object>.DownHeap
	|
	|-RVA: 0xAB Offset: 0xAB VA: 0xAB
	|-ArraySortHelper<ulong>.DownHeap
	|
	|-RVA: 0xAD Offset: 0xAD VA: 0xAD
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.DownHeap
	|
	|-RVA: 0xAF Offset: 0xAF VA: 0xAF
	|-ArraySortHelper<Color32>.DownHeap
	|
	|-RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	|-ArraySortHelper<RaycastResult>.DownHeap
	|
	|-RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	|-ArraySortHelper<RaycastHit>.DownHeap
	|
	|-RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	|-ArraySortHelper<UICharInfo>.DownHeap
	|
	|-RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	|-ArraySortHelper<UILineInfo>.DownHeap
	|
	|-RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	|-ArraySortHelper<UIVertex>.DownHeap
	|
	|-RVA: 0xBB Offset: 0xBB VA: 0xBB
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.DownHeap
	|
	|-RVA: 0xBD Offset: 0xBD VA: 0xBD
	|-ArraySortHelper<Vector2>.DownHeap
	|
	|-RVA: 0xBF Offset: 0xBF VA: 0xBF
	|-ArraySortHelper<Vector3>.DownHeap
	|
	|-RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	|-ArraySortHelper<Vector4>.DownHeap
	*/

	// RVA: -1 Offset: -1
	private static void InsertionSort(T[] keys, int lo, int hi, Comparison<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x159 Offset: 0x159 VA: 0x159
	|-ArraySortHelper<byte>.InsertionSort
	|
	|-RVA: 0x15F Offset: 0x15F VA: 0x15F
	|-ArraySortHelper<KeyValuePair<DateTime, object>>.InsertionSort
	|
	|-RVA: 0x165 Offset: 0x165 VA: 0x165
	|-ArraySortHelper<KeyValuePair<Guid, int>>.InsertionSort
	|
	|-RVA: 0x16B Offset: 0x16B VA: 0x16B
	|-ArraySortHelper<EventProvider.SessionInfo>.InsertionSort
	|
	|-RVA: 0x171 Offset: 0x171 VA: 0x171
	|-ArraySortHelper<int>.InsertionSort
	|
	|-RVA: 0x128 Offset: 0x128 VA: 0x128
	|-ArraySortHelper<object>.InsertionSort
	|
	|-RVA: 0x177 Offset: 0x177 VA: 0x177
	|-ArraySortHelper<ulong>.InsertionSort
	|
	|-RVA: 0x17D Offset: 0x17D VA: 0x17D
	|-ArraySortHelper<BeforeRenderHelper.OrderBlock>.InsertionSort
	|
	|-RVA: 0x183 Offset: 0x183 VA: 0x183
	|-ArraySortHelper<Color32>.InsertionSort
	|
	|-RVA: 0x189 Offset: 0x189 VA: 0x189
	|-ArraySortHelper<RaycastResult>.InsertionSort
	|
	|-RVA: 0x18F Offset: 0x18F VA: 0x18F
	|-ArraySortHelper<RaycastHit>.InsertionSort
	|
	|-RVA: 0x195 Offset: 0x195 VA: 0x195
	|-ArraySortHelper<UICharInfo>.InsertionSort
	|
	|-RVA: 0x19B Offset: 0x19B VA: 0x19B
	|-ArraySortHelper<UILineInfo>.InsertionSort
	|
	|-RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1
	|-ArraySortHelper<UIVertex>.InsertionSort
	|
	|-RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7
	|-ArraySortHelper<UnitySynchronizationContext.WorkRequest>.InsertionSort
	|
	|-RVA: 0x1AD Offset: 0x1AD VA: 0x1AD
	|-ArraySortHelper<Vector2>.InsertionSort
	|
	|-RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3
	|-ArraySortHelper<Vector3>.InsertionSort
	|
	|-RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9
	|-ArraySortHelper<Vector4>.InsertionSort
	*/
}

// Namespace: System.Collections.Generic
internal class ArraySortHelper<TKey, TValue> // TypeDefIndex: 1205
{
	// Fields
	private static ArraySortHelper<TKey, TValue> s_defaultArraySortHelper; // 0xFFFFFFFF

	// Properties
	public static ArraySortHelper<TKey, TValue> Default { get; }

	// Methods

	// RVA: -1 Offset: -1
	public static ArraySortHelper<TKey, TValue> get_Default() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
	|-ArraySortHelper<object, object>.get_Default
	|
	|-RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
	|-ArraySortHelper<ulong, object>.get_Default
	*/

	// RVA: -1 Offset: -1
	private static ArraySortHelper<TKey, TValue> CreateArraySortHelper() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9
	|-ArraySortHelper<object, object>.CreateArraySortHelper
	|
	|-RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4
	|-ArraySortHelper<ulong, object>.CreateArraySortHelper
	*/

	// RVA: -1 Offset: -1
	public void Sort(TKey[] keys, TValue[] values, int index, int length, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3B Offset: 0x3B VA: 0x3B
	|-ArraySortHelper<object, object>.Sort
	|
	|-RVA: 0x3E Offset: 0x3E VA: 0x3E
	|-ArraySortHelper<ulong, object>.Sort
	*/

	// RVA: -1 Offset: -1
	private static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, IComparer<TKey> comparer, int a, int b) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8F Offset: 0x8F VA: 0x8F
	|-ArraySortHelper<object, object>.SwapIfGreaterWithItems
	|
	|-RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	|-ArraySortHelper<ulong, object>.SwapIfGreaterWithItems
	*/

	// RVA: -1 Offset: -1
	private static void Swap(TKey[] keys, TValue[] values, int i, int j) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x129 Offset: 0x129 VA: 0x129
	|-ArraySortHelper<object, object>.Swap
	|
	|-RVA: 0x1BA Offset: 0x1BA VA: 0x1BA
	|-ArraySortHelper<ulong, object>.Swap
	*/

	// RVA: -1 Offset: -1
	internal static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x90 Offset: 0x90 VA: 0x90
	|-ArraySortHelper<object, object>.IntrospectiveSort
	|
	|-RVA: 0xC3 Offset: 0xC3 VA: 0xC3
	|-ArraySortHelper<ulong, object>.IntrospectiveSort
	*/

	// RVA: -1 Offset: -1
	private static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3C Offset: 0x3C VA: 0x3C
	|-ArraySortHelper<object, object>.IntroSort
	|
	|-RVA: 0x3F Offset: 0x3F VA: 0x3F
	|-ArraySortHelper<ulong, object>.IntroSort
	*/

	// RVA: -1 Offset: -1
	private static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x96 Offset: 0x96 VA: 0x96
	|-ArraySortHelper<object, object>.PickPivotAndPartition
	|
	|-RVA: 0xC4 Offset: 0xC4 VA: 0xC4
	|-ArraySortHelper<ulong, object>.PickPivotAndPartition
	*/

	// RVA: -1 Offset: -1
	private static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x91 Offset: 0x91 VA: 0x91
	|-ArraySortHelper<object, object>.Heapsort
	|
	|-RVA: 0xC4 Offset: 0xC4 VA: 0xC4
	|-ArraySortHelper<ulong, object>.Heapsort
	*/

	// RVA: -1 Offset: -1
	private static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x3D Offset: 0x3D VA: 0x3D
	|-ArraySortHelper<object, object>.DownHeap
	|
	|-RVA: 0x40 Offset: 0x40 VA: 0x40
	|-ArraySortHelper<ulong, object>.DownHeap
	*/

	// RVA: -1 Offset: -1
	private static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x92 Offset: 0x92 VA: 0x92
	|-ArraySortHelper<object, object>.InsertionSort
	|
	|-RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	|-ArraySortHelper<ulong, object>.InsertionSort
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8
	|-ArraySortHelper<object, object>..ctor
	|
	|-RVA: 0xA21 Offset: 0xA21 VA: 0xA21
	|-ArraySortHelper<ulong, object>..ctor
	*/
}

// Namespace: System.Collections.Generic
internal enum InsertionBehavior // TypeDefIndex: 1206
{
	// Fields
	public byte value__; // 0x0
	public const InsertionBehavior None = 0;
	public const InsertionBehavior OverwriteExisting = 1;
	public const InsertionBehavior ThrowOnExisting = 2;
}

// Namespace: System.Collections.Generic
[DebuggerTypeProxyAttribute] // RVA: 0x4EF Offset: 0x4EF VA: 0x4EF
[DebuggerDisplayAttribute] // RVA: 0x4EF Offset: 0x4EF VA: 0x4EF
[DefaultMemberAttribute] // RVA: 0x4EF Offset: 0x4EF VA: 0x4EF
[Serializable]
public class Dictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, ISerializable, IDeserializationCallback // TypeDefIndex: 1207
{
	// Fields
	private int[] buckets; // 0xFFFFFFFF
	private Dictionary.Entry<TKey, TValue>[] entries; // 0xFFFFFFFF
	private int count; // 0xFFFFFFFF
	private int version; // 0xFFFFFFFF
	private int freeList; // 0xFFFFFFFF
	private int freeCount; // 0xFFFFFFFF
	private IEqualityComparer<TKey> comparer; // 0xFFFFFFFF
	private Dictionary.KeyCollection<TKey, TValue> keys; // 0xFFFFFFFF
	private Dictionary.ValueCollection<TKey, TValue> values; // 0xFFFFFFFF
	private object _syncRoot; // 0xFFFFFFFF
	private const string VersionName = "Version";
	private const string HashSizeName = "HashSize";
	private const string KeyValuePairsName = "KeyValuePairs";
	private const string ComparerName = "Comparer";

	// Properties
	public int Count { get; }
	public Dictionary.KeyCollection<TKey, TValue> Keys { get; }
	public Dictionary.ValueCollection<TKey, TValue> Values { get; }
	public TValue Item { get; set; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private object System.Collections.IDictionary.Item { set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x91F Offset: 0x91F VA: 0x91F
	|-Dictionary<int, CultureInfo>..ctor
	|-Dictionary<int, object>..ctor
	|-Dictionary<int, string>..ctor
	|-Dictionary<int, Task>..ctor
	|-Dictionary<int, PointerEventData>..ctor
	|-Dictionary<int, GUILayoutUtility.LayoutCache>..ctor
	|
	|-RVA: 0x92D Offset: 0x92D VA: 0x92D
	|-Dictionary<object, int>..ctor
	|-Dictionary<string, int>..ctor
	|-Dictionary<Graphic, int>..ctor
	|-Dictionary<ICanvasElement, int>..ctor
	|-Dictionary<IClipper, int>..ctor
	|
	|-RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9
	|-Dictionary<object, object>..ctor
	|-Dictionary<string, List<int>>..ctor
	|-Dictionary<string, CultureInfo>..ctor
	|-Dictionary<string, LocalDataStoreSlot>..ctor
	|-Dictionary<string, object>..ctor
	|-Dictionary<string, ResourceSet>..ctor
	|-Dictionary<string, string>..ctor
	|-Dictionary<string, Type>..ctor
	|-Dictionary<IAsyncLocal, object>..ctor
	|-Dictionary<Type, AttributeUsageAttribute>..ctor
	|-Dictionary<Type, TypeInformation>..ctor
	|-Dictionary<Canvas, IndexedSet<Graphic>>..ctor
	|-Dictionary<Font, HashSet<Text>>..ctor
	|
	|-RVA: 0xA48 Offset: 0xA48 VA: 0xA48
	|-Dictionary<object, ResourceLocator>..ctor
	|
	|-RVA: 0x920 Offset: 0x920 VA: 0x920
	|-Dictionary<ulong, object>..ctor
	|-Dictionary<ulong, string>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x876 Offset: 0x876 VA: 0x876
	|-Dictionary<int, object>..ctor
	|-Dictionary<int, TimeType>..ctor
	|
	|-RVA: 0x9D0 Offset: 0x9D0 VA: 0x9D0
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x811 Offset: 0x811 VA: 0x811
	|-Dictionary<object, object>..ctor
	|-Dictionary<string, string>..ctor
	|-Dictionary<string, UriParser>..ctor
	|-Dictionary<Type, MonoCustomAttrs.AttributeInfo>..ctor
	|
	|-RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7
	|-Dictionary<object, ResourceLocator>..ctor
	|
	|-RVA: 0x9DD Offset: 0x9DD VA: 0x9DD
	|-Dictionary<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(IEqualityComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9CB Offset: 0x9CB VA: 0x9CB
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x9D1 Offset: 0x9D1 VA: 0x9D1
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x812 Offset: 0x812 VA: 0x812
	|-Dictionary<object, object>..ctor
	|-Dictionary<string, SimpleCollator>..ctor
	|-Dictionary<string, GUIStyle>..ctor
	|
	|-RVA: 0x86F Offset: 0x86F VA: 0x86F
	|-Dictionary<object, ResourceLocator>..ctor
	|-Dictionary<string, ResourceLocator>..ctor
	|
	|-RVA: 0x9DE Offset: 0x9DE VA: 0x9DE
	|-Dictionary<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(int capacity, IEqualityComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x600 Offset: 0x600 VA: 0x600
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x609 Offset: 0x609 VA: 0x609
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x40D Offset: 0x40D VA: 0x40D
	|-Dictionary<object, object>..ctor
	|
	|-RVA: 0x613 Offset: 0x613 VA: 0x613
	|-Dictionary<object, ResourceLocator>..ctor
	|
	|-RVA: 0x61D Offset: 0x61D VA: 0x61D
	|-Dictionary<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(IDictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9CC Offset: 0x9CC VA: 0x9CC
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x9D2 Offset: 0x9D2 VA: 0x9D2
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x813 Offset: 0x813 VA: 0x813
	|-Dictionary<object, object>..ctor
	|-Dictionary<IAsyncLocal, object>..ctor
	|
	|-RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8
	|-Dictionary<object, ResourceLocator>..ctor
	|
	|-RVA: 0x9DF Offset: 0x9DF VA: 0x9DF
	|-Dictionary<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x601 Offset: 0x601 VA: 0x601
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x60A Offset: 0x60A VA: 0x60A
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x40E Offset: 0x40E VA: 0x40E
	|-Dictionary<object, object>..ctor
	|
	|-RVA: 0x614 Offset: 0x614 VA: 0x614
	|-Dictionary<object, ResourceLocator>..ctor
	|
	|-RVA: 0x61E Offset: 0x61E VA: 0x61E
	|-Dictionary<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x602 Offset: 0x602 VA: 0x602
	|-Dictionary<int, object>..ctor
	|
	|-RVA: 0x60B Offset: 0x60B VA: 0x60B
	|-Dictionary<object, int>..ctor
	|
	|-RVA: 0x40F Offset: 0x40F VA: 0x40F
	|-Dictionary<object, object>..ctor
	|
	|-RVA: 0x615 Offset: 0x615 VA: 0x615
	|-Dictionary<object, ResourceLocator>..ctor
	|
	|-RVA: 0x61F Offset: 0x61F VA: 0x61F
	|-Dictionary<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 23
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDF1 Offset: 0xDF1 VA: 0xDF1
	|-Dictionary<int, object>.get_Count
	|-Dictionary<int, TimeType>.get_Count
	|
	|-RVA: 0x1076 Offset: 0x1076 VA: 0x1076
	|-Dictionary<object, int>.get_Count
	|
	|-RVA: 0xD55 Offset: 0xD55 VA: 0xD55
	|-Dictionary<object, object>.get_Count
	|-Dictionary<string, string>.get_Count
	|-Dictionary<string, UriParser>.get_Count
	|-Dictionary<Font, HashSet<Text>>.get_Count
	|
	|-RVA: 0x107F Offset: 0x107F VA: 0x107F
	|-Dictionary<object, ResourceLocator>.get_Count
	|
	|-RVA: 0x1088 Offset: 0x1088 VA: 0x1088
	|-Dictionary<ulong, object>.get_Count
	*/

	// RVA: -1 Offset: -1
	public Dictionary.KeyCollection<TKey, TValue> get_Keys() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD2 Offset: 0xDD2 VA: 0xDD2
	|-Dictionary<int, object>.get_Keys
	|-Dictionary<int, string>.get_Keys
	|
	|-RVA: 0x1077 Offset: 0x1077 VA: 0x1077
	|-Dictionary<object, int>.get_Keys
	|
	|-RVA: 0xD56 Offset: 0xD56 VA: 0xD56
	|-Dictionary<object, object>.get_Keys
	|-Dictionary<string, string>.get_Keys
	|
	|-RVA: 0x1080 Offset: 0x1080 VA: 0x1080
	|-Dictionary<object, ResourceLocator>.get_Keys
	|
	|-RVA: 0xDD5 Offset: 0xDD5 VA: 0xDD5
	|-Dictionary<ulong, object>.get_Keys
	|-Dictionary<ulong, string>.get_Keys
	*/

	// RVA: -1 Offset: -1
	public Dictionary.ValueCollection<TKey, TValue> get_Values() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE05 Offset: 0xE05 VA: 0xE05
	|-Dictionary<int, PointerEventData>.get_Values
	|-Dictionary<int, object>.get_Values
	|
	|-RVA: 0xD57 Offset: 0xD57 VA: 0xD57
	|-Dictionary<string, GUIStyle>.get_Values
	|-Dictionary<object, object>.get_Values
	|-Dictionary<string, Type>.get_Values
	|
	|-RVA: 0x1078 Offset: 0x1078 VA: 0x1078
	|-Dictionary<object, int>.get_Values
	|
	|-RVA: 0x1081 Offset: 0x1081 VA: 0x1081
	|-Dictionary<object, ResourceLocator>.get_Values
	|
	|-RVA: 0x1089 Offset: 0x1089 VA: 0x1089
	|-Dictionary<ulong, object>.get_Values
	*/

	// RVA: -1 Offset: -1 Slot: 26
	public TValue get_Item(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6B3 Offset: 0x6B3 VA: 0x6B3
	|-Dictionary<int, object>.get_Item
	|-Dictionary<int, string>.get_Item
	|-Dictionary<int, TimeType>.get_Item
	|
	|-RVA: 0x7BB Offset: 0x7BB VA: 0x7BB
	|-Dictionary<object, int>.get_Item
	|
	|-RVA: 0x667 Offset: 0x667 VA: 0x667
	|-Dictionary<object, object>.get_Item
	|
	|-RVA: 0x616 Offset: 0x616 VA: 0x616
	|-Dictionary<object, ResourceLocator>.get_Item
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-Dictionary<ulong, object>.get_Item
	|-Dictionary<ulong, string>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public void set_Item(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x45D Offset: 0x45D VA: 0x45D
	|-Dictionary<int, CultureInfo>.set_Item
	|-Dictionary<int, object>.set_Item
	|-Dictionary<int, string>.set_Item
	|-Dictionary<int, Task>.set_Item
	|-Dictionary<int, GUILayoutUtility.LayoutCache>.set_Item
	|
	|-RVA: 0x60C Offset: 0x60C VA: 0x60C
	|-Dictionary<object, int>.set_Item
	|
	|-RVA: 0x40B Offset: 0x40B VA: 0x40B
	|-Dictionary<object, object>.set_Item
	|-Dictionary<string, SimpleCollator>.set_Item
	|-Dictionary<string, List<int>>.set_Item
	|-Dictionary<string, CultureInfo>.set_Item
	|-Dictionary<string, object>.set_Item
	|-Dictionary<string, string>.set_Item
	|-Dictionary<string, UriParser>.set_Item
	|-Dictionary<string, GUIStyle>.set_Item
	|-Dictionary<IAsyncLocal, object>.set_Item
	|-Dictionary<Type, AttributeUsageAttribute>.set_Item
	|
	|-RVA: 0x463 Offset: 0x463 VA: 0x463
	|-Dictionary<object, ResourceLocator>.set_Item
	|-Dictionary<string, ResourceLocator>.set_Item
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-Dictionary<ulong, object>.set_Item
	|-Dictionary<ulong, string>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Add(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x46B Offset: 0x46B VA: 0x46B
	|-Dictionary<int, object>.Add
	|-Dictionary<int, string>.Add
	|-Dictionary<int, TimeType>.Add
	|-Dictionary<int, PointerEventData>.Add
	|
	|-RVA: 0x466 Offset: 0x466 VA: 0x466
	|-Dictionary<object, int>.Add
	|-Dictionary<string, int>.Add
	|
	|-RVA: 0x410 Offset: 0x410 VA: 0x410
	|-Dictionary<object, object>.Add
	|-Dictionary<string, LocalDataStoreSlot>.Add
	|-Dictionary<string, object>.Add
	|-Dictionary<string, ResourceSet>.Add
	|-Dictionary<string, string>.Add
	|-Dictionary<string, Type>.Add
	|-Dictionary<Type, MonoCustomAttrs.AttributeInfo>.Add
	|-Dictionary<Type, TypeInformation>.Add
	|-Dictionary<Canvas, IndexedSet<Graphic>>.Add
	|-Dictionary<Font, HashSet<Text>>.Add
	|
	|-RVA: 0x464 Offset: 0x464 VA: 0x464
	|-Dictionary<object, ResourceLocator>.Add
	|-Dictionary<string, ResourceLocator>.Add
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-Dictionary<ulong, object>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9CD Offset: 0x9CD VA: 0x9CD
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x814 Offset: 0x814 VA: 0x814
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9
	|-Dictionary<object, ResourceLocator>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	|
	|-RVA: 0x9E0 Offset: 0x9E0 VA: 0x9E0
	|-Dictionary<ulong, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7B6 Offset: 0x7B6 VA: 0x7B6
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x7BC Offset: 0x7BC VA: 0x7BC
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x668 Offset: 0x668 VA: 0x668
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x7C1 Offset: 0x7C1 VA: 0x7C1
	|-Dictionary<object, ResourceLocator>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	|
	|-RVA: 0x7C7 Offset: 0x7C7 VA: 0x7C7
	|-Dictionary<ulong, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7B7 Offset: 0x7B7 VA: 0x7B7
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x7BD Offset: 0x7BD VA: 0x7BD
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x669 Offset: 0x669 VA: 0x669
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x7C2 Offset: 0x7C2 VA: 0x7C2
	|-Dictionary<object, ResourceLocator>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	|
	|-RVA: 0x7C8 Offset: 0x7C8 VA: 0x7C8
	|-Dictionary<ulong, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x93A Offset: 0x93A VA: 0x93A
	|-Dictionary<int, object>.Clear
	|-Dictionary<int, PointerEventData>.Clear
	|
	|-RVA: 0xA46 Offset: 0xA46 VA: 0xA46
	|-Dictionary<object, int>.Clear
	|
	|-RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
	|-Dictionary<object, object>.Clear
	|
	|-RVA: 0xA49 Offset: 0xA49 VA: 0xA49
	|-Dictionary<object, ResourceLocator>.Clear
	|
	|-RVA: 0xA4B Offset: 0xA4B VA: 0xA4B
	|-Dictionary<ulong, object>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 27
	public bool ContainsKey(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7B8 Offset: 0x7B8 VA: 0x7B8
	|-Dictionary<int, object>.ContainsKey
	|
	|-RVA: 0x6B6 Offset: 0x6B6 VA: 0x6B6
	|-Dictionary<object, int>.ContainsKey
	|-Dictionary<string, int>.ContainsKey
	|
	|-RVA: 0x66A Offset: 0x66A VA: 0x66A
	|-Dictionary<object, object>.ContainsKey
	|-Dictionary<string, object>.ContainsKey
	|-Dictionary<string, string>.ContainsKey
	|-Dictionary<string, Type>.ContainsKey
	|
	|-RVA: 0x7C3 Offset: 0x7C3 VA: 0x7C3
	|-Dictionary<object, ResourceLocator>.ContainsKey
	|
	|-RVA: 0x1D Offset: 0x1D VA: 0x1D
	|-Dictionary<ulong, object>.ContainsKey
	*/

	// RVA: -1 Offset: -1
	public bool ContainsValue(TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7B9 Offset: 0x7B9 VA: 0x7B9
	|-Dictionary<int, object>.ContainsValue
	|
	|-RVA: 0x7BE Offset: 0x7BE VA: 0x7BE
	|-Dictionary<object, int>.ContainsValue
	|
	|-RVA: 0x66B Offset: 0x66B VA: 0x66B
	|-Dictionary<object, object>.ContainsValue
	|-Dictionary<string, ResourceSet>.ContainsValue
	|
	|-RVA: 0x7C4 Offset: 0x7C4 VA: 0x7C4
	|-Dictionary<object, ResourceLocator>.ContainsValue
	|
	|-RVA: 0x7C9 Offset: 0x7C9 VA: 0x7C9
	|-Dictionary<ulong, object>.ContainsValue
	*/

	// RVA: -1 Offset: -1
	private void CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x603 Offset: 0x603 VA: 0x603
	|-Dictionary<int, object>.CopyTo
	|
	|-RVA: 0x60D Offset: 0x60D VA: 0x60D
	|-Dictionary<object, int>.CopyTo
	|
	|-RVA: 0x411 Offset: 0x411 VA: 0x411
	|-Dictionary<object, object>.CopyTo
	|
	|-RVA: 0x617 Offset: 0x617 VA: 0x617
	|-Dictionary<object, ResourceLocator>.CopyTo
	|
	|-RVA: 0x620 Offset: 0x620 VA: 0x620
	|-Dictionary<ulong, object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public Dictionary.Enumerator<TKey, TValue> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x88A Offset: 0x88A VA: 0x88A
	|-Dictionary<int, PointerEventData>.GetEnumerator
	|-Dictionary<int, object>.GetEnumerator
	|
	|-RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	|-Dictionary<object, int>.GetEnumerator
	|
	|-RVA: 0x815 Offset: 0x815 VA: 0x815
	|-Dictionary<object, object>.GetEnumerator
	|-Dictionary<string, string>.GetEnumerator
	|
	|-RVA: 0x9DA Offset: 0x9DA VA: 0x9DA
	|-Dictionary<object, ResourceLocator>.GetEnumerator
	|
	|-RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1
	|-Dictionary<ulong, object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 14
	private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1070 Offset: 0x1070 VA: 0x1070
	|-Dictionary<int, object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0x1079 Offset: 0x1079 VA: 0x1079
	|-Dictionary<object, int>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0xD5B Offset: 0xD5B VA: 0xD5B
	|-Dictionary<object, object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0x1082 Offset: 0x1082 VA: 0x1082
	|-Dictionary<object, ResourceLocator>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	|
	|-RVA: 0x108A Offset: 0x108A VA: 0x108A
	|-Dictionary<ulong, object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 28
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x604 Offset: 0x604 VA: 0x604
	|-Dictionary<int, object>.GetObjectData
	|
	|-RVA: 0x60E Offset: 0x60E VA: 0x60E
	|-Dictionary<object, int>.GetObjectData
	|
	|-RVA: 0x412 Offset: 0x412 VA: 0x412
	|-Dictionary<object, object>.GetObjectData
	|
	|-RVA: 0x618 Offset: 0x618 VA: 0x618
	|-Dictionary<object, ResourceLocator>.GetObjectData
	|
	|-RVA: 0x621 Offset: 0x621 VA: 0x621
	|-Dictionary<ulong, object>.GetObjectData
	*/

	// RVA: -1 Offset: -1
	private int FindEntry(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7BA Offset: 0x7BA VA: 0x7BA
	|-Dictionary<int, object>.FindEntry
	|
	|-RVA: 0x7BF Offset: 0x7BF VA: 0x7BF
	|-Dictionary<object, int>.FindEntry
	|
	|-RVA: 0x66C Offset: 0x66C VA: 0x66C
	|-Dictionary<object, object>.FindEntry
	|
	|-RVA: 0x7C5 Offset: 0x7C5 VA: 0x7C5
	|-Dictionary<object, ResourceLocator>.FindEntry
	|
	|-RVA: 0x1E Offset: 0x1E VA: 0x1E
	|-Dictionary<ulong, object>.FindEntry
	*/

	// RVA: -1 Offset: -1
	private void Initialize(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9CE Offset: 0x9CE VA: 0x9CE
	|-Dictionary<int, object>.Initialize
	|
	|-RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5
	|-Dictionary<object, int>.Initialize
	|
	|-RVA: 0x816 Offset: 0x816 VA: 0x816
	|-Dictionary<object, object>.Initialize
	|
	|-RVA: 0x9DB Offset: 0x9DB VA: 0x9DB
	|-Dictionary<object, ResourceLocator>.Initialize
	|
	|-RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2
	|-Dictionary<ulong, object>.Initialize
	*/

	// RVA: -1 Offset: -1
	private bool TryInsert(TKey key, TValue value, InsertionBehavior behavior) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x19B Offset: 0x19B VA: 0x19B
	|-Dictionary<int, object>.TryInsert
	|
	|-RVA: 0x19C Offset: 0x19C VA: 0x19C
	|-Dictionary<object, int>.TryInsert
	|
	|-RVA: 0x15F Offset: 0x15F VA: 0x15F
	|-Dictionary<object, object>.TryInsert
	|
	|-RVA: 0x19D Offset: 0x19D VA: 0x19D
	|-Dictionary<object, ResourceLocator>.TryInsert
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-Dictionary<ulong, object>.TryInsert
	*/

	// RVA: -1 Offset: -1 Slot: 29
	public virtual void OnDeserialization(object sender) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9CF Offset: 0x9CF VA: 0x9CF
	|-Dictionary<int, object>.OnDeserialization
	|
	|-RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6
	|-Dictionary<object, int>.OnDeserialization
	|
	|-RVA: 0x817 Offset: 0x817 VA: 0x817
	|-Dictionary<object, object>.OnDeserialization
	|
	|-RVA: 0x9DC Offset: 0x9DC VA: 0x9DC
	|-Dictionary<object, ResourceLocator>.OnDeserialization
	|
	|-RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3
	|-Dictionary<ulong, object>.OnDeserialization
	*/

	// RVA: -1 Offset: -1
	private void Resize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA45 Offset: 0xA45 VA: 0xA45
	|-Dictionary<int, object>.Resize
	|
	|-RVA: 0xA47 Offset: 0xA47 VA: 0xA47
	|-Dictionary<object, int>.Resize
	|
	|-RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
	|-Dictionary<object, object>.Resize
	|
	|-RVA: 0xA4A Offset: 0xA4A VA: 0xA4A
	|-Dictionary<object, ResourceLocator>.Resize
	|
	|-RVA: 0xA4C Offset: 0xA4C VA: 0xA4C
	|-Dictionary<ulong, object>.Resize
	*/

	// RVA: -1 Offset: -1
	private void Resize(int newSize, bool forceNewHashCodes) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x605 Offset: 0x605 VA: 0x605
	|-Dictionary<int, object>.Resize
	|
	|-RVA: 0x60F Offset: 0x60F VA: 0x60F
	|-Dictionary<object, int>.Resize
	|
	|-RVA: 0x413 Offset: 0x413 VA: 0x413
	|-Dictionary<object, object>.Resize
	|
	|-RVA: 0x619 Offset: 0x619 VA: 0x619
	|-Dictionary<object, ResourceLocator>.Resize
	|
	|-RVA: 0x622 Offset: 0x622 VA: 0x622
	|-Dictionary<ulong, object>.Resize
	*/

	// RVA: -1 Offset: -1 Slot: 30
	public bool Remove(TKey key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8
	|-Dictionary<int, object>.Remove
	|-Dictionary<int, Task>.Remove
	|-Dictionary<int, PointerEventData>.Remove
	|
	|-RVA: 0x7C0 Offset: 0x7C0 VA: 0x7C0
	|-Dictionary<object, int>.Remove
	|
	|-RVA: 0x66D Offset: 0x66D VA: 0x66D
	|-Dictionary<object, object>.Remove
	|-Dictionary<string, LocalDataStoreSlot>.Remove
	|-Dictionary<string, object>.Remove
	|-Dictionary<Canvas, IndexedSet<Graphic>>.Remove
	|-Dictionary<Font, HashSet<Text>>.Remove
	|
	|-RVA: 0x7C6 Offset: 0x7C6 VA: 0x7C6
	|-Dictionary<object, ResourceLocator>.Remove
	|
	|-RVA: 0x1F Offset: 0x1F VA: 0x1F
	|-Dictionary<ulong, object>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 22
	public bool TryGetValue(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA67 Offset: 0xA67 VA: 0xA67
	|-Dictionary<int, CultureInfo>.TryGetValue
	|-Dictionary<int, object>.TryGetValue
	|-Dictionary<int, string>.TryGetValue
	|-Dictionary<int, PointerEventData>.TryGetValue
	|-Dictionary<int, GUILayoutUtility.LayoutCache>.TryGetValue
	|
	|-RVA: 0xA69 Offset: 0xA69 VA: 0xA69
	|-Dictionary<object, int>.TryGetValue
	|-Dictionary<string, int>.TryGetValue
	|
	|-RVA: 0xA4F Offset: 0xA4F VA: 0xA4F
	|-Dictionary<object, object>.TryGetValue
	|-Dictionary<string, SimpleCollator>.TryGetValue
	|-Dictionary<string, List<int>>.TryGetValue
	|-Dictionary<string, CultureInfo>.TryGetValue
	|-Dictionary<string, ResourceSet>.TryGetValue
	|-Dictionary<string, string>.TryGetValue
	|-Dictionary<string, UriParser>.TryGetValue
	|-Dictionary<string, GUIStyle>.TryGetValue
	|-Dictionary<IAsyncLocal, object>.TryGetValue
	|-Dictionary<Type, AttributeUsageAttribute>.TryGetValue
	|-Dictionary<Type, MonoCustomAttrs.AttributeInfo>.TryGetValue
	|-Dictionary<Type, TypeInformation>.TryGetValue
	|-Dictionary<Canvas, IndexedSet<Graphic>>.TryGetValue
	|-Dictionary<Font, HashSet<Text>>.TryGetValue
	|
	|-RVA: 0xA68 Offset: 0xA68 VA: 0xA68
	|-Dictionary<object, ResourceLocator>.TryGetValue
	|-Dictionary<string, ResourceLocator>.TryGetValue
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-Dictionary<ulong, object>.TryGetValue
	|-Dictionary<ulong, string>.TryGetValue
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1071 Offset: 0x1071 VA: 0x1071
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x107A Offset: 0x107A VA: 0x107A
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0xD58 Offset: 0xD58 VA: 0xD58
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x1083 Offset: 0x1083 VA: 0x1083
	|-Dictionary<object, ResourceLocator>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	|
	|-RVA: 0x108B Offset: 0x108B VA: 0x108B
	|-Dictionary<ulong, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x606 Offset: 0x606 VA: 0x606
	|-Dictionary<int, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x610 Offset: 0x610 VA: 0x610
	|-Dictionary<object, int>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x414 Offset: 0x414 VA: 0x414
	|-Dictionary<object, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x61A Offset: 0x61A VA: 0x61A
	|-Dictionary<object, ResourceLocator>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	|
	|-RVA: 0x623 Offset: 0x623 VA: 0x623
	|-Dictionary<ulong, object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x607 Offset: 0x607 VA: 0x607
	|-Dictionary<int, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x611 Offset: 0x611 VA: 0x611
	|-Dictionary<object, int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x415 Offset: 0x415 VA: 0x415
	|-Dictionary<object, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x61B Offset: 0x61B VA: 0x61B
	|-Dictionary<object, ResourceLocator>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x624 Offset: 0x624 VA: 0x624
	|-Dictionary<ulong, object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1072 Offset: 0x1072 VA: 0x1072
	|-Dictionary<int, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x107B Offset: 0x107B VA: 0x107B
	|-Dictionary<object, int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0xD5C Offset: 0xD5C VA: 0xD5C
	|-Dictionary<object, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1084 Offset: 0x1084 VA: 0x1084
	|-Dictionary<object, ResourceLocator>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x108C Offset: 0x108C VA: 0x108C
	|-Dictionary<ulong, object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1073 Offset: 0x1073 VA: 0x1073
	|-Dictionary<int, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x107C Offset: 0x107C VA: 0x107C
	|-Dictionary<object, int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0xD59 Offset: 0xD59 VA: 0xD59
	|-Dictionary<object, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1085 Offset: 0x1085 VA: 0x1085
	|-Dictionary<object, ResourceLocator>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x108D Offset: 0x108D VA: 0x108D
	|-Dictionary<ulong, object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 20
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1074 Offset: 0x1074 VA: 0x1074
	|-Dictionary<int, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x107D Offset: 0x107D VA: 0x107D
	|-Dictionary<object, int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0xD5A Offset: 0xD5A VA: 0xD5A
	|-Dictionary<object, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1086 Offset: 0x1086 VA: 0x1086
	|-Dictionary<object, ResourceLocator>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x108E Offset: 0x108E VA: 0x108E
	|-Dictionary<ulong, object>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private void System.Collections.IDictionary.set_Item(object key, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x608 Offset: 0x608 VA: 0x608
	|-Dictionary<int, object>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x612 Offset: 0x612 VA: 0x612
	|-Dictionary<object, int>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x40C Offset: 0x40C VA: 0x40C
	|-Dictionary<object, object>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x61C Offset: 0x61C VA: 0x61C
	|-Dictionary<object, ResourceLocator>.System.Collections.IDictionary.set_Item
	|
	|-RVA: 0x625 Offset: 0x625 VA: 0x625
	|-Dictionary<ulong, object>.System.Collections.IDictionary.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1075 Offset: 0x1075 VA: 0x1075
	|-Dictionary<int, object>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x107E Offset: 0x107E VA: 0x107E
	|-Dictionary<object, int>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0xD5D Offset: 0xD5D VA: 0xD5D
	|-Dictionary<object, object>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x1087 Offset: 0x1087 VA: 0x1087
	|-Dictionary<object, ResourceLocator>.System.Collections.IDictionary.GetEnumerator
	|
	|-RVA: 0x108F Offset: 0x108F VA: 0x108F
	|-Dictionary<ulong, object>.System.Collections.IDictionary.GetEnumerator
	*/
}

// Namespace: 
private struct Dictionary.Entry<TKey, TValue> // TypeDefIndex: 1208
{
	// Fields
	public int hashCode; // 0xFFFFFFFF
	public int next; // 0xFFFFFFFF
	public TKey key; // 0xFFFFFFFF
	public TValue value; // 0xFFFFFFFF
}

// Namespace: 
[Serializable]
public struct Dictionary.Enumerator<TKey, TValue> : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator, IDictionaryEnumerator // TypeDefIndex: 1209
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0xFFFFFFFF
	private int version; // 0xFFFFFFFF
	private int index; // 0xFFFFFFFF
	private KeyValuePair<TKey, TValue> current; // 0xFFFFFFFF
	private int getEnumeratorRetType; // 0xFFFFFFFF

	// Properties
	public KeyValuePair<TKey, TValue> Current { get; }
	private object System.Collections.IEnumerator.Current { get; }
	private DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }
	private object System.Collections.IDictionaryEnumerator.Key { get; }
	private object System.Collections.IDictionaryEnumerator.Value { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5EC Offset: 0x5EC VA: 0x5EC
	|-Dictionary.Enumerator<int, object>..ctor
	|
	|-RVA: 0x5ED Offset: 0x5ED VA: 0x5ED
	|-Dictionary.Enumerator<object, int>..ctor
	|
	|-RVA: 0x416 Offset: 0x416 VA: 0x416
	|-Dictionary.Enumerator<object, object>..ctor
	|
	|-RVA: 0x5EE Offset: 0x5EE VA: 0x5EE
	|-Dictionary.Enumerator<object, ResourceLocator>..ctor
	|
	|-RVA: 0x5EF Offset: 0x5EF VA: 0x5EF
	|-Dictionary.Enumerator<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE0A Offset: 0xE0A VA: 0xE0A
	|-Dictionary.Enumerator<int, object>.MoveNext
	|-Dictionary.Enumerator<int, PointerEventData>.MoveNext
	|
	|-RVA: 0x1020 Offset: 0x1020 VA: 0x1020
	|-Dictionary.Enumerator<object, int>.MoveNext
	|
	|-RVA: 0xD61 Offset: 0xD61 VA: 0xD61
	|-Dictionary.Enumerator<object, object>.MoveNext
	|-Dictionary.Enumerator<string, string>.MoveNext
	|
	|-RVA: 0x1024 Offset: 0x1024 VA: 0x1024
	|-Dictionary.Enumerator<object, ResourceLocator>.MoveNext
	|
	|-RVA: 0x1028 Offset: 0x1028 VA: 0x1028
	|-Dictionary.Enumerator<ulong, object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public KeyValuePair<TKey, TValue> get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x88B Offset: 0x88B VA: 0x88B
	|-Dictionary.Enumerator<int, PointerEventData>.get_Current
	|-Dictionary.Enumerator<int, object>.get_Current
	|
	|-RVA: 0x9AA Offset: 0x9AA VA: 0x9AA
	|-Dictionary.Enumerator<object, int>.get_Current
	|
	|-RVA: 0x818 Offset: 0x818 VA: 0x818
	|-Dictionary.Enumerator<object, object>.get_Current
	|-Dictionary.Enumerator<string, string>.get_Current
	|
	|-RVA: 0x9AC Offset: 0x9AC VA: 0x9AC
	|-Dictionary.Enumerator<object, ResourceLocator>.get_Current
	|
	|-RVA: 0x9AE Offset: 0x9AE VA: 0x9AE
	|-Dictionary.Enumerator<ulong, object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x93B Offset: 0x93B VA: 0x93B
	|-Dictionary.Enumerator<int, object>.Dispose
	|-Dictionary.Enumerator<int, PointerEventData>.Dispose
	|
	|-RVA: 0xA33 Offset: 0xA33 VA: 0xA33
	|-Dictionary.Enumerator<object, int>.Dispose
	|
	|-RVA: 0x8DC Offset: 0x8DC VA: 0x8DC
	|-Dictionary.Enumerator<object, object>.Dispose
	|-Dictionary.Enumerator<string, string>.Dispose
	|
	|-RVA: 0xA34 Offset: 0xA34 VA: 0xA34
	|-Dictionary.Enumerator<object, ResourceLocator>.Dispose
	|
	|-RVA: 0xA35 Offset: 0xA35 VA: 0xA35
	|-Dictionary.Enumerator<ulong, object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x101D Offset: 0x101D VA: 0x101D
	|-Dictionary.Enumerator<int, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1021 Offset: 0x1021 VA: 0x1021
	|-Dictionary.Enumerator<object, int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD5E Offset: 0xD5E VA: 0xD5E
	|-Dictionary.Enumerator<object, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1025 Offset: 0x1025 VA: 0x1025
	|-Dictionary.Enumerator<object, ResourceLocator>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1029 Offset: 0x1029 VA: 0x1029
	|-Dictionary.Enumerator<ulong, object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9A9 Offset: 0x9A9 VA: 0x9A9
	|-Dictionary.Enumerator<int, object>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0x9AB Offset: 0x9AB VA: 0x9AB
	|-Dictionary.Enumerator<object, int>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0x819 Offset: 0x819 VA: 0x819
	|-Dictionary.Enumerator<object, object>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0x9AD Offset: 0x9AD VA: 0x9AD
	|-Dictionary.Enumerator<object, ResourceLocator>.System.Collections.IDictionaryEnumerator.get_Entry
	|
	|-RVA: 0x9AF Offset: 0x9AF VA: 0x9AF
	|-Dictionary.Enumerator<ulong, object>.System.Collections.IDictionaryEnumerator.get_Entry
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private object System.Collections.IDictionaryEnumerator.get_Key() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x101E Offset: 0x101E VA: 0x101E
	|-Dictionary.Enumerator<int, object>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0x1022 Offset: 0x1022 VA: 0x1022
	|-Dictionary.Enumerator<object, int>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0xD5F Offset: 0xD5F VA: 0xD5F
	|-Dictionary.Enumerator<object, object>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0x1026 Offset: 0x1026 VA: 0x1026
	|-Dictionary.Enumerator<object, ResourceLocator>.System.Collections.IDictionaryEnumerator.get_Key
	|
	|-RVA: 0x102A Offset: 0x102A VA: 0x102A
	|-Dictionary.Enumerator<ulong, object>.System.Collections.IDictionaryEnumerator.get_Key
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private object System.Collections.IDictionaryEnumerator.get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x101F Offset: 0x101F VA: 0x101F
	|-Dictionary.Enumerator<int, object>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0x1023 Offset: 0x1023 VA: 0x1023
	|-Dictionary.Enumerator<object, int>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0xD60 Offset: 0xD60 VA: 0xD60
	|-Dictionary.Enumerator<object, object>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0x1027 Offset: 0x1027 VA: 0x1027
	|-Dictionary.Enumerator<object, ResourceLocator>.System.Collections.IDictionaryEnumerator.get_Value
	|
	|-RVA: 0x102B Offset: 0x102B VA: 0x102B
	|-Dictionary.Enumerator<ulong, object>.System.Collections.IDictionaryEnumerator.get_Value
	*/
}

// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0
[DebuggerTypeProxyAttribute] // RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0
[Serializable]
public sealed class Dictionary.KeyCollection<TKey, TValue> : ICollection<TKey>, IEnumerable<TKey>, IEnumerable, ICollection, IReadOnlyCollection<TKey> // TypeDefIndex: 1210
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0xFFFFFFFF

	// Properties
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Dictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9B4 Offset: 0x9B4 VA: 0x9B4
	|-Dictionary.KeyCollection<int, object>..ctor
	|
	|-RVA: 0x9B6 Offset: 0x9B6 VA: 0x9B6
	|-Dictionary.KeyCollection<object, int>..ctor
	|
	|-RVA: 0x81A Offset: 0x81A VA: 0x81A
	|-Dictionary.KeyCollection<object, object>..ctor
	|
	|-RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8
	|-Dictionary.KeyCollection<object, ResourceLocator>..ctor
	|
	|-RVA: 0x9BA Offset: 0x9BA VA: 0x9BA
	|-Dictionary.KeyCollection<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public void CopyTo(TKey[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5F0 Offset: 0x5F0 VA: 0x5F0
	|-Dictionary.KeyCollection<int, object>.CopyTo
	|
	|-RVA: 0x5F2 Offset: 0x5F2 VA: 0x5F2
	|-Dictionary.KeyCollection<object, int>.CopyTo
	|
	|-RVA: 0x417 Offset: 0x417 VA: 0x417
	|-Dictionary.KeyCollection<object, object>.CopyTo
	|-Dictionary.KeyCollection<string, string>.CopyTo
	|
	|-RVA: 0x5F4 Offset: 0x5F4 VA: 0x5F4
	|-Dictionary.KeyCollection<object, ResourceLocator>.CopyTo
	|
	|-RVA: 0x5F6 Offset: 0x5F6 VA: 0x5F6
	|-Dictionary.KeyCollection<ulong, object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 17
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1037 Offset: 0x1037 VA: 0x1037
	|-Dictionary.KeyCollection<int, object>.get_Count
	|
	|-RVA: 0x103D Offset: 0x103D VA: 0x103D
	|-Dictionary.KeyCollection<object, int>.get_Count
	|
	|-RVA: 0xD62 Offset: 0xD62 VA: 0xD62
	|-Dictionary.KeyCollection<object, object>.get_Count
	|-Dictionary.KeyCollection<string, string>.get_Count
	|
	|-RVA: 0x1043 Offset: 0x1043 VA: 0x1043
	|-Dictionary.KeyCollection<object, ResourceLocator>.get_Count
	|
	|-RVA: 0x1049 Offset: 0x1049 VA: 0x1049
	|-Dictionary.KeyCollection<ulong, object>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1038 Offset: 0x1038 VA: 0x1038
	|-Dictionary.KeyCollection<int, object>.System.Collections.Generic.ICollection<TKey>.get_IsReadOnly
	|
	|-RVA: 0x103E Offset: 0x103E VA: 0x103E
	|-Dictionary.KeyCollection<object, int>.System.Collections.Generic.ICollection<TKey>.get_IsReadOnly
	|
	|-RVA: 0xD63 Offset: 0xD63 VA: 0xD63
	|-Dictionary.KeyCollection<object, object>.System.Collections.Generic.ICollection<TKey>.get_IsReadOnly
	|
	|-RVA: 0x1044 Offset: 0x1044 VA: 0x1044
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TKey>.get_IsReadOnly
	|
	|-RVA: 0x104A Offset: 0x104A VA: 0x104A
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.Generic.ICollection<TKey>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.Generic.ICollection<TKey>.Add(TKey item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9B5 Offset: 0x9B5 VA: 0x9B5
	|-Dictionary.KeyCollection<int, object>.System.Collections.Generic.ICollection<TKey>.Add
	|
	|-RVA: 0x9B7 Offset: 0x9B7 VA: 0x9B7
	|-Dictionary.KeyCollection<object, int>.System.Collections.Generic.ICollection<TKey>.Add
	|
	|-RVA: 0x81B Offset: 0x81B VA: 0x81B
	|-Dictionary.KeyCollection<object, object>.System.Collections.Generic.ICollection<TKey>.Add
	|
	|-RVA: 0x9B9 Offset: 0x9B9 VA: 0x9B9
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TKey>.Add
	|
	|-RVA: 0x25 Offset: 0x25 VA: 0x25
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.Generic.ICollection<TKey>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private void System.Collections.Generic.ICollection<TKey>.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA3A Offset: 0xA3A VA: 0xA3A
	|-Dictionary.KeyCollection<int, object>.System.Collections.Generic.ICollection<TKey>.Clear
	|
	|-RVA: 0xA3B Offset: 0xA3B VA: 0xA3B
	|-Dictionary.KeyCollection<object, int>.System.Collections.Generic.ICollection<TKey>.Clear
	|
	|-RVA: 0x8DD Offset: 0x8DD VA: 0x8DD
	|-Dictionary.KeyCollection<object, object>.System.Collections.Generic.ICollection<TKey>.Clear
	|
	|-RVA: 0xA3C Offset: 0xA3C VA: 0xA3C
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TKey>.Clear
	|
	|-RVA: 0xA3D Offset: 0xA3D VA: 0xA3D
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.Generic.ICollection<TKey>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7A8 Offset: 0x7A8 VA: 0x7A8
	|-Dictionary.KeyCollection<int, object>.System.Collections.Generic.ICollection<TKey>.Contains
	|
	|-RVA: 0x7AA Offset: 0x7AA VA: 0x7AA
	|-Dictionary.KeyCollection<object, int>.System.Collections.Generic.ICollection<TKey>.Contains
	|
	|-RVA: 0x66E Offset: 0x66E VA: 0x66E
	|-Dictionary.KeyCollection<object, object>.System.Collections.Generic.ICollection<TKey>.Contains
	|
	|-RVA: 0x7AC Offset: 0x7AC VA: 0x7AC
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TKey>.Contains
	|
	|-RVA: 0x1B Offset: 0x1B VA: 0x1B
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.Generic.ICollection<TKey>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7A9 Offset: 0x7A9 VA: 0x7A9
	|-Dictionary.KeyCollection<int, object>.System.Collections.Generic.ICollection<TKey>.Remove
	|
	|-RVA: 0x7AB Offset: 0x7AB VA: 0x7AB
	|-Dictionary.KeyCollection<object, int>.System.Collections.Generic.ICollection<TKey>.Remove
	|
	|-RVA: 0x66F Offset: 0x66F VA: 0x66F
	|-Dictionary.KeyCollection<object, object>.System.Collections.Generic.ICollection<TKey>.Remove
	|
	|-RVA: 0x7AD Offset: 0x7AD VA: 0x7AD
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TKey>.Remove
	|
	|-RVA: 0x1C Offset: 0x1C VA: 0x1C
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.Generic.ICollection<TKey>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1039 Offset: 0x1039 VA: 0x1039
	|-Dictionary.KeyCollection<int, object>.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
	|
	|-RVA: 0x103F Offset: 0x103F VA: 0x103F
	|-Dictionary.KeyCollection<object, int>.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
	|
	|-RVA: 0xD66 Offset: 0xD66 VA: 0xD66
	|-Dictionary.KeyCollection<object, object>.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
	|
	|-RVA: 0x1045 Offset: 0x1045 VA: 0x1045
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
	|
	|-RVA: 0x104B Offset: 0x104B VA: 0x104B
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x103A Offset: 0x103A VA: 0x103A
	|-Dictionary.KeyCollection<int, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1040 Offset: 0x1040 VA: 0x1040
	|-Dictionary.KeyCollection<object, int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0xD67 Offset: 0xD67 VA: 0xD67
	|-Dictionary.KeyCollection<object, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1046 Offset: 0x1046 VA: 0x1046
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x104C Offset: 0x104C VA: 0x104C
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5F1 Offset: 0x5F1 VA: 0x5F1
	|-Dictionary.KeyCollection<int, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5F3 Offset: 0x5F3 VA: 0x5F3
	|-Dictionary.KeyCollection<object, int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x418 Offset: 0x418 VA: 0x418
	|-Dictionary.KeyCollection<object, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5F5 Offset: 0x5F5 VA: 0x5F5
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5F7 Offset: 0x5F7 VA: 0x5F7
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x103B Offset: 0x103B VA: 0x103B
	|-Dictionary.KeyCollection<int, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1041 Offset: 0x1041 VA: 0x1041
	|-Dictionary.KeyCollection<object, int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0xD64 Offset: 0xD64 VA: 0xD64
	|-Dictionary.KeyCollection<object, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1047 Offset: 0x1047 VA: 0x1047
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x104D Offset: 0x104D VA: 0x104D
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x103C Offset: 0x103C VA: 0x103C
	|-Dictionary.KeyCollection<int, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1042 Offset: 0x1042 VA: 0x1042
	|-Dictionary.KeyCollection<object, int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0xD65 Offset: 0xD65 VA: 0xD65
	|-Dictionary.KeyCollection<object, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1048 Offset: 0x1048 VA: 0x1048
	|-Dictionary.KeyCollection<object, ResourceLocator>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x104E Offset: 0x104E VA: 0x104E
	|-Dictionary.KeyCollection<ulong, object>.System.Collections.ICollection.get_SyncRoot
	*/
}

// Namespace: 
[Serializable]
public struct Dictionary.KeyCollection.Enumerator<TKey, TValue> : IEnumerator<TKey>, IDisposable, IEnumerator // TypeDefIndex: 1211
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0xFFFFFFFF
	private int index; // 0xFFFFFFFF
	private int version; // 0xFFFFFFFF
	private TKey currentKey; // 0xFFFFFFFF

	// Properties
	public TKey Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Dictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9B0 Offset: 0x9B0 VA: 0x9B0
	|-Dictionary.KeyCollection.Enumerator<int, object>..ctor
	|
	|-RVA: 0x9B1 Offset: 0x9B1 VA: 0x9B1
	|-Dictionary.KeyCollection.Enumerator<object, int>..ctor
	|
	|-RVA: 0x81C Offset: 0x81C VA: 0x81C
	|-Dictionary.KeyCollection.Enumerator<object, object>..ctor
	|
	|-RVA: 0x9B2 Offset: 0x9B2 VA: 0x9B2
	|-Dictionary.KeyCollection.Enumerator<object, ResourceLocator>..ctor
	|
	|-RVA: 0x9B3 Offset: 0x9B3 VA: 0x9B3
	|-Dictionary.KeyCollection.Enumerator<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA36 Offset: 0xA36 VA: 0xA36
	|-Dictionary.KeyCollection.Enumerator<int, object>.Dispose
	|
	|-RVA: 0xA37 Offset: 0xA37 VA: 0xA37
	|-Dictionary.KeyCollection.Enumerator<object, int>.Dispose
	|
	|-RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
	|-Dictionary.KeyCollection.Enumerator<object, object>.Dispose
	|
	|-RVA: 0xA38 Offset: 0xA38 VA: 0xA38
	|-Dictionary.KeyCollection.Enumerator<object, ResourceLocator>.Dispose
	|
	|-RVA: 0xA39 Offset: 0xA39 VA: 0xA39
	|-Dictionary.KeyCollection.Enumerator<ulong, object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x102C Offset: 0x102C VA: 0x102C
	|-Dictionary.KeyCollection.Enumerator<int, object>.MoveNext
	|
	|-RVA: 0x102F Offset: 0x102F VA: 0x102F
	|-Dictionary.KeyCollection.Enumerator<object, int>.MoveNext
	|
	|-RVA: 0xD6A Offset: 0xD6A VA: 0xD6A
	|-Dictionary.KeyCollection.Enumerator<object, object>.MoveNext
	|
	|-RVA: 0x1032 Offset: 0x1032 VA: 0x1032
	|-Dictionary.KeyCollection.Enumerator<object, ResourceLocator>.MoveNext
	|
	|-RVA: 0x1035 Offset: 0x1035 VA: 0x1035
	|-Dictionary.KeyCollection.Enumerator<ulong, object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public TKey get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x102D Offset: 0x102D VA: 0x102D
	|-Dictionary.KeyCollection.Enumerator<int, object>.get_Current
	|
	|-RVA: 0x1030 Offset: 0x1030 VA: 0x1030
	|-Dictionary.KeyCollection.Enumerator<object, int>.get_Current
	|
	|-RVA: 0xD68 Offset: 0xD68 VA: 0xD68
	|-Dictionary.KeyCollection.Enumerator<object, object>.get_Current
	|
	|-RVA: 0x1033 Offset: 0x1033 VA: 0x1033
	|-Dictionary.KeyCollection.Enumerator<object, ResourceLocator>.get_Current
	|
	|-RVA: 0x99 Offset: 0x99 VA: 0x99
	|-Dictionary.KeyCollection.Enumerator<ulong, object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x102E Offset: 0x102E VA: 0x102E
	|-Dictionary.KeyCollection.Enumerator<int, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1031 Offset: 0x1031 VA: 0x1031
	|-Dictionary.KeyCollection.Enumerator<object, int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD69 Offset: 0xD69 VA: 0xD69
	|-Dictionary.KeyCollection.Enumerator<object, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1034 Offset: 0x1034 VA: 0x1034
	|-Dictionary.KeyCollection.Enumerator<object, ResourceLocator>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1036 Offset: 0x1036 VA: 0x1036
	|-Dictionary.KeyCollection.Enumerator<ulong, object>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: 
[DebuggerTypeProxyAttribute] // RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1
[DebuggerDisplayAttribute] // RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1
[Serializable]
public sealed class Dictionary.ValueCollection<TKey, TValue> : ICollection<TValue>, IEnumerable<TValue>, IEnumerable, ICollection, IReadOnlyCollection<TValue> // TypeDefIndex: 1212
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0xFFFFFFFF

	// Properties
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Dictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9C0 Offset: 0x9C0 VA: 0x9C0
	|-Dictionary.ValueCollection<int, object>..ctor
	|
	|-RVA: 0x9C2 Offset: 0x9C2 VA: 0x9C2
	|-Dictionary.ValueCollection<object, int>..ctor
	|
	|-RVA: 0x81D Offset: 0x81D VA: 0x81D
	|-Dictionary.ValueCollection<object, object>..ctor
	|
	|-RVA: 0x9C5 Offset: 0x9C5 VA: 0x9C5
	|-Dictionary.ValueCollection<object, ResourceLocator>..ctor
	|
	|-RVA: 0x9C8 Offset: 0x9C8 VA: 0x9C8
	|-Dictionary.ValueCollection<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1
	public Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x889 Offset: 0x889 VA: 0x889
	|-Dictionary.ValueCollection<int, PointerEventData>.GetEnumerator
	|-Dictionary.ValueCollection<int, object>.GetEnumerator
	|
	|-RVA: 0x81E Offset: 0x81E VA: 0x81E
	|-Dictionary.ValueCollection<string, GUIStyle>.GetEnumerator
	|-Dictionary.ValueCollection<object, object>.GetEnumerator
	|-Dictionary.ValueCollection<string, Type>.GetEnumerator
	|
	|-RVA: 0x9C3 Offset: 0x9C3 VA: 0x9C3
	|-Dictionary.ValueCollection<object, int>.GetEnumerator
	|
	|-RVA: 0x9C6 Offset: 0x9C6 VA: 0x9C6
	|-Dictionary.ValueCollection<object, ResourceLocator>.GetEnumerator
	|
	|-RVA: 0x9C9 Offset: 0x9C9 VA: 0x9C9
	|-Dictionary.ValueCollection<ulong, object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public void CopyTo(TValue[] array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5F8 Offset: 0x5F8 VA: 0x5F8
	|-Dictionary.ValueCollection<int, object>.CopyTo
	|
	|-RVA: 0x5FA Offset: 0x5FA VA: 0x5FA
	|-Dictionary.ValueCollection<object, int>.CopyTo
	|
	|-RVA: 0x419 Offset: 0x419 VA: 0x419
	|-Dictionary.ValueCollection<object, object>.CopyTo
	|
	|-RVA: 0x5FC Offset: 0x5FC VA: 0x5FC
	|-Dictionary.ValueCollection<object, ResourceLocator>.CopyTo
	|
	|-RVA: 0x5FE Offset: 0x5FE VA: 0x5FE
	|-Dictionary.ValueCollection<ulong, object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 17
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1058 Offset: 0x1058 VA: 0x1058
	|-Dictionary.ValueCollection<int, object>.get_Count
	|
	|-RVA: 0x105E Offset: 0x105E VA: 0x105E
	|-Dictionary.ValueCollection<object, int>.get_Count
	|
	|-RVA: 0xD6B Offset: 0xD6B VA: 0xD6B
	|-Dictionary.ValueCollection<object, object>.get_Count
	|
	|-RVA: 0x1064 Offset: 0x1064 VA: 0x1064
	|-Dictionary.ValueCollection<object, ResourceLocator>.get_Count
	|
	|-RVA: 0x106A Offset: 0x106A VA: 0x106A
	|-Dictionary.ValueCollection<ulong, object>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1059 Offset: 0x1059 VA: 0x1059
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0x105F Offset: 0x105F VA: 0x105F
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0xD6C Offset: 0xD6C VA: 0xD6C
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0x1065 Offset: 0x1065 VA: 0x1065
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	|
	|-RVA: 0x106B Offset: 0x106B VA: 0x106B
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.Generic.ICollection<TValue>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9C1 Offset: 0x9C1 VA: 0x9C1
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x9C4 Offset: 0x9C4 VA: 0x9C4
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x81F Offset: 0x81F VA: 0x81F
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x9C7 Offset: 0x9C7 VA: 0x9C7
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TValue>.Add
	|
	|-RVA: 0x9CA Offset: 0x9CA VA: 0x9CA
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.Generic.ICollection<TValue>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7AE Offset: 0x7AE VA: 0x7AE
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x7B0 Offset: 0x7B0 VA: 0x7B0
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x670 Offset: 0x670 VA: 0x670
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x7B2 Offset: 0x7B2 VA: 0x7B2
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TValue>.Remove
	|
	|-RVA: 0x7B4 Offset: 0x7B4 VA: 0x7B4
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.Generic.ICollection<TValue>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private void System.Collections.Generic.ICollection<TValue>.Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA41 Offset: 0xA41 VA: 0xA41
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0xA42 Offset: 0xA42 VA: 0xA42
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0x8DF Offset: 0x8DF VA: 0x8DF
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0xA43 Offset: 0xA43 VA: 0xA43
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TValue>.Clear
	|
	|-RVA: 0xA44 Offset: 0xA44 VA: 0xA44
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.Generic.ICollection<TValue>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7AF Offset: 0x7AF VA: 0x7AF
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x7B1 Offset: 0x7B1 VA: 0x7B1
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x671 Offset: 0x671 VA: 0x671
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x7B3 Offset: 0x7B3 VA: 0x7B3
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.Generic.ICollection<TValue>.Contains
	|
	|-RVA: 0x7B5 Offset: 0x7B5 VA: 0x7B5
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.Generic.ICollection<TValue>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x105A Offset: 0x105A VA: 0x105A
	|-Dictionary.ValueCollection<int, object>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0x1060 Offset: 0x1060 VA: 0x1060
	|-Dictionary.ValueCollection<object, int>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0xD6F Offset: 0xD6F VA: 0xD6F
	|-Dictionary.ValueCollection<object, object>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0x1066 Offset: 0x1066 VA: 0x1066
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	|
	|-RVA: 0x106C Offset: 0x106C VA: 0x106C
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x105B Offset: 0x105B VA: 0x105B
	|-Dictionary.ValueCollection<int, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1061 Offset: 0x1061 VA: 0x1061
	|-Dictionary.ValueCollection<object, int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0xD70 Offset: 0xD70 VA: 0xD70
	|-Dictionary.ValueCollection<object, object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1067 Offset: 0x1067 VA: 0x1067
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x106D Offset: 0x106D VA: 0x106D
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 13
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x5F9 Offset: 0x5F9 VA: 0x5F9
	|-Dictionary.ValueCollection<int, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5FB Offset: 0x5FB VA: 0x5FB
	|-Dictionary.ValueCollection<object, int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x41A Offset: 0x41A VA: 0x41A
	|-Dictionary.ValueCollection<object, object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5FD Offset: 0x5FD VA: 0x5FD
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x5FF Offset: 0x5FF VA: 0x5FF
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x105C Offset: 0x105C VA: 0x105C
	|-Dictionary.ValueCollection<int, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1062 Offset: 0x1062 VA: 0x1062
	|-Dictionary.ValueCollection<object, int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0xD6D Offset: 0xD6D VA: 0xD6D
	|-Dictionary.ValueCollection<object, object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1068 Offset: 0x1068 VA: 0x1068
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x106E Offset: 0x106E VA: 0x106E
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 15
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x105D Offset: 0x105D VA: 0x105D
	|-Dictionary.ValueCollection<int, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1063 Offset: 0x1063 VA: 0x1063
	|-Dictionary.ValueCollection<object, int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0xD6E Offset: 0xD6E VA: 0xD6E
	|-Dictionary.ValueCollection<object, object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1069 Offset: 0x1069 VA: 0x1069
	|-Dictionary.ValueCollection<object, ResourceLocator>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x106F Offset: 0x106F VA: 0x106F
	|-Dictionary.ValueCollection<ulong, object>.System.Collections.ICollection.get_SyncRoot
	*/
}

// Namespace: 
[Serializable]
public struct Dictionary.ValueCollection.Enumerator<TKey, TValue> : IEnumerator<TValue>, IDisposable, IEnumerator // TypeDefIndex: 1213
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0xFFFFFFFF
	private int index; // 0xFFFFFFFF
	private int version; // 0xFFFFFFFF
	private TValue currentValue; // 0xFFFFFFFF

	// Properties
	public TValue Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Dictionary<TKey, TValue> dictionary) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9BB Offset: 0x9BB VA: 0x9BB
	|-Dictionary.ValueCollection.Enumerator<int, object>..ctor
	|
	|-RVA: 0x9BC Offset: 0x9BC VA: 0x9BC
	|-Dictionary.ValueCollection.Enumerator<object, int>..ctor
	|
	|-RVA: 0x820 Offset: 0x820 VA: 0x820
	|-Dictionary.ValueCollection.Enumerator<object, object>..ctor
	|
	|-RVA: 0x9BD Offset: 0x9BD VA: 0x9BD
	|-Dictionary.ValueCollection.Enumerator<object, ResourceLocator>..ctor
	|
	|-RVA: 0x9BF Offset: 0x9BF VA: 0x9BF
	|-Dictionary.ValueCollection.Enumerator<ulong, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x939 Offset: 0x939 VA: 0x939
	|-Dictionary.ValueCollection.Enumerator<int, object>.Dispose
	|-Dictionary.ValueCollection.Enumerator<int, PointerEventData>.Dispose
	|
	|-RVA: 0xA3E Offset: 0xA3E VA: 0xA3E
	|-Dictionary.ValueCollection.Enumerator<object, int>.Dispose
	|
	|-RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0
	|-Dictionary.ValueCollection.Enumerator<object, object>.Dispose
	|-Dictionary.ValueCollection.Enumerator<string, Type>.Dispose
	|
	|-RVA: 0xA3F Offset: 0xA3F VA: 0xA3F
	|-Dictionary.ValueCollection.Enumerator<object, ResourceLocator>.Dispose
	|
	|-RVA: 0xA40 Offset: 0xA40 VA: 0xA40
	|-Dictionary.ValueCollection.Enumerator<ulong, object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE07 Offset: 0xE07 VA: 0xE07
	|-Dictionary.ValueCollection.Enumerator<int, object>.MoveNext
	|-Dictionary.ValueCollection.Enumerator<int, PointerEventData>.MoveNext
	|
	|-RVA: 0x1050 Offset: 0x1050 VA: 0x1050
	|-Dictionary.ValueCollection.Enumerator<object, int>.MoveNext
	|
	|-RVA: 0xD73 Offset: 0xD73 VA: 0xD73
	|-Dictionary.ValueCollection.Enumerator<object, object>.MoveNext
	|-Dictionary.ValueCollection.Enumerator<string, Type>.MoveNext
	|
	|-RVA: 0x1053 Offset: 0x1053 VA: 0x1053
	|-Dictionary.ValueCollection.Enumerator<object, ResourceLocator>.MoveNext
	|
	|-RVA: 0x1055 Offset: 0x1055 VA: 0x1055
	|-Dictionary.ValueCollection.Enumerator<ulong, object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public TValue get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE06 Offset: 0xE06 VA: 0xE06
	|-Dictionary.ValueCollection.Enumerator<int, PointerEventData>.get_Current
	|-Dictionary.ValueCollection.Enumerator<int, object>.get_Current
	|
	|-RVA: 0x1051 Offset: 0x1051 VA: 0x1051
	|-Dictionary.ValueCollection.Enumerator<object, int>.get_Current
	|
	|-RVA: 0xD71 Offset: 0xD71 VA: 0xD71
	|-Dictionary.ValueCollection.Enumerator<object, object>.get_Current
	|-Dictionary.ValueCollection.Enumerator<string, Type>.get_Current
	|
	|-RVA: 0x9BE Offset: 0x9BE VA: 0x9BE
	|-Dictionary.ValueCollection.Enumerator<object, ResourceLocator>.get_Current
	|
	|-RVA: 0x1056 Offset: 0x1056 VA: 0x1056
	|-Dictionary.ValueCollection.Enumerator<ulong, object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x104F Offset: 0x104F VA: 0x104F
	|-Dictionary.ValueCollection.Enumerator<int, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1052 Offset: 0x1052 VA: 0x1052
	|-Dictionary.ValueCollection.Enumerator<object, int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD72 Offset: 0xD72 VA: 0xD72
	|-Dictionary.ValueCollection.Enumerator<object, object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1054 Offset: 0x1054 VA: 0x1054
	|-Dictionary.ValueCollection.Enumerator<object, ResourceLocator>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x1057 Offset: 0x1057 VA: 0x1057
	|-Dictionary.ValueCollection.Enumerator<ulong, object>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: System.Collections.Generic
internal class DictionaryHashHelpers // TypeDefIndex: 1214
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5AA Offset: 0x5AA VA: 0x5AA
	private static readonly ConditionalWeakTable<object, SerializationInfo> <SerializationInfoTable>k__BackingField; // 0xFFFFFFFF

	// Properties
	internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x78E Offset: 0x78E VA: 0x78E
	// RVA: 0x18E Offset: 0x18E VA: 0x18E
	internal static ConditionalWeakTable<object, SerializationInfo> get_SerializationInfoTable() { }

	// RVA: 0xE5D Offset: 0xE5D VA: 0xE5D
	private static void .cctor() { }
}

// Namespace: System.Collections.Generic
internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1215
{}

// Namespace: System.Collections.Generic
internal sealed class DictionaryKeyCollectionDebugView<TKey, TValue> // TypeDefIndex: 1216
{}

// Namespace: System.Collections.Generic
internal sealed class DictionaryValueCollectionDebugView<TKey, TValue> // TypeDefIndex: 1217
{}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class NonRandomizedStringEqualityComparer : EqualityComparer<string> // TypeDefIndex: 1218
{
	// Methods

	// RVA: 0x822 Offset: 0x822 VA: 0x822 Slot: 8
	public sealed override bool Equals(string x, string y) { }

	// RVA: 0x107 Offset: 0x107 VA: 0x107 Slot: 9
	public sealed override int GetHashCode(string obj) { }

	// RVA: 0x2BB Offset: 0x2BB VA: 0x2BB
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
internal sealed class ObjectEqualityComparer : IEqualityComparer // TypeDefIndex: 1219
{
	// Fields
	internal static readonly ObjectEqualityComparer Default; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2BC Offset: 0x2BC VA: 0x2BC
	private void .ctor() { }

	// RVA: 0x108 Offset: 0x108 VA: 0x108 Slot: 5
	private int System.Collections.IEqualityComparer.GetHashCode(object obj) { }

	// RVA: 0x823 Offset: 0x823 VA: 0x823 Slot: 4
	private bool System.Collections.IEqualityComparer.Equals(object x, object y) { }

	// RVA: 0xE5E Offset: 0xE5E VA: 0xE5E
	private static void .cctor() { }
}

// Namespace: System.Collections.Generic
[TypeDependencyAttribute] // RVA: 0x4F2 Offset: 0x4F2 VA: 0x4F2
[Serializable]
public abstract class Comparer<T> : IComparer, IComparer<T> // TypeDefIndex: 1220
{
	// Fields
	private static Comparer<T> defaultComparer; // 0xFFFFFFFF

	// Properties
	public static Comparer<T> Default { get; }

	// Methods

	// RVA: -1 Offset: -1
	public static Comparer<T> get_Default() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5
	|-Comparer<byte>.get_Default
	|
	|-RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7
	|-Comparer<KeyValuePair<DateTime, object>>.get_Default
	|
	|-RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9
	|-Comparer<KeyValuePair<Guid, int>>.get_Default
	|
	|-RVA: 0x2CB Offset: 0x2CB VA: 0x2CB
	|-Comparer<EventProvider.SessionInfo>.get_Default
	|
	|-RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
	|-Comparer<int>.get_Default
	|
	|-RVA: 0x2AA Offset: 0x2AA VA: 0x2AA
	|-Comparer<object>.get_Default
	|-Comparer<string>.get_Default
	|
	|-RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4
	|-Comparer<ulong>.get_Default
	|
	|-RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
	|-Comparer<BeforeRenderHelper.OrderBlock>.get_Default
	|
	|-RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2
	|-Comparer<Color32>.get_Default
	|
	|-RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4
	|-Comparer<RaycastResult>.get_Default
	|
	|-RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
	|-Comparer<RaycastHit>.get_Default
	|
	|-RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8
	|-Comparer<UICharInfo>.get_Default
	|
	|-RVA: 0x2DA Offset: 0x2DA VA: 0x2DA
	|-Comparer<UILineInfo>.get_Default
	|
	|-RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
	|-Comparer<UIVertex>.get_Default
	|
	|-RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
	|-Comparer<UnitySynchronizationContext.WorkRequest>.get_Default
	|
	|-RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0
	|-Comparer<Vector2>.get_Default
	|
	|-RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2
	|-Comparer<Vector3>.get_Default
	|
	|-RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4
	|-Comparer<Vector4>.get_Default
	*/

	// RVA: -1 Offset: -1
	private static Comparer<T> CreateComparer() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6
	|-Comparer<byte>.CreateComparer
	|
	|-RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8
	|-Comparer<KeyValuePair<DateTime, object>>.CreateComparer
	|
	|-RVA: 0x2CA Offset: 0x2CA VA: 0x2CA
	|-Comparer<KeyValuePair<Guid, int>>.CreateComparer
	|
	|-RVA: 0x2CC Offset: 0x2CC VA: 0x2CC
	|-Comparer<EventProvider.SessionInfo>.CreateComparer
	|
	|-RVA: 0x2CE Offset: 0x2CE VA: 0x2CE
	|-Comparer<int>.CreateComparer
	|
	|-RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
	|-Comparer<object>.CreateComparer
	|
	|-RVA: 0x2CF Offset: 0x2CF VA: 0x2CF
	|-Comparer<ulong>.CreateComparer
	|
	|-RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1
	|-Comparer<BeforeRenderHelper.OrderBlock>.CreateComparer
	|
	|-RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3
	|-Comparer<Color32>.CreateComparer
	|
	|-RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
	|-Comparer<RaycastResult>.CreateComparer
	|
	|-RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7
	|-Comparer<RaycastHit>.CreateComparer
	|
	|-RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
	|-Comparer<UICharInfo>.CreateComparer
	|
	|-RVA: 0x2DB Offset: 0x2DB VA: 0x2DB
	|-Comparer<UILineInfo>.CreateComparer
	|
	|-RVA: 0x2DD Offset: 0x2DD VA: 0x2DD
	|-Comparer<UIVertex>.CreateComparer
	|
	|-RVA: 0x2DF Offset: 0x2DF VA: 0x2DF
	|-Comparer<UnitySynchronizationContext.WorkRequest>.CreateComparer
	|
	|-RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
	|-Comparer<Vector2>.CreateComparer
	|
	|-RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3
	|-Comparer<Vector3>.CreateComparer
	|
	|-RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5
	|-Comparer<Vector4>.CreateComparer
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int Compare(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Comparer<object>.Compare
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private int System.Collections.IComparer.Compare(object x, object y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA70 Offset: 0xA70 VA: 0xA70
	|-Comparer<byte>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA71 Offset: 0xA71 VA: 0xA71
	|-Comparer<KeyValuePair<DateTime, object>>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA72 Offset: 0xA72 VA: 0xA72
	|-Comparer<KeyValuePair<Guid, int>>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA73 Offset: 0xA73 VA: 0xA73
	|-Comparer<EventProvider.SessionInfo>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA74 Offset: 0xA74 VA: 0xA74
	|-Comparer<int>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA50 Offset: 0xA50 VA: 0xA50
	|-Comparer<object>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA75 Offset: 0xA75 VA: 0xA75
	|-Comparer<ulong>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA76 Offset: 0xA76 VA: 0xA76
	|-Comparer<BeforeRenderHelper.OrderBlock>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA77 Offset: 0xA77 VA: 0xA77
	|-Comparer<Color32>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA78 Offset: 0xA78 VA: 0xA78
	|-Comparer<RaycastResult>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA79 Offset: 0xA79 VA: 0xA79
	|-Comparer<RaycastHit>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA7A Offset: 0xA7A VA: 0xA7A
	|-Comparer<UICharInfo>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA7B Offset: 0xA7B VA: 0xA7B
	|-Comparer<UILineInfo>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA7C Offset: 0xA7C VA: 0xA7C
	|-Comparer<UIVertex>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA7D Offset: 0xA7D VA: 0xA7D
	|-Comparer<UnitySynchronizationContext.WorkRequest>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA7E Offset: 0xA7E VA: 0xA7E
	|-Comparer<Vector2>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA7F Offset: 0xA7F VA: 0xA7F
	|-Comparer<Vector3>.System.Collections.IComparer.Compare
	|
	|-RVA: 0xA80 Offset: 0xA80 VA: 0xA80
	|-Comparer<Vector4>.System.Collections.IComparer.Compare
	*/

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA22 Offset: 0xA22 VA: 0xA22
	|-Comparer<byte>..ctor
	|
	|-RVA: 0xA23 Offset: 0xA23 VA: 0xA23
	|-Comparer<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xA24 Offset: 0xA24 VA: 0xA24
	|-Comparer<KeyValuePair<Guid, int>>..ctor
	|
	|-RVA: 0xA25 Offset: 0xA25 VA: 0xA25
	|-Comparer<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0xA26 Offset: 0xA26 VA: 0xA26
	|-Comparer<int>..ctor
	|
	|-RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1
	|-Comparer<object>..ctor
	|
	|-RVA: 0xA27 Offset: 0xA27 VA: 0xA27
	|-Comparer<ulong>..ctor
	|
	|-RVA: 0xA28 Offset: 0xA28 VA: 0xA28
	|-Comparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xA29 Offset: 0xA29 VA: 0xA29
	|-Comparer<Color32>..ctor
	|
	|-RVA: 0xA2A Offset: 0xA2A VA: 0xA2A
	|-Comparer<RaycastResult>..ctor
	|
	|-RVA: 0xA2B Offset: 0xA2B VA: 0xA2B
	|-Comparer<RaycastHit>..ctor
	|
	|-RVA: 0xA2C Offset: 0xA2C VA: 0xA2C
	|-Comparer<UICharInfo>..ctor
	|
	|-RVA: 0xA2D Offset: 0xA2D VA: 0xA2D
	|-Comparer<UILineInfo>..ctor
	|
	|-RVA: 0xA2E Offset: 0xA2E VA: 0xA2E
	|-Comparer<UIVertex>..ctor
	|
	|-RVA: 0xA2F Offset: 0xA2F VA: 0xA2F
	|-Comparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xA30 Offset: 0xA30 VA: 0xA30
	|-Comparer<Vector2>..ctor
	|
	|-RVA: 0xA31 Offset: 0xA31 VA: 0xA31
	|-Comparer<Vector3>..ctor
	|
	|-RVA: 0xA32 Offset: 0xA32 VA: 0xA32
	|-Comparer<Vector4>..ctor
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal class GenericComparer<T> : Comparer<T> // TypeDefIndex: 1221
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 6
	public override int Compare(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA9A Offset: 0xA9A VA: 0xA9A
	|-GenericComparer<byte>.Compare
	|
	|-RVA: 0xA9B Offset: 0xA9B VA: 0xA9B
	|-GenericComparer<int>.Compare
	|
	|-RVA: 0xA51 Offset: 0xA51 VA: 0xA51
	|-GenericComparer<object>.Compare
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-GenericComparer<ulong>.Compare
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E4 Offset: 0x7E4 VA: 0x7E4
	|-GenericComparer<byte>.Equals
	|
	|-RVA: 0x7E5 Offset: 0x7E5 VA: 0x7E5
	|-GenericComparer<int>.Equals
	|
	|-RVA: 0x672 Offset: 0x672 VA: 0x672
	|-GenericComparer<object>.Equals
	|
	|-RVA: 0x7E6 Offset: 0x7E6 VA: 0x7E6
	|-GenericComparer<ulong>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1091 Offset: 0x1091 VA: 0x1091
	|-GenericComparer<byte>.GetHashCode
	|
	|-RVA: 0x1092 Offset: 0x1092 VA: 0x1092
	|-GenericComparer<int>.GetHashCode
	|
	|-RVA: 0xD74 Offset: 0xD74 VA: 0xD74
	|-GenericComparer<object>.GetHashCode
	|
	|-RVA: 0x1093 Offset: 0x1093 VA: 0x1093
	|-GenericComparer<ulong>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA65 Offset: 0xA65 VA: 0xA65
	|-GenericComparer<byte>..ctor
	|
	|-RVA: 0xA66 Offset: 0xA66 VA: 0xA66
	|-GenericComparer<int>..ctor
	|
	|-RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2
	|-GenericComparer<object>..ctor
	|
	|-RVA: 0xA67 Offset: 0xA67 VA: 0xA67
	|-GenericComparer<ulong>..ctor
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal class NullableComparer<T> : Comparer<Nullable<T>> // TypeDefIndex: 1222
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 6
	public override int Compare(Nullable<T> x, Nullable<T> y) { }

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class ObjectComparer<T> : Comparer<T> // TypeDefIndex: 1223
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 6
	public override int Compare(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAA7 Offset: 0xAA7 VA: 0xAA7
	|-ObjectComparer<byte>.Compare
	|
	|-RVA: 0xAA8 Offset: 0xAA8 VA: 0xAA8
	|-ObjectComparer<KeyValuePair<DateTime, object>>.Compare
	|
	|-RVA: 0xAA9 Offset: 0xAA9 VA: 0xAA9
	|-ObjectComparer<KeyValuePair<Guid, int>>.Compare
	|
	|-RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	|-ObjectComparer<EventProvider.SessionInfo>.Compare
	|
	|-RVA: 0xAAB Offset: 0xAAB VA: 0xAAB
	|-ObjectComparer<int>.Compare
	|
	|-RVA: 0xA52 Offset: 0xA52 VA: 0xA52
	|-ObjectComparer<object>.Compare
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-ObjectComparer<ulong>.Compare
	|
	|-RVA: 0xAAC Offset: 0xAAC VA: 0xAAC
	|-ObjectComparer<BeforeRenderHelper.OrderBlock>.Compare
	|
	|-RVA: 0xAAD Offset: 0xAAD VA: 0xAAD
	|-ObjectComparer<Color32>.Compare
	|
	|-RVA: 0xAAE Offset: 0xAAE VA: 0xAAE
	|-ObjectComparer<RaycastResult>.Compare
	|
	|-RVA: 0xAAF Offset: 0xAAF VA: 0xAAF
	|-ObjectComparer<RaycastHit>.Compare
	|
	|-RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	|-ObjectComparer<UICharInfo>.Compare
	|
	|-RVA: 0xAB1 Offset: 0xAB1 VA: 0xAB1
	|-ObjectComparer<UILineInfo>.Compare
	|
	|-RVA: 0xAB2 Offset: 0xAB2 VA: 0xAB2
	|-ObjectComparer<UIVertex>.Compare
	|
	|-RVA: 0xAB3 Offset: 0xAB3 VA: 0xAB3
	|-ObjectComparer<UnitySynchronizationContext.WorkRequest>.Compare
	|
	|-RVA: 0xAB4 Offset: 0xAB4 VA: 0xAB4
	|-ObjectComparer<Vector2>.Compare
	|
	|-RVA: 0xAB5 Offset: 0xAB5 VA: 0xAB5
	|-ObjectComparer<Vector3>.Compare
	|
	|-RVA: 0xAB6 Offset: 0xAB6 VA: 0xAB6
	|-ObjectComparer<Vector4>.Compare
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x876 Offset: 0x876 VA: 0x876
	|-ObjectComparer<byte>.Equals
	|
	|-RVA: 0x877 Offset: 0x877 VA: 0x877
	|-ObjectComparer<KeyValuePair<DateTime, object>>.Equals
	|
	|-RVA: 0x878 Offset: 0x878 VA: 0x878
	|-ObjectComparer<KeyValuePair<Guid, int>>.Equals
	|
	|-RVA: 0x879 Offset: 0x879 VA: 0x879
	|-ObjectComparer<EventProvider.SessionInfo>.Equals
	|
	|-RVA: 0x87A Offset: 0x87A VA: 0x87A
	|-ObjectComparer<int>.Equals
	|
	|-RVA: 0x673 Offset: 0x673 VA: 0x673
	|-ObjectComparer<object>.Equals
	|
	|-RVA: 0x87B Offset: 0x87B VA: 0x87B
	|-ObjectComparer<ulong>.Equals
	|
	|-RVA: 0x87C Offset: 0x87C VA: 0x87C
	|-ObjectComparer<BeforeRenderHelper.OrderBlock>.Equals
	|
	|-RVA: 0x87D Offset: 0x87D VA: 0x87D
	|-ObjectComparer<Color32>.Equals
	|
	|-RVA: 0x87E Offset: 0x87E VA: 0x87E
	|-ObjectComparer<RaycastResult>.Equals
	|
	|-RVA: 0x87F Offset: 0x87F VA: 0x87F
	|-ObjectComparer<RaycastHit>.Equals
	|
	|-RVA: 0x880 Offset: 0x880 VA: 0x880
	|-ObjectComparer<UICharInfo>.Equals
	|
	|-RVA: 0x881 Offset: 0x881 VA: 0x881
	|-ObjectComparer<UILineInfo>.Equals
	|
	|-RVA: 0x882 Offset: 0x882 VA: 0x882
	|-ObjectComparer<UIVertex>.Equals
	|
	|-RVA: 0x883 Offset: 0x883 VA: 0x883
	|-ObjectComparer<UnitySynchronizationContext.WorkRequest>.Equals
	|
	|-RVA: 0x884 Offset: 0x884 VA: 0x884
	|-ObjectComparer<Vector2>.Equals
	|
	|-RVA: 0x885 Offset: 0x885 VA: 0x885
	|-ObjectComparer<Vector3>.Equals
	|
	|-RVA: 0x886 Offset: 0x886 VA: 0x886
	|-ObjectComparer<Vector4>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x117F Offset: 0x117F VA: 0x117F
	|-ObjectComparer<byte>.GetHashCode
	|
	|-RVA: 0x1180 Offset: 0x1180 VA: 0x1180
	|-ObjectComparer<KeyValuePair<DateTime, object>>.GetHashCode
	|
	|-RVA: 0x1181 Offset: 0x1181 VA: 0x1181
	|-ObjectComparer<KeyValuePair<Guid, int>>.GetHashCode
	|
	|-RVA: 0x1182 Offset: 0x1182 VA: 0x1182
	|-ObjectComparer<EventProvider.SessionInfo>.GetHashCode
	|
	|-RVA: 0x1183 Offset: 0x1183 VA: 0x1183
	|-ObjectComparer<int>.GetHashCode
	|
	|-RVA: 0xD75 Offset: 0xD75 VA: 0xD75
	|-ObjectComparer<object>.GetHashCode
	|
	|-RVA: 0x1184 Offset: 0x1184 VA: 0x1184
	|-ObjectComparer<ulong>.GetHashCode
	|
	|-RVA: 0x1185 Offset: 0x1185 VA: 0x1185
	|-ObjectComparer<BeforeRenderHelper.OrderBlock>.GetHashCode
	|
	|-RVA: 0x1186 Offset: 0x1186 VA: 0x1186
	|-ObjectComparer<Color32>.GetHashCode
	|
	|-RVA: 0x1187 Offset: 0x1187 VA: 0x1187
	|-ObjectComparer<RaycastResult>.GetHashCode
	|
	|-RVA: 0x1188 Offset: 0x1188 VA: 0x1188
	|-ObjectComparer<RaycastHit>.GetHashCode
	|
	|-RVA: 0x1189 Offset: 0x1189 VA: 0x1189
	|-ObjectComparer<UICharInfo>.GetHashCode
	|
	|-RVA: 0x118A Offset: 0x118A VA: 0x118A
	|-ObjectComparer<UILineInfo>.GetHashCode
	|
	|-RVA: 0x118B Offset: 0x118B VA: 0x118B
	|-ObjectComparer<UIVertex>.GetHashCode
	|
	|-RVA: 0x118C Offset: 0x118C VA: 0x118C
	|-ObjectComparer<UnitySynchronizationContext.WorkRequest>.GetHashCode
	|
	|-RVA: 0x118D Offset: 0x118D VA: 0x118D
	|-ObjectComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x118E Offset: 0x118E VA: 0x118E
	|-ObjectComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x118F Offset: 0x118F VA: 0x118F
	|-ObjectComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xABE Offset: 0xABE VA: 0xABE
	|-ObjectComparer<byte>..ctor
	|
	|-RVA: 0xABF Offset: 0xABF VA: 0xABF
	|-ObjectComparer<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xAC0 Offset: 0xAC0 VA: 0xAC0
	|-ObjectComparer<KeyValuePair<Guid, int>>..ctor
	|
	|-RVA: 0xAC1 Offset: 0xAC1 VA: 0xAC1
	|-ObjectComparer<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0xAC2 Offset: 0xAC2 VA: 0xAC2
	|-ObjectComparer<int>..ctor
	|
	|-RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3
	|-ObjectComparer<object>..ctor
	|
	|-RVA: 0xAC3 Offset: 0xAC3 VA: 0xAC3
	|-ObjectComparer<ulong>..ctor
	|
	|-RVA: 0xAC4 Offset: 0xAC4 VA: 0xAC4
	|-ObjectComparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xAC5 Offset: 0xAC5 VA: 0xAC5
	|-ObjectComparer<Color32>..ctor
	|
	|-RVA: 0xAC6 Offset: 0xAC6 VA: 0xAC6
	|-ObjectComparer<RaycastResult>..ctor
	|
	|-RVA: 0xAC7 Offset: 0xAC7 VA: 0xAC7
	|-ObjectComparer<RaycastHit>..ctor
	|
	|-RVA: 0xAC8 Offset: 0xAC8 VA: 0xAC8
	|-ObjectComparer<UICharInfo>..ctor
	|
	|-RVA: 0xAC9 Offset: 0xAC9 VA: 0xAC9
	|-ObjectComparer<UILineInfo>..ctor
	|
	|-RVA: 0xACA Offset: 0xACA VA: 0xACA
	|-ObjectComparer<UIVertex>..ctor
	|
	|-RVA: 0xACB Offset: 0xACB VA: 0xACB
	|-ObjectComparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xACC Offset: 0xACC VA: 0xACC
	|-ObjectComparer<Vector2>..ctor
	|
	|-RVA: 0xACD Offset: 0xACD VA: 0xACD
	|-ObjectComparer<Vector3>..ctor
	|
	|-RVA: 0xACE Offset: 0xACE VA: 0xACE
	|-ObjectComparer<Vector4>..ctor
	*/
}

// Namespace: System.Collections.Generic
internal sealed class Mscorlib_CollectionDebugView<T> // TypeDefIndex: 1224
{}

// Namespace: System.Collections.Generic
[TypeDependencyAttribute] // RVA: 0x4F3 Offset: 0x4F3 VA: 0x4F3
[Serializable]
public abstract class EqualityComparer<T> : IEqualityComparer, IEqualityComparer<T> // TypeDefIndex: 1225
{
	// Fields
	private static EqualityComparer<T> defaultComparer; // 0xFFFFFFFF

	// Properties
	public static EqualityComparer<T> Default { get; }

	// Methods

	// RVA: -1 Offset: -1
	public static EqualityComparer<T> get_Default() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6
	|-EqualityComparer<bool>.get_Default
	|
	|-RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
	|-EqualityComparer<byte>.get_Default
	|
	|-RVA: 0x2EA Offset: 0x2EA VA: 0x2EA
	|-EqualityComparer<char>.get_Default
	|
	|-RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
	|-EqualityComparer<KeyValuePair<DateTime, object>>.get_Default
	|
	|-RVA: 0x2EE Offset: 0x2EE VA: 0x2EE
	|-EqualityComparer<EventProvider.SessionInfo>.get_Default
	|
	|-RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0
	|-EqualityComparer<Guid>.get_Default
	|
	|-RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2
	|-EqualityComparer<int>.get_Default
	|
	|-RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4
	|-EqualityComparer<Int32Enum>.get_Default
	|
	|-RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
	|-EqualityComparer<object>.get_Default
	|-EqualityComparer<string>.get_Default
	|
	|-RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6
	|-EqualityComparer<ResourceLocator>.get_Default
	|
	|-RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8
	|-EqualityComparer<float>.get_Default
	|
	|-RVA: 0x2FA Offset: 0x2FA VA: 0x2FA
	|-EqualityComparer<ulong>.get_Default
	|
	|-RVA: 0x2FC Offset: 0x2FC VA: 0x2FC
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.get_Default
	|
	|-RVA: 0x2FE Offset: 0x2FE VA: 0x2FE
	|-EqualityComparer<Color32>.get_Default
	|
	|-RVA: 0x300 Offset: 0x300 VA: 0x300
	|-EqualityComparer<RaycastResult>.get_Default
	|
	|-RVA: 0x302 Offset: 0x302 VA: 0x302
	|-EqualityComparer<ColorBlock>.get_Default
	|
	|-RVA: 0x304 Offset: 0x304 VA: 0x304
	|-EqualityComparer<Navigation>.get_Default
	|
	|-RVA: 0x306 Offset: 0x306 VA: 0x306
	|-EqualityComparer<SpriteState>.get_Default
	|
	|-RVA: 0x308 Offset: 0x308 VA: 0x308
	|-EqualityComparer<UICharInfo>.get_Default
	|
	|-RVA: 0x30A Offset: 0x30A VA: 0x30A
	|-EqualityComparer<UILineInfo>.get_Default
	|
	|-RVA: 0x30C Offset: 0x30C VA: 0x30C
	|-EqualityComparer<UIVertex>.get_Default
	|
	|-RVA: 0x30E Offset: 0x30E VA: 0x30E
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.get_Default
	|
	|-RVA: 0x310 Offset: 0x310 VA: 0x310
	|-EqualityComparer<Vector2>.get_Default
	|
	|-RVA: 0x312 Offset: 0x312 VA: 0x312
	|-EqualityComparer<Vector3>.get_Default
	|
	|-RVA: 0x314 Offset: 0x314 VA: 0x314
	|-EqualityComparer<Vector4>.get_Default
	*/

	// RVA: -1 Offset: -1
	private static EqualityComparer<T> CreateComparer() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
	|-EqualityComparer<bool>.CreateComparer
	|
	|-RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9
	|-EqualityComparer<byte>.CreateComparer
	|
	|-RVA: 0x2EB Offset: 0x2EB VA: 0x2EB
	|-EqualityComparer<char>.CreateComparer
	|
	|-RVA: 0x2ED Offset: 0x2ED VA: 0x2ED
	|-EqualityComparer<KeyValuePair<DateTime, object>>.CreateComparer
	|
	|-RVA: 0x2EF Offset: 0x2EF VA: 0x2EF
	|-EqualityComparer<EventProvider.SessionInfo>.CreateComparer
	|
	|-RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1
	|-EqualityComparer<Guid>.CreateComparer
	|
	|-RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3
	|-EqualityComparer<int>.CreateComparer
	|
	|-RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5
	|-EqualityComparer<Int32Enum>.CreateComparer
	|
	|-RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
	|-EqualityComparer<object>.CreateComparer
	|
	|-RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
	|-EqualityComparer<ResourceLocator>.CreateComparer
	|
	|-RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9
	|-EqualityComparer<float>.CreateComparer
	|
	|-RVA: 0x2FB Offset: 0x2FB VA: 0x2FB
	|-EqualityComparer<ulong>.CreateComparer
	|
	|-RVA: 0x2FD Offset: 0x2FD VA: 0x2FD
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.CreateComparer
	|
	|-RVA: 0x2FF Offset: 0x2FF VA: 0x2FF
	|-EqualityComparer<Color32>.CreateComparer
	|
	|-RVA: 0x301 Offset: 0x301 VA: 0x301
	|-EqualityComparer<RaycastResult>.CreateComparer
	|
	|-RVA: 0x303 Offset: 0x303 VA: 0x303
	|-EqualityComparer<ColorBlock>.CreateComparer
	|
	|-RVA: 0x305 Offset: 0x305 VA: 0x305
	|-EqualityComparer<Navigation>.CreateComparer
	|
	|-RVA: 0x307 Offset: 0x307 VA: 0x307
	|-EqualityComparer<SpriteState>.CreateComparer
	|
	|-RVA: 0x309 Offset: 0x309 VA: 0x309
	|-EqualityComparer<UICharInfo>.CreateComparer
	|
	|-RVA: 0x30B Offset: 0x30B VA: 0x30B
	|-EqualityComparer<UILineInfo>.CreateComparer
	|
	|-RVA: 0x30D Offset: 0x30D VA: 0x30D
	|-EqualityComparer<UIVertex>.CreateComparer
	|
	|-RVA: 0x30F Offset: 0x30F VA: 0x30F
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.CreateComparer
	|
	|-RVA: 0x311 Offset: 0x311 VA: 0x311
	|-EqualityComparer<Vector2>.CreateComparer
	|
	|-RVA: 0x313 Offset: 0x313 VA: 0x313
	|-EqualityComparer<Vector3>.CreateComparer
	|
	|-RVA: 0x315 Offset: 0x315 VA: 0x315
	|-EqualityComparer<Vector4>.CreateComparer
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-EqualityComparer<object>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-EqualityComparer<object>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 10
	internal virtual int IndexOf(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	|-EqualityComparer<bool>.IndexOf
	|
	|-RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	|-EqualityComparer<byte>.IndexOf
	|
	|-RVA: 0xC9 Offset: 0xC9 VA: 0xC9
	|-EqualityComparer<char>.IndexOf
	|
	|-RVA: 0xCB Offset: 0xCB VA: 0xCB
	|-EqualityComparer<KeyValuePair<DateTime, object>>.IndexOf
	|
	|-RVA: 0xCD Offset: 0xCD VA: 0xCD
	|-EqualityComparer<EventProvider.SessionInfo>.IndexOf
	|
	|-RVA: 0xCF Offset: 0xCF VA: 0xCF
	|-EqualityComparer<Guid>.IndexOf
	|
	|-RVA: 0xD1 Offset: 0xD1 VA: 0xD1
	|-EqualityComparer<int>.IndexOf
	|
	|-RVA: 0xD3 Offset: 0xD3 VA: 0xD3
	|-EqualityComparer<Int32Enum>.IndexOf
	|
	|-RVA: 0x97 Offset: 0x97 VA: 0x97
	|-EqualityComparer<object>.IndexOf
	|-EqualityComparer<string>.IndexOf
	|
	|-RVA: 0xD5 Offset: 0xD5 VA: 0xD5
	|-EqualityComparer<ResourceLocator>.IndexOf
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-EqualityComparer<float>.IndexOf
	|-EqualityComparer<ulong>.IndexOf
	|
	|-RVA: 0xD7 Offset: 0xD7 VA: 0xD7
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0xD9 Offset: 0xD9 VA: 0xD9
	|-EqualityComparer<Color32>.IndexOf
	|
	|-RVA: 0xDB Offset: 0xDB VA: 0xDB
	|-EqualityComparer<RaycastResult>.IndexOf
	|
	|-RVA: 0xDD Offset: 0xDD VA: 0xDD
	|-EqualityComparer<ColorBlock>.IndexOf
	|
	|-RVA: 0xDF Offset: 0xDF VA: 0xDF
	|-EqualityComparer<Navigation>.IndexOf
	|
	|-RVA: 0xE1 Offset: 0xE1 VA: 0xE1
	|-EqualityComparer<SpriteState>.IndexOf
	|
	|-RVA: 0xE3 Offset: 0xE3 VA: 0xE3
	|-EqualityComparer<UICharInfo>.IndexOf
	|
	|-RVA: 0xE5 Offset: 0xE5 VA: 0xE5
	|-EqualityComparer<UILineInfo>.IndexOf
	|
	|-RVA: 0xE7 Offset: 0xE7 VA: 0xE7
	|-EqualityComparer<UIVertex>.IndexOf
	|
	|-RVA: 0xE9 Offset: 0xE9 VA: 0xE9
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0xEB Offset: 0xEB VA: 0xEB
	|-EqualityComparer<Vector2>.IndexOf
	|
	|-RVA: 0xED Offset: 0xED VA: 0xED
	|-EqualityComparer<Vector3>.IndexOf
	|
	|-RVA: 0xEF Offset: 0xEF VA: 0xEF
	|-EqualityComparer<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 11
	internal virtual int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	|-EqualityComparer<bool>.LastIndexOf
	|
	|-RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	|-EqualityComparer<byte>.LastIndexOf
	|
	|-RVA: 0xCA Offset: 0xCA VA: 0xCA
	|-EqualityComparer<char>.LastIndexOf
	|
	|-RVA: 0xCC Offset: 0xCC VA: 0xCC
	|-EqualityComparer<KeyValuePair<DateTime, object>>.LastIndexOf
	|
	|-RVA: 0xCE Offset: 0xCE VA: 0xCE
	|-EqualityComparer<EventProvider.SessionInfo>.LastIndexOf
	|
	|-RVA: 0xD0 Offset: 0xD0 VA: 0xD0
	|-EqualityComparer<Guid>.LastIndexOf
	|
	|-RVA: 0xD2 Offset: 0xD2 VA: 0xD2
	|-EqualityComparer<int>.LastIndexOf
	|
	|-RVA: 0xD4 Offset: 0xD4 VA: 0xD4
	|-EqualityComparer<Int32Enum>.LastIndexOf
	|
	|-RVA: 0x98 Offset: 0x98 VA: 0x98
	|-EqualityComparer<object>.LastIndexOf
	|-EqualityComparer<string>.LastIndexOf
	|
	|-RVA: 0xD6 Offset: 0xD6 VA: 0xD6
	|-EqualityComparer<ResourceLocator>.LastIndexOf
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-EqualityComparer<float>.LastIndexOf
	|-EqualityComparer<ulong>.LastIndexOf
	|
	|-RVA: 0xD8 Offset: 0xD8 VA: 0xD8
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.LastIndexOf
	|
	|-RVA: 0xDA Offset: 0xDA VA: 0xDA
	|-EqualityComparer<Color32>.LastIndexOf
	|
	|-RVA: 0xDC Offset: 0xDC VA: 0xDC
	|-EqualityComparer<RaycastResult>.LastIndexOf
	|
	|-RVA: 0xDE Offset: 0xDE VA: 0xDE
	|-EqualityComparer<ColorBlock>.LastIndexOf
	|
	|-RVA: 0xE0 Offset: 0xE0 VA: 0xE0
	|-EqualityComparer<Navigation>.LastIndexOf
	|
	|-RVA: 0xE2 Offset: 0xE2 VA: 0xE2
	|-EqualityComparer<SpriteState>.LastIndexOf
	|
	|-RVA: 0xE4 Offset: 0xE4 VA: 0xE4
	|-EqualityComparer<UICharInfo>.LastIndexOf
	|
	|-RVA: 0xE6 Offset: 0xE6 VA: 0xE6
	|-EqualityComparer<UILineInfo>.LastIndexOf
	|
	|-RVA: 0xE8 Offset: 0xE8 VA: 0xE8
	|-EqualityComparer<UIVertex>.LastIndexOf
	|
	|-RVA: 0xEA Offset: 0xEA VA: 0xEA
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.LastIndexOf
	|
	|-RVA: 0xEC Offset: 0xEC VA: 0xEC
	|-EqualityComparer<Vector2>.LastIndexOf
	|
	|-RVA: 0xEE Offset: 0xEE VA: 0xEE
	|-EqualityComparer<Vector3>.LastIndexOf
	|
	|-RVA: 0xF0 Offset: 0xF0 VA: 0xF0
	|-EqualityComparer<Vector4>.LastIndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private int System.Collections.IEqualityComparer.GetHashCode(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7CC Offset: 0x7CC VA: 0x7CC
	|-EqualityComparer<bool>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7CD Offset: 0x7CD VA: 0x7CD
	|-EqualityComparer<byte>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7CE Offset: 0x7CE VA: 0x7CE
	|-EqualityComparer<char>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7CF Offset: 0x7CF VA: 0x7CF
	|-EqualityComparer<KeyValuePair<DateTime, object>>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D0 Offset: 0x7D0 VA: 0x7D0
	|-EqualityComparer<EventProvider.SessionInfo>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D1 Offset: 0x7D1 VA: 0x7D1
	|-EqualityComparer<Guid>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D2 Offset: 0x7D2 VA: 0x7D2
	|-EqualityComparer<int>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D3 Offset: 0x7D3 VA: 0x7D3
	|-EqualityComparer<Int32Enum>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x674 Offset: 0x674 VA: 0x674
	|-EqualityComparer<object>.System.Collections.IEqualityComparer.GetHashCode
	|-EqualityComparer<string>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D4 Offset: 0x7D4 VA: 0x7D4
	|-EqualityComparer<ResourceLocator>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D5 Offset: 0x7D5 VA: 0x7D5
	|-EqualityComparer<float>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D6 Offset: 0x7D6 VA: 0x7D6
	|-EqualityComparer<ulong>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D7 Offset: 0x7D7 VA: 0x7D7
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D8 Offset: 0x7D8 VA: 0x7D8
	|-EqualityComparer<Color32>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7D9 Offset: 0x7D9 VA: 0x7D9
	|-EqualityComparer<RaycastResult>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7DA Offset: 0x7DA VA: 0x7DA
	|-EqualityComparer<ColorBlock>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7DB Offset: 0x7DB VA: 0x7DB
	|-EqualityComparer<Navigation>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7DC Offset: 0x7DC VA: 0x7DC
	|-EqualityComparer<SpriteState>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7DD Offset: 0x7DD VA: 0x7DD
	|-EqualityComparer<UICharInfo>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7DE Offset: 0x7DE VA: 0x7DE
	|-EqualityComparer<UILineInfo>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7DF Offset: 0x7DF VA: 0x7DF
	|-EqualityComparer<UIVertex>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7E0 Offset: 0x7E0 VA: 0x7E0
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7E1 Offset: 0x7E1 VA: 0x7E1
	|-EqualityComparer<Vector2>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7E2 Offset: 0x7E2 VA: 0x7E2
	|-EqualityComparer<Vector3>.System.Collections.IEqualityComparer.GetHashCode
	|
	|-RVA: 0x7E3 Offset: 0x7E3 VA: 0x7E3
	|-EqualityComparer<Vector4>.System.Collections.IEqualityComparer.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private bool System.Collections.IEqualityComparer.Equals(object x, object y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA82 Offset: 0xA82 VA: 0xA82
	|-EqualityComparer<bool>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA83 Offset: 0xA83 VA: 0xA83
	|-EqualityComparer<byte>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA84 Offset: 0xA84 VA: 0xA84
	|-EqualityComparer<char>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA85 Offset: 0xA85 VA: 0xA85
	|-EqualityComparer<KeyValuePair<DateTime, object>>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA86 Offset: 0xA86 VA: 0xA86
	|-EqualityComparer<EventProvider.SessionInfo>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA87 Offset: 0xA87 VA: 0xA87
	|-EqualityComparer<Guid>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA88 Offset: 0xA88 VA: 0xA88
	|-EqualityComparer<int>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA89 Offset: 0xA89 VA: 0xA89
	|-EqualityComparer<Int32Enum>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA53 Offset: 0xA53 VA: 0xA53
	|-EqualityComparer<object>.System.Collections.IEqualityComparer.Equals
	|-EqualityComparer<string>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA8A Offset: 0xA8A VA: 0xA8A
	|-EqualityComparer<ResourceLocator>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA8B Offset: 0xA8B VA: 0xA8B
	|-EqualityComparer<float>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA8C Offset: 0xA8C VA: 0xA8C
	|-EqualityComparer<ulong>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA8D Offset: 0xA8D VA: 0xA8D
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA8E Offset: 0xA8E VA: 0xA8E
	|-EqualityComparer<Color32>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA8F Offset: 0xA8F VA: 0xA8F
	|-EqualityComparer<RaycastResult>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA90 Offset: 0xA90 VA: 0xA90
	|-EqualityComparer<ColorBlock>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA91 Offset: 0xA91 VA: 0xA91
	|-EqualityComparer<Navigation>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA92 Offset: 0xA92 VA: 0xA92
	|-EqualityComparer<SpriteState>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA93 Offset: 0xA93 VA: 0xA93
	|-EqualityComparer<UICharInfo>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA94 Offset: 0xA94 VA: 0xA94
	|-EqualityComparer<UILineInfo>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA95 Offset: 0xA95 VA: 0xA95
	|-EqualityComparer<UIVertex>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA96 Offset: 0xA96 VA: 0xA96
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA97 Offset: 0xA97 VA: 0xA97
	|-EqualityComparer<Vector2>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA98 Offset: 0xA98 VA: 0xA98
	|-EqualityComparer<Vector3>.System.Collections.IEqualityComparer.Equals
	|
	|-RVA: 0xA99 Offset: 0xA99 VA: 0xA99
	|-EqualityComparer<Vector4>.System.Collections.IEqualityComparer.Equals
	*/

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA4E Offset: 0xA4E VA: 0xA4E
	|-EqualityComparer<bool>..ctor
	|
	|-RVA: 0x90E Offset: 0x90E VA: 0x90E
	|-EqualityComparer<byte>..ctor
	|
	|-RVA: 0xA4F Offset: 0xA4F VA: 0xA4F
	|-EqualityComparer<char>..ctor
	|
	|-RVA: 0xA50 Offset: 0xA50 VA: 0xA50
	|-EqualityComparer<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xA51 Offset: 0xA51 VA: 0xA51
	|-EqualityComparer<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0xA52 Offset: 0xA52 VA: 0xA52
	|-EqualityComparer<Guid>..ctor
	|
	|-RVA: 0xA53 Offset: 0xA53 VA: 0xA53
	|-EqualityComparer<int>..ctor
	|
	|-RVA: 0xA54 Offset: 0xA54 VA: 0xA54
	|-EqualityComparer<Int32Enum>..ctor
	|
	|-RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4
	|-EqualityComparer<object>..ctor
	|-EqualityComparer<string>..ctor
	|
	|-RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	|-EqualityComparer<ResourceLocator>..ctor
	|
	|-RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	|-EqualityComparer<float>..ctor
	|
	|-RVA: 0xA57 Offset: 0xA57 VA: 0xA57
	|-EqualityComparer<ulong>..ctor
	|
	|-RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	|-EqualityComparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xA59 Offset: 0xA59 VA: 0xA59
	|-EqualityComparer<Color32>..ctor
	|
	|-RVA: 0xA5A Offset: 0xA5A VA: 0xA5A
	|-EqualityComparer<RaycastResult>..ctor
	|
	|-RVA: 0xA5B Offset: 0xA5B VA: 0xA5B
	|-EqualityComparer<ColorBlock>..ctor
	|
	|-RVA: 0xA5C Offset: 0xA5C VA: 0xA5C
	|-EqualityComparer<Navigation>..ctor
	|
	|-RVA: 0xA5D Offset: 0xA5D VA: 0xA5D
	|-EqualityComparer<SpriteState>..ctor
	|
	|-RVA: 0xA5E Offset: 0xA5E VA: 0xA5E
	|-EqualityComparer<UICharInfo>..ctor
	|
	|-RVA: 0xA5F Offset: 0xA5F VA: 0xA5F
	|-EqualityComparer<UILineInfo>..ctor
	|
	|-RVA: 0xA60 Offset: 0xA60 VA: 0xA60
	|-EqualityComparer<UIVertex>..ctor
	|
	|-RVA: 0xA61 Offset: 0xA61 VA: 0xA61
	|-EqualityComparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xA62 Offset: 0xA62 VA: 0xA62
	|-EqualityComparer<Vector2>..ctor
	|
	|-RVA: 0xA63 Offset: 0xA63 VA: 0xA63
	|-EqualityComparer<Vector3>..ctor
	|
	|-RVA: 0xA64 Offset: 0xA64 VA: 0xA64
	|-EqualityComparer<Vector4>..ctor
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal class GenericEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1226
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA9C Offset: 0xA9C VA: 0xA9C
	|-GenericEqualityComparer<bool>.Equals
	|
	|-RVA: 0xA9D Offset: 0xA9D VA: 0xA9D
	|-GenericEqualityComparer<byte>.Equals
	|
	|-RVA: 0xA9E Offset: 0xA9E VA: 0xA9E
	|-GenericEqualityComparer<char>.Equals
	|
	|-RVA: 0xA9F Offset: 0xA9F VA: 0xA9F
	|-GenericEqualityComparer<Guid>.Equals
	|
	|-RVA: 0xAA0 Offset: 0xAA0 VA: 0xAA0
	|-GenericEqualityComparer<int>.Equals
	|
	|-RVA: 0xA54 Offset: 0xA54 VA: 0xA54
	|-GenericEqualityComparer<object>.Equals
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-GenericEqualityComparer<float>.Equals
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-GenericEqualityComparer<ulong>.Equals
	|
	|-RVA: 0xAA1 Offset: 0xAA1 VA: 0xAA1
	|-GenericEqualityComparer<ColorBlock>.Equals
	|
	|-RVA: 0xAA2 Offset: 0xAA2 VA: 0xAA2
	|-GenericEqualityComparer<Navigation>.Equals
	|
	|-RVA: 0xAA3 Offset: 0xAA3 VA: 0xAA3
	|-GenericEqualityComparer<SpriteState>.Equals
	|
	|-RVA: 0xAA4 Offset: 0xAA4 VA: 0xAA4
	|-GenericEqualityComparer<Vector2>.Equals
	|
	|-RVA: 0xAA5 Offset: 0xAA5 VA: 0xAA5
	|-GenericEqualityComparer<Vector3>.Equals
	|
	|-RVA: 0xAA6 Offset: 0xAA6 VA: 0xAA6
	|-GenericEqualityComparer<Vector4>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E7 Offset: 0x7E7 VA: 0x7E7
	|-GenericEqualityComparer<bool>.GetHashCode
	|
	|-RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9
	|-GenericEqualityComparer<byte>.GetHashCode
	|
	|-RVA: 0x7EB Offset: 0x7EB VA: 0x7EB
	|-GenericEqualityComparer<char>.GetHashCode
	|
	|-RVA: 0x7ED Offset: 0x7ED VA: 0x7ED
	|-GenericEqualityComparer<Guid>.GetHashCode
	|
	|-RVA: 0x7EF Offset: 0x7EF VA: 0x7EF
	|-GenericEqualityComparer<int>.GetHashCode
	|
	|-RVA: 0x675 Offset: 0x675 VA: 0x675
	|-GenericEqualityComparer<object>.GetHashCode
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-GenericEqualityComparer<float>.GetHashCode
	|
	|-RVA: 0x20 Offset: 0x20 VA: 0x20
	|-GenericEqualityComparer<ulong>.GetHashCode
	|
	|-RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3
	|-GenericEqualityComparer<ColorBlock>.GetHashCode
	|
	|-RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5
	|-GenericEqualityComparer<Navigation>.GetHashCode
	|
	|-RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7
	|-GenericEqualityComparer<SpriteState>.GetHashCode
	|
	|-RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9
	|-GenericEqualityComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x7FB Offset: 0x7FB VA: 0x7FB
	|-GenericEqualityComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	|-GenericEqualityComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 10
	internal override int IndexOf(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF1 Offset: 0xF1 VA: 0xF1
	|-GenericEqualityComparer<bool>.IndexOf
	|
	|-RVA: 0xF3 Offset: 0xF3 VA: 0xF3
	|-GenericEqualityComparer<byte>.IndexOf
	|
	|-RVA: 0xF5 Offset: 0xF5 VA: 0xF5
	|-GenericEqualityComparer<char>.IndexOf
	|
	|-RVA: 0xF7 Offset: 0xF7 VA: 0xF7
	|-GenericEqualityComparer<Guid>.IndexOf
	|
	|-RVA: 0xF9 Offset: 0xF9 VA: 0xF9
	|-GenericEqualityComparer<int>.IndexOf
	|
	|-RVA: 0x99 Offset: 0x99 VA: 0x99
	|-GenericEqualityComparer<object>.IndexOf
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-GenericEqualityComparer<float>.IndexOf
	|-GenericEqualityComparer<ulong>.IndexOf
	|
	|-RVA: 0xFB Offset: 0xFB VA: 0xFB
	|-GenericEqualityComparer<ColorBlock>.IndexOf
	|
	|-RVA: 0xFD Offset: 0xFD VA: 0xFD
	|-GenericEqualityComparer<Navigation>.IndexOf
	|
	|-RVA: 0xFF Offset: 0xFF VA: 0xFF
	|-GenericEqualityComparer<SpriteState>.IndexOf
	|
	|-RVA: 0x101 Offset: 0x101 VA: 0x101
	|-GenericEqualityComparer<Vector2>.IndexOf
	|
	|-RVA: 0x103 Offset: 0x103 VA: 0x103
	|-GenericEqualityComparer<Vector3>.IndexOf
	|
	|-RVA: 0x105 Offset: 0x105 VA: 0x105
	|-GenericEqualityComparer<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 11
	internal override int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xF2 Offset: 0xF2 VA: 0xF2
	|-GenericEqualityComparer<bool>.LastIndexOf
	|
	|-RVA: 0xF4 Offset: 0xF4 VA: 0xF4
	|-GenericEqualityComparer<byte>.LastIndexOf
	|
	|-RVA: 0xF6 Offset: 0xF6 VA: 0xF6
	|-GenericEqualityComparer<char>.LastIndexOf
	|
	|-RVA: 0xF8 Offset: 0xF8 VA: 0xF8
	|-GenericEqualityComparer<Guid>.LastIndexOf
	|
	|-RVA: 0xFA Offset: 0xFA VA: 0xFA
	|-GenericEqualityComparer<int>.LastIndexOf
	|
	|-RVA: 0x9A Offset: 0x9A VA: 0x9A
	|-GenericEqualityComparer<object>.LastIndexOf
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-GenericEqualityComparer<float>.LastIndexOf
	|-GenericEqualityComparer<ulong>.LastIndexOf
	|
	|-RVA: 0xFC Offset: 0xFC VA: 0xFC
	|-GenericEqualityComparer<ColorBlock>.LastIndexOf
	|
	|-RVA: 0xFE Offset: 0xFE VA: 0xFE
	|-GenericEqualityComparer<Navigation>.LastIndexOf
	|
	|-RVA: 0x100 Offset: 0x100 VA: 0x100
	|-GenericEqualityComparer<SpriteState>.LastIndexOf
	|
	|-RVA: 0x102 Offset: 0x102 VA: 0x102
	|-GenericEqualityComparer<Vector2>.LastIndexOf
	|
	|-RVA: 0x104 Offset: 0x104 VA: 0x104
	|-GenericEqualityComparer<Vector3>.LastIndexOf
	|
	|-RVA: 0x106 Offset: 0x106 VA: 0x106
	|-GenericEqualityComparer<Vector4>.LastIndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E8 Offset: 0x7E8 VA: 0x7E8
	|-GenericEqualityComparer<bool>.Equals
	|
	|-RVA: 0x7EA Offset: 0x7EA VA: 0x7EA
	|-GenericEqualityComparer<byte>.Equals
	|
	|-RVA: 0x7EC Offset: 0x7EC VA: 0x7EC
	|-GenericEqualityComparer<char>.Equals
	|
	|-RVA: 0x7EE Offset: 0x7EE VA: 0x7EE
	|-GenericEqualityComparer<Guid>.Equals
	|
	|-RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0
	|-GenericEqualityComparer<int>.Equals
	|
	|-RVA: 0x676 Offset: 0x676 VA: 0x676
	|-GenericEqualityComparer<object>.Equals
	|
	|-RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1
	|-GenericEqualityComparer<float>.Equals
	|
	|-RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2
	|-GenericEqualityComparer<ulong>.Equals
	|
	|-RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4
	|-GenericEqualityComparer<ColorBlock>.Equals
	|
	|-RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6
	|-GenericEqualityComparer<Navigation>.Equals
	|
	|-RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8
	|-GenericEqualityComparer<SpriteState>.Equals
	|
	|-RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	|-GenericEqualityComparer<Vector2>.Equals
	|
	|-RVA: 0x7FC Offset: 0x7FC VA: 0x7FC
	|-GenericEqualityComparer<Vector3>.Equals
	|
	|-RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	|-GenericEqualityComparer<Vector4>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1094 Offset: 0x1094 VA: 0x1094
	|-GenericEqualityComparer<bool>.GetHashCode
	|
	|-RVA: 0x1095 Offset: 0x1095 VA: 0x1095
	|-GenericEqualityComparer<byte>.GetHashCode
	|
	|-RVA: 0x1096 Offset: 0x1096 VA: 0x1096
	|-GenericEqualityComparer<char>.GetHashCode
	|
	|-RVA: 0x1097 Offset: 0x1097 VA: 0x1097
	|-GenericEqualityComparer<Guid>.GetHashCode
	|
	|-RVA: 0x1098 Offset: 0x1098 VA: 0x1098
	|-GenericEqualityComparer<int>.GetHashCode
	|
	|-RVA: 0xD76 Offset: 0xD76 VA: 0xD76
	|-GenericEqualityComparer<object>.GetHashCode
	|
	|-RVA: 0x1099 Offset: 0x1099 VA: 0x1099
	|-GenericEqualityComparer<float>.GetHashCode
	|
	|-RVA: 0x109A Offset: 0x109A VA: 0x109A
	|-GenericEqualityComparer<ulong>.GetHashCode
	|
	|-RVA: 0x109B Offset: 0x109B VA: 0x109B
	|-GenericEqualityComparer<ColorBlock>.GetHashCode
	|
	|-RVA: 0x109C Offset: 0x109C VA: 0x109C
	|-GenericEqualityComparer<Navigation>.GetHashCode
	|
	|-RVA: 0x109D Offset: 0x109D VA: 0x109D
	|-GenericEqualityComparer<SpriteState>.GetHashCode
	|
	|-RVA: 0x109E Offset: 0x109E VA: 0x109E
	|-GenericEqualityComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x109F Offset: 0x109F VA: 0x109F
	|-GenericEqualityComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x10A0 Offset: 0x10A0 VA: 0x10A0
	|-GenericEqualityComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA68 Offset: 0xA68 VA: 0xA68
	|-GenericEqualityComparer<bool>..ctor
	|
	|-RVA: 0xA69 Offset: 0xA69 VA: 0xA69
	|-GenericEqualityComparer<byte>..ctor
	|
	|-RVA: 0xA6A Offset: 0xA6A VA: 0xA6A
	|-GenericEqualityComparer<char>..ctor
	|
	|-RVA: 0xA6B Offset: 0xA6B VA: 0xA6B
	|-GenericEqualityComparer<Guid>..ctor
	|
	|-RVA: 0xA6C Offset: 0xA6C VA: 0xA6C
	|-GenericEqualityComparer<int>..ctor
	|
	|-RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5
	|-GenericEqualityComparer<object>..ctor
	|
	|-RVA: 0xA6D Offset: 0xA6D VA: 0xA6D
	|-GenericEqualityComparer<float>..ctor
	|
	|-RVA: 0xA6E Offset: 0xA6E VA: 0xA6E
	|-GenericEqualityComparer<ulong>..ctor
	|
	|-RVA: 0xA6F Offset: 0xA6F VA: 0xA6F
	|-GenericEqualityComparer<ColorBlock>..ctor
	|
	|-RVA: 0xA70 Offset: 0xA70 VA: 0xA70
	|-GenericEqualityComparer<Navigation>..ctor
	|
	|-RVA: 0xA71 Offset: 0xA71 VA: 0xA71
	|-GenericEqualityComparer<SpriteState>..ctor
	|
	|-RVA: 0xA72 Offset: 0xA72 VA: 0xA72
	|-GenericEqualityComparer<Vector2>..ctor
	|
	|-RVA: 0xA73 Offset: 0xA73 VA: 0xA73
	|-GenericEqualityComparer<Vector3>..ctor
	|
	|-RVA: 0xA74 Offset: 0xA74 VA: 0xA74
	|-GenericEqualityComparer<Vector4>..ctor
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal class NullableEqualityComparer<T> : EqualityComparer<Nullable<T>> // TypeDefIndex: 1227
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(Nullable<T> x, Nullable<T> y) { }

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(Nullable<T> obj) { }

	// RVA: -1 Offset: -1 Slot: 10
	internal override int IndexOf(Nullable<T>[] array, Nullable<T> value, int startIndex, int count) { }

	// RVA: -1 Offset: -1 Slot: 11
	internal override int LastIndexOf(Nullable<T>[] array, Nullable<T> value, int startIndex, int count) { }

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class ObjectEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1228
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAB7 Offset: 0xAB7 VA: 0xAB7
	|-ObjectEqualityComparer<bool>.Equals
	|
	|-RVA: 0xAB8 Offset: 0xAB8 VA: 0xAB8
	|-ObjectEqualityComparer<byte>.Equals
	|
	|-RVA: 0xAB9 Offset: 0xAB9 VA: 0xAB9
	|-ObjectEqualityComparer<char>.Equals
	|
	|-RVA: 0xABA Offset: 0xABA VA: 0xABA
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>.Equals
	|
	|-RVA: 0xABB Offset: 0xABB VA: 0xABB
	|-ObjectEqualityComparer<EventProvider.SessionInfo>.Equals
	|
	|-RVA: 0xABC Offset: 0xABC VA: 0xABC
	|-ObjectEqualityComparer<Guid>.Equals
	|
	|-RVA: 0xABD Offset: 0xABD VA: 0xABD
	|-ObjectEqualityComparer<int>.Equals
	|
	|-RVA: 0xABE Offset: 0xABE VA: 0xABE
	|-ObjectEqualityComparer<Int32Enum>.Equals
	|
	|-RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	|-ObjectEqualityComparer<object>.Equals
	|
	|-RVA: 0xABF Offset: 0xABF VA: 0xABF
	|-ObjectEqualityComparer<ResourceLocator>.Equals
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-ObjectEqualityComparer<float>.Equals
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-ObjectEqualityComparer<ulong>.Equals
	|
	|-RVA: 0xAC0 Offset: 0xAC0 VA: 0xAC0
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>.Equals
	|
	|-RVA: 0xAC1 Offset: 0xAC1 VA: 0xAC1
	|-ObjectEqualityComparer<Color32>.Equals
	|
	|-RVA: 0xAC2 Offset: 0xAC2 VA: 0xAC2
	|-ObjectEqualityComparer<RaycastResult>.Equals
	|
	|-RVA: 0xAC3 Offset: 0xAC3 VA: 0xAC3
	|-ObjectEqualityComparer<ColorBlock>.Equals
	|
	|-RVA: 0xAC4 Offset: 0xAC4 VA: 0xAC4
	|-ObjectEqualityComparer<Navigation>.Equals
	|
	|-RVA: 0xAC5 Offset: 0xAC5 VA: 0xAC5
	|-ObjectEqualityComparer<SpriteState>.Equals
	|
	|-RVA: 0xAC6 Offset: 0xAC6 VA: 0xAC6
	|-ObjectEqualityComparer<UICharInfo>.Equals
	|
	|-RVA: 0xAC7 Offset: 0xAC7 VA: 0xAC7
	|-ObjectEqualityComparer<UILineInfo>.Equals
	|
	|-RVA: 0xAC8 Offset: 0xAC8 VA: 0xAC8
	|-ObjectEqualityComparer<UIVertex>.Equals
	|
	|-RVA: 0xAC9 Offset: 0xAC9 VA: 0xAC9
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>.Equals
	|
	|-RVA: 0xACA Offset: 0xACA VA: 0xACA
	|-ObjectEqualityComparer<Vector2>.Equals
	|
	|-RVA: 0xACB Offset: 0xACB VA: 0xACB
	|-ObjectEqualityComparer<Vector3>.Equals
	|
	|-RVA: 0xACC Offset: 0xACC VA: 0xACC
	|-ObjectEqualityComparer<Vector4>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x887 Offset: 0x887 VA: 0x887
	|-ObjectEqualityComparer<bool>.GetHashCode
	|
	|-RVA: 0x889 Offset: 0x889 VA: 0x889
	|-ObjectEqualityComparer<byte>.GetHashCode
	|
	|-RVA: 0x88B Offset: 0x88B VA: 0x88B
	|-ObjectEqualityComparer<char>.GetHashCode
	|
	|-RVA: 0x88D Offset: 0x88D VA: 0x88D
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>.GetHashCode
	|
	|-RVA: 0x88F Offset: 0x88F VA: 0x88F
	|-ObjectEqualityComparer<EventProvider.SessionInfo>.GetHashCode
	|
	|-RVA: 0x891 Offset: 0x891 VA: 0x891
	|-ObjectEqualityComparer<Guid>.GetHashCode
	|
	|-RVA: 0x893 Offset: 0x893 VA: 0x893
	|-ObjectEqualityComparer<int>.GetHashCode
	|
	|-RVA: 0x895 Offset: 0x895 VA: 0x895
	|-ObjectEqualityComparer<Int32Enum>.GetHashCode
	|
	|-RVA: 0x677 Offset: 0x677 VA: 0x677
	|-ObjectEqualityComparer<object>.GetHashCode
	|
	|-RVA: 0x897 Offset: 0x897 VA: 0x897
	|-ObjectEqualityComparer<ResourceLocator>.GetHashCode
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-ObjectEqualityComparer<float>.GetHashCode
	|
	|-RVA: 0x24 Offset: 0x24 VA: 0x24
	|-ObjectEqualityComparer<ulong>.GetHashCode
	|
	|-RVA: 0x89B Offset: 0x89B VA: 0x89B
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>.GetHashCode
	|
	|-RVA: 0x89D Offset: 0x89D VA: 0x89D
	|-ObjectEqualityComparer<Color32>.GetHashCode
	|
	|-RVA: 0x89F Offset: 0x89F VA: 0x89F
	|-ObjectEqualityComparer<RaycastResult>.GetHashCode
	|
	|-RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
	|-ObjectEqualityComparer<ColorBlock>.GetHashCode
	|
	|-RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
	|-ObjectEqualityComparer<Navigation>.GetHashCode
	|
	|-RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5
	|-ObjectEqualityComparer<SpriteState>.GetHashCode
	|
	|-RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7
	|-ObjectEqualityComparer<UICharInfo>.GetHashCode
	|
	|-RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9
	|-ObjectEqualityComparer<UILineInfo>.GetHashCode
	|
	|-RVA: 0x8AB Offset: 0x8AB VA: 0x8AB
	|-ObjectEqualityComparer<UIVertex>.GetHashCode
	|
	|-RVA: 0x8AD Offset: 0x8AD VA: 0x8AD
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>.GetHashCode
	|
	|-RVA: 0x8AF Offset: 0x8AF VA: 0x8AF
	|-ObjectEqualityComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
	|-ObjectEqualityComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
	|-ObjectEqualityComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1 Slot: 10
	internal override int IndexOf(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x107 Offset: 0x107 VA: 0x107
	|-ObjectEqualityComparer<bool>.IndexOf
	|
	|-RVA: 0x109 Offset: 0x109 VA: 0x109
	|-ObjectEqualityComparer<byte>.IndexOf
	|
	|-RVA: 0x10B Offset: 0x10B VA: 0x10B
	|-ObjectEqualityComparer<char>.IndexOf
	|
	|-RVA: 0x10D Offset: 0x10D VA: 0x10D
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>.IndexOf
	|
	|-RVA: 0x10F Offset: 0x10F VA: 0x10F
	|-ObjectEqualityComparer<EventProvider.SessionInfo>.IndexOf
	|
	|-RVA: 0x111 Offset: 0x111 VA: 0x111
	|-ObjectEqualityComparer<Guid>.IndexOf
	|
	|-RVA: 0x113 Offset: 0x113 VA: 0x113
	|-ObjectEqualityComparer<int>.IndexOf
	|
	|-RVA: 0x115 Offset: 0x115 VA: 0x115
	|-ObjectEqualityComparer<Int32Enum>.IndexOf
	|
	|-RVA: 0x9B Offset: 0x9B VA: 0x9B
	|-ObjectEqualityComparer<object>.IndexOf
	|
	|-RVA: 0x117 Offset: 0x117 VA: 0x117
	|-ObjectEqualityComparer<ResourceLocator>.IndexOf
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-ObjectEqualityComparer<float>.IndexOf
	|-ObjectEqualityComparer<ulong>.IndexOf
	|
	|-RVA: 0x119 Offset: 0x119 VA: 0x119
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0x11B Offset: 0x11B VA: 0x11B
	|-ObjectEqualityComparer<Color32>.IndexOf
	|
	|-RVA: 0x11D Offset: 0x11D VA: 0x11D
	|-ObjectEqualityComparer<RaycastResult>.IndexOf
	|
	|-RVA: 0x11F Offset: 0x11F VA: 0x11F
	|-ObjectEqualityComparer<ColorBlock>.IndexOf
	|
	|-RVA: 0x121 Offset: 0x121 VA: 0x121
	|-ObjectEqualityComparer<Navigation>.IndexOf
	|
	|-RVA: 0x123 Offset: 0x123 VA: 0x123
	|-ObjectEqualityComparer<SpriteState>.IndexOf
	|
	|-RVA: 0x125 Offset: 0x125 VA: 0x125
	|-ObjectEqualityComparer<UICharInfo>.IndexOf
	|
	|-RVA: 0x127 Offset: 0x127 VA: 0x127
	|-ObjectEqualityComparer<UILineInfo>.IndexOf
	|
	|-RVA: 0x129 Offset: 0x129 VA: 0x129
	|-ObjectEqualityComparer<UIVertex>.IndexOf
	|
	|-RVA: 0x12B Offset: 0x12B VA: 0x12B
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0x12D Offset: 0x12D VA: 0x12D
	|-ObjectEqualityComparer<Vector2>.IndexOf
	|
	|-RVA: 0x12F Offset: 0x12F VA: 0x12F
	|-ObjectEqualityComparer<Vector3>.IndexOf
	|
	|-RVA: 0x131 Offset: 0x131 VA: 0x131
	|-ObjectEqualityComparer<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 11
	internal override int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x108 Offset: 0x108 VA: 0x108
	|-ObjectEqualityComparer<bool>.LastIndexOf
	|
	|-RVA: 0x10A Offset: 0x10A VA: 0x10A
	|-ObjectEqualityComparer<byte>.LastIndexOf
	|
	|-RVA: 0x10C Offset: 0x10C VA: 0x10C
	|-ObjectEqualityComparer<char>.LastIndexOf
	|
	|-RVA: 0x10E Offset: 0x10E VA: 0x10E
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>.LastIndexOf
	|
	|-RVA: 0x110 Offset: 0x110 VA: 0x110
	|-ObjectEqualityComparer<EventProvider.SessionInfo>.LastIndexOf
	|
	|-RVA: 0x112 Offset: 0x112 VA: 0x112
	|-ObjectEqualityComparer<Guid>.LastIndexOf
	|
	|-RVA: 0x114 Offset: 0x114 VA: 0x114
	|-ObjectEqualityComparer<int>.LastIndexOf
	|
	|-RVA: 0x116 Offset: 0x116 VA: 0x116
	|-ObjectEqualityComparer<Int32Enum>.LastIndexOf
	|
	|-RVA: 0x9C Offset: 0x9C VA: 0x9C
	|-ObjectEqualityComparer<object>.LastIndexOf
	|
	|-RVA: 0x118 Offset: 0x118 VA: 0x118
	|-ObjectEqualityComparer<ResourceLocator>.LastIndexOf
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-ObjectEqualityComparer<float>.LastIndexOf
	|-ObjectEqualityComparer<ulong>.LastIndexOf
	|
	|-RVA: 0x11A Offset: 0x11A VA: 0x11A
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>.LastIndexOf
	|
	|-RVA: 0x11C Offset: 0x11C VA: 0x11C
	|-ObjectEqualityComparer<Color32>.LastIndexOf
	|
	|-RVA: 0x11E Offset: 0x11E VA: 0x11E
	|-ObjectEqualityComparer<RaycastResult>.LastIndexOf
	|
	|-RVA: 0x120 Offset: 0x120 VA: 0x120
	|-ObjectEqualityComparer<ColorBlock>.LastIndexOf
	|
	|-RVA: 0x122 Offset: 0x122 VA: 0x122
	|-ObjectEqualityComparer<Navigation>.LastIndexOf
	|
	|-RVA: 0x124 Offset: 0x124 VA: 0x124
	|-ObjectEqualityComparer<SpriteState>.LastIndexOf
	|
	|-RVA: 0x126 Offset: 0x126 VA: 0x126
	|-ObjectEqualityComparer<UICharInfo>.LastIndexOf
	|
	|-RVA: 0x128 Offset: 0x128 VA: 0x128
	|-ObjectEqualityComparer<UILineInfo>.LastIndexOf
	|
	|-RVA: 0x12A Offset: 0x12A VA: 0x12A
	|-ObjectEqualityComparer<UIVertex>.LastIndexOf
	|
	|-RVA: 0x12C Offset: 0x12C VA: 0x12C
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>.LastIndexOf
	|
	|-RVA: 0x12E Offset: 0x12E VA: 0x12E
	|-ObjectEqualityComparer<Vector2>.LastIndexOf
	|
	|-RVA: 0x130 Offset: 0x130 VA: 0x130
	|-ObjectEqualityComparer<Vector3>.LastIndexOf
	|
	|-RVA: 0x132 Offset: 0x132 VA: 0x132
	|-ObjectEqualityComparer<Vector4>.LastIndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x888 Offset: 0x888 VA: 0x888
	|-ObjectEqualityComparer<bool>.Equals
	|
	|-RVA: 0x88A Offset: 0x88A VA: 0x88A
	|-ObjectEqualityComparer<byte>.Equals
	|
	|-RVA: 0x88C Offset: 0x88C VA: 0x88C
	|-ObjectEqualityComparer<char>.Equals
	|
	|-RVA: 0x88E Offset: 0x88E VA: 0x88E
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>.Equals
	|
	|-RVA: 0x890 Offset: 0x890 VA: 0x890
	|-ObjectEqualityComparer<EventProvider.SessionInfo>.Equals
	|
	|-RVA: 0x892 Offset: 0x892 VA: 0x892
	|-ObjectEqualityComparer<Guid>.Equals
	|
	|-RVA: 0x894 Offset: 0x894 VA: 0x894
	|-ObjectEqualityComparer<int>.Equals
	|
	|-RVA: 0x896 Offset: 0x896 VA: 0x896
	|-ObjectEqualityComparer<Int32Enum>.Equals
	|
	|-RVA: 0x678 Offset: 0x678 VA: 0x678
	|-ObjectEqualityComparer<object>.Equals
	|
	|-RVA: 0x898 Offset: 0x898 VA: 0x898
	|-ObjectEqualityComparer<ResourceLocator>.Equals
	|
	|-RVA: 0x899 Offset: 0x899 VA: 0x899
	|-ObjectEqualityComparer<float>.Equals
	|
	|-RVA: 0x89A Offset: 0x89A VA: 0x89A
	|-ObjectEqualityComparer<ulong>.Equals
	|
	|-RVA: 0x89C Offset: 0x89C VA: 0x89C
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>.Equals
	|
	|-RVA: 0x89E Offset: 0x89E VA: 0x89E
	|-ObjectEqualityComparer<Color32>.Equals
	|
	|-RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
	|-ObjectEqualityComparer<RaycastResult>.Equals
	|
	|-RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
	|-ObjectEqualityComparer<ColorBlock>.Equals
	|
	|-RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
	|-ObjectEqualityComparer<Navigation>.Equals
	|
	|-RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6
	|-ObjectEqualityComparer<SpriteState>.Equals
	|
	|-RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8
	|-ObjectEqualityComparer<UICharInfo>.Equals
	|
	|-RVA: 0x8AA Offset: 0x8AA VA: 0x8AA
	|-ObjectEqualityComparer<UILineInfo>.Equals
	|
	|-RVA: 0x8AC Offset: 0x8AC VA: 0x8AC
	|-ObjectEqualityComparer<UIVertex>.Equals
	|
	|-RVA: 0x8AE Offset: 0x8AE VA: 0x8AE
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>.Equals
	|
	|-RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
	|-ObjectEqualityComparer<Vector2>.Equals
	|
	|-RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
	|-ObjectEqualityComparer<Vector3>.Equals
	|
	|-RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
	|-ObjectEqualityComparer<Vector4>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1190 Offset: 0x1190 VA: 0x1190
	|-ObjectEqualityComparer<bool>.GetHashCode
	|
	|-RVA: 0x1191 Offset: 0x1191 VA: 0x1191
	|-ObjectEqualityComparer<byte>.GetHashCode
	|
	|-RVA: 0x1192 Offset: 0x1192 VA: 0x1192
	|-ObjectEqualityComparer<char>.GetHashCode
	|
	|-RVA: 0x1193 Offset: 0x1193 VA: 0x1193
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>.GetHashCode
	|
	|-RVA: 0x1194 Offset: 0x1194 VA: 0x1194
	|-ObjectEqualityComparer<EventProvider.SessionInfo>.GetHashCode
	|
	|-RVA: 0x1195 Offset: 0x1195 VA: 0x1195
	|-ObjectEqualityComparer<Guid>.GetHashCode
	|
	|-RVA: 0x1196 Offset: 0x1196 VA: 0x1196
	|-ObjectEqualityComparer<int>.GetHashCode
	|
	|-RVA: 0x1197 Offset: 0x1197 VA: 0x1197
	|-ObjectEqualityComparer<Int32Enum>.GetHashCode
	|
	|-RVA: 0xD77 Offset: 0xD77 VA: 0xD77
	|-ObjectEqualityComparer<object>.GetHashCode
	|
	|-RVA: 0x1198 Offset: 0x1198 VA: 0x1198
	|-ObjectEqualityComparer<ResourceLocator>.GetHashCode
	|
	|-RVA: 0x1199 Offset: 0x1199 VA: 0x1199
	|-ObjectEqualityComparer<float>.GetHashCode
	|
	|-RVA: 0x119A Offset: 0x119A VA: 0x119A
	|-ObjectEqualityComparer<ulong>.GetHashCode
	|
	|-RVA: 0x119B Offset: 0x119B VA: 0x119B
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>.GetHashCode
	|
	|-RVA: 0x119C Offset: 0x119C VA: 0x119C
	|-ObjectEqualityComparer<Color32>.GetHashCode
	|
	|-RVA: 0x119D Offset: 0x119D VA: 0x119D
	|-ObjectEqualityComparer<RaycastResult>.GetHashCode
	|
	|-RVA: 0x119E Offset: 0x119E VA: 0x119E
	|-ObjectEqualityComparer<ColorBlock>.GetHashCode
	|
	|-RVA: 0x119F Offset: 0x119F VA: 0x119F
	|-ObjectEqualityComparer<Navigation>.GetHashCode
	|
	|-RVA: 0x11A0 Offset: 0x11A0 VA: 0x11A0
	|-ObjectEqualityComparer<SpriteState>.GetHashCode
	|
	|-RVA: 0x11A1 Offset: 0x11A1 VA: 0x11A1
	|-ObjectEqualityComparer<UICharInfo>.GetHashCode
	|
	|-RVA: 0x11A2 Offset: 0x11A2 VA: 0x11A2
	|-ObjectEqualityComparer<UILineInfo>.GetHashCode
	|
	|-RVA: 0x11A3 Offset: 0x11A3 VA: 0x11A3
	|-ObjectEqualityComparer<UIVertex>.GetHashCode
	|
	|-RVA: 0x11A4 Offset: 0x11A4 VA: 0x11A4
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>.GetHashCode
	|
	|-RVA: 0x11A5 Offset: 0x11A5 VA: 0x11A5
	|-ObjectEqualityComparer<Vector2>.GetHashCode
	|
	|-RVA: 0x11A6 Offset: 0x11A6 VA: 0x11A6
	|-ObjectEqualityComparer<Vector3>.GetHashCode
	|
	|-RVA: 0x11A7 Offset: 0x11A7 VA: 0x11A7
	|-ObjectEqualityComparer<Vector4>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xACF Offset: 0xACF VA: 0xACF
	|-ObjectEqualityComparer<bool>..ctor
	|
	|-RVA: 0xAD0 Offset: 0xAD0 VA: 0xAD0
	|-ObjectEqualityComparer<byte>..ctor
	|
	|-RVA: 0xAD1 Offset: 0xAD1 VA: 0xAD1
	|-ObjectEqualityComparer<char>..ctor
	|
	|-RVA: 0xAD2 Offset: 0xAD2 VA: 0xAD2
	|-ObjectEqualityComparer<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xAD3 Offset: 0xAD3 VA: 0xAD3
	|-ObjectEqualityComparer<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0xAD4 Offset: 0xAD4 VA: 0xAD4
	|-ObjectEqualityComparer<Guid>..ctor
	|
	|-RVA: 0xAD5 Offset: 0xAD5 VA: 0xAD5
	|-ObjectEqualityComparer<int>..ctor
	|
	|-RVA: 0xAD6 Offset: 0xAD6 VA: 0xAD6
	|-ObjectEqualityComparer<Int32Enum>..ctor
	|
	|-RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6
	|-ObjectEqualityComparer<object>..ctor
	|
	|-RVA: 0xAD7 Offset: 0xAD7 VA: 0xAD7
	|-ObjectEqualityComparer<ResourceLocator>..ctor
	|
	|-RVA: 0xAD8 Offset: 0xAD8 VA: 0xAD8
	|-ObjectEqualityComparer<float>..ctor
	|
	|-RVA: 0xAD9 Offset: 0xAD9 VA: 0xAD9
	|-ObjectEqualityComparer<ulong>..ctor
	|
	|-RVA: 0xADA Offset: 0xADA VA: 0xADA
	|-ObjectEqualityComparer<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xADB Offset: 0xADB VA: 0xADB
	|-ObjectEqualityComparer<Color32>..ctor
	|
	|-RVA: 0xADC Offset: 0xADC VA: 0xADC
	|-ObjectEqualityComparer<RaycastResult>..ctor
	|
	|-RVA: 0xADD Offset: 0xADD VA: 0xADD
	|-ObjectEqualityComparer<ColorBlock>..ctor
	|
	|-RVA: 0xADE Offset: 0xADE VA: 0xADE
	|-ObjectEqualityComparer<Navigation>..ctor
	|
	|-RVA: 0xADF Offset: 0xADF VA: 0xADF
	|-ObjectEqualityComparer<SpriteState>..ctor
	|
	|-RVA: 0xAE0 Offset: 0xAE0 VA: 0xAE0
	|-ObjectEqualityComparer<UICharInfo>..ctor
	|
	|-RVA: 0xAE1 Offset: 0xAE1 VA: 0xAE1
	|-ObjectEqualityComparer<UILineInfo>..ctor
	|
	|-RVA: 0xAE2 Offset: 0xAE2 VA: 0xAE2
	|-ObjectEqualityComparer<UIVertex>..ctor
	|
	|-RVA: 0xAE3 Offset: 0xAE3 VA: 0xAE3
	|-ObjectEqualityComparer<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xAE4 Offset: 0xAE4 VA: 0xAE4
	|-ObjectEqualityComparer<Vector2>..ctor
	|
	|-RVA: 0xAE5 Offset: 0xAE5 VA: 0xAE5
	|-ObjectEqualityComparer<Vector3>..ctor
	|
	|-RVA: 0xAE6 Offset: 0xAE6 VA: 0xAE6
	|-ObjectEqualityComparer<Vector4>..ctor
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal class ByteEqualityComparer : EqualityComparer<byte> // TypeDefIndex: 1229
{
	// Methods

	// RVA: 0x820 Offset: 0x820 VA: 0x820 Slot: 8
	public override bool Equals(byte x, byte y) { }

	// RVA: 0x103 Offset: 0x103 VA: 0x103 Slot: 9
	public override int GetHashCode(byte b) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19 Slot: 10
	internal override int IndexOf(byte[] array, byte value, int startIndex, int count) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A Slot: 11
	internal override int LastIndexOf(byte[] array, byte value, int startIndex, int count) { }

	// RVA: 0x104 Offset: 0x104 VA: 0x104 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class EnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1230
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA81 Offset: 0xA81 VA: 0xA81
	|-EnumEqualityComparer<Int32Enum>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7CA Offset: 0x7CA VA: 0x7CA
	|-EnumEqualityComparer<Int32Enum>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA4D Offset: 0xA4D VA: 0xA4D
	|-EnumEqualityComparer<Int32Enum>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void .ctor(SerializationInfo information, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x626 Offset: 0x626 VA: 0x626
	|-EnumEqualityComparer<Int32Enum>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x627 Offset: 0x627 VA: 0x627
	|-EnumEqualityComparer<Int32Enum>.GetObjectData
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7CB Offset: 0x7CB VA: 0x7CB
	|-EnumEqualityComparer<Int32Enum>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1090 Offset: 0x1090 VA: 0x1090
	|-EnumEqualityComparer<Int32Enum>.GetHashCode
	*/
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class SByteEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1231
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }

	// RVA: -1 Offset: -1
	public void .ctor(SerializationInfo information, StreamingContext context) { }

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class ShortEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1232
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }

	// RVA: -1 Offset: -1
	public void .ctor(SerializationInfo information, StreamingContext context) { }

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class LongEnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1233
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(T x, T y) { }

	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1
	public void .ctor() { }

	// RVA: -1 Offset: -1
	public void .ctor(SerializationInfo information, StreamingContext context) { }

	// RVA: -1 Offset: -1 Slot: 12
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class InternalStringComparer : EqualityComparer<string> // TypeDefIndex: 1234
{
	// Methods

	// RVA: 0x105 Offset: 0x105 VA: 0x105 Slot: 9
	public override int GetHashCode(string obj) { }

	// RVA: 0x821 Offset: 0x821 VA: 0x821 Slot: 8
	public override bool Equals(string x, string y) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B Slot: 10
	internal override int IndexOf(string[] array, string value, int startIndex, int count) { }

	// RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[TypeDependencyAttribute] // RVA: 0x4F4 Offset: 0x4F4 VA: 0x4F4
public interface ICollection<T> : IEnumerable<T>, IEnumerable // TypeDefIndex: 1235
{
	// Properties
	public abstract int Count { get; }
	public abstract bool IsReadOnly { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void CopyTo(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ICollection<object>.Remove
	*/
}

// Namespace: System.Collections.Generic
public interface IComparer<T> // TypeDefIndex: 1236
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IComparer<object>.Compare
	*/
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0x4F5 Offset: 0x4F5 VA: 0x4F5
public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable // TypeDefIndex: 1237
{
	// Properties
	public abstract TKey Item { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Item(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IDictionary<object, object>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Add(TKey key, TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IDictionary<object, object>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool TryGetValue(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IDictionary<object, object>.TryGetValue
	*/
}

// Namespace: System.Collections.Generic
[TypeDependencyAttribute] // RVA: 0x4F6 Offset: 0x4F6 VA: 0x4F6
public interface IEnumerable<T> : IEnumerable // TypeDefIndex: 1238
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerable<object>.GetEnumerator
	*/
}

// Namespace: System.Collections.Generic
public interface IEnumerator<T> : IDisposable, IEnumerator // TypeDefIndex: 1239
{
	// Properties
	public abstract T Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerator<object>.get_Current
	*/
}

// Namespace: System.Collections.Generic
public interface IEqualityComparer<T> // TypeDefIndex: 1240
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T x, T y) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEqualityComparer<object>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(T obj) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEqualityComparer<object>.GetHashCode
	*/
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7
[TypeDependencyAttribute] // RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7
public interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 1241
{
	// Properties
	public abstract T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IList<object>.RemoveAt
	*/
}

// Namespace: System.Collections.Generic
[TypeDependencyAttribute] // RVA: 0x4F8 Offset: 0x4F8 VA: 0x4F8
public interface IReadOnlyCollection<T> : IEnumerable<T>, IEnumerable // TypeDefIndex: 1242
{
	// Properties
	public abstract int Count { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IReadOnlyCollection<object>.get_Count
	*/
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0x4F9 Offset: 0x4F9 VA: 0x4F9
public interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable // TypeDefIndex: 1243
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool TryGetValue(TKey key, out TValue value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IReadOnlyDictionary<object, object>.TryGetValue
	*/
}

// Namespace: System.Collections.Generic
[TypeDependencyAttribute] // RVA: 0x4FA Offset: 0x4FA VA: 0x4FA
[DefaultMemberAttribute] // RVA: 0x4FA Offset: 0x4FA VA: 0x4FA
public interface IReadOnlyList<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 1244
{
	// Properties
	public abstract T Item { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IReadOnlyList<object>.get_Item
	*/
}

// Namespace: System.Collections.Generic
[ComVisibleAttribute] // RVA: 0x4FB Offset: 0x4FB VA: 0x4FB
[Serializable]
public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 1245
{
	// Methods

	// RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
	public void .ctor() { }

	// RVA: 0xBF Offset: 0xBF VA: 0xBF
	public void .ctor(string message) { }

	// RVA: 0x9C Offset: 0x9C VA: 0x9C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections.Generic
[DebuggerDisplayAttribute] // RVA: 0x4FC Offset: 0x4FC VA: 0x4FC
[DebuggerTypeProxyAttribute] // RVA: 0x4FC Offset: 0x4FC VA: 0x4FC
[DefaultMemberAttribute] // RVA: 0x4FC Offset: 0x4FC VA: 0x4FC
[Serializable]
public class List<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T> // TypeDefIndex: 1246
{
	// Fields
	private const int _defaultCapacity = 4;
	private T[] _items; // 0xFFFFFFFF
	private int _size; // 0xFFFFFFFF
	private int _version; // 0xFFFFFFFF
	private object _syncRoot; // 0xFFFFFFFF
	private static readonly T[] _emptyArray; // 0xFFFFFFFF

	// Properties
	public int Capacity { get; set; }
	public int Count { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public T Item { get; set; }
	private object System.Collections.IList.Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7
	|-List<Contraction>..ctor
	|-List<Level2Map>..ctor
	|-List<AggregateException>..ctor
	|-List<StackFrame>..ctor
	|-List<FieldMetadata>..ctor
	|-List<PropertyAnalysis>..ctor
	|-List<Exception>..ctor
	|-List<CultureInfo>..ctor
	|-List<Directory.SearchData>..ctor
	|-List<LocalDataStore>..ctor
	|-List<ModifierSpec>..ctor
	|-List<object>..ctor
	|-List<MethodInfo>..ctor
	|-List<IContextProperty>..ctor
	|-List<SerializationFieldInfo>..ctor
	|-List<string>..ctor
	|-List<IAsyncLocal>..ctor
	|-List<Task>..ctor
	|-List<TimeZoneInfo.AdjustmentRule>..ctor
	|-List<TimeZoneInfo>..ctor
	|-List<Tuple<EventProvider.SessionInfo, bool>>..ctor
	|-List<Type>..ctor
	|-List<TypeIdentifier>..ctor
	|-List<TypeSpec>..ctor
	|-List<WeakReference<EtwSession>>..ctor
	|-List<AudioAmbisonicExtensionDefinition>..ctor
	|-List<AudioSourceExtension>..ctor
	|-List<AudioSpatializerExtensionDefinition>..ctor
	|-List<CanvasGroup>..ctor
	|-List<BaseInputModule>..ctor
	|-List<BaseRaycaster>..ctor
	|-List<EventSystem>..ctor
	|-List<EventTrigger.Entry>..ctor
	|-List<PointerInputModule.ButtonState>..ctor
	|-List<BaseInvokableCall>..ctor
	|-List<PersistentCall>..ctor
	|-List<GUILayoutEntry>..ctor
	|-List<GameObject>..ctor
	|-List<PlayerEditorConnectionEvents.MessageTypeSubscribers>..ctor
	|-List<RectTransform>..ctor
	|-List<Rigidbody2D>..ctor
	|-List<Dropdown.DropdownItem>..ctor
	|-List<Dropdown.OptionData>..ctor
	|-List<Graphic>..ctor
	|-List<Image>..ctor
	|-List<RectMask2D>..ctor
	|-List<Selectable>..ctor
	|-List<StencilMaterial.MatEntry>..ctor
	|-List<Toggle>..ctor
	|
	|-RVA: 0xA7F Offset: 0xA7F VA: 0xA7F
	|-List<byte>..ctor
	|
	|-RVA: 0xA84 Offset: 0xA84 VA: 0xA84
	|-List<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xA89 Offset: 0xA89 VA: 0xA89
	|-List<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x931 Offset: 0x931 VA: 0x931
	|-List<int>..ctor
	|
	|-RVA: 0xA90 Offset: 0xA90 VA: 0xA90
	|-List<ulong>..ctor
	|
	|-RVA: 0x933 Offset: 0x933 VA: 0x933
	|-List<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xA98 Offset: 0xA98 VA: 0xA98
	|-List<Color32>..ctor
	|
	|-RVA: 0x937 Offset: 0x937 VA: 0x937
	|-List<RaycastResult>..ctor
	|
	|-RVA: 0xA9F Offset: 0xA9F VA: 0xA9F
	|-List<UICharInfo>..ctor
	|
	|-RVA: 0xAA4 Offset: 0xAA4 VA: 0xAA4
	|-List<UILineInfo>..ctor
	|
	|-RVA: 0xAA9 Offset: 0xAA9 VA: 0xAA9
	|-List<UIVertex>..ctor
	|
	|-RVA: 0xAAE Offset: 0xAAE VA: 0xAAE
	|-List<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xAB2 Offset: 0xAB2 VA: 0xAB2
	|-List<Vector2>..ctor
	|
	|-RVA: 0xAB6 Offset: 0xAB6 VA: 0xAB6
	|-List<Vector3>..ctor
	|
	|-RVA: 0xABA Offset: 0xABA VA: 0xABA
	|-List<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x863 Offset: 0x863 VA: 0x863
	|-List<byte>..ctor
	|
	|-RVA: 0x877 Offset: 0x877 VA: 0x877
	|-List<KeyValuePair<DateTime, object>>..ctor
	|-List<KeyValuePair<DateTime, TimeType>>..ctor
	|
	|-RVA: 0x822 Offset: 0x822 VA: 0x822
	|-List<EtwSession>..ctor
	|-List<object>..ctor
	|-List<MethodBase>..ctor
	|-List<MethodInfo>..ctor
	|-List<Module>..ctor
	|-List<ExceptionDispatchInfo>..ctor
	|-List<Timer>..ctor
	|-List<Type>..ctor
	|-List<WeakReference>..ctor
	|-List<Transform>..ctor
	|
	|-RVA: 0x85F Offset: 0x85F VA: 0x85F
	|-List<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x861 Offset: 0x861 VA: 0x861
	|-List<int>..ctor
	|
	|-RVA: 0xA21 Offset: 0xA21 VA: 0xA21
	|-List<ulong>..ctor
	|
	|-RVA: 0xA2A Offset: 0xA2A VA: 0xA2A
	|-List<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xA36 Offset: 0xA36 VA: 0xA36
	|-List<Color32>..ctor
	|
	|-RVA: 0xA40 Offset: 0xA40 VA: 0xA40
	|-List<RaycastResult>..ctor
	|
	|-RVA: 0x884 Offset: 0x884 VA: 0x884
	|-List<UICharInfo>..ctor
	|
	|-RVA: 0x885 Offset: 0x885 VA: 0x885
	|-List<UILineInfo>..ctor
	|
	|-RVA: 0x883 Offset: 0x883 VA: 0x883
	|-List<UIVertex>..ctor
	|
	|-RVA: 0x87E Offset: 0x87E VA: 0x87E
	|-List<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xA71 Offset: 0xA71 VA: 0xA71
	|-List<Vector2>..ctor
	|
	|-RVA: 0xA7B Offset: 0xA7B VA: 0xA7B
	|-List<Vector3>..ctor
	|
	|-RVA: 0xA85 Offset: 0xA85 VA: 0xA85
	|-List<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(IEnumerable<T> collection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	|-List<byte>..ctor
	|
	|-RVA: 0xA07 Offset: 0xA07 VA: 0xA07
	|-List<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	|-List<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x823 Offset: 0x823 VA: 0x823
	|-List<Exception>..ctor
	|-List<object>..ctor
	|-List<ExceptionDispatchInfo>..ctor
	|-List<string>..ctor
	|-List<IAsyncLocal>..ctor
	|
	|-RVA: 0x868 Offset: 0x868 VA: 0x868
	|-List<int>..ctor
	|
	|-RVA: 0x86A Offset: 0x86A VA: 0x86A
	|-List<ulong>..ctor
	|
	|-RVA: 0xA2B Offset: 0xA2B VA: 0xA2B
	|-List<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0xA37 Offset: 0xA37 VA: 0xA37
	|-List<Color32>..ctor
	|
	|-RVA: 0xA41 Offset: 0xA41 VA: 0xA41
	|-List<RaycastResult>..ctor
	|
	|-RVA: 0xA4A Offset: 0xA4A VA: 0xA4A
	|-List<UICharInfo>..ctor
	|
	|-RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	|-List<UILineInfo>..ctor
	|
	|-RVA: 0xA60 Offset: 0xA60 VA: 0xA60
	|-List<UIVertex>..ctor
	|
	|-RVA: 0xA69 Offset: 0xA69 VA: 0xA69
	|-List<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0xA72 Offset: 0xA72 VA: 0xA72
	|-List<Vector2>..ctor
	|
	|-RVA: 0xA7C Offset: 0xA7C VA: 0xA7C
	|-List<Vector3>..ctor
	|
	|-RVA: 0xA86 Offset: 0xA86 VA: 0xA86
	|-List<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1
	public int get_Capacity() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10D6 Offset: 0x10D6 VA: 0x10D6
	|-List<byte>.get_Capacity
	|
	|-RVA: 0x10E1 Offset: 0x10E1 VA: 0x10E1
	|-List<KeyValuePair<DateTime, object>>.get_Capacity
	|
	|-RVA: 0x10EC Offset: 0x10EC VA: 0x10EC
	|-List<EventProvider.SessionInfo>.get_Capacity
	|
	|-RVA: 0x10F7 Offset: 0x10F7 VA: 0x10F7
	|-List<int>.get_Capacity
	|
	|-RVA: 0xD78 Offset: 0xD78 VA: 0xD78
	|-List<object>.get_Capacity
	|-List<Timer>.get_Capacity
	|
	|-RVA: 0x1101 Offset: 0x1101 VA: 0x1101
	|-List<ulong>.get_Capacity
	|
	|-RVA: 0x110D Offset: 0x110D VA: 0x110D
	|-List<BeforeRenderHelper.OrderBlock>.get_Capacity
	|
	|-RVA: 0x1118 Offset: 0x1118 VA: 0x1118
	|-List<Color32>.get_Capacity
	|
	|-RVA: 0x1124 Offset: 0x1124 VA: 0x1124
	|-List<RaycastResult>.get_Capacity
	|
	|-RVA: 0x112F Offset: 0x112F VA: 0x112F
	|-List<UICharInfo>.get_Capacity
	|
	|-RVA: 0x113B Offset: 0x113B VA: 0x113B
	|-List<UILineInfo>.get_Capacity
	|
	|-RVA: 0xE0D Offset: 0xE0D VA: 0xE0D
	|-List<UIVertex>.get_Capacity
	|
	|-RVA: 0x1151 Offset: 0x1151 VA: 0x1151
	|-List<UnitySynchronizationContext.WorkRequest>.get_Capacity
	|
	|-RVA: 0x115C Offset: 0x115C VA: 0x115C
	|-List<Vector2>.get_Capacity
	|
	|-RVA: 0x1168 Offset: 0x1168 VA: 0x1168
	|-List<Vector3>.get_Capacity
	|
	|-RVA: 0x1173 Offset: 0x1173 VA: 0x1173
	|-List<Vector4>.get_Capacity
	*/

	// RVA: -1 Offset: -1
	public void set_Capacity(int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	|-List<byte>.set_Capacity
	|
	|-RVA: 0xA08 Offset: 0xA08 VA: 0xA08
	|-List<KeyValuePair<DateTime, object>>.set_Capacity
	|
	|-RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	|-List<EventProvider.SessionInfo>.set_Capacity
	|
	|-RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	|-List<int>.set_Capacity
	|
	|-RVA: 0x821 Offset: 0x821 VA: 0x821
	|-List<object>.set_Capacity
	|-List<Timer>.set_Capacity
	|
	|-RVA: 0xA22 Offset: 0xA22 VA: 0xA22
	|-List<ulong>.set_Capacity
	|
	|-RVA: 0xA2C Offset: 0xA2C VA: 0xA2C
	|-List<BeforeRenderHelper.OrderBlock>.set_Capacity
	|
	|-RVA: 0xA38 Offset: 0xA38 VA: 0xA38
	|-List<Color32>.set_Capacity
	|
	|-RVA: 0xA42 Offset: 0xA42 VA: 0xA42
	|-List<RaycastResult>.set_Capacity
	|
	|-RVA: 0xA4B Offset: 0xA4B VA: 0xA4B
	|-List<UICharInfo>.set_Capacity
	|
	|-RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	|-List<UILineInfo>.set_Capacity
	|
	|-RVA: 0x895 Offset: 0x895 VA: 0x895
	|-List<UIVertex>.set_Capacity
	|
	|-RVA: 0xA6A Offset: 0xA6A VA: 0xA6A
	|-List<UnitySynchronizationContext.WorkRequest>.set_Capacity
	|
	|-RVA: 0xA73 Offset: 0xA73 VA: 0xA73
	|-List<Vector2>.set_Capacity
	|
	|-RVA: 0xA7D Offset: 0xA7D VA: 0xA7D
	|-List<Vector3>.set_Capacity
	|
	|-RVA: 0xA87 Offset: 0xA87 VA: 0xA87
	|-List<Vector4>.set_Capacity
	*/

	// RVA: -1 Offset: -1 Slot: 34
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD79 Offset: 0xD79 VA: 0xD79
	|-List<AggregateException>.get_Count
	|-List<EtwSession>.get_Count
	|-List<Directory.SearchData>.get_Count
	|-List<LocalDataStore>.get_Count
	|-List<object>.get_Count
	|-List<MethodBase>.get_Count
	|-List<MethodInfo>.get_Count
	|-List<ExceptionDispatchInfo>.get_Count
	|-List<IContextProperty>.get_Count
	|-List<SerializationFieldInfo>.get_Count
	|-List<string>.get_Count
	|-List<Timer>.get_Count
	|-List<TimeZoneInfo.AdjustmentRule>.get_Count
	|-List<TimeZoneInfo>.get_Count
	|-List<Tuple<EventProvider.SessionInfo, bool>>.get_Count
	|-List<Type>.get_Count
	|-List<TypeSpec>.get_Count
	|-List<WeakReference>.get_Count
	|-List<WeakReference<EtwSession>>.get_Count
	|-List<AudioSourceExtension>.get_Count
	|-List<Canvas>.get_Count
	|-List<CanvasGroup>.get_Count
	|-List<Component>.get_Count
	|-List<BaseInputModule>.get_Count
	|-List<BaseRaycaster>.get_Count
	|-List<EventSystem>.get_Count
	|-List<EventTrigger.Entry>.get_Count
	|-List<IEventSystemHandler>.get_Count
	|-List<PointerInputModule.ButtonState>.get_Count
	|-List<BaseInvokableCall>.get_Count
	|-List<GUILayoutEntry>.get_Count
	|-List<GameObject>.get_Count
	|-List<RectTransform>.get_Count
	|-List<Sprite>.get_Count
	|-List<Transform>.get_Count
	|-List<Dropdown.DropdownItem>.get_Count
	|-List<Dropdown.OptionData>.get_Count
	|-List<Graphic>.get_Count
	|-List<Image>.get_Count
	|-List<Mask>.get_Count
	|-List<RectMask2D>.get_Count
	|-List<Selectable>.get_Count
	|-List<StencilMaterial.MatEntry>.get_Count
	|-List<Toggle>.get_Count
	|
	|-RVA: 0xDCD Offset: 0xDCD VA: 0xDCD
	|-List<byte>.get_Count
	|
	|-RVA: 0xDF3 Offset: 0xDF3 VA: 0xDF3
	|-List<KeyValuePair<DateTime, object>>.get_Count
	|-List<KeyValuePair<DateTime, TimeType>>.get_Count
	|
	|-RVA: 0xDCC Offset: 0xDCC VA: 0xDCC
	|-List<EventProvider.SessionInfo>.get_Count
	|
	|-RVA: 0xE0F Offset: 0xE0F VA: 0xE0F
	|-List<int>.get_Count
	|
	|-RVA: 0x1102 Offset: 0x1102 VA: 0x1102
	|-List<ulong>.get_Count
	|
	|-RVA: 0xDF8 Offset: 0xDF8 VA: 0xDF8
	|-List<BeforeRenderHelper.OrderBlock>.get_Count
	|
	|-RVA: 0x1119 Offset: 0x1119 VA: 0x1119
	|-List<Color32>.get_Count
	|
	|-RVA: 0xE04 Offset: 0xE04 VA: 0xE04
	|-List<RaycastResult>.get_Count
	|
	|-RVA: 0x1130 Offset: 0x1130 VA: 0x1130
	|-List<UICharInfo>.get_Count
	|
	|-RVA: 0x113C Offset: 0x113C VA: 0x113C
	|-List<UILineInfo>.get_Count
	|
	|-RVA: 0xE0C Offset: 0xE0C VA: 0xE0C
	|-List<UIVertex>.get_Count
	|
	|-RVA: 0xDFB Offset: 0xDFB VA: 0xDFB
	|-List<UnitySynchronizationContext.WorkRequest>.get_Count
	|
	|-RVA: 0x115D Offset: 0x115D VA: 0x115D
	|-List<Vector2>.get_Count
	|
	|-RVA: 0xE0E Offset: 0xE0E VA: 0xE0E
	|-List<Vector3>.get_Count
	|
	|-RVA: 0x1174 Offset: 0x1174 VA: 0x1174
	|-List<Vector4>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 24
	private bool System.Collections.IList.get_IsFixedSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10D7 Offset: 0x10D7 VA: 0x10D7
	|-List<byte>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x10E2 Offset: 0x10E2 VA: 0x10E2
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x10ED Offset: 0x10ED VA: 0x10ED
	|-List<EventProvider.SessionInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x10F8 Offset: 0x10F8 VA: 0x10F8
	|-List<int>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0xD7A Offset: 0xD7A VA: 0xD7A
	|-List<object>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1103 Offset: 0x1103 VA: 0x1103
	|-List<ulong>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x110E Offset: 0x110E VA: 0x110E
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x111A Offset: 0x111A VA: 0x111A
	|-List<Color32>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1125 Offset: 0x1125 VA: 0x1125
	|-List<RaycastResult>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1131 Offset: 0x1131 VA: 0x1131
	|-List<UICharInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x113D Offset: 0x113D VA: 0x113D
	|-List<UILineInfo>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1147 Offset: 0x1147 VA: 0x1147
	|-List<UIVertex>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1152 Offset: 0x1152 VA: 0x1152
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x115E Offset: 0x115E VA: 0x115E
	|-List<Vector2>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1169 Offset: 0x1169 VA: 0x1169
	|-List<Vector3>.System.Collections.IList.get_IsFixedSize
	|
	|-RVA: 0x1175 Offset: 0x1175 VA: 0x1175
	|-List<Vector4>.System.Collections.IList.get_IsFixedSize
	*/

	// RVA: -1 Offset: -1 Slot: 10
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10D8 Offset: 0x10D8 VA: 0x10D8
	|-List<byte>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x10E3 Offset: 0x10E3 VA: 0x10E3
	|-List<KeyValuePair<DateTime, object>>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x10EE Offset: 0x10EE VA: 0x10EE
	|-List<EventProvider.SessionInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x10F9 Offset: 0x10F9 VA: 0x10F9
	|-List<int>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0xD7B Offset: 0xD7B VA: 0xD7B
	|-List<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1104 Offset: 0x1104 VA: 0x1104
	|-List<ulong>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x110F Offset: 0x110F VA: 0x110F
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x111B Offset: 0x111B VA: 0x111B
	|-List<Color32>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1126 Offset: 0x1126 VA: 0x1126
	|-List<RaycastResult>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1132 Offset: 0x1132 VA: 0x1132
	|-List<UICharInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x113E Offset: 0x113E VA: 0x113E
	|-List<UILineInfo>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1148 Offset: 0x1148 VA: 0x1148
	|-List<UIVertex>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1153 Offset: 0x1153 VA: 0x1153
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x115F Offset: 0x115F VA: 0x115F
	|-List<Vector2>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x116A Offset: 0x116A VA: 0x116A
	|-List<Vector3>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	|
	|-RVA: 0x1176 Offset: 0x1176 VA: 0x1176
	|-List<Vector4>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 23
	private bool System.Collections.IList.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10D9 Offset: 0x10D9 VA: 0x10D9
	|-List<byte>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x10E4 Offset: 0x10E4 VA: 0x10E4
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x10EF Offset: 0x10EF VA: 0x10EF
	|-List<EventProvider.SessionInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x10FA Offset: 0x10FA VA: 0x10FA
	|-List<int>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0xD7C Offset: 0xD7C VA: 0xD7C
	|-List<object>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1105 Offset: 0x1105 VA: 0x1105
	|-List<ulong>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1110 Offset: 0x1110 VA: 0x1110
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x111C Offset: 0x111C VA: 0x111C
	|-List<Color32>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1127 Offset: 0x1127 VA: 0x1127
	|-List<RaycastResult>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1133 Offset: 0x1133 VA: 0x1133
	|-List<UICharInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x113F Offset: 0x113F VA: 0x113F
	|-List<UILineInfo>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1149 Offset: 0x1149 VA: 0x1149
	|-List<UIVertex>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1154 Offset: 0x1154 VA: 0x1154
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1160 Offset: 0x1160 VA: 0x1160
	|-List<Vector2>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x116B Offset: 0x116B VA: 0x116B
	|-List<Vector3>.System.Collections.IList.get_IsReadOnly
	|
	|-RVA: 0x1177 Offset: 0x1177 VA: 0x1177
	|-List<Vector4>.System.Collections.IList.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 32
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10DA Offset: 0x10DA VA: 0x10DA
	|-List<byte>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x10E5 Offset: 0x10E5 VA: 0x10E5
	|-List<KeyValuePair<DateTime, object>>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x10F0 Offset: 0x10F0 VA: 0x10F0
	|-List<EventProvider.SessionInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x10FB Offset: 0x10FB VA: 0x10FB
	|-List<int>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0xD7D Offset: 0xD7D VA: 0xD7D
	|-List<object>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1106 Offset: 0x1106 VA: 0x1106
	|-List<ulong>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1111 Offset: 0x1111 VA: 0x1111
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x111D Offset: 0x111D VA: 0x111D
	|-List<Color32>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1128 Offset: 0x1128 VA: 0x1128
	|-List<RaycastResult>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1134 Offset: 0x1134 VA: 0x1134
	|-List<UICharInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1140 Offset: 0x1140 VA: 0x1140
	|-List<UILineInfo>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x114A Offset: 0x114A VA: 0x114A
	|-List<UIVertex>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1155 Offset: 0x1155 VA: 0x1155
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1161 Offset: 0x1161 VA: 0x1161
	|-List<Vector2>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x116C Offset: 0x116C VA: 0x116C
	|-List<Vector3>.System.Collections.ICollection.get_IsSynchronized
	|
	|-RVA: 0x1178 Offset: 0x1178 VA: 0x1178
	|-List<Vector4>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 31
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10DB Offset: 0x10DB VA: 0x10DB
	|-List<byte>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x10E6 Offset: 0x10E6 VA: 0x10E6
	|-List<KeyValuePair<DateTime, object>>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x10F1 Offset: 0x10F1 VA: 0x10F1
	|-List<EventProvider.SessionInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x10FC Offset: 0x10FC VA: 0x10FC
	|-List<int>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0xD7E Offset: 0xD7E VA: 0xD7E
	|-List<object>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1107 Offset: 0x1107 VA: 0x1107
	|-List<ulong>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1112 Offset: 0x1112 VA: 0x1112
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x111E Offset: 0x111E VA: 0x111E
	|-List<Color32>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1129 Offset: 0x1129 VA: 0x1129
	|-List<RaycastResult>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1135 Offset: 0x1135 VA: 0x1135
	|-List<UICharInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1141 Offset: 0x1141 VA: 0x1141
	|-List<UILineInfo>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x114B Offset: 0x114B VA: 0x114B
	|-List<UIVertex>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1156 Offset: 0x1156 VA: 0x1156
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1162 Offset: 0x1162 VA: 0x1162
	|-List<Vector2>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x116D Offset: 0x116D VA: 0x116D
	|-List<Vector3>.System.Collections.ICollection.get_SyncRoot
	|
	|-RVA: 0x1179 Offset: 0x1179 VA: 0x1179
	|-List<Vector4>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 33
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x679 Offset: 0x679 VA: 0x679
	|-List<AudioSourceExtension>.get_Item
	|-List<Canvas>.get_Item
	|-List<CanvasGroup>.get_Item
	|-List<Component>.get_Item
	|-List<BaseInputModule>.get_Item
	|-List<BaseRaycaster>.get_Item
	|-List<EventSystem>.get_Item
	|-List<EventTrigger.Entry>.get_Item
	|-List<IEventSystemHandler>.get_Item
	|-List<PointerInputModule.ButtonState>.get_Item
	|-List<BaseInvokableCall>.get_Item
	|-List<GUILayoutEntry>.get_Item
	|-List<GameObject>.get_Item
	|-List<RectTransform>.get_Item
	|-List<Sprite>.get_Item
	|-List<Transform>.get_Item
	|-List<Dropdown.DropdownItem>.get_Item
	|-List<Dropdown.OptionData>.get_Item
	|-List<Graphic>.get_Item
	|-List<Image>.get_Item
	|-List<Mask>.get_Item
	|-List<RectMask2D>.get_Item
	|-List<Selectable>.get_Item
	|-List<StencilMaterial.MatEntry>.get_Item
	|-List<Toggle>.get_Item
	|-List<AggregateException>.get_Item
	|-List<Directory.SearchData>.get_Item
	|-List<LocalDataStore>.get_Item
	|-List<object>.get_Item
	|-List<ExceptionDispatchInfo>.get_Item
	|-List<IContextProperty>.get_Item
	|-List<string>.get_Item
	|-List<Timer>.get_Item
	|-List<Type>.get_Item
	|-List<TypeSpec>.get_Item
	|-List<WeakReference>.get_Item
	|
	|-RVA: 0x46F Offset: 0x46F VA: 0x46F
	|-List<BeforeRenderHelper.OrderBlock>.get_Item
	|
	|-RVA: 0x485 Offset: 0x485 VA: 0x485
	|-List<Color32>.get_Item
	|
	|-RVA: 0x477 Offset: 0x477 VA: 0x477
	|-List<RaycastResult>.get_Item
	|
	|-RVA: 0x482 Offset: 0x482 VA: 0x482
	|-List<UIVertex>.get_Item
	|
	|-RVA: 0x486 Offset: 0x486 VA: 0x486
	|-List<Vector2>.get_Item
	|
	|-RVA: 0x484 Offset: 0x484 VA: 0x484
	|-List<Vector3>.get_Item
	|
	|-RVA: 0x487 Offset: 0x487 VA: 0x487
	|-List<Vector4>.get_Item
	|
	|-RVA: 0x7FF Offset: 0x7FF VA: 0x7FF
	|-List<byte>.get_Item
	|
	|-RVA: 0x46A Offset: 0x46A VA: 0x46A
	|-List<KeyValuePair<DateTime, object>>.get_Item
	|-List<KeyValuePair<DateTime, TimeType>>.get_Item
	|
	|-RVA: 0x45B Offset: 0x45B VA: 0x45B
	|-List<EventProvider.SessionInfo>.get_Item
	|
	|-RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	|-List<int>.get_Item
	|
	|-RVA: 0x66 Offset: 0x66 VA: 0x66
	|-List<ulong>.get_Item
	|
	|-RVA: 0x676 Offset: 0x676 VA: 0x676
	|-List<UICharInfo>.get_Item
	|
	|-RVA: 0x681 Offset: 0x681 VA: 0x681
	|-List<UILineInfo>.get_Item
	|
	|-RVA: 0x695 Offset: 0x695 VA: 0x695
	|-List<UnitySynchronizationContext.WorkRequest>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x45C Offset: 0x45C VA: 0x45C
	|-List<byte>.set_Item
	|
	|-RVA: 0x635 Offset: 0x635 VA: 0x635
	|-List<KeyValuePair<DateTime, object>>.set_Item
	|
	|-RVA: 0x63F Offset: 0x63F VA: 0x63F
	|-List<EventProvider.SessionInfo>.set_Item
	|
	|-RVA: 0x649 Offset: 0x649 VA: 0x649
	|-List<int>.set_Item
	|
	|-RVA: 0x41B Offset: 0x41B VA: 0x41B
	|-List<object>.set_Item
	|-List<AudioSourceExtension>.set_Item
	|
	|-RVA: 0x17 Offset: 0x17 VA: 0x17
	|-List<ulong>.set_Item
	|
	|-RVA: 0x659 Offset: 0x659 VA: 0x659
	|-List<BeforeRenderHelper.OrderBlock>.set_Item
	|
	|-RVA: 0x489 Offset: 0x489 VA: 0x489
	|-List<Color32>.set_Item
	|
	|-RVA: 0x66C Offset: 0x66C VA: 0x66C
	|-List<RaycastResult>.set_Item
	|
	|-RVA: 0x677 Offset: 0x677 VA: 0x677
	|-List<UICharInfo>.set_Item
	|
	|-RVA: 0x682 Offset: 0x682 VA: 0x682
	|-List<UILineInfo>.set_Item
	|
	|-RVA: 0x483 Offset: 0x483 VA: 0x483
	|-List<UIVertex>.set_Item
	|
	|-RVA: 0x696 Offset: 0x696 VA: 0x696
	|-List<UnitySynchronizationContext.WorkRequest>.set_Item
	|
	|-RVA: 0x48A Offset: 0x48A VA: 0x48A
	|-List<Vector2>.set_Item
	|
	|-RVA: 0x488 Offset: 0x488 VA: 0x488
	|-List<Vector3>.set_Item
	|
	|-RVA: 0x48B Offset: 0x48B VA: 0x48B
	|-List<Vector4>.set_Item
	*/

	// RVA: -1 Offset: -1
	private static bool IsCompatibleObject(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10DC Offset: 0x10DC VA: 0x10DC
	|-List<byte>.IsCompatibleObject
	|
	|-RVA: 0x10E7 Offset: 0x10E7 VA: 0x10E7
	|-List<KeyValuePair<DateTime, object>>.IsCompatibleObject
	|
	|-RVA: 0x10F2 Offset: 0x10F2 VA: 0x10F2
	|-List<EventProvider.SessionInfo>.IsCompatibleObject
	|
	|-RVA: 0x10FD Offset: 0x10FD VA: 0x10FD
	|-List<int>.IsCompatibleObject
	|
	|-RVA: 0xD7F Offset: 0xD7F VA: 0xD7F
	|-List<object>.IsCompatibleObject
	|
	|-RVA: 0x1108 Offset: 0x1108 VA: 0x1108
	|-List<ulong>.IsCompatibleObject
	|
	|-RVA: 0x1113 Offset: 0x1113 VA: 0x1113
	|-List<BeforeRenderHelper.OrderBlock>.IsCompatibleObject
	|
	|-RVA: 0x111F Offset: 0x111F VA: 0x111F
	|-List<Color32>.IsCompatibleObject
	|
	|-RVA: 0x112A Offset: 0x112A VA: 0x112A
	|-List<RaycastResult>.IsCompatibleObject
	|
	|-RVA: 0x1136 Offset: 0x1136 VA: 0x1136
	|-List<UICharInfo>.IsCompatibleObject
	|
	|-RVA: 0x1142 Offset: 0x1142 VA: 0x1142
	|-List<UILineInfo>.IsCompatibleObject
	|
	|-RVA: 0x114C Offset: 0x114C VA: 0x114C
	|-List<UIVertex>.IsCompatibleObject
	|
	|-RVA: 0x1157 Offset: 0x1157 VA: 0x1157
	|-List<UnitySynchronizationContext.WorkRequest>.IsCompatibleObject
	|
	|-RVA: 0x1163 Offset: 0x1163 VA: 0x1163
	|-List<Vector2>.IsCompatibleObject
	|
	|-RVA: 0x116E Offset: 0x116E VA: 0x116E
	|-List<Vector3>.IsCompatibleObject
	|
	|-RVA: 0x117A Offset: 0x117A VA: 0x117A
	|-List<Vector4>.IsCompatibleObject
	*/

	// RVA: -1 Offset: -1 Slot: 18
	private object System.Collections.IList.get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x800 Offset: 0x800 VA: 0x800
	|-List<byte>.System.Collections.IList.get_Item
	|
	|-RVA: 0x809 Offset: 0x809 VA: 0x809
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.get_Item
	|
	|-RVA: 0x811 Offset: 0x811 VA: 0x811
	|-List<EventProvider.SessionInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x819 Offset: 0x819 VA: 0x819
	|-List<int>.System.Collections.IList.get_Item
	|
	|-RVA: 0x67A Offset: 0x67A VA: 0x67A
	|-List<object>.System.Collections.IList.get_Item
	|
	|-RVA: 0x821 Offset: 0x821 VA: 0x821
	|-List<ulong>.System.Collections.IList.get_Item
	|
	|-RVA: 0x826 Offset: 0x826 VA: 0x826
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.get_Item
	|
	|-RVA: 0x82E Offset: 0x82E VA: 0x82E
	|-List<Color32>.System.Collections.IList.get_Item
	|
	|-RVA: 0x836 Offset: 0x836 VA: 0x836
	|-List<RaycastResult>.System.Collections.IList.get_Item
	|
	|-RVA: 0x83E Offset: 0x83E VA: 0x83E
	|-List<UICharInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x846 Offset: 0x846 VA: 0x846
	|-List<UILineInfo>.System.Collections.IList.get_Item
	|
	|-RVA: 0x84E Offset: 0x84E VA: 0x84E
	|-List<UIVertex>.System.Collections.IList.get_Item
	|
	|-RVA: 0x856 Offset: 0x856 VA: 0x856
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.get_Item
	|
	|-RVA: 0x85E Offset: 0x85E VA: 0x85E
	|-List<Vector2>.System.Collections.IList.get_Item
	|
	|-RVA: 0x866 Offset: 0x866 VA: 0x866
	|-List<Vector3>.System.Collections.IList.get_Item
	|
	|-RVA: 0x86E Offset: 0x86E VA: 0x86E
	|-List<Vector4>.System.Collections.IList.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 19
	private void System.Collections.IList.set_Item(int index, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x62D Offset: 0x62D VA: 0x62D
	|-List<byte>.System.Collections.IList.set_Item
	|
	|-RVA: 0x636 Offset: 0x636 VA: 0x636
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.set_Item
	|
	|-RVA: 0x640 Offset: 0x640 VA: 0x640
	|-List<EventProvider.SessionInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x64A Offset: 0x64A VA: 0x64A
	|-List<int>.System.Collections.IList.set_Item
	|
	|-RVA: 0x41C Offset: 0x41C VA: 0x41C
	|-List<object>.System.Collections.IList.set_Item
	|
	|-RVA: 0x652 Offset: 0x652 VA: 0x652
	|-List<ulong>.System.Collections.IList.set_Item
	|
	|-RVA: 0x65A Offset: 0x65A VA: 0x65A
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.set_Item
	|
	|-RVA: 0x663 Offset: 0x663 VA: 0x663
	|-List<Color32>.System.Collections.IList.set_Item
	|
	|-RVA: 0x66D Offset: 0x66D VA: 0x66D
	|-List<RaycastResult>.System.Collections.IList.set_Item
	|
	|-RVA: 0x678 Offset: 0x678 VA: 0x678
	|-List<UICharInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x683 Offset: 0x683 VA: 0x683
	|-List<UILineInfo>.System.Collections.IList.set_Item
	|
	|-RVA: 0x68C Offset: 0x68C VA: 0x68C
	|-List<UIVertex>.System.Collections.IList.set_Item
	|
	|-RVA: 0x697 Offset: 0x697 VA: 0x697
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6A0 Offset: 0x6A0 VA: 0x6A0
	|-List<Vector2>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9
	|-List<Vector3>.System.Collections.IList.set_Item
	|
	|-RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	|-List<Vector4>.System.Collections.IList.set_Item
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x824 Offset: 0x824 VA: 0x824
	|-List<Contraction>.Add
	|-List<Level2Map>.Add
	|-List<AggregateException>.Add
	|-List<StackFrame>.Add
	|-List<EtwSession>.Add
	|-List<FieldMetadata>.Add
	|-List<PropertyAnalysis>.Add
	|-List<Exception>.Add
	|-List<CultureInfo>.Add
	|-List<Directory.SearchData>.Add
	|-List<LocalDataStore>.Add
	|-List<ModifierSpec>.Add
	|-List<object>.Add
	|-List<MethodBase>.Add
	|-List<MethodInfo>.Add
	|-List<Module>.Add
	|-List<ExceptionDispatchInfo>.Add
	|-List<IContextProperty>.Add
	|-List<SerializationFieldInfo>.Add
	|-List<string>.Add
	|-List<IAsyncLocal>.Add
	|-List<Task>.Add
	|-List<Timer>.Add
	|-List<TimeZoneInfo.AdjustmentRule>.Add
	|-List<TimeZoneInfo>.Add
	|-List<Tuple<EventProvider.SessionInfo, bool>>.Add
	|-List<Type>.Add
	|-List<TypeIdentifier>.Add
	|-List<TypeSpec>.Add
	|-List<WeakReference>.Add
	|-List<WeakReference<EtwSession>>.Add
	|-List<AudioSourceExtension>.Add
	|-List<BaseRaycaster>.Add
	|-List<EventSystem>.Add
	|-List<PointerInputModule.ButtonState>.Add
	|-List<BaseInvokableCall>.Add
	|-List<GameObject>.Add
	|-List<PlayerEditorConnectionEvents.MessageTypeSubscribers>.Add
	|-List<RectTransform>.Add
	|-List<Dropdown.DropdownItem>.Add
	|-List<Dropdown.OptionData>.Add
	|-List<Graphic>.Add
	|-List<Image>.Add
	|-List<RectMask2D>.Add
	|-List<Selectable>.Add
	|-List<StencilMaterial.MatEntry>.Add
	|-List<Toggle>.Add
	|
	|-RVA: 0x864 Offset: 0x864 VA: 0x864
	|-List<byte>.Add
	|
	|-RVA: 0x878 Offset: 0x878 VA: 0x878
	|-List<KeyValuePair<DateTime, object>>.Add
	|-List<KeyValuePair<DateTime, TimeType>>.Add
	|
	|-RVA: 0x860 Offset: 0x860 VA: 0x860
	|-List<EventProvider.SessionInfo>.Add
	|
	|-RVA: 0x862 Offset: 0x862 VA: 0x862
	|-List<int>.Add
	|
	|-RVA: 0x26 Offset: 0x26 VA: 0x26
	|-List<ulong>.Add
	|
	|-RVA: 0xA2D Offset: 0xA2D VA: 0xA2D
	|-List<BeforeRenderHelper.OrderBlock>.Add
	|
	|-RVA: 0x89F Offset: 0x89F VA: 0x89F
	|-List<Color32>.Add
	|
	|-RVA: 0x887 Offset: 0x887 VA: 0x887
	|-List<RaycastResult>.Add
	|
	|-RVA: 0xA4C Offset: 0xA4C VA: 0xA4C
	|-List<UICharInfo>.Add
	|
	|-RVA: 0xA57 Offset: 0xA57 VA: 0xA57
	|-List<UILineInfo>.Add
	|
	|-RVA: 0x898 Offset: 0x898 VA: 0x898
	|-List<UIVertex>.Add
	|
	|-RVA: 0x87F Offset: 0x87F VA: 0x87F
	|-List<UnitySynchronizationContext.WorkRequest>.Add
	|
	|-RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
	|-List<Vector2>.Add
	|
	|-RVA: 0x89E Offset: 0x89E VA: 0x89E
	|-List<Vector3>.Add
	|
	|-RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
	|-List<Vector4>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 20
	private int System.Collections.IList.Add(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x801 Offset: 0x801 VA: 0x801
	|-List<byte>.System.Collections.IList.Add
	|
	|-RVA: 0x80A Offset: 0x80A VA: 0x80A
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.Add
	|
	|-RVA: 0x812 Offset: 0x812 VA: 0x812
	|-List<EventProvider.SessionInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x81A Offset: 0x81A VA: 0x81A
	|-List<int>.System.Collections.IList.Add
	|
	|-RVA: 0x67B Offset: 0x67B VA: 0x67B
	|-List<object>.System.Collections.IList.Add
	|
	|-RVA: 0x822 Offset: 0x822 VA: 0x822
	|-List<ulong>.System.Collections.IList.Add
	|
	|-RVA: 0x827 Offset: 0x827 VA: 0x827
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Add
	|
	|-RVA: 0x82F Offset: 0x82F VA: 0x82F
	|-List<Color32>.System.Collections.IList.Add
	|
	|-RVA: 0x837 Offset: 0x837 VA: 0x837
	|-List<RaycastResult>.System.Collections.IList.Add
	|
	|-RVA: 0x83F Offset: 0x83F VA: 0x83F
	|-List<UICharInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x847 Offset: 0x847 VA: 0x847
	|-List<UILineInfo>.System.Collections.IList.Add
	|
	|-RVA: 0x84F Offset: 0x84F VA: 0x84F
	|-List<UIVertex>.System.Collections.IList.Add
	|
	|-RVA: 0x857 Offset: 0x857 VA: 0x857
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Add
	|
	|-RVA: 0x85F Offset: 0x85F VA: 0x85F
	|-List<Vector2>.System.Collections.IList.Add
	|
	|-RVA: 0x867 Offset: 0x867 VA: 0x867
	|-List<Vector3>.System.Collections.IList.Add
	|
	|-RVA: 0x86F Offset: 0x86F VA: 0x86F
	|-List<Vector4>.System.Collections.IList.Add
	*/

	// RVA: -1 Offset: -1
	public void AddRange(IEnumerable<T> collection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x866 Offset: 0x866 VA: 0x866
	|-List<byte>.AddRange
	|
	|-RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	|-List<KeyValuePair<DateTime, object>>.AddRange
	|
	|-RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	|-List<EventProvider.SessionInfo>.AddRange
	|
	|-RVA: 0x89D Offset: 0x89D VA: 0x89D
	|-List<int>.AddRange
	|
	|-RVA: 0x825 Offset: 0x825 VA: 0x825
	|-List<object>.AddRange
	|-List<ExceptionDispatchInfo>.AddRange
	|-List<TimeZoneInfo.AdjustmentRule>.AddRange
	|-List<TimeZoneInfo>.AddRange
	|-List<BaseInvokableCall>.AddRange
	|-List<Dropdown.OptionData>.AddRange
	|
	|-RVA: 0xA23 Offset: 0xA23 VA: 0xA23
	|-List<ulong>.AddRange
	|
	|-RVA: 0xA2E Offset: 0xA2E VA: 0xA2E
	|-List<BeforeRenderHelper.OrderBlock>.AddRange
	|
	|-RVA: 0x89A Offset: 0x89A VA: 0x89A
	|-List<Color32>.AddRange
	|
	|-RVA: 0xA43 Offset: 0xA43 VA: 0xA43
	|-List<RaycastResult>.AddRange
	|
	|-RVA: 0xA4D Offset: 0xA4D VA: 0xA4D
	|-List<UICharInfo>.AddRange
	|
	|-RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	|-List<UILineInfo>.AddRange
	|
	|-RVA: 0xA61 Offset: 0xA61 VA: 0xA61
	|-List<UIVertex>.AddRange
	|
	|-RVA: 0x880 Offset: 0x880 VA: 0x880
	|-List<UnitySynchronizationContext.WorkRequest>.AddRange
	|
	|-RVA: 0x89B Offset: 0x89B VA: 0x89B
	|-List<Vector2>.AddRange
	|
	|-RVA: 0x899 Offset: 0x899 VA: 0x899
	|-List<Vector3>.AddRange
	|
	|-RVA: 0x89C Offset: 0x89C VA: 0x89C
	|-List<Vector4>.AddRange
	*/

	// RVA: -1 Offset: -1
	public ReadOnlyCollection<T> AsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10DD Offset: 0x10DD VA: 0x10DD
	|-List<byte>.AsReadOnly
	|
	|-RVA: 0x10E8 Offset: 0x10E8 VA: 0x10E8
	|-List<KeyValuePair<DateTime, object>>.AsReadOnly
	|
	|-RVA: 0x10F3 Offset: 0x10F3 VA: 0x10F3
	|-List<EventProvider.SessionInfo>.AsReadOnly
	|
	|-RVA: 0x10FE Offset: 0x10FE VA: 0x10FE
	|-List<int>.AsReadOnly
	|
	|-RVA: 0xD80 Offset: 0xD80 VA: 0xD80
	|-List<object>.AsReadOnly
	|
	|-RVA: 0x1109 Offset: 0x1109 VA: 0x1109
	|-List<ulong>.AsReadOnly
	|
	|-RVA: 0x1114 Offset: 0x1114 VA: 0x1114
	|-List<BeforeRenderHelper.OrderBlock>.AsReadOnly
	|
	|-RVA: 0x1120 Offset: 0x1120 VA: 0x1120
	|-List<Color32>.AsReadOnly
	|
	|-RVA: 0x112B Offset: 0x112B VA: 0x112B
	|-List<RaycastResult>.AsReadOnly
	|
	|-RVA: 0x1137 Offset: 0x1137 VA: 0x1137
	|-List<UICharInfo>.AsReadOnly
	|
	|-RVA: 0x1143 Offset: 0x1143 VA: 0x1143
	|-List<UILineInfo>.AsReadOnly
	|
	|-RVA: 0x114D Offset: 0x114D VA: 0x114D
	|-List<UIVertex>.AsReadOnly
	|
	|-RVA: 0x1158 Offset: 0x1158 VA: 0x1158
	|-List<UnitySynchronizationContext.WorkRequest>.AsReadOnly
	|
	|-RVA: 0x1164 Offset: 0x1164 VA: 0x1164
	|-List<Vector2>.AsReadOnly
	|
	|-RVA: 0x116F Offset: 0x116F VA: 0x116F
	|-List<Vector3>.AsReadOnly
	|
	|-RVA: 0x117B Offset: 0x117B VA: 0x117B
	|-List<Vector4>.AsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 22
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA80 Offset: 0xA80 VA: 0xA80
	|-List<byte>.Clear
	|
	|-RVA: 0xA85 Offset: 0xA85 VA: 0xA85
	|-List<KeyValuePair<DateTime, object>>.Clear
	|
	|-RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8
	|-List<EtwSession>.Clear
	|-List<object>.Clear
	|-List<string>.Clear
	|-List<Timer>.Clear
	|-List<IEventSystemHandler>.Clear
	|-List<BaseInvokableCall>.Clear
	|-List<GameObject>.Clear
	|-List<RectTransform>.Clear
	|-List<Dropdown.DropdownItem>.Clear
	|-List<Dropdown.OptionData>.Clear
	|-List<Graphic>.Clear
	|-List<RectMask2D>.Clear
	|-List<StencilMaterial.MatEntry>.Clear
	|
	|-RVA: 0xA8A Offset: 0xA8A VA: 0xA8A
	|-List<EventProvider.SessionInfo>.Clear
	|
	|-RVA: 0x94D Offset: 0x94D VA: 0x94D
	|-List<int>.Clear
	|
	|-RVA: 0xA91 Offset: 0xA91 VA: 0xA91
	|-List<ulong>.Clear
	|
	|-RVA: 0xA94 Offset: 0xA94 VA: 0xA94
	|-List<BeforeRenderHelper.OrderBlock>.Clear
	|
	|-RVA: 0x94A Offset: 0x94A VA: 0x94A
	|-List<Color32>.Clear
	|
	|-RVA: 0x938 Offset: 0x938 VA: 0x938
	|-List<RaycastResult>.Clear
	|
	|-RVA: 0xAA0 Offset: 0xAA0 VA: 0xAA0
	|-List<UICharInfo>.Clear
	|
	|-RVA: 0xAA5 Offset: 0xAA5 VA: 0xAA5
	|-List<UILineInfo>.Clear
	|
	|-RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	|-List<UIVertex>.Clear
	|
	|-RVA: 0x935 Offset: 0x935 VA: 0x935
	|-List<UnitySynchronizationContext.WorkRequest>.Clear
	|
	|-RVA: 0x94B Offset: 0x94B VA: 0x94B
	|-List<Vector2>.Clear
	|
	|-RVA: 0x949 Offset: 0x949 VA: 0x949
	|-List<Vector3>.Clear
	|
	|-RVA: 0x94C Offset: 0x94C VA: 0x94C
	|-List<Vector4>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x802 Offset: 0x802 VA: 0x802
	|-List<byte>.Contains
	|
	|-RVA: 0x80B Offset: 0x80B VA: 0x80B
	|-List<KeyValuePair<DateTime, object>>.Contains
	|
	|-RVA: 0x67C Offset: 0x67C VA: 0x67C
	|-List<EtwSession>.Contains
	|-List<CultureInfo>.Contains
	|-List<object>.Contains
	|-List<string>.Contains
	|-List<Type>.Contains
	|-List<BaseRaycaster>.Contains
	|-List<BaseInvokableCall>.Contains
	|-List<Toggle>.Contains
	|
	|-RVA: 0x813 Offset: 0x813 VA: 0x813
	|-List<EventProvider.SessionInfo>.Contains
	|
	|-RVA: 0x81B Offset: 0x81B VA: 0x81B
	|-List<int>.Contains
	|
	|-RVA: 0x21 Offset: 0x21 VA: 0x21
	|-List<ulong>.Contains
	|
	|-RVA: 0x828 Offset: 0x828 VA: 0x828
	|-List<BeforeRenderHelper.OrderBlock>.Contains
	|
	|-RVA: 0x830 Offset: 0x830 VA: 0x830
	|-List<Color32>.Contains
	|
	|-RVA: 0x838 Offset: 0x838 VA: 0x838
	|-List<RaycastResult>.Contains
	|
	|-RVA: 0x840 Offset: 0x840 VA: 0x840
	|-List<UICharInfo>.Contains
	|
	|-RVA: 0x848 Offset: 0x848 VA: 0x848
	|-List<UILineInfo>.Contains
	|
	|-RVA: 0x850 Offset: 0x850 VA: 0x850
	|-List<UIVertex>.Contains
	|
	|-RVA: 0x858 Offset: 0x858 VA: 0x858
	|-List<UnitySynchronizationContext.WorkRequest>.Contains
	|
	|-RVA: 0x860 Offset: 0x860 VA: 0x860
	|-List<Vector2>.Contains
	|
	|-RVA: 0x868 Offset: 0x868 VA: 0x868
	|-List<Vector3>.Contains
	|
	|-RVA: 0x870 Offset: 0x870 VA: 0x870
	|-List<Vector4>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 21
	private bool System.Collections.IList.Contains(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x803 Offset: 0x803 VA: 0x803
	|-List<byte>.System.Collections.IList.Contains
	|
	|-RVA: 0x80C Offset: 0x80C VA: 0x80C
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.Contains
	|
	|-RVA: 0x814 Offset: 0x814 VA: 0x814
	|-List<EventProvider.SessionInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x81C Offset: 0x81C VA: 0x81C
	|-List<int>.System.Collections.IList.Contains
	|
	|-RVA: 0x67D Offset: 0x67D VA: 0x67D
	|-List<object>.System.Collections.IList.Contains
	|
	|-RVA: 0x823 Offset: 0x823 VA: 0x823
	|-List<ulong>.System.Collections.IList.Contains
	|
	|-RVA: 0x829 Offset: 0x829 VA: 0x829
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Contains
	|
	|-RVA: 0x831 Offset: 0x831 VA: 0x831
	|-List<Color32>.System.Collections.IList.Contains
	|
	|-RVA: 0x839 Offset: 0x839 VA: 0x839
	|-List<RaycastResult>.System.Collections.IList.Contains
	|
	|-RVA: 0x841 Offset: 0x841 VA: 0x841
	|-List<UICharInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x849 Offset: 0x849 VA: 0x849
	|-List<UILineInfo>.System.Collections.IList.Contains
	|
	|-RVA: 0x851 Offset: 0x851 VA: 0x851
	|-List<UIVertex>.System.Collections.IList.Contains
	|
	|-RVA: 0x859 Offset: 0x859 VA: 0x859
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Contains
	|
	|-RVA: 0x861 Offset: 0x861 VA: 0x861
	|-List<Vector2>.System.Collections.IList.Contains
	|
	|-RVA: 0x869 Offset: 0x869 VA: 0x869
	|-List<Vector3>.System.Collections.IList.Contains
	|
	|-RVA: 0x871 Offset: 0x871 VA: 0x871
	|-List<Vector4>.System.Collections.IList.Contains
	*/

	// RVA: -1 Offset: -1
	public void CopyTo(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	|-List<byte>.CopyTo
	|
	|-RVA: 0xA0A Offset: 0xA0A VA: 0xA0A
	|-List<KeyValuePair<DateTime, object>>.CopyTo
	|
	|-RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	|-List<EventProvider.SessionInfo>.CopyTo
	|
	|-RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	|-List<int>.CopyTo
	|
	|-RVA: 0x826 Offset: 0x826 VA: 0x826
	|-List<object>.CopyTo
	|-List<MethodBase>.CopyTo
	|-List<MethodInfo>.CopyTo
	|
	|-RVA: 0xA24 Offset: 0xA24 VA: 0xA24
	|-List<ulong>.CopyTo
	|
	|-RVA: 0xA2F Offset: 0xA2F VA: 0xA2F
	|-List<BeforeRenderHelper.OrderBlock>.CopyTo
	|
	|-RVA: 0xA39 Offset: 0xA39 VA: 0xA39
	|-List<Color32>.CopyTo
	|
	|-RVA: 0xA44 Offset: 0xA44 VA: 0xA44
	|-List<RaycastResult>.CopyTo
	|
	|-RVA: 0xA4E Offset: 0xA4E VA: 0xA4E
	|-List<UICharInfo>.CopyTo
	|
	|-RVA: 0xA59 Offset: 0xA59 VA: 0xA59
	|-List<UILineInfo>.CopyTo
	|
	|-RVA: 0xA62 Offset: 0xA62 VA: 0xA62
	|-List<UIVertex>.CopyTo
	|
	|-RVA: 0xA6B Offset: 0xA6B VA: 0xA6B
	|-List<UnitySynchronizationContext.WorkRequest>.CopyTo
	|
	|-RVA: 0xA74 Offset: 0xA74 VA: 0xA74
	|-List<Vector2>.CopyTo
	|
	|-RVA: 0xA7E Offset: 0xA7E VA: 0xA7E
	|-List<Vector3>.CopyTo
	|
	|-RVA: 0xA88 Offset: 0xA88 VA: 0xA88
	|-List<Vector4>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 29
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x62E Offset: 0x62E VA: 0x62E
	|-List<byte>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x637 Offset: 0x637 VA: 0x637
	|-List<KeyValuePair<DateTime, object>>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x641 Offset: 0x641 VA: 0x641
	|-List<EventProvider.SessionInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x64B Offset: 0x64B VA: 0x64B
	|-List<int>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x41D Offset: 0x41D VA: 0x41D
	|-List<object>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x653 Offset: 0x653 VA: 0x653
	|-List<ulong>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x65B Offset: 0x65B VA: 0x65B
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x664 Offset: 0x664 VA: 0x664
	|-List<Color32>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x66E Offset: 0x66E VA: 0x66E
	|-List<RaycastResult>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x679 Offset: 0x679 VA: 0x679
	|-List<UICharInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x684 Offset: 0x684 VA: 0x684
	|-List<UILineInfo>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x68D Offset: 0x68D VA: 0x68D
	|-List<UIVertex>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x698 Offset: 0x698 VA: 0x698
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6A1 Offset: 0x6A1 VA: 0x6A1
	|-List<Vector2>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6AA Offset: 0x6AA VA: 0x6AA
	|-List<Vector3>.System.Collections.ICollection.CopyTo
	|
	|-RVA: 0x6B3 Offset: 0x6B3 VA: 0x6B3
	|-List<Vector4>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public void CopyTo(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x62F Offset: 0x62F VA: 0x62F
	|-List<byte>.CopyTo
	|
	|-RVA: 0x638 Offset: 0x638 VA: 0x638
	|-List<KeyValuePair<DateTime, object>>.CopyTo
	|
	|-RVA: 0x642 Offset: 0x642 VA: 0x642
	|-List<EventProvider.SessionInfo>.CopyTo
	|
	|-RVA: 0x64C Offset: 0x64C VA: 0x64C
	|-List<int>.CopyTo
	|
	|-RVA: 0x41E Offset: 0x41E VA: 0x41E
	|-List<object>.CopyTo
	|
	|-RVA: 0x654 Offset: 0x654 VA: 0x654
	|-List<ulong>.CopyTo
	|
	|-RVA: 0x65C Offset: 0x65C VA: 0x65C
	|-List<BeforeRenderHelper.OrderBlock>.CopyTo
	|
	|-RVA: 0x665 Offset: 0x665 VA: 0x665
	|-List<Color32>.CopyTo
	|
	|-RVA: 0x66F Offset: 0x66F VA: 0x66F
	|-List<RaycastResult>.CopyTo
	|
	|-RVA: 0x67A Offset: 0x67A VA: 0x67A
	|-List<UICharInfo>.CopyTo
	|
	|-RVA: 0x685 Offset: 0x685 VA: 0x685
	|-List<UILineInfo>.CopyTo
	|
	|-RVA: 0x68E Offset: 0x68E VA: 0x68E
	|-List<UIVertex>.CopyTo
	|
	|-RVA: 0x699 Offset: 0x699 VA: 0x699
	|-List<UnitySynchronizationContext.WorkRequest>.CopyTo
	|
	|-RVA: 0x6A2 Offset: 0x6A2 VA: 0x6A2
	|-List<Vector2>.CopyTo
	|
	|-RVA: 0x6AB Offset: 0x6AB VA: 0x6AB
	|-List<Vector3>.CopyTo
	|
	|-RVA: 0x6B4 Offset: 0x6B4 VA: 0x6B4
	|-List<Vector4>.CopyTo
	*/

	// RVA: -1 Offset: -1
	private void EnsureCapacity(int min) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	|-List<byte>.EnsureCapacity
	|
	|-RVA: 0xA0B Offset: 0xA0B VA: 0xA0B
	|-List<KeyValuePair<DateTime, object>>.EnsureCapacity
	|
	|-RVA: 0xA15 Offset: 0xA15 VA: 0xA15
	|-List<EventProvider.SessionInfo>.EnsureCapacity
	|
	|-RVA: 0xA1C Offset: 0xA1C VA: 0xA1C
	|-List<int>.EnsureCapacity
	|
	|-RVA: 0x827 Offset: 0x827 VA: 0x827
	|-List<object>.EnsureCapacity
	|
	|-RVA: 0xA25 Offset: 0xA25 VA: 0xA25
	|-List<ulong>.EnsureCapacity
	|
	|-RVA: 0xA30 Offset: 0xA30 VA: 0xA30
	|-List<BeforeRenderHelper.OrderBlock>.EnsureCapacity
	|
	|-RVA: 0xA3A Offset: 0xA3A VA: 0xA3A
	|-List<Color32>.EnsureCapacity
	|
	|-RVA: 0xA45 Offset: 0xA45 VA: 0xA45
	|-List<RaycastResult>.EnsureCapacity
	|
	|-RVA: 0xA4F Offset: 0xA4F VA: 0xA4F
	|-List<UICharInfo>.EnsureCapacity
	|
	|-RVA: 0xA5A Offset: 0xA5A VA: 0xA5A
	|-List<UILineInfo>.EnsureCapacity
	|
	|-RVA: 0xA63 Offset: 0xA63 VA: 0xA63
	|-List<UIVertex>.EnsureCapacity
	|
	|-RVA: 0xA6C Offset: 0xA6C VA: 0xA6C
	|-List<UnitySynchronizationContext.WorkRequest>.EnsureCapacity
	|
	|-RVA: 0xA75 Offset: 0xA75 VA: 0xA75
	|-List<Vector2>.EnsureCapacity
	|
	|-RVA: 0xA7F Offset: 0xA7F VA: 0xA7F
	|-List<Vector3>.EnsureCapacity
	|
	|-RVA: 0xA89 Offset: 0xA89 VA: 0xA89
	|-List<Vector4>.EnsureCapacity
	*/

	// RVA: -1 Offset: -1
	public T Find(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x67E Offset: 0x67E VA: 0x67E
	|-List<Toggle>.Find
	|-List<object>.Find
	|
	|-RVA: 0x804 Offset: 0x804 VA: 0x804
	|-List<byte>.Find
	|
	|-RVA: 0x639 Offset: 0x639 VA: 0x639
	|-List<KeyValuePair<DateTime, object>>.Find
	|
	|-RVA: 0x643 Offset: 0x643 VA: 0x643
	|-List<EventProvider.SessionInfo>.Find
	|
	|-RVA: 0x81D Offset: 0x81D VA: 0x81D
	|-List<int>.Find
	|
	|-RVA: 0x67 Offset: 0x67 VA: 0x67
	|-List<ulong>.Find
	|
	|-RVA: 0x65D Offset: 0x65D VA: 0x65D
	|-List<BeforeRenderHelper.OrderBlock>.Find
	|
	|-RVA: 0x666 Offset: 0x666 VA: 0x666
	|-List<Color32>.Find
	|
	|-RVA: 0x670 Offset: 0x670 VA: 0x670
	|-List<RaycastResult>.Find
	|
	|-RVA: 0x67B Offset: 0x67B VA: 0x67B
	|-List<UICharInfo>.Find
	|
	|-RVA: 0x686 Offset: 0x686 VA: 0x686
	|-List<UILineInfo>.Find
	|
	|-RVA: 0x68F Offset: 0x68F VA: 0x68F
	|-List<UIVertex>.Find
	|
	|-RVA: 0x69A Offset: 0x69A VA: 0x69A
	|-List<UnitySynchronizationContext.WorkRequest>.Find
	|
	|-RVA: 0x6A3 Offset: 0x6A3 VA: 0x6A3
	|-List<Vector2>.Find
	|
	|-RVA: 0x6AC Offset: 0x6AC VA: 0x6AC
	|-List<Vector3>.Find
	|
	|-RVA: 0x6B5 Offset: 0x6B5 VA: 0x6B5
	|-List<Vector4>.Find
	*/

	// RVA: -1 Offset: -1
	public List.Enumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x828 Offset: 0x828 VA: 0x828
	|-List<AudioAmbisonicExtensionDefinition>.GetEnumerator
	|-List<AudioSpatializerExtensionDefinition>.GetEnumerator
	|-List<PersistentCall>.GetEnumerator
	|-List<GUILayoutEntry>.GetEnumerator
	|-List<EtwSession>.GetEnumerator
	|-List<FieldMetadata>.GetEnumerator
	|-List<CultureInfo>.GetEnumerator
	|-List<ModifierSpec>.GetEnumerator
	|-List<object>.GetEnumerator
	|-List<MethodInfo>.GetEnumerator
	|-List<ExceptionDispatchInfo>.GetEnumerator
	|-List<IContextProperty>.GetEnumerator
	|-List<string>.GetEnumerator
	|-List<IAsyncLocal>.GetEnumerator
	|-List<Task>.GetEnumerator
	|-List<Tuple<EventProvider.SessionInfo, bool>>.GetEnumerator
	|-List<TypeIdentifier>.GetEnumerator
	|-List<WeakReference>.GetEnumerator
	|-List<WeakReference<EtwSession>>.GetEnumerator
	|
	|-RVA: 0x881 Offset: 0x881 VA: 0x881
	|-List<UnitySynchronizationContext.WorkRequest>.GetEnumerator
	|
	|-RVA: 0x865 Offset: 0x865 VA: 0x865
	|-List<byte>.GetEnumerator
	|
	|-RVA: 0xA0C Offset: 0xA0C VA: 0xA0C
	|-List<KeyValuePair<DateTime, object>>.GetEnumerator
	|
	|-RVA: 0x85D Offset: 0x85D VA: 0x85D
	|-List<EventProvider.SessionInfo>.GetEnumerator
	|
	|-RVA: 0x869 Offset: 0x869 VA: 0x869
	|-List<int>.GetEnumerator
	|
	|-RVA: 0x86B Offset: 0x86B VA: 0x86B
	|-List<ulong>.GetEnumerator
	|
	|-RVA: 0xA31 Offset: 0xA31 VA: 0xA31
	|-List<BeforeRenderHelper.OrderBlock>.GetEnumerator
	|
	|-RVA: 0xA3B Offset: 0xA3B VA: 0xA3B
	|-List<Color32>.GetEnumerator
	|
	|-RVA: 0xA46 Offset: 0xA46 VA: 0xA46
	|-List<RaycastResult>.GetEnumerator
	|
	|-RVA: 0xA50 Offset: 0xA50 VA: 0xA50
	|-List<UICharInfo>.GetEnumerator
	|
	|-RVA: 0xA5B Offset: 0xA5B VA: 0xA5B
	|-List<UILineInfo>.GetEnumerator
	|
	|-RVA: 0xA64 Offset: 0xA64 VA: 0xA64
	|-List<UIVertex>.GetEnumerator
	|
	|-RVA: 0xA76 Offset: 0xA76 VA: 0xA76
	|-List<Vector2>.GetEnumerator
	|
	|-RVA: 0xA80 Offset: 0xA80 VA: 0xA80
	|-List<Vector3>.GetEnumerator
	|
	|-RVA: 0xA8A Offset: 0xA8A VA: 0xA8A
	|-List<Vector4>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 16
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10DE Offset: 0x10DE VA: 0x10DE
	|-List<byte>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x10E9 Offset: 0x10E9 VA: 0x10E9
	|-List<KeyValuePair<DateTime, object>>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x10F4 Offset: 0x10F4 VA: 0x10F4
	|-List<EventProvider.SessionInfo>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x10FF Offset: 0x10FF VA: 0x10FF
	|-List<int>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0xD81 Offset: 0xD81 VA: 0xD81
	|-List<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x110A Offset: 0x110A VA: 0x110A
	|-List<ulong>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1115 Offset: 0x1115 VA: 0x1115
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1121 Offset: 0x1121 VA: 0x1121
	|-List<Color32>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x112C Offset: 0x112C VA: 0x112C
	|-List<RaycastResult>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1138 Offset: 0x1138 VA: 0x1138
	|-List<UICharInfo>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1144 Offset: 0x1144 VA: 0x1144
	|-List<UILineInfo>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x114E Offset: 0x114E VA: 0x114E
	|-List<UIVertex>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1159 Offset: 0x1159 VA: 0x1159
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1165 Offset: 0x1165 VA: 0x1165
	|-List<Vector2>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x1170 Offset: 0x1170 VA: 0x1170
	|-List<Vector3>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	|
	|-RVA: 0x117C Offset: 0x117C VA: 0x117C
	|-List<Vector4>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10DF Offset: 0x10DF VA: 0x10DF
	|-List<byte>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x10EA Offset: 0x10EA VA: 0x10EA
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x10F5 Offset: 0x10F5 VA: 0x10F5
	|-List<EventProvider.SessionInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1100 Offset: 0x1100 VA: 0x1100
	|-List<int>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0xD82 Offset: 0xD82 VA: 0xD82
	|-List<object>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x110B Offset: 0x110B VA: 0x110B
	|-List<ulong>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1116 Offset: 0x1116 VA: 0x1116
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1122 Offset: 0x1122 VA: 0x1122
	|-List<Color32>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x112D Offset: 0x112D VA: 0x112D
	|-List<RaycastResult>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1139 Offset: 0x1139 VA: 0x1139
	|-List<UICharInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1145 Offset: 0x1145 VA: 0x1145
	|-List<UILineInfo>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x114F Offset: 0x114F VA: 0x114F
	|-List<UIVertex>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x115A Offset: 0x115A VA: 0x115A
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1166 Offset: 0x1166 VA: 0x1166
	|-List<Vector2>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x1171 Offset: 0x1171 VA: 0x1171
	|-List<Vector3>.System.Collections.IEnumerable.GetEnumerator
	|
	|-RVA: 0x117D Offset: 0x117D VA: 0x117D
	|-List<Vector4>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x805 Offset: 0x805 VA: 0x805
	|-List<byte>.IndexOf
	|
	|-RVA: 0x80D Offset: 0x80D VA: 0x80D
	|-List<KeyValuePair<DateTime, object>>.IndexOf
	|
	|-RVA: 0x815 Offset: 0x815 VA: 0x815
	|-List<EventProvider.SessionInfo>.IndexOf
	|
	|-RVA: 0x81E Offset: 0x81E VA: 0x81E
	|-List<int>.IndexOf
	|
	|-RVA: 0x67F Offset: 0x67F VA: 0x67F
	|-List<object>.IndexOf
	|-List<EventSystem>.IndexOf
	|
	|-RVA: 0x22 Offset: 0x22 VA: 0x22
	|-List<ulong>.IndexOf
	|
	|-RVA: 0x82A Offset: 0x82A VA: 0x82A
	|-List<BeforeRenderHelper.OrderBlock>.IndexOf
	|
	|-RVA: 0x832 Offset: 0x832 VA: 0x832
	|-List<Color32>.IndexOf
	|
	|-RVA: 0x83A Offset: 0x83A VA: 0x83A
	|-List<RaycastResult>.IndexOf
	|
	|-RVA: 0x842 Offset: 0x842 VA: 0x842
	|-List<UICharInfo>.IndexOf
	|
	|-RVA: 0x84A Offset: 0x84A VA: 0x84A
	|-List<UILineInfo>.IndexOf
	|
	|-RVA: 0x852 Offset: 0x852 VA: 0x852
	|-List<UIVertex>.IndexOf
	|
	|-RVA: 0x85A Offset: 0x85A VA: 0x85A
	|-List<UnitySynchronizationContext.WorkRequest>.IndexOf
	|
	|-RVA: 0x862 Offset: 0x862 VA: 0x862
	|-List<Vector2>.IndexOf
	|
	|-RVA: 0x86A Offset: 0x86A VA: 0x86A
	|-List<Vector3>.IndexOf
	|
	|-RVA: 0x872 Offset: 0x872 VA: 0x872
	|-List<Vector4>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 25
	private int System.Collections.IList.IndexOf(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x806 Offset: 0x806 VA: 0x806
	|-List<byte>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x80E Offset: 0x80E VA: 0x80E
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x816 Offset: 0x816 VA: 0x816
	|-List<EventProvider.SessionInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x81F Offset: 0x81F VA: 0x81F
	|-List<int>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x680 Offset: 0x680 VA: 0x680
	|-List<object>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x824 Offset: 0x824 VA: 0x824
	|-List<ulong>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x82B Offset: 0x82B VA: 0x82B
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x833 Offset: 0x833 VA: 0x833
	|-List<Color32>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x83B Offset: 0x83B VA: 0x83B
	|-List<RaycastResult>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x843 Offset: 0x843 VA: 0x843
	|-List<UICharInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x84B Offset: 0x84B VA: 0x84B
	|-List<UILineInfo>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x853 Offset: 0x853 VA: 0x853
	|-List<UIVertex>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x85B Offset: 0x85B VA: 0x85B
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x863 Offset: 0x863 VA: 0x863
	|-List<Vector2>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x86B Offset: 0x86B VA: 0x86B
	|-List<Vector3>.System.Collections.IList.IndexOf
	|
	|-RVA: 0x873 Offset: 0x873 VA: 0x873
	|-List<Vector4>.System.Collections.IList.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x630 Offset: 0x630 VA: 0x630
	|-List<byte>.Insert
	|
	|-RVA: 0x63A Offset: 0x63A VA: 0x63A
	|-List<KeyValuePair<DateTime, object>>.Insert
	|
	|-RVA: 0x644 Offset: 0x644 VA: 0x644
	|-List<EventProvider.SessionInfo>.Insert
	|
	|-RVA: 0x41F Offset: 0x41F VA: 0x41F
	|-List<CultureInfo>.Insert
	|-List<Directory.SearchData>.Insert
	|-List<object>.Insert
	|-List<EventSystem>.Insert
	|
	|-RVA: 0x64D Offset: 0x64D VA: 0x64D
	|-List<int>.Insert
	|
	|-RVA: 0x18 Offset: 0x18 VA: 0x18
	|-List<ulong>.Insert
	|
	|-RVA: 0x65E Offset: 0x65E VA: 0x65E
	|-List<BeforeRenderHelper.OrderBlock>.Insert
	|
	|-RVA: 0x667 Offset: 0x667 VA: 0x667
	|-List<Color32>.Insert
	|
	|-RVA: 0x671 Offset: 0x671 VA: 0x671
	|-List<RaycastResult>.Insert
	|
	|-RVA: 0x67C Offset: 0x67C VA: 0x67C
	|-List<UICharInfo>.Insert
	|
	|-RVA: 0x687 Offset: 0x687 VA: 0x687
	|-List<UILineInfo>.Insert
	|
	|-RVA: 0x690 Offset: 0x690 VA: 0x690
	|-List<UIVertex>.Insert
	|
	|-RVA: 0x69B Offset: 0x69B VA: 0x69B
	|-List<UnitySynchronizationContext.WorkRequest>.Insert
	|
	|-RVA: 0x6A4 Offset: 0x6A4 VA: 0x6A4
	|-List<Vector2>.Insert
	|
	|-RVA: 0x6AD Offset: 0x6AD VA: 0x6AD
	|-List<Vector3>.Insert
	|
	|-RVA: 0x6B6 Offset: 0x6B6 VA: 0x6B6
	|-List<Vector4>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 26
	private void System.Collections.IList.Insert(int index, object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x631 Offset: 0x631 VA: 0x631
	|-List<byte>.System.Collections.IList.Insert
	|
	|-RVA: 0x63B Offset: 0x63B VA: 0x63B
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.Insert
	|
	|-RVA: 0x645 Offset: 0x645 VA: 0x645
	|-List<EventProvider.SessionInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x64E Offset: 0x64E VA: 0x64E
	|-List<int>.System.Collections.IList.Insert
	|
	|-RVA: 0x420 Offset: 0x420 VA: 0x420
	|-List<object>.System.Collections.IList.Insert
	|
	|-RVA: 0x655 Offset: 0x655 VA: 0x655
	|-List<ulong>.System.Collections.IList.Insert
	|
	|-RVA: 0x65F Offset: 0x65F VA: 0x65F
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Insert
	|
	|-RVA: 0x668 Offset: 0x668 VA: 0x668
	|-List<Color32>.System.Collections.IList.Insert
	|
	|-RVA: 0x672 Offset: 0x672 VA: 0x672
	|-List<RaycastResult>.System.Collections.IList.Insert
	|
	|-RVA: 0x67D Offset: 0x67D VA: 0x67D
	|-List<UICharInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x688 Offset: 0x688 VA: 0x688
	|-List<UILineInfo>.System.Collections.IList.Insert
	|
	|-RVA: 0x691 Offset: 0x691 VA: 0x691
	|-List<UIVertex>.System.Collections.IList.Insert
	|
	|-RVA: 0x69C Offset: 0x69C VA: 0x69C
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Insert
	|
	|-RVA: 0x6A5 Offset: 0x6A5 VA: 0x6A5
	|-List<Vector2>.System.Collections.IList.Insert
	|
	|-RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	|-List<Vector3>.System.Collections.IList.Insert
	|
	|-RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	|-List<Vector4>.System.Collections.IList.Insert
	*/

	// RVA: -1 Offset: -1
	public void InsertRange(int index, IEnumerable<T> collection) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x632 Offset: 0x632 VA: 0x632
	|-List<byte>.InsertRange
	|
	|-RVA: 0x63C Offset: 0x63C VA: 0x63C
	|-List<KeyValuePair<DateTime, object>>.InsertRange
	|
	|-RVA: 0x646 Offset: 0x646 VA: 0x646
	|-List<EventProvider.SessionInfo>.InsertRange
	|
	|-RVA: 0x64F Offset: 0x64F VA: 0x64F
	|-List<int>.InsertRange
	|
	|-RVA: 0x421 Offset: 0x421 VA: 0x421
	|-List<object>.InsertRange
	|
	|-RVA: 0x656 Offset: 0x656 VA: 0x656
	|-List<ulong>.InsertRange
	|
	|-RVA: 0x660 Offset: 0x660 VA: 0x660
	|-List<BeforeRenderHelper.OrderBlock>.InsertRange
	|
	|-RVA: 0x669 Offset: 0x669 VA: 0x669
	|-List<Color32>.InsertRange
	|
	|-RVA: 0x673 Offset: 0x673 VA: 0x673
	|-List<RaycastResult>.InsertRange
	|
	|-RVA: 0x67E Offset: 0x67E VA: 0x67E
	|-List<UICharInfo>.InsertRange
	|
	|-RVA: 0x689 Offset: 0x689 VA: 0x689
	|-List<UILineInfo>.InsertRange
	|
	|-RVA: 0x692 Offset: 0x692 VA: 0x692
	|-List<UIVertex>.InsertRange
	|
	|-RVA: 0x69D Offset: 0x69D VA: 0x69D
	|-List<UnitySynchronizationContext.WorkRequest>.InsertRange
	|
	|-RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6
	|-List<Vector2>.InsertRange
	|
	|-RVA: 0x6AF Offset: 0x6AF VA: 0x6AF
	|-List<Vector3>.InsertRange
	|
	|-RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8
	|-List<Vector4>.InsertRange
	*/

	// RVA: -1 Offset: -1 Slot: 15
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x807 Offset: 0x807 VA: 0x807
	|-List<byte>.Remove
	|
	|-RVA: 0x80F Offset: 0x80F VA: 0x80F
	|-List<KeyValuePair<DateTime, object>>.Remove
	|
	|-RVA: 0x681 Offset: 0x681 VA: 0x681
	|-List<EtwSession>.Remove
	|-List<LocalDataStore>.Remove
	|-List<object>.Remove
	|-List<TimeZoneInfo.AdjustmentRule>.Remove
	|-List<BaseRaycaster>.Remove
	|-List<EventSystem>.Remove
	|-List<GameObject>.Remove
	|-List<PlayerEditorConnectionEvents.MessageTypeSubscribers>.Remove
	|-List<Image>.Remove
	|-List<Selectable>.Remove
	|-List<Toggle>.Remove
	|
	|-RVA: 0x817 Offset: 0x817 VA: 0x817
	|-List<EventProvider.SessionInfo>.Remove
	|
	|-RVA: 0x6BE Offset: 0x6BE VA: 0x6BE
	|-List<int>.Remove
	|
	|-RVA: 0x23 Offset: 0x23 VA: 0x23
	|-List<ulong>.Remove
	|
	|-RVA: 0x82C Offset: 0x82C VA: 0x82C
	|-List<BeforeRenderHelper.OrderBlock>.Remove
	|
	|-RVA: 0x834 Offset: 0x834 VA: 0x834
	|-List<Color32>.Remove
	|
	|-RVA: 0x83C Offset: 0x83C VA: 0x83C
	|-List<RaycastResult>.Remove
	|
	|-RVA: 0x844 Offset: 0x844 VA: 0x844
	|-List<UICharInfo>.Remove
	|
	|-RVA: 0x84C Offset: 0x84C VA: 0x84C
	|-List<UILineInfo>.Remove
	|
	|-RVA: 0x854 Offset: 0x854 VA: 0x854
	|-List<UIVertex>.Remove
	|
	|-RVA: 0x85C Offset: 0x85C VA: 0x85C
	|-List<UnitySynchronizationContext.WorkRequest>.Remove
	|
	|-RVA: 0x864 Offset: 0x864 VA: 0x864
	|-List<Vector2>.Remove
	|
	|-RVA: 0x86C Offset: 0x86C VA: 0x86C
	|-List<Vector3>.Remove
	|
	|-RVA: 0x874 Offset: 0x874 VA: 0x874
	|-List<Vector4>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 27
	private void System.Collections.IList.Remove(object item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	|-List<byte>.System.Collections.IList.Remove
	|
	|-RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	|-List<KeyValuePair<DateTime, object>>.System.Collections.IList.Remove
	|
	|-RVA: 0xA16 Offset: 0xA16 VA: 0xA16
	|-List<EventProvider.SessionInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0xA1D Offset: 0xA1D VA: 0xA1D
	|-List<int>.System.Collections.IList.Remove
	|
	|-RVA: 0x829 Offset: 0x829 VA: 0x829
	|-List<object>.System.Collections.IList.Remove
	|
	|-RVA: 0xA26 Offset: 0xA26 VA: 0xA26
	|-List<ulong>.System.Collections.IList.Remove
	|
	|-RVA: 0xA32 Offset: 0xA32 VA: 0xA32
	|-List<BeforeRenderHelper.OrderBlock>.System.Collections.IList.Remove
	|
	|-RVA: 0xA3C Offset: 0xA3C VA: 0xA3C
	|-List<Color32>.System.Collections.IList.Remove
	|
	|-RVA: 0xA47 Offset: 0xA47 VA: 0xA47
	|-List<RaycastResult>.System.Collections.IList.Remove
	|
	|-RVA: 0xA51 Offset: 0xA51 VA: 0xA51
	|-List<UICharInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0xA5C Offset: 0xA5C VA: 0xA5C
	|-List<UILineInfo>.System.Collections.IList.Remove
	|
	|-RVA: 0xA65 Offset: 0xA65 VA: 0xA65
	|-List<UIVertex>.System.Collections.IList.Remove
	|
	|-RVA: 0xA6D Offset: 0xA6D VA: 0xA6D
	|-List<UnitySynchronizationContext.WorkRequest>.System.Collections.IList.Remove
	|
	|-RVA: 0xA77 Offset: 0xA77 VA: 0xA77
	|-List<Vector2>.System.Collections.IList.Remove
	|
	|-RVA: 0xA81 Offset: 0xA81 VA: 0xA81
	|-List<Vector3>.System.Collections.IList.Remove
	|
	|-RVA: 0xA8B Offset: 0xA8B VA: 0xA8B
	|-List<Vector4>.System.Collections.IList.Remove
	*/

	// RVA: -1 Offset: -1
	public int RemoveAll(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x808 Offset: 0x808 VA: 0x808
	|-List<byte>.RemoveAll
	|
	|-RVA: 0x810 Offset: 0x810 VA: 0x810
	|-List<KeyValuePair<DateTime, object>>.RemoveAll
	|
	|-RVA: 0x818 Offset: 0x818 VA: 0x818
	|-List<EventProvider.SessionInfo>.RemoveAll
	|
	|-RVA: 0x820 Offset: 0x820 VA: 0x820
	|-List<int>.RemoveAll
	|
	|-RVA: 0x682 Offset: 0x682 VA: 0x682
	|-List<object>.RemoveAll
	|-List<Task>.RemoveAll
	|-List<WeakReference<EtwSession>>.RemoveAll
	|-List<Component>.RemoveAll
	|-List<BaseInvokableCall>.RemoveAll
	|
	|-RVA: 0x825 Offset: 0x825 VA: 0x825
	|-List<ulong>.RemoveAll
	|
	|-RVA: 0x82D Offset: 0x82D VA: 0x82D
	|-List<BeforeRenderHelper.OrderBlock>.RemoveAll
	|
	|-RVA: 0x835 Offset: 0x835 VA: 0x835
	|-List<Color32>.RemoveAll
	|
	|-RVA: 0x83D Offset: 0x83D VA: 0x83D
	|-List<RaycastResult>.RemoveAll
	|
	|-RVA: 0x845 Offset: 0x845 VA: 0x845
	|-List<UICharInfo>.RemoveAll
	|
	|-RVA: 0x84D Offset: 0x84D VA: 0x84D
	|-List<UILineInfo>.RemoveAll
	|
	|-RVA: 0x855 Offset: 0x855 VA: 0x855
	|-List<UIVertex>.RemoveAll
	|
	|-RVA: 0x85D Offset: 0x85D VA: 0x85D
	|-List<UnitySynchronizationContext.WorkRequest>.RemoveAll
	|
	|-RVA: 0x865 Offset: 0x865 VA: 0x865
	|-List<Vector2>.RemoveAll
	|
	|-RVA: 0x86D Offset: 0x86D VA: 0x86D
	|-List<Vector3>.RemoveAll
	|
	|-RVA: 0x875 Offset: 0x875 VA: 0x875
	|-List<Vector4>.RemoveAll
	*/

	// RVA: -1 Offset: -1 Slot: 28
	public void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA04 Offset: 0xA04 VA: 0xA04
	|-List<byte>.RemoveAt
	|
	|-RVA: 0xA0E Offset: 0xA0E VA: 0xA0E
	|-List<KeyValuePair<DateTime, object>>.RemoveAt
	|
	|-RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	|-List<EventProvider.SessionInfo>.RemoveAt
	|
	|-RVA: 0x82A Offset: 0x82A VA: 0x82A
	|-List<Directory.SearchData>.RemoveAt
	|-List<object>.RemoveAt
	|-List<AudioSourceExtension>.RemoveAt
	|-List<BaseInputModule>.RemoveAt
	|-List<EventSystem>.RemoveAt
	|-List<Image>.RemoveAt
	|-List<StencilMaterial.MatEntry>.RemoveAt
	|
	|-RVA: 0xA1E Offset: 0xA1E VA: 0xA1E
	|-List<int>.RemoveAt
	|
	|-RVA: 0xA27 Offset: 0xA27 VA: 0xA27
	|-List<ulong>.RemoveAt
	|
	|-RVA: 0xA33 Offset: 0xA33 VA: 0xA33
	|-List<BeforeRenderHelper.OrderBlock>.RemoveAt
	|
	|-RVA: 0xA3D Offset: 0xA3D VA: 0xA3D
	|-List<Color32>.RemoveAt
	|
	|-RVA: 0xA48 Offset: 0xA48 VA: 0xA48
	|-List<RaycastResult>.RemoveAt
	|
	|-RVA: 0xA52 Offset: 0xA52 VA: 0xA52
	|-List<UICharInfo>.RemoveAt
	|
	|-RVA: 0xA5D Offset: 0xA5D VA: 0xA5D
	|-List<UILineInfo>.RemoveAt
	|
	|-RVA: 0xA66 Offset: 0xA66 VA: 0xA66
	|-List<UIVertex>.RemoveAt
	|
	|-RVA: 0xA6E Offset: 0xA6E VA: 0xA6E
	|-List<UnitySynchronizationContext.WorkRequest>.RemoveAt
	|
	|-RVA: 0xA78 Offset: 0xA78 VA: 0xA78
	|-List<Vector2>.RemoveAt
	|
	|-RVA: 0xA82 Offset: 0xA82 VA: 0xA82
	|-List<Vector3>.RemoveAt
	|
	|-RVA: 0xA8C Offset: 0xA8C VA: 0xA8C
	|-List<Vector4>.RemoveAt
	*/

	// RVA: -1 Offset: -1
	public void RemoveRange(int index, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x633 Offset: 0x633 VA: 0x633
	|-List<byte>.RemoveRange
	|
	|-RVA: 0x63D Offset: 0x63D VA: 0x63D
	|-List<KeyValuePair<DateTime, object>>.RemoveRange
	|
	|-RVA: 0x647 Offset: 0x647 VA: 0x647
	|-List<EventProvider.SessionInfo>.RemoveRange
	|
	|-RVA: 0x650 Offset: 0x650 VA: 0x650
	|-List<int>.RemoveRange
	|
	|-RVA: 0x422 Offset: 0x422 VA: 0x422
	|-List<object>.RemoveRange
	|-List<Type>.RemoveRange
	|
	|-RVA: 0x657 Offset: 0x657 VA: 0x657
	|-List<ulong>.RemoveRange
	|
	|-RVA: 0x661 Offset: 0x661 VA: 0x661
	|-List<BeforeRenderHelper.OrderBlock>.RemoveRange
	|
	|-RVA: 0x66A Offset: 0x66A VA: 0x66A
	|-List<Color32>.RemoveRange
	|
	|-RVA: 0x674 Offset: 0x674 VA: 0x674
	|-List<RaycastResult>.RemoveRange
	|
	|-RVA: 0x67F Offset: 0x67F VA: 0x67F
	|-List<UICharInfo>.RemoveRange
	|
	|-RVA: 0x68A Offset: 0x68A VA: 0x68A
	|-List<UILineInfo>.RemoveRange
	|
	|-RVA: 0x693 Offset: 0x693 VA: 0x693
	|-List<UIVertex>.RemoveRange
	|
	|-RVA: 0x69E Offset: 0x69E VA: 0x69E
	|-List<UnitySynchronizationContext.WorkRequest>.RemoveRange
	|
	|-RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7
	|-List<Vector2>.RemoveRange
	|
	|-RVA: 0x6B0 Offset: 0x6B0 VA: 0x6B0
	|-List<Vector3>.RemoveRange
	|
	|-RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	|-List<Vector4>.RemoveRange
	*/

	// RVA: -1 Offset: -1
	public void Reverse() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA81 Offset: 0xA81 VA: 0xA81
	|-List<byte>.Reverse
	|
	|-RVA: 0xA86 Offset: 0xA86 VA: 0xA86
	|-List<KeyValuePair<DateTime, object>>.Reverse
	|
	|-RVA: 0xA8B Offset: 0xA8B VA: 0xA8B
	|-List<EventProvider.SessionInfo>.Reverse
	|
	|-RVA: 0xA8E Offset: 0xA8E VA: 0xA8E
	|-List<int>.Reverse
	|
	|-RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9
	|-List<object>.Reverse
	|-List<MethodInfo>.Reverse
	|
	|-RVA: 0xA92 Offset: 0xA92 VA: 0xA92
	|-List<ulong>.Reverse
	|
	|-RVA: 0xA95 Offset: 0xA95 VA: 0xA95
	|-List<BeforeRenderHelper.OrderBlock>.Reverse
	|
	|-RVA: 0xA99 Offset: 0xA99 VA: 0xA99
	|-List<Color32>.Reverse
	|
	|-RVA: 0xA9C Offset: 0xA9C VA: 0xA9C
	|-List<RaycastResult>.Reverse
	|
	|-RVA: 0xAA1 Offset: 0xAA1 VA: 0xAA1
	|-List<UICharInfo>.Reverse
	|
	|-RVA: 0xAA6 Offset: 0xAA6 VA: 0xAA6
	|-List<UILineInfo>.Reverse
	|
	|-RVA: 0xAAB Offset: 0xAAB VA: 0xAAB
	|-List<UIVertex>.Reverse
	|
	|-RVA: 0xAAF Offset: 0xAAF VA: 0xAAF
	|-List<UnitySynchronizationContext.WorkRequest>.Reverse
	|
	|-RVA: 0xAB3 Offset: 0xAB3 VA: 0xAB3
	|-List<Vector2>.Reverse
	|
	|-RVA: 0xAB7 Offset: 0xAB7 VA: 0xAB7
	|-List<Vector3>.Reverse
	|
	|-RVA: 0xABB Offset: 0xABB VA: 0xABB
	|-List<Vector4>.Reverse
	*/

	// RVA: -1 Offset: -1
	public void Reverse(int index, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x634 Offset: 0x634 VA: 0x634
	|-List<byte>.Reverse
	|
	|-RVA: 0x63E Offset: 0x63E VA: 0x63E
	|-List<KeyValuePair<DateTime, object>>.Reverse
	|
	|-RVA: 0x648 Offset: 0x648 VA: 0x648
	|-List<EventProvider.SessionInfo>.Reverse
	|
	|-RVA: 0x651 Offset: 0x651 VA: 0x651
	|-List<int>.Reverse
	|
	|-RVA: 0x423 Offset: 0x423 VA: 0x423
	|-List<object>.Reverse
	|
	|-RVA: 0x658 Offset: 0x658 VA: 0x658
	|-List<ulong>.Reverse
	|
	|-RVA: 0x662 Offset: 0x662 VA: 0x662
	|-List<BeforeRenderHelper.OrderBlock>.Reverse
	|
	|-RVA: 0x66B Offset: 0x66B VA: 0x66B
	|-List<Color32>.Reverse
	|
	|-RVA: 0x675 Offset: 0x675 VA: 0x675
	|-List<RaycastResult>.Reverse
	|
	|-RVA: 0x680 Offset: 0x680 VA: 0x680
	|-List<UICharInfo>.Reverse
	|
	|-RVA: 0x68B Offset: 0x68B VA: 0x68B
	|-List<UILineInfo>.Reverse
	|
	|-RVA: 0x694 Offset: 0x694 VA: 0x694
	|-List<UIVertex>.Reverse
	|
	|-RVA: 0x69F Offset: 0x69F VA: 0x69F
	|-List<UnitySynchronizationContext.WorkRequest>.Reverse
	|
	|-RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8
	|-List<Vector2>.Reverse
	|
	|-RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	|-List<Vector3>.Reverse
	|
	|-RVA: 0x6BA Offset: 0x6BA VA: 0x6BA
	|-List<Vector4>.Reverse
	*/

	// RVA: -1 Offset: -1
	public void Sort() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA82 Offset: 0xA82 VA: 0xA82
	|-List<byte>.Sort
	|
	|-RVA: 0xA87 Offset: 0xA87 VA: 0xA87
	|-List<KeyValuePair<DateTime, object>>.Sort
	|
	|-RVA: 0xA8C Offset: 0xA8C VA: 0xA8C
	|-List<EventProvider.SessionInfo>.Sort
	|
	|-RVA: 0x921 Offset: 0x921 VA: 0x921
	|-List<int>.Sort
	|
	|-RVA: 0x8EA Offset: 0x8EA VA: 0x8EA
	|-List<object>.Sort
	|
	|-RVA: 0x923 Offset: 0x923 VA: 0x923
	|-List<ulong>.Sort
	|
	|-RVA: 0xA96 Offset: 0xA96 VA: 0xA96
	|-List<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0xA9A Offset: 0xA9A VA: 0xA9A
	|-List<Color32>.Sort
	|
	|-RVA: 0xA9D Offset: 0xA9D VA: 0xA9D
	|-List<RaycastResult>.Sort
	|
	|-RVA: 0xAA2 Offset: 0xAA2 VA: 0xAA2
	|-List<UICharInfo>.Sort
	|
	|-RVA: 0xAA7 Offset: 0xAA7 VA: 0xAA7
	|-List<UILineInfo>.Sort
	|
	|-RVA: 0xAAC Offset: 0xAAC VA: 0xAAC
	|-List<UIVertex>.Sort
	|
	|-RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	|-List<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0xAB4 Offset: 0xAB4 VA: 0xAB4
	|-List<Vector2>.Sort
	|
	|-RVA: 0xAB8 Offset: 0xAB8 VA: 0xAB8
	|-List<Vector3>.Sort
	|
	|-RVA: 0xABC Offset: 0xABC VA: 0xABC
	|-List<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public void Sort(IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x82B Offset: 0x82B VA: 0x82B
	|-List<Contraction>.Sort
	|-List<object>.Sort
	|
	|-RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	|-List<byte>.Sort
	|
	|-RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	|-List<KeyValuePair<DateTime, object>>.Sort
	|
	|-RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	|-List<EventProvider.SessionInfo>.Sort
	|
	|-RVA: 0xA1F Offset: 0xA1F VA: 0xA1F
	|-List<int>.Sort
	|
	|-RVA: 0xA28 Offset: 0xA28 VA: 0xA28
	|-List<ulong>.Sort
	|
	|-RVA: 0xA34 Offset: 0xA34 VA: 0xA34
	|-List<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0xA3E Offset: 0xA3E VA: 0xA3E
	|-List<Color32>.Sort
	|
	|-RVA: 0xA49 Offset: 0xA49 VA: 0xA49
	|-List<RaycastResult>.Sort
	|
	|-RVA: 0xA53 Offset: 0xA53 VA: 0xA53
	|-List<UICharInfo>.Sort
	|
	|-RVA: 0xA5E Offset: 0xA5E VA: 0xA5E
	|-List<UILineInfo>.Sort
	|
	|-RVA: 0xA67 Offset: 0xA67 VA: 0xA67
	|-List<UIVertex>.Sort
	|
	|-RVA: 0xA6F Offset: 0xA6F VA: 0xA6F
	|-List<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0xA79 Offset: 0xA79 VA: 0xA79
	|-List<Vector2>.Sort
	|
	|-RVA: 0xA83 Offset: 0xA83 VA: 0xA83
	|-List<Vector3>.Sort
	|
	|-RVA: 0xA8D Offset: 0xA8D VA: 0xA8D
	|-List<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public void Sort(int index, int count, IComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1BB Offset: 0x1BB VA: 0x1BB
	|-List<byte>.Sort
	|
	|-RVA: 0x1BC Offset: 0x1BC VA: 0x1BC
	|-List<KeyValuePair<DateTime, object>>.Sort
	|
	|-RVA: 0x1BD Offset: 0x1BD VA: 0x1BD
	|-List<EventProvider.SessionInfo>.Sort
	|
	|-RVA: 0x1BE Offset: 0x1BE VA: 0x1BE
	|-List<int>.Sort
	|
	|-RVA: 0x12A Offset: 0x12A VA: 0x12A
	|-List<object>.Sort
	|
	|-RVA: 0x1BF Offset: 0x1BF VA: 0x1BF
	|-List<ulong>.Sort
	|
	|-RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0
	|-List<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1
	|-List<Color32>.Sort
	|
	|-RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2
	|-List<RaycastResult>.Sort
	|
	|-RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3
	|-List<UICharInfo>.Sort
	|
	|-RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4
	|-List<UILineInfo>.Sort
	|
	|-RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5
	|-List<UIVertex>.Sort
	|
	|-RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6
	|-List<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7
	|-List<Vector2>.Sort
	|
	|-RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8
	|-List<Vector3>.Sort
	|
	|-RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9
	|-List<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public void Sort(Comparison<T> comparison) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x82C Offset: 0x82C VA: 0x82C
	|-List<Level2Map>.Sort
	|-List<object>.Sort
	|-List<TimeZoneInfo.AdjustmentRule>.Sort
	|-List<Graphic>.Sort
	|
	|-RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	|-List<byte>.Sort
	|
	|-RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	|-List<KeyValuePair<DateTime, object>>.Sort
	|
	|-RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	|-List<EventProvider.SessionInfo>.Sort
	|
	|-RVA: 0xA20 Offset: 0xA20 VA: 0xA20
	|-List<int>.Sort
	|
	|-RVA: 0xA29 Offset: 0xA29 VA: 0xA29
	|-List<ulong>.Sort
	|
	|-RVA: 0xA35 Offset: 0xA35 VA: 0xA35
	|-List<BeforeRenderHelper.OrderBlock>.Sort
	|
	|-RVA: 0xA3F Offset: 0xA3F VA: 0xA3F
	|-List<Color32>.Sort
	|
	|-RVA: 0x886 Offset: 0x886 VA: 0x886
	|-List<RaycastResult>.Sort
	|
	|-RVA: 0xA54 Offset: 0xA54 VA: 0xA54
	|-List<UICharInfo>.Sort
	|
	|-RVA: 0xA5F Offset: 0xA5F VA: 0xA5F
	|-List<UILineInfo>.Sort
	|
	|-RVA: 0xA68 Offset: 0xA68 VA: 0xA68
	|-List<UIVertex>.Sort
	|
	|-RVA: 0xA70 Offset: 0xA70 VA: 0xA70
	|-List<UnitySynchronizationContext.WorkRequest>.Sort
	|
	|-RVA: 0xA7A Offset: 0xA7A VA: 0xA7A
	|-List<Vector2>.Sort
	|
	|-RVA: 0xA84 Offset: 0xA84 VA: 0xA84
	|-List<Vector3>.Sort
	|
	|-RVA: 0xA8E Offset: 0xA8E VA: 0xA8E
	|-List<Vector4>.Sort
	*/

	// RVA: -1 Offset: -1
	public T[] ToArray() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD83 Offset: 0xD83 VA: 0xD83
	|-List<Type>.ToArray
	|-List<Contraction>.ToArray
	|-List<Level2Map>.ToArray
	|-List<StackFrame>.ToArray
	|-List<PropertyAnalysis>.ToArray
	|-List<object>.ToArray
	|-List<Module>.ToArray
	|-List<IContextProperty>.ToArray
	|-List<string>.ToArray
	|-List<TimeZoneInfo.AdjustmentRule>.ToArray
	|
	|-RVA: 0x10E0 Offset: 0x10E0 VA: 0x10E0
	|-List<byte>.ToArray
	|
	|-RVA: 0x10EB Offset: 0x10EB VA: 0x10EB
	|-List<KeyValuePair<DateTime, object>>.ToArray
	|
	|-RVA: 0x10F6 Offset: 0x10F6 VA: 0x10F6
	|-List<EventProvider.SessionInfo>.ToArray
	|
	|-RVA: 0xDF4 Offset: 0xDF4 VA: 0xDF4
	|-List<int>.ToArray
	|
	|-RVA: 0x110C Offset: 0x110C VA: 0x110C
	|-List<ulong>.ToArray
	|
	|-RVA: 0x1117 Offset: 0x1117 VA: 0x1117
	|-List<BeforeRenderHelper.OrderBlock>.ToArray
	|
	|-RVA: 0x1123 Offset: 0x1123 VA: 0x1123
	|-List<Color32>.ToArray
	|
	|-RVA: 0x112E Offset: 0x112E VA: 0x112E
	|-List<RaycastResult>.ToArray
	|
	|-RVA: 0x113A Offset: 0x113A VA: 0x113A
	|-List<UICharInfo>.ToArray
	|
	|-RVA: 0x1146 Offset: 0x1146 VA: 0x1146
	|-List<UILineInfo>.ToArray
	|
	|-RVA: 0x1150 Offset: 0x1150 VA: 0x1150
	|-List<UIVertex>.ToArray
	|
	|-RVA: 0x115B Offset: 0x115B VA: 0x115B
	|-List<UnitySynchronizationContext.WorkRequest>.ToArray
	|
	|-RVA: 0x1167 Offset: 0x1167 VA: 0x1167
	|-List<Vector2>.ToArray
	|
	|-RVA: 0x1172 Offset: 0x1172 VA: 0x1172
	|-List<Vector3>.ToArray
	|
	|-RVA: 0x117E Offset: 0x117E VA: 0x117E
	|-List<Vector4>.ToArray
	*/

	// RVA: -1 Offset: -1
	public void TrimExcess() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA83 Offset: 0xA83 VA: 0xA83
	|-List<byte>.TrimExcess
	|
	|-RVA: 0xA88 Offset: 0xA88 VA: 0xA88
	|-List<KeyValuePair<DateTime, object>>.TrimExcess
	|
	|-RVA: 0xA8D Offset: 0xA8D VA: 0xA8D
	|-List<EventProvider.SessionInfo>.TrimExcess
	|
	|-RVA: 0xA8F Offset: 0xA8F VA: 0xA8F
	|-List<int>.TrimExcess
	|
	|-RVA: 0x8EB Offset: 0x8EB VA: 0x8EB
	|-List<object>.TrimExcess
	|
	|-RVA: 0xA93 Offset: 0xA93 VA: 0xA93
	|-List<ulong>.TrimExcess
	|
	|-RVA: 0xA97 Offset: 0xA97 VA: 0xA97
	|-List<BeforeRenderHelper.OrderBlock>.TrimExcess
	|
	|-RVA: 0xA9B Offset: 0xA9B VA: 0xA9B
	|-List<Color32>.TrimExcess
	|
	|-RVA: 0xA9E Offset: 0xA9E VA: 0xA9E
	|-List<RaycastResult>.TrimExcess
	|
	|-RVA: 0xAA3 Offset: 0xAA3 VA: 0xAA3
	|-List<UICharInfo>.TrimExcess
	|
	|-RVA: 0xAA8 Offset: 0xAA8 VA: 0xAA8
	|-List<UILineInfo>.TrimExcess
	|
	|-RVA: 0xAAD Offset: 0xAAD VA: 0xAAD
	|-List<UIVertex>.TrimExcess
	|
	|-RVA: 0xAB1 Offset: 0xAB1 VA: 0xAB1
	|-List<UnitySynchronizationContext.WorkRequest>.TrimExcess
	|
	|-RVA: 0xAB5 Offset: 0xAB5 VA: 0xAB5
	|-List<Vector2>.TrimExcess
	|
	|-RVA: 0xAB9 Offset: 0xAB9 VA: 0xAB9
	|-List<Vector3>.TrimExcess
	|
	|-RVA: 0xABD Offset: 0xABD VA: 0xABD
	|-List<Vector4>.TrimExcess
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xFDA Offset: 0xFDA VA: 0xFDA
	|-List<byte>..cctor
	|
	|-RVA: 0xFDB Offset: 0xFDB VA: 0xFDB
	|-List<KeyValuePair<DateTime, object>>..cctor
	|
	|-RVA: 0xFDC Offset: 0xFDC VA: 0xFDC
	|-List<EventProvider.SessionInfo>..cctor
	|
	|-RVA: 0xFDD Offset: 0xFDD VA: 0xFDD
	|-List<int>..cctor
	|
	|-RVA: 0xF8F Offset: 0xF8F VA: 0xF8F
	|-List<object>..cctor
	|
	|-RVA: 0xFDE Offset: 0xFDE VA: 0xFDE
	|-List<ulong>..cctor
	|
	|-RVA: 0xFDF Offset: 0xFDF VA: 0xFDF
	|-List<BeforeRenderHelper.OrderBlock>..cctor
	|
	|-RVA: 0xFE0 Offset: 0xFE0 VA: 0xFE0
	|-List<Color32>..cctor
	|
	|-RVA: 0xFE1 Offset: 0xFE1 VA: 0xFE1
	|-List<RaycastResult>..cctor
	|
	|-RVA: 0xFE2 Offset: 0xFE2 VA: 0xFE2
	|-List<UICharInfo>..cctor
	|
	|-RVA: 0xFE3 Offset: 0xFE3 VA: 0xFE3
	|-List<UILineInfo>..cctor
	|
	|-RVA: 0xFE4 Offset: 0xFE4 VA: 0xFE4
	|-List<UIVertex>..cctor
	|
	|-RVA: 0xFE5 Offset: 0xFE5 VA: 0xFE5
	|-List<UnitySynchronizationContext.WorkRequest>..cctor
	|
	|-RVA: 0xFE6 Offset: 0xFE6 VA: 0xFE6
	|-List<Vector2>..cctor
	|
	|-RVA: 0xFE7 Offset: 0xFE7 VA: 0xFE7
	|-List<Vector3>..cctor
	|
	|-RVA: 0xFE8 Offset: 0xFE8 VA: 0xFE8
	|-List<Vector4>..cctor
	*/
}

// Namespace: 
[Serializable]
public struct List.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1247
{
	// Fields
	private List<T> list; // 0xFFFFFFFF
	private int index; // 0xFFFFFFFF
	private int version; // 0xFFFFFFFF
	private T current; // 0xFFFFFFFF

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(List<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9E6 Offset: 0x9E6 VA: 0x9E6
	|-List.Enumerator<byte>..ctor
	|
	|-RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7
	|-List.Enumerator<KeyValuePair<DateTime, object>>..ctor
	|
	|-RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	|-List.Enumerator<EventProvider.SessionInfo>..ctor
	|
	|-RVA: 0x9EA Offset: 0x9EA VA: 0x9EA
	|-List.Enumerator<int>..ctor
	|
	|-RVA: 0x82D Offset: 0x82D VA: 0x82D
	|-List.Enumerator<object>..ctor
	|
	|-RVA: 0x9EB Offset: 0x9EB VA: 0x9EB
	|-List.Enumerator<ulong>..ctor
	|
	|-RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>..ctor
	|
	|-RVA: 0x9EE Offset: 0x9EE VA: 0x9EE
	|-List.Enumerator<Color32>..ctor
	|
	|-RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	|-List.Enumerator<RaycastResult>..ctor
	|
	|-RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2
	|-List.Enumerator<UICharInfo>..ctor
	|
	|-RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	|-List.Enumerator<UILineInfo>..ctor
	|
	|-RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	|-List.Enumerator<UIVertex>..ctor
	|
	|-RVA: 0x9F8 Offset: 0x9F8 VA: 0x9F8
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>..ctor
	|
	|-RVA: 0x9F9 Offset: 0x9F9 VA: 0x9F9
	|-List.Enumerator<Vector2>..ctor
	|
	|-RVA: 0x9FB Offset: 0x9FB VA: 0x9FB
	|-List.Enumerator<Vector3>..ctor
	|
	|-RVA: 0x9FD Offset: 0x9FD VA: 0x9FD
	|-List.Enumerator<Vector4>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x919 Offset: 0x919 VA: 0x919
	|-List.Enumerator<byte>.Dispose
	|
	|-RVA: 0xA75 Offset: 0xA75 VA: 0xA75
	|-List.Enumerator<KeyValuePair<DateTime, object>>.Dispose
	|
	|-RVA: 0x8EC Offset: 0x8EC VA: 0x8EC
	|-List.Enumerator<EtwSession>.Dispose
	|-List.Enumerator<FieldMetadata>.Dispose
	|-List.Enumerator<CultureInfo>.Dispose
	|-List.Enumerator<ModifierSpec>.Dispose
	|-List.Enumerator<object>.Dispose
	|-List.Enumerator<MethodInfo>.Dispose
	|-List.Enumerator<ExceptionDispatchInfo>.Dispose
	|-List.Enumerator<IContextProperty>.Dispose
	|-List.Enumerator<string>.Dispose
	|-List.Enumerator<IAsyncLocal>.Dispose
	|-List.Enumerator<Task>.Dispose
	|-List.Enumerator<Tuple<EventProvider.SessionInfo, bool>>.Dispose
	|-List.Enumerator<TypeIdentifier>.Dispose
	|-List.Enumerator<WeakReference>.Dispose
	|-List.Enumerator<WeakReference<EtwSession>>.Dispose
	|-List.Enumerator<AudioAmbisonicExtensionDefinition>.Dispose
	|-List.Enumerator<AudioSpatializerExtensionDefinition>.Dispose
	|-List.Enumerator<PersistentCall>.Dispose
	|-List.Enumerator<GUILayoutEntry>.Dispose
	|
	|-RVA: 0x918 Offset: 0x918 VA: 0x918
	|-List.Enumerator<EventProvider.SessionInfo>.Dispose
	|
	|-RVA: 0x922 Offset: 0x922 VA: 0x922
	|-List.Enumerator<int>.Dispose
	|
	|-RVA: 0x924 Offset: 0x924 VA: 0x924
	|-List.Enumerator<ulong>.Dispose
	|
	|-RVA: 0xA76 Offset: 0xA76 VA: 0xA76
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.Dispose
	|
	|-RVA: 0xA77 Offset: 0xA77 VA: 0xA77
	|-List.Enumerator<Color32>.Dispose
	|
	|-RVA: 0xA78 Offset: 0xA78 VA: 0xA78
	|-List.Enumerator<RaycastResult>.Dispose
	|
	|-RVA: 0xA79 Offset: 0xA79 VA: 0xA79
	|-List.Enumerator<UICharInfo>.Dispose
	|
	|-RVA: 0xA7A Offset: 0xA7A VA: 0xA7A
	|-List.Enumerator<UILineInfo>.Dispose
	|
	|-RVA: 0xA7B Offset: 0xA7B VA: 0xA7B
	|-List.Enumerator<UIVertex>.Dispose
	|
	|-RVA: 0x936 Offset: 0x936 VA: 0x936
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.Dispose
	|
	|-RVA: 0xA7C Offset: 0xA7C VA: 0xA7C
	|-List.Enumerator<Vector2>.Dispose
	|
	|-RVA: 0xA7D Offset: 0xA7D VA: 0xA7D
	|-List.Enumerator<Vector3>.Dispose
	|
	|-RVA: 0xA7E Offset: 0xA7E VA: 0xA7E
	|-List.Enumerator<Vector4>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDCF Offset: 0xDCF VA: 0xDCF
	|-List.Enumerator<byte>.MoveNext
	|
	|-RVA: 0x10B0 Offset: 0x10B0 VA: 0x10B0
	|-List.Enumerator<KeyValuePair<DateTime, object>>.MoveNext
	|
	|-RVA: 0xD86 Offset: 0xD86 VA: 0xD86
	|-List.Enumerator<EtwSession>.MoveNext
	|-List.Enumerator<FieldMetadata>.MoveNext
	|-List.Enumerator<CultureInfo>.MoveNext
	|-List.Enumerator<ModifierSpec>.MoveNext
	|-List.Enumerator<object>.MoveNext
	|-List.Enumerator<MethodInfo>.MoveNext
	|-List.Enumerator<ExceptionDispatchInfo>.MoveNext
	|-List.Enumerator<IContextProperty>.MoveNext
	|-List.Enumerator<string>.MoveNext
	|-List.Enumerator<IAsyncLocal>.MoveNext
	|-List.Enumerator<Task>.MoveNext
	|-List.Enumerator<Tuple<EventProvider.SessionInfo, bool>>.MoveNext
	|-List.Enumerator<TypeIdentifier>.MoveNext
	|-List.Enumerator<WeakReference>.MoveNext
	|-List.Enumerator<WeakReference<EtwSession>>.MoveNext
	|-List.Enumerator<AudioAmbisonicExtensionDefinition>.MoveNext
	|-List.Enumerator<AudioSpatializerExtensionDefinition>.MoveNext
	|-List.Enumerator<PersistentCall>.MoveNext
	|-List.Enumerator<GUILayoutEntry>.MoveNext
	|
	|-RVA: 0xDCB Offset: 0xDCB VA: 0xDCB
	|-List.Enumerator<EventProvider.SessionInfo>.MoveNext
	|
	|-RVA: 0xDD4 Offset: 0xDD4 VA: 0xDD4
	|-List.Enumerator<int>.MoveNext
	|
	|-RVA: 0xDD6 Offset: 0xDD6 VA: 0xDD6
	|-List.Enumerator<ulong>.MoveNext
	|
	|-RVA: 0x10B9 Offset: 0x10B9 VA: 0x10B9
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.MoveNext
	|
	|-RVA: 0x10BC Offset: 0x10BC VA: 0x10BC
	|-List.Enumerator<Color32>.MoveNext
	|
	|-RVA: 0x10BF Offset: 0x10BF VA: 0x10BF
	|-List.Enumerator<RaycastResult>.MoveNext
	|
	|-RVA: 0x10C2 Offset: 0x10C2 VA: 0x10C2
	|-List.Enumerator<UICharInfo>.MoveNext
	|
	|-RVA: 0x10C5 Offset: 0x10C5 VA: 0x10C5
	|-List.Enumerator<UILineInfo>.MoveNext
	|
	|-RVA: 0x10C8 Offset: 0x10C8 VA: 0x10C8
	|-List.Enumerator<UIVertex>.MoveNext
	|
	|-RVA: 0xDFA Offset: 0xDFA VA: 0xDFA
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.MoveNext
	|
	|-RVA: 0x10CD Offset: 0x10CD VA: 0x10CD
	|-List.Enumerator<Vector2>.MoveNext
	|
	|-RVA: 0x10D0 Offset: 0x10D0 VA: 0x10D0
	|-List.Enumerator<Vector3>.MoveNext
	|
	|-RVA: 0x10D3 Offset: 0x10D3 VA: 0x10D3
	|-List.Enumerator<Vector4>.MoveNext
	*/

	// RVA: -1 Offset: -1
	private bool MoveNextRare() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10AE Offset: 0x10AE VA: 0x10AE
	|-List.Enumerator<byte>.MoveNextRare
	|
	|-RVA: 0x10B1 Offset: 0x10B1 VA: 0x10B1
	|-List.Enumerator<KeyValuePair<DateTime, object>>.MoveNextRare
	|
	|-RVA: 0x10B3 Offset: 0x10B3 VA: 0x10B3
	|-List.Enumerator<EventProvider.SessionInfo>.MoveNextRare
	|
	|-RVA: 0x10B5 Offset: 0x10B5 VA: 0x10B5
	|-List.Enumerator<int>.MoveNextRare
	|
	|-RVA: 0xD87 Offset: 0xD87 VA: 0xD87
	|-List.Enumerator<object>.MoveNextRare
	|
	|-RVA: 0x10B7 Offset: 0x10B7 VA: 0x10B7
	|-List.Enumerator<ulong>.MoveNextRare
	|
	|-RVA: 0x10BA Offset: 0x10BA VA: 0x10BA
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.MoveNextRare
	|
	|-RVA: 0x10BD Offset: 0x10BD VA: 0x10BD
	|-List.Enumerator<Color32>.MoveNextRare
	|
	|-RVA: 0x10C0 Offset: 0x10C0 VA: 0x10C0
	|-List.Enumerator<RaycastResult>.MoveNextRare
	|
	|-RVA: 0x10C3 Offset: 0x10C3 VA: 0x10C3
	|-List.Enumerator<UICharInfo>.MoveNextRare
	|
	|-RVA: 0x10C6 Offset: 0x10C6 VA: 0x10C6
	|-List.Enumerator<UILineInfo>.MoveNextRare
	|
	|-RVA: 0x10C9 Offset: 0x10C9 VA: 0x10C9
	|-List.Enumerator<UIVertex>.MoveNextRare
	|
	|-RVA: 0x10CB Offset: 0x10CB VA: 0x10CB
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.MoveNextRare
	|
	|-RVA: 0x10CE Offset: 0x10CE VA: 0x10CE
	|-List.Enumerator<Vector2>.MoveNextRare
	|
	|-RVA: 0x10D1 Offset: 0x10D1 VA: 0x10D1
	|-List.Enumerator<Vector3>.MoveNextRare
	|
	|-RVA: 0x10D4 Offset: 0x10D4 VA: 0x10D4
	|-List.Enumerator<Vector4>.MoveNextRare
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD84 Offset: 0xD84 VA: 0xD84
	|-List.Enumerator<AudioAmbisonicExtensionDefinition>.get_Current
	|-List.Enumerator<AudioSpatializerExtensionDefinition>.get_Current
	|-List.Enumerator<PersistentCall>.get_Current
	|-List.Enumerator<GUILayoutEntry>.get_Current
	|-List.Enumerator<EtwSession>.get_Current
	|-List.Enumerator<FieldMetadata>.get_Current
	|-List.Enumerator<CultureInfo>.get_Current
	|-List.Enumerator<ModifierSpec>.get_Current
	|-List.Enumerator<object>.get_Current
	|-List.Enumerator<MethodInfo>.get_Current
	|-List.Enumerator<ExceptionDispatchInfo>.get_Current
	|-List.Enumerator<IContextProperty>.get_Current
	|-List.Enumerator<string>.get_Current
	|-List.Enumerator<IAsyncLocal>.get_Current
	|-List.Enumerator<Task>.get_Current
	|-List.Enumerator<Tuple<EventProvider.SessionInfo, bool>>.get_Current
	|-List.Enumerator<TypeIdentifier>.get_Current
	|-List.Enumerator<WeakReference>.get_Current
	|-List.Enumerator<WeakReference<EtwSession>>.get_Current
	|
	|-RVA: 0x882 Offset: 0x882 VA: 0x882
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.get_Current
	|
	|-RVA: 0xDCE Offset: 0xDCE VA: 0xDCE
	|-List.Enumerator<byte>.get_Current
	|
	|-RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	|-List.Enumerator<KeyValuePair<DateTime, object>>.get_Current
	|
	|-RVA: 0x85E Offset: 0x85E VA: 0x85E
	|-List.Enumerator<EventProvider.SessionInfo>.get_Current
	|
	|-RVA: 0xDD3 Offset: 0xDD3 VA: 0xDD3
	|-List.Enumerator<int>.get_Current
	|
	|-RVA: 0x6B Offset: 0x6B VA: 0x6B
	|-List.Enumerator<ulong>.get_Current
	|
	|-RVA: 0x9ED Offset: 0x9ED VA: 0x9ED
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.get_Current
	|
	|-RVA: 0x9EF Offset: 0x9EF VA: 0x9EF
	|-List.Enumerator<Color32>.get_Current
	|
	|-RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1
	|-List.Enumerator<RaycastResult>.get_Current
	|
	|-RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3
	|-List.Enumerator<UICharInfo>.get_Current
	|
	|-RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	|-List.Enumerator<UILineInfo>.get_Current
	|
	|-RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	|-List.Enumerator<UIVertex>.get_Current
	|
	|-RVA: 0x9FA Offset: 0x9FA VA: 0x9FA
	|-List.Enumerator<Vector2>.get_Current
	|
	|-RVA: 0x9FC Offset: 0x9FC VA: 0x9FC
	|-List.Enumerator<Vector3>.get_Current
	|
	|-RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	|-List.Enumerator<Vector4>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10AF Offset: 0x10AF VA: 0x10AF
	|-List.Enumerator<byte>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10B2 Offset: 0x10B2 VA: 0x10B2
	|-List.Enumerator<KeyValuePair<DateTime, object>>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10B4 Offset: 0x10B4 VA: 0x10B4
	|-List.Enumerator<EventProvider.SessionInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10B6 Offset: 0x10B6 VA: 0x10B6
	|-List.Enumerator<int>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0xD85 Offset: 0xD85 VA: 0xD85
	|-List.Enumerator<object>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10B8 Offset: 0x10B8 VA: 0x10B8
	|-List.Enumerator<ulong>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10BB Offset: 0x10BB VA: 0x10BB
	|-List.Enumerator<BeforeRenderHelper.OrderBlock>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10BE Offset: 0x10BE VA: 0x10BE
	|-List.Enumerator<Color32>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10C1 Offset: 0x10C1 VA: 0x10C1
	|-List.Enumerator<RaycastResult>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10C4 Offset: 0x10C4 VA: 0x10C4
	|-List.Enumerator<UICharInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10C7 Offset: 0x10C7 VA: 0x10C7
	|-List.Enumerator<UILineInfo>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10CA Offset: 0x10CA VA: 0x10CA
	|-List.Enumerator<UIVertex>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10CC Offset: 0x10CC VA: 0x10CC
	|-List.Enumerator<UnitySynchronizationContext.WorkRequest>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10CF Offset: 0x10CF VA: 0x10CF
	|-List.Enumerator<Vector2>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10D2 Offset: 0x10D2 VA: 0x10D2
	|-List.Enumerator<Vector3>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x10D5 Offset: 0x10D5 VA: 0x10D5
	|-List.Enumerator<Vector4>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x4FD Offset: 0x4FD VA: 0x4FD
[ComVisibleAttribute] // RVA: 0x4FD Offset: 0x4FD VA: 0x4FD
[Serializable]
public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 1248
{
	// Fields
	private string m_conditionString; // 0x8

	// Methods

	// RVA: 0xFC Offset: 0xFC VA: 0xFC
	public void .ctor(string conditionString) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x4FE Offset: 0x4FE VA: 0x4FE
[AttributeUsageAttribute] // RVA: 0x4FE Offset: 0x4FE VA: 0x4FE
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 1249
{
	// Methods

	// RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x4FF Offset: 0x4FF VA: 0x4FF
[ComVisibleAttribute] // RVA: 0x4FF Offset: 0x4FF VA: 0x4FF
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 1250
{
	// Methods

	// RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x500 Offset: 0x500 VA: 0x500
[ComVisibleAttribute] // RVA: 0x500 Offset: 0x500 VA: 0x500
[Serializable]
public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 1251
{
	// Methods

	// RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x501 Offset: 0x501 VA: 0x501
[ComVisibleAttribute] // RVA: 0x501 Offset: 0x501 VA: 0x501
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 1252
{
	// Fields
	private DebuggableAttribute.DebuggingModes m_debuggingModes; // 0x8

	// Methods

	// RVA: 0xFD Offset: 0xFD VA: 0xFD
	public void .ctor(DebuggableAttribute.DebuggingModes modes) { }
}

// Namespace: 
[ComVisibleAttribute] // RVA: 0x502 Offset: 0x502 VA: 0x502
[FlagsAttribute] // RVA: 0x502 Offset: 0x502 VA: 0x502
public enum DebuggableAttribute.DebuggingModes // TypeDefIndex: 1253
{
	// Fields
	public int value__; // 0x0
	public const DebuggableAttribute.DebuggingModes None = 0;
	public const DebuggableAttribute.DebuggingModes Default = 1;
	public const DebuggableAttribute.DebuggingModes DisableOptimizations = 256;
	public const DebuggableAttribute.DebuggingModes IgnoreSymbolStoreSequencePoints = 2;
	public const DebuggableAttribute.DebuggingModes EnableEditAndContinue = 4;
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x503 Offset: 0x503 VA: 0x503
public enum DebuggerBrowsableState // TypeDefIndex: 1254
{
	// Fields
	public int value__; // 0x0
	public const DebuggerBrowsableState Never = 0;
	public const DebuggerBrowsableState Collapsed = 2;
	public const DebuggerBrowsableState RootHidden = 3;
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x504 Offset: 0x504 VA: 0x504
[ComVisibleAttribute] // RVA: 0x504 Offset: 0x504 VA: 0x504
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 1255
{
	// Fields
	private DebuggerBrowsableState state; // 0x8

	// Methods

	// RVA: 0xFE Offset: 0xFE VA: 0xFE
	public void .ctor(DebuggerBrowsableState state) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x505 Offset: 0x505 VA: 0x505
[AttributeUsageAttribute] // RVA: 0x505 Offset: 0x505 VA: 0x505
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 1256
{
	// Fields
	private string typeName; // 0x8

	// Methods

	// RVA: 0x100 Offset: 0x100 VA: 0x100
	public void .ctor(Type type) { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0x506 Offset: 0x506 VA: 0x506
[ComVisibleAttribute] // RVA: 0x506 Offset: 0x506 VA: 0x506
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 1257
{
	// Fields
	private string name; // 0x8
	private string value; // 0xC
	private string type; // 0x10

	// Methods

	// RVA: 0xFF Offset: 0xFF VA: 0xFF
	public void .ctor(string value) { }
}

// Namespace: System.Diagnostics
[MonoTODOAttribute] // RVA: 0x507 Offset: 0x507 VA: 0x507
[ComVisibleAttribute] // RVA: 0x507 Offset: 0x507 VA: 0x507
public sealed class Debugger // TypeDefIndex: 1258
{
	// Fields
	public static readonly string DefaultCategory; // 0xFFFFFFFF

	// Properties
	public static bool IsAttached { get; }

	// Methods

	// RVA: 0x19A Offset: 0x19A VA: 0x19A
	public static bool get_IsAttached() { }

	// RVA: 0x19B Offset: 0x19B VA: 0x19B
	private static bool IsAttached_internal() { }

	// RVA: 0xD0 Offset: 0xD0 VA: 0xD0
	public static void Log(int level, string category, string message) { }

	// RVA: 0xE6F Offset: 0xE6F VA: 0xE6F
	public static void NotifyOfCrossThreadDependency() { }

	// RVA: 0xE70 Offset: 0xE70 VA: 0xE70
	private static void .cctor() { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x508 Offset: 0x508 VA: 0x508
[MonoTODOAttribute] // RVA: 0x508 Offset: 0x508 VA: 0x508
[Serializable]
public class StackFrame // TypeDefIndex: 1259
{
	// Fields
	public const int OFFSET_UNKNOWN = -1;
	private int ilOffset; // 0x8
	private int nativeOffset; // 0xC
	private long methodAddress; // 0x10
	private uint methodIndex; // 0x18
	private MethodBase methodBase; // 0x1C
	private string fileName; // 0x20
	private int lineNumber; // 0x24
	private int columnNumber; // 0x28
	private string internalMethodName; // 0x2C

	// Methods

	// RVA: 0xE Offset: 0xE VA: 0xE
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column) { }

	// RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8
	public void .ctor() { }

	// RVA: 0xD1 Offset: 0xD1 VA: 0xD1
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x26F Offset: 0x26F VA: 0x26F Slot: 4
	public virtual int GetFileLineNumber() { }

	// RVA: 0x270 Offset: 0x270 VA: 0x270 Slot: 5
	public virtual string GetFileName() { }

	// RVA: 0x271 Offset: 0x271 VA: 0x271
	internal string GetSecureFileName() { }

	// RVA: 0x272 Offset: 0x272 VA: 0x272 Slot: 6
	public virtual int GetILOffset() { }

	// RVA: 0x273 Offset: 0x273 VA: 0x273 Slot: 7
	public virtual MethodBase GetMethod() { }

	// RVA: 0x274 Offset: 0x274 VA: 0x274 Slot: 8
	public virtual int GetNativeOffset() { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	internal long GetMethodAddress() { }

	// RVA: 0x275 Offset: 0x275 VA: 0x275
	internal uint GetMethodIndex() { }

	// RVA: 0x276 Offset: 0x276 VA: 0x276
	internal string GetInternalMethodName() { }

	// RVA: 0x277 Offset: 0x277 VA: 0x277 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0x509 Offset: 0x509 VA: 0x509
[MonoTODOAttribute] // RVA: 0x509 Offset: 0x509 VA: 0x509
[Serializable]
public class StackTrace // TypeDefIndex: 1260
{
	// Fields
	public const int METHODS_TO_SKIP = 0;
	private StackFrame[] frames; // 0x8
	private readonly StackTrace[] captured_traces; // 0xC
	private bool debug_info; // 0x10
	private static bool isAotidSet; // 0x0
	private static string aotid; // 0x4

	// Properties
	public virtual int FrameCount { get; }

	// Methods

	// RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
	public void .ctor() { }

	// RVA: 0x101 Offset: 0x101 VA: 0x101
	public void .ctor(bool fNeedFileInfo) { }

	// RVA: 0xD2 Offset: 0xD2 VA: 0xD2
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0xD3 Offset: 0xD3 VA: 0xD3
	private void init_frames(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x857 Offset: 0x857 VA: 0x857
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0xD4 Offset: 0xD4 VA: 0xD4
	public void .ctor(Exception e, bool fNeedFileInfo) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	public void .ctor(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x278 Offset: 0x278 VA: 0x278 Slot: 4
	public virtual int get_FrameCount() { }

	// RVA: 0x17D Offset: 0x17D VA: 0x17D Slot: 5
	public virtual StackFrame GetFrame(int index) { }

	// RVA: 0x19C Offset: 0x19C VA: 0x19C
	private static string GetAotId() { }

	// RVA: 0x17E Offset: 0x17E VA: 0x17E
	private bool AddFrames(StringBuilder sb) { }

	// RVA: 0xD5 Offset: 0xD5 VA: 0xD5
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi) { }

	// RVA: 0x279 Offset: 0x279 VA: 0x279 Slot: 3
	public override string ToString() { }

	// RVA: 0x17F Offset: 0x17F VA: 0x17F
	internal string ToString(StackTrace.TraceFormat traceFormat) { }
}

// Namespace: 
internal enum StackTrace.TraceFormat // TypeDefIndex: 1261
{
	// Fields
	public int value__; // 0x0
	public const StackTrace.TraceFormat Normal = 0;
	public const StackTrace.TraceFormat TrailingNewLine = 1;
	public const StackTrace.TraceFormat NoResourceLookup = 2;
}

// Namespace: System.Diagnostics.Contracts
public static class Contract // TypeDefIndex: 1262
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0x78F Offset: 0x78F VA: 0x78F
	// RVA: -1 Offset: -1
	public static bool ForAll<T>(IEnumerable<T> collection, Predicate<T> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x683 Offset: 0x683 VA: 0x683
	|-Contract.ForAll<object>
	|-Contract.ForAll<Type>
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class ArrayTypeInfo<ElementType> : TraceLoggingTypeInfo<ElementType[]> // TypeDefIndex: 1263
{
	// Fields
	private readonly TraceLoggingTypeInfo<ElementType> elementInfo; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x12B Offset: 0x12B VA: 0x12B
	|-ArrayTypeInfo<object>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref ElementType[] value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x424 Offset: 0x424 VA: 0x424
	|-ArrayTypeInfo<object>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x684 Offset: 0x684 VA: 0x684
	|-ArrayTypeInfo<object>.GetData
	*/
}

// Namespace: System.Diagnostics.Tracing
internal struct ConcurrentSet<KeyType, ItemType> // TypeDefIndex: 1264
{
	// Fields
	private ItemType[] items; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public ItemType TryGet(KeyType key) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6B4 Offset: 0x6B4 VA: 0x6B4
	|-ConcurrentSet<KeyValuePair<object, Int32Enum>, object>.TryGet
	|-ConcurrentSet<KeyValuePair<string, EventTags>, NameInfo>.TryGet
	|
	|-RVA: 0x685 Offset: 0x685 VA: 0x685
	|-ConcurrentSet<object, object>.TryGet
	*/

	// RVA: -1 Offset: -1
	public ItemType GetOrAdd(ItemType newItem) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6B5 Offset: 0x6B5 VA: 0x6B5
	|-ConcurrentSet<KeyValuePair<object, Int32Enum>, object>.GetOrAdd
	|-ConcurrentSet<KeyValuePair<string, EventTags>, NameInfo>.GetOrAdd
	|
	|-RVA: 0x686 Offset: 0x686 VA: 0x686
	|-ConcurrentSet<object, object>.GetOrAdd
	*/
}

// Namespace: System.Diagnostics.Tracing
internal abstract class ConcurrentSetItem<KeyType, ItemType> // TypeDefIndex: 1265
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int Compare(ItemType other) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ConcurrentSetItem<object, object>.Compare
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int Compare(KeyType key) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-ConcurrentSetItem<object, object>.Compare
	*/

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x925 Offset: 0x925 VA: 0x925
	|-ConcurrentSetItem<KeyValuePair<object, Int32Enum>, object>..ctor
	|-ConcurrentSetItem<KeyValuePair<string, EventTags>, NameInfo>..ctor
	|
	|-RVA: 0x8ED Offset: 0x8ED VA: 0x8ED
	|-ConcurrentSetItem<object, object>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal struct DataCollector // TypeDefIndex: 1266
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x5AB Offset: 0x5AB VA: 0x5AB
	internal static DataCollector ThreadInstance; // 0x80000000
	private byte* scratchEnd; // 0x0
	private EventSource.EventData* datasEnd; // 0x4
	private GCHandle* pinsEnd; // 0x8
	private EventSource.EventData* datasStart; // 0xC
	private byte* scratch; // 0x10
	private EventSource.EventData* datas; // 0x14
	private GCHandle* pins; // 0x18
	private byte[] buffer; // 0x1C
	private int bufferPos; // 0x20
	private int bufferNesting; // 0x24
	private bool writingScalars; // 0x28

	// Methods

	// RVA: 0xC Offset: 0xC VA: 0xC
	internal void Enable(byte* scratch, int scratchSize, EventSource.EventData* datas, int dataCount, GCHandle* pins, int pinCount) { }

	// RVA: 0x2E8 Offset: 0x2E8 VA: 0x2E8
	internal void Disable() { }

	// RVA: 0x285 Offset: 0x285 VA: 0x285
	internal EventSource.EventData* Finish() { }

	// RVA: 0xDF Offset: 0xDF VA: 0xDF
	internal void AddScalar(void* value, int size) { }

	// RVA: 0xE0 Offset: 0xE0 VA: 0xE0
	internal void AddBinary(string value, int size) { }

	// RVA: 0xE1 Offset: 0xE1 VA: 0xE1
	internal void AddBinary(Array value, int size) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39
	internal void AddArray(Array value, int length, int itemSize) { }

	// RVA: 0x286 Offset: 0x286 VA: 0x286
	internal int BeginBufferedArray() { }

	// RVA: 0xE2 Offset: 0xE2 VA: 0xE2
	internal void EndBufferedArray(int bookmark, int count) { }

	// RVA: 0x2E9 Offset: 0x2E9 VA: 0x2E9
	internal void BeginBuffered() { }

	// RVA: 0x2EA Offset: 0x2EA VA: 0x2EA
	internal void EndBuffered() { }

	// RVA: 0x2EB Offset: 0x2EB VA: 0x2EB
	private void EnsureBuffer() { }

	// RVA: 0x108 Offset: 0x108 VA: 0x108
	private void EnsureBuffer(int additionalSize) { }

	// RVA: 0x109 Offset: 0x109 VA: 0x109
	private void GrowBuffer(int required) { }

	// RVA: 0xE3 Offset: 0xE3 VA: 0xE3
	private void PinArray(object value, int size) { }

	// RVA: 0x2EC Offset: 0x2EC VA: 0x2EC
	private void ScalarsBegin() { }

	// RVA: 0x2ED Offset: 0x2ED VA: 0x2ED
	private void ScalarsEnd() { }
}

// Namespace: System.Diagnostics.Tracing
internal struct EmptyStruct // TypeDefIndex: 1267
{}

// Namespace: System.Diagnostics.Tracing
internal static class EnumHelper<UnderlyingType> // TypeDefIndex: 1268
{
	// Fields
	private static readonly MethodInfo IdentityInfo; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public static UnderlyingType Cast<ValueType>(ValueType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE6E Offset: 0xE6E VA: 0xE6E
	|-EnumHelper<byte>.Cast<bool>
	|
	|-RVA: 0xE6F Offset: 0xE6F VA: 0xE6F
	|-EnumHelper<byte>.Cast<byte>
	|
	|-RVA: 0xE70 Offset: 0xE70 VA: 0xE70
	|-EnumHelper<byte>.Cast<char>
	|
	|-RVA: 0xE71 Offset: 0xE71 VA: 0xE71
	|-EnumHelper<byte>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0xE72 Offset: 0xE72 VA: 0xE72
	|-EnumHelper<byte>.Cast<DateTime>
	|
	|-RVA: 0xE73 Offset: 0xE73 VA: 0xE73
	|-EnumHelper<byte>.Cast<DateTimeOffset>
	|
	|-RVA: 0xE74 Offset: 0xE74 VA: 0xE74
	|-EnumHelper<byte>.Cast<Decimal>
	|
	|-RVA: 0xE75 Offset: 0xE75 VA: 0xE75
	|-EnumHelper<byte>.Cast<EmptyStruct>
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-EnumHelper<byte>.Cast<double>
	|-EnumHelper<ulong>.Cast<ulong>
	|
	|-RVA: 0xE76 Offset: 0xE76 VA: 0xE76
	|-EnumHelper<byte>.Cast<Guid>
	|
	|-RVA: 0xE77 Offset: 0xE77 VA: 0xE77
	|-EnumHelper<byte>.Cast<short>
	|
	|-RVA: 0xE78 Offset: 0xE78 VA: 0xE78
	|-EnumHelper<byte>.Cast<int>
	|
	|-RVA: 0x17 Offset: 0x17 VA: 0x17
	|-EnumHelper<byte>.Cast<long>
	|
	|-RVA: 0xE79 Offset: 0xE79 VA: 0xE79
	|-EnumHelper<byte>.Cast<IntPtr>
	|
	|-RVA: 0xE7A Offset: 0xE7A VA: 0xE7A
	|-EnumHelper<byte>.Cast<object>
	|
	|-RVA: 0xE7B Offset: 0xE7B VA: 0xE7B
	|-EnumHelper<byte>.Cast<sbyte>
	|
	|-RVA: 0x11 Offset: 0x11 VA: 0x11
	|-EnumHelper<byte>.Cast<float>
	|
	|-RVA: 0xE7C Offset: 0xE7C VA: 0xE7C
	|-EnumHelper<byte>.Cast<TimeSpan>
	|
	|-RVA: 0xE7D Offset: 0xE7D VA: 0xE7D
	|-EnumHelper<byte>.Cast<ushort>
	|
	|-RVA: 0xE7E Offset: 0xE7E VA: 0xE7E
	|-EnumHelper<byte>.Cast<uint>
	|
	|-RVA: 0x18 Offset: 0x18 VA: 0x18
	|-EnumHelper<byte>.Cast<ulong>
	|
	|-RVA: 0xE7F Offset: 0xE7F VA: 0xE7F
	|-EnumHelper<byte>.Cast<UIntPtr>
	|
	|-RVA: 0xE80 Offset: 0xE80 VA: 0xE80
	|-EnumHelper<short>.Cast<bool>
	|
	|-RVA: 0xE81 Offset: 0xE81 VA: 0xE81
	|-EnumHelper<short>.Cast<byte>
	|
	|-RVA: 0xE82 Offset: 0xE82 VA: 0xE82
	|-EnumHelper<short>.Cast<char>
	|
	|-RVA: 0xE83 Offset: 0xE83 VA: 0xE83
	|-EnumHelper<short>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0xE84 Offset: 0xE84 VA: 0xE84
	|-EnumHelper<short>.Cast<DateTime>
	|
	|-RVA: 0xE85 Offset: 0xE85 VA: 0xE85
	|-EnumHelper<short>.Cast<DateTimeOffset>
	|
	|-RVA: 0xE86 Offset: 0xE86 VA: 0xE86
	|-EnumHelper<short>.Cast<Decimal>
	|
	|-RVA: 0xE87 Offset: 0xE87 VA: 0xE87
	|-EnumHelper<short>.Cast<EmptyStruct>
	|
	|-RVA: 0xC Offset: 0xC VA: 0xC
	|-EnumHelper<short>.Cast<double>
	|
	|-RVA: 0xE88 Offset: 0xE88 VA: 0xE88
	|-EnumHelper<short>.Cast<Guid>
	|
	|-RVA: 0xE89 Offset: 0xE89 VA: 0xE89
	|-EnumHelper<short>.Cast<short>
	|
	|-RVA: 0xE8A Offset: 0xE8A VA: 0xE8A
	|-EnumHelper<short>.Cast<int>
	|
	|-RVA: 0x19 Offset: 0x19 VA: 0x19
	|-EnumHelper<short>.Cast<long>
	|
	|-RVA: 0xE8B Offset: 0xE8B VA: 0xE8B
	|-EnumHelper<short>.Cast<IntPtr>
	|
	|-RVA: 0xE8C Offset: 0xE8C VA: 0xE8C
	|-EnumHelper<short>.Cast<object>
	|
	|-RVA: 0xE8D Offset: 0xE8D VA: 0xE8D
	|-EnumHelper<short>.Cast<sbyte>
	|
	|-RVA: 0x12 Offset: 0x12 VA: 0x12
	|-EnumHelper<short>.Cast<float>
	|
	|-RVA: 0xE8E Offset: 0xE8E VA: 0xE8E
	|-EnumHelper<short>.Cast<TimeSpan>
	|
	|-RVA: 0xE8F Offset: 0xE8F VA: 0xE8F
	|-EnumHelper<short>.Cast<ushort>
	|
	|-RVA: 0xE90 Offset: 0xE90 VA: 0xE90
	|-EnumHelper<short>.Cast<uint>
	|
	|-RVA: 0x1A Offset: 0x1A VA: 0x1A
	|-EnumHelper<short>.Cast<ulong>
	|
	|-RVA: 0xE91 Offset: 0xE91 VA: 0xE91
	|-EnumHelper<short>.Cast<UIntPtr>
	|
	|-RVA: 0xE92 Offset: 0xE92 VA: 0xE92
	|-EnumHelper<int>.Cast<bool>
	|
	|-RVA: 0xE93 Offset: 0xE93 VA: 0xE93
	|-EnumHelper<int>.Cast<byte>
	|
	|-RVA: 0xE94 Offset: 0xE94 VA: 0xE94
	|-EnumHelper<int>.Cast<char>
	|
	|-RVA: 0xE95 Offset: 0xE95 VA: 0xE95
	|-EnumHelper<int>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0xE96 Offset: 0xE96 VA: 0xE96
	|-EnumHelper<int>.Cast<DateTime>
	|
	|-RVA: 0xE97 Offset: 0xE97 VA: 0xE97
	|-EnumHelper<int>.Cast<DateTimeOffset>
	|
	|-RVA: 0xE98 Offset: 0xE98 VA: 0xE98
	|-EnumHelper<int>.Cast<Decimal>
	|
	|-RVA: 0xE99 Offset: 0xE99 VA: 0xE99
	|-EnumHelper<int>.Cast<EmptyStruct>
	|
	|-RVA: 0xD Offset: 0xD VA: 0xD
	|-EnumHelper<int>.Cast<double>
	|
	|-RVA: 0xE9A Offset: 0xE9A VA: 0xE9A
	|-EnumHelper<int>.Cast<Guid>
	|
	|-RVA: 0xE9B Offset: 0xE9B VA: 0xE9B
	|-EnumHelper<int>.Cast<short>
	|
	|-RVA: 0xE9C Offset: 0xE9C VA: 0xE9C
	|-EnumHelper<int>.Cast<int>
	|
	|-RVA: 0x1B Offset: 0x1B VA: 0x1B
	|-EnumHelper<int>.Cast<long>
	|
	|-RVA: 0xE9D Offset: 0xE9D VA: 0xE9D
	|-EnumHelper<int>.Cast<IntPtr>
	|
	|-RVA: 0xE9E Offset: 0xE9E VA: 0xE9E
	|-EnumHelper<int>.Cast<object>
	|
	|-RVA: 0xE9F Offset: 0xE9F VA: 0xE9F
	|-EnumHelper<int>.Cast<sbyte>
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-EnumHelper<int>.Cast<float>
	|
	|-RVA: 0xEA0 Offset: 0xEA0 VA: 0xEA0
	|-EnumHelper<int>.Cast<TimeSpan>
	|
	|-RVA: 0xEA1 Offset: 0xEA1 VA: 0xEA1
	|-EnumHelper<int>.Cast<ushort>
	|
	|-RVA: 0xEA2 Offset: 0xEA2 VA: 0xEA2
	|-EnumHelper<int>.Cast<uint>
	|
	|-RVA: 0x1C Offset: 0x1C VA: 0x1C
	|-EnumHelper<int>.Cast<ulong>
	|
	|-RVA: 0xEA3 Offset: 0xEA3 VA: 0xEA3
	|-EnumHelper<int>.Cast<UIntPtr>
	|
	|-RVA: 0x6D Offset: 0x6D VA: 0x6D
	|-EnumHelper<long>.Cast<bool>
	|
	|-RVA: 0x6E Offset: 0x6E VA: 0x6E
	|-EnumHelper<long>.Cast<byte>
	|
	|-RVA: 0x6F Offset: 0x6F VA: 0x6F
	|-EnumHelper<long>.Cast<char>
	|
	|-RVA: 0x70 Offset: 0x70 VA: 0x70
	|-EnumHelper<long>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0x71 Offset: 0x71 VA: 0x71
	|-EnumHelper<long>.Cast<DateTime>
	|
	|-RVA: 0x72 Offset: 0x72 VA: 0x72
	|-EnumHelper<long>.Cast<DateTimeOffset>
	|
	|-RVA: 0x73 Offset: 0x73 VA: 0x73
	|-EnumHelper<long>.Cast<Decimal>
	|
	|-RVA: 0x74 Offset: 0x74 VA: 0x74
	|-EnumHelper<long>.Cast<EmptyStruct>
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-EnumHelper<long>.Cast<double>
	|-EnumHelper<long>.Cast<ulong>
	|
	|-RVA: 0x75 Offset: 0x75 VA: 0x75
	|-EnumHelper<long>.Cast<Guid>
	|
	|-RVA: 0x76 Offset: 0x76 VA: 0x76
	|-EnumHelper<long>.Cast<short>
	|
	|-RVA: 0x77 Offset: 0x77 VA: 0x77
	|-EnumHelper<long>.Cast<int>
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-EnumHelper<long>.Cast<long>
	|
	|-RVA: 0x78 Offset: 0x78 VA: 0x78
	|-EnumHelper<long>.Cast<IntPtr>
	|
	|-RVA: 0x79 Offset: 0x79 VA: 0x79
	|-EnumHelper<long>.Cast<object>
	|
	|-RVA: 0x7A Offset: 0x7A VA: 0x7A
	|-EnumHelper<long>.Cast<sbyte>
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-EnumHelper<long>.Cast<float>
	|
	|-RVA: 0x7B Offset: 0x7B VA: 0x7B
	|-EnumHelper<long>.Cast<TimeSpan>
	|
	|-RVA: 0x7C Offset: 0x7C VA: 0x7C
	|-EnumHelper<long>.Cast<ushort>
	|
	|-RVA: 0x7D Offset: 0x7D VA: 0x7D
	|-EnumHelper<long>.Cast<uint>
	|
	|-RVA: 0x7E Offset: 0x7E VA: 0x7E
	|-EnumHelper<long>.Cast<UIntPtr>
	|
	|-RVA: 0xD88 Offset: 0xD88 VA: 0xD88
	|-EnumHelper<object>.Cast<object>
	|
	|-RVA: 0xEA4 Offset: 0xEA4 VA: 0xEA4
	|-EnumHelper<sbyte>.Cast<bool>
	|
	|-RVA: 0xEA5 Offset: 0xEA5 VA: 0xEA5
	|-EnumHelper<sbyte>.Cast<byte>
	|
	|-RVA: 0xEA6 Offset: 0xEA6 VA: 0xEA6
	|-EnumHelper<sbyte>.Cast<char>
	|
	|-RVA: 0xEA7 Offset: 0xEA7 VA: 0xEA7
	|-EnumHelper<sbyte>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0xEA8 Offset: 0xEA8 VA: 0xEA8
	|-EnumHelper<sbyte>.Cast<DateTime>
	|
	|-RVA: 0xEA9 Offset: 0xEA9 VA: 0xEA9
	|-EnumHelper<sbyte>.Cast<DateTimeOffset>
	|
	|-RVA: 0xEAA Offset: 0xEAA VA: 0xEAA
	|-EnumHelper<sbyte>.Cast<Decimal>
	|
	|-RVA: 0xEAB Offset: 0xEAB VA: 0xEAB
	|-EnumHelper<sbyte>.Cast<EmptyStruct>
	|
	|-RVA: 0xE Offset: 0xE VA: 0xE
	|-EnumHelper<sbyte>.Cast<double>
	|
	|-RVA: 0xEAC Offset: 0xEAC VA: 0xEAC
	|-EnumHelper<sbyte>.Cast<Guid>
	|
	|-RVA: 0xEAD Offset: 0xEAD VA: 0xEAD
	|-EnumHelper<sbyte>.Cast<short>
	|
	|-RVA: 0xEAE Offset: 0xEAE VA: 0xEAE
	|-EnumHelper<sbyte>.Cast<int>
	|
	|-RVA: 0x1D Offset: 0x1D VA: 0x1D
	|-EnumHelper<sbyte>.Cast<long>
	|
	|-RVA: 0xEAF Offset: 0xEAF VA: 0xEAF
	|-EnumHelper<sbyte>.Cast<IntPtr>
	|
	|-RVA: 0xEB0 Offset: 0xEB0 VA: 0xEB0
	|-EnumHelper<sbyte>.Cast<object>
	|
	|-RVA: 0xEB1 Offset: 0xEB1 VA: 0xEB1
	|-EnumHelper<sbyte>.Cast<sbyte>
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-EnumHelper<sbyte>.Cast<float>
	|
	|-RVA: 0xEB2 Offset: 0xEB2 VA: 0xEB2
	|-EnumHelper<sbyte>.Cast<TimeSpan>
	|
	|-RVA: 0xEB3 Offset: 0xEB3 VA: 0xEB3
	|-EnumHelper<sbyte>.Cast<ushort>
	|
	|-RVA: 0xEB4 Offset: 0xEB4 VA: 0xEB4
	|-EnumHelper<sbyte>.Cast<uint>
	|
	|-RVA: 0x1E Offset: 0x1E VA: 0x1E
	|-EnumHelper<sbyte>.Cast<ulong>
	|
	|-RVA: 0xEB5 Offset: 0xEB5 VA: 0xEB5
	|-EnumHelper<sbyte>.Cast<UIntPtr>
	|
	|-RVA: 0xEB6 Offset: 0xEB6 VA: 0xEB6
	|-EnumHelper<ushort>.Cast<bool>
	|
	|-RVA: 0xEB7 Offset: 0xEB7 VA: 0xEB7
	|-EnumHelper<ushort>.Cast<byte>
	|
	|-RVA: 0xEB8 Offset: 0xEB8 VA: 0xEB8
	|-EnumHelper<ushort>.Cast<char>
	|
	|-RVA: 0xEB9 Offset: 0xEB9 VA: 0xEB9
	|-EnumHelper<ushort>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0xEBA Offset: 0xEBA VA: 0xEBA
	|-EnumHelper<ushort>.Cast<DateTime>
	|
	|-RVA: 0xEBB Offset: 0xEBB VA: 0xEBB
	|-EnumHelper<ushort>.Cast<DateTimeOffset>
	|
	|-RVA: 0xEBC Offset: 0xEBC VA: 0xEBC
	|-EnumHelper<ushort>.Cast<Decimal>
	|
	|-RVA: 0xEBD Offset: 0xEBD VA: 0xEBD
	|-EnumHelper<ushort>.Cast<EmptyStruct>
	|
	|-RVA: 0xF Offset: 0xF VA: 0xF
	|-EnumHelper<ushort>.Cast<double>
	|
	|-RVA: 0xEBE Offset: 0xEBE VA: 0xEBE
	|-EnumHelper<ushort>.Cast<Guid>
	|
	|-RVA: 0xEBF Offset: 0xEBF VA: 0xEBF
	|-EnumHelper<ushort>.Cast<short>
	|
	|-RVA: 0xEC0 Offset: 0xEC0 VA: 0xEC0
	|-EnumHelper<ushort>.Cast<int>
	|
	|-RVA: 0x1F Offset: 0x1F VA: 0x1F
	|-EnumHelper<ushort>.Cast<long>
	|
	|-RVA: 0xEC1 Offset: 0xEC1 VA: 0xEC1
	|-EnumHelper<ushort>.Cast<IntPtr>
	|
	|-RVA: 0xEC2 Offset: 0xEC2 VA: 0xEC2
	|-EnumHelper<ushort>.Cast<object>
	|
	|-RVA: 0xEC3 Offset: 0xEC3 VA: 0xEC3
	|-EnumHelper<ushort>.Cast<sbyte>
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-EnumHelper<ushort>.Cast<float>
	|
	|-RVA: 0xEC4 Offset: 0xEC4 VA: 0xEC4
	|-EnumHelper<ushort>.Cast<TimeSpan>
	|
	|-RVA: 0xEC5 Offset: 0xEC5 VA: 0xEC5
	|-EnumHelper<ushort>.Cast<ushort>
	|
	|-RVA: 0xEC6 Offset: 0xEC6 VA: 0xEC6
	|-EnumHelper<ushort>.Cast<uint>
	|
	|-RVA: 0x20 Offset: 0x20 VA: 0x20
	|-EnumHelper<ushort>.Cast<ulong>
	|
	|-RVA: 0xEC7 Offset: 0xEC7 VA: 0xEC7
	|-EnumHelper<ushort>.Cast<UIntPtr>
	|
	|-RVA: 0xEC8 Offset: 0xEC8 VA: 0xEC8
	|-EnumHelper<uint>.Cast<bool>
	|
	|-RVA: 0xEC9 Offset: 0xEC9 VA: 0xEC9
	|-EnumHelper<uint>.Cast<byte>
	|
	|-RVA: 0xECA Offset: 0xECA VA: 0xECA
	|-EnumHelper<uint>.Cast<char>
	|
	|-RVA: 0xECB Offset: 0xECB VA: 0xECB
	|-EnumHelper<uint>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0xECC Offset: 0xECC VA: 0xECC
	|-EnumHelper<uint>.Cast<DateTime>
	|
	|-RVA: 0xECD Offset: 0xECD VA: 0xECD
	|-EnumHelper<uint>.Cast<DateTimeOffset>
	|
	|-RVA: 0xECE Offset: 0xECE VA: 0xECE
	|-EnumHelper<uint>.Cast<Decimal>
	|
	|-RVA: 0xECF Offset: 0xECF VA: 0xECF
	|-EnumHelper<uint>.Cast<EmptyStruct>
	|
	|-RVA: 0x10 Offset: 0x10 VA: 0x10
	|-EnumHelper<uint>.Cast<double>
	|
	|-RVA: 0xED0 Offset: 0xED0 VA: 0xED0
	|-EnumHelper<uint>.Cast<Guid>
	|
	|-RVA: 0xED1 Offset: 0xED1 VA: 0xED1
	|-EnumHelper<uint>.Cast<short>
	|
	|-RVA: 0xED2 Offset: 0xED2 VA: 0xED2
	|-EnumHelper<uint>.Cast<int>
	|
	|-RVA: 0x21 Offset: 0x21 VA: 0x21
	|-EnumHelper<uint>.Cast<long>
	|
	|-RVA: 0xED3 Offset: 0xED3 VA: 0xED3
	|-EnumHelper<uint>.Cast<IntPtr>
	|
	|-RVA: 0xED4 Offset: 0xED4 VA: 0xED4
	|-EnumHelper<uint>.Cast<object>
	|
	|-RVA: 0xED5 Offset: 0xED5 VA: 0xED5
	|-EnumHelper<uint>.Cast<sbyte>
	|
	|-RVA: 0x16 Offset: 0x16 VA: 0x16
	|-EnumHelper<uint>.Cast<float>
	|
	|-RVA: 0xED6 Offset: 0xED6 VA: 0xED6
	|-EnumHelper<uint>.Cast<TimeSpan>
	|
	|-RVA: 0xED7 Offset: 0xED7 VA: 0xED7
	|-EnumHelper<uint>.Cast<ushort>
	|
	|-RVA: 0xED8 Offset: 0xED8 VA: 0xED8
	|-EnumHelper<uint>.Cast<uint>
	|
	|-RVA: 0x22 Offset: 0x22 VA: 0x22
	|-EnumHelper<uint>.Cast<ulong>
	|
	|-RVA: 0xED9 Offset: 0xED9 VA: 0xED9
	|-EnumHelper<uint>.Cast<UIntPtr>
	|
	|-RVA: 0x7F Offset: 0x7F VA: 0x7F
	|-EnumHelper<ulong>.Cast<bool>
	|
	|-RVA: 0x80 Offset: 0x80 VA: 0x80
	|-EnumHelper<ulong>.Cast<byte>
	|
	|-RVA: 0x81 Offset: 0x81 VA: 0x81
	|-EnumHelper<ulong>.Cast<char>
	|
	|-RVA: 0x82 Offset: 0x82 VA: 0x82
	|-EnumHelper<ulong>.Cast<KeyValuePair<object, object>>
	|
	|-RVA: 0x83 Offset: 0x83 VA: 0x83
	|-EnumHelper<ulong>.Cast<DateTime>
	|
	|-RVA: 0x84 Offset: 0x84 VA: 0x84
	|-EnumHelper<ulong>.Cast<DateTimeOffset>
	|
	|-RVA: 0x85 Offset: 0x85 VA: 0x85
	|-EnumHelper<ulong>.Cast<Decimal>
	|
	|-RVA: 0x86 Offset: 0x86 VA: 0x86
	|-EnumHelper<ulong>.Cast<EmptyStruct>
	|
	|-RVA: 0xA Offset: 0xA VA: 0xA
	|-EnumHelper<ulong>.Cast<double>
	|-EnumHelper<ulong>.Cast<long>
	|
	|-RVA: 0x87 Offset: 0x87 VA: 0x87
	|-EnumHelper<ulong>.Cast<Guid>
	|
	|-RVA: 0x88 Offset: 0x88 VA: 0x88
	|-EnumHelper<ulong>.Cast<short>
	|
	|-RVA: 0x89 Offset: 0x89 VA: 0x89
	|-EnumHelper<ulong>.Cast<int>
	|
	|-RVA: 0x8A Offset: 0x8A VA: 0x8A
	|-EnumHelper<ulong>.Cast<IntPtr>
	|
	|-RVA: 0x8B Offset: 0x8B VA: 0x8B
	|-EnumHelper<ulong>.Cast<object>
	|
	|-RVA: 0x8C Offset: 0x8C VA: 0x8C
	|-EnumHelper<ulong>.Cast<sbyte>
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-EnumHelper<ulong>.Cast<float>
	|
	|-RVA: 0x8D Offset: 0x8D VA: 0x8D
	|-EnumHelper<ulong>.Cast<TimeSpan>
	|
	|-RVA: 0x8E Offset: 0x8E VA: 0x8E
	|-EnumHelper<ulong>.Cast<ushort>
	|
	|-RVA: 0x8F Offset: 0x8F VA: 0x8F
	|-EnumHelper<ulong>.Cast<uint>
	|
	|-RVA: 0x90 Offset: 0x90 VA: 0x90
	|-EnumHelper<ulong>.Cast<UIntPtr>
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1099 Offset: 0x1099 VA: 0x1099
	|-EnumHelper<byte>..cctor
	|
	|-RVA: 0x109A Offset: 0x109A VA: 0x109A
	|-EnumHelper<short>..cctor
	|
	|-RVA: 0x109B Offset: 0x109B VA: 0x109B
	|-EnumHelper<int>..cctor
	|
	|-RVA: 0x109C Offset: 0x109C VA: 0x109C
	|-EnumHelper<long>..cctor
	|
	|-RVA: 0xF90 Offset: 0xF90 VA: 0xF90
	|-EnumHelper<object>..cctor
	|
	|-RVA: 0x109D Offset: 0x109D VA: 0x109D
	|-EnumHelper<sbyte>..cctor
	|
	|-RVA: 0x109E Offset: 0x109E VA: 0x109E
	|-EnumHelper<ushort>..cctor
	|
	|-RVA: 0x109F Offset: 0x109F VA: 0x109F
	|-EnumHelper<uint>..cctor
	|
	|-RVA: 0x10A0 Offset: 0x10A0 VA: 0x10A0
	|-EnumHelper<ulong>..cctor
	*/
}

// Namespace: 
private sealed class EnumHelper.Transformer<UnderlyingType, ValueType> : MulticastDelegate // TypeDefIndex: 1269
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7E0 Offset: 0x7E0 VA: 0x7E0
	|-EnumHelper.Transformer<byte, bool>..ctor
	|
	|-RVA: 0x7E1 Offset: 0x7E1 VA: 0x7E1
	|-EnumHelper.Transformer<byte, byte>..ctor
	|
	|-RVA: 0x7E2 Offset: 0x7E2 VA: 0x7E2
	|-EnumHelper.Transformer<byte, char>..ctor
	|
	|-RVA: 0x7E3 Offset: 0x7E3 VA: 0x7E3
	|-EnumHelper.Transformer<byte, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x7E4 Offset: 0x7E4 VA: 0x7E4
	|-EnumHelper.Transformer<byte, DateTime>..ctor
	|
	|-RVA: 0x7E5 Offset: 0x7E5 VA: 0x7E5
	|-EnumHelper.Transformer<byte, DateTimeOffset>..ctor
	|
	|-RVA: 0x7E6 Offset: 0x7E6 VA: 0x7E6
	|-EnumHelper.Transformer<byte, Decimal>..ctor
	|
	|-RVA: 0x7E7 Offset: 0x7E7 VA: 0x7E7
	|-EnumHelper.Transformer<byte, EmptyStruct>..ctor
	|
	|-RVA: 0x7E8 Offset: 0x7E8 VA: 0x7E8
	|-EnumHelper.Transformer<byte, double>..ctor
	|
	|-RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9
	|-EnumHelper.Transformer<byte, Guid>..ctor
	|
	|-RVA: 0x7EA Offset: 0x7EA VA: 0x7EA
	|-EnumHelper.Transformer<byte, short>..ctor
	|
	|-RVA: 0x7EB Offset: 0x7EB VA: 0x7EB
	|-EnumHelper.Transformer<byte, int>..ctor
	|
	|-RVA: 0x7EC Offset: 0x7EC VA: 0x7EC
	|-EnumHelper.Transformer<byte, long>..ctor
	|
	|-RVA: 0x7ED Offset: 0x7ED VA: 0x7ED
	|-EnumHelper.Transformer<byte, IntPtr>..ctor
	|
	|-RVA: 0x7EE Offset: 0x7EE VA: 0x7EE
	|-EnumHelper.Transformer<byte, object>..ctor
	|
	|-RVA: 0x7EF Offset: 0x7EF VA: 0x7EF
	|-EnumHelper.Transformer<byte, sbyte>..ctor
	|
	|-RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0
	|-EnumHelper.Transformer<byte, float>..ctor
	|
	|-RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1
	|-EnumHelper.Transformer<byte, TimeSpan>..ctor
	|
	|-RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2
	|-EnumHelper.Transformer<byte, ushort>..ctor
	|
	|-RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3
	|-EnumHelper.Transformer<byte, uint>..ctor
	|
	|-RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4
	|-EnumHelper.Transformer<byte, ulong>..ctor
	|
	|-RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5
	|-EnumHelper.Transformer<byte, UIntPtr>..ctor
	|
	|-RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6
	|-EnumHelper.Transformer<short, bool>..ctor
	|
	|-RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7
	|-EnumHelper.Transformer<short, byte>..ctor
	|
	|-RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8
	|-EnumHelper.Transformer<short, char>..ctor
	|
	|-RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9
	|-EnumHelper.Transformer<short, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	|-EnumHelper.Transformer<short, DateTime>..ctor
	|
	|-RVA: 0x7FB Offset: 0x7FB VA: 0x7FB
	|-EnumHelper.Transformer<short, DateTimeOffset>..ctor
	|
	|-RVA: 0x7FC Offset: 0x7FC VA: 0x7FC
	|-EnumHelper.Transformer<short, Decimal>..ctor
	|
	|-RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	|-EnumHelper.Transformer<short, EmptyStruct>..ctor
	|
	|-RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	|-EnumHelper.Transformer<short, double>..ctor
	|
	|-RVA: 0x7FF Offset: 0x7FF VA: 0x7FF
	|-EnumHelper.Transformer<short, Guid>..ctor
	|
	|-RVA: 0x800 Offset: 0x800 VA: 0x800
	|-EnumHelper.Transformer<short, short>..ctor
	|
	|-RVA: 0x801 Offset: 0x801 VA: 0x801
	|-EnumHelper.Transformer<short, int>..ctor
	|
	|-RVA: 0x802 Offset: 0x802 VA: 0x802
	|-EnumHelper.Transformer<short, long>..ctor
	|
	|-RVA: 0x803 Offset: 0x803 VA: 0x803
	|-EnumHelper.Transformer<short, IntPtr>..ctor
	|
	|-RVA: 0x804 Offset: 0x804 VA: 0x804
	|-EnumHelper.Transformer<short, object>..ctor
	|
	|-RVA: 0x805 Offset: 0x805 VA: 0x805
	|-EnumHelper.Transformer<short, sbyte>..ctor
	|
	|-RVA: 0x806 Offset: 0x806 VA: 0x806
	|-EnumHelper.Transformer<short, float>..ctor
	|
	|-RVA: 0x807 Offset: 0x807 VA: 0x807
	|-EnumHelper.Transformer<short, TimeSpan>..ctor
	|
	|-RVA: 0x808 Offset: 0x808 VA: 0x808
	|-EnumHelper.Transformer<short, ushort>..ctor
	|
	|-RVA: 0x809 Offset: 0x809 VA: 0x809
	|-EnumHelper.Transformer<short, uint>..ctor
	|
	|-RVA: 0x80A Offset: 0x80A VA: 0x80A
	|-EnumHelper.Transformer<short, ulong>..ctor
	|
	|-RVA: 0x80B Offset: 0x80B VA: 0x80B
	|-EnumHelper.Transformer<short, UIntPtr>..ctor
	|
	|-RVA: 0x80C Offset: 0x80C VA: 0x80C
	|-EnumHelper.Transformer<int, bool>..ctor
	|
	|-RVA: 0x80D Offset: 0x80D VA: 0x80D
	|-EnumHelper.Transformer<int, byte>..ctor
	|
	|-RVA: 0x80E Offset: 0x80E VA: 0x80E
	|-EnumHelper.Transformer<int, char>..ctor
	|
	|-RVA: 0x80F Offset: 0x80F VA: 0x80F
	|-EnumHelper.Transformer<int, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x810 Offset: 0x810 VA: 0x810
	|-EnumHelper.Transformer<int, DateTime>..ctor
	|
	|-RVA: 0x811 Offset: 0x811 VA: 0x811
	|-EnumHelper.Transformer<int, DateTimeOffset>..ctor
	|
	|-RVA: 0x812 Offset: 0x812 VA: 0x812
	|-EnumHelper.Transformer<int, Decimal>..ctor
	|
	|-RVA: 0x813 Offset: 0x813 VA: 0x813
	|-EnumHelper.Transformer<int, EmptyStruct>..ctor
	|
	|-RVA: 0x814 Offset: 0x814 VA: 0x814
	|-EnumHelper.Transformer<int, double>..ctor
	|
	|-RVA: 0x815 Offset: 0x815 VA: 0x815
	|-EnumHelper.Transformer<int, Guid>..ctor
	|
	|-RVA: 0x816 Offset: 0x816 VA: 0x816
	|-EnumHelper.Transformer<int, short>..ctor
	|
	|-RVA: 0x817 Offset: 0x817 VA: 0x817
	|-EnumHelper.Transformer<int, int>..ctor
	|
	|-RVA: 0x818 Offset: 0x818 VA: 0x818
	|-EnumHelper.Transformer<int, long>..ctor
	|
	|-RVA: 0x819 Offset: 0x819 VA: 0x819
	|-EnumHelper.Transformer<int, IntPtr>..ctor
	|
	|-RVA: 0x81A Offset: 0x81A VA: 0x81A
	|-EnumHelper.Transformer<int, object>..ctor
	|
	|-RVA: 0x81B Offset: 0x81B VA: 0x81B
	|-EnumHelper.Transformer<int, sbyte>..ctor
	|
	|-RVA: 0x81C Offset: 0x81C VA: 0x81C
	|-EnumHelper.Transformer<int, float>..ctor
	|
	|-RVA: 0x81D Offset: 0x81D VA: 0x81D
	|-EnumHelper.Transformer<int, TimeSpan>..ctor
	|
	|-RVA: 0x81E Offset: 0x81E VA: 0x81E
	|-EnumHelper.Transformer<int, ushort>..ctor
	|
	|-RVA: 0x81F Offset: 0x81F VA: 0x81F
	|-EnumHelper.Transformer<int, uint>..ctor
	|
	|-RVA: 0x820 Offset: 0x820 VA: 0x820
	|-EnumHelper.Transformer<int, ulong>..ctor
	|
	|-RVA: 0x821 Offset: 0x821 VA: 0x821
	|-EnumHelper.Transformer<int, UIntPtr>..ctor
	|
	|-RVA: 0x822 Offset: 0x822 VA: 0x822
	|-EnumHelper.Transformer<long, bool>..ctor
	|
	|-RVA: 0x823 Offset: 0x823 VA: 0x823
	|-EnumHelper.Transformer<long, byte>..ctor
	|
	|-RVA: 0x824 Offset: 0x824 VA: 0x824
	|-EnumHelper.Transformer<long, char>..ctor
	|
	|-RVA: 0x825 Offset: 0x825 VA: 0x825
	|-EnumHelper.Transformer<long, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x826 Offset: 0x826 VA: 0x826
	|-EnumHelper.Transformer<long, DateTime>..ctor
	|
	|-RVA: 0x827 Offset: 0x827 VA: 0x827
	|-EnumHelper.Transformer<long, DateTimeOffset>..ctor
	|
	|-RVA: 0x828 Offset: 0x828 VA: 0x828
	|-EnumHelper.Transformer<long, Decimal>..ctor
	|
	|-RVA: 0x829 Offset: 0x829 VA: 0x829
	|-EnumHelper.Transformer<long, EmptyStruct>..ctor
	|
	|-RVA: 0x82A Offset: 0x82A VA: 0x82A
	|-EnumHelper.Transformer<long, double>..ctor
	|
	|-RVA: 0x82B Offset: 0x82B VA: 0x82B
	|-EnumHelper.Transformer<long, Guid>..ctor
	|
	|-RVA: 0x82C Offset: 0x82C VA: 0x82C
	|-EnumHelper.Transformer<long, short>..ctor
	|
	|-RVA: 0x82D Offset: 0x82D VA: 0x82D
	|-EnumHelper.Transformer<long, int>..ctor
	|
	|-RVA: 0x82E Offset: 0x82E VA: 0x82E
	|-EnumHelper.Transformer<long, long>..ctor
	|
	|-RVA: 0x82F Offset: 0x82F VA: 0x82F
	|-EnumHelper.Transformer<long, IntPtr>..ctor
	|
	|-RVA: 0x830 Offset: 0x830 VA: 0x830
	|-EnumHelper.Transformer<long, object>..ctor
	|
	|-RVA: 0x831 Offset: 0x831 VA: 0x831
	|-EnumHelper.Transformer<long, sbyte>..ctor
	|
	|-RVA: 0x832 Offset: 0x832 VA: 0x832
	|-EnumHelper.Transformer<long, float>..ctor
	|
	|-RVA: 0x833 Offset: 0x833 VA: 0x833
	|-EnumHelper.Transformer<long, TimeSpan>..ctor
	|
	|-RVA: 0x834 Offset: 0x834 VA: 0x834
	|-EnumHelper.Transformer<long, ushort>..ctor
	|
	|-RVA: 0x835 Offset: 0x835 VA: 0x835
	|-EnumHelper.Transformer<long, uint>..ctor
	|
	|-RVA: 0x836 Offset: 0x836 VA: 0x836
	|-EnumHelper.Transformer<long, ulong>..ctor
	|
	|-RVA: 0x837 Offset: 0x837 VA: 0x837
	|-EnumHelper.Transformer<long, UIntPtr>..ctor
	|
	|-RVA: 0x425 Offset: 0x425 VA: 0x425
	|-EnumHelper.Transformer<object, object>..ctor
	|
	|-RVA: 0x838 Offset: 0x838 VA: 0x838
	|-EnumHelper.Transformer<sbyte, bool>..ctor
	|
	|-RVA: 0x839 Offset: 0x839 VA: 0x839
	|-EnumHelper.Transformer<sbyte, byte>..ctor
	|
	|-RVA: 0x83A Offset: 0x83A VA: 0x83A
	|-EnumHelper.Transformer<sbyte, char>..ctor
	|
	|-RVA: 0x83B Offset: 0x83B VA: 0x83B
	|-EnumHelper.Transformer<sbyte, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x83C Offset: 0x83C VA: 0x83C
	|-EnumHelper.Transformer<sbyte, DateTime>..ctor
	|
	|-RVA: 0x83D Offset: 0x83D VA: 0x83D
	|-EnumHelper.Transformer<sbyte, DateTimeOffset>..ctor
	|
	|-RVA: 0x83E Offset: 0x83E VA: 0x83E
	|-EnumHelper.Transformer<sbyte, Decimal>..ctor
	|
	|-RVA: 0x83F Offset: 0x83F VA: 0x83F
	|-EnumHelper.Transformer<sbyte, EmptyStruct>..ctor
	|
	|-RVA: 0x840 Offset: 0x840 VA: 0x840
	|-EnumHelper.Transformer<sbyte, double>..ctor
	|
	|-RVA: 0x841 Offset: 0x841 VA: 0x841
	|-EnumHelper.Transformer<sbyte, Guid>..ctor
	|
	|-RVA: 0x842 Offset: 0x842 VA: 0x842
	|-EnumHelper.Transformer<sbyte, short>..ctor
	|
	|-RVA: 0x843 Offset: 0x843 VA: 0x843
	|-EnumHelper.Transformer<sbyte, int>..ctor
	|
	|-RVA: 0x844 Offset: 0x844 VA: 0x844
	|-EnumHelper.Transformer<sbyte, long>..ctor
	|
	|-RVA: 0x845 Offset: 0x845 VA: 0x845
	|-EnumHelper.Transformer<sbyte, IntPtr>..ctor
	|
	|-RVA: 0x846 Offset: 0x846 VA: 0x846
	|-EnumHelper.Transformer<sbyte, object>..ctor
	|
	|-RVA: 0x847 Offset: 0x847 VA: 0x847
	|-EnumHelper.Transformer<sbyte, sbyte>..ctor
	|
	|-RVA: 0x848 Offset: 0x848 VA: 0x848
	|-EnumHelper.Transformer<sbyte, float>..ctor
	|
	|-RVA: 0x849 Offset: 0x849 VA: 0x849
	|-EnumHelper.Transformer<sbyte, TimeSpan>..ctor
	|
	|-RVA: 0x84A Offset: 0x84A VA: 0x84A
	|-EnumHelper.Transformer<sbyte, ushort>..ctor
	|
	|-RVA: 0x84B Offset: 0x84B VA: 0x84B
	|-EnumHelper.Transformer<sbyte, uint>..ctor
	|
	|-RVA: 0x84C Offset: 0x84C VA: 0x84C
	|-EnumHelper.Transformer<sbyte, ulong>..ctor
	|
	|-RVA: 0x84D Offset: 0x84D VA: 0x84D
	|-EnumHelper.Transformer<sbyte, UIntPtr>..ctor
	|
	|-RVA: 0x84E Offset: 0x84E VA: 0x84E
	|-EnumHelper.Transformer<ushort, bool>..ctor
	|
	|-RVA: 0x84F Offset: 0x84F VA: 0x84F
	|-EnumHelper.Transformer<ushort, byte>..ctor
	|
	|-RVA: 0x850 Offset: 0x850 VA: 0x850
	|-EnumHelper.Transformer<ushort, char>..ctor
	|
	|-RVA: 0x851 Offset: 0x851 VA: 0x851
	|-EnumHelper.Transformer<ushort, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x852 Offset: 0x852 VA: 0x852
	|-EnumHelper.Transformer<ushort, DateTime>..ctor
	|
	|-RVA: 0x853 Offset: 0x853 VA: 0x853
	|-EnumHelper.Transformer<ushort, DateTimeOffset>..ctor
	|
	|-RVA: 0x854 Offset: 0x854 VA: 0x854
	|-EnumHelper.Transformer<ushort, Decimal>..ctor
	|
	|-RVA: 0x855 Offset: 0x855 VA: 0x855
	|-EnumHelper.Transformer<ushort, EmptyStruct>..ctor
	|
	|-RVA: 0x856 Offset: 0x856 VA: 0x856
	|-EnumHelper.Transformer<ushort, double>..ctor
	|
	|-RVA: 0x857 Offset: 0x857 VA: 0x857
	|-EnumHelper.Transformer<ushort, Guid>..ctor
	|
	|-RVA: 0x858 Offset: 0x858 VA: 0x858
	|-EnumHelper.Transformer<ushort, short>..ctor
	|
	|-RVA: 0x859 Offset: 0x859 VA: 0x859
	|-EnumHelper.Transformer<ushort, int>..ctor
	|
	|-RVA: 0x85A Offset: 0x85A VA: 0x85A
	|-EnumHelper.Transformer<ushort, long>..ctor
	|
	|-RVA: 0x85B Offset: 0x85B VA: 0x85B
	|-EnumHelper.Transformer<ushort, IntPtr>..ctor
	|
	|-RVA: 0x85C Offset: 0x85C VA: 0x85C
	|-EnumHelper.Transformer<ushort, object>..ctor
	|
	|-RVA: 0x85D Offset: 0x85D VA: 0x85D
	|-EnumHelper.Transformer<ushort, sbyte>..ctor
	|
	|-RVA: 0x85E Offset: 0x85E VA: 0x85E
	|-EnumHelper.Transformer<ushort, float>..ctor
	|
	|-RVA: 0x85F Offset: 0x85F VA: 0x85F
	|-EnumHelper.Transformer<ushort, TimeSpan>..ctor
	|
	|-RVA: 0x860 Offset: 0x860 VA: 0x860
	|-EnumHelper.Transformer<ushort, ushort>..ctor
	|
	|-RVA: 0x861 Offset: 0x861 VA: 0x861
	|-EnumHelper.Transformer<ushort, uint>..ctor
	|
	|-RVA: 0x862 Offset: 0x862 VA: 0x862
	|-EnumHelper.Transformer<ushort, ulong>..ctor
	|
	|-RVA: 0x863 Offset: 0x863 VA: 0x863
	|-EnumHelper.Transformer<ushort, UIntPtr>..ctor
	|
	|-RVA: 0x864 Offset: 0x864 VA: 0x864
	|-EnumHelper.Transformer<uint, bool>..ctor
	|
	|-RVA: 0x865 Offset: 0x865 VA: 0x865
	|-EnumHelper.Transformer<uint, byte>..ctor
	|
	|-RVA: 0x866 Offset: 0x866 VA: 0x866
	|-EnumHelper.Transformer<uint, char>..ctor
	|
	|-RVA: 0x867 Offset: 0x867 VA: 0x867
	|-EnumHelper.Transformer<uint, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x868 Offset: 0x868 VA: 0x868
	|-EnumHelper.Transformer<uint, DateTime>..ctor
	|
	|-RVA: 0x869 Offset: 0x869 VA: 0x869
	|-EnumHelper.Transformer<uint, DateTimeOffset>..ctor
	|
	|-RVA: 0x86A Offset: 0x86A VA: 0x86A
	|-EnumHelper.Transformer<uint, Decimal>..ctor
	|
	|-RVA: 0x86B Offset: 0x86B VA: 0x86B
	|-EnumHelper.Transformer<uint, EmptyStruct>..ctor
	|
	|-RVA: 0x86C Offset: 0x86C VA: 0x86C
	|-EnumHelper.Transformer<uint, double>..ctor
	|
	|-RVA: 0x86D Offset: 0x86D VA: 0x86D
	|-EnumHelper.Transformer<uint, Guid>..ctor
	|
	|-RVA: 0x86E Offset: 0x86E VA: 0x86E
	|-EnumHelper.Transformer<uint, short>..ctor
	|
	|-RVA: 0x86F Offset: 0x86F VA: 0x86F
	|-EnumHelper.Transformer<uint, int>..ctor
	|
	|-RVA: 0x870 Offset: 0x870 VA: 0x870
	|-EnumHelper.Transformer<uint, long>..ctor
	|
	|-RVA: 0x871 Offset: 0x871 VA: 0x871
	|-EnumHelper.Transformer<uint, IntPtr>..ctor
	|
	|-RVA: 0x872 Offset: 0x872 VA: 0x872
	|-EnumHelper.Transformer<uint, object>..ctor
	|
	|-RVA: 0x873 Offset: 0x873 VA: 0x873
	|-EnumHelper.Transformer<uint, sbyte>..ctor
	|
	|-RVA: 0x874 Offset: 0x874 VA: 0x874
	|-EnumHelper.Transformer<uint, float>..ctor
	|
	|-RVA: 0x875 Offset: 0x875 VA: 0x875
	|-EnumHelper.Transformer<uint, TimeSpan>..ctor
	|
	|-RVA: 0x876 Offset: 0x876 VA: 0x876
	|-EnumHelper.Transformer<uint, ushort>..ctor
	|
	|-RVA: 0x877 Offset: 0x877 VA: 0x877
	|-EnumHelper.Transformer<uint, uint>..ctor
	|
	|-RVA: 0x878 Offset: 0x878 VA: 0x878
	|-EnumHelper.Transformer<uint, ulong>..ctor
	|
	|-RVA: 0x879 Offset: 0x879 VA: 0x879
	|-EnumHelper.Transformer<uint, UIntPtr>..ctor
	|
	|-RVA: 0x87A Offset: 0x87A VA: 0x87A
	|-EnumHelper.Transformer<ulong, bool>..ctor
	|
	|-RVA: 0x87B Offset: 0x87B VA: 0x87B
	|-EnumHelper.Transformer<ulong, byte>..ctor
	|
	|-RVA: 0x87C Offset: 0x87C VA: 0x87C
	|-EnumHelper.Transformer<ulong, char>..ctor
	|
	|-RVA: 0x87D Offset: 0x87D VA: 0x87D
	|-EnumHelper.Transformer<ulong, KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x87E Offset: 0x87E VA: 0x87E
	|-EnumHelper.Transformer<ulong, DateTime>..ctor
	|
	|-RVA: 0x87F Offset: 0x87F VA: 0x87F
	|-EnumHelper.Transformer<ulong, DateTimeOffset>..ctor
	|
	|-RVA: 0x880 Offset: 0x880 VA: 0x880
	|-EnumHelper.Transformer<ulong, Decimal>..ctor
	|
	|-RVA: 0x881 Offset: 0x881 VA: 0x881
	|-EnumHelper.Transformer<ulong, EmptyStruct>..ctor
	|
	|-RVA: 0x882 Offset: 0x882 VA: 0x882
	|-EnumHelper.Transformer<ulong, double>..ctor
	|
	|-RVA: 0x883 Offset: 0x883 VA: 0x883
	|-EnumHelper.Transformer<ulong, Guid>..ctor
	|
	|-RVA: 0x884 Offset: 0x884 VA: 0x884
	|-EnumHelper.Transformer<ulong, short>..ctor
	|
	|-RVA: 0x885 Offset: 0x885 VA: 0x885
	|-EnumHelper.Transformer<ulong, int>..ctor
	|
	|-RVA: 0x886 Offset: 0x886 VA: 0x886
	|-EnumHelper.Transformer<ulong, long>..ctor
	|
	|-RVA: 0x887 Offset: 0x887 VA: 0x887
	|-EnumHelper.Transformer<ulong, IntPtr>..ctor
	|
	|-RVA: 0x888 Offset: 0x888 VA: 0x888
	|-EnumHelper.Transformer<ulong, object>..ctor
	|
	|-RVA: 0x889 Offset: 0x889 VA: 0x889
	|-EnumHelper.Transformer<ulong, sbyte>..ctor
	|
	|-RVA: 0x88A Offset: 0x88A VA: 0x88A
	|-EnumHelper.Transformer<ulong, float>..ctor
	|
	|-RVA: 0x88B Offset: 0x88B VA: 0x88B
	|-EnumHelper.Transformer<ulong, TimeSpan>..ctor
	|
	|-RVA: 0x88C Offset: 0x88C VA: 0x88C
	|-EnumHelper.Transformer<ulong, ushort>..ctor
	|
	|-RVA: 0x88D Offset: 0x88D VA: 0x88D
	|-EnumHelper.Transformer<ulong, uint>..ctor
	|
	|-RVA: 0x88E Offset: 0x88E VA: 0x88E
	|-EnumHelper.Transformer<ulong, ulong>..ctor
	|
	|-RVA: 0x88F Offset: 0x88F VA: 0x88F
	|-EnumHelper.Transformer<ulong, UIntPtr>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual UnderlyingType Invoke(ValueType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8
	|-EnumHelper.Transformer<byte, bool>.Invoke
	|
	|-RVA: 0x9DA Offset: 0x9DA VA: 0x9DA
	|-EnumHelper.Transformer<byte, byte>.Invoke
	|
	|-RVA: 0x9DC Offset: 0x9DC VA: 0x9DC
	|-EnumHelper.Transformer<byte, char>.Invoke
	|
	|-RVA: 0x9DE Offset: 0x9DE VA: 0x9DE
	|-EnumHelper.Transformer<byte, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0x9E0 Offset: 0x9E0 VA: 0x9E0
	|-EnumHelper.Transformer<byte, DateTime>.Invoke
	|
	|-RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2
	|-EnumHelper.Transformer<byte, DateTimeOffset>.Invoke
	|
	|-RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4
	|-EnumHelper.Transformer<byte, Decimal>.Invoke
	|
	|-RVA: 0x9E6 Offset: 0x9E6 VA: 0x9E6
	|-EnumHelper.Transformer<byte, EmptyStruct>.Invoke
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-EnumHelper.Transformer<byte, double>.Invoke
	|
	|-RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	|-EnumHelper.Transformer<byte, Guid>.Invoke
	|
	|-RVA: 0x9EB Offset: 0x9EB VA: 0x9EB
	|-EnumHelper.Transformer<byte, short>.Invoke
	|
	|-RVA: 0x9ED Offset: 0x9ED VA: 0x9ED
	|-EnumHelper.Transformer<byte, int>.Invoke
	|
	|-RVA: 0x32 Offset: 0x32 VA: 0x32
	|-EnumHelper.Transformer<byte, long>.Invoke
	|
	|-RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	|-EnumHelper.Transformer<byte, IntPtr>.Invoke
	|
	|-RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2
	|-EnumHelper.Transformer<byte, object>.Invoke
	|
	|-RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	|-EnumHelper.Transformer<byte, sbyte>.Invoke
	|
	|-RVA: 0xF Offset: 0xF VA: 0xF
	|-EnumHelper.Transformer<byte, float>.Invoke
	|-EnumHelper.Transformer<ushort, double>.Invoke
	|
	|-RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	|-EnumHelper.Transformer<byte, TimeSpan>.Invoke
	|
	|-RVA: 0x9F9 Offset: 0x9F9 VA: 0x9F9
	|-EnumHelper.Transformer<byte, ushort>.Invoke
	|
	|-RVA: 0x9FB Offset: 0x9FB VA: 0x9FB
	|-EnumHelper.Transformer<byte, uint>.Invoke
	|
	|-RVA: 0x33 Offset: 0x33 VA: 0x33
	|-EnumHelper.Transformer<byte, ulong>.Invoke
	|
	|-RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	|-EnumHelper.Transformer<byte, UIntPtr>.Invoke
	|
	|-RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	|-EnumHelper.Transformer<short, bool>.Invoke
	|
	|-RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	|-EnumHelper.Transformer<short, byte>.Invoke
	|
	|-RVA: 0xA04 Offset: 0xA04 VA: 0xA04
	|-EnumHelper.Transformer<short, char>.Invoke
	|
	|-RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	|-EnumHelper.Transformer<short, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0xA08 Offset: 0xA08 VA: 0xA08
	|-EnumHelper.Transformer<short, DateTime>.Invoke
	|
	|-RVA: 0xA0A Offset: 0xA0A VA: 0xA0A
	|-EnumHelper.Transformer<short, DateTimeOffset>.Invoke
	|
	|-RVA: 0xA0C Offset: 0xA0C VA: 0xA0C
	|-EnumHelper.Transformer<short, Decimal>.Invoke
	|
	|-RVA: 0xA0E Offset: 0xA0E VA: 0xA0E
	|-EnumHelper.Transformer<short, EmptyStruct>.Invoke
	|
	|-RVA: 0xC Offset: 0xC VA: 0xC
	|-EnumHelper.Transformer<short, double>.Invoke
	|
	|-RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	|-EnumHelper.Transformer<short, Guid>.Invoke
	|
	|-RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	|-EnumHelper.Transformer<short, short>.Invoke
	|
	|-RVA: 0xA15 Offset: 0xA15 VA: 0xA15
	|-EnumHelper.Transformer<short, int>.Invoke
	|
	|-RVA: 0x34 Offset: 0x34 VA: 0x34
	|-EnumHelper.Transformer<short, long>.Invoke
	|
	|-RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	|-EnumHelper.Transformer<short, IntPtr>.Invoke
	|
	|-RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	|-EnumHelper.Transformer<short, object>.Invoke
	|
	|-RVA: 0xA1C Offset: 0xA1C VA: 0xA1C
	|-EnumHelper.Transformer<short, sbyte>.Invoke
	|
	|-RVA: 0x10 Offset: 0x10 VA: 0x10
	|-EnumHelper.Transformer<short, float>.Invoke
	|-EnumHelper.Transformer<uint, double>.Invoke
	|
	|-RVA: 0xA1F Offset: 0xA1F VA: 0xA1F
	|-EnumHelper.Transformer<short, TimeSpan>.Invoke
	|
	|-RVA: 0xA21 Offset: 0xA21 VA: 0xA21
	|-EnumHelper.Transformer<short, ushort>.Invoke
	|
	|-RVA: 0xA23 Offset: 0xA23 VA: 0xA23
	|-EnumHelper.Transformer<short, uint>.Invoke
	|
	|-RVA: 0x35 Offset: 0x35 VA: 0x35
	|-EnumHelper.Transformer<short, ulong>.Invoke
	|
	|-RVA: 0xA26 Offset: 0xA26 VA: 0xA26
	|-EnumHelper.Transformer<short, UIntPtr>.Invoke
	|
	|-RVA: 0xA28 Offset: 0xA28 VA: 0xA28
	|-EnumHelper.Transformer<int, bool>.Invoke
	|
	|-RVA: 0xA2A Offset: 0xA2A VA: 0xA2A
	|-EnumHelper.Transformer<int, byte>.Invoke
	|
	|-RVA: 0xA2C Offset: 0xA2C VA: 0xA2C
	|-EnumHelper.Transformer<int, char>.Invoke
	|
	|-RVA: 0xA2E Offset: 0xA2E VA: 0xA2E
	|-EnumHelper.Transformer<int, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0xA30 Offset: 0xA30 VA: 0xA30
	|-EnumHelper.Transformer<int, DateTime>.Invoke
	|
	|-RVA: 0xA32 Offset: 0xA32 VA: 0xA32
	|-EnumHelper.Transformer<int, DateTimeOffset>.Invoke
	|
	|-RVA: 0xA34 Offset: 0xA34 VA: 0xA34
	|-EnumHelper.Transformer<int, Decimal>.Invoke
	|
	|-RVA: 0xA36 Offset: 0xA36 VA: 0xA36
	|-EnumHelper.Transformer<int, EmptyStruct>.Invoke
	|
	|-RVA: 0xD Offset: 0xD VA: 0xD
	|-EnumHelper.Transformer<int, double>.Invoke
	|
	|-RVA: 0xA39 Offset: 0xA39 VA: 0xA39
	|-EnumHelper.Transformer<int, Guid>.Invoke
	|
	|-RVA: 0xA3B Offset: 0xA3B VA: 0xA3B
	|-EnumHelper.Transformer<int, short>.Invoke
	|
	|-RVA: 0xA3D Offset: 0xA3D VA: 0xA3D
	|-EnumHelper.Transformer<int, int>.Invoke
	|
	|-RVA: 0x36 Offset: 0x36 VA: 0x36
	|-EnumHelper.Transformer<int, long>.Invoke
	|
	|-RVA: 0xA40 Offset: 0xA40 VA: 0xA40
	|-EnumHelper.Transformer<int, IntPtr>.Invoke
	|
	|-RVA: 0xA42 Offset: 0xA42 VA: 0xA42
	|-EnumHelper.Transformer<int, object>.Invoke
	|
	|-RVA: 0xA44 Offset: 0xA44 VA: 0xA44
	|-EnumHelper.Transformer<int, sbyte>.Invoke
	|
	|-RVA: 0x11 Offset: 0x11 VA: 0x11
	|-EnumHelper.Transformer<int, float>.Invoke
	|
	|-RVA: 0xA47 Offset: 0xA47 VA: 0xA47
	|-EnumHelper.Transformer<int, TimeSpan>.Invoke
	|
	|-RVA: 0xA49 Offset: 0xA49 VA: 0xA49
	|-EnumHelper.Transformer<int, ushort>.Invoke
	|
	|-RVA: 0xA4B Offset: 0xA4B VA: 0xA4B
	|-EnumHelper.Transformer<int, uint>.Invoke
	|
	|-RVA: 0x37 Offset: 0x37 VA: 0x37
	|-EnumHelper.Transformer<int, ulong>.Invoke
	|
	|-RVA: 0xA4E Offset: 0xA4E VA: 0xA4E
	|-EnumHelper.Transformer<int, UIntPtr>.Invoke
	|
	|-RVA: 0x92 Offset: 0x92 VA: 0x92
	|-EnumHelper.Transformer<long, bool>.Invoke
	|
	|-RVA: 0x94 Offset: 0x94 VA: 0x94
	|-EnumHelper.Transformer<long, byte>.Invoke
	|
	|-RVA: 0x96 Offset: 0x96 VA: 0x96
	|-EnumHelper.Transformer<long, char>.Invoke
	|
	|-RVA: 0x98 Offset: 0x98 VA: 0x98
	|-EnumHelper.Transformer<long, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0x9A Offset: 0x9A VA: 0x9A
	|-EnumHelper.Transformer<long, DateTime>.Invoke
	|
	|-RVA: 0x9C Offset: 0x9C VA: 0x9C
	|-EnumHelper.Transformer<long, DateTimeOffset>.Invoke
	|
	|-RVA: 0x9E Offset: 0x9E VA: 0x9E
	|-EnumHelper.Transformer<long, Decimal>.Invoke
	|
	|-RVA: 0xA0 Offset: 0xA0 VA: 0xA0
	|-EnumHelper.Transformer<long, EmptyStruct>.Invoke
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-EnumHelper.Transformer<long, double>.Invoke
	|
	|-RVA: 0xA3 Offset: 0xA3 VA: 0xA3
	|-EnumHelper.Transformer<long, Guid>.Invoke
	|
	|-RVA: 0xA5 Offset: 0xA5 VA: 0xA5
	|-EnumHelper.Transformer<long, short>.Invoke
	|
	|-RVA: 0xA7 Offset: 0xA7 VA: 0xA7
	|-EnumHelper.Transformer<long, int>.Invoke
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-EnumHelper.Transformer<long, long>.Invoke
	|-EnumHelper.Transformer<ulong, double>.Invoke
	|
	|-RVA: 0xAA Offset: 0xAA VA: 0xAA
	|-EnumHelper.Transformer<long, IntPtr>.Invoke
	|
	|-RVA: 0xAC Offset: 0xAC VA: 0xAC
	|-EnumHelper.Transformer<long, object>.Invoke
	|
	|-RVA: 0xAE Offset: 0xAE VA: 0xAE
	|-EnumHelper.Transformer<long, sbyte>.Invoke
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-EnumHelper.Transformer<long, float>.Invoke
	|
	|-RVA: 0xB1 Offset: 0xB1 VA: 0xB1
	|-EnumHelper.Transformer<long, TimeSpan>.Invoke
	|
	|-RVA: 0xB3 Offset: 0xB3 VA: 0xB3
	|-EnumHelper.Transformer<long, ushort>.Invoke
	|
	|-RVA: 0xB5 Offset: 0xB5 VA: 0xB5
	|-EnumHelper.Transformer<long, uint>.Invoke
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-EnumHelper.Transformer<long, ulong>.Invoke
	|
	|-RVA: 0xB8 Offset: 0xB8 VA: 0xB8
	|-EnumHelper.Transformer<long, UIntPtr>.Invoke
	|
	|-RVA: 0x687 Offset: 0x687 VA: 0x687
	|-EnumHelper.Transformer<object, object>.Invoke
	|
	|-RVA: 0xA50 Offset: 0xA50 VA: 0xA50
	|-EnumHelper.Transformer<sbyte, bool>.Invoke
	|
	|-RVA: 0xA52 Offset: 0xA52 VA: 0xA52
	|-EnumHelper.Transformer<sbyte, byte>.Invoke
	|
	|-RVA: 0xA54 Offset: 0xA54 VA: 0xA54
	|-EnumHelper.Transformer<sbyte, char>.Invoke
	|
	|-RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	|-EnumHelper.Transformer<sbyte, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	|-EnumHelper.Transformer<sbyte, DateTime>.Invoke
	|
	|-RVA: 0xA5A Offset: 0xA5A VA: 0xA5A
	|-EnumHelper.Transformer<sbyte, DateTimeOffset>.Invoke
	|
	|-RVA: 0xA5C Offset: 0xA5C VA: 0xA5C
	|-EnumHelper.Transformer<sbyte, Decimal>.Invoke
	|
	|-RVA: 0xA5E Offset: 0xA5E VA: 0xA5E
	|-EnumHelper.Transformer<sbyte, EmptyStruct>.Invoke
	|
	|-RVA: 0xE Offset: 0xE VA: 0xE
	|-EnumHelper.Transformer<sbyte, double>.Invoke
	|
	|-RVA: 0xA61 Offset: 0xA61 VA: 0xA61
	|-EnumHelper.Transformer<sbyte, Guid>.Invoke
	|
	|-RVA: 0xA63 Offset: 0xA63 VA: 0xA63
	|-EnumHelper.Transformer<sbyte, short>.Invoke
	|
	|-RVA: 0xA65 Offset: 0xA65 VA: 0xA65
	|-EnumHelper.Transformer<sbyte, int>.Invoke
	|
	|-RVA: 0x38 Offset: 0x38 VA: 0x38
	|-EnumHelper.Transformer<sbyte, long>.Invoke
	|
	|-RVA: 0xA68 Offset: 0xA68 VA: 0xA68
	|-EnumHelper.Transformer<sbyte, IntPtr>.Invoke
	|
	|-RVA: 0xA6A Offset: 0xA6A VA: 0xA6A
	|-EnumHelper.Transformer<sbyte, object>.Invoke
	|
	|-RVA: 0xA6C Offset: 0xA6C VA: 0xA6C
	|-EnumHelper.Transformer<sbyte, sbyte>.Invoke
	|
	|-RVA: 0x12 Offset: 0x12 VA: 0x12
	|-EnumHelper.Transformer<sbyte, float>.Invoke
	|
	|-RVA: 0xA6F Offset: 0xA6F VA: 0xA6F
	|-EnumHelper.Transformer<sbyte, TimeSpan>.Invoke
	|
	|-RVA: 0xA71 Offset: 0xA71 VA: 0xA71
	|-EnumHelper.Transformer<sbyte, ushort>.Invoke
	|
	|-RVA: 0xA73 Offset: 0xA73 VA: 0xA73
	|-EnumHelper.Transformer<sbyte, uint>.Invoke
	|
	|-RVA: 0x39 Offset: 0x39 VA: 0x39
	|-EnumHelper.Transformer<sbyte, ulong>.Invoke
	|
	|-RVA: 0xA76 Offset: 0xA76 VA: 0xA76
	|-EnumHelper.Transformer<sbyte, UIntPtr>.Invoke
	|
	|-RVA: 0xA78 Offset: 0xA78 VA: 0xA78
	|-EnumHelper.Transformer<ushort, bool>.Invoke
	|
	|-RVA: 0xA7A Offset: 0xA7A VA: 0xA7A
	|-EnumHelper.Transformer<ushort, byte>.Invoke
	|
	|-RVA: 0xA7C Offset: 0xA7C VA: 0xA7C
	|-EnumHelper.Transformer<ushort, char>.Invoke
	|
	|-RVA: 0xA7E Offset: 0xA7E VA: 0xA7E
	|-EnumHelper.Transformer<ushort, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0xA80 Offset: 0xA80 VA: 0xA80
	|-EnumHelper.Transformer<ushort, DateTime>.Invoke
	|
	|-RVA: 0xA82 Offset: 0xA82 VA: 0xA82
	|-EnumHelper.Transformer<ushort, DateTimeOffset>.Invoke
	|
	|-RVA: 0xA84 Offset: 0xA84 VA: 0xA84
	|-EnumHelper.Transformer<ushort, Decimal>.Invoke
	|
	|-RVA: 0xA86 Offset: 0xA86 VA: 0xA86
	|-EnumHelper.Transformer<ushort, EmptyStruct>.Invoke
	|
	|-RVA: 0xA89 Offset: 0xA89 VA: 0xA89
	|-EnumHelper.Transformer<ushort, Guid>.Invoke
	|
	|-RVA: 0xA8B Offset: 0xA8B VA: 0xA8B
	|-EnumHelper.Transformer<ushort, short>.Invoke
	|
	|-RVA: 0xA8D Offset: 0xA8D VA: 0xA8D
	|-EnumHelper.Transformer<ushort, int>.Invoke
	|
	|-RVA: 0x3A Offset: 0x3A VA: 0x3A
	|-EnumHelper.Transformer<ushort, long>.Invoke
	|
	|-RVA: 0xA90 Offset: 0xA90 VA: 0xA90
	|-EnumHelper.Transformer<ushort, IntPtr>.Invoke
	|
	|-RVA: 0xA92 Offset: 0xA92 VA: 0xA92
	|-EnumHelper.Transformer<ushort, object>.Invoke
	|
	|-RVA: 0xA94 Offset: 0xA94 VA: 0xA94
	|-EnumHelper.Transformer<ushort, sbyte>.Invoke
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-EnumHelper.Transformer<ushort, float>.Invoke
	|
	|-RVA: 0xA97 Offset: 0xA97 VA: 0xA97
	|-EnumHelper.Transformer<ushort, TimeSpan>.Invoke
	|
	|-RVA: 0xA99 Offset: 0xA99 VA: 0xA99
	|-EnumHelper.Transformer<ushort, ushort>.Invoke
	|
	|-RVA: 0xA9B Offset: 0xA9B VA: 0xA9B
	|-EnumHelper.Transformer<ushort, uint>.Invoke
	|
	|-RVA: 0x3B Offset: 0x3B VA: 0x3B
	|-EnumHelper.Transformer<ushort, ulong>.Invoke
	|
	|-RVA: 0xA9E Offset: 0xA9E VA: 0xA9E
	|-EnumHelper.Transformer<ushort, UIntPtr>.Invoke
	|
	|-RVA: 0xAA0 Offset: 0xAA0 VA: 0xAA0
	|-EnumHelper.Transformer<uint, bool>.Invoke
	|
	|-RVA: 0xAA2 Offset: 0xAA2 VA: 0xAA2
	|-EnumHelper.Transformer<uint, byte>.Invoke
	|
	|-RVA: 0xAA4 Offset: 0xAA4 VA: 0xAA4
	|-EnumHelper.Transformer<uint, char>.Invoke
	|
	|-RVA: 0xAA6 Offset: 0xAA6 VA: 0xAA6
	|-EnumHelper.Transformer<uint, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0xAA8 Offset: 0xAA8 VA: 0xAA8
	|-EnumHelper.Transformer<uint, DateTime>.Invoke
	|
	|-RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	|-EnumHelper.Transformer<uint, DateTimeOffset>.Invoke
	|
	|-RVA: 0xAAC Offset: 0xAAC VA: 0xAAC
	|-EnumHelper.Transformer<uint, Decimal>.Invoke
	|
	|-RVA: 0xAAE Offset: 0xAAE VA: 0xAAE
	|-EnumHelper.Transformer<uint, EmptyStruct>.Invoke
	|
	|-RVA: 0xAB1 Offset: 0xAB1 VA: 0xAB1
	|-EnumHelper.Transformer<uint, Guid>.Invoke
	|
	|-RVA: 0xAB3 Offset: 0xAB3 VA: 0xAB3
	|-EnumHelper.Transformer<uint, short>.Invoke
	|
	|-RVA: 0xAB5 Offset: 0xAB5 VA: 0xAB5
	|-EnumHelper.Transformer<uint, int>.Invoke
	|
	|-RVA: 0x3C Offset: 0x3C VA: 0x3C
	|-EnumHelper.Transformer<uint, long>.Invoke
	|
	|-RVA: 0xAB8 Offset: 0xAB8 VA: 0xAB8
	|-EnumHelper.Transformer<uint, IntPtr>.Invoke
	|
	|-RVA: 0xABA Offset: 0xABA VA: 0xABA
	|-EnumHelper.Transformer<uint, object>.Invoke
	|
	|-RVA: 0xABC Offset: 0xABC VA: 0xABC
	|-EnumHelper.Transformer<uint, sbyte>.Invoke
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-EnumHelper.Transformer<uint, float>.Invoke
	|
	|-RVA: 0xABF Offset: 0xABF VA: 0xABF
	|-EnumHelper.Transformer<uint, TimeSpan>.Invoke
	|
	|-RVA: 0xAC1 Offset: 0xAC1 VA: 0xAC1
	|-EnumHelper.Transformer<uint, ushort>.Invoke
	|
	|-RVA: 0xAC3 Offset: 0xAC3 VA: 0xAC3
	|-EnumHelper.Transformer<uint, uint>.Invoke
	|
	|-RVA: 0x3D Offset: 0x3D VA: 0x3D
	|-EnumHelper.Transformer<uint, ulong>.Invoke
	|
	|-RVA: 0xAC6 Offset: 0xAC6 VA: 0xAC6
	|-EnumHelper.Transformer<uint, UIntPtr>.Invoke
	|
	|-RVA: 0xBA Offset: 0xBA VA: 0xBA
	|-EnumHelper.Transformer<ulong, bool>.Invoke
	|
	|-RVA: 0xBC Offset: 0xBC VA: 0xBC
	|-EnumHelper.Transformer<ulong, byte>.Invoke
	|
	|-RVA: 0xBE Offset: 0xBE VA: 0xBE
	|-EnumHelper.Transformer<ulong, char>.Invoke
	|
	|-RVA: 0xC0 Offset: 0xC0 VA: 0xC0
	|-EnumHelper.Transformer<ulong, KeyValuePair<object, object>>.Invoke
	|
	|-RVA: 0xC2 Offset: 0xC2 VA: 0xC2
	|-EnumHelper.Transformer<ulong, DateTime>.Invoke
	|
	|-RVA: 0xC4 Offset: 0xC4 VA: 0xC4
	|-EnumHelper.Transformer<ulong, DateTimeOffset>.Invoke
	|
	|-RVA: 0xC6 Offset: 0xC6 VA: 0xC6
	|-EnumHelper.Transformer<ulong, Decimal>.Invoke
	|
	|-RVA: 0xC8 Offset: 0xC8 VA: 0xC8
	|-EnumHelper.Transformer<ulong, EmptyStruct>.Invoke
	|
	|-RVA: 0xCB Offset: 0xCB VA: 0xCB
	|-EnumHelper.Transformer<ulong, Guid>.Invoke
	|
	|-RVA: 0xCD Offset: 0xCD VA: 0xCD
	|-EnumHelper.Transformer<ulong, short>.Invoke
	|
	|-RVA: 0xCF Offset: 0xCF VA: 0xCF
	|-EnumHelper.Transformer<ulong, int>.Invoke
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-EnumHelper.Transformer<ulong, long>.Invoke
	|
	|-RVA: 0xD2 Offset: 0xD2 VA: 0xD2
	|-EnumHelper.Transformer<ulong, IntPtr>.Invoke
	|
	|-RVA: 0xD4 Offset: 0xD4 VA: 0xD4
	|-EnumHelper.Transformer<ulong, object>.Invoke
	|
	|-RVA: 0xD6 Offset: 0xD6 VA: 0xD6
	|-EnumHelper.Transformer<ulong, sbyte>.Invoke
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-EnumHelper.Transformer<ulong, float>.Invoke
	|
	|-RVA: 0xD9 Offset: 0xD9 VA: 0xD9
	|-EnumHelper.Transformer<ulong, TimeSpan>.Invoke
	|
	|-RVA: 0xDB Offset: 0xDB VA: 0xDB
	|-EnumHelper.Transformer<ulong, ushort>.Invoke
	|
	|-RVA: 0xDD Offset: 0xDD VA: 0xDD
	|-EnumHelper.Transformer<ulong, uint>.Invoke
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-EnumHelper.Transformer<ulong, ulong>.Invoke
	|
	|-RVA: 0xE0 Offset: 0xE0 VA: 0xE0
	|-EnumHelper.Transformer<ulong, UIntPtr>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(ValueType value, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4
	|-EnumHelper.Transformer<byte, bool>.BeginInvoke
	|
	|-RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5
	|-EnumHelper.Transformer<byte, byte>.BeginInvoke
	|
	|-RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6
	|-EnumHelper.Transformer<byte, char>.BeginInvoke
	|
	|-RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7
	|-EnumHelper.Transformer<byte, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8
	|-EnumHelper.Transformer<byte, DateTime>.BeginInvoke
	|
	|-RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9
	|-EnumHelper.Transformer<byte, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x1DA Offset: 0x1DA VA: 0x1DA
	|-EnumHelper.Transformer<byte, Decimal>.BeginInvoke
	|
	|-RVA: 0x1DB Offset: 0x1DB VA: 0x1DB
	|-EnumHelper.Transformer<byte, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-EnumHelper.Transformer<byte, double>.BeginInvoke
	|-EnumHelper.Transformer<byte, float>.BeginInvoke
	|
	|-RVA: 0x1DC Offset: 0x1DC VA: 0x1DC
	|-EnumHelper.Transformer<byte, Guid>.BeginInvoke
	|
	|-RVA: 0x1DD Offset: 0x1DD VA: 0x1DD
	|-EnumHelper.Transformer<byte, short>.BeginInvoke
	|
	|-RVA: 0x1DE Offset: 0x1DE VA: 0x1DE
	|-EnumHelper.Transformer<byte, int>.BeginInvoke
	|
	|-RVA: 0xC Offset: 0xC VA: 0xC
	|-EnumHelper.Transformer<byte, long>.BeginInvoke
	|
	|-RVA: 0x1DF Offset: 0x1DF VA: 0x1DF
	|-EnumHelper.Transformer<byte, IntPtr>.BeginInvoke
	|
	|-RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0
	|-EnumHelper.Transformer<byte, object>.BeginInvoke
	|
	|-RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1
	|-EnumHelper.Transformer<byte, sbyte>.BeginInvoke
	|
	|-RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2
	|-EnumHelper.Transformer<byte, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3
	|-EnumHelper.Transformer<byte, ushort>.BeginInvoke
	|
	|-RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4
	|-EnumHelper.Transformer<byte, uint>.BeginInvoke
	|
	|-RVA: 0xD Offset: 0xD VA: 0xD
	|-EnumHelper.Transformer<byte, ulong>.BeginInvoke
	|
	|-RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5
	|-EnumHelper.Transformer<byte, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6
	|-EnumHelper.Transformer<short, bool>.BeginInvoke
	|
	|-RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7
	|-EnumHelper.Transformer<short, byte>.BeginInvoke
	|
	|-RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8
	|-EnumHelper.Transformer<short, char>.BeginInvoke
	|
	|-RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9
	|-EnumHelper.Transformer<short, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x1EA Offset: 0x1EA VA: 0x1EA
	|-EnumHelper.Transformer<short, DateTime>.BeginInvoke
	|
	|-RVA: 0x1EB Offset: 0x1EB VA: 0x1EB
	|-EnumHelper.Transformer<short, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x1EC Offset: 0x1EC VA: 0x1EC
	|-EnumHelper.Transformer<short, Decimal>.BeginInvoke
	|
	|-RVA: 0x1ED Offset: 0x1ED VA: 0x1ED
	|-EnumHelper.Transformer<short, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-EnumHelper.Transformer<short, double>.BeginInvoke
	|-EnumHelper.Transformer<short, float>.BeginInvoke
	|
	|-RVA: 0x1EE Offset: 0x1EE VA: 0x1EE
	|-EnumHelper.Transformer<short, Guid>.BeginInvoke
	|
	|-RVA: 0x1EF Offset: 0x1EF VA: 0x1EF
	|-EnumHelper.Transformer<short, short>.BeginInvoke
	|
	|-RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0
	|-EnumHelper.Transformer<short, int>.BeginInvoke
	|
	|-RVA: 0xE Offset: 0xE VA: 0xE
	|-EnumHelper.Transformer<short, long>.BeginInvoke
	|
	|-RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1
	|-EnumHelper.Transformer<short, IntPtr>.BeginInvoke
	|
	|-RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2
	|-EnumHelper.Transformer<short, object>.BeginInvoke
	|
	|-RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3
	|-EnumHelper.Transformer<short, sbyte>.BeginInvoke
	|
	|-RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4
	|-EnumHelper.Transformer<short, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5
	|-EnumHelper.Transformer<short, ushort>.BeginInvoke
	|
	|-RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6
	|-EnumHelper.Transformer<short, uint>.BeginInvoke
	|
	|-RVA: 0xF Offset: 0xF VA: 0xF
	|-EnumHelper.Transformer<short, ulong>.BeginInvoke
	|
	|-RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7
	|-EnumHelper.Transformer<short, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8
	|-EnumHelper.Transformer<int, bool>.BeginInvoke
	|
	|-RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9
	|-EnumHelper.Transformer<int, byte>.BeginInvoke
	|
	|-RVA: 0x1FA Offset: 0x1FA VA: 0x1FA
	|-EnumHelper.Transformer<int, char>.BeginInvoke
	|
	|-RVA: 0x1FB Offset: 0x1FB VA: 0x1FB
	|-EnumHelper.Transformer<int, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x1FC Offset: 0x1FC VA: 0x1FC
	|-EnumHelper.Transformer<int, DateTime>.BeginInvoke
	|
	|-RVA: 0x1FD Offset: 0x1FD VA: 0x1FD
	|-EnumHelper.Transformer<int, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x1FE Offset: 0x1FE VA: 0x1FE
	|-EnumHelper.Transformer<int, Decimal>.BeginInvoke
	|
	|-RVA: 0x1FF Offset: 0x1FF VA: 0x1FF
	|-EnumHelper.Transformer<int, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-EnumHelper.Transformer<int, double>.BeginInvoke
	|-EnumHelper.Transformer<int, float>.BeginInvoke
	|
	|-RVA: 0x200 Offset: 0x200 VA: 0x200
	|-EnumHelper.Transformer<int, Guid>.BeginInvoke
	|
	|-RVA: 0x201 Offset: 0x201 VA: 0x201
	|-EnumHelper.Transformer<int, short>.BeginInvoke
	|
	|-RVA: 0x202 Offset: 0x202 VA: 0x202
	|-EnumHelper.Transformer<int, int>.BeginInvoke
	|
	|-RVA: 0x10 Offset: 0x10 VA: 0x10
	|-EnumHelper.Transformer<int, long>.BeginInvoke
	|
	|-RVA: 0x203 Offset: 0x203 VA: 0x203
	|-EnumHelper.Transformer<int, IntPtr>.BeginInvoke
	|
	|-RVA: 0x204 Offset: 0x204 VA: 0x204
	|-EnumHelper.Transformer<int, object>.BeginInvoke
	|
	|-RVA: 0x205 Offset: 0x205 VA: 0x205
	|-EnumHelper.Transformer<int, sbyte>.BeginInvoke
	|
	|-RVA: 0x206 Offset: 0x206 VA: 0x206
	|-EnumHelper.Transformer<int, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x207 Offset: 0x207 VA: 0x207
	|-EnumHelper.Transformer<int, ushort>.BeginInvoke
	|
	|-RVA: 0x208 Offset: 0x208 VA: 0x208
	|-EnumHelper.Transformer<int, uint>.BeginInvoke
	|
	|-RVA: 0x11 Offset: 0x11 VA: 0x11
	|-EnumHelper.Transformer<int, ulong>.BeginInvoke
	|
	|-RVA: 0x209 Offset: 0x209 VA: 0x209
	|-EnumHelper.Transformer<int, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x20A Offset: 0x20A VA: 0x20A
	|-EnumHelper.Transformer<long, bool>.BeginInvoke
	|
	|-RVA: 0x20B Offset: 0x20B VA: 0x20B
	|-EnumHelper.Transformer<long, byte>.BeginInvoke
	|
	|-RVA: 0x20C Offset: 0x20C VA: 0x20C
	|-EnumHelper.Transformer<long, char>.BeginInvoke
	|
	|-RVA: 0x20D Offset: 0x20D VA: 0x20D
	|-EnumHelper.Transformer<long, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x20E Offset: 0x20E VA: 0x20E
	|-EnumHelper.Transformer<long, DateTime>.BeginInvoke
	|
	|-RVA: 0x20F Offset: 0x20F VA: 0x20F
	|-EnumHelper.Transformer<long, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x210 Offset: 0x210 VA: 0x210
	|-EnumHelper.Transformer<long, Decimal>.BeginInvoke
	|
	|-RVA: 0x211 Offset: 0x211 VA: 0x211
	|-EnumHelper.Transformer<long, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-EnumHelper.Transformer<long, double>.BeginInvoke
	|-EnumHelper.Transformer<long, float>.BeginInvoke
	|
	|-RVA: 0x212 Offset: 0x212 VA: 0x212
	|-EnumHelper.Transformer<long, Guid>.BeginInvoke
	|
	|-RVA: 0x213 Offset: 0x213 VA: 0x213
	|-EnumHelper.Transformer<long, short>.BeginInvoke
	|
	|-RVA: 0x214 Offset: 0x214 VA: 0x214
	|-EnumHelper.Transformer<long, int>.BeginInvoke
	|
	|-RVA: 0x12 Offset: 0x12 VA: 0x12
	|-EnumHelper.Transformer<long, long>.BeginInvoke
	|
	|-RVA: 0x215 Offset: 0x215 VA: 0x215
	|-EnumHelper.Transformer<long, IntPtr>.BeginInvoke
	|
	|-RVA: 0x216 Offset: 0x216 VA: 0x216
	|-EnumHelper.Transformer<long, object>.BeginInvoke
	|
	|-RVA: 0x217 Offset: 0x217 VA: 0x217
	|-EnumHelper.Transformer<long, sbyte>.BeginInvoke
	|
	|-RVA: 0x218 Offset: 0x218 VA: 0x218
	|-EnumHelper.Transformer<long, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x219 Offset: 0x219 VA: 0x219
	|-EnumHelper.Transformer<long, ushort>.BeginInvoke
	|
	|-RVA: 0x21A Offset: 0x21A VA: 0x21A
	|-EnumHelper.Transformer<long, uint>.BeginInvoke
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-EnumHelper.Transformer<long, ulong>.BeginInvoke
	|
	|-RVA: 0x21B Offset: 0x21B VA: 0x21B
	|-EnumHelper.Transformer<long, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x160 Offset: 0x160 VA: 0x160
	|-EnumHelper.Transformer<object, object>.BeginInvoke
	|
	|-RVA: 0x21C Offset: 0x21C VA: 0x21C
	|-EnumHelper.Transformer<sbyte, bool>.BeginInvoke
	|
	|-RVA: 0x21D Offset: 0x21D VA: 0x21D
	|-EnumHelper.Transformer<sbyte, byte>.BeginInvoke
	|
	|-RVA: 0x21E Offset: 0x21E VA: 0x21E
	|-EnumHelper.Transformer<sbyte, char>.BeginInvoke
	|
	|-RVA: 0x21F Offset: 0x21F VA: 0x21F
	|-EnumHelper.Transformer<sbyte, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x220 Offset: 0x220 VA: 0x220
	|-EnumHelper.Transformer<sbyte, DateTime>.BeginInvoke
	|
	|-RVA: 0x221 Offset: 0x221 VA: 0x221
	|-EnumHelper.Transformer<sbyte, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x222 Offset: 0x222 VA: 0x222
	|-EnumHelper.Transformer<sbyte, Decimal>.BeginInvoke
	|
	|-RVA: 0x223 Offset: 0x223 VA: 0x223
	|-EnumHelper.Transformer<sbyte, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-EnumHelper.Transformer<sbyte, double>.BeginInvoke
	|-EnumHelper.Transformer<sbyte, float>.BeginInvoke
	|
	|-RVA: 0x224 Offset: 0x224 VA: 0x224
	|-EnumHelper.Transformer<sbyte, Guid>.BeginInvoke
	|
	|-RVA: 0x225 Offset: 0x225 VA: 0x225
	|-EnumHelper.Transformer<sbyte, short>.BeginInvoke
	|
	|-RVA: 0x226 Offset: 0x226 VA: 0x226
	|-EnumHelper.Transformer<sbyte, int>.BeginInvoke
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-EnumHelper.Transformer<sbyte, long>.BeginInvoke
	|
	|-RVA: 0x227 Offset: 0x227 VA: 0x227
	|-EnumHelper.Transformer<sbyte, IntPtr>.BeginInvoke
	|
	|-RVA: 0x228 Offset: 0x228 VA: 0x228
	|-EnumHelper.Transformer<sbyte, object>.BeginInvoke
	|
	|-RVA: 0x229 Offset: 0x229 VA: 0x229
	|-EnumHelper.Transformer<sbyte, sbyte>.BeginInvoke
	|
	|-RVA: 0x22A Offset: 0x22A VA: 0x22A
	|-EnumHelper.Transformer<sbyte, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x22B Offset: 0x22B VA: 0x22B
	|-EnumHelper.Transformer<sbyte, ushort>.BeginInvoke
	|
	|-RVA: 0x22C Offset: 0x22C VA: 0x22C
	|-EnumHelper.Transformer<sbyte, uint>.BeginInvoke
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-EnumHelper.Transformer<sbyte, ulong>.BeginInvoke
	|
	|-RVA: 0x22D Offset: 0x22D VA: 0x22D
	|-EnumHelper.Transformer<sbyte, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x22E Offset: 0x22E VA: 0x22E
	|-EnumHelper.Transformer<ushort, bool>.BeginInvoke
	|
	|-RVA: 0x22F Offset: 0x22F VA: 0x22F
	|-EnumHelper.Transformer<ushort, byte>.BeginInvoke
	|
	|-RVA: 0x230 Offset: 0x230 VA: 0x230
	|-EnumHelper.Transformer<ushort, char>.BeginInvoke
	|
	|-RVA: 0x231 Offset: 0x231 VA: 0x231
	|-EnumHelper.Transformer<ushort, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x232 Offset: 0x232 VA: 0x232
	|-EnumHelper.Transformer<ushort, DateTime>.BeginInvoke
	|
	|-RVA: 0x233 Offset: 0x233 VA: 0x233
	|-EnumHelper.Transformer<ushort, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x234 Offset: 0x234 VA: 0x234
	|-EnumHelper.Transformer<ushort, Decimal>.BeginInvoke
	|
	|-RVA: 0x235 Offset: 0x235 VA: 0x235
	|-EnumHelper.Transformer<ushort, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-EnumHelper.Transformer<ushort, double>.BeginInvoke
	|-EnumHelper.Transformer<ushort, float>.BeginInvoke
	|
	|-RVA: 0x236 Offset: 0x236 VA: 0x236
	|-EnumHelper.Transformer<ushort, Guid>.BeginInvoke
	|
	|-RVA: 0x237 Offset: 0x237 VA: 0x237
	|-EnumHelper.Transformer<ushort, short>.BeginInvoke
	|
	|-RVA: 0x238 Offset: 0x238 VA: 0x238
	|-EnumHelper.Transformer<ushort, int>.BeginInvoke
	|
	|-RVA: 0x16 Offset: 0x16 VA: 0x16
	|-EnumHelper.Transformer<ushort, long>.BeginInvoke
	|
	|-RVA: 0x239 Offset: 0x239 VA: 0x239
	|-EnumHelper.Transformer<ushort, IntPtr>.BeginInvoke
	|
	|-RVA: 0x23A Offset: 0x23A VA: 0x23A
	|-EnumHelper.Transformer<ushort, object>.BeginInvoke
	|
	|-RVA: 0x23B Offset: 0x23B VA: 0x23B
	|-EnumHelper.Transformer<ushort, sbyte>.BeginInvoke
	|
	|-RVA: 0x23C Offset: 0x23C VA: 0x23C
	|-EnumHelper.Transformer<ushort, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x23D Offset: 0x23D VA: 0x23D
	|-EnumHelper.Transformer<ushort, ushort>.BeginInvoke
	|
	|-RVA: 0x23E Offset: 0x23E VA: 0x23E
	|-EnumHelper.Transformer<ushort, uint>.BeginInvoke
	|
	|-RVA: 0x17 Offset: 0x17 VA: 0x17
	|-EnumHelper.Transformer<ushort, ulong>.BeginInvoke
	|
	|-RVA: 0x23F Offset: 0x23F VA: 0x23F
	|-EnumHelper.Transformer<ushort, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x240 Offset: 0x240 VA: 0x240
	|-EnumHelper.Transformer<uint, bool>.BeginInvoke
	|
	|-RVA: 0x241 Offset: 0x241 VA: 0x241
	|-EnumHelper.Transformer<uint, byte>.BeginInvoke
	|
	|-RVA: 0x242 Offset: 0x242 VA: 0x242
	|-EnumHelper.Transformer<uint, char>.BeginInvoke
	|
	|-RVA: 0x243 Offset: 0x243 VA: 0x243
	|-EnumHelper.Transformer<uint, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x244 Offset: 0x244 VA: 0x244
	|-EnumHelper.Transformer<uint, DateTime>.BeginInvoke
	|
	|-RVA: 0x245 Offset: 0x245 VA: 0x245
	|-EnumHelper.Transformer<uint, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x246 Offset: 0x246 VA: 0x246
	|-EnumHelper.Transformer<uint, Decimal>.BeginInvoke
	|
	|-RVA: 0x247 Offset: 0x247 VA: 0x247
	|-EnumHelper.Transformer<uint, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0xA Offset: 0xA VA: 0xA
	|-EnumHelper.Transformer<uint, double>.BeginInvoke
	|-EnumHelper.Transformer<uint, float>.BeginInvoke
	|
	|-RVA: 0x248 Offset: 0x248 VA: 0x248
	|-EnumHelper.Transformer<uint, Guid>.BeginInvoke
	|
	|-RVA: 0x249 Offset: 0x249 VA: 0x249
	|-EnumHelper.Transformer<uint, short>.BeginInvoke
	|
	|-RVA: 0x24A Offset: 0x24A VA: 0x24A
	|-EnumHelper.Transformer<uint, int>.BeginInvoke
	|
	|-RVA: 0x18 Offset: 0x18 VA: 0x18
	|-EnumHelper.Transformer<uint, long>.BeginInvoke
	|
	|-RVA: 0x24B Offset: 0x24B VA: 0x24B
	|-EnumHelper.Transformer<uint, IntPtr>.BeginInvoke
	|
	|-RVA: 0x24C Offset: 0x24C VA: 0x24C
	|-EnumHelper.Transformer<uint, object>.BeginInvoke
	|
	|-RVA: 0x24D Offset: 0x24D VA: 0x24D
	|-EnumHelper.Transformer<uint, sbyte>.BeginInvoke
	|
	|-RVA: 0x24E Offset: 0x24E VA: 0x24E
	|-EnumHelper.Transformer<uint, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x24F Offset: 0x24F VA: 0x24F
	|-EnumHelper.Transformer<uint, ushort>.BeginInvoke
	|
	|-RVA: 0x250 Offset: 0x250 VA: 0x250
	|-EnumHelper.Transformer<uint, uint>.BeginInvoke
	|
	|-RVA: 0x19 Offset: 0x19 VA: 0x19
	|-EnumHelper.Transformer<uint, ulong>.BeginInvoke
	|
	|-RVA: 0x251 Offset: 0x251 VA: 0x251
	|-EnumHelper.Transformer<uint, UIntPtr>.BeginInvoke
	|
	|-RVA: 0x252 Offset: 0x252 VA: 0x252
	|-EnumHelper.Transformer<ulong, bool>.BeginInvoke
	|
	|-RVA: 0x253 Offset: 0x253 VA: 0x253
	|-EnumHelper.Transformer<ulong, byte>.BeginInvoke
	|
	|-RVA: 0x254 Offset: 0x254 VA: 0x254
	|-EnumHelper.Transformer<ulong, char>.BeginInvoke
	|
	|-RVA: 0x255 Offset: 0x255 VA: 0x255
	|-EnumHelper.Transformer<ulong, KeyValuePair<object, object>>.BeginInvoke
	|
	|-RVA: 0x256 Offset: 0x256 VA: 0x256
	|-EnumHelper.Transformer<ulong, DateTime>.BeginInvoke
	|
	|-RVA: 0x257 Offset: 0x257 VA: 0x257
	|-EnumHelper.Transformer<ulong, DateTimeOffset>.BeginInvoke
	|
	|-RVA: 0x258 Offset: 0x258 VA: 0x258
	|-EnumHelper.Transformer<ulong, Decimal>.BeginInvoke
	|
	|-RVA: 0x259 Offset: 0x259 VA: 0x259
	|-EnumHelper.Transformer<ulong, EmptyStruct>.BeginInvoke
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-EnumHelper.Transformer<ulong, double>.BeginInvoke
	|-EnumHelper.Transformer<ulong, float>.BeginInvoke
	|
	|-RVA: 0x25A Offset: 0x25A VA: 0x25A
	|-EnumHelper.Transformer<ulong, Guid>.BeginInvoke
	|
	|-RVA: 0x25B Offset: 0x25B VA: 0x25B
	|-EnumHelper.Transformer<ulong, short>.BeginInvoke
	|
	|-RVA: 0x25C Offset: 0x25C VA: 0x25C
	|-EnumHelper.Transformer<ulong, int>.BeginInvoke
	|
	|-RVA: 0x1A Offset: 0x1A VA: 0x1A
	|-EnumHelper.Transformer<ulong, long>.BeginInvoke
	|
	|-RVA: 0x25D Offset: 0x25D VA: 0x25D
	|-EnumHelper.Transformer<ulong, IntPtr>.BeginInvoke
	|
	|-RVA: 0x25E Offset: 0x25E VA: 0x25E
	|-EnumHelper.Transformer<ulong, object>.BeginInvoke
	|
	|-RVA: 0x25F Offset: 0x25F VA: 0x25F
	|-EnumHelper.Transformer<ulong, sbyte>.BeginInvoke
	|
	|-RVA: 0x260 Offset: 0x260 VA: 0x260
	|-EnumHelper.Transformer<ulong, TimeSpan>.BeginInvoke
	|
	|-RVA: 0x261 Offset: 0x261 VA: 0x261
	|-EnumHelper.Transformer<ulong, ushort>.BeginInvoke
	|
	|-RVA: 0x262 Offset: 0x262 VA: 0x262
	|-EnumHelper.Transformer<ulong, uint>.BeginInvoke
	|
	|-RVA: 0x1B Offset: 0x1B VA: 0x1B
	|-EnumHelper.Transformer<ulong, ulong>.BeginInvoke
	|
	|-RVA: 0x263 Offset: 0x263 VA: 0x263
	|-EnumHelper.Transformer<ulong, UIntPtr>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual UnderlyingType EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9
	|-EnumHelper.Transformer<byte, bool>.EndInvoke
	|
	|-RVA: 0x9DB Offset: 0x9DB VA: 0x9DB
	|-EnumHelper.Transformer<byte, byte>.EndInvoke
	|
	|-RVA: 0x9DD Offset: 0x9DD VA: 0x9DD
	|-EnumHelper.Transformer<byte, char>.EndInvoke
	|
	|-RVA: 0x9DF Offset: 0x9DF VA: 0x9DF
	|-EnumHelper.Transformer<byte, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1
	|-EnumHelper.Transformer<byte, DateTime>.EndInvoke
	|
	|-RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3
	|-EnumHelper.Transformer<byte, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5
	|-EnumHelper.Transformer<byte, Decimal>.EndInvoke
	|
	|-RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7
	|-EnumHelper.Transformer<byte, EmptyStruct>.EndInvoke
	|
	|-RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	|-EnumHelper.Transformer<byte, double>.EndInvoke
	|
	|-RVA: 0x9EA Offset: 0x9EA VA: 0x9EA
	|-EnumHelper.Transformer<byte, Guid>.EndInvoke
	|
	|-RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	|-EnumHelper.Transformer<byte, short>.EndInvoke
	|
	|-RVA: 0x9EE Offset: 0x9EE VA: 0x9EE
	|-EnumHelper.Transformer<byte, int>.EndInvoke
	|
	|-RVA: 0x9EF Offset: 0x9EF VA: 0x9EF
	|-EnumHelper.Transformer<byte, long>.EndInvoke
	|
	|-RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1
	|-EnumHelper.Transformer<byte, IntPtr>.EndInvoke
	|
	|-RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3
	|-EnumHelper.Transformer<byte, object>.EndInvoke
	|
	|-RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	|-EnumHelper.Transformer<byte, sbyte>.EndInvoke
	|
	|-RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	|-EnumHelper.Transformer<byte, float>.EndInvoke
	|
	|-RVA: 0x9F8 Offset: 0x9F8 VA: 0x9F8
	|-EnumHelper.Transformer<byte, TimeSpan>.EndInvoke
	|
	|-RVA: 0x9FA Offset: 0x9FA VA: 0x9FA
	|-EnumHelper.Transformer<byte, ushort>.EndInvoke
	|
	|-RVA: 0x9FC Offset: 0x9FC VA: 0x9FC
	|-EnumHelper.Transformer<byte, uint>.EndInvoke
	|
	|-RVA: 0x9FD Offset: 0x9FD VA: 0x9FD
	|-EnumHelper.Transformer<byte, ulong>.EndInvoke
	|
	|-RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	|-EnumHelper.Transformer<byte, UIntPtr>.EndInvoke
	|
	|-RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	|-EnumHelper.Transformer<short, bool>.EndInvoke
	|
	|-RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	|-EnumHelper.Transformer<short, byte>.EndInvoke
	|
	|-RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	|-EnumHelper.Transformer<short, char>.EndInvoke
	|
	|-RVA: 0xA07 Offset: 0xA07 VA: 0xA07
	|-EnumHelper.Transformer<short, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	|-EnumHelper.Transformer<short, DateTime>.EndInvoke
	|
	|-RVA: 0xA0B Offset: 0xA0B VA: 0xA0B
	|-EnumHelper.Transformer<short, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	|-EnumHelper.Transformer<short, Decimal>.EndInvoke
	|
	|-RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	|-EnumHelper.Transformer<short, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	|-EnumHelper.Transformer<short, double>.EndInvoke
	|
	|-RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	|-EnumHelper.Transformer<short, Guid>.EndInvoke
	|
	|-RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	|-EnumHelper.Transformer<short, short>.EndInvoke
	|
	|-RVA: 0xA16 Offset: 0xA16 VA: 0xA16
	|-EnumHelper.Transformer<short, int>.EndInvoke
	|
	|-RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	|-EnumHelper.Transformer<short, long>.EndInvoke
	|
	|-RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	|-EnumHelper.Transformer<short, IntPtr>.EndInvoke
	|
	|-RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	|-EnumHelper.Transformer<short, object>.EndInvoke
	|
	|-RVA: 0xA1D Offset: 0xA1D VA: 0xA1D
	|-EnumHelper.Transformer<short, sbyte>.EndInvoke
	|
	|-RVA: 0xA1E Offset: 0xA1E VA: 0xA1E
	|-EnumHelper.Transformer<short, float>.EndInvoke
	|
	|-RVA: 0xA20 Offset: 0xA20 VA: 0xA20
	|-EnumHelper.Transformer<short, TimeSpan>.EndInvoke
	|
	|-RVA: 0xA22 Offset: 0xA22 VA: 0xA22
	|-EnumHelper.Transformer<short, ushort>.EndInvoke
	|
	|-RVA: 0xA24 Offset: 0xA24 VA: 0xA24
	|-EnumHelper.Transformer<short, uint>.EndInvoke
	|
	|-RVA: 0xA25 Offset: 0xA25 VA: 0xA25
	|-EnumHelper.Transformer<short, ulong>.EndInvoke
	|
	|-RVA: 0xA27 Offset: 0xA27 VA: 0xA27
	|-EnumHelper.Transformer<short, UIntPtr>.EndInvoke
	|
	|-RVA: 0xA29 Offset: 0xA29 VA: 0xA29
	|-EnumHelper.Transformer<int, bool>.EndInvoke
	|
	|-RVA: 0xA2B Offset: 0xA2B VA: 0xA2B
	|-EnumHelper.Transformer<int, byte>.EndInvoke
	|
	|-RVA: 0xA2D Offset: 0xA2D VA: 0xA2D
	|-EnumHelper.Transformer<int, char>.EndInvoke
	|
	|-RVA: 0xA2F Offset: 0xA2F VA: 0xA2F
	|-EnumHelper.Transformer<int, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0xA31 Offset: 0xA31 VA: 0xA31
	|-EnumHelper.Transformer<int, DateTime>.EndInvoke
	|
	|-RVA: 0xA33 Offset: 0xA33 VA: 0xA33
	|-EnumHelper.Transformer<int, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0xA35 Offset: 0xA35 VA: 0xA35
	|-EnumHelper.Transformer<int, Decimal>.EndInvoke
	|
	|-RVA: 0xA37 Offset: 0xA37 VA: 0xA37
	|-EnumHelper.Transformer<int, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xA38 Offset: 0xA38 VA: 0xA38
	|-EnumHelper.Transformer<int, double>.EndInvoke
	|
	|-RVA: 0xA3A Offset: 0xA3A VA: 0xA3A
	|-EnumHelper.Transformer<int, Guid>.EndInvoke
	|
	|-RVA: 0xA3C Offset: 0xA3C VA: 0xA3C
	|-EnumHelper.Transformer<int, short>.EndInvoke
	|
	|-RVA: 0xA3E Offset: 0xA3E VA: 0xA3E
	|-EnumHelper.Transformer<int, int>.EndInvoke
	|
	|-RVA: 0xA3F Offset: 0xA3F VA: 0xA3F
	|-EnumHelper.Transformer<int, long>.EndInvoke
	|
	|-RVA: 0xA41 Offset: 0xA41 VA: 0xA41
	|-EnumHelper.Transformer<int, IntPtr>.EndInvoke
	|
	|-RVA: 0xA43 Offset: 0xA43 VA: 0xA43
	|-EnumHelper.Transformer<int, object>.EndInvoke
	|
	|-RVA: 0xA45 Offset: 0xA45 VA: 0xA45
	|-EnumHelper.Transformer<int, sbyte>.EndInvoke
	|
	|-RVA: 0xA46 Offset: 0xA46 VA: 0xA46
	|-EnumHelper.Transformer<int, float>.EndInvoke
	|
	|-RVA: 0xA48 Offset: 0xA48 VA: 0xA48
	|-EnumHelper.Transformer<int, TimeSpan>.EndInvoke
	|
	|-RVA: 0xA4A Offset: 0xA4A VA: 0xA4A
	|-EnumHelper.Transformer<int, ushort>.EndInvoke
	|
	|-RVA: 0xA4C Offset: 0xA4C VA: 0xA4C
	|-EnumHelper.Transformer<int, uint>.EndInvoke
	|
	|-RVA: 0xA4D Offset: 0xA4D VA: 0xA4D
	|-EnumHelper.Transformer<int, ulong>.EndInvoke
	|
	|-RVA: 0xA4F Offset: 0xA4F VA: 0xA4F
	|-EnumHelper.Transformer<int, UIntPtr>.EndInvoke
	|
	|-RVA: 0x93 Offset: 0x93 VA: 0x93
	|-EnumHelper.Transformer<long, bool>.EndInvoke
	|
	|-RVA: 0x95 Offset: 0x95 VA: 0x95
	|-EnumHelper.Transformer<long, byte>.EndInvoke
	|
	|-RVA: 0x97 Offset: 0x97 VA: 0x97
	|-EnumHelper.Transformer<long, char>.EndInvoke
	|
	|-RVA: 0x99 Offset: 0x99 VA: 0x99
	|-EnumHelper.Transformer<long, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0x9B Offset: 0x9B VA: 0x9B
	|-EnumHelper.Transformer<long, DateTime>.EndInvoke
	|
	|-RVA: 0x9D Offset: 0x9D VA: 0x9D
	|-EnumHelper.Transformer<long, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0x9F Offset: 0x9F VA: 0x9F
	|-EnumHelper.Transformer<long, Decimal>.EndInvoke
	|
	|-RVA: 0xA1 Offset: 0xA1 VA: 0xA1
	|-EnumHelper.Transformer<long, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xA2 Offset: 0xA2 VA: 0xA2
	|-EnumHelper.Transformer<long, double>.EndInvoke
	|
	|-RVA: 0xA4 Offset: 0xA4 VA: 0xA4
	|-EnumHelper.Transformer<long, Guid>.EndInvoke
	|
	|-RVA: 0xA6 Offset: 0xA6 VA: 0xA6
	|-EnumHelper.Transformer<long, short>.EndInvoke
	|
	|-RVA: 0xA8 Offset: 0xA8 VA: 0xA8
	|-EnumHelper.Transformer<long, int>.EndInvoke
	|
	|-RVA: 0xA9 Offset: 0xA9 VA: 0xA9
	|-EnumHelper.Transformer<long, long>.EndInvoke
	|
	|-RVA: 0xAB Offset: 0xAB VA: 0xAB
	|-EnumHelper.Transformer<long, IntPtr>.EndInvoke
	|
	|-RVA: 0xAD Offset: 0xAD VA: 0xAD
	|-EnumHelper.Transformer<long, object>.EndInvoke
	|
	|-RVA: 0xAF Offset: 0xAF VA: 0xAF
	|-EnumHelper.Transformer<long, sbyte>.EndInvoke
	|
	|-RVA: 0xB0 Offset: 0xB0 VA: 0xB0
	|-EnumHelper.Transformer<long, float>.EndInvoke
	|
	|-RVA: 0xB2 Offset: 0xB2 VA: 0xB2
	|-EnumHelper.Transformer<long, TimeSpan>.EndInvoke
	|
	|-RVA: 0xB4 Offset: 0xB4 VA: 0xB4
	|-EnumHelper.Transformer<long, ushort>.EndInvoke
	|
	|-RVA: 0xB6 Offset: 0xB6 VA: 0xB6
	|-EnumHelper.Transformer<long, uint>.EndInvoke
	|
	|-RVA: 0xB7 Offset: 0xB7 VA: 0xB7
	|-EnumHelper.Transformer<long, ulong>.EndInvoke
	|
	|-RVA: 0xB9 Offset: 0xB9 VA: 0xB9
	|-EnumHelper.Transformer<long, UIntPtr>.EndInvoke
	|
	|-RVA: 0x688 Offset: 0x688 VA: 0x688
	|-EnumHelper.Transformer<object, object>.EndInvoke
	|
	|-RVA: 0xA51 Offset: 0xA51 VA: 0xA51
	|-EnumHelper.Transformer<sbyte, bool>.EndInvoke
	|
	|-RVA: 0xA53 Offset: 0xA53 VA: 0xA53
	|-EnumHelper.Transformer<sbyte, byte>.EndInvoke
	|
	|-RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	|-EnumHelper.Transformer<sbyte, char>.EndInvoke
	|
	|-RVA: 0xA57 Offset: 0xA57 VA: 0xA57
	|-EnumHelper.Transformer<sbyte, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0xA59 Offset: 0xA59 VA: 0xA59
	|-EnumHelper.Transformer<sbyte, DateTime>.EndInvoke
	|
	|-RVA: 0xA5B Offset: 0xA5B VA: 0xA5B
	|-EnumHelper.Transformer<sbyte, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0xA5D Offset: 0xA5D VA: 0xA5D
	|-EnumHelper.Transformer<sbyte, Decimal>.EndInvoke
	|
	|-RVA: 0xA5F Offset: 0xA5F VA: 0xA5F
	|-EnumHelper.Transformer<sbyte, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xA60 Offset: 0xA60 VA: 0xA60
	|-EnumHelper.Transformer<sbyte, double>.EndInvoke
	|
	|-RVA: 0xA62 Offset: 0xA62 VA: 0xA62
	|-EnumHelper.Transformer<sbyte, Guid>.EndInvoke
	|
	|-RVA: 0xA64 Offset: 0xA64 VA: 0xA64
	|-EnumHelper.Transformer<sbyte, short>.EndInvoke
	|
	|-RVA: 0xA66 Offset: 0xA66 VA: 0xA66
	|-EnumHelper.Transformer<sbyte, int>.EndInvoke
	|
	|-RVA: 0xA67 Offset: 0xA67 VA: 0xA67
	|-EnumHelper.Transformer<sbyte, long>.EndInvoke
	|
	|-RVA: 0xA69 Offset: 0xA69 VA: 0xA69
	|-EnumHelper.Transformer<sbyte, IntPtr>.EndInvoke
	|
	|-RVA: 0xA6B Offset: 0xA6B VA: 0xA6B
	|-EnumHelper.Transformer<sbyte, object>.EndInvoke
	|
	|-RVA: 0xA6D Offset: 0xA6D VA: 0xA6D
	|-EnumHelper.Transformer<sbyte, sbyte>.EndInvoke
	|
	|-RVA: 0xA6E Offset: 0xA6E VA: 0xA6E
	|-EnumHelper.Transformer<sbyte, float>.EndInvoke
	|
	|-RVA: 0xA70 Offset: 0xA70 VA: 0xA70
	|-EnumHelper.Transformer<sbyte, TimeSpan>.EndInvoke
	|
	|-RVA: 0xA72 Offset: 0xA72 VA: 0xA72
	|-EnumHelper.Transformer<sbyte, ushort>.EndInvoke
	|
	|-RVA: 0xA74 Offset: 0xA74 VA: 0xA74
	|-EnumHelper.Transformer<sbyte, uint>.EndInvoke
	|
	|-RVA: 0xA75 Offset: 0xA75 VA: 0xA75
	|-EnumHelper.Transformer<sbyte, ulong>.EndInvoke
	|
	|-RVA: 0xA77 Offset: 0xA77 VA: 0xA77
	|-EnumHelper.Transformer<sbyte, UIntPtr>.EndInvoke
	|
	|-RVA: 0xA79 Offset: 0xA79 VA: 0xA79
	|-EnumHelper.Transformer<ushort, bool>.EndInvoke
	|
	|-RVA: 0xA7B Offset: 0xA7B VA: 0xA7B
	|-EnumHelper.Transformer<ushort, byte>.EndInvoke
	|
	|-RVA: 0xA7D Offset: 0xA7D VA: 0xA7D
	|-EnumHelper.Transformer<ushort, char>.EndInvoke
	|
	|-RVA: 0xA7F Offset: 0xA7F VA: 0xA7F
	|-EnumHelper.Transformer<ushort, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0xA81 Offset: 0xA81 VA: 0xA81
	|-EnumHelper.Transformer<ushort, DateTime>.EndInvoke
	|
	|-RVA: 0xA83 Offset: 0xA83 VA: 0xA83
	|-EnumHelper.Transformer<ushort, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0xA85 Offset: 0xA85 VA: 0xA85
	|-EnumHelper.Transformer<ushort, Decimal>.EndInvoke
	|
	|-RVA: 0xA87 Offset: 0xA87 VA: 0xA87
	|-EnumHelper.Transformer<ushort, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xA88 Offset: 0xA88 VA: 0xA88
	|-EnumHelper.Transformer<ushort, double>.EndInvoke
	|
	|-RVA: 0xA8A Offset: 0xA8A VA: 0xA8A
	|-EnumHelper.Transformer<ushort, Guid>.EndInvoke
	|
	|-RVA: 0xA8C Offset: 0xA8C VA: 0xA8C
	|-EnumHelper.Transformer<ushort, short>.EndInvoke
	|
	|-RVA: 0xA8E Offset: 0xA8E VA: 0xA8E
	|-EnumHelper.Transformer<ushort, int>.EndInvoke
	|
	|-RVA: 0xA8F Offset: 0xA8F VA: 0xA8F
	|-EnumHelper.Transformer<ushort, long>.EndInvoke
	|
	|-RVA: 0xA91 Offset: 0xA91 VA: 0xA91
	|-EnumHelper.Transformer<ushort, IntPtr>.EndInvoke
	|
	|-RVA: 0xA93 Offset: 0xA93 VA: 0xA93
	|-EnumHelper.Transformer<ushort, object>.EndInvoke
	|
	|-RVA: 0xA95 Offset: 0xA95 VA: 0xA95
	|-EnumHelper.Transformer<ushort, sbyte>.EndInvoke
	|
	|-RVA: 0xA96 Offset: 0xA96 VA: 0xA96
	|-EnumHelper.Transformer<ushort, float>.EndInvoke
	|
	|-RVA: 0xA98 Offset: 0xA98 VA: 0xA98
	|-EnumHelper.Transformer<ushort, TimeSpan>.EndInvoke
	|
	|-RVA: 0xA9A Offset: 0xA9A VA: 0xA9A
	|-EnumHelper.Transformer<ushort, ushort>.EndInvoke
	|
	|-RVA: 0xA9C Offset: 0xA9C VA: 0xA9C
	|-EnumHelper.Transformer<ushort, uint>.EndInvoke
	|
	|-RVA: 0xA9D Offset: 0xA9D VA: 0xA9D
	|-EnumHelper.Transformer<ushort, ulong>.EndInvoke
	|
	|-RVA: 0xA9F Offset: 0xA9F VA: 0xA9F
	|-EnumHelper.Transformer<ushort, UIntPtr>.EndInvoke
	|
	|-RVA: 0xAA1 Offset: 0xAA1 VA: 0xAA1
	|-EnumHelper.Transformer<uint, bool>.EndInvoke
	|
	|-RVA: 0xAA3 Offset: 0xAA3 VA: 0xAA3
	|-EnumHelper.Transformer<uint, byte>.EndInvoke
	|
	|-RVA: 0xAA5 Offset: 0xAA5 VA: 0xAA5
	|-EnumHelper.Transformer<uint, char>.EndInvoke
	|
	|-RVA: 0xAA7 Offset: 0xAA7 VA: 0xAA7
	|-EnumHelper.Transformer<uint, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0xAA9 Offset: 0xAA9 VA: 0xAA9
	|-EnumHelper.Transformer<uint, DateTime>.EndInvoke
	|
	|-RVA: 0xAAB Offset: 0xAAB VA: 0xAAB
	|-EnumHelper.Transformer<uint, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0xAAD Offset: 0xAAD VA: 0xAAD
	|-EnumHelper.Transformer<uint, Decimal>.EndInvoke
	|
	|-RVA: 0xAAF Offset: 0xAAF VA: 0xAAF
	|-EnumHelper.Transformer<uint, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	|-EnumHelper.Transformer<uint, double>.EndInvoke
	|
	|-RVA: 0xAB2 Offset: 0xAB2 VA: 0xAB2
	|-EnumHelper.Transformer<uint, Guid>.EndInvoke
	|
	|-RVA: 0xAB4 Offset: 0xAB4 VA: 0xAB4
	|-EnumHelper.Transformer<uint, short>.EndInvoke
	|
	|-RVA: 0xAB6 Offset: 0xAB6 VA: 0xAB6
	|-EnumHelper.Transformer<uint, int>.EndInvoke
	|
	|-RVA: 0xAB7 Offset: 0xAB7 VA: 0xAB7
	|-EnumHelper.Transformer<uint, long>.EndInvoke
	|
	|-RVA: 0xAB9 Offset: 0xAB9 VA: 0xAB9
	|-EnumHelper.Transformer<uint, IntPtr>.EndInvoke
	|
	|-RVA: 0xABB Offset: 0xABB VA: 0xABB
	|-EnumHelper.Transformer<uint, object>.EndInvoke
	|
	|-RVA: 0xABD Offset: 0xABD VA: 0xABD
	|-EnumHelper.Transformer<uint, sbyte>.EndInvoke
	|
	|-RVA: 0xABE Offset: 0xABE VA: 0xABE
	|-EnumHelper.Transformer<uint, float>.EndInvoke
	|
	|-RVA: 0xAC0 Offset: 0xAC0 VA: 0xAC0
	|-EnumHelper.Transformer<uint, TimeSpan>.EndInvoke
	|
	|-RVA: 0xAC2 Offset: 0xAC2 VA: 0xAC2
	|-EnumHelper.Transformer<uint, ushort>.EndInvoke
	|
	|-RVA: 0xAC4 Offset: 0xAC4 VA: 0xAC4
	|-EnumHelper.Transformer<uint, uint>.EndInvoke
	|
	|-RVA: 0xAC5 Offset: 0xAC5 VA: 0xAC5
	|-EnumHelper.Transformer<uint, ulong>.EndInvoke
	|
	|-RVA: 0xAC7 Offset: 0xAC7 VA: 0xAC7
	|-EnumHelper.Transformer<uint, UIntPtr>.EndInvoke
	|
	|-RVA: 0xBB Offset: 0xBB VA: 0xBB
	|-EnumHelper.Transformer<ulong, bool>.EndInvoke
	|
	|-RVA: 0xBD Offset: 0xBD VA: 0xBD
	|-EnumHelper.Transformer<ulong, byte>.EndInvoke
	|
	|-RVA: 0xBF Offset: 0xBF VA: 0xBF
	|-EnumHelper.Transformer<ulong, char>.EndInvoke
	|
	|-RVA: 0xC1 Offset: 0xC1 VA: 0xC1
	|-EnumHelper.Transformer<ulong, KeyValuePair<object, object>>.EndInvoke
	|
	|-RVA: 0xC3 Offset: 0xC3 VA: 0xC3
	|-EnumHelper.Transformer<ulong, DateTime>.EndInvoke
	|
	|-RVA: 0xC5 Offset: 0xC5 VA: 0xC5
	|-EnumHelper.Transformer<ulong, DateTimeOffset>.EndInvoke
	|
	|-RVA: 0xC7 Offset: 0xC7 VA: 0xC7
	|-EnumHelper.Transformer<ulong, Decimal>.EndInvoke
	|
	|-RVA: 0xC9 Offset: 0xC9 VA: 0xC9
	|-EnumHelper.Transformer<ulong, EmptyStruct>.EndInvoke
	|
	|-RVA: 0xCA Offset: 0xCA VA: 0xCA
	|-EnumHelper.Transformer<ulong, double>.EndInvoke
	|
	|-RVA: 0xCC Offset: 0xCC VA: 0xCC
	|-EnumHelper.Transformer<ulong, Guid>.EndInvoke
	|
	|-RVA: 0xCE Offset: 0xCE VA: 0xCE
	|-EnumHelper.Transformer<ulong, short>.EndInvoke
	|
	|-RVA: 0xD0 Offset: 0xD0 VA: 0xD0
	|-EnumHelper.Transformer<ulong, int>.EndInvoke
	|
	|-RVA: 0xD1 Offset: 0xD1 VA: 0xD1
	|-EnumHelper.Transformer<ulong, long>.EndInvoke
	|
	|-RVA: 0xD3 Offset: 0xD3 VA: 0xD3
	|-EnumHelper.Transformer<ulong, IntPtr>.EndInvoke
	|
	|-RVA: 0xD5 Offset: 0xD5 VA: 0xD5
	|-EnumHelper.Transformer<ulong, object>.EndInvoke
	|
	|-RVA: 0xD7 Offset: 0xD7 VA: 0xD7
	|-EnumHelper.Transformer<ulong, sbyte>.EndInvoke
	|
	|-RVA: 0xD8 Offset: 0xD8 VA: 0xD8
	|-EnumHelper.Transformer<ulong, float>.EndInvoke
	|
	|-RVA: 0xDA Offset: 0xDA VA: 0xDA
	|-EnumHelper.Transformer<ulong, TimeSpan>.EndInvoke
	|
	|-RVA: 0xDC Offset: 0xDC VA: 0xDC
	|-EnumHelper.Transformer<ulong, ushort>.EndInvoke
	|
	|-RVA: 0xDE Offset: 0xDE VA: 0xDE
	|-EnumHelper.Transformer<ulong, uint>.EndInvoke
	|
	|-RVA: 0xDF Offset: 0xDF VA: 0xDF
	|-EnumHelper.Transformer<ulong, ulong>.EndInvoke
	|
	|-RVA: 0xE1 Offset: 0xE1 VA: 0xE1
	|-EnumHelper.Transformer<ulong, UIntPtr>.EndInvoke
	*/
}

// Namespace: 
private static class EnumHelper.Caster<UnderlyingType, ValueType> // TypeDefIndex: 1270
{
	// Fields
	public static readonly EnumHelper.Transformer<UnderlyingType, ValueType> Instance; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xFE9 Offset: 0xFE9 VA: 0xFE9
	|-EnumHelper.Caster<byte, bool>..cctor
	|
	|-RVA: 0xFEA Offset: 0xFEA VA: 0xFEA
	|-EnumHelper.Caster<byte, byte>..cctor
	|
	|-RVA: 0xFEB Offset: 0xFEB VA: 0xFEB
	|-EnumHelper.Caster<byte, char>..cctor
	|
	|-RVA: 0xFEC Offset: 0xFEC VA: 0xFEC
	|-EnumHelper.Caster<byte, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0xFED Offset: 0xFED VA: 0xFED
	|-EnumHelper.Caster<byte, DateTime>..cctor
	|
	|-RVA: 0xFEE Offset: 0xFEE VA: 0xFEE
	|-EnumHelper.Caster<byte, DateTimeOffset>..cctor
	|
	|-RVA: 0xFEF Offset: 0xFEF VA: 0xFEF
	|-EnumHelper.Caster<byte, Decimal>..cctor
	|
	|-RVA: 0xFF0 Offset: 0xFF0 VA: 0xFF0
	|-EnumHelper.Caster<byte, EmptyStruct>..cctor
	|
	|-RVA: 0xFF1 Offset: 0xFF1 VA: 0xFF1
	|-EnumHelper.Caster<byte, double>..cctor
	|
	|-RVA: 0xFF2 Offset: 0xFF2 VA: 0xFF2
	|-EnumHelper.Caster<byte, Guid>..cctor
	|
	|-RVA: 0xFF3 Offset: 0xFF3 VA: 0xFF3
	|-EnumHelper.Caster<byte, short>..cctor
	|
	|-RVA: 0xFF4 Offset: 0xFF4 VA: 0xFF4
	|-EnumHelper.Caster<byte, int>..cctor
	|
	|-RVA: 0xFF5 Offset: 0xFF5 VA: 0xFF5
	|-EnumHelper.Caster<byte, long>..cctor
	|
	|-RVA: 0xFF6 Offset: 0xFF6 VA: 0xFF6
	|-EnumHelper.Caster<byte, IntPtr>..cctor
	|
	|-RVA: 0xFF7 Offset: 0xFF7 VA: 0xFF7
	|-EnumHelper.Caster<byte, object>..cctor
	|
	|-RVA: 0xFF8 Offset: 0xFF8 VA: 0xFF8
	|-EnumHelper.Caster<byte, sbyte>..cctor
	|
	|-RVA: 0xFF9 Offset: 0xFF9 VA: 0xFF9
	|-EnumHelper.Caster<byte, float>..cctor
	|
	|-RVA: 0xFFA Offset: 0xFFA VA: 0xFFA
	|-EnumHelper.Caster<byte, TimeSpan>..cctor
	|
	|-RVA: 0xFFB Offset: 0xFFB VA: 0xFFB
	|-EnumHelper.Caster<byte, ushort>..cctor
	|
	|-RVA: 0xFFC Offset: 0xFFC VA: 0xFFC
	|-EnumHelper.Caster<byte, uint>..cctor
	|
	|-RVA: 0xFFD Offset: 0xFFD VA: 0xFFD
	|-EnumHelper.Caster<byte, ulong>..cctor
	|
	|-RVA: 0xFFE Offset: 0xFFE VA: 0xFFE
	|-EnumHelper.Caster<byte, UIntPtr>..cctor
	|
	|-RVA: 0xFFF Offset: 0xFFF VA: 0xFFF
	|-EnumHelper.Caster<short, bool>..cctor
	|
	|-RVA: 0x1000 Offset: 0x1000 VA: 0x1000
	|-EnumHelper.Caster<short, byte>..cctor
	|
	|-RVA: 0x1001 Offset: 0x1001 VA: 0x1001
	|-EnumHelper.Caster<short, char>..cctor
	|
	|-RVA: 0x1002 Offset: 0x1002 VA: 0x1002
	|-EnumHelper.Caster<short, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x1003 Offset: 0x1003 VA: 0x1003
	|-EnumHelper.Caster<short, DateTime>..cctor
	|
	|-RVA: 0x1004 Offset: 0x1004 VA: 0x1004
	|-EnumHelper.Caster<short, DateTimeOffset>..cctor
	|
	|-RVA: 0x1005 Offset: 0x1005 VA: 0x1005
	|-EnumHelper.Caster<short, Decimal>..cctor
	|
	|-RVA: 0x1006 Offset: 0x1006 VA: 0x1006
	|-EnumHelper.Caster<short, EmptyStruct>..cctor
	|
	|-RVA: 0x1007 Offset: 0x1007 VA: 0x1007
	|-EnumHelper.Caster<short, double>..cctor
	|
	|-RVA: 0x1008 Offset: 0x1008 VA: 0x1008
	|-EnumHelper.Caster<short, Guid>..cctor
	|
	|-RVA: 0x1009 Offset: 0x1009 VA: 0x1009
	|-EnumHelper.Caster<short, short>..cctor
	|
	|-RVA: 0x100A Offset: 0x100A VA: 0x100A
	|-EnumHelper.Caster<short, int>..cctor
	|
	|-RVA: 0x100B Offset: 0x100B VA: 0x100B
	|-EnumHelper.Caster<short, long>..cctor
	|
	|-RVA: 0x100C Offset: 0x100C VA: 0x100C
	|-EnumHelper.Caster<short, IntPtr>..cctor
	|
	|-RVA: 0x100D Offset: 0x100D VA: 0x100D
	|-EnumHelper.Caster<short, object>..cctor
	|
	|-RVA: 0x100E Offset: 0x100E VA: 0x100E
	|-EnumHelper.Caster<short, sbyte>..cctor
	|
	|-RVA: 0x100F Offset: 0x100F VA: 0x100F
	|-EnumHelper.Caster<short, float>..cctor
	|
	|-RVA: 0x1010 Offset: 0x1010 VA: 0x1010
	|-EnumHelper.Caster<short, TimeSpan>..cctor
	|
	|-RVA: 0x1011 Offset: 0x1011 VA: 0x1011
	|-EnumHelper.Caster<short, ushort>..cctor
	|
	|-RVA: 0x1012 Offset: 0x1012 VA: 0x1012
	|-EnumHelper.Caster<short, uint>..cctor
	|
	|-RVA: 0x1013 Offset: 0x1013 VA: 0x1013
	|-EnumHelper.Caster<short, ulong>..cctor
	|
	|-RVA: 0x1014 Offset: 0x1014 VA: 0x1014
	|-EnumHelper.Caster<short, UIntPtr>..cctor
	|
	|-RVA: 0x1015 Offset: 0x1015 VA: 0x1015
	|-EnumHelper.Caster<int, bool>..cctor
	|
	|-RVA: 0x1016 Offset: 0x1016 VA: 0x1016
	|-EnumHelper.Caster<int, byte>..cctor
	|
	|-RVA: 0x1017 Offset: 0x1017 VA: 0x1017
	|-EnumHelper.Caster<int, char>..cctor
	|
	|-RVA: 0x1018 Offset: 0x1018 VA: 0x1018
	|-EnumHelper.Caster<int, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x1019 Offset: 0x1019 VA: 0x1019
	|-EnumHelper.Caster<int, DateTime>..cctor
	|
	|-RVA: 0x101A Offset: 0x101A VA: 0x101A
	|-EnumHelper.Caster<int, DateTimeOffset>..cctor
	|
	|-RVA: 0x101B Offset: 0x101B VA: 0x101B
	|-EnumHelper.Caster<int, Decimal>..cctor
	|
	|-RVA: 0x101C Offset: 0x101C VA: 0x101C
	|-EnumHelper.Caster<int, EmptyStruct>..cctor
	|
	|-RVA: 0x101D Offset: 0x101D VA: 0x101D
	|-EnumHelper.Caster<int, double>..cctor
	|
	|-RVA: 0x101E Offset: 0x101E VA: 0x101E
	|-EnumHelper.Caster<int, Guid>..cctor
	|
	|-RVA: 0x101F Offset: 0x101F VA: 0x101F
	|-EnumHelper.Caster<int, short>..cctor
	|
	|-RVA: 0x1020 Offset: 0x1020 VA: 0x1020
	|-EnumHelper.Caster<int, int>..cctor
	|
	|-RVA: 0x1021 Offset: 0x1021 VA: 0x1021
	|-EnumHelper.Caster<int, long>..cctor
	|
	|-RVA: 0x1022 Offset: 0x1022 VA: 0x1022
	|-EnumHelper.Caster<int, IntPtr>..cctor
	|
	|-RVA: 0x1023 Offset: 0x1023 VA: 0x1023
	|-EnumHelper.Caster<int, object>..cctor
	|
	|-RVA: 0x1024 Offset: 0x1024 VA: 0x1024
	|-EnumHelper.Caster<int, sbyte>..cctor
	|
	|-RVA: 0x1025 Offset: 0x1025 VA: 0x1025
	|-EnumHelper.Caster<int, float>..cctor
	|
	|-RVA: 0x1026 Offset: 0x1026 VA: 0x1026
	|-EnumHelper.Caster<int, TimeSpan>..cctor
	|
	|-RVA: 0x1027 Offset: 0x1027 VA: 0x1027
	|-EnumHelper.Caster<int, ushort>..cctor
	|
	|-RVA: 0x1028 Offset: 0x1028 VA: 0x1028
	|-EnumHelper.Caster<int, uint>..cctor
	|
	|-RVA: 0x1029 Offset: 0x1029 VA: 0x1029
	|-EnumHelper.Caster<int, ulong>..cctor
	|
	|-RVA: 0x102A Offset: 0x102A VA: 0x102A
	|-EnumHelper.Caster<int, UIntPtr>..cctor
	|
	|-RVA: 0x102B Offset: 0x102B VA: 0x102B
	|-EnumHelper.Caster<long, bool>..cctor
	|
	|-RVA: 0x102C Offset: 0x102C VA: 0x102C
	|-EnumHelper.Caster<long, byte>..cctor
	|
	|-RVA: 0x102D Offset: 0x102D VA: 0x102D
	|-EnumHelper.Caster<long, char>..cctor
	|
	|-RVA: 0x102E Offset: 0x102E VA: 0x102E
	|-EnumHelper.Caster<long, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x102F Offset: 0x102F VA: 0x102F
	|-EnumHelper.Caster<long, DateTime>..cctor
	|
	|-RVA: 0x1030 Offset: 0x1030 VA: 0x1030
	|-EnumHelper.Caster<long, DateTimeOffset>..cctor
	|
	|-RVA: 0x1031 Offset: 0x1031 VA: 0x1031
	|-EnumHelper.Caster<long, Decimal>..cctor
	|
	|-RVA: 0x1032 Offset: 0x1032 VA: 0x1032
	|-EnumHelper.Caster<long, EmptyStruct>..cctor
	|
	|-RVA: 0x1033 Offset: 0x1033 VA: 0x1033
	|-EnumHelper.Caster<long, double>..cctor
	|
	|-RVA: 0x1034 Offset: 0x1034 VA: 0x1034
	|-EnumHelper.Caster<long, Guid>..cctor
	|
	|-RVA: 0x1035 Offset: 0x1035 VA: 0x1035
	|-EnumHelper.Caster<long, short>..cctor
	|
	|-RVA: 0x1036 Offset: 0x1036 VA: 0x1036
	|-EnumHelper.Caster<long, int>..cctor
	|
	|-RVA: 0x1037 Offset: 0x1037 VA: 0x1037
	|-EnumHelper.Caster<long, long>..cctor
	|
	|-RVA: 0x1038 Offset: 0x1038 VA: 0x1038
	|-EnumHelper.Caster<long, IntPtr>..cctor
	|
	|-RVA: 0x1039 Offset: 0x1039 VA: 0x1039
	|-EnumHelper.Caster<long, object>..cctor
	|
	|-RVA: 0x103A Offset: 0x103A VA: 0x103A
	|-EnumHelper.Caster<long, sbyte>..cctor
	|
	|-RVA: 0x103B Offset: 0x103B VA: 0x103B
	|-EnumHelper.Caster<long, float>..cctor
	|
	|-RVA: 0x103C Offset: 0x103C VA: 0x103C
	|-EnumHelper.Caster<long, TimeSpan>..cctor
	|
	|-RVA: 0x103D Offset: 0x103D VA: 0x103D
	|-EnumHelper.Caster<long, ushort>..cctor
	|
	|-RVA: 0x103E Offset: 0x103E VA: 0x103E
	|-EnumHelper.Caster<long, uint>..cctor
	|
	|-RVA: 0x103F Offset: 0x103F VA: 0x103F
	|-EnumHelper.Caster<long, ulong>..cctor
	|
	|-RVA: 0x1040 Offset: 0x1040 VA: 0x1040
	|-EnumHelper.Caster<long, UIntPtr>..cctor
	|
	|-RVA: 0xF91 Offset: 0xF91 VA: 0xF91
	|-EnumHelper.Caster<object, object>..cctor
	|
	|-RVA: 0x1041 Offset: 0x1041 VA: 0x1041
	|-EnumHelper.Caster<sbyte, bool>..cctor
	|
	|-RVA: 0x1042 Offset: 0x1042 VA: 0x1042
	|-EnumHelper.Caster<sbyte, byte>..cctor
	|
	|-RVA: 0x1043 Offset: 0x1043 VA: 0x1043
	|-EnumHelper.Caster<sbyte, char>..cctor
	|
	|-RVA: 0x1044 Offset: 0x1044 VA: 0x1044
	|-EnumHelper.Caster<sbyte, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x1045 Offset: 0x1045 VA: 0x1045
	|-EnumHelper.Caster<sbyte, DateTime>..cctor
	|
	|-RVA: 0x1046 Offset: 0x1046 VA: 0x1046
	|-EnumHelper.Caster<sbyte, DateTimeOffset>..cctor
	|
	|-RVA: 0x1047 Offset: 0x1047 VA: 0x1047
	|-EnumHelper.Caster<sbyte, Decimal>..cctor
	|
	|-RVA: 0x1048 Offset: 0x1048 VA: 0x1048
	|-EnumHelper.Caster<sbyte, EmptyStruct>..cctor
	|
	|-RVA: 0x1049 Offset: 0x1049 VA: 0x1049
	|-EnumHelper.Caster<sbyte, double>..cctor
	|
	|-RVA: 0x104A Offset: 0x104A VA: 0x104A
	|-EnumHelper.Caster<sbyte, Guid>..cctor
	|
	|-RVA: 0x104B Offset: 0x104B VA: 0x104B
	|-EnumHelper.Caster<sbyte, short>..cctor
	|
	|-RVA: 0x104C Offset: 0x104C VA: 0x104C
	|-EnumHelper.Caster<sbyte, int>..cctor
	|
	|-RVA: 0x104D Offset: 0x104D VA: 0x104D
	|-EnumHelper.Caster<sbyte, long>..cctor
	|
	|-RVA: 0x104E Offset: 0x104E VA: 0x104E
	|-EnumHelper.Caster<sbyte, IntPtr>..cctor
	|
	|-RVA: 0x104F Offset: 0x104F VA: 0x104F
	|-EnumHelper.Caster<sbyte, object>..cctor
	|
	|-RVA: 0x1050 Offset: 0x1050 VA: 0x1050
	|-EnumHelper.Caster<sbyte, sbyte>..cctor
	|
	|-RVA: 0x1051 Offset: 0x1051 VA: 0x1051
	|-EnumHelper.Caster<sbyte, float>..cctor
	|
	|-RVA: 0x1052 Offset: 0x1052 VA: 0x1052
	|-EnumHelper.Caster<sbyte, TimeSpan>..cctor
	|
	|-RVA: 0x1053 Offset: 0x1053 VA: 0x1053
	|-EnumHelper.Caster<sbyte, ushort>..cctor
	|
	|-RVA: 0x1054 Offset: 0x1054 VA: 0x1054
	|-EnumHelper.Caster<sbyte, uint>..cctor
	|
	|-RVA: 0x1055 Offset: 0x1055 VA: 0x1055
	|-EnumHelper.Caster<sbyte, ulong>..cctor
	|
	|-RVA: 0x1056 Offset: 0x1056 VA: 0x1056
	|-EnumHelper.Caster<sbyte, UIntPtr>..cctor
	|
	|-RVA: 0x1057 Offset: 0x1057 VA: 0x1057
	|-EnumHelper.Caster<ushort, bool>..cctor
	|
	|-RVA: 0x1058 Offset: 0x1058 VA: 0x1058
	|-EnumHelper.Caster<ushort, byte>..cctor
	|
	|-RVA: 0x1059 Offset: 0x1059 VA: 0x1059
	|-EnumHelper.Caster<ushort, char>..cctor
	|
	|-RVA: 0x105A Offset: 0x105A VA: 0x105A
	|-EnumHelper.Caster<ushort, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x105B Offset: 0x105B VA: 0x105B
	|-EnumHelper.Caster<ushort, DateTime>..cctor
	|
	|-RVA: 0x105C Offset: 0x105C VA: 0x105C
	|-EnumHelper.Caster<ushort, DateTimeOffset>..cctor
	|
	|-RVA: 0x105D Offset: 0x105D VA: 0x105D
	|-EnumHelper.Caster<ushort, Decimal>..cctor
	|
	|-RVA: 0x105E Offset: 0x105E VA: 0x105E
	|-EnumHelper.Caster<ushort, EmptyStruct>..cctor
	|
	|-RVA: 0x105F Offset: 0x105F VA: 0x105F
	|-EnumHelper.Caster<ushort, double>..cctor
	|
	|-RVA: 0x1060 Offset: 0x1060 VA: 0x1060
	|-EnumHelper.Caster<ushort, Guid>..cctor
	|
	|-RVA: 0x1061 Offset: 0x1061 VA: 0x1061
	|-EnumHelper.Caster<ushort, short>..cctor
	|
	|-RVA: 0x1062 Offset: 0x1062 VA: 0x1062
	|-EnumHelper.Caster<ushort, int>..cctor
	|
	|-RVA: 0x1063 Offset: 0x1063 VA: 0x1063
	|-EnumHelper.Caster<ushort, long>..cctor
	|
	|-RVA: 0x1064 Offset: 0x1064 VA: 0x1064
	|-EnumHelper.Caster<ushort, IntPtr>..cctor
	|
	|-RVA: 0x1065 Offset: 0x1065 VA: 0x1065
	|-EnumHelper.Caster<ushort, object>..cctor
	|
	|-RVA: 0x1066 Offset: 0x1066 VA: 0x1066
	|-EnumHelper.Caster<ushort, sbyte>..cctor
	|
	|-RVA: 0x1067 Offset: 0x1067 VA: 0x1067
	|-EnumHelper.Caster<ushort, float>..cctor
	|
	|-RVA: 0x1068 Offset: 0x1068 VA: 0x1068
	|-EnumHelper.Caster<ushort, TimeSpan>..cctor
	|
	|-RVA: 0x1069 Offset: 0x1069 VA: 0x1069
	|-EnumHelper.Caster<ushort, ushort>..cctor
	|
	|-RVA: 0x106A Offset: 0x106A VA: 0x106A
	|-EnumHelper.Caster<ushort, uint>..cctor
	|
	|-RVA: 0x106B Offset: 0x106B VA: 0x106B
	|-EnumHelper.Caster<ushort, ulong>..cctor
	|
	|-RVA: 0x106C Offset: 0x106C VA: 0x106C
	|-EnumHelper.Caster<ushort, UIntPtr>..cctor
	|
	|-RVA: 0x106D Offset: 0x106D VA: 0x106D
	|-EnumHelper.Caster<uint, bool>..cctor
	|
	|-RVA: 0x106E Offset: 0x106E VA: 0x106E
	|-EnumHelper.Caster<uint, byte>..cctor
	|
	|-RVA: 0x106F Offset: 0x106F VA: 0x106F
	|-EnumHelper.Caster<uint, char>..cctor
	|
	|-RVA: 0x1070 Offset: 0x1070 VA: 0x1070
	|-EnumHelper.Caster<uint, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x1071 Offset: 0x1071 VA: 0x1071
	|-EnumHelper.Caster<uint, DateTime>..cctor
	|
	|-RVA: 0x1072 Offset: 0x1072 VA: 0x1072
	|-EnumHelper.Caster<uint, DateTimeOffset>..cctor
	|
	|-RVA: 0x1073 Offset: 0x1073 VA: 0x1073
	|-EnumHelper.Caster<uint, Decimal>..cctor
	|
	|-RVA: 0x1074 Offset: 0x1074 VA: 0x1074
	|-EnumHelper.Caster<uint, EmptyStruct>..cctor
	|
	|-RVA: 0x1075 Offset: 0x1075 VA: 0x1075
	|-EnumHelper.Caster<uint, double>..cctor
	|
	|-RVA: 0x1076 Offset: 0x1076 VA: 0x1076
	|-EnumHelper.Caster<uint, Guid>..cctor
	|
	|-RVA: 0x1077 Offset: 0x1077 VA: 0x1077
	|-EnumHelper.Caster<uint, short>..cctor
	|
	|-RVA: 0x1078 Offset: 0x1078 VA: 0x1078
	|-EnumHelper.Caster<uint, int>..cctor
	|
	|-RVA: 0x1079 Offset: 0x1079 VA: 0x1079
	|-EnumHelper.Caster<uint, long>..cctor
	|
	|-RVA: 0x107A Offset: 0x107A VA: 0x107A
	|-EnumHelper.Caster<uint, IntPtr>..cctor
	|
	|-RVA: 0x107B Offset: 0x107B VA: 0x107B
	|-EnumHelper.Caster<uint, object>..cctor
	|
	|-RVA: 0x107C Offset: 0x107C VA: 0x107C
	|-EnumHelper.Caster<uint, sbyte>..cctor
	|
	|-RVA: 0x107D Offset: 0x107D VA: 0x107D
	|-EnumHelper.Caster<uint, float>..cctor
	|
	|-RVA: 0x107E Offset: 0x107E VA: 0x107E
	|-EnumHelper.Caster<uint, TimeSpan>..cctor
	|
	|-RVA: 0x107F Offset: 0x107F VA: 0x107F
	|-EnumHelper.Caster<uint, ushort>..cctor
	|
	|-RVA: 0x1080 Offset: 0x1080 VA: 0x1080
	|-EnumHelper.Caster<uint, uint>..cctor
	|
	|-RVA: 0x1081 Offset: 0x1081 VA: 0x1081
	|-EnumHelper.Caster<uint, ulong>..cctor
	|
	|-RVA: 0x1082 Offset: 0x1082 VA: 0x1082
	|-EnumHelper.Caster<uint, UIntPtr>..cctor
	|
	|-RVA: 0x1083 Offset: 0x1083 VA: 0x1083
	|-EnumHelper.Caster<ulong, bool>..cctor
	|
	|-RVA: 0x1084 Offset: 0x1084 VA: 0x1084
	|-EnumHelper.Caster<ulong, byte>..cctor
	|
	|-RVA: 0x1085 Offset: 0x1085 VA: 0x1085
	|-EnumHelper.Caster<ulong, char>..cctor
	|
	|-RVA: 0x1086 Offset: 0x1086 VA: 0x1086
	|-EnumHelper.Caster<ulong, KeyValuePair<object, object>>..cctor
	|
	|-RVA: 0x1087 Offset: 0x1087 VA: 0x1087
	|-EnumHelper.Caster<ulong, DateTime>..cctor
	|
	|-RVA: 0x1088 Offset: 0x1088 VA: 0x1088
	|-EnumHelper.Caster<ulong, DateTimeOffset>..cctor
	|
	|-RVA: 0x1089 Offset: 0x1089 VA: 0x1089
	|-EnumHelper.Caster<ulong, Decimal>..cctor
	|
	|-RVA: 0x108A Offset: 0x108A VA: 0x108A
	|-EnumHelper.Caster<ulong, EmptyStruct>..cctor
	|
	|-RVA: 0x108B Offset: 0x108B VA: 0x108B
	|-EnumHelper.Caster<ulong, double>..cctor
	|
	|-RVA: 0x108C Offset: 0x108C VA: 0x108C
	|-EnumHelper.Caster<ulong, Guid>..cctor
	|
	|-RVA: 0x108D Offset: 0x108D VA: 0x108D
	|-EnumHelper.Caster<ulong, short>..cctor
	|
	|-RVA: 0x108E Offset: 0x108E VA: 0x108E
	|-EnumHelper.Caster<ulong, int>..cctor
	|
	|-RVA: 0x108F Offset: 0x108F VA: 0x108F
	|-EnumHelper.Caster<ulong, long>..cctor
	|
	|-RVA: 0x1090 Offset: 0x1090 VA: 0x1090
	|-EnumHelper.Caster<ulong, IntPtr>..cctor
	|
	|-RVA: 0x1091 Offset: 0x1091 VA: 0x1091
	|-EnumHelper.Caster<ulong, object>..cctor
	|
	|-RVA: 0x1092 Offset: 0x1092 VA: 0x1092
	|-EnumHelper.Caster<ulong, sbyte>..cctor
	|
	|-RVA: 0x1093 Offset: 0x1093 VA: 0x1093
	|-EnumHelper.Caster<ulong, float>..cctor
	|
	|-RVA: 0x1094 Offset: 0x1094 VA: 0x1094
	|-EnumHelper.Caster<ulong, TimeSpan>..cctor
	|
	|-RVA: 0x1095 Offset: 0x1095 VA: 0x1095
	|-EnumHelper.Caster<ulong, ushort>..cctor
	|
	|-RVA: 0x1096 Offset: 0x1096 VA: 0x1096
	|-EnumHelper.Caster<ulong, uint>..cctor
	|
	|-RVA: 0x1097 Offset: 0x1097 VA: 0x1097
	|-EnumHelper.Caster<ulong, ulong>..cctor
	|
	|-RVA: 0x1098 Offset: 0x1098 VA: 0x1098
	|-EnumHelper.Caster<ulong, UIntPtr>..cctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumerableTypeInfo<IterableType, ElementType> : TraceLoggingTypeInfo<IterableType> // TypeDefIndex: 1271
{
	// Fields
	private readonly TraceLoggingTypeInfo<ElementType> elementInfo; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x12C Offset: 0x12C VA: 0x12C
	|-EnumerableTypeInfo<object, object>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref IterableType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x426 Offset: 0x426 VA: 0x426
	|-EnumerableTypeInfo<object, object>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x689 Offset: 0x689 VA: 0x689
	|-EnumerableTypeInfo<object, object>.GetData
	*/
}

// Namespace: System.Diagnostics.Tracing
[AttributeUsageAttribute] // RVA: 0x50A Offset: 0x50A VA: 0x50A
public class EventDataAttribute : Attribute // TypeDefIndex: 1272
{
	// Fields
	private EventLevel level; // 0x8
	private EventOpcode opcode; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x5AC Offset: 0x5AC VA: 0x5AC
	private string <Name>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0x5AD Offset: 0x5AD VA: 0x5AD
	private EventKeywords <Keywords>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0x5AE Offset: 0x5AE VA: 0x5AE
	private EventTags <Tags>k__BackingField; // 0x20

	// Properties
	public string Name { get; }
	internal EventLevel Level { get; }
	internal EventOpcode Opcode { get; }
	internal EventKeywords Keywords { get; }
	internal EventTags Tags { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x790 Offset: 0x790 VA: 0x790
	// RVA: 0x292 Offset: 0x292 VA: 0x292
	public string get_Name() { }

	// RVA: 0x293 Offset: 0x293 VA: 0x293
	internal EventLevel get_Level() { }

	// RVA: 0x294 Offset: 0x294 VA: 0x294
	internal EventOpcode get_Opcode() { }

	[CompilerGeneratedAttribute] // RVA: 0x791 Offset: 0x791 VA: 0x791
	// RVA: 0x34 Offset: 0x34 VA: 0x34
	internal EventKeywords get_Keywords() { }

	[CompilerGeneratedAttribute] // RVA: 0x792 Offset: 0x792 VA: 0x792
	// RVA: 0x295 Offset: 0x295 VA: 0x295
	internal EventTags get_Tags() { }
}

// Namespace: System.Diagnostics.Tracing
[FlagsAttribute] // RVA: 0x50B Offset: 0x50B VA: 0x50B
public enum EventFieldTags // TypeDefIndex: 1273
{
	// Fields
	public int value__; // 0x0
	public const EventFieldTags None = 0;
}

// Namespace: System.Diagnostics.Tracing
[AttributeUsageAttribute] // RVA: 0x50C Offset: 0x50C VA: 0x50C
public class EventFieldAttribute : Attribute // TypeDefIndex: 1274
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5AF Offset: 0x5AF VA: 0x5AF
	private EventFieldTags <Tags>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x5B0 Offset: 0x5B0 VA: 0x5B0
	private string <Name>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x5B1 Offset: 0x5B1 VA: 0x5B1
	private EventFieldFormat <Format>k__BackingField; // 0x10

	// Properties
	public EventFieldTags Tags { get; }
	internal string Name { get; }
	public EventFieldFormat Format { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x793 Offset: 0x793 VA: 0x793
	// RVA: 0x29D Offset: 0x29D VA: 0x29D
	public EventFieldTags get_Tags() { }

	[CompilerGeneratedAttribute] // RVA: 0x794 Offset: 0x794 VA: 0x794
	// RVA: 0x29E Offset: 0x29E VA: 0x29E
	internal string get_Name() { }

	[CompilerGeneratedAttribute] // RVA: 0x795 Offset: 0x795 VA: 0x795
	// RVA: 0x29F Offset: 0x29F VA: 0x29F
	public EventFieldFormat get_Format() { }
}

// Namespace: System.Diagnostics.Tracing
public enum EventFieldFormat // TypeDefIndex: 1275
{
	// Fields
	public int value__; // 0x0
	public const EventFieldFormat Default = 0;
	public const EventFieldFormat String = 2;
	public const EventFieldFormat Boolean = 3;
	public const EventFieldFormat Hexadecimal = 4;
	public const EventFieldFormat Xml = 11;
	public const EventFieldFormat Json = 12;
	public const EventFieldFormat HResult = 15;
}

// Namespace: System.Diagnostics.Tracing
[AttributeUsageAttribute] // RVA: 0x50D Offset: 0x50D VA: 0x50D
public class EventIgnoreAttribute : Attribute // TypeDefIndex: 1276
{}

// Namespace: System.Diagnostics.Tracing
[DefaultMemberAttribute] // RVA: 0x50E Offset: 0x50E VA: 0x50E
internal class EventPayload : IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable // TypeDefIndex: 1277
{
	// Fields
	private List<string> m_names; // 0x8
	private List<object> m_values; // 0xC

	// Properties
	public ICollection<string> Keys { get; }
	public string Item { set; }
	public int Count { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0xE9 Offset: 0xE9 VA: 0xE9
	internal void .ctor(List<string> payloadNames, List<object> payloadValues) { }

	// RVA: 0x2A0 Offset: 0x2A0 VA: 0x2A0 Slot: 16
	public ICollection<string> get_Keys() { }

	// RVA: 0xEA Offset: 0xEA VA: 0xEA Slot: 4
	public void set_Item(string key, object value) { }

	// RVA: 0xEB Offset: 0xEB VA: 0xEB Slot: 5
	public void Add(string key, object value) { }

	// RVA: 0x117 Offset: 0x117 VA: 0x117 Slot: 9
	public void Add(KeyValuePair<string, object> payloadEntry) { }

	// RVA: 0x2F9 Offset: 0x2F9 VA: 0x2F9 Slot: 10
	public void Clear() { }

	// RVA: 0x186 Offset: 0x186 VA: 0x186 Slot: 11
	public bool Contains(KeyValuePair<string, object> entry) { }

	// RVA: 0x187 Offset: 0x187 VA: 0x187 Slot: 17
	public bool ContainsKey(string key) { }

	// RVA: 0x2A1 Offset: 0x2A1 VA: 0x2A1 Slot: 7
	public int get_Count() { }

	// RVA: 0x2A2 Offset: 0x2A2 VA: 0x2A2 Slot: 8
	public bool get_IsReadOnly() { }

	[IteratorStateMachineAttribute] // RVA: 0x796 Offset: 0x796 VA: 0x796
	// RVA: 0x2A3 Offset: 0x2A3 VA: 0x2A3 Slot: 14
	public IEnumerator<KeyValuePair<string, object>> GetEnumerator() { }

	// RVA: 0x2A4 Offset: 0x2A4 VA: 0x2A4 Slot: 15
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xEC Offset: 0xEC VA: 0xEC Slot: 12
	public void CopyTo(KeyValuePair<string, object>[] payloadEntries, int count) { }

	// RVA: 0x188 Offset: 0x188 VA: 0x188 Slot: 13
	public bool Remove(KeyValuePair<string, object> entry) { }

	// RVA: 0x85A Offset: 0x85A VA: 0x85A Slot: 6
	public bool TryGetValue(string key, out object value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x50F Offset: 0x50F VA: 0x50F
private sealed class EventPayload.<GetEnumerator>d__17 : IEnumerator<KeyValuePair<string, object>>, IDisposable, IEnumerator // TypeDefIndex: 1278
{
	// Fields
	private int <>1__state; // 0x8
	private KeyValuePair<string, object> <>2__current; // 0xC
	public EventPayload <>4__this; // 0x14
	private int <i>5__1; // 0x18

	// Properties
	private KeyValuePair<string, object> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0x797 Offset: 0x797 VA: 0x797
	// RVA: 0x118 Offset: 0x118 VA: 0x118
	public void .ctor(int <>1__state) { }

	[DebuggerHiddenAttribute] // RVA: 0x798 Offset: 0x798 VA: 0x798
	// RVA: 0x2FA Offset: 0x2FA VA: 0x2FA Slot: 5
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2A5 Offset: 0x2A5 VA: 0x2A5 Slot: 6
	private bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0x799 Offset: 0x799 VA: 0x799
	// RVA: 0x119 Offset: 0x119 VA: 0x119 Slot: 4
	private KeyValuePair<string, object> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0x79A Offset: 0x79A VA: 0x79A
	// RVA: 0x2A6 Offset: 0x2A6 VA: 0x2A6 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Diagnostics.Tracing
public struct EventSourceOptions // TypeDefIndex: 1279
{
	// Fields
	internal EventKeywords keywords; // 0x0
	internal EventTags tags; // 0x8
	internal EventActivityOptions activityOptions; // 0xC
	internal byte level; // 0x10
	internal byte opcode; // 0x11
	internal byte valuesSet; // 0x12

	// Properties
	public EventLevel Level { set; }
	public EventOpcode Opcode { set; }
	public EventKeywords Keywords { set; }

	// Methods

	// RVA: 0x131 Offset: 0x131 VA: 0x131
	public void set_Level(EventLevel value) { }

	// RVA: 0x132 Offset: 0x132 VA: 0x132
	public void set_Opcode(EventOpcode value) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	public void set_Keywords(EventKeywords value) { }
}

// Namespace: System.Diagnostics.Tracing
internal class FieldMetadata // TypeDefIndex: 1280
{
	// Fields
	private readonly string name; // 0x8
	private readonly int nameSize; // 0xC
	private readonly EventFieldTags tags; // 0x10
	private readonly byte[] custom; // 0x14
	private readonly ushort fixedCount; // 0x18
	private byte inType; // 0x1A
	private byte outType; // 0x1B

	// Methods

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	public void .ctor(string name, TraceLoggingDataType type, EventFieldTags tags, bool variableCount) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	private void .ctor(string name, TraceLoggingDataType dataType, EventFieldTags tags, byte countFlags, ushort fixedCount = 0, byte[] custom) { }

	// RVA: 0x310 Offset: 0x310 VA: 0x310
	public void IncrementStructFieldCount() { }

	// RVA: 0xFB Offset: 0xFB VA: 0xFB
	public void Encode(ref int pos, byte[] metadata) { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class InvokeTypeInfo<ContainerType> : TraceLoggingTypeInfo<ContainerType> // TypeDefIndex: 1281
{
	// Fields
	private readonly PropertyAnalysis[] properties; // 0xFFFFFFFF
	private readonly PropertyAccessor<ContainerType>[] accessors; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(TypeAnalysis typeAnalysis) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB23 Offset: 0xB23 VA: 0xB23
	|-InvokeTypeInfo<bool>..ctor
	|
	|-RVA: 0xB24 Offset: 0xB24 VA: 0xB24
	|-InvokeTypeInfo<byte>..ctor
	|
	|-RVA: 0xB25 Offset: 0xB25 VA: 0xB25
	|-InvokeTypeInfo<char>..ctor
	|
	|-RVA: 0xB26 Offset: 0xB26 VA: 0xB26
	|-InvokeTypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB27 Offset: 0xB27 VA: 0xB27
	|-InvokeTypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB28 Offset: 0xB28 VA: 0xB28
	|-InvokeTypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB29 Offset: 0xB29 VA: 0xB29
	|-InvokeTypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB2A Offset: 0xB2A VA: 0xB2A
	|-InvokeTypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB2B Offset: 0xB2B VA: 0xB2B
	|-InvokeTypeInfo<double>..ctor
	|
	|-RVA: 0xB2C Offset: 0xB2C VA: 0xB2C
	|-InvokeTypeInfo<Guid>..ctor
	|
	|-RVA: 0xB2D Offset: 0xB2D VA: 0xB2D
	|-InvokeTypeInfo<short>..ctor
	|
	|-RVA: 0xB2E Offset: 0xB2E VA: 0xB2E
	|-InvokeTypeInfo<int>..ctor
	|
	|-RVA: 0xB2F Offset: 0xB2F VA: 0xB2F
	|-InvokeTypeInfo<long>..ctor
	|
	|-RVA: 0xB30 Offset: 0xB30 VA: 0xB30
	|-InvokeTypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x82E Offset: 0x82E VA: 0x82E
	|-InvokeTypeInfo<object>..ctor
	|
	|-RVA: 0xB31 Offset: 0xB31 VA: 0xB31
	|-InvokeTypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB32 Offset: 0xB32 VA: 0xB32
	|-InvokeTypeInfo<float>..ctor
	|
	|-RVA: 0xB33 Offset: 0xB33 VA: 0xB33
	|-InvokeTypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB34 Offset: 0xB34 VA: 0xB34
	|-InvokeTypeInfo<ushort>..ctor
	|
	|-RVA: 0xB35 Offset: 0xB35 VA: 0xB35
	|-InvokeTypeInfo<uint>..ctor
	|
	|-RVA: 0xB36 Offset: 0xB36 VA: 0xB36
	|-InvokeTypeInfo<ulong>..ctor
	|
	|-RVA: 0xB37 Offset: 0xB37 VA: 0xB37
	|-InvokeTypeInfo<UIntPtr>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x272 Offset: 0x272 VA: 0x272
	|-InvokeTypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x273 Offset: 0x273 VA: 0x273
	|-InvokeTypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x274 Offset: 0x274 VA: 0x274
	|-InvokeTypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x275 Offset: 0x275 VA: 0x275
	|-InvokeTypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x276 Offset: 0x276 VA: 0x276
	|-InvokeTypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x277 Offset: 0x277 VA: 0x277
	|-InvokeTypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x278 Offset: 0x278 VA: 0x278
	|-InvokeTypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x279 Offset: 0x279 VA: 0x279
	|-InvokeTypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x27A Offset: 0x27A VA: 0x27A
	|-InvokeTypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x27B Offset: 0x27B VA: 0x27B
	|-InvokeTypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x27C Offset: 0x27C VA: 0x27C
	|-InvokeTypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x27D Offset: 0x27D VA: 0x27D
	|-InvokeTypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x27E Offset: 0x27E VA: 0x27E
	|-InvokeTypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x27F Offset: 0x27F VA: 0x27F
	|-InvokeTypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x12D Offset: 0x12D VA: 0x12D
	|-InvokeTypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x280 Offset: 0x280 VA: 0x280
	|-InvokeTypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x281 Offset: 0x281 VA: 0x281
	|-InvokeTypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x282 Offset: 0x282 VA: 0x282
	|-InvokeTypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x283 Offset: 0x283 VA: 0x283
	|-InvokeTypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x284 Offset: 0x284 VA: 0x284
	|-InvokeTypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x285 Offset: 0x285 VA: 0x285
	|-InvokeTypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x286 Offset: 0x286 VA: 0x286
	|-InvokeTypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref ContainerType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x923 Offset: 0x923 VA: 0x923
	|-InvokeTypeInfo<bool>.WriteData
	|
	|-RVA: 0x925 Offset: 0x925 VA: 0x925
	|-InvokeTypeInfo<byte>.WriteData
	|
	|-RVA: 0x927 Offset: 0x927 VA: 0x927
	|-InvokeTypeInfo<char>.WriteData
	|
	|-RVA: 0x929 Offset: 0x929 VA: 0x929
	|-InvokeTypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x92B Offset: 0x92B VA: 0x92B
	|-InvokeTypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x92D Offset: 0x92D VA: 0x92D
	|-InvokeTypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x92F Offset: 0x92F VA: 0x92F
	|-InvokeTypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x931 Offset: 0x931 VA: 0x931
	|-InvokeTypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x933 Offset: 0x933 VA: 0x933
	|-InvokeTypeInfo<double>.WriteData
	|
	|-RVA: 0x935 Offset: 0x935 VA: 0x935
	|-InvokeTypeInfo<Guid>.WriteData
	|
	|-RVA: 0x937 Offset: 0x937 VA: 0x937
	|-InvokeTypeInfo<short>.WriteData
	|
	|-RVA: 0x939 Offset: 0x939 VA: 0x939
	|-InvokeTypeInfo<int>.WriteData
	|
	|-RVA: 0x93B Offset: 0x93B VA: 0x93B
	|-InvokeTypeInfo<long>.WriteData
	|
	|-RVA: 0x93D Offset: 0x93D VA: 0x93D
	|-InvokeTypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x427 Offset: 0x427 VA: 0x427
	|-InvokeTypeInfo<object>.WriteData
	|
	|-RVA: 0x93F Offset: 0x93F VA: 0x93F
	|-InvokeTypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x941 Offset: 0x941 VA: 0x941
	|-InvokeTypeInfo<float>.WriteData
	|
	|-RVA: 0x943 Offset: 0x943 VA: 0x943
	|-InvokeTypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x945 Offset: 0x945 VA: 0x945
	|-InvokeTypeInfo<ushort>.WriteData
	|
	|-RVA: 0x947 Offset: 0x947 VA: 0x947
	|-InvokeTypeInfo<uint>.WriteData
	|
	|-RVA: 0x949 Offset: 0x949 VA: 0x949
	|-InvokeTypeInfo<ulong>.WriteData
	|
	|-RVA: 0x94B Offset: 0x94B VA: 0x94B
	|-InvokeTypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB5B Offset: 0xB5B VA: 0xB5B
	|-InvokeTypeInfo<bool>.GetData
	|
	|-RVA: 0xB5C Offset: 0xB5C VA: 0xB5C
	|-InvokeTypeInfo<byte>.GetData
	|
	|-RVA: 0xB5D Offset: 0xB5D VA: 0xB5D
	|-InvokeTypeInfo<char>.GetData
	|
	|-RVA: 0xB5E Offset: 0xB5E VA: 0xB5E
	|-InvokeTypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xB5F Offset: 0xB5F VA: 0xB5F
	|-InvokeTypeInfo<DateTime>.GetData
	|
	|-RVA: 0xB60 Offset: 0xB60 VA: 0xB60
	|-InvokeTypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xB61 Offset: 0xB61 VA: 0xB61
	|-InvokeTypeInfo<Decimal>.GetData
	|
	|-RVA: 0xB62 Offset: 0xB62 VA: 0xB62
	|-InvokeTypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xB63 Offset: 0xB63 VA: 0xB63
	|-InvokeTypeInfo<double>.GetData
	|
	|-RVA: 0xB64 Offset: 0xB64 VA: 0xB64
	|-InvokeTypeInfo<Guid>.GetData
	|
	|-RVA: 0xB65 Offset: 0xB65 VA: 0xB65
	|-InvokeTypeInfo<short>.GetData
	|
	|-RVA: 0xB66 Offset: 0xB66 VA: 0xB66
	|-InvokeTypeInfo<int>.GetData
	|
	|-RVA: 0xB67 Offset: 0xB67 VA: 0xB67
	|-InvokeTypeInfo<long>.GetData
	|
	|-RVA: 0xB68 Offset: 0xB68 VA: 0xB68
	|-InvokeTypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x68A Offset: 0x68A VA: 0x68A
	|-InvokeTypeInfo<object>.GetData
	|
	|-RVA: 0xB69 Offset: 0xB69 VA: 0xB69
	|-InvokeTypeInfo<sbyte>.GetData
	|
	|-RVA: 0xB6A Offset: 0xB6A VA: 0xB6A
	|-InvokeTypeInfo<float>.GetData
	|
	|-RVA: 0xB6B Offset: 0xB6B VA: 0xB6B
	|-InvokeTypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xB6C Offset: 0xB6C VA: 0xB6C
	|-InvokeTypeInfo<ushort>.GetData
	|
	|-RVA: 0xB6D Offset: 0xB6D VA: 0xB6D
	|-InvokeTypeInfo<uint>.GetData
	|
	|-RVA: 0xB6E Offset: 0xB6E VA: 0xB6E
	|-InvokeTypeInfo<ulong>.GetData
	|
	|-RVA: 0xB6F Offset: 0xB6F VA: 0xB6F
	|-InvokeTypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override void WriteObjectData(TraceLoggingDataCollector collector, object valueObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x924 Offset: 0x924 VA: 0x924
	|-InvokeTypeInfo<bool>.WriteObjectData
	|
	|-RVA: 0x926 Offset: 0x926 VA: 0x926
	|-InvokeTypeInfo<byte>.WriteObjectData
	|
	|-RVA: 0x928 Offset: 0x928 VA: 0x928
	|-InvokeTypeInfo<char>.WriteObjectData
	|
	|-RVA: 0x92A Offset: 0x92A VA: 0x92A
	|-InvokeTypeInfo<KeyValuePair<object, object>>.WriteObjectData
	|
	|-RVA: 0x92C Offset: 0x92C VA: 0x92C
	|-InvokeTypeInfo<DateTime>.WriteObjectData
	|
	|-RVA: 0x92E Offset: 0x92E VA: 0x92E
	|-InvokeTypeInfo<DateTimeOffset>.WriteObjectData
	|
	|-RVA: 0x930 Offset: 0x930 VA: 0x930
	|-InvokeTypeInfo<Decimal>.WriteObjectData
	|
	|-RVA: 0x932 Offset: 0x932 VA: 0x932
	|-InvokeTypeInfo<EmptyStruct>.WriteObjectData
	|
	|-RVA: 0x934 Offset: 0x934 VA: 0x934
	|-InvokeTypeInfo<double>.WriteObjectData
	|
	|-RVA: 0x936 Offset: 0x936 VA: 0x936
	|-InvokeTypeInfo<Guid>.WriteObjectData
	|
	|-RVA: 0x938 Offset: 0x938 VA: 0x938
	|-InvokeTypeInfo<short>.WriteObjectData
	|
	|-RVA: 0x93A Offset: 0x93A VA: 0x93A
	|-InvokeTypeInfo<int>.WriteObjectData
	|
	|-RVA: 0x93C Offset: 0x93C VA: 0x93C
	|-InvokeTypeInfo<long>.WriteObjectData
	|
	|-RVA: 0x93E Offset: 0x93E VA: 0x93E
	|-InvokeTypeInfo<IntPtr>.WriteObjectData
	|
	|-RVA: 0x428 Offset: 0x428 VA: 0x428
	|-InvokeTypeInfo<object>.WriteObjectData
	|
	|-RVA: 0x940 Offset: 0x940 VA: 0x940
	|-InvokeTypeInfo<sbyte>.WriteObjectData
	|
	|-RVA: 0x942 Offset: 0x942 VA: 0x942
	|-InvokeTypeInfo<float>.WriteObjectData
	|
	|-RVA: 0x944 Offset: 0x944 VA: 0x944
	|-InvokeTypeInfo<TimeSpan>.WriteObjectData
	|
	|-RVA: 0x946 Offset: 0x946 VA: 0x946
	|-InvokeTypeInfo<ushort>.WriteObjectData
	|
	|-RVA: 0x948 Offset: 0x948 VA: 0x948
	|-InvokeTypeInfo<uint>.WriteObjectData
	|
	|-RVA: 0x94A Offset: 0x94A VA: 0x94A
	|-InvokeTypeInfo<ulong>.WriteObjectData
	|
	|-RVA: 0x94C Offset: 0x94C VA: 0x94C
	|-InvokeTypeInfo<UIntPtr>.WriteObjectData
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class NameInfo : ConcurrentSetItem<KeyValuePair<string, EventTags>, NameInfo> // TypeDefIndex: 1282
{
	// Fields
	private static int lastIdentity; // 0x0
	internal readonly string name; // 0x8
	internal readonly EventTags tags; // 0xC
	internal readonly int identity; // 0x10
	internal readonly byte[] nameMetadata; // 0x14

	// Methods

	// RVA: 0x31E Offset: 0x31E VA: 0x31E
	internal static void ReserveEventIDsBelow(int eventId) { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54
	public void .ctor(string name, EventTags tags, int typeMetadataSize) { }

	// RVA: 0x194 Offset: 0x194 VA: 0x194 Slot: 4
	public override int Compare(NameInfo other) { }

	// RVA: 0x195 Offset: 0x195 VA: 0x195 Slot: 5
	public override int Compare(KeyValuePair<string, EventTags> key) { }

	// RVA: 0x863 Offset: 0x863 VA: 0x863
	private int Compare(string otherName, EventTags otherTags) { }

	// RVA: 0xE78 Offset: 0xE78 VA: 0xE78
	private static void .cctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal abstract class PropertyAccessor<ContainerType> // TypeDefIndex: 1283
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Write(TraceLoggingDataCollector collector, ref ContainerType value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-PropertyAccessor<object>.Write
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object GetData(ContainerType value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-PropertyAccessor<object>.GetData
	*/

	// RVA: -1 Offset: -1
	public static PropertyAccessor<ContainerType> Create(PropertyAnalysis property) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1241 Offset: 0x1241 VA: 0x1241
	|-PropertyAccessor<bool>.Create
	|
	|-RVA: 0x1242 Offset: 0x1242 VA: 0x1242
	|-PropertyAccessor<byte>.Create
	|
	|-RVA: 0x1243 Offset: 0x1243 VA: 0x1243
	|-PropertyAccessor<char>.Create
	|
	|-RVA: 0x1244 Offset: 0x1244 VA: 0x1244
	|-PropertyAccessor<KeyValuePair<object, object>>.Create
	|
	|-RVA: 0x1245 Offset: 0x1245 VA: 0x1245
	|-PropertyAccessor<DateTime>.Create
	|
	|-RVA: 0x1246 Offset: 0x1246 VA: 0x1246
	|-PropertyAccessor<DateTimeOffset>.Create
	|
	|-RVA: 0x1247 Offset: 0x1247 VA: 0x1247
	|-PropertyAccessor<Decimal>.Create
	|
	|-RVA: 0x1248 Offset: 0x1248 VA: 0x1248
	|-PropertyAccessor<EmptyStruct>.Create
	|
	|-RVA: 0x1249 Offset: 0x1249 VA: 0x1249
	|-PropertyAccessor<double>.Create
	|
	|-RVA: 0x124A Offset: 0x124A VA: 0x124A
	|-PropertyAccessor<Guid>.Create
	|
	|-RVA: 0x124B Offset: 0x124B VA: 0x124B
	|-PropertyAccessor<short>.Create
	|
	|-RVA: 0x124C Offset: 0x124C VA: 0x124C
	|-PropertyAccessor<int>.Create
	|
	|-RVA: 0x124D Offset: 0x124D VA: 0x124D
	|-PropertyAccessor<long>.Create
	|
	|-RVA: 0x124E Offset: 0x124E VA: 0x124E
	|-PropertyAccessor<IntPtr>.Create
	|
	|-RVA: 0xD89 Offset: 0xD89 VA: 0xD89
	|-PropertyAccessor<object>.Create
	|
	|-RVA: 0x124F Offset: 0x124F VA: 0x124F
	|-PropertyAccessor<sbyte>.Create
	|
	|-RVA: 0x1250 Offset: 0x1250 VA: 0x1250
	|-PropertyAccessor<float>.Create
	|
	|-RVA: 0x1251 Offset: 0x1251 VA: 0x1251
	|-PropertyAccessor<TimeSpan>.Create
	|
	|-RVA: 0x1252 Offset: 0x1252 VA: 0x1252
	|-PropertyAccessor<ushort>.Create
	|
	|-RVA: 0x1253 Offset: 0x1253 VA: 0x1253
	|-PropertyAccessor<uint>.Create
	|
	|-RVA: 0x1254 Offset: 0x1254 VA: 0x1254
	|-PropertyAccessor<ulong>.Create
	|
	|-RVA: 0x1255 Offset: 0x1255 VA: 0x1255
	|-PropertyAccessor<UIntPtr>.Create
	*/

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBB1 Offset: 0xBB1 VA: 0xBB1
	|-PropertyAccessor<bool>..ctor
	|
	|-RVA: 0xBB2 Offset: 0xBB2 VA: 0xBB2
	|-PropertyAccessor<byte>..ctor
	|
	|-RVA: 0xBB3 Offset: 0xBB3 VA: 0xBB3
	|-PropertyAccessor<char>..ctor
	|
	|-RVA: 0xBB4 Offset: 0xBB4 VA: 0xBB4
	|-PropertyAccessor<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xBB5 Offset: 0xBB5 VA: 0xBB5
	|-PropertyAccessor<DateTime>..ctor
	|
	|-RVA: 0xBB6 Offset: 0xBB6 VA: 0xBB6
	|-PropertyAccessor<DateTimeOffset>..ctor
	|
	|-RVA: 0xBB7 Offset: 0xBB7 VA: 0xBB7
	|-PropertyAccessor<Decimal>..ctor
	|
	|-RVA: 0xBB8 Offset: 0xBB8 VA: 0xBB8
	|-PropertyAccessor<EmptyStruct>..ctor
	|
	|-RVA: 0xBB9 Offset: 0xBB9 VA: 0xBB9
	|-PropertyAccessor<double>..ctor
	|
	|-RVA: 0xBBA Offset: 0xBBA VA: 0xBBA
	|-PropertyAccessor<Guid>..ctor
	|
	|-RVA: 0xBBB Offset: 0xBBB VA: 0xBBB
	|-PropertyAccessor<short>..ctor
	|
	|-RVA: 0xBBC Offset: 0xBBC VA: 0xBBC
	|-PropertyAccessor<int>..ctor
	|
	|-RVA: 0xBBD Offset: 0xBBD VA: 0xBBD
	|-PropertyAccessor<long>..ctor
	|
	|-RVA: 0xBBE Offset: 0xBBE VA: 0xBBE
	|-PropertyAccessor<IntPtr>..ctor
	|
	|-RVA: 0x8EE Offset: 0x8EE VA: 0x8EE
	|-PropertyAccessor<object>..ctor
	|
	|-RVA: 0xBBF Offset: 0xBBF VA: 0xBBF
	|-PropertyAccessor<sbyte>..ctor
	|
	|-RVA: 0xBC0 Offset: 0xBC0 VA: 0xBC0
	|-PropertyAccessor<float>..ctor
	|
	|-RVA: 0xBC1 Offset: 0xBC1 VA: 0xBC1
	|-PropertyAccessor<TimeSpan>..ctor
	|
	|-RVA: 0xBC2 Offset: 0xBC2 VA: 0xBC2
	|-PropertyAccessor<ushort>..ctor
	|
	|-RVA: 0xBC3 Offset: 0xBC3 VA: 0xBC3
	|-PropertyAccessor<uint>..ctor
	|
	|-RVA: 0xBC4 Offset: 0xBC4 VA: 0xBC4
	|-PropertyAccessor<ulong>..ctor
	|
	|-RVA: 0xBC5 Offset: 0xBC5 VA: 0xBC5
	|-PropertyAccessor<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal class NonGenericProperytWriter<ContainerType> : PropertyAccessor<ContainerType> // TypeDefIndex: 1284
{
	// Fields
	private readonly TraceLoggingTypeInfo typeInfo; // 0xFFFFFFFF
	private readonly MethodInfo getterInfo; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(PropertyAnalysis property) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB38 Offset: 0xB38 VA: 0xB38
	|-NonGenericProperytWriter<bool>..ctor
	|
	|-RVA: 0xB39 Offset: 0xB39 VA: 0xB39
	|-NonGenericProperytWriter<byte>..ctor
	|
	|-RVA: 0xB3A Offset: 0xB3A VA: 0xB3A
	|-NonGenericProperytWriter<char>..ctor
	|
	|-RVA: 0xB3B Offset: 0xB3B VA: 0xB3B
	|-NonGenericProperytWriter<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB3C Offset: 0xB3C VA: 0xB3C
	|-NonGenericProperytWriter<DateTime>..ctor
	|
	|-RVA: 0xB3D Offset: 0xB3D VA: 0xB3D
	|-NonGenericProperytWriter<DateTimeOffset>..ctor
	|
	|-RVA: 0xB3E Offset: 0xB3E VA: 0xB3E
	|-NonGenericProperytWriter<Decimal>..ctor
	|
	|-RVA: 0xB3F Offset: 0xB3F VA: 0xB3F
	|-NonGenericProperytWriter<EmptyStruct>..ctor
	|
	|-RVA: 0xB40 Offset: 0xB40 VA: 0xB40
	|-NonGenericProperytWriter<double>..ctor
	|
	|-RVA: 0xB41 Offset: 0xB41 VA: 0xB41
	|-NonGenericProperytWriter<Guid>..ctor
	|
	|-RVA: 0xB42 Offset: 0xB42 VA: 0xB42
	|-NonGenericProperytWriter<short>..ctor
	|
	|-RVA: 0xB43 Offset: 0xB43 VA: 0xB43
	|-NonGenericProperytWriter<int>..ctor
	|
	|-RVA: 0xB44 Offset: 0xB44 VA: 0xB44
	|-NonGenericProperytWriter<long>..ctor
	|
	|-RVA: 0xB45 Offset: 0xB45 VA: 0xB45
	|-NonGenericProperytWriter<IntPtr>..ctor
	|
	|-RVA: 0x82F Offset: 0x82F VA: 0x82F
	|-NonGenericProperytWriter<object>..ctor
	|
	|-RVA: 0xB46 Offset: 0xB46 VA: 0xB46
	|-NonGenericProperytWriter<sbyte>..ctor
	|
	|-RVA: 0xB47 Offset: 0xB47 VA: 0xB47
	|-NonGenericProperytWriter<float>..ctor
	|
	|-RVA: 0xB48 Offset: 0xB48 VA: 0xB48
	|-NonGenericProperytWriter<TimeSpan>..ctor
	|
	|-RVA: 0xB49 Offset: 0xB49 VA: 0xB49
	|-NonGenericProperytWriter<ushort>..ctor
	|
	|-RVA: 0xB4A Offset: 0xB4A VA: 0xB4A
	|-NonGenericProperytWriter<uint>..ctor
	|
	|-RVA: 0xB4B Offset: 0xB4B VA: 0xB4B
	|-NonGenericProperytWriter<ulong>..ctor
	|
	|-RVA: 0xB4C Offset: 0xB4C VA: 0xB4C
	|-NonGenericProperytWriter<UIntPtr>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Write(TraceLoggingDataCollector collector, ref ContainerType container) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x94D Offset: 0x94D VA: 0x94D
	|-NonGenericProperytWriter<bool>.Write
	|
	|-RVA: 0x94E Offset: 0x94E VA: 0x94E
	|-NonGenericProperytWriter<byte>.Write
	|
	|-RVA: 0x94F Offset: 0x94F VA: 0x94F
	|-NonGenericProperytWriter<char>.Write
	|
	|-RVA: 0x950 Offset: 0x950 VA: 0x950
	|-NonGenericProperytWriter<KeyValuePair<object, object>>.Write
	|
	|-RVA: 0x951 Offset: 0x951 VA: 0x951
	|-NonGenericProperytWriter<DateTime>.Write
	|
	|-RVA: 0x952 Offset: 0x952 VA: 0x952
	|-NonGenericProperytWriter<DateTimeOffset>.Write
	|
	|-RVA: 0x953 Offset: 0x953 VA: 0x953
	|-NonGenericProperytWriter<Decimal>.Write
	|
	|-RVA: 0x954 Offset: 0x954 VA: 0x954
	|-NonGenericProperytWriter<EmptyStruct>.Write
	|
	|-RVA: 0x955 Offset: 0x955 VA: 0x955
	|-NonGenericProperytWriter<double>.Write
	|
	|-RVA: 0x956 Offset: 0x956 VA: 0x956
	|-NonGenericProperytWriter<Guid>.Write
	|
	|-RVA: 0x957 Offset: 0x957 VA: 0x957
	|-NonGenericProperytWriter<short>.Write
	|
	|-RVA: 0x958 Offset: 0x958 VA: 0x958
	|-NonGenericProperytWriter<int>.Write
	|
	|-RVA: 0x959 Offset: 0x959 VA: 0x959
	|-NonGenericProperytWriter<long>.Write
	|
	|-RVA: 0x95A Offset: 0x95A VA: 0x95A
	|-NonGenericProperytWriter<IntPtr>.Write
	|
	|-RVA: 0x429 Offset: 0x429 VA: 0x429
	|-NonGenericProperytWriter<object>.Write
	|
	|-RVA: 0x95B Offset: 0x95B VA: 0x95B
	|-NonGenericProperytWriter<sbyte>.Write
	|
	|-RVA: 0x95C Offset: 0x95C VA: 0x95C
	|-NonGenericProperytWriter<float>.Write
	|
	|-RVA: 0x95D Offset: 0x95D VA: 0x95D
	|-NonGenericProperytWriter<TimeSpan>.Write
	|
	|-RVA: 0x95E Offset: 0x95E VA: 0x95E
	|-NonGenericProperytWriter<ushort>.Write
	|
	|-RVA: 0x95F Offset: 0x95F VA: 0x95F
	|-NonGenericProperytWriter<uint>.Write
	|
	|-RVA: 0x960 Offset: 0x960 VA: 0x960
	|-NonGenericProperytWriter<ulong>.Write
	|
	|-RVA: 0x961 Offset: 0x961 VA: 0x961
	|-NonGenericProperytWriter<UIntPtr>.Write
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override object GetData(ContainerType container) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB70 Offset: 0xB70 VA: 0xB70
	|-NonGenericProperytWriter<bool>.GetData
	|
	|-RVA: 0xB71 Offset: 0xB71 VA: 0xB71
	|-NonGenericProperytWriter<byte>.GetData
	|
	|-RVA: 0xB72 Offset: 0xB72 VA: 0xB72
	|-NonGenericProperytWriter<char>.GetData
	|
	|-RVA: 0xB73 Offset: 0xB73 VA: 0xB73
	|-NonGenericProperytWriter<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xB74 Offset: 0xB74 VA: 0xB74
	|-NonGenericProperytWriter<DateTime>.GetData
	|
	|-RVA: 0xB75 Offset: 0xB75 VA: 0xB75
	|-NonGenericProperytWriter<DateTimeOffset>.GetData
	|
	|-RVA: 0xB76 Offset: 0xB76 VA: 0xB76
	|-NonGenericProperytWriter<Decimal>.GetData
	|
	|-RVA: 0xB77 Offset: 0xB77 VA: 0xB77
	|-NonGenericProperytWriter<EmptyStruct>.GetData
	|
	|-RVA: 0x11 Offset: 0x11 VA: 0x11
	|-NonGenericProperytWriter<double>.GetData
	|
	|-RVA: 0xB78 Offset: 0xB78 VA: 0xB78
	|-NonGenericProperytWriter<Guid>.GetData
	|
	|-RVA: 0xB79 Offset: 0xB79 VA: 0xB79
	|-NonGenericProperytWriter<short>.GetData
	|
	|-RVA: 0xB7A Offset: 0xB7A VA: 0xB7A
	|-NonGenericProperytWriter<int>.GetData
	|
	|-RVA: 0x3E Offset: 0x3E VA: 0x3E
	|-NonGenericProperytWriter<long>.GetData
	|
	|-RVA: 0xB7B Offset: 0xB7B VA: 0xB7B
	|-NonGenericProperytWriter<IntPtr>.GetData
	|
	|-RVA: 0x68B Offset: 0x68B VA: 0x68B
	|-NonGenericProperytWriter<object>.GetData
	|
	|-RVA: 0xB7C Offset: 0xB7C VA: 0xB7C
	|-NonGenericProperytWriter<sbyte>.GetData
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-NonGenericProperytWriter<float>.GetData
	|
	|-RVA: 0xB7D Offset: 0xB7D VA: 0xB7D
	|-NonGenericProperytWriter<TimeSpan>.GetData
	|
	|-RVA: 0xB7E Offset: 0xB7E VA: 0xB7E
	|-NonGenericProperytWriter<ushort>.GetData
	|
	|-RVA: 0xB7F Offset: 0xB7F VA: 0xB7F
	|-NonGenericProperytWriter<uint>.GetData
	|
	|-RVA: 0x3F Offset: 0x3F VA: 0x3F
	|-NonGenericProperytWriter<ulong>.GetData
	|
	|-RVA: 0xB80 Offset: 0xB80 VA: 0xB80
	|-NonGenericProperytWriter<UIntPtr>.GetData
	*/
}

// Namespace: System.Diagnostics.Tracing
internal class ClassPropertyWriter<ContainerType, ValueType> : PropertyAccessor<ContainerType> // TypeDefIndex: 1285
{
	// Fields
	private readonly TraceLoggingTypeInfo<ValueType> valueTypeInfo; // 0xFFFFFFFF
	private readonly ClassPropertyWriter.Getter<ContainerType, ValueType> getter; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(PropertyAnalysis property) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAE2 Offset: 0xAE2 VA: 0xAE2
	|-ClassPropertyWriter<bool, int>..ctor
	|
	|-RVA: 0xAE3 Offset: 0xAE3 VA: 0xAE3
	|-ClassPropertyWriter<bool, long>..ctor
	|
	|-RVA: 0xAE4 Offset: 0xAE4 VA: 0xAE4
	|-ClassPropertyWriter<bool, object>..ctor
	|
	|-RVA: 0xAE5 Offset: 0xAE5 VA: 0xAE5
	|-ClassPropertyWriter<byte, int>..ctor
	|
	|-RVA: 0xAE6 Offset: 0xAE6 VA: 0xAE6
	|-ClassPropertyWriter<byte, long>..ctor
	|
	|-RVA: 0xAE7 Offset: 0xAE7 VA: 0xAE7
	|-ClassPropertyWriter<byte, object>..ctor
	|
	|-RVA: 0xAE8 Offset: 0xAE8 VA: 0xAE8
	|-ClassPropertyWriter<char, int>..ctor
	|
	|-RVA: 0xAE9 Offset: 0xAE9 VA: 0xAE9
	|-ClassPropertyWriter<char, long>..ctor
	|
	|-RVA: 0xAEA Offset: 0xAEA VA: 0xAEA
	|-ClassPropertyWriter<char, object>..ctor
	|
	|-RVA: 0xAEB Offset: 0xAEB VA: 0xAEB
	|-ClassPropertyWriter<KeyValuePair<object, object>, int>..ctor
	|
	|-RVA: 0xAEC Offset: 0xAEC VA: 0xAEC
	|-ClassPropertyWriter<KeyValuePair<object, object>, long>..ctor
	|
	|-RVA: 0xAED Offset: 0xAED VA: 0xAED
	|-ClassPropertyWriter<KeyValuePair<object, object>, object>..ctor
	|
	|-RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	|-ClassPropertyWriter<DateTime, int>..ctor
	|
	|-RVA: 0xAEF Offset: 0xAEF VA: 0xAEF
	|-ClassPropertyWriter<DateTime, long>..ctor
	|
	|-RVA: 0xAF0 Offset: 0xAF0 VA: 0xAF0
	|-ClassPropertyWriter<DateTime, object>..ctor
	|
	|-RVA: 0xAF1 Offset: 0xAF1 VA: 0xAF1
	|-ClassPropertyWriter<DateTimeOffset, int>..ctor
	|
	|-RVA: 0xAF2 Offset: 0xAF2 VA: 0xAF2
	|-ClassPropertyWriter<DateTimeOffset, long>..ctor
	|
	|-RVA: 0xAF3 Offset: 0xAF3 VA: 0xAF3
	|-ClassPropertyWriter<DateTimeOffset, object>..ctor
	|
	|-RVA: 0xAF4 Offset: 0xAF4 VA: 0xAF4
	|-ClassPropertyWriter<Decimal, int>..ctor
	|
	|-RVA: 0xAF5 Offset: 0xAF5 VA: 0xAF5
	|-ClassPropertyWriter<Decimal, long>..ctor
	|
	|-RVA: 0xAF6 Offset: 0xAF6 VA: 0xAF6
	|-ClassPropertyWriter<Decimal, object>..ctor
	|
	|-RVA: 0xAF7 Offset: 0xAF7 VA: 0xAF7
	|-ClassPropertyWriter<EmptyStruct, int>..ctor
	|
	|-RVA: 0xAF8 Offset: 0xAF8 VA: 0xAF8
	|-ClassPropertyWriter<EmptyStruct, long>..ctor
	|
	|-RVA: 0xAF9 Offset: 0xAF9 VA: 0xAF9
	|-ClassPropertyWriter<EmptyStruct, object>..ctor
	|
	|-RVA: 0xAFA Offset: 0xAFA VA: 0xAFA
	|-ClassPropertyWriter<double, int>..ctor
	|
	|-RVA: 0xAFB Offset: 0xAFB VA: 0xAFB
	|-ClassPropertyWriter<double, long>..ctor
	|
	|-RVA: 0xAFC Offset: 0xAFC VA: 0xAFC
	|-ClassPropertyWriter<double, object>..ctor
	|
	|-RVA: 0xAFD Offset: 0xAFD VA: 0xAFD
	|-ClassPropertyWriter<Guid, int>..ctor
	|
	|-RVA: 0xAFE Offset: 0xAFE VA: 0xAFE
	|-ClassPropertyWriter<Guid, long>..ctor
	|
	|-RVA: 0xAFF Offset: 0xAFF VA: 0xAFF
	|-ClassPropertyWriter<Guid, object>..ctor
	|
	|-RVA: 0xB00 Offset: 0xB00 VA: 0xB00
	|-ClassPropertyWriter<short, int>..ctor
	|
	|-RVA: 0xB01 Offset: 0xB01 VA: 0xB01
	|-ClassPropertyWriter<short, long>..ctor
	|
	|-RVA: 0xB02 Offset: 0xB02 VA: 0xB02
	|-ClassPropertyWriter<short, object>..ctor
	|
	|-RVA: 0xB03 Offset: 0xB03 VA: 0xB03
	|-ClassPropertyWriter<int, int>..ctor
	|
	|-RVA: 0xB04 Offset: 0xB04 VA: 0xB04
	|-ClassPropertyWriter<int, long>..ctor
	|
	|-RVA: 0xB05 Offset: 0xB05 VA: 0xB05
	|-ClassPropertyWriter<int, object>..ctor
	|
	|-RVA: 0xB06 Offset: 0xB06 VA: 0xB06
	|-ClassPropertyWriter<long, int>..ctor
	|
	|-RVA: 0xB07 Offset: 0xB07 VA: 0xB07
	|-ClassPropertyWriter<long, long>..ctor
	|
	|-RVA: 0xB08 Offset: 0xB08 VA: 0xB08
	|-ClassPropertyWriter<long, object>..ctor
	|
	|-RVA: 0xB09 Offset: 0xB09 VA: 0xB09
	|-ClassPropertyWriter<IntPtr, int>..ctor
	|
	|-RVA: 0xB0A Offset: 0xB0A VA: 0xB0A
	|-ClassPropertyWriter<IntPtr, long>..ctor
	|
	|-RVA: 0xB0B Offset: 0xB0B VA: 0xB0B
	|-ClassPropertyWriter<IntPtr, object>..ctor
	|
	|-RVA: 0xB0C Offset: 0xB0C VA: 0xB0C
	|-ClassPropertyWriter<object, int>..ctor
	|
	|-RVA: 0xB0D Offset: 0xB0D VA: 0xB0D
	|-ClassPropertyWriter<object, long>..ctor
	|
	|-RVA: 0x830 Offset: 0x830 VA: 0x830
	|-ClassPropertyWriter<object, object>..ctor
	|
	|-RVA: 0xB0E Offset: 0xB0E VA: 0xB0E
	|-ClassPropertyWriter<sbyte, int>..ctor
	|
	|-RVA: 0xB0F Offset: 0xB0F VA: 0xB0F
	|-ClassPropertyWriter<sbyte, long>..ctor
	|
	|-RVA: 0xB10 Offset: 0xB10 VA: 0xB10
	|-ClassPropertyWriter<sbyte, object>..ctor
	|
	|-RVA: 0xB11 Offset: 0xB11 VA: 0xB11
	|-ClassPropertyWriter<float, int>..ctor
	|
	|-RVA: 0xB12 Offset: 0xB12 VA: 0xB12
	|-ClassPropertyWriter<float, long>..ctor
	|
	|-RVA: 0xB13 Offset: 0xB13 VA: 0xB13
	|-ClassPropertyWriter<float, object>..ctor
	|
	|-RVA: 0xB14 Offset: 0xB14 VA: 0xB14
	|-ClassPropertyWriter<TimeSpan, int>..ctor
	|
	|-RVA: 0xB15 Offset: 0xB15 VA: 0xB15
	|-ClassPropertyWriter<TimeSpan, long>..ctor
	|
	|-RVA: 0xB16 Offset: 0xB16 VA: 0xB16
	|-ClassPropertyWriter<TimeSpan, object>..ctor
	|
	|-RVA: 0xB17 Offset: 0xB17 VA: 0xB17
	|-ClassPropertyWriter<ushort, int>..ctor
	|
	|-RVA: 0xB18 Offset: 0xB18 VA: 0xB18
	|-ClassPropertyWriter<ushort, long>..ctor
	|
	|-RVA: 0xB19 Offset: 0xB19 VA: 0xB19
	|-ClassPropertyWriter<ushort, object>..ctor
	|
	|-RVA: 0xB1A Offset: 0xB1A VA: 0xB1A
	|-ClassPropertyWriter<uint, int>..ctor
	|
	|-RVA: 0xB1B Offset: 0xB1B VA: 0xB1B
	|-ClassPropertyWriter<uint, long>..ctor
	|
	|-RVA: 0xB1C Offset: 0xB1C VA: 0xB1C
	|-ClassPropertyWriter<uint, object>..ctor
	|
	|-RVA: 0xB1D Offset: 0xB1D VA: 0xB1D
	|-ClassPropertyWriter<ulong, int>..ctor
	|
	|-RVA: 0xB1E Offset: 0xB1E VA: 0xB1E
	|-ClassPropertyWriter<ulong, long>..ctor
	|
	|-RVA: 0xB1F Offset: 0xB1F VA: 0xB1F
	|-ClassPropertyWriter<ulong, object>..ctor
	|
	|-RVA: 0xB20 Offset: 0xB20 VA: 0xB20
	|-ClassPropertyWriter<UIntPtr, int>..ctor
	|
	|-RVA: 0xB21 Offset: 0xB21 VA: 0xB21
	|-ClassPropertyWriter<UIntPtr, long>..ctor
	|
	|-RVA: 0xB22 Offset: 0xB22 VA: 0xB22
	|-ClassPropertyWriter<UIntPtr, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Write(TraceLoggingDataCollector collector, ref ContainerType container) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x78A Offset: 0x78A VA: 0x78A
	|-ClassPropertyWriter<bool, int>.Write
	|
	|-RVA: 0x78B Offset: 0x78B VA: 0x78B
	|-ClassPropertyWriter<bool, long>.Write
	|
	|-RVA: 0x78C Offset: 0x78C VA: 0x78C
	|-ClassPropertyWriter<bool, object>.Write
	|
	|-RVA: 0x78D Offset: 0x78D VA: 0x78D
	|-ClassPropertyWriter<byte, int>.Write
	|
	|-RVA: 0x78E Offset: 0x78E VA: 0x78E
	|-ClassPropertyWriter<byte, long>.Write
	|
	|-RVA: 0x78F Offset: 0x78F VA: 0x78F
	|-ClassPropertyWriter<byte, object>.Write
	|
	|-RVA: 0x790 Offset: 0x790 VA: 0x790
	|-ClassPropertyWriter<char, int>.Write
	|
	|-RVA: 0x791 Offset: 0x791 VA: 0x791
	|-ClassPropertyWriter<char, long>.Write
	|
	|-RVA: 0x792 Offset: 0x792 VA: 0x792
	|-ClassPropertyWriter<char, object>.Write
	|
	|-RVA: 0x793 Offset: 0x793 VA: 0x793
	|-ClassPropertyWriter<KeyValuePair<object, object>, int>.Write
	|
	|-RVA: 0x794 Offset: 0x794 VA: 0x794
	|-ClassPropertyWriter<KeyValuePair<object, object>, long>.Write
	|
	|-RVA: 0x795 Offset: 0x795 VA: 0x795
	|-ClassPropertyWriter<KeyValuePair<object, object>, object>.Write
	|
	|-RVA: 0x796 Offset: 0x796 VA: 0x796
	|-ClassPropertyWriter<DateTime, int>.Write
	|
	|-RVA: 0x797 Offset: 0x797 VA: 0x797
	|-ClassPropertyWriter<DateTime, long>.Write
	|
	|-RVA: 0x798 Offset: 0x798 VA: 0x798
	|-ClassPropertyWriter<DateTime, object>.Write
	|
	|-RVA: 0x799 Offset: 0x799 VA: 0x799
	|-ClassPropertyWriter<DateTimeOffset, int>.Write
	|
	|-RVA: 0x79A Offset: 0x79A VA: 0x79A
	|-ClassPropertyWriter<DateTimeOffset, long>.Write
	|
	|-RVA: 0x79B Offset: 0x79B VA: 0x79B
	|-ClassPropertyWriter<DateTimeOffset, object>.Write
	|
	|-RVA: 0x79C Offset: 0x79C VA: 0x79C
	|-ClassPropertyWriter<Decimal, int>.Write
	|
	|-RVA: 0x79D Offset: 0x79D VA: 0x79D
	|-ClassPropertyWriter<Decimal, long>.Write
	|
	|-RVA: 0x79E Offset: 0x79E VA: 0x79E
	|-ClassPropertyWriter<Decimal, object>.Write
	|
	|-RVA: 0x79F Offset: 0x79F VA: 0x79F
	|-ClassPropertyWriter<EmptyStruct, int>.Write
	|
	|-RVA: 0x7A0 Offset: 0x7A0 VA: 0x7A0
	|-ClassPropertyWriter<EmptyStruct, long>.Write
	|
	|-RVA: 0x7A1 Offset: 0x7A1 VA: 0x7A1
	|-ClassPropertyWriter<EmptyStruct, object>.Write
	|
	|-RVA: 0x7A2 Offset: 0x7A2 VA: 0x7A2
	|-ClassPropertyWriter<double, int>.Write
	|
	|-RVA: 0x7A3 Offset: 0x7A3 VA: 0x7A3
	|-ClassPropertyWriter<double, long>.Write
	|
	|-RVA: 0x7A4 Offset: 0x7A4 VA: 0x7A4
	|-ClassPropertyWriter<double, object>.Write
	|
	|-RVA: 0x7A5 Offset: 0x7A5 VA: 0x7A5
	|-ClassPropertyWriter<Guid, int>.Write
	|
	|-RVA: 0x7A6 Offset: 0x7A6 VA: 0x7A6
	|-ClassPropertyWriter<Guid, long>.Write
	|
	|-RVA: 0x7A7 Offset: 0x7A7 VA: 0x7A7
	|-ClassPropertyWriter<Guid, object>.Write
	|
	|-RVA: 0x7A8 Offset: 0x7A8 VA: 0x7A8
	|-ClassPropertyWriter<short, int>.Write
	|
	|-RVA: 0x7A9 Offset: 0x7A9 VA: 0x7A9
	|-ClassPropertyWriter<short, long>.Write
	|
	|-RVA: 0x7AA Offset: 0x7AA VA: 0x7AA
	|-ClassPropertyWriter<short, object>.Write
	|
	|-RVA: 0x7AB Offset: 0x7AB VA: 0x7AB
	|-ClassPropertyWriter<int, int>.Write
	|
	|-RVA: 0x7AC Offset: 0x7AC VA: 0x7AC
	|-ClassPropertyWriter<int, long>.Write
	|
	|-RVA: 0x7AD Offset: 0x7AD VA: 0x7AD
	|-ClassPropertyWriter<int, object>.Write
	|
	|-RVA: 0x7AE Offset: 0x7AE VA: 0x7AE
	|-ClassPropertyWriter<long, int>.Write
	|
	|-RVA: 0x7AF Offset: 0x7AF VA: 0x7AF
	|-ClassPropertyWriter<long, long>.Write
	|
	|-RVA: 0x7B0 Offset: 0x7B0 VA: 0x7B0
	|-ClassPropertyWriter<long, object>.Write
	|
	|-RVA: 0x7B1 Offset: 0x7B1 VA: 0x7B1
	|-ClassPropertyWriter<IntPtr, int>.Write
	|
	|-RVA: 0x7B2 Offset: 0x7B2 VA: 0x7B2
	|-ClassPropertyWriter<IntPtr, long>.Write
	|
	|-RVA: 0x7B3 Offset: 0x7B3 VA: 0x7B3
	|-ClassPropertyWriter<IntPtr, object>.Write
	|
	|-RVA: 0x7B4 Offset: 0x7B4 VA: 0x7B4
	|-ClassPropertyWriter<object, int>.Write
	|
	|-RVA: 0x7B5 Offset: 0x7B5 VA: 0x7B5
	|-ClassPropertyWriter<object, long>.Write
	|
	|-RVA: 0x42A Offset: 0x42A VA: 0x42A
	|-ClassPropertyWriter<object, object>.Write
	|
	|-RVA: 0x7B6 Offset: 0x7B6 VA: 0x7B6
	|-ClassPropertyWriter<sbyte, int>.Write
	|
	|-RVA: 0x7B7 Offset: 0x7B7 VA: 0x7B7
	|-ClassPropertyWriter<sbyte, long>.Write
	|
	|-RVA: 0x7B8 Offset: 0x7B8 VA: 0x7B8
	|-ClassPropertyWriter<sbyte, object>.Write
	|
	|-RVA: 0x7B9 Offset: 0x7B9 VA: 0x7B9
	|-ClassPropertyWriter<float, int>.Write
	|
	|-RVA: 0x7BA Offset: 0x7BA VA: 0x7BA
	|-ClassPropertyWriter<float, long>.Write
	|
	|-RVA: 0x7BB Offset: 0x7BB VA: 0x7BB
	|-ClassPropertyWriter<float, object>.Write
	|
	|-RVA: 0x7BC Offset: 0x7BC VA: 0x7BC
	|-ClassPropertyWriter<TimeSpan, int>.Write
	|
	|-RVA: 0x7BD Offset: 0x7BD VA: 0x7BD
	|-ClassPropertyWriter<TimeSpan, long>.Write
	|
	|-RVA: 0x7BE Offset: 0x7BE VA: 0x7BE
	|-ClassPropertyWriter<TimeSpan, object>.Write
	|
	|-RVA: 0x7BF Offset: 0x7BF VA: 0x7BF
	|-ClassPropertyWriter<ushort, int>.Write
	|
	|-RVA: 0x7C0 Offset: 0x7C0 VA: 0x7C0
	|-ClassPropertyWriter<ushort, long>.Write
	|
	|-RVA: 0x7C1 Offset: 0x7C1 VA: 0x7C1
	|-ClassPropertyWriter<ushort, object>.Write
	|
	|-RVA: 0x7C2 Offset: 0x7C2 VA: 0x7C2
	|-ClassPropertyWriter<uint, int>.Write
	|
	|-RVA: 0x7C3 Offset: 0x7C3 VA: 0x7C3
	|-ClassPropertyWriter<uint, long>.Write
	|
	|-RVA: 0x7C4 Offset: 0x7C4 VA: 0x7C4
	|-ClassPropertyWriter<uint, object>.Write
	|
	|-RVA: 0x7C5 Offset: 0x7C5 VA: 0x7C5
	|-ClassPropertyWriter<ulong, int>.Write
	|
	|-RVA: 0x7C6 Offset: 0x7C6 VA: 0x7C6
	|-ClassPropertyWriter<ulong, long>.Write
	|
	|-RVA: 0x7C7 Offset: 0x7C7 VA: 0x7C7
	|-ClassPropertyWriter<ulong, object>.Write
	|
	|-RVA: 0x7C8 Offset: 0x7C8 VA: 0x7C8
	|-ClassPropertyWriter<UIntPtr, int>.Write
	|
	|-RVA: 0x7C9 Offset: 0x7C9 VA: 0x7C9
	|-ClassPropertyWriter<UIntPtr, long>.Write
	|
	|-RVA: 0x7CA Offset: 0x7CA VA: 0x7CA
	|-ClassPropertyWriter<UIntPtr, object>.Write
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override object GetData(ContainerType container) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x98E Offset: 0x98E VA: 0x98E
	|-ClassPropertyWriter<bool, int>.GetData
	|
	|-RVA: 0x98F Offset: 0x98F VA: 0x98F
	|-ClassPropertyWriter<bool, long>.GetData
	|
	|-RVA: 0x990 Offset: 0x990 VA: 0x990
	|-ClassPropertyWriter<bool, object>.GetData
	|
	|-RVA: 0x991 Offset: 0x991 VA: 0x991
	|-ClassPropertyWriter<byte, int>.GetData
	|
	|-RVA: 0x992 Offset: 0x992 VA: 0x992
	|-ClassPropertyWriter<byte, long>.GetData
	|
	|-RVA: 0x993 Offset: 0x993 VA: 0x993
	|-ClassPropertyWriter<byte, object>.GetData
	|
	|-RVA: 0x994 Offset: 0x994 VA: 0x994
	|-ClassPropertyWriter<char, int>.GetData
	|
	|-RVA: 0x995 Offset: 0x995 VA: 0x995
	|-ClassPropertyWriter<char, long>.GetData
	|
	|-RVA: 0x996 Offset: 0x996 VA: 0x996
	|-ClassPropertyWriter<char, object>.GetData
	|
	|-RVA: 0x997 Offset: 0x997 VA: 0x997
	|-ClassPropertyWriter<KeyValuePair<object, object>, int>.GetData
	|
	|-RVA: 0x998 Offset: 0x998 VA: 0x998
	|-ClassPropertyWriter<KeyValuePair<object, object>, long>.GetData
	|
	|-RVA: 0x999 Offset: 0x999 VA: 0x999
	|-ClassPropertyWriter<KeyValuePair<object, object>, object>.GetData
	|
	|-RVA: 0x99A Offset: 0x99A VA: 0x99A
	|-ClassPropertyWriter<DateTime, int>.GetData
	|
	|-RVA: 0x99B Offset: 0x99B VA: 0x99B
	|-ClassPropertyWriter<DateTime, long>.GetData
	|
	|-RVA: 0x99C Offset: 0x99C VA: 0x99C
	|-ClassPropertyWriter<DateTime, object>.GetData
	|
	|-RVA: 0x99D Offset: 0x99D VA: 0x99D
	|-ClassPropertyWriter<DateTimeOffset, int>.GetData
	|
	|-RVA: 0x99E Offset: 0x99E VA: 0x99E
	|-ClassPropertyWriter<DateTimeOffset, long>.GetData
	|
	|-RVA: 0x99F Offset: 0x99F VA: 0x99F
	|-ClassPropertyWriter<DateTimeOffset, object>.GetData
	|
	|-RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	|-ClassPropertyWriter<Decimal, int>.GetData
	|
	|-RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	|-ClassPropertyWriter<Decimal, long>.GetData
	|
	|-RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	|-ClassPropertyWriter<Decimal, object>.GetData
	|
	|-RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	|-ClassPropertyWriter<EmptyStruct, int>.GetData
	|
	|-RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	|-ClassPropertyWriter<EmptyStruct, long>.GetData
	|
	|-RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5
	|-ClassPropertyWriter<EmptyStruct, object>.GetData
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-ClassPropertyWriter<double, int>.GetData
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-ClassPropertyWriter<double, long>.GetData
	|
	|-RVA: 0xA Offset: 0xA VA: 0xA
	|-ClassPropertyWriter<double, object>.GetData
	|
	|-RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6
	|-ClassPropertyWriter<Guid, int>.GetData
	|
	|-RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7
	|-ClassPropertyWriter<Guid, long>.GetData
	|
	|-RVA: 0x9A8 Offset: 0x9A8 VA: 0x9A8
	|-ClassPropertyWriter<Guid, object>.GetData
	|
	|-RVA: 0x9A9 Offset: 0x9A9 VA: 0x9A9
	|-ClassPropertyWriter<short, int>.GetData
	|
	|-RVA: 0x9AA Offset: 0x9AA VA: 0x9AA
	|-ClassPropertyWriter<short, long>.GetData
	|
	|-RVA: 0x9AB Offset: 0x9AB VA: 0x9AB
	|-ClassPropertyWriter<short, object>.GetData
	|
	|-RVA: 0x9AC Offset: 0x9AC VA: 0x9AC
	|-ClassPropertyWriter<int, int>.GetData
	|
	|-RVA: 0x9AD Offset: 0x9AD VA: 0x9AD
	|-ClassPropertyWriter<int, long>.GetData
	|
	|-RVA: 0x9AE Offset: 0x9AE VA: 0x9AE
	|-ClassPropertyWriter<int, object>.GetData
	|
	|-RVA: 0x2C Offset: 0x2C VA: 0x2C
	|-ClassPropertyWriter<long, int>.GetData
	|
	|-RVA: 0x2D Offset: 0x2D VA: 0x2D
	|-ClassPropertyWriter<long, long>.GetData
	|
	|-RVA: 0x2E Offset: 0x2E VA: 0x2E
	|-ClassPropertyWriter<long, object>.GetData
	|
	|-RVA: 0x9AF Offset: 0x9AF VA: 0x9AF
	|-ClassPropertyWriter<IntPtr, int>.GetData
	|
	|-RVA: 0x9B0 Offset: 0x9B0 VA: 0x9B0
	|-ClassPropertyWriter<IntPtr, long>.GetData
	|
	|-RVA: 0x9B1 Offset: 0x9B1 VA: 0x9B1
	|-ClassPropertyWriter<IntPtr, object>.GetData
	|
	|-RVA: 0x9B2 Offset: 0x9B2 VA: 0x9B2
	|-ClassPropertyWriter<object, int>.GetData
	|
	|-RVA: 0x9B3 Offset: 0x9B3 VA: 0x9B3
	|-ClassPropertyWriter<object, long>.GetData
	|
	|-RVA: 0x68C Offset: 0x68C VA: 0x68C
	|-ClassPropertyWriter<object, object>.GetData
	|
	|-RVA: 0x9B4 Offset: 0x9B4 VA: 0x9B4
	|-ClassPropertyWriter<sbyte, int>.GetData
	|
	|-RVA: 0x9B5 Offset: 0x9B5 VA: 0x9B5
	|-ClassPropertyWriter<sbyte, long>.GetData
	|
	|-RVA: 0x9B6 Offset: 0x9B6 VA: 0x9B6
	|-ClassPropertyWriter<sbyte, object>.GetData
	|
	|-RVA: 0xC Offset: 0xC VA: 0xC
	|-ClassPropertyWriter<float, int>.GetData
	|
	|-RVA: 0xD Offset: 0xD VA: 0xD
	|-ClassPropertyWriter<float, long>.GetData
	|
	|-RVA: 0xE Offset: 0xE VA: 0xE
	|-ClassPropertyWriter<float, object>.GetData
	|
	|-RVA: 0x9B7 Offset: 0x9B7 VA: 0x9B7
	|-ClassPropertyWriter<TimeSpan, int>.GetData
	|
	|-RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8
	|-ClassPropertyWriter<TimeSpan, long>.GetData
	|
	|-RVA: 0x9B9 Offset: 0x9B9 VA: 0x9B9
	|-ClassPropertyWriter<TimeSpan, object>.GetData
	|
	|-RVA: 0x9BA Offset: 0x9BA VA: 0x9BA
	|-ClassPropertyWriter<ushort, int>.GetData
	|
	|-RVA: 0x9BB Offset: 0x9BB VA: 0x9BB
	|-ClassPropertyWriter<ushort, long>.GetData
	|
	|-RVA: 0x9BC Offset: 0x9BC VA: 0x9BC
	|-ClassPropertyWriter<ushort, object>.GetData
	|
	|-RVA: 0x9BD Offset: 0x9BD VA: 0x9BD
	|-ClassPropertyWriter<uint, int>.GetData
	|
	|-RVA: 0x9BE Offset: 0x9BE VA: 0x9BE
	|-ClassPropertyWriter<uint, long>.GetData
	|
	|-RVA: 0x9BF Offset: 0x9BF VA: 0x9BF
	|-ClassPropertyWriter<uint, object>.GetData
	|
	|-RVA: 0x2F Offset: 0x2F VA: 0x2F
	|-ClassPropertyWriter<ulong, int>.GetData
	|
	|-RVA: 0x30 Offset: 0x30 VA: 0x30
	|-ClassPropertyWriter<ulong, long>.GetData
	|
	|-RVA: 0x31 Offset: 0x31 VA: 0x31
	|-ClassPropertyWriter<ulong, object>.GetData
	|
	|-RVA: 0x9C0 Offset: 0x9C0 VA: 0x9C0
	|-ClassPropertyWriter<UIntPtr, int>.GetData
	|
	|-RVA: 0x9C1 Offset: 0x9C1 VA: 0x9C1
	|-ClassPropertyWriter<UIntPtr, long>.GetData
	|
	|-RVA: 0x9C2 Offset: 0x9C2 VA: 0x9C2
	|-ClassPropertyWriter<UIntPtr, object>.GetData
	*/
}

// Namespace: 
private sealed class ClassPropertyWriter.Getter<ContainerType, ValueType> : MulticastDelegate // TypeDefIndex: 1286
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x749 Offset: 0x749 VA: 0x749
	|-ClassPropertyWriter.Getter<bool, int>..ctor
	|
	|-RVA: 0x74A Offset: 0x74A VA: 0x74A
	|-ClassPropertyWriter.Getter<bool, long>..ctor
	|
	|-RVA: 0x74B Offset: 0x74B VA: 0x74B
	|-ClassPropertyWriter.Getter<bool, object>..ctor
	|
	|-RVA: 0x74C Offset: 0x74C VA: 0x74C
	|-ClassPropertyWriter.Getter<byte, int>..ctor
	|
	|-RVA: 0x74D Offset: 0x74D VA: 0x74D
	|-ClassPropertyWriter.Getter<byte, long>..ctor
	|
	|-RVA: 0x74E Offset: 0x74E VA: 0x74E
	|-ClassPropertyWriter.Getter<byte, object>..ctor
	|
	|-RVA: 0x74F Offset: 0x74F VA: 0x74F
	|-ClassPropertyWriter.Getter<char, int>..ctor
	|
	|-RVA: 0x750 Offset: 0x750 VA: 0x750
	|-ClassPropertyWriter.Getter<char, long>..ctor
	|
	|-RVA: 0x751 Offset: 0x751 VA: 0x751
	|-ClassPropertyWriter.Getter<char, object>..ctor
	|
	|-RVA: 0x752 Offset: 0x752 VA: 0x752
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, int>..ctor
	|
	|-RVA: 0x753 Offset: 0x753 VA: 0x753
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, long>..ctor
	|
	|-RVA: 0x754 Offset: 0x754 VA: 0x754
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, object>..ctor
	|
	|-RVA: 0x755 Offset: 0x755 VA: 0x755
	|-ClassPropertyWriter.Getter<DateTime, int>..ctor
	|
	|-RVA: 0x756 Offset: 0x756 VA: 0x756
	|-ClassPropertyWriter.Getter<DateTime, long>..ctor
	|
	|-RVA: 0x757 Offset: 0x757 VA: 0x757
	|-ClassPropertyWriter.Getter<DateTime, object>..ctor
	|
	|-RVA: 0x758 Offset: 0x758 VA: 0x758
	|-ClassPropertyWriter.Getter<DateTimeOffset, int>..ctor
	|
	|-RVA: 0x759 Offset: 0x759 VA: 0x759
	|-ClassPropertyWriter.Getter<DateTimeOffset, long>..ctor
	|
	|-RVA: 0x75A Offset: 0x75A VA: 0x75A
	|-ClassPropertyWriter.Getter<DateTimeOffset, object>..ctor
	|
	|-RVA: 0x75B Offset: 0x75B VA: 0x75B
	|-ClassPropertyWriter.Getter<Decimal, int>..ctor
	|
	|-RVA: 0x75C Offset: 0x75C VA: 0x75C
	|-ClassPropertyWriter.Getter<Decimal, long>..ctor
	|
	|-RVA: 0x75D Offset: 0x75D VA: 0x75D
	|-ClassPropertyWriter.Getter<Decimal, object>..ctor
	|
	|-RVA: 0x75E Offset: 0x75E VA: 0x75E
	|-ClassPropertyWriter.Getter<EmptyStruct, int>..ctor
	|
	|-RVA: 0x75F Offset: 0x75F VA: 0x75F
	|-ClassPropertyWriter.Getter<EmptyStruct, long>..ctor
	|
	|-RVA: 0x760 Offset: 0x760 VA: 0x760
	|-ClassPropertyWriter.Getter<EmptyStruct, object>..ctor
	|
	|-RVA: 0x761 Offset: 0x761 VA: 0x761
	|-ClassPropertyWriter.Getter<double, int>..ctor
	|
	|-RVA: 0x762 Offset: 0x762 VA: 0x762
	|-ClassPropertyWriter.Getter<double, long>..ctor
	|
	|-RVA: 0x763 Offset: 0x763 VA: 0x763
	|-ClassPropertyWriter.Getter<double, object>..ctor
	|
	|-RVA: 0x764 Offset: 0x764 VA: 0x764
	|-ClassPropertyWriter.Getter<Guid, int>..ctor
	|
	|-RVA: 0x765 Offset: 0x765 VA: 0x765
	|-ClassPropertyWriter.Getter<Guid, long>..ctor
	|
	|-RVA: 0x766 Offset: 0x766 VA: 0x766
	|-ClassPropertyWriter.Getter<Guid, object>..ctor
	|
	|-RVA: 0x767 Offset: 0x767 VA: 0x767
	|-ClassPropertyWriter.Getter<short, int>..ctor
	|
	|-RVA: 0x768 Offset: 0x768 VA: 0x768
	|-ClassPropertyWriter.Getter<short, long>..ctor
	|
	|-RVA: 0x769 Offset: 0x769 VA: 0x769
	|-ClassPropertyWriter.Getter<short, object>..ctor
	|
	|-RVA: 0x76A Offset: 0x76A VA: 0x76A
	|-ClassPropertyWriter.Getter<int, int>..ctor
	|
	|-RVA: 0x76B Offset: 0x76B VA: 0x76B
	|-ClassPropertyWriter.Getter<int, long>..ctor
	|
	|-RVA: 0x76C Offset: 0x76C VA: 0x76C
	|-ClassPropertyWriter.Getter<int, object>..ctor
	|
	|-RVA: 0x76D Offset: 0x76D VA: 0x76D
	|-ClassPropertyWriter.Getter<long, int>..ctor
	|
	|-RVA: 0x76E Offset: 0x76E VA: 0x76E
	|-ClassPropertyWriter.Getter<long, long>..ctor
	|
	|-RVA: 0x76F Offset: 0x76F VA: 0x76F
	|-ClassPropertyWriter.Getter<long, object>..ctor
	|
	|-RVA: 0x770 Offset: 0x770 VA: 0x770
	|-ClassPropertyWriter.Getter<IntPtr, int>..ctor
	|
	|-RVA: 0x771 Offset: 0x771 VA: 0x771
	|-ClassPropertyWriter.Getter<IntPtr, long>..ctor
	|
	|-RVA: 0x772 Offset: 0x772 VA: 0x772
	|-ClassPropertyWriter.Getter<IntPtr, object>..ctor
	|
	|-RVA: 0x773 Offset: 0x773 VA: 0x773
	|-ClassPropertyWriter.Getter<object, int>..ctor
	|
	|-RVA: 0x774 Offset: 0x774 VA: 0x774
	|-ClassPropertyWriter.Getter<object, long>..ctor
	|
	|-RVA: 0x42B Offset: 0x42B VA: 0x42B
	|-ClassPropertyWriter.Getter<object, object>..ctor
	|
	|-RVA: 0x775 Offset: 0x775 VA: 0x775
	|-ClassPropertyWriter.Getter<sbyte, int>..ctor
	|
	|-RVA: 0x776 Offset: 0x776 VA: 0x776
	|-ClassPropertyWriter.Getter<sbyte, long>..ctor
	|
	|-RVA: 0x777 Offset: 0x777 VA: 0x777
	|-ClassPropertyWriter.Getter<sbyte, object>..ctor
	|
	|-RVA: 0x778 Offset: 0x778 VA: 0x778
	|-ClassPropertyWriter.Getter<float, int>..ctor
	|
	|-RVA: 0x779 Offset: 0x779 VA: 0x779
	|-ClassPropertyWriter.Getter<float, long>..ctor
	|
	|-RVA: 0x77A Offset: 0x77A VA: 0x77A
	|-ClassPropertyWriter.Getter<float, object>..ctor
	|
	|-RVA: 0x77B Offset: 0x77B VA: 0x77B
	|-ClassPropertyWriter.Getter<TimeSpan, int>..ctor
	|
	|-RVA: 0x77C Offset: 0x77C VA: 0x77C
	|-ClassPropertyWriter.Getter<TimeSpan, long>..ctor
	|
	|-RVA: 0x77D Offset: 0x77D VA: 0x77D
	|-ClassPropertyWriter.Getter<TimeSpan, object>..ctor
	|
	|-RVA: 0x77E Offset: 0x77E VA: 0x77E
	|-ClassPropertyWriter.Getter<ushort, int>..ctor
	|
	|-RVA: 0x77F Offset: 0x77F VA: 0x77F
	|-ClassPropertyWriter.Getter<ushort, long>..ctor
	|
	|-RVA: 0x780 Offset: 0x780 VA: 0x780
	|-ClassPropertyWriter.Getter<ushort, object>..ctor
	|
	|-RVA: 0x781 Offset: 0x781 VA: 0x781
	|-ClassPropertyWriter.Getter<uint, int>..ctor
	|
	|-RVA: 0x782 Offset: 0x782 VA: 0x782
	|-ClassPropertyWriter.Getter<uint, long>..ctor
	|
	|-RVA: 0x783 Offset: 0x783 VA: 0x783
	|-ClassPropertyWriter.Getter<uint, object>..ctor
	|
	|-RVA: 0x784 Offset: 0x784 VA: 0x784
	|-ClassPropertyWriter.Getter<ulong, int>..ctor
	|
	|-RVA: 0x785 Offset: 0x785 VA: 0x785
	|-ClassPropertyWriter.Getter<ulong, long>..ctor
	|
	|-RVA: 0x786 Offset: 0x786 VA: 0x786
	|-ClassPropertyWriter.Getter<ulong, object>..ctor
	|
	|-RVA: 0x787 Offset: 0x787 VA: 0x787
	|-ClassPropertyWriter.Getter<UIntPtr, int>..ctor
	|
	|-RVA: 0x788 Offset: 0x788 VA: 0x788
	|-ClassPropertyWriter.Getter<UIntPtr, long>..ctor
	|
	|-RVA: 0x789 Offset: 0x789 VA: 0x789
	|-ClassPropertyWriter.Getter<UIntPtr, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual ValueType Invoke(ContainerType container) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x940 Offset: 0x940 VA: 0x940
	|-ClassPropertyWriter.Getter<bool, int>.Invoke
	|
	|-RVA: 0x6A Offset: 0x6A VA: 0x6A
	|-ClassPropertyWriter.Getter<bool, long>.Invoke
	|
	|-RVA: 0x942 Offset: 0x942 VA: 0x942
	|-ClassPropertyWriter.Getter<bool, object>.Invoke
	|
	|-RVA: 0x944 Offset: 0x944 VA: 0x944
	|-ClassPropertyWriter.Getter<byte, int>.Invoke
	|
	|-RVA: 0x6C Offset: 0x6C VA: 0x6C
	|-ClassPropertyWriter.Getter<byte, long>.Invoke
	|
	|-RVA: 0x946 Offset: 0x946 VA: 0x946
	|-ClassPropertyWriter.Getter<byte, object>.Invoke
	|
	|-RVA: 0x948 Offset: 0x948 VA: 0x948
	|-ClassPropertyWriter.Getter<char, int>.Invoke
	|
	|-RVA: 0x6E Offset: 0x6E VA: 0x6E
	|-ClassPropertyWriter.Getter<char, long>.Invoke
	|
	|-RVA: 0x94A Offset: 0x94A VA: 0x94A
	|-ClassPropertyWriter.Getter<char, object>.Invoke
	|
	|-RVA: 0x94C Offset: 0x94C VA: 0x94C
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, int>.Invoke
	|
	|-RVA: 0x70 Offset: 0x70 VA: 0x70
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, long>.Invoke
	|
	|-RVA: 0x94E Offset: 0x94E VA: 0x94E
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, object>.Invoke
	|
	|-RVA: 0x950 Offset: 0x950 VA: 0x950
	|-ClassPropertyWriter.Getter<DateTime, int>.Invoke
	|
	|-RVA: 0x72 Offset: 0x72 VA: 0x72
	|-ClassPropertyWriter.Getter<DateTime, long>.Invoke
	|
	|-RVA: 0x952 Offset: 0x952 VA: 0x952
	|-ClassPropertyWriter.Getter<DateTime, object>.Invoke
	|
	|-RVA: 0x954 Offset: 0x954 VA: 0x954
	|-ClassPropertyWriter.Getter<DateTimeOffset, int>.Invoke
	|
	|-RVA: 0x74 Offset: 0x74 VA: 0x74
	|-ClassPropertyWriter.Getter<DateTimeOffset, long>.Invoke
	|
	|-RVA: 0x956 Offset: 0x956 VA: 0x956
	|-ClassPropertyWriter.Getter<DateTimeOffset, object>.Invoke
	|
	|-RVA: 0x958 Offset: 0x958 VA: 0x958
	|-ClassPropertyWriter.Getter<Decimal, int>.Invoke
	|
	|-RVA: 0x76 Offset: 0x76 VA: 0x76
	|-ClassPropertyWriter.Getter<Decimal, long>.Invoke
	|
	|-RVA: 0x95A Offset: 0x95A VA: 0x95A
	|-ClassPropertyWriter.Getter<Decimal, object>.Invoke
	|
	|-RVA: 0x95C Offset: 0x95C VA: 0x95C
	|-ClassPropertyWriter.Getter<EmptyStruct, int>.Invoke
	|
	|-RVA: 0x78 Offset: 0x78 VA: 0x78
	|-ClassPropertyWriter.Getter<EmptyStruct, long>.Invoke
	|
	|-RVA: 0x95E Offset: 0x95E VA: 0x95E
	|-ClassPropertyWriter.Getter<EmptyStruct, object>.Invoke
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-ClassPropertyWriter.Getter<double, int>.Invoke
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-ClassPropertyWriter.Getter<double, long>.Invoke
	|-ClassPropertyWriter.Getter<long, long>.Invoke
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-ClassPropertyWriter.Getter<double, object>.Invoke
	|
	|-RVA: 0x962 Offset: 0x962 VA: 0x962
	|-ClassPropertyWriter.Getter<Guid, int>.Invoke
	|
	|-RVA: 0x7B Offset: 0x7B VA: 0x7B
	|-ClassPropertyWriter.Getter<Guid, long>.Invoke
	|
	|-RVA: 0x964 Offset: 0x964 VA: 0x964
	|-ClassPropertyWriter.Getter<Guid, object>.Invoke
	|
	|-RVA: 0x966 Offset: 0x966 VA: 0x966
	|-ClassPropertyWriter.Getter<short, int>.Invoke
	|
	|-RVA: 0x7D Offset: 0x7D VA: 0x7D
	|-ClassPropertyWriter.Getter<short, long>.Invoke
	|
	|-RVA: 0x968 Offset: 0x968 VA: 0x968
	|-ClassPropertyWriter.Getter<short, object>.Invoke
	|
	|-RVA: 0x96A Offset: 0x96A VA: 0x96A
	|-ClassPropertyWriter.Getter<int, int>.Invoke
	|
	|-RVA: 0x7F Offset: 0x7F VA: 0x7F
	|-ClassPropertyWriter.Getter<int, long>.Invoke
	|
	|-RVA: 0x96C Offset: 0x96C VA: 0x96C
	|-ClassPropertyWriter.Getter<int, object>.Invoke
	|
	|-RVA: 0x28 Offset: 0x28 VA: 0x28
	|-ClassPropertyWriter.Getter<long, int>.Invoke
	|
	|-RVA: 0x29 Offset: 0x29 VA: 0x29
	|-ClassPropertyWriter.Getter<long, object>.Invoke
	|
	|-RVA: 0x970 Offset: 0x970 VA: 0x970
	|-ClassPropertyWriter.Getter<IntPtr, int>.Invoke
	|
	|-RVA: 0x82 Offset: 0x82 VA: 0x82
	|-ClassPropertyWriter.Getter<IntPtr, long>.Invoke
	|
	|-RVA: 0x972 Offset: 0x972 VA: 0x972
	|-ClassPropertyWriter.Getter<IntPtr, object>.Invoke
	|
	|-RVA: 0x974 Offset: 0x974 VA: 0x974
	|-ClassPropertyWriter.Getter<object, int>.Invoke
	|
	|-RVA: 0x84 Offset: 0x84 VA: 0x84
	|-ClassPropertyWriter.Getter<object, long>.Invoke
	|
	|-RVA: 0x68D Offset: 0x68D VA: 0x68D
	|-ClassPropertyWriter.Getter<object, object>.Invoke
	|
	|-RVA: 0x976 Offset: 0x976 VA: 0x976
	|-ClassPropertyWriter.Getter<sbyte, int>.Invoke
	|
	|-RVA: 0x86 Offset: 0x86 VA: 0x86
	|-ClassPropertyWriter.Getter<sbyte, long>.Invoke
	|
	|-RVA: 0x978 Offset: 0x978 VA: 0x978
	|-ClassPropertyWriter.Getter<sbyte, object>.Invoke
	|
	|-RVA: 0xA Offset: 0xA VA: 0xA
	|-ClassPropertyWriter.Getter<float, int>.Invoke
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-ClassPropertyWriter.Getter<float, long>.Invoke
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-ClassPropertyWriter.Getter<float, object>.Invoke
	|
	|-RVA: 0x97C Offset: 0x97C VA: 0x97C
	|-ClassPropertyWriter.Getter<TimeSpan, int>.Invoke
	|
	|-RVA: 0x89 Offset: 0x89 VA: 0x89
	|-ClassPropertyWriter.Getter<TimeSpan, long>.Invoke
	|
	|-RVA: 0x97E Offset: 0x97E VA: 0x97E
	|-ClassPropertyWriter.Getter<TimeSpan, object>.Invoke
	|
	|-RVA: 0x980 Offset: 0x980 VA: 0x980
	|-ClassPropertyWriter.Getter<ushort, int>.Invoke
	|
	|-RVA: 0x8B Offset: 0x8B VA: 0x8B
	|-ClassPropertyWriter.Getter<ushort, long>.Invoke
	|
	|-RVA: 0x982 Offset: 0x982 VA: 0x982
	|-ClassPropertyWriter.Getter<ushort, object>.Invoke
	|
	|-RVA: 0x984 Offset: 0x984 VA: 0x984
	|-ClassPropertyWriter.Getter<uint, int>.Invoke
	|
	|-RVA: 0x8D Offset: 0x8D VA: 0x8D
	|-ClassPropertyWriter.Getter<uint, long>.Invoke
	|
	|-RVA: 0x986 Offset: 0x986 VA: 0x986
	|-ClassPropertyWriter.Getter<uint, object>.Invoke
	|
	|-RVA: 0x2A Offset: 0x2A VA: 0x2A
	|-ClassPropertyWriter.Getter<ulong, int>.Invoke
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-ClassPropertyWriter.Getter<ulong, long>.Invoke
	|
	|-RVA: 0x2B Offset: 0x2B VA: 0x2B
	|-ClassPropertyWriter.Getter<ulong, object>.Invoke
	|
	|-RVA: 0x98A Offset: 0x98A VA: 0x98A
	|-ClassPropertyWriter.Getter<UIntPtr, int>.Invoke
	|
	|-RVA: 0x90 Offset: 0x90 VA: 0x90
	|-ClassPropertyWriter.Getter<UIntPtr, long>.Invoke
	|
	|-RVA: 0x98C Offset: 0x98C VA: 0x98C
	|-ClassPropertyWriter.Getter<UIntPtr, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(ContainerType container, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x19F Offset: 0x19F VA: 0x19F
	|-ClassPropertyWriter.Getter<bool, int>.BeginInvoke
	|
	|-RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0
	|-ClassPropertyWriter.Getter<bool, long>.BeginInvoke
	|
	|-RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1
	|-ClassPropertyWriter.Getter<bool, object>.BeginInvoke
	|
	|-RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2
	|-ClassPropertyWriter.Getter<byte, int>.BeginInvoke
	|
	|-RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3
	|-ClassPropertyWriter.Getter<byte, long>.BeginInvoke
	|
	|-RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4
	|-ClassPropertyWriter.Getter<byte, object>.BeginInvoke
	|
	|-RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5
	|-ClassPropertyWriter.Getter<char, int>.BeginInvoke
	|
	|-RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6
	|-ClassPropertyWriter.Getter<char, long>.BeginInvoke
	|
	|-RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7
	|-ClassPropertyWriter.Getter<char, object>.BeginInvoke
	|
	|-RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, int>.BeginInvoke
	|
	|-RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, long>.BeginInvoke
	|
	|-RVA: 0x1AA Offset: 0x1AA VA: 0x1AA
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, object>.BeginInvoke
	|
	|-RVA: 0x1AB Offset: 0x1AB VA: 0x1AB
	|-ClassPropertyWriter.Getter<DateTime, int>.BeginInvoke
	|
	|-RVA: 0x1AC Offset: 0x1AC VA: 0x1AC
	|-ClassPropertyWriter.Getter<DateTime, long>.BeginInvoke
	|
	|-RVA: 0x1AD Offset: 0x1AD VA: 0x1AD
	|-ClassPropertyWriter.Getter<DateTime, object>.BeginInvoke
	|
	|-RVA: 0x1AE Offset: 0x1AE VA: 0x1AE
	|-ClassPropertyWriter.Getter<DateTimeOffset, int>.BeginInvoke
	|
	|-RVA: 0x1AF Offset: 0x1AF VA: 0x1AF
	|-ClassPropertyWriter.Getter<DateTimeOffset, long>.BeginInvoke
	|
	|-RVA: 0x1B0 Offset: 0x1B0 VA: 0x1B0
	|-ClassPropertyWriter.Getter<DateTimeOffset, object>.BeginInvoke
	|
	|-RVA: 0x1B1 Offset: 0x1B1 VA: 0x1B1
	|-ClassPropertyWriter.Getter<Decimal, int>.BeginInvoke
	|
	|-RVA: 0x1B2 Offset: 0x1B2 VA: 0x1B2
	|-ClassPropertyWriter.Getter<Decimal, long>.BeginInvoke
	|
	|-RVA: 0x1B3 Offset: 0x1B3 VA: 0x1B3
	|-ClassPropertyWriter.Getter<Decimal, object>.BeginInvoke
	|
	|-RVA: 0x1B4 Offset: 0x1B4 VA: 0x1B4
	|-ClassPropertyWriter.Getter<EmptyStruct, int>.BeginInvoke
	|
	|-RVA: 0x1B5 Offset: 0x1B5 VA: 0x1B5
	|-ClassPropertyWriter.Getter<EmptyStruct, long>.BeginInvoke
	|
	|-RVA: 0x1B6 Offset: 0x1B6 VA: 0x1B6
	|-ClassPropertyWriter.Getter<EmptyStruct, object>.BeginInvoke
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-ClassPropertyWriter.Getter<double, int>.BeginInvoke
	|-ClassPropertyWriter.Getter<float, int>.BeginInvoke
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-ClassPropertyWriter.Getter<double, long>.BeginInvoke
	|-ClassPropertyWriter.Getter<float, long>.BeginInvoke
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-ClassPropertyWriter.Getter<double, object>.BeginInvoke
	|-ClassPropertyWriter.Getter<float, object>.BeginInvoke
	|
	|-RVA: 0x1B7 Offset: 0x1B7 VA: 0x1B7
	|-ClassPropertyWriter.Getter<Guid, int>.BeginInvoke
	|
	|-RVA: 0x1B8 Offset: 0x1B8 VA: 0x1B8
	|-ClassPropertyWriter.Getter<Guid, long>.BeginInvoke
	|
	|-RVA: 0x1B9 Offset: 0x1B9 VA: 0x1B9
	|-ClassPropertyWriter.Getter<Guid, object>.BeginInvoke
	|
	|-RVA: 0x1BA Offset: 0x1BA VA: 0x1BA
	|-ClassPropertyWriter.Getter<short, int>.BeginInvoke
	|
	|-RVA: 0x1BB Offset: 0x1BB VA: 0x1BB
	|-ClassPropertyWriter.Getter<short, long>.BeginInvoke
	|
	|-RVA: 0x1BC Offset: 0x1BC VA: 0x1BC
	|-ClassPropertyWriter.Getter<short, object>.BeginInvoke
	|
	|-RVA: 0x1BD Offset: 0x1BD VA: 0x1BD
	|-ClassPropertyWriter.Getter<int, int>.BeginInvoke
	|
	|-RVA: 0x1BE Offset: 0x1BE VA: 0x1BE
	|-ClassPropertyWriter.Getter<int, long>.BeginInvoke
	|
	|-RVA: 0x1BF Offset: 0x1BF VA: 0x1BF
	|-ClassPropertyWriter.Getter<int, object>.BeginInvoke
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-ClassPropertyWriter.Getter<long, int>.BeginInvoke
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-ClassPropertyWriter.Getter<long, long>.BeginInvoke
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-ClassPropertyWriter.Getter<long, object>.BeginInvoke
	|
	|-RVA: 0x1C0 Offset: 0x1C0 VA: 0x1C0
	|-ClassPropertyWriter.Getter<IntPtr, int>.BeginInvoke
	|
	|-RVA: 0x1C1 Offset: 0x1C1 VA: 0x1C1
	|-ClassPropertyWriter.Getter<IntPtr, long>.BeginInvoke
	|
	|-RVA: 0x1C2 Offset: 0x1C2 VA: 0x1C2
	|-ClassPropertyWriter.Getter<IntPtr, object>.BeginInvoke
	|
	|-RVA: 0x1C3 Offset: 0x1C3 VA: 0x1C3
	|-ClassPropertyWriter.Getter<object, int>.BeginInvoke
	|
	|-RVA: 0x1C4 Offset: 0x1C4 VA: 0x1C4
	|-ClassPropertyWriter.Getter<object, long>.BeginInvoke
	|
	|-RVA: 0x161 Offset: 0x161 VA: 0x161
	|-ClassPropertyWriter.Getter<object, object>.BeginInvoke
	|
	|-RVA: 0x1C5 Offset: 0x1C5 VA: 0x1C5
	|-ClassPropertyWriter.Getter<sbyte, int>.BeginInvoke
	|
	|-RVA: 0x1C6 Offset: 0x1C6 VA: 0x1C6
	|-ClassPropertyWriter.Getter<sbyte, long>.BeginInvoke
	|
	|-RVA: 0x1C7 Offset: 0x1C7 VA: 0x1C7
	|-ClassPropertyWriter.Getter<sbyte, object>.BeginInvoke
	|
	|-RVA: 0x1C8 Offset: 0x1C8 VA: 0x1C8
	|-ClassPropertyWriter.Getter<TimeSpan, int>.BeginInvoke
	|
	|-RVA: 0x1C9 Offset: 0x1C9 VA: 0x1C9
	|-ClassPropertyWriter.Getter<TimeSpan, long>.BeginInvoke
	|
	|-RVA: 0x1CA Offset: 0x1CA VA: 0x1CA
	|-ClassPropertyWriter.Getter<TimeSpan, object>.BeginInvoke
	|
	|-RVA: 0x1CB Offset: 0x1CB VA: 0x1CB
	|-ClassPropertyWriter.Getter<ushort, int>.BeginInvoke
	|
	|-RVA: 0x1CC Offset: 0x1CC VA: 0x1CC
	|-ClassPropertyWriter.Getter<ushort, long>.BeginInvoke
	|
	|-RVA: 0x1CD Offset: 0x1CD VA: 0x1CD
	|-ClassPropertyWriter.Getter<ushort, object>.BeginInvoke
	|
	|-RVA: 0x1CE Offset: 0x1CE VA: 0x1CE
	|-ClassPropertyWriter.Getter<uint, int>.BeginInvoke
	|
	|-RVA: 0x1CF Offset: 0x1CF VA: 0x1CF
	|-ClassPropertyWriter.Getter<uint, long>.BeginInvoke
	|
	|-RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0
	|-ClassPropertyWriter.Getter<uint, object>.BeginInvoke
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-ClassPropertyWriter.Getter<ulong, int>.BeginInvoke
	|
	|-RVA: 0xA Offset: 0xA VA: 0xA
	|-ClassPropertyWriter.Getter<ulong, long>.BeginInvoke
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-ClassPropertyWriter.Getter<ulong, object>.BeginInvoke
	|
	|-RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1
	|-ClassPropertyWriter.Getter<UIntPtr, int>.BeginInvoke
	|
	|-RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2
	|-ClassPropertyWriter.Getter<UIntPtr, long>.BeginInvoke
	|
	|-RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3
	|-ClassPropertyWriter.Getter<UIntPtr, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual ValueType EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x941 Offset: 0x941 VA: 0x941
	|-ClassPropertyWriter.Getter<bool, int>.EndInvoke
	|
	|-RVA: 0x6B Offset: 0x6B VA: 0x6B
	|-ClassPropertyWriter.Getter<bool, long>.EndInvoke
	|
	|-RVA: 0x943 Offset: 0x943 VA: 0x943
	|-ClassPropertyWriter.Getter<bool, object>.EndInvoke
	|
	|-RVA: 0x945 Offset: 0x945 VA: 0x945
	|-ClassPropertyWriter.Getter<byte, int>.EndInvoke
	|
	|-RVA: 0x6D Offset: 0x6D VA: 0x6D
	|-ClassPropertyWriter.Getter<byte, long>.EndInvoke
	|
	|-RVA: 0x947 Offset: 0x947 VA: 0x947
	|-ClassPropertyWriter.Getter<byte, object>.EndInvoke
	|
	|-RVA: 0x949 Offset: 0x949 VA: 0x949
	|-ClassPropertyWriter.Getter<char, int>.EndInvoke
	|
	|-RVA: 0x6F Offset: 0x6F VA: 0x6F
	|-ClassPropertyWriter.Getter<char, long>.EndInvoke
	|
	|-RVA: 0x94B Offset: 0x94B VA: 0x94B
	|-ClassPropertyWriter.Getter<char, object>.EndInvoke
	|
	|-RVA: 0x94D Offset: 0x94D VA: 0x94D
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, int>.EndInvoke
	|
	|-RVA: 0x71 Offset: 0x71 VA: 0x71
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, long>.EndInvoke
	|
	|-RVA: 0x94F Offset: 0x94F VA: 0x94F
	|-ClassPropertyWriter.Getter<KeyValuePair<object, object>, object>.EndInvoke
	|
	|-RVA: 0x951 Offset: 0x951 VA: 0x951
	|-ClassPropertyWriter.Getter<DateTime, int>.EndInvoke
	|
	|-RVA: 0x73 Offset: 0x73 VA: 0x73
	|-ClassPropertyWriter.Getter<DateTime, long>.EndInvoke
	|
	|-RVA: 0x953 Offset: 0x953 VA: 0x953
	|-ClassPropertyWriter.Getter<DateTime, object>.EndInvoke
	|
	|-RVA: 0x955 Offset: 0x955 VA: 0x955
	|-ClassPropertyWriter.Getter<DateTimeOffset, int>.EndInvoke
	|
	|-RVA: 0x75 Offset: 0x75 VA: 0x75
	|-ClassPropertyWriter.Getter<DateTimeOffset, long>.EndInvoke
	|
	|-RVA: 0x957 Offset: 0x957 VA: 0x957
	|-ClassPropertyWriter.Getter<DateTimeOffset, object>.EndInvoke
	|
	|-RVA: 0x959 Offset: 0x959 VA: 0x959
	|-ClassPropertyWriter.Getter<Decimal, int>.EndInvoke
	|
	|-RVA: 0x77 Offset: 0x77 VA: 0x77
	|-ClassPropertyWriter.Getter<Decimal, long>.EndInvoke
	|
	|-RVA: 0x95B Offset: 0x95B VA: 0x95B
	|-ClassPropertyWriter.Getter<Decimal, object>.EndInvoke
	|
	|-RVA: 0x95D Offset: 0x95D VA: 0x95D
	|-ClassPropertyWriter.Getter<EmptyStruct, int>.EndInvoke
	|
	|-RVA: 0x79 Offset: 0x79 VA: 0x79
	|-ClassPropertyWriter.Getter<EmptyStruct, long>.EndInvoke
	|
	|-RVA: 0x95F Offset: 0x95F VA: 0x95F
	|-ClassPropertyWriter.Getter<EmptyStruct, object>.EndInvoke
	|
	|-RVA: 0x960 Offset: 0x960 VA: 0x960
	|-ClassPropertyWriter.Getter<double, int>.EndInvoke
	|
	|-RVA: 0x7A Offset: 0x7A VA: 0x7A
	|-ClassPropertyWriter.Getter<double, long>.EndInvoke
	|
	|-RVA: 0x961 Offset: 0x961 VA: 0x961
	|-ClassPropertyWriter.Getter<double, object>.EndInvoke
	|
	|-RVA: 0x963 Offset: 0x963 VA: 0x963
	|-ClassPropertyWriter.Getter<Guid, int>.EndInvoke
	|
	|-RVA: 0x7C Offset: 0x7C VA: 0x7C
	|-ClassPropertyWriter.Getter<Guid, long>.EndInvoke
	|
	|-RVA: 0x965 Offset: 0x965 VA: 0x965
	|-ClassPropertyWriter.Getter<Guid, object>.EndInvoke
	|
	|-RVA: 0x967 Offset: 0x967 VA: 0x967
	|-ClassPropertyWriter.Getter<short, int>.EndInvoke
	|
	|-RVA: 0x7E Offset: 0x7E VA: 0x7E
	|-ClassPropertyWriter.Getter<short, long>.EndInvoke
	|
	|-RVA: 0x969 Offset: 0x969 VA: 0x969
	|-ClassPropertyWriter.Getter<short, object>.EndInvoke
	|
	|-RVA: 0x96B Offset: 0x96B VA: 0x96B
	|-ClassPropertyWriter.Getter<int, int>.EndInvoke
	|
	|-RVA: 0x80 Offset: 0x80 VA: 0x80
	|-ClassPropertyWriter.Getter<int, long>.EndInvoke
	|
	|-RVA: 0x96D Offset: 0x96D VA: 0x96D
	|-ClassPropertyWriter.Getter<int, object>.EndInvoke
	|
	|-RVA: 0x96E Offset: 0x96E VA: 0x96E
	|-ClassPropertyWriter.Getter<long, int>.EndInvoke
	|
	|-RVA: 0x81 Offset: 0x81 VA: 0x81
	|-ClassPropertyWriter.Getter<long, long>.EndInvoke
	|
	|-RVA: 0x96F Offset: 0x96F VA: 0x96F
	|-ClassPropertyWriter.Getter<long, object>.EndInvoke
	|
	|-RVA: 0x971 Offset: 0x971 VA: 0x971
	|-ClassPropertyWriter.Getter<IntPtr, int>.EndInvoke
	|
	|-RVA: 0x83 Offset: 0x83 VA: 0x83
	|-ClassPropertyWriter.Getter<IntPtr, long>.EndInvoke
	|
	|-RVA: 0x973 Offset: 0x973 VA: 0x973
	|-ClassPropertyWriter.Getter<IntPtr, object>.EndInvoke
	|
	|-RVA: 0x975 Offset: 0x975 VA: 0x975
	|-ClassPropertyWriter.Getter<object, int>.EndInvoke
	|
	|-RVA: 0x85 Offset: 0x85 VA: 0x85
	|-ClassPropertyWriter.Getter<object, long>.EndInvoke
	|
	|-RVA: 0x68E Offset: 0x68E VA: 0x68E
	|-ClassPropertyWriter.Getter<object, object>.EndInvoke
	|
	|-RVA: 0x977 Offset: 0x977 VA: 0x977
	|-ClassPropertyWriter.Getter<sbyte, int>.EndInvoke
	|
	|-RVA: 0x87 Offset: 0x87 VA: 0x87
	|-ClassPropertyWriter.Getter<sbyte, long>.EndInvoke
	|
	|-RVA: 0x979 Offset: 0x979 VA: 0x979
	|-ClassPropertyWriter.Getter<sbyte, object>.EndInvoke
	|
	|-RVA: 0x97A Offset: 0x97A VA: 0x97A
	|-ClassPropertyWriter.Getter<float, int>.EndInvoke
	|
	|-RVA: 0x88 Offset: 0x88 VA: 0x88
	|-ClassPropertyWriter.Getter<float, long>.EndInvoke
	|
	|-RVA: 0x97B Offset: 0x97B VA: 0x97B
	|-ClassPropertyWriter.Getter<float, object>.EndInvoke
	|
	|-RVA: 0x97D Offset: 0x97D VA: 0x97D
	|-ClassPropertyWriter.Getter<TimeSpan, int>.EndInvoke
	|
	|-RVA: 0x8A Offset: 0x8A VA: 0x8A
	|-ClassPropertyWriter.Getter<TimeSpan, long>.EndInvoke
	|
	|-RVA: 0x97F Offset: 0x97F VA: 0x97F
	|-ClassPropertyWriter.Getter<TimeSpan, object>.EndInvoke
	|
	|-RVA: 0x981 Offset: 0x981 VA: 0x981
	|-ClassPropertyWriter.Getter<ushort, int>.EndInvoke
	|
	|-RVA: 0x8C Offset: 0x8C VA: 0x8C
	|-ClassPropertyWriter.Getter<ushort, long>.EndInvoke
	|
	|-RVA: 0x983 Offset: 0x983 VA: 0x983
	|-ClassPropertyWriter.Getter<ushort, object>.EndInvoke
	|
	|-RVA: 0x985 Offset: 0x985 VA: 0x985
	|-ClassPropertyWriter.Getter<uint, int>.EndInvoke
	|
	|-RVA: 0x8E Offset: 0x8E VA: 0x8E
	|-ClassPropertyWriter.Getter<uint, long>.EndInvoke
	|
	|-RVA: 0x987 Offset: 0x987 VA: 0x987
	|-ClassPropertyWriter.Getter<uint, object>.EndInvoke
	|
	|-RVA: 0x988 Offset: 0x988 VA: 0x988
	|-ClassPropertyWriter.Getter<ulong, int>.EndInvoke
	|
	|-RVA: 0x8F Offset: 0x8F VA: 0x8F
	|-ClassPropertyWriter.Getter<ulong, long>.EndInvoke
	|
	|-RVA: 0x989 Offset: 0x989 VA: 0x989
	|-ClassPropertyWriter.Getter<ulong, object>.EndInvoke
	|
	|-RVA: 0x98B Offset: 0x98B VA: 0x98B
	|-ClassPropertyWriter.Getter<UIntPtr, int>.EndInvoke
	|
	|-RVA: 0x91 Offset: 0x91 VA: 0x91
	|-ClassPropertyWriter.Getter<UIntPtr, long>.EndInvoke
	|
	|-RVA: 0x98D Offset: 0x98D VA: 0x98D
	|-ClassPropertyWriter.Getter<UIntPtr, object>.EndInvoke
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class PropertyAnalysis // TypeDefIndex: 1287
{
	// Fields
	internal readonly string name; // 0x8
	internal readonly MethodInfo getterInfo; // 0xC
	internal readonly TraceLoggingTypeInfo typeInfo; // 0x10
	internal readonly EventFieldAttribute fieldAttribute; // 0x14

	// Methods

	// RVA: 0x38 Offset: 0x38 VA: 0x38
	public void .ctor(string name, MethodInfo getterInfo, TraceLoggingTypeInfo typeInfo, EventFieldAttribute fieldAttribute) { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class NullTypeInfo<DataType> : TraceLoggingTypeInfo<DataType> // TypeDefIndex: 1288
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x287 Offset: 0x287 VA: 0x287
	|-NullTypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x12E Offset: 0x12E VA: 0x12E
	|-NullTypeInfo<object>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref DataType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x962 Offset: 0x962 VA: 0x962
	|-NullTypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x42C Offset: 0x42C VA: 0x42C
	|-NullTypeInfo<object>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB81 Offset: 0xB81 VA: 0xB81
	|-NullTypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0x68F Offset: 0x68F VA: 0x68F
	|-NullTypeInfo<object>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x94E Offset: 0x94E VA: 0x94E
	|-NullTypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0x8EF Offset: 0x8EF VA: 0x8EF
	|-NullTypeInfo<object>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class BooleanTypeInfo : TraceLoggingTypeInfo<bool> // TypeDefIndex: 1289
{
	// Methods

	// RVA: 0x34 Offset: 0x34 VA: 0x34 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xDA Offset: 0xDA VA: 0xDA Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref bool value) { }

	// RVA: 0x2E3 Offset: 0x2E3 VA: 0x2E3
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class ByteTypeInfo : TraceLoggingTypeInfo<byte> // TypeDefIndex: 1290
{
	// Methods

	// RVA: 0x36 Offset: 0x36 VA: 0x36 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xDC Offset: 0xDC VA: 0xDC Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref byte value) { }

	// RVA: 0x2E5 Offset: 0x2E5 VA: 0x2E5
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class SByteTypeInfo : TraceLoggingTypeInfo<sbyte> // TypeDefIndex: 1291
{
	// Methods

	// RVA: 0x56 Offset: 0x56 VA: 0x56 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x10D Offset: 0x10D VA: 0x10D Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref sbyte value) { }

	// RVA: 0x321 Offset: 0x321 VA: 0x321
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class Int16TypeInfo : TraceLoggingTypeInfo<short> // TypeDefIndex: 1292
{
	// Methods

	// RVA: 0x4B Offset: 0x4B VA: 0x4B Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xFF Offset: 0xFF VA: 0xFF Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref short value) { }

	// RVA: 0x314 Offset: 0x314 VA: 0x314
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UInt16TypeInfo : TraceLoggingTypeInfo<ushort> // TypeDefIndex: 1293
{
	// Methods

	// RVA: 0x61 Offset: 0x61 VA: 0x61 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x11B Offset: 0x11B VA: 0x11B Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref ushort value) { }

	// RVA: 0x331 Offset: 0x331 VA: 0x331
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class Int32TypeInfo : TraceLoggingTypeInfo<int> // TypeDefIndex: 1294
{
	// Methods

	// RVA: 0x4D Offset: 0x4D VA: 0x4D Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x101 Offset: 0x101 VA: 0x101 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref int value) { }

	// RVA: 0x316 Offset: 0x316 VA: 0x316
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UInt32TypeInfo : TraceLoggingTypeInfo<uint> // TypeDefIndex: 1295
{
	// Methods

	// RVA: 0x63 Offset: 0x63 VA: 0x63 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x11D Offset: 0x11D VA: 0x11D Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref uint value) { }

	// RVA: 0x333 Offset: 0x333 VA: 0x333
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class Int64TypeInfo : TraceLoggingTypeInfo<long> // TypeDefIndex: 1296
{
	// Methods

	// RVA: 0x4F Offset: 0x4F VA: 0x4F Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x103 Offset: 0x103 VA: 0x103 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref long value) { }

	// RVA: 0x318 Offset: 0x318 VA: 0x318
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UInt64TypeInfo : TraceLoggingTypeInfo<ulong> // TypeDefIndex: 1297
{
	// Methods

	// RVA: 0x65 Offset: 0x65 VA: 0x65 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x11F Offset: 0x11F VA: 0x11F Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref ulong value) { }

	// RVA: 0x335 Offset: 0x335 VA: 0x335
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class IntPtrTypeInfo : TraceLoggingTypeInfo<IntPtr> // TypeDefIndex: 1298
{
	// Methods

	// RVA: 0x51 Offset: 0x51 VA: 0x51 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x105 Offset: 0x105 VA: 0x105 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref IntPtr value) { }

	// RVA: 0x31A Offset: 0x31A VA: 0x31A
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UIntPtrTypeInfo : TraceLoggingTypeInfo<UIntPtr> // TypeDefIndex: 1299
{
	// Methods

	// RVA: 0x67 Offset: 0x67 VA: 0x67 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x121 Offset: 0x121 VA: 0x121 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref UIntPtr value) { }

	// RVA: 0x337 Offset: 0x337 VA: 0x337
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class DoubleTypeInfo : TraceLoggingTypeInfo<double> // TypeDefIndex: 1300
{
	// Methods

	// RVA: 0x3E Offset: 0x3E VA: 0x3E Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xE8 Offset: 0xE8 VA: 0xE8 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref double value) { }

	// RVA: 0x2F2 Offset: 0x2F2 VA: 0x2F2
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class SingleTypeInfo : TraceLoggingTypeInfo<float> // TypeDefIndex: 1301
{
	// Methods

	// RVA: 0x58 Offset: 0x58 VA: 0x58 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x110 Offset: 0x110 VA: 0x110 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref float value) { }

	// RVA: 0x323 Offset: 0x323 VA: 0x323
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class CharTypeInfo : TraceLoggingTypeInfo<char> // TypeDefIndex: 1302
{
	// Methods

	// RVA: 0x38 Offset: 0x38 VA: 0x38 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xDE Offset: 0xDE VA: 0xDE Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref char value) { }

	// RVA: 0x2E7 Offset: 0x2E7 VA: 0x2E7
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class BooleanArrayTypeInfo : TraceLoggingTypeInfo<bool[]> // TypeDefIndex: 1303
{
	// Methods

	// RVA: 0x33 Offset: 0x33 VA: 0x33 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xD9 Offset: 0xD9 VA: 0xD9 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref bool[] value) { }

	// RVA: 0x2E2 Offset: 0x2E2 VA: 0x2E2
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class ByteArrayTypeInfo : TraceLoggingTypeInfo<byte[]> // TypeDefIndex: 1304
{
	// Methods

	// RVA: 0x35 Offset: 0x35 VA: 0x35 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xDB Offset: 0xDB VA: 0xDB Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref byte[] value) { }

	// RVA: 0x2E4 Offset: 0x2E4 VA: 0x2E4
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class SByteArrayTypeInfo : TraceLoggingTypeInfo<sbyte[]> // TypeDefIndex: 1305
{
	// Methods

	// RVA: 0x55 Offset: 0x55 VA: 0x55 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x10C Offset: 0x10C VA: 0x10C Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref sbyte[] value) { }

	// RVA: 0x320 Offset: 0x320 VA: 0x320
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class Int16ArrayTypeInfo : TraceLoggingTypeInfo<short[]> // TypeDefIndex: 1306
{
	// Methods

	// RVA: 0x4A Offset: 0x4A VA: 0x4A Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xFE Offset: 0xFE VA: 0xFE Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref short[] value) { }

	// RVA: 0x313 Offset: 0x313 VA: 0x313
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UInt16ArrayTypeInfo : TraceLoggingTypeInfo<ushort[]> // TypeDefIndex: 1307
{
	// Methods

	// RVA: 0x60 Offset: 0x60 VA: 0x60 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x11A Offset: 0x11A VA: 0x11A Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref ushort[] value) { }

	// RVA: 0x330 Offset: 0x330 VA: 0x330
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class Int32ArrayTypeInfo : TraceLoggingTypeInfo<int[]> // TypeDefIndex: 1308
{
	// Methods

	// RVA: 0x4C Offset: 0x4C VA: 0x4C Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x100 Offset: 0x100 VA: 0x100 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref int[] value) { }

	// RVA: 0x315 Offset: 0x315 VA: 0x315
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UInt32ArrayTypeInfo : TraceLoggingTypeInfo<uint[]> // TypeDefIndex: 1309
{
	// Methods

	// RVA: 0x62 Offset: 0x62 VA: 0x62 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x11C Offset: 0x11C VA: 0x11C Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref uint[] value) { }

	// RVA: 0x332 Offset: 0x332 VA: 0x332
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class Int64ArrayTypeInfo : TraceLoggingTypeInfo<long[]> // TypeDefIndex: 1310
{
	// Methods

	// RVA: 0x4E Offset: 0x4E VA: 0x4E Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x102 Offset: 0x102 VA: 0x102 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref long[] value) { }

	// RVA: 0x317 Offset: 0x317 VA: 0x317
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UInt64ArrayTypeInfo : TraceLoggingTypeInfo<ulong[]> // TypeDefIndex: 1311
{
	// Methods

	// RVA: 0x64 Offset: 0x64 VA: 0x64 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x11E Offset: 0x11E VA: 0x11E Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref ulong[] value) { }

	// RVA: 0x334 Offset: 0x334 VA: 0x334
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class IntPtrArrayTypeInfo : TraceLoggingTypeInfo<IntPtr[]> // TypeDefIndex: 1312
{
	// Methods

	// RVA: 0x50 Offset: 0x50 VA: 0x50 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x104 Offset: 0x104 VA: 0x104 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref IntPtr[] value) { }

	// RVA: 0x319 Offset: 0x319 VA: 0x319
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class UIntPtrArrayTypeInfo : TraceLoggingTypeInfo<UIntPtr[]> // TypeDefIndex: 1313
{
	// Methods

	// RVA: 0x66 Offset: 0x66 VA: 0x66 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x120 Offset: 0x120 VA: 0x120 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref UIntPtr[] value) { }

	// RVA: 0x336 Offset: 0x336 VA: 0x336
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class CharArrayTypeInfo : TraceLoggingTypeInfo<char[]> // TypeDefIndex: 1314
{
	// Methods

	// RVA: 0x37 Offset: 0x37 VA: 0x37 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xDD Offset: 0xDD VA: 0xDD Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref char[] value) { }

	// RVA: 0x2E6 Offset: 0x2E6 VA: 0x2E6
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class DoubleArrayTypeInfo : TraceLoggingTypeInfo<double[]> // TypeDefIndex: 1315
{
	// Methods

	// RVA: 0x3D Offset: 0x3D VA: 0x3D Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xE7 Offset: 0xE7 VA: 0xE7 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref double[] value) { }

	// RVA: 0x2F1 Offset: 0x2F1 VA: 0x2F1
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class SingleArrayTypeInfo : TraceLoggingTypeInfo<float[]> // TypeDefIndex: 1316
{
	// Methods

	// RVA: 0x57 Offset: 0x57 VA: 0x57 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x10F Offset: 0x10F VA: 0x10F Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref float[] value) { }

	// RVA: 0x322 Offset: 0x322 VA: 0x322
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumByteTypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1317
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1CA Offset: 0x1CA VA: 0x1CA
	|-EnumByteTypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x1CB Offset: 0x1CB VA: 0x1CB
	|-EnumByteTypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x1CC Offset: 0x1CC VA: 0x1CC
	|-EnumByteTypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x1CD Offset: 0x1CD VA: 0x1CD
	|-EnumByteTypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x1CE Offset: 0x1CE VA: 0x1CE
	|-EnumByteTypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x1CF Offset: 0x1CF VA: 0x1CF
	|-EnumByteTypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x1D0 Offset: 0x1D0 VA: 0x1D0
	|-EnumByteTypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x1D1 Offset: 0x1D1 VA: 0x1D1
	|-EnumByteTypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x1D2 Offset: 0x1D2 VA: 0x1D2
	|-EnumByteTypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x1D3 Offset: 0x1D3 VA: 0x1D3
	|-EnumByteTypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x1D4 Offset: 0x1D4 VA: 0x1D4
	|-EnumByteTypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x1D5 Offset: 0x1D5 VA: 0x1D5
	|-EnumByteTypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x1D6 Offset: 0x1D6 VA: 0x1D6
	|-EnumByteTypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x1D7 Offset: 0x1D7 VA: 0x1D7
	|-EnumByteTypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x12F Offset: 0x12F VA: 0x12F
	|-EnumByteTypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x1D8 Offset: 0x1D8 VA: 0x1D8
	|-EnumByteTypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x1D9 Offset: 0x1D9 VA: 0x1D9
	|-EnumByteTypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x1DA Offset: 0x1DA VA: 0x1DA
	|-EnumByteTypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x1DB Offset: 0x1DB VA: 0x1DB
	|-EnumByteTypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x1DC Offset: 0x1DC VA: 0x1DC
	|-EnumByteTypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x1DD Offset: 0x1DD VA: 0x1DD
	|-EnumByteTypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x1DE Offset: 0x1DE VA: 0x1DE
	|-EnumByteTypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7CB Offset: 0x7CB VA: 0x7CB
	|-EnumByteTypeInfo<bool>.WriteData
	|
	|-RVA: 0x7CC Offset: 0x7CC VA: 0x7CC
	|-EnumByteTypeInfo<byte>.WriteData
	|
	|-RVA: 0x7CD Offset: 0x7CD VA: 0x7CD
	|-EnumByteTypeInfo<char>.WriteData
	|
	|-RVA: 0x7CE Offset: 0x7CE VA: 0x7CE
	|-EnumByteTypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x7CF Offset: 0x7CF VA: 0x7CF
	|-EnumByteTypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x7D0 Offset: 0x7D0 VA: 0x7D0
	|-EnumByteTypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x7D1 Offset: 0x7D1 VA: 0x7D1
	|-EnumByteTypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x7D2 Offset: 0x7D2 VA: 0x7D2
	|-EnumByteTypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x7D3 Offset: 0x7D3 VA: 0x7D3
	|-EnumByteTypeInfo<double>.WriteData
	|
	|-RVA: 0x7D4 Offset: 0x7D4 VA: 0x7D4
	|-EnumByteTypeInfo<Guid>.WriteData
	|
	|-RVA: 0x7D5 Offset: 0x7D5 VA: 0x7D5
	|-EnumByteTypeInfo<short>.WriteData
	|
	|-RVA: 0x7D6 Offset: 0x7D6 VA: 0x7D6
	|-EnumByteTypeInfo<int>.WriteData
	|
	|-RVA: 0x7D7 Offset: 0x7D7 VA: 0x7D7
	|-EnumByteTypeInfo<long>.WriteData
	|
	|-RVA: 0x7D8 Offset: 0x7D8 VA: 0x7D8
	|-EnumByteTypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x42D Offset: 0x42D VA: 0x42D
	|-EnumByteTypeInfo<object>.WriteData
	|
	|-RVA: 0x7D9 Offset: 0x7D9 VA: 0x7D9
	|-EnumByteTypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x7DA Offset: 0x7DA VA: 0x7DA
	|-EnumByteTypeInfo<float>.WriteData
	|
	|-RVA: 0x7DB Offset: 0x7DB VA: 0x7DB
	|-EnumByteTypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x7DC Offset: 0x7DC VA: 0x7DC
	|-EnumByteTypeInfo<ushort>.WriteData
	|
	|-RVA: 0x7DD Offset: 0x7DD VA: 0x7DD
	|-EnumByteTypeInfo<uint>.WriteData
	|
	|-RVA: 0x7DE Offset: 0x7DE VA: 0x7DE
	|-EnumByteTypeInfo<ulong>.WriteData
	|
	|-RVA: 0x7DF Offset: 0x7DF VA: 0x7DF
	|-EnumByteTypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9C3 Offset: 0x9C3 VA: 0x9C3
	|-EnumByteTypeInfo<bool>.GetData
	|
	|-RVA: 0x9C4 Offset: 0x9C4 VA: 0x9C4
	|-EnumByteTypeInfo<byte>.GetData
	|
	|-RVA: 0x9C5 Offset: 0x9C5 VA: 0x9C5
	|-EnumByteTypeInfo<char>.GetData
	|
	|-RVA: 0x9C6 Offset: 0x9C6 VA: 0x9C6
	|-EnumByteTypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0x9C7 Offset: 0x9C7 VA: 0x9C7
	|-EnumByteTypeInfo<DateTime>.GetData
	|
	|-RVA: 0x9C8 Offset: 0x9C8 VA: 0x9C8
	|-EnumByteTypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0x9C9 Offset: 0x9C9 VA: 0x9C9
	|-EnumByteTypeInfo<Decimal>.GetData
	|
	|-RVA: 0x9CA Offset: 0x9CA VA: 0x9CA
	|-EnumByteTypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0x9CB Offset: 0x9CB VA: 0x9CB
	|-EnumByteTypeInfo<double>.GetData
	|
	|-RVA: 0x9CC Offset: 0x9CC VA: 0x9CC
	|-EnumByteTypeInfo<Guid>.GetData
	|
	|-RVA: 0x9CD Offset: 0x9CD VA: 0x9CD
	|-EnumByteTypeInfo<short>.GetData
	|
	|-RVA: 0x9CE Offset: 0x9CE VA: 0x9CE
	|-EnumByteTypeInfo<int>.GetData
	|
	|-RVA: 0x9CF Offset: 0x9CF VA: 0x9CF
	|-EnumByteTypeInfo<long>.GetData
	|
	|-RVA: 0x9D0 Offset: 0x9D0 VA: 0x9D0
	|-EnumByteTypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x690 Offset: 0x690 VA: 0x690
	|-EnumByteTypeInfo<object>.GetData
	|
	|-RVA: 0x9D1 Offset: 0x9D1 VA: 0x9D1
	|-EnumByteTypeInfo<sbyte>.GetData
	|
	|-RVA: 0x9D2 Offset: 0x9D2 VA: 0x9D2
	|-EnumByteTypeInfo<float>.GetData
	|
	|-RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3
	|-EnumByteTypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	|-EnumByteTypeInfo<ushort>.GetData
	|
	|-RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5
	|-EnumByteTypeInfo<uint>.GetData
	|
	|-RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6
	|-EnumByteTypeInfo<ulong>.GetData
	|
	|-RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7
	|-EnumByteTypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB09 Offset: 0xB09 VA: 0xB09
	|-EnumByteTypeInfo<bool>..ctor
	|
	|-RVA: 0xB0A Offset: 0xB0A VA: 0xB0A
	|-EnumByteTypeInfo<byte>..ctor
	|
	|-RVA: 0xB0B Offset: 0xB0B VA: 0xB0B
	|-EnumByteTypeInfo<char>..ctor
	|
	|-RVA: 0xB0C Offset: 0xB0C VA: 0xB0C
	|-EnumByteTypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB0D Offset: 0xB0D VA: 0xB0D
	|-EnumByteTypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB0E Offset: 0xB0E VA: 0xB0E
	|-EnumByteTypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB0F Offset: 0xB0F VA: 0xB0F
	|-EnumByteTypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB10 Offset: 0xB10 VA: 0xB10
	|-EnumByteTypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB11 Offset: 0xB11 VA: 0xB11
	|-EnumByteTypeInfo<double>..ctor
	|
	|-RVA: 0xB12 Offset: 0xB12 VA: 0xB12
	|-EnumByteTypeInfo<Guid>..ctor
	|
	|-RVA: 0xB13 Offset: 0xB13 VA: 0xB13
	|-EnumByteTypeInfo<short>..ctor
	|
	|-RVA: 0xB14 Offset: 0xB14 VA: 0xB14
	|-EnumByteTypeInfo<int>..ctor
	|
	|-RVA: 0xB15 Offset: 0xB15 VA: 0xB15
	|-EnumByteTypeInfo<long>..ctor
	|
	|-RVA: 0xB16 Offset: 0xB16 VA: 0xB16
	|-EnumByteTypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0
	|-EnumByteTypeInfo<object>..ctor
	|
	|-RVA: 0xB17 Offset: 0xB17 VA: 0xB17
	|-EnumByteTypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB18 Offset: 0xB18 VA: 0xB18
	|-EnumByteTypeInfo<float>..ctor
	|
	|-RVA: 0xB19 Offset: 0xB19 VA: 0xB19
	|-EnumByteTypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB1A Offset: 0xB1A VA: 0xB1A
	|-EnumByteTypeInfo<ushort>..ctor
	|
	|-RVA: 0xB1B Offset: 0xB1B VA: 0xB1B
	|-EnumByteTypeInfo<uint>..ctor
	|
	|-RVA: 0xB1C Offset: 0xB1C VA: 0xB1C
	|-EnumByteTypeInfo<ulong>..ctor
	|
	|-RVA: 0xB1D Offset: 0xB1D VA: 0xB1D
	|-EnumByteTypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumSByteTypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1318
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21E Offset: 0x21E VA: 0x21E
	|-EnumSByteTypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x21F Offset: 0x21F VA: 0x21F
	|-EnumSByteTypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x220 Offset: 0x220 VA: 0x220
	|-EnumSByteTypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x221 Offset: 0x221 VA: 0x221
	|-EnumSByteTypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x222 Offset: 0x222 VA: 0x222
	|-EnumSByteTypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x223 Offset: 0x223 VA: 0x223
	|-EnumSByteTypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x224 Offset: 0x224 VA: 0x224
	|-EnumSByteTypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x225 Offset: 0x225 VA: 0x225
	|-EnumSByteTypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x226 Offset: 0x226 VA: 0x226
	|-EnumSByteTypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x227 Offset: 0x227 VA: 0x227
	|-EnumSByteTypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x228 Offset: 0x228 VA: 0x228
	|-EnumSByteTypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x229 Offset: 0x229 VA: 0x229
	|-EnumSByteTypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x22A Offset: 0x22A VA: 0x22A
	|-EnumSByteTypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x22B Offset: 0x22B VA: 0x22B
	|-EnumSByteTypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x130 Offset: 0x130 VA: 0x130
	|-EnumSByteTypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x22C Offset: 0x22C VA: 0x22C
	|-EnumSByteTypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x22D Offset: 0x22D VA: 0x22D
	|-EnumSByteTypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x22E Offset: 0x22E VA: 0x22E
	|-EnumSByteTypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x22F Offset: 0x22F VA: 0x22F
	|-EnumSByteTypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x230 Offset: 0x230 VA: 0x230
	|-EnumSByteTypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x231 Offset: 0x231 VA: 0x231
	|-EnumSByteTypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x232 Offset: 0x232 VA: 0x232
	|-EnumSByteTypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8CF Offset: 0x8CF VA: 0x8CF
	|-EnumSByteTypeInfo<bool>.WriteData
	|
	|-RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0
	|-EnumSByteTypeInfo<byte>.WriteData
	|
	|-RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1
	|-EnumSByteTypeInfo<char>.WriteData
	|
	|-RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2
	|-EnumSByteTypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3
	|-EnumSByteTypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4
	|-EnumSByteTypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5
	|-EnumSByteTypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6
	|-EnumSByteTypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7
	|-EnumSByteTypeInfo<double>.WriteData
	|
	|-RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8
	|-EnumSByteTypeInfo<Guid>.WriteData
	|
	|-RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9
	|-EnumSByteTypeInfo<short>.WriteData
	|
	|-RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
	|-EnumSByteTypeInfo<int>.WriteData
	|
	|-RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
	|-EnumSByteTypeInfo<long>.WriteData
	|
	|-RVA: 0x8DC Offset: 0x8DC VA: 0x8DC
	|-EnumSByteTypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x42E Offset: 0x42E VA: 0x42E
	|-EnumSByteTypeInfo<object>.WriteData
	|
	|-RVA: 0x8DD Offset: 0x8DD VA: 0x8DD
	|-EnumSByteTypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
	|-EnumSByteTypeInfo<float>.WriteData
	|
	|-RVA: 0x8DF Offset: 0x8DF VA: 0x8DF
	|-EnumSByteTypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0
	|-EnumSByteTypeInfo<ushort>.WriteData
	|
	|-RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1
	|-EnumSByteTypeInfo<uint>.WriteData
	|
	|-RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2
	|-EnumSByteTypeInfo<ulong>.WriteData
	|
	|-RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3
	|-EnumSByteTypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB07 Offset: 0xB07 VA: 0xB07
	|-EnumSByteTypeInfo<bool>.GetData
	|
	|-RVA: 0xB08 Offset: 0xB08 VA: 0xB08
	|-EnumSByteTypeInfo<byte>.GetData
	|
	|-RVA: 0xB09 Offset: 0xB09 VA: 0xB09
	|-EnumSByteTypeInfo<char>.GetData
	|
	|-RVA: 0xB0A Offset: 0xB0A VA: 0xB0A
	|-EnumSByteTypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xB0B Offset: 0xB0B VA: 0xB0B
	|-EnumSByteTypeInfo<DateTime>.GetData
	|
	|-RVA: 0xB0C Offset: 0xB0C VA: 0xB0C
	|-EnumSByteTypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xB0D Offset: 0xB0D VA: 0xB0D
	|-EnumSByteTypeInfo<Decimal>.GetData
	|
	|-RVA: 0xB0E Offset: 0xB0E VA: 0xB0E
	|-EnumSByteTypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xB0F Offset: 0xB0F VA: 0xB0F
	|-EnumSByteTypeInfo<double>.GetData
	|
	|-RVA: 0xB10 Offset: 0xB10 VA: 0xB10
	|-EnumSByteTypeInfo<Guid>.GetData
	|
	|-RVA: 0xB11 Offset: 0xB11 VA: 0xB11
	|-EnumSByteTypeInfo<short>.GetData
	|
	|-RVA: 0xB12 Offset: 0xB12 VA: 0xB12
	|-EnumSByteTypeInfo<int>.GetData
	|
	|-RVA: 0xB13 Offset: 0xB13 VA: 0xB13
	|-EnumSByteTypeInfo<long>.GetData
	|
	|-RVA: 0xB14 Offset: 0xB14 VA: 0xB14
	|-EnumSByteTypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x691 Offset: 0x691 VA: 0x691
	|-EnumSByteTypeInfo<object>.GetData
	|
	|-RVA: 0xB15 Offset: 0xB15 VA: 0xB15
	|-EnumSByteTypeInfo<sbyte>.GetData
	|
	|-RVA: 0xB16 Offset: 0xB16 VA: 0xB16
	|-EnumSByteTypeInfo<float>.GetData
	|
	|-RVA: 0xB17 Offset: 0xB17 VA: 0xB17
	|-EnumSByteTypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xB18 Offset: 0xB18 VA: 0xB18
	|-EnumSByteTypeInfo<ushort>.GetData
	|
	|-RVA: 0xB19 Offset: 0xB19 VA: 0xB19
	|-EnumSByteTypeInfo<uint>.GetData
	|
	|-RVA: 0xB1A Offset: 0xB1A VA: 0xB1A
	|-EnumSByteTypeInfo<ulong>.GetData
	|
	|-RVA: 0xB1B Offset: 0xB1B VA: 0xB1B
	|-EnumSByteTypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB5D Offset: 0xB5D VA: 0xB5D
	|-EnumSByteTypeInfo<bool>..ctor
	|
	|-RVA: 0xB5E Offset: 0xB5E VA: 0xB5E
	|-EnumSByteTypeInfo<byte>..ctor
	|
	|-RVA: 0xB5F Offset: 0xB5F VA: 0xB5F
	|-EnumSByteTypeInfo<char>..ctor
	|
	|-RVA: 0xB60 Offset: 0xB60 VA: 0xB60
	|-EnumSByteTypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB61 Offset: 0xB61 VA: 0xB61
	|-EnumSByteTypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB62 Offset: 0xB62 VA: 0xB62
	|-EnumSByteTypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB63 Offset: 0xB63 VA: 0xB63
	|-EnumSByteTypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB64 Offset: 0xB64 VA: 0xB64
	|-EnumSByteTypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB65 Offset: 0xB65 VA: 0xB65
	|-EnumSByteTypeInfo<double>..ctor
	|
	|-RVA: 0xB66 Offset: 0xB66 VA: 0xB66
	|-EnumSByteTypeInfo<Guid>..ctor
	|
	|-RVA: 0xB67 Offset: 0xB67 VA: 0xB67
	|-EnumSByteTypeInfo<short>..ctor
	|
	|-RVA: 0xB68 Offset: 0xB68 VA: 0xB68
	|-EnumSByteTypeInfo<int>..ctor
	|
	|-RVA: 0xB69 Offset: 0xB69 VA: 0xB69
	|-EnumSByteTypeInfo<long>..ctor
	|
	|-RVA: 0xB6A Offset: 0xB6A VA: 0xB6A
	|-EnumSByteTypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
	|-EnumSByteTypeInfo<object>..ctor
	|
	|-RVA: 0xB6B Offset: 0xB6B VA: 0xB6B
	|-EnumSByteTypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB6C Offset: 0xB6C VA: 0xB6C
	|-EnumSByteTypeInfo<float>..ctor
	|
	|-RVA: 0xB6D Offset: 0xB6D VA: 0xB6D
	|-EnumSByteTypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB6E Offset: 0xB6E VA: 0xB6E
	|-EnumSByteTypeInfo<ushort>..ctor
	|
	|-RVA: 0xB6F Offset: 0xB6F VA: 0xB6F
	|-EnumSByteTypeInfo<uint>..ctor
	|
	|-RVA: 0xB70 Offset: 0xB70 VA: 0xB70
	|-EnumSByteTypeInfo<ulong>..ctor
	|
	|-RVA: 0xB71 Offset: 0xB71 VA: 0xB71
	|-EnumSByteTypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumInt16TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1319
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1DF Offset: 0x1DF VA: 0x1DF
	|-EnumInt16TypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x1E0 Offset: 0x1E0 VA: 0x1E0
	|-EnumInt16TypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x1E1 Offset: 0x1E1 VA: 0x1E1
	|-EnumInt16TypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x1E2 Offset: 0x1E2 VA: 0x1E2
	|-EnumInt16TypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x1E3 Offset: 0x1E3 VA: 0x1E3
	|-EnumInt16TypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x1E4 Offset: 0x1E4 VA: 0x1E4
	|-EnumInt16TypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x1E5 Offset: 0x1E5 VA: 0x1E5
	|-EnumInt16TypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x1E6 Offset: 0x1E6 VA: 0x1E6
	|-EnumInt16TypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x1E7 Offset: 0x1E7 VA: 0x1E7
	|-EnumInt16TypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x1E8 Offset: 0x1E8 VA: 0x1E8
	|-EnumInt16TypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x1E9 Offset: 0x1E9 VA: 0x1E9
	|-EnumInt16TypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x1EA Offset: 0x1EA VA: 0x1EA
	|-EnumInt16TypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x1EB Offset: 0x1EB VA: 0x1EB
	|-EnumInt16TypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x1EC Offset: 0x1EC VA: 0x1EC
	|-EnumInt16TypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x131 Offset: 0x131 VA: 0x131
	|-EnumInt16TypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x1ED Offset: 0x1ED VA: 0x1ED
	|-EnumInt16TypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x1EE Offset: 0x1EE VA: 0x1EE
	|-EnumInt16TypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x1EF Offset: 0x1EF VA: 0x1EF
	|-EnumInt16TypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x1F0 Offset: 0x1F0 VA: 0x1F0
	|-EnumInt16TypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x1F1 Offset: 0x1F1 VA: 0x1F1
	|-EnumInt16TypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x1F2 Offset: 0x1F2 VA: 0x1F2
	|-EnumInt16TypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x1F3 Offset: 0x1F3 VA: 0x1F3
	|-EnumInt16TypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x890 Offset: 0x890 VA: 0x890
	|-EnumInt16TypeInfo<bool>.WriteData
	|
	|-RVA: 0x891 Offset: 0x891 VA: 0x891
	|-EnumInt16TypeInfo<byte>.WriteData
	|
	|-RVA: 0x892 Offset: 0x892 VA: 0x892
	|-EnumInt16TypeInfo<char>.WriteData
	|
	|-RVA: 0x893 Offset: 0x893 VA: 0x893
	|-EnumInt16TypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x894 Offset: 0x894 VA: 0x894
	|-EnumInt16TypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x895 Offset: 0x895 VA: 0x895
	|-EnumInt16TypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x896 Offset: 0x896 VA: 0x896
	|-EnumInt16TypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x897 Offset: 0x897 VA: 0x897
	|-EnumInt16TypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x898 Offset: 0x898 VA: 0x898
	|-EnumInt16TypeInfo<double>.WriteData
	|
	|-RVA: 0x899 Offset: 0x899 VA: 0x899
	|-EnumInt16TypeInfo<Guid>.WriteData
	|
	|-RVA: 0x89A Offset: 0x89A VA: 0x89A
	|-EnumInt16TypeInfo<short>.WriteData
	|
	|-RVA: 0x89B Offset: 0x89B VA: 0x89B
	|-EnumInt16TypeInfo<int>.WriteData
	|
	|-RVA: 0x89C Offset: 0x89C VA: 0x89C
	|-EnumInt16TypeInfo<long>.WriteData
	|
	|-RVA: 0x89D Offset: 0x89D VA: 0x89D
	|-EnumInt16TypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x42F Offset: 0x42F VA: 0x42F
	|-EnumInt16TypeInfo<object>.WriteData
	|
	|-RVA: 0x89E Offset: 0x89E VA: 0x89E
	|-EnumInt16TypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x89F Offset: 0x89F VA: 0x89F
	|-EnumInt16TypeInfo<float>.WriteData
	|
	|-RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
	|-EnumInt16TypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
	|-EnumInt16TypeInfo<ushort>.WriteData
	|
	|-RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
	|-EnumInt16TypeInfo<uint>.WriteData
	|
	|-RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
	|-EnumInt16TypeInfo<ulong>.WriteData
	|
	|-RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
	|-EnumInt16TypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAC8 Offset: 0xAC8 VA: 0xAC8
	|-EnumInt16TypeInfo<bool>.GetData
	|
	|-RVA: 0xAC9 Offset: 0xAC9 VA: 0xAC9
	|-EnumInt16TypeInfo<byte>.GetData
	|
	|-RVA: 0xACA Offset: 0xACA VA: 0xACA
	|-EnumInt16TypeInfo<char>.GetData
	|
	|-RVA: 0xACB Offset: 0xACB VA: 0xACB
	|-EnumInt16TypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xACC Offset: 0xACC VA: 0xACC
	|-EnumInt16TypeInfo<DateTime>.GetData
	|
	|-RVA: 0xACD Offset: 0xACD VA: 0xACD
	|-EnumInt16TypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xACE Offset: 0xACE VA: 0xACE
	|-EnumInt16TypeInfo<Decimal>.GetData
	|
	|-RVA: 0xACF Offset: 0xACF VA: 0xACF
	|-EnumInt16TypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xAD0 Offset: 0xAD0 VA: 0xAD0
	|-EnumInt16TypeInfo<double>.GetData
	|
	|-RVA: 0xAD1 Offset: 0xAD1 VA: 0xAD1
	|-EnumInt16TypeInfo<Guid>.GetData
	|
	|-RVA: 0xAD2 Offset: 0xAD2 VA: 0xAD2
	|-EnumInt16TypeInfo<short>.GetData
	|
	|-RVA: 0xAD3 Offset: 0xAD3 VA: 0xAD3
	|-EnumInt16TypeInfo<int>.GetData
	|
	|-RVA: 0xAD4 Offset: 0xAD4 VA: 0xAD4
	|-EnumInt16TypeInfo<long>.GetData
	|
	|-RVA: 0xAD5 Offset: 0xAD5 VA: 0xAD5
	|-EnumInt16TypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x692 Offset: 0x692 VA: 0x692
	|-EnumInt16TypeInfo<object>.GetData
	|
	|-RVA: 0xAD6 Offset: 0xAD6 VA: 0xAD6
	|-EnumInt16TypeInfo<sbyte>.GetData
	|
	|-RVA: 0xAD7 Offset: 0xAD7 VA: 0xAD7
	|-EnumInt16TypeInfo<float>.GetData
	|
	|-RVA: 0xAD8 Offset: 0xAD8 VA: 0xAD8
	|-EnumInt16TypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xAD9 Offset: 0xAD9 VA: 0xAD9
	|-EnumInt16TypeInfo<ushort>.GetData
	|
	|-RVA: 0xADA Offset: 0xADA VA: 0xADA
	|-EnumInt16TypeInfo<uint>.GetData
	|
	|-RVA: 0xADB Offset: 0xADB VA: 0xADB
	|-EnumInt16TypeInfo<ulong>.GetData
	|
	|-RVA: 0xADC Offset: 0xADC VA: 0xADC
	|-EnumInt16TypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB1E Offset: 0xB1E VA: 0xB1E
	|-EnumInt16TypeInfo<bool>..ctor
	|
	|-RVA: 0xB1F Offset: 0xB1F VA: 0xB1F
	|-EnumInt16TypeInfo<byte>..ctor
	|
	|-RVA: 0xB20 Offset: 0xB20 VA: 0xB20
	|-EnumInt16TypeInfo<char>..ctor
	|
	|-RVA: 0xB21 Offset: 0xB21 VA: 0xB21
	|-EnumInt16TypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB22 Offset: 0xB22 VA: 0xB22
	|-EnumInt16TypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB23 Offset: 0xB23 VA: 0xB23
	|-EnumInt16TypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB24 Offset: 0xB24 VA: 0xB24
	|-EnumInt16TypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB25 Offset: 0xB25 VA: 0xB25
	|-EnumInt16TypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB26 Offset: 0xB26 VA: 0xB26
	|-EnumInt16TypeInfo<double>..ctor
	|
	|-RVA: 0xB27 Offset: 0xB27 VA: 0xB27
	|-EnumInt16TypeInfo<Guid>..ctor
	|
	|-RVA: 0xB28 Offset: 0xB28 VA: 0xB28
	|-EnumInt16TypeInfo<short>..ctor
	|
	|-RVA: 0xB29 Offset: 0xB29 VA: 0xB29
	|-EnumInt16TypeInfo<int>..ctor
	|
	|-RVA: 0xB2A Offset: 0xB2A VA: 0xB2A
	|-EnumInt16TypeInfo<long>..ctor
	|
	|-RVA: 0xB2B Offset: 0xB2B VA: 0xB2B
	|-EnumInt16TypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
	|-EnumInt16TypeInfo<object>..ctor
	|
	|-RVA: 0xB2C Offset: 0xB2C VA: 0xB2C
	|-EnumInt16TypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB2D Offset: 0xB2D VA: 0xB2D
	|-EnumInt16TypeInfo<float>..ctor
	|
	|-RVA: 0xB2E Offset: 0xB2E VA: 0xB2E
	|-EnumInt16TypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB2F Offset: 0xB2F VA: 0xB2F
	|-EnumInt16TypeInfo<ushort>..ctor
	|
	|-RVA: 0xB30 Offset: 0xB30 VA: 0xB30
	|-EnumInt16TypeInfo<uint>..ctor
	|
	|-RVA: 0xB31 Offset: 0xB31 VA: 0xB31
	|-EnumInt16TypeInfo<ulong>..ctor
	|
	|-RVA: 0xB32 Offset: 0xB32 VA: 0xB32
	|-EnumInt16TypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumUInt16TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1320
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x233 Offset: 0x233 VA: 0x233
	|-EnumUInt16TypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x234 Offset: 0x234 VA: 0x234
	|-EnumUInt16TypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x235 Offset: 0x235 VA: 0x235
	|-EnumUInt16TypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x236 Offset: 0x236 VA: 0x236
	|-EnumUInt16TypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x237 Offset: 0x237 VA: 0x237
	|-EnumUInt16TypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x238 Offset: 0x238 VA: 0x238
	|-EnumUInt16TypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x239 Offset: 0x239 VA: 0x239
	|-EnumUInt16TypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x23A Offset: 0x23A VA: 0x23A
	|-EnumUInt16TypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x23B Offset: 0x23B VA: 0x23B
	|-EnumUInt16TypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x23C Offset: 0x23C VA: 0x23C
	|-EnumUInt16TypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x23D Offset: 0x23D VA: 0x23D
	|-EnumUInt16TypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x23E Offset: 0x23E VA: 0x23E
	|-EnumUInt16TypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x23F Offset: 0x23F VA: 0x23F
	|-EnumUInt16TypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x240 Offset: 0x240 VA: 0x240
	|-EnumUInt16TypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x132 Offset: 0x132 VA: 0x132
	|-EnumUInt16TypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x241 Offset: 0x241 VA: 0x241
	|-EnumUInt16TypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x242 Offset: 0x242 VA: 0x242
	|-EnumUInt16TypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x243 Offset: 0x243 VA: 0x243
	|-EnumUInt16TypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x244 Offset: 0x244 VA: 0x244
	|-EnumUInt16TypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x245 Offset: 0x245 VA: 0x245
	|-EnumUInt16TypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x246 Offset: 0x246 VA: 0x246
	|-EnumUInt16TypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x247 Offset: 0x247 VA: 0x247
	|-EnumUInt16TypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4
	|-EnumUInt16TypeInfo<bool>.WriteData
	|
	|-RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5
	|-EnumUInt16TypeInfo<byte>.WriteData
	|
	|-RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6
	|-EnumUInt16TypeInfo<char>.WriteData
	|
	|-RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7
	|-EnumUInt16TypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8
	|-EnumUInt16TypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9
	|-EnumUInt16TypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x8EA Offset: 0x8EA VA: 0x8EA
	|-EnumUInt16TypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x8EB Offset: 0x8EB VA: 0x8EB
	|-EnumUInt16TypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x8EC Offset: 0x8EC VA: 0x8EC
	|-EnumUInt16TypeInfo<double>.WriteData
	|
	|-RVA: 0x8ED Offset: 0x8ED VA: 0x8ED
	|-EnumUInt16TypeInfo<Guid>.WriteData
	|
	|-RVA: 0x8EE Offset: 0x8EE VA: 0x8EE
	|-EnumUInt16TypeInfo<short>.WriteData
	|
	|-RVA: 0x8EF Offset: 0x8EF VA: 0x8EF
	|-EnumUInt16TypeInfo<int>.WriteData
	|
	|-RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0
	|-EnumUInt16TypeInfo<long>.WriteData
	|
	|-RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
	|-EnumUInt16TypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x430 Offset: 0x430 VA: 0x430
	|-EnumUInt16TypeInfo<object>.WriteData
	|
	|-RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
	|-EnumUInt16TypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3
	|-EnumUInt16TypeInfo<float>.WriteData
	|
	|-RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4
	|-EnumUInt16TypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5
	|-EnumUInt16TypeInfo<ushort>.WriteData
	|
	|-RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6
	|-EnumUInt16TypeInfo<uint>.WriteData
	|
	|-RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7
	|-EnumUInt16TypeInfo<ulong>.WriteData
	|
	|-RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8
	|-EnumUInt16TypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB1C Offset: 0xB1C VA: 0xB1C
	|-EnumUInt16TypeInfo<bool>.GetData
	|
	|-RVA: 0xB1D Offset: 0xB1D VA: 0xB1D
	|-EnumUInt16TypeInfo<byte>.GetData
	|
	|-RVA: 0xB1E Offset: 0xB1E VA: 0xB1E
	|-EnumUInt16TypeInfo<char>.GetData
	|
	|-RVA: 0xB1F Offset: 0xB1F VA: 0xB1F
	|-EnumUInt16TypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xB20 Offset: 0xB20 VA: 0xB20
	|-EnumUInt16TypeInfo<DateTime>.GetData
	|
	|-RVA: 0xB21 Offset: 0xB21 VA: 0xB21
	|-EnumUInt16TypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xB22 Offset: 0xB22 VA: 0xB22
	|-EnumUInt16TypeInfo<Decimal>.GetData
	|
	|-RVA: 0xB23 Offset: 0xB23 VA: 0xB23
	|-EnumUInt16TypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xB24 Offset: 0xB24 VA: 0xB24
	|-EnumUInt16TypeInfo<double>.GetData
	|
	|-RVA: 0xB25 Offset: 0xB25 VA: 0xB25
	|-EnumUInt16TypeInfo<Guid>.GetData
	|
	|-RVA: 0xB26 Offset: 0xB26 VA: 0xB26
	|-EnumUInt16TypeInfo<short>.GetData
	|
	|-RVA: 0xB27 Offset: 0xB27 VA: 0xB27
	|-EnumUInt16TypeInfo<int>.GetData
	|
	|-RVA: 0xB28 Offset: 0xB28 VA: 0xB28
	|-EnumUInt16TypeInfo<long>.GetData
	|
	|-RVA: 0xB29 Offset: 0xB29 VA: 0xB29
	|-EnumUInt16TypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x693 Offset: 0x693 VA: 0x693
	|-EnumUInt16TypeInfo<object>.GetData
	|
	|-RVA: 0xB2A Offset: 0xB2A VA: 0xB2A
	|-EnumUInt16TypeInfo<sbyte>.GetData
	|
	|-RVA: 0xB2B Offset: 0xB2B VA: 0xB2B
	|-EnumUInt16TypeInfo<float>.GetData
	|
	|-RVA: 0xB2C Offset: 0xB2C VA: 0xB2C
	|-EnumUInt16TypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xB2D Offset: 0xB2D VA: 0xB2D
	|-EnumUInt16TypeInfo<ushort>.GetData
	|
	|-RVA: 0xB2E Offset: 0xB2E VA: 0xB2E
	|-EnumUInt16TypeInfo<uint>.GetData
	|
	|-RVA: 0xB2F Offset: 0xB2F VA: 0xB2F
	|-EnumUInt16TypeInfo<ulong>.GetData
	|
	|-RVA: 0xB30 Offset: 0xB30 VA: 0xB30
	|-EnumUInt16TypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB72 Offset: 0xB72 VA: 0xB72
	|-EnumUInt16TypeInfo<bool>..ctor
	|
	|-RVA: 0xB73 Offset: 0xB73 VA: 0xB73
	|-EnumUInt16TypeInfo<byte>..ctor
	|
	|-RVA: 0xB74 Offset: 0xB74 VA: 0xB74
	|-EnumUInt16TypeInfo<char>..ctor
	|
	|-RVA: 0xB75 Offset: 0xB75 VA: 0xB75
	|-EnumUInt16TypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB76 Offset: 0xB76 VA: 0xB76
	|-EnumUInt16TypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB77 Offset: 0xB77 VA: 0xB77
	|-EnumUInt16TypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB78 Offset: 0xB78 VA: 0xB78
	|-EnumUInt16TypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB79 Offset: 0xB79 VA: 0xB79
	|-EnumUInt16TypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB7A Offset: 0xB7A VA: 0xB7A
	|-EnumUInt16TypeInfo<double>..ctor
	|
	|-RVA: 0xB7B Offset: 0xB7B VA: 0xB7B
	|-EnumUInt16TypeInfo<Guid>..ctor
	|
	|-RVA: 0xB7C Offset: 0xB7C VA: 0xB7C
	|-EnumUInt16TypeInfo<short>..ctor
	|
	|-RVA: 0xB7D Offset: 0xB7D VA: 0xB7D
	|-EnumUInt16TypeInfo<int>..ctor
	|
	|-RVA: 0xB7E Offset: 0xB7E VA: 0xB7E
	|-EnumUInt16TypeInfo<long>..ctor
	|
	|-RVA: 0xB7F Offset: 0xB7F VA: 0xB7F
	|-EnumUInt16TypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3
	|-EnumUInt16TypeInfo<object>..ctor
	|
	|-RVA: 0xB80 Offset: 0xB80 VA: 0xB80
	|-EnumUInt16TypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB81 Offset: 0xB81 VA: 0xB81
	|-EnumUInt16TypeInfo<float>..ctor
	|
	|-RVA: 0xB82 Offset: 0xB82 VA: 0xB82
	|-EnumUInt16TypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB83 Offset: 0xB83 VA: 0xB83
	|-EnumUInt16TypeInfo<ushort>..ctor
	|
	|-RVA: 0xB84 Offset: 0xB84 VA: 0xB84
	|-EnumUInt16TypeInfo<uint>..ctor
	|
	|-RVA: 0xB85 Offset: 0xB85 VA: 0xB85
	|-EnumUInt16TypeInfo<ulong>..ctor
	|
	|-RVA: 0xB86 Offset: 0xB86 VA: 0xB86
	|-EnumUInt16TypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumInt32TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1321
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1F4 Offset: 0x1F4 VA: 0x1F4
	|-EnumInt32TypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x1F5 Offset: 0x1F5 VA: 0x1F5
	|-EnumInt32TypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x1F6 Offset: 0x1F6 VA: 0x1F6
	|-EnumInt32TypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x1F7 Offset: 0x1F7 VA: 0x1F7
	|-EnumInt32TypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x1F8 Offset: 0x1F8 VA: 0x1F8
	|-EnumInt32TypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x1F9 Offset: 0x1F9 VA: 0x1F9
	|-EnumInt32TypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x1FA Offset: 0x1FA VA: 0x1FA
	|-EnumInt32TypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x1FB Offset: 0x1FB VA: 0x1FB
	|-EnumInt32TypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x1FC Offset: 0x1FC VA: 0x1FC
	|-EnumInt32TypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x1FD Offset: 0x1FD VA: 0x1FD
	|-EnumInt32TypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x1FE Offset: 0x1FE VA: 0x1FE
	|-EnumInt32TypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x1FF Offset: 0x1FF VA: 0x1FF
	|-EnumInt32TypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x200 Offset: 0x200 VA: 0x200
	|-EnumInt32TypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x201 Offset: 0x201 VA: 0x201
	|-EnumInt32TypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x133 Offset: 0x133 VA: 0x133
	|-EnumInt32TypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x202 Offset: 0x202 VA: 0x202
	|-EnumInt32TypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x203 Offset: 0x203 VA: 0x203
	|-EnumInt32TypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x204 Offset: 0x204 VA: 0x204
	|-EnumInt32TypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x205 Offset: 0x205 VA: 0x205
	|-EnumInt32TypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x206 Offset: 0x206 VA: 0x206
	|-EnumInt32TypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x207 Offset: 0x207 VA: 0x207
	|-EnumInt32TypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x208 Offset: 0x208 VA: 0x208
	|-EnumInt32TypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5
	|-EnumInt32TypeInfo<bool>.WriteData
	|
	|-RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6
	|-EnumInt32TypeInfo<byte>.WriteData
	|
	|-RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7
	|-EnumInt32TypeInfo<char>.WriteData
	|
	|-RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8
	|-EnumInt32TypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9
	|-EnumInt32TypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x8AA Offset: 0x8AA VA: 0x8AA
	|-EnumInt32TypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x8AB Offset: 0x8AB VA: 0x8AB
	|-EnumInt32TypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x8AC Offset: 0x8AC VA: 0x8AC
	|-EnumInt32TypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x8AD Offset: 0x8AD VA: 0x8AD
	|-EnumInt32TypeInfo<double>.WriteData
	|
	|-RVA: 0x8AE Offset: 0x8AE VA: 0x8AE
	|-EnumInt32TypeInfo<Guid>.WriteData
	|
	|-RVA: 0x8AF Offset: 0x8AF VA: 0x8AF
	|-EnumInt32TypeInfo<short>.WriteData
	|
	|-RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
	|-EnumInt32TypeInfo<int>.WriteData
	|
	|-RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
	|-EnumInt32TypeInfo<long>.WriteData
	|
	|-RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
	|-EnumInt32TypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x431 Offset: 0x431 VA: 0x431
	|-EnumInt32TypeInfo<object>.WriteData
	|
	|-RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
	|-EnumInt32TypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
	|-EnumInt32TypeInfo<float>.WriteData
	|
	|-RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
	|-EnumInt32TypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
	|-EnumInt32TypeInfo<ushort>.WriteData
	|
	|-RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7
	|-EnumInt32TypeInfo<uint>.WriteData
	|
	|-RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8
	|-EnumInt32TypeInfo<ulong>.WriteData
	|
	|-RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9
	|-EnumInt32TypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xADD Offset: 0xADD VA: 0xADD
	|-EnumInt32TypeInfo<bool>.GetData
	|
	|-RVA: 0xADE Offset: 0xADE VA: 0xADE
	|-EnumInt32TypeInfo<byte>.GetData
	|
	|-RVA: 0xADF Offset: 0xADF VA: 0xADF
	|-EnumInt32TypeInfo<char>.GetData
	|
	|-RVA: 0xAE0 Offset: 0xAE0 VA: 0xAE0
	|-EnumInt32TypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xAE1 Offset: 0xAE1 VA: 0xAE1
	|-EnumInt32TypeInfo<DateTime>.GetData
	|
	|-RVA: 0xAE2 Offset: 0xAE2 VA: 0xAE2
	|-EnumInt32TypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xAE3 Offset: 0xAE3 VA: 0xAE3
	|-EnumInt32TypeInfo<Decimal>.GetData
	|
	|-RVA: 0xAE4 Offset: 0xAE4 VA: 0xAE4
	|-EnumInt32TypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xAE5 Offset: 0xAE5 VA: 0xAE5
	|-EnumInt32TypeInfo<double>.GetData
	|
	|-RVA: 0xAE6 Offset: 0xAE6 VA: 0xAE6
	|-EnumInt32TypeInfo<Guid>.GetData
	|
	|-RVA: 0xAE7 Offset: 0xAE7 VA: 0xAE7
	|-EnumInt32TypeInfo<short>.GetData
	|
	|-RVA: 0xAE8 Offset: 0xAE8 VA: 0xAE8
	|-EnumInt32TypeInfo<int>.GetData
	|
	|-RVA: 0xAE9 Offset: 0xAE9 VA: 0xAE9
	|-EnumInt32TypeInfo<long>.GetData
	|
	|-RVA: 0xAEA Offset: 0xAEA VA: 0xAEA
	|-EnumInt32TypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x694 Offset: 0x694 VA: 0x694
	|-EnumInt32TypeInfo<object>.GetData
	|
	|-RVA: 0xAEB Offset: 0xAEB VA: 0xAEB
	|-EnumInt32TypeInfo<sbyte>.GetData
	|
	|-RVA: 0xAEC Offset: 0xAEC VA: 0xAEC
	|-EnumInt32TypeInfo<float>.GetData
	|
	|-RVA: 0xAED Offset: 0xAED VA: 0xAED
	|-EnumInt32TypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	|-EnumInt32TypeInfo<ushort>.GetData
	|
	|-RVA: 0xAEF Offset: 0xAEF VA: 0xAEF
	|-EnumInt32TypeInfo<uint>.GetData
	|
	|-RVA: 0xAF0 Offset: 0xAF0 VA: 0xAF0
	|-EnumInt32TypeInfo<ulong>.GetData
	|
	|-RVA: 0xAF1 Offset: 0xAF1 VA: 0xAF1
	|-EnumInt32TypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB33 Offset: 0xB33 VA: 0xB33
	|-EnumInt32TypeInfo<bool>..ctor
	|
	|-RVA: 0xB34 Offset: 0xB34 VA: 0xB34
	|-EnumInt32TypeInfo<byte>..ctor
	|
	|-RVA: 0xB35 Offset: 0xB35 VA: 0xB35
	|-EnumInt32TypeInfo<char>..ctor
	|
	|-RVA: 0xB36 Offset: 0xB36 VA: 0xB36
	|-EnumInt32TypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB37 Offset: 0xB37 VA: 0xB37
	|-EnumInt32TypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB38 Offset: 0xB38 VA: 0xB38
	|-EnumInt32TypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB39 Offset: 0xB39 VA: 0xB39
	|-EnumInt32TypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB3A Offset: 0xB3A VA: 0xB3A
	|-EnumInt32TypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB3B Offset: 0xB3B VA: 0xB3B
	|-EnumInt32TypeInfo<double>..ctor
	|
	|-RVA: 0xB3C Offset: 0xB3C VA: 0xB3C
	|-EnumInt32TypeInfo<Guid>..ctor
	|
	|-RVA: 0xB3D Offset: 0xB3D VA: 0xB3D
	|-EnumInt32TypeInfo<short>..ctor
	|
	|-RVA: 0xB3E Offset: 0xB3E VA: 0xB3E
	|-EnumInt32TypeInfo<int>..ctor
	|
	|-RVA: 0xB3F Offset: 0xB3F VA: 0xB3F
	|-EnumInt32TypeInfo<long>..ctor
	|
	|-RVA: 0xB40 Offset: 0xB40 VA: 0xB40
	|-EnumInt32TypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4
	|-EnumInt32TypeInfo<object>..ctor
	|
	|-RVA: 0xB41 Offset: 0xB41 VA: 0xB41
	|-EnumInt32TypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB42 Offset: 0xB42 VA: 0xB42
	|-EnumInt32TypeInfo<float>..ctor
	|
	|-RVA: 0xB43 Offset: 0xB43 VA: 0xB43
	|-EnumInt32TypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB44 Offset: 0xB44 VA: 0xB44
	|-EnumInt32TypeInfo<ushort>..ctor
	|
	|-RVA: 0xB45 Offset: 0xB45 VA: 0xB45
	|-EnumInt32TypeInfo<uint>..ctor
	|
	|-RVA: 0xB46 Offset: 0xB46 VA: 0xB46
	|-EnumInt32TypeInfo<ulong>..ctor
	|
	|-RVA: 0xB47 Offset: 0xB47 VA: 0xB47
	|-EnumInt32TypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumUInt32TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1322
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x248 Offset: 0x248 VA: 0x248
	|-EnumUInt32TypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x249 Offset: 0x249 VA: 0x249
	|-EnumUInt32TypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x24A Offset: 0x24A VA: 0x24A
	|-EnumUInt32TypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x24B Offset: 0x24B VA: 0x24B
	|-EnumUInt32TypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x24C Offset: 0x24C VA: 0x24C
	|-EnumUInt32TypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x24D Offset: 0x24D VA: 0x24D
	|-EnumUInt32TypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x24E Offset: 0x24E VA: 0x24E
	|-EnumUInt32TypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x24F Offset: 0x24F VA: 0x24F
	|-EnumUInt32TypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x250 Offset: 0x250 VA: 0x250
	|-EnumUInt32TypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x251 Offset: 0x251 VA: 0x251
	|-EnumUInt32TypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x252 Offset: 0x252 VA: 0x252
	|-EnumUInt32TypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x253 Offset: 0x253 VA: 0x253
	|-EnumUInt32TypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x254 Offset: 0x254 VA: 0x254
	|-EnumUInt32TypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x255 Offset: 0x255 VA: 0x255
	|-EnumUInt32TypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x134 Offset: 0x134 VA: 0x134
	|-EnumUInt32TypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x256 Offset: 0x256 VA: 0x256
	|-EnumUInt32TypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x257 Offset: 0x257 VA: 0x257
	|-EnumUInt32TypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x258 Offset: 0x258 VA: 0x258
	|-EnumUInt32TypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x259 Offset: 0x259 VA: 0x259
	|-EnumUInt32TypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x25A Offset: 0x25A VA: 0x25A
	|-EnumUInt32TypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x25B Offset: 0x25B VA: 0x25B
	|-EnumUInt32TypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x25C Offset: 0x25C VA: 0x25C
	|-EnumUInt32TypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
	|-EnumUInt32TypeInfo<bool>.WriteData
	|
	|-RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
	|-EnumUInt32TypeInfo<byte>.WriteData
	|
	|-RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
	|-EnumUInt32TypeInfo<char>.WriteData
	|
	|-RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
	|-EnumUInt32TypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
	|-EnumUInt32TypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
	|-EnumUInt32TypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
	|-EnumUInt32TypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x900 Offset: 0x900 VA: 0x900
	|-EnumUInt32TypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x901 Offset: 0x901 VA: 0x901
	|-EnumUInt32TypeInfo<double>.WriteData
	|
	|-RVA: 0x902 Offset: 0x902 VA: 0x902
	|-EnumUInt32TypeInfo<Guid>.WriteData
	|
	|-RVA: 0x903 Offset: 0x903 VA: 0x903
	|-EnumUInt32TypeInfo<short>.WriteData
	|
	|-RVA: 0x904 Offset: 0x904 VA: 0x904
	|-EnumUInt32TypeInfo<int>.WriteData
	|
	|-RVA: 0x905 Offset: 0x905 VA: 0x905
	|-EnumUInt32TypeInfo<long>.WriteData
	|
	|-RVA: 0x906 Offset: 0x906 VA: 0x906
	|-EnumUInt32TypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x432 Offset: 0x432 VA: 0x432
	|-EnumUInt32TypeInfo<object>.WriteData
	|
	|-RVA: 0x907 Offset: 0x907 VA: 0x907
	|-EnumUInt32TypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x908 Offset: 0x908 VA: 0x908
	|-EnumUInt32TypeInfo<float>.WriteData
	|
	|-RVA: 0x909 Offset: 0x909 VA: 0x909
	|-EnumUInt32TypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x90A Offset: 0x90A VA: 0x90A
	|-EnumUInt32TypeInfo<ushort>.WriteData
	|
	|-RVA: 0x90B Offset: 0x90B VA: 0x90B
	|-EnumUInt32TypeInfo<uint>.WriteData
	|
	|-RVA: 0x90C Offset: 0x90C VA: 0x90C
	|-EnumUInt32TypeInfo<ulong>.WriteData
	|
	|-RVA: 0x90D Offset: 0x90D VA: 0x90D
	|-EnumUInt32TypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB31 Offset: 0xB31 VA: 0xB31
	|-EnumUInt32TypeInfo<bool>.GetData
	|
	|-RVA: 0xB32 Offset: 0xB32 VA: 0xB32
	|-EnumUInt32TypeInfo<byte>.GetData
	|
	|-RVA: 0xB33 Offset: 0xB33 VA: 0xB33
	|-EnumUInt32TypeInfo<char>.GetData
	|
	|-RVA: 0xB34 Offset: 0xB34 VA: 0xB34
	|-EnumUInt32TypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xB35 Offset: 0xB35 VA: 0xB35
	|-EnumUInt32TypeInfo<DateTime>.GetData
	|
	|-RVA: 0xB36 Offset: 0xB36 VA: 0xB36
	|-EnumUInt32TypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xB37 Offset: 0xB37 VA: 0xB37
	|-EnumUInt32TypeInfo<Decimal>.GetData
	|
	|-RVA: 0xB38 Offset: 0xB38 VA: 0xB38
	|-EnumUInt32TypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xB39 Offset: 0xB39 VA: 0xB39
	|-EnumUInt32TypeInfo<double>.GetData
	|
	|-RVA: 0xB3A Offset: 0xB3A VA: 0xB3A
	|-EnumUInt32TypeInfo<Guid>.GetData
	|
	|-RVA: 0xB3B Offset: 0xB3B VA: 0xB3B
	|-EnumUInt32TypeInfo<short>.GetData
	|
	|-RVA: 0xB3C Offset: 0xB3C VA: 0xB3C
	|-EnumUInt32TypeInfo<int>.GetData
	|
	|-RVA: 0xB3D Offset: 0xB3D VA: 0xB3D
	|-EnumUInt32TypeInfo<long>.GetData
	|
	|-RVA: 0xB3E Offset: 0xB3E VA: 0xB3E
	|-EnumUInt32TypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x695 Offset: 0x695 VA: 0x695
	|-EnumUInt32TypeInfo<object>.GetData
	|
	|-RVA: 0xB3F Offset: 0xB3F VA: 0xB3F
	|-EnumUInt32TypeInfo<sbyte>.GetData
	|
	|-RVA: 0xB40 Offset: 0xB40 VA: 0xB40
	|-EnumUInt32TypeInfo<float>.GetData
	|
	|-RVA: 0xB41 Offset: 0xB41 VA: 0xB41
	|-EnumUInt32TypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xB42 Offset: 0xB42 VA: 0xB42
	|-EnumUInt32TypeInfo<ushort>.GetData
	|
	|-RVA: 0xB43 Offset: 0xB43 VA: 0xB43
	|-EnumUInt32TypeInfo<uint>.GetData
	|
	|-RVA: 0xB44 Offset: 0xB44 VA: 0xB44
	|-EnumUInt32TypeInfo<ulong>.GetData
	|
	|-RVA: 0xB45 Offset: 0xB45 VA: 0xB45
	|-EnumUInt32TypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB87 Offset: 0xB87 VA: 0xB87
	|-EnumUInt32TypeInfo<bool>..ctor
	|
	|-RVA: 0xB88 Offset: 0xB88 VA: 0xB88
	|-EnumUInt32TypeInfo<byte>..ctor
	|
	|-RVA: 0xB89 Offset: 0xB89 VA: 0xB89
	|-EnumUInt32TypeInfo<char>..ctor
	|
	|-RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
	|-EnumUInt32TypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
	|-EnumUInt32TypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB8C Offset: 0xB8C VA: 0xB8C
	|-EnumUInt32TypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB8D Offset: 0xB8D VA: 0xB8D
	|-EnumUInt32TypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
	|-EnumUInt32TypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
	|-EnumUInt32TypeInfo<double>..ctor
	|
	|-RVA: 0xB90 Offset: 0xB90 VA: 0xB90
	|-EnumUInt32TypeInfo<Guid>..ctor
	|
	|-RVA: 0xB91 Offset: 0xB91 VA: 0xB91
	|-EnumUInt32TypeInfo<short>..ctor
	|
	|-RVA: 0xB92 Offset: 0xB92 VA: 0xB92
	|-EnumUInt32TypeInfo<int>..ctor
	|
	|-RVA: 0xB93 Offset: 0xB93 VA: 0xB93
	|-EnumUInt32TypeInfo<long>..ctor
	|
	|-RVA: 0xB94 Offset: 0xB94 VA: 0xB94
	|-EnumUInt32TypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5
	|-EnumUInt32TypeInfo<object>..ctor
	|
	|-RVA: 0xB95 Offset: 0xB95 VA: 0xB95
	|-EnumUInt32TypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB96 Offset: 0xB96 VA: 0xB96
	|-EnumUInt32TypeInfo<float>..ctor
	|
	|-RVA: 0xB97 Offset: 0xB97 VA: 0xB97
	|-EnumUInt32TypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB98 Offset: 0xB98 VA: 0xB98
	|-EnumUInt32TypeInfo<ushort>..ctor
	|
	|-RVA: 0xB99 Offset: 0xB99 VA: 0xB99
	|-EnumUInt32TypeInfo<uint>..ctor
	|
	|-RVA: 0xB9A Offset: 0xB9A VA: 0xB9A
	|-EnumUInt32TypeInfo<ulong>..ctor
	|
	|-RVA: 0xB9B Offset: 0xB9B VA: 0xB9B
	|-EnumUInt32TypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumInt64TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1323
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x209 Offset: 0x209 VA: 0x209
	|-EnumInt64TypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x20A Offset: 0x20A VA: 0x20A
	|-EnumInt64TypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x20B Offset: 0x20B VA: 0x20B
	|-EnumInt64TypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x20C Offset: 0x20C VA: 0x20C
	|-EnumInt64TypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x20D Offset: 0x20D VA: 0x20D
	|-EnumInt64TypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x20E Offset: 0x20E VA: 0x20E
	|-EnumInt64TypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x20F Offset: 0x20F VA: 0x20F
	|-EnumInt64TypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x210 Offset: 0x210 VA: 0x210
	|-EnumInt64TypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x211 Offset: 0x211 VA: 0x211
	|-EnumInt64TypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x212 Offset: 0x212 VA: 0x212
	|-EnumInt64TypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x213 Offset: 0x213 VA: 0x213
	|-EnumInt64TypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x214 Offset: 0x214 VA: 0x214
	|-EnumInt64TypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x215 Offset: 0x215 VA: 0x215
	|-EnumInt64TypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x216 Offset: 0x216 VA: 0x216
	|-EnumInt64TypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x135 Offset: 0x135 VA: 0x135
	|-EnumInt64TypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x217 Offset: 0x217 VA: 0x217
	|-EnumInt64TypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x218 Offset: 0x218 VA: 0x218
	|-EnumInt64TypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x219 Offset: 0x219 VA: 0x219
	|-EnumInt64TypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x21A Offset: 0x21A VA: 0x21A
	|-EnumInt64TypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x21B Offset: 0x21B VA: 0x21B
	|-EnumInt64TypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x21C Offset: 0x21C VA: 0x21C
	|-EnumInt64TypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x21D Offset: 0x21D VA: 0x21D
	|-EnumInt64TypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8BA Offset: 0x8BA VA: 0x8BA
	|-EnumInt64TypeInfo<bool>.WriteData
	|
	|-RVA: 0x8BB Offset: 0x8BB VA: 0x8BB
	|-EnumInt64TypeInfo<byte>.WriteData
	|
	|-RVA: 0x8BC Offset: 0x8BC VA: 0x8BC
	|-EnumInt64TypeInfo<char>.WriteData
	|
	|-RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
	|-EnumInt64TypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
	|-EnumInt64TypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x8BF Offset: 0x8BF VA: 0x8BF
	|-EnumInt64TypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0
	|-EnumInt64TypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1
	|-EnumInt64TypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2
	|-EnumInt64TypeInfo<double>.WriteData
	|
	|-RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3
	|-EnumInt64TypeInfo<Guid>.WriteData
	|
	|-RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4
	|-EnumInt64TypeInfo<short>.WriteData
	|
	|-RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5
	|-EnumInt64TypeInfo<int>.WriteData
	|
	|-RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6
	|-EnumInt64TypeInfo<long>.WriteData
	|
	|-RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7
	|-EnumInt64TypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x433 Offset: 0x433 VA: 0x433
	|-EnumInt64TypeInfo<object>.WriteData
	|
	|-RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8
	|-EnumInt64TypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9
	|-EnumInt64TypeInfo<float>.WriteData
	|
	|-RVA: 0x8CA Offset: 0x8CA VA: 0x8CA
	|-EnumInt64TypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x8CB Offset: 0x8CB VA: 0x8CB
	|-EnumInt64TypeInfo<ushort>.WriteData
	|
	|-RVA: 0x8CC Offset: 0x8CC VA: 0x8CC
	|-EnumInt64TypeInfo<uint>.WriteData
	|
	|-RVA: 0x8CD Offset: 0x8CD VA: 0x8CD
	|-EnumInt64TypeInfo<ulong>.WriteData
	|
	|-RVA: 0x8CE Offset: 0x8CE VA: 0x8CE
	|-EnumInt64TypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAF2 Offset: 0xAF2 VA: 0xAF2
	|-EnumInt64TypeInfo<bool>.GetData
	|
	|-RVA: 0xAF3 Offset: 0xAF3 VA: 0xAF3
	|-EnumInt64TypeInfo<byte>.GetData
	|
	|-RVA: 0xAF4 Offset: 0xAF4 VA: 0xAF4
	|-EnumInt64TypeInfo<char>.GetData
	|
	|-RVA: 0xAF5 Offset: 0xAF5 VA: 0xAF5
	|-EnumInt64TypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xAF6 Offset: 0xAF6 VA: 0xAF6
	|-EnumInt64TypeInfo<DateTime>.GetData
	|
	|-RVA: 0xAF7 Offset: 0xAF7 VA: 0xAF7
	|-EnumInt64TypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xAF8 Offset: 0xAF8 VA: 0xAF8
	|-EnumInt64TypeInfo<Decimal>.GetData
	|
	|-RVA: 0xAF9 Offset: 0xAF9 VA: 0xAF9
	|-EnumInt64TypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xAFA Offset: 0xAFA VA: 0xAFA
	|-EnumInt64TypeInfo<double>.GetData
	|
	|-RVA: 0xAFB Offset: 0xAFB VA: 0xAFB
	|-EnumInt64TypeInfo<Guid>.GetData
	|
	|-RVA: 0xAFC Offset: 0xAFC VA: 0xAFC
	|-EnumInt64TypeInfo<short>.GetData
	|
	|-RVA: 0xAFD Offset: 0xAFD VA: 0xAFD
	|-EnumInt64TypeInfo<int>.GetData
	|
	|-RVA: 0xAFE Offset: 0xAFE VA: 0xAFE
	|-EnumInt64TypeInfo<long>.GetData
	|
	|-RVA: 0xAFF Offset: 0xAFF VA: 0xAFF
	|-EnumInt64TypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x696 Offset: 0x696 VA: 0x696
	|-EnumInt64TypeInfo<object>.GetData
	|
	|-RVA: 0xB00 Offset: 0xB00 VA: 0xB00
	|-EnumInt64TypeInfo<sbyte>.GetData
	|
	|-RVA: 0xB01 Offset: 0xB01 VA: 0xB01
	|-EnumInt64TypeInfo<float>.GetData
	|
	|-RVA: 0xB02 Offset: 0xB02 VA: 0xB02
	|-EnumInt64TypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xB03 Offset: 0xB03 VA: 0xB03
	|-EnumInt64TypeInfo<ushort>.GetData
	|
	|-RVA: 0xB04 Offset: 0xB04 VA: 0xB04
	|-EnumInt64TypeInfo<uint>.GetData
	|
	|-RVA: 0xB05 Offset: 0xB05 VA: 0xB05
	|-EnumInt64TypeInfo<ulong>.GetData
	|
	|-RVA: 0xB06 Offset: 0xB06 VA: 0xB06
	|-EnumInt64TypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB48 Offset: 0xB48 VA: 0xB48
	|-EnumInt64TypeInfo<bool>..ctor
	|
	|-RVA: 0xB49 Offset: 0xB49 VA: 0xB49
	|-EnumInt64TypeInfo<byte>..ctor
	|
	|-RVA: 0xB4A Offset: 0xB4A VA: 0xB4A
	|-EnumInt64TypeInfo<char>..ctor
	|
	|-RVA: 0xB4B Offset: 0xB4B VA: 0xB4B
	|-EnumInt64TypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xB4C Offset: 0xB4C VA: 0xB4C
	|-EnumInt64TypeInfo<DateTime>..ctor
	|
	|-RVA: 0xB4D Offset: 0xB4D VA: 0xB4D
	|-EnumInt64TypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xB4E Offset: 0xB4E VA: 0xB4E
	|-EnumInt64TypeInfo<Decimal>..ctor
	|
	|-RVA: 0xB4F Offset: 0xB4F VA: 0xB4F
	|-EnumInt64TypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xB50 Offset: 0xB50 VA: 0xB50
	|-EnumInt64TypeInfo<double>..ctor
	|
	|-RVA: 0xB51 Offset: 0xB51 VA: 0xB51
	|-EnumInt64TypeInfo<Guid>..ctor
	|
	|-RVA: 0xB52 Offset: 0xB52 VA: 0xB52
	|-EnumInt64TypeInfo<short>..ctor
	|
	|-RVA: 0xB53 Offset: 0xB53 VA: 0xB53
	|-EnumInt64TypeInfo<int>..ctor
	|
	|-RVA: 0xB54 Offset: 0xB54 VA: 0xB54
	|-EnumInt64TypeInfo<long>..ctor
	|
	|-RVA: 0xB55 Offset: 0xB55 VA: 0xB55
	|-EnumInt64TypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6
	|-EnumInt64TypeInfo<object>..ctor
	|
	|-RVA: 0xB56 Offset: 0xB56 VA: 0xB56
	|-EnumInt64TypeInfo<sbyte>..ctor
	|
	|-RVA: 0xB57 Offset: 0xB57 VA: 0xB57
	|-EnumInt64TypeInfo<float>..ctor
	|
	|-RVA: 0xB58 Offset: 0xB58 VA: 0xB58
	|-EnumInt64TypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xB59 Offset: 0xB59 VA: 0xB59
	|-EnumInt64TypeInfo<ushort>..ctor
	|
	|-RVA: 0xB5A Offset: 0xB5A VA: 0xB5A
	|-EnumInt64TypeInfo<uint>..ctor
	|
	|-RVA: 0xB5B Offset: 0xB5B VA: 0xB5B
	|-EnumInt64TypeInfo<ulong>..ctor
	|
	|-RVA: 0xB5C Offset: 0xB5C VA: 0xB5C
	|-EnumInt64TypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class EnumUInt64TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1324
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25D Offset: 0x25D VA: 0x25D
	|-EnumUInt64TypeInfo<bool>.WriteMetadata
	|
	|-RVA: 0x25E Offset: 0x25E VA: 0x25E
	|-EnumUInt64TypeInfo<byte>.WriteMetadata
	|
	|-RVA: 0x25F Offset: 0x25F VA: 0x25F
	|-EnumUInt64TypeInfo<char>.WriteMetadata
	|
	|-RVA: 0x260 Offset: 0x260 VA: 0x260
	|-EnumUInt64TypeInfo<KeyValuePair<object, object>>.WriteMetadata
	|
	|-RVA: 0x261 Offset: 0x261 VA: 0x261
	|-EnumUInt64TypeInfo<DateTime>.WriteMetadata
	|
	|-RVA: 0x262 Offset: 0x262 VA: 0x262
	|-EnumUInt64TypeInfo<DateTimeOffset>.WriteMetadata
	|
	|-RVA: 0x263 Offset: 0x263 VA: 0x263
	|-EnumUInt64TypeInfo<Decimal>.WriteMetadata
	|
	|-RVA: 0x264 Offset: 0x264 VA: 0x264
	|-EnumUInt64TypeInfo<EmptyStruct>.WriteMetadata
	|
	|-RVA: 0x265 Offset: 0x265 VA: 0x265
	|-EnumUInt64TypeInfo<double>.WriteMetadata
	|
	|-RVA: 0x266 Offset: 0x266 VA: 0x266
	|-EnumUInt64TypeInfo<Guid>.WriteMetadata
	|
	|-RVA: 0x267 Offset: 0x267 VA: 0x267
	|-EnumUInt64TypeInfo<short>.WriteMetadata
	|
	|-RVA: 0x268 Offset: 0x268 VA: 0x268
	|-EnumUInt64TypeInfo<int>.WriteMetadata
	|
	|-RVA: 0x269 Offset: 0x269 VA: 0x269
	|-EnumUInt64TypeInfo<long>.WriteMetadata
	|
	|-RVA: 0x26A Offset: 0x26A VA: 0x26A
	|-EnumUInt64TypeInfo<IntPtr>.WriteMetadata
	|
	|-RVA: 0x136 Offset: 0x136 VA: 0x136
	|-EnumUInt64TypeInfo<object>.WriteMetadata
	|
	|-RVA: 0x26B Offset: 0x26B VA: 0x26B
	|-EnumUInt64TypeInfo<sbyte>.WriteMetadata
	|
	|-RVA: 0x26C Offset: 0x26C VA: 0x26C
	|-EnumUInt64TypeInfo<float>.WriteMetadata
	|
	|-RVA: 0x26D Offset: 0x26D VA: 0x26D
	|-EnumUInt64TypeInfo<TimeSpan>.WriteMetadata
	|
	|-RVA: 0x26E Offset: 0x26E VA: 0x26E
	|-EnumUInt64TypeInfo<ushort>.WriteMetadata
	|
	|-RVA: 0x26F Offset: 0x26F VA: 0x26F
	|-EnumUInt64TypeInfo<uint>.WriteMetadata
	|
	|-RVA: 0x270 Offset: 0x270 VA: 0x270
	|-EnumUInt64TypeInfo<ulong>.WriteMetadata
	|
	|-RVA: 0x271 Offset: 0x271 VA: 0x271
	|-EnumUInt64TypeInfo<UIntPtr>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x90E Offset: 0x90E VA: 0x90E
	|-EnumUInt64TypeInfo<bool>.WriteData
	|
	|-RVA: 0x90F Offset: 0x90F VA: 0x90F
	|-EnumUInt64TypeInfo<byte>.WriteData
	|
	|-RVA: 0x910 Offset: 0x910 VA: 0x910
	|-EnumUInt64TypeInfo<char>.WriteData
	|
	|-RVA: 0x911 Offset: 0x911 VA: 0x911
	|-EnumUInt64TypeInfo<KeyValuePair<object, object>>.WriteData
	|
	|-RVA: 0x912 Offset: 0x912 VA: 0x912
	|-EnumUInt64TypeInfo<DateTime>.WriteData
	|
	|-RVA: 0x913 Offset: 0x913 VA: 0x913
	|-EnumUInt64TypeInfo<DateTimeOffset>.WriteData
	|
	|-RVA: 0x914 Offset: 0x914 VA: 0x914
	|-EnumUInt64TypeInfo<Decimal>.WriteData
	|
	|-RVA: 0x915 Offset: 0x915 VA: 0x915
	|-EnumUInt64TypeInfo<EmptyStruct>.WriteData
	|
	|-RVA: 0x916 Offset: 0x916 VA: 0x916
	|-EnumUInt64TypeInfo<double>.WriteData
	|
	|-RVA: 0x917 Offset: 0x917 VA: 0x917
	|-EnumUInt64TypeInfo<Guid>.WriteData
	|
	|-RVA: 0x918 Offset: 0x918 VA: 0x918
	|-EnumUInt64TypeInfo<short>.WriteData
	|
	|-RVA: 0x919 Offset: 0x919 VA: 0x919
	|-EnumUInt64TypeInfo<int>.WriteData
	|
	|-RVA: 0x91A Offset: 0x91A VA: 0x91A
	|-EnumUInt64TypeInfo<long>.WriteData
	|
	|-RVA: 0x91B Offset: 0x91B VA: 0x91B
	|-EnumUInt64TypeInfo<IntPtr>.WriteData
	|
	|-RVA: 0x434 Offset: 0x434 VA: 0x434
	|-EnumUInt64TypeInfo<object>.WriteData
	|
	|-RVA: 0x91C Offset: 0x91C VA: 0x91C
	|-EnumUInt64TypeInfo<sbyte>.WriteData
	|
	|-RVA: 0x91D Offset: 0x91D VA: 0x91D
	|-EnumUInt64TypeInfo<float>.WriteData
	|
	|-RVA: 0x91E Offset: 0x91E VA: 0x91E
	|-EnumUInt64TypeInfo<TimeSpan>.WriteData
	|
	|-RVA: 0x91F Offset: 0x91F VA: 0x91F
	|-EnumUInt64TypeInfo<ushort>.WriteData
	|
	|-RVA: 0x920 Offset: 0x920 VA: 0x920
	|-EnumUInt64TypeInfo<uint>.WriteData
	|
	|-RVA: 0x921 Offset: 0x921 VA: 0x921
	|-EnumUInt64TypeInfo<ulong>.WriteData
	|
	|-RVA: 0x922 Offset: 0x922 VA: 0x922
	|-EnumUInt64TypeInfo<UIntPtr>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB46 Offset: 0xB46 VA: 0xB46
	|-EnumUInt64TypeInfo<bool>.GetData
	|
	|-RVA: 0xB47 Offset: 0xB47 VA: 0xB47
	|-EnumUInt64TypeInfo<byte>.GetData
	|
	|-RVA: 0xB48 Offset: 0xB48 VA: 0xB48
	|-EnumUInt64TypeInfo<char>.GetData
	|
	|-RVA: 0xB49 Offset: 0xB49 VA: 0xB49
	|-EnumUInt64TypeInfo<KeyValuePair<object, object>>.GetData
	|
	|-RVA: 0xB4A Offset: 0xB4A VA: 0xB4A
	|-EnumUInt64TypeInfo<DateTime>.GetData
	|
	|-RVA: 0xB4B Offset: 0xB4B VA: 0xB4B
	|-EnumUInt64TypeInfo<DateTimeOffset>.GetData
	|
	|-RVA: 0xB4C Offset: 0xB4C VA: 0xB4C
	|-EnumUInt64TypeInfo<Decimal>.GetData
	|
	|-RVA: 0xB4D Offset: 0xB4D VA: 0xB4D
	|-EnumUInt64TypeInfo<EmptyStruct>.GetData
	|
	|-RVA: 0xB4E Offset: 0xB4E VA: 0xB4E
	|-EnumUInt64TypeInfo<double>.GetData
	|
	|-RVA: 0xB4F Offset: 0xB4F VA: 0xB4F
	|-EnumUInt64TypeInfo<Guid>.GetData
	|
	|-RVA: 0xB50 Offset: 0xB50 VA: 0xB50
	|-EnumUInt64TypeInfo<short>.GetData
	|
	|-RVA: 0xB51 Offset: 0xB51 VA: 0xB51
	|-EnumUInt64TypeInfo<int>.GetData
	|
	|-RVA: 0xB52 Offset: 0xB52 VA: 0xB52
	|-EnumUInt64TypeInfo<long>.GetData
	|
	|-RVA: 0xB53 Offset: 0xB53 VA: 0xB53
	|-EnumUInt64TypeInfo<IntPtr>.GetData
	|
	|-RVA: 0x697 Offset: 0x697 VA: 0x697
	|-EnumUInt64TypeInfo<object>.GetData
	|
	|-RVA: 0xB54 Offset: 0xB54 VA: 0xB54
	|-EnumUInt64TypeInfo<sbyte>.GetData
	|
	|-RVA: 0xB55 Offset: 0xB55 VA: 0xB55
	|-EnumUInt64TypeInfo<float>.GetData
	|
	|-RVA: 0xB56 Offset: 0xB56 VA: 0xB56
	|-EnumUInt64TypeInfo<TimeSpan>.GetData
	|
	|-RVA: 0xB57 Offset: 0xB57 VA: 0xB57
	|-EnumUInt64TypeInfo<ushort>.GetData
	|
	|-RVA: 0xB58 Offset: 0xB58 VA: 0xB58
	|-EnumUInt64TypeInfo<uint>.GetData
	|
	|-RVA: 0xB59 Offset: 0xB59 VA: 0xB59
	|-EnumUInt64TypeInfo<ulong>.GetData
	|
	|-RVA: 0xB5A Offset: 0xB5A VA: 0xB5A
	|-EnumUInt64TypeInfo<UIntPtr>.GetData
	*/

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB9C Offset: 0xB9C VA: 0xB9C
	|-EnumUInt64TypeInfo<bool>..ctor
	|
	|-RVA: 0xB9D Offset: 0xB9D VA: 0xB9D
	|-EnumUInt64TypeInfo<byte>..ctor
	|
	|-RVA: 0xB9E Offset: 0xB9E VA: 0xB9E
	|-EnumUInt64TypeInfo<char>..ctor
	|
	|-RVA: 0xB9F Offset: 0xB9F VA: 0xB9F
	|-EnumUInt64TypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0xBA0 Offset: 0xBA0 VA: 0xBA0
	|-EnumUInt64TypeInfo<DateTime>..ctor
	|
	|-RVA: 0xBA1 Offset: 0xBA1 VA: 0xBA1
	|-EnumUInt64TypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0xBA2 Offset: 0xBA2 VA: 0xBA2
	|-EnumUInt64TypeInfo<Decimal>..ctor
	|
	|-RVA: 0xBA3 Offset: 0xBA3 VA: 0xBA3
	|-EnumUInt64TypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xBA4 Offset: 0xBA4 VA: 0xBA4
	|-EnumUInt64TypeInfo<double>..ctor
	|
	|-RVA: 0xBA5 Offset: 0xBA5 VA: 0xBA5
	|-EnumUInt64TypeInfo<Guid>..ctor
	|
	|-RVA: 0xBA6 Offset: 0xBA6 VA: 0xBA6
	|-EnumUInt64TypeInfo<short>..ctor
	|
	|-RVA: 0xBA7 Offset: 0xBA7 VA: 0xBA7
	|-EnumUInt64TypeInfo<int>..ctor
	|
	|-RVA: 0xBA8 Offset: 0xBA8 VA: 0xBA8
	|-EnumUInt64TypeInfo<long>..ctor
	|
	|-RVA: 0xBA9 Offset: 0xBA9 VA: 0xBA9
	|-EnumUInt64TypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7
	|-EnumUInt64TypeInfo<object>..ctor
	|
	|-RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
	|-EnumUInt64TypeInfo<sbyte>..ctor
	|
	|-RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
	|-EnumUInt64TypeInfo<float>..ctor
	|
	|-RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
	|-EnumUInt64TypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0xBAD Offset: 0xBAD VA: 0xBAD
	|-EnumUInt64TypeInfo<ushort>..ctor
	|
	|-RVA: 0xBAE Offset: 0xBAE VA: 0xBAE
	|-EnumUInt64TypeInfo<uint>..ctor
	|
	|-RVA: 0xBAF Offset: 0xBAF VA: 0xBAF
	|-EnumUInt64TypeInfo<ulong>..ctor
	|
	|-RVA: 0xBB0 Offset: 0xBB0 VA: 0xBB0
	|-EnumUInt64TypeInfo<UIntPtr>..ctor
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class StringTypeInfo : TraceLoggingTypeInfo<string> // TypeDefIndex: 1325
{
	// Methods

	// RVA: 0x59 Offset: 0x59 VA: 0x59 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x112 Offset: 0x112 VA: 0x112 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref string value) { }

	// RVA: 0x1A6 Offset: 0x1A6 VA: 0x1A6 Slot: 6
	public override object GetData(object value) { }

	// RVA: 0x325 Offset: 0x325 VA: 0x325
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class GuidTypeInfo : TraceLoggingTypeInfo<Guid> // TypeDefIndex: 1326
{
	// Methods

	// RVA: 0x49 Offset: 0x49 VA: 0x49 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xFD Offset: 0xFD VA: 0xFD Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref Guid value) { }

	// RVA: 0x312 Offset: 0x312 VA: 0x312
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class GuidArrayTypeInfo : TraceLoggingTypeInfo<Guid[]> // TypeDefIndex: 1327
{
	// Methods

	// RVA: 0x48 Offset: 0x48 VA: 0x48 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xFC Offset: 0xFC VA: 0xFC Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref Guid[] value) { }

	// RVA: 0x311 Offset: 0x311 VA: 0x311
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class DateTimeTypeInfo : TraceLoggingTypeInfo<DateTime> // TypeDefIndex: 1328
{
	// Methods

	// RVA: 0x3B Offset: 0x3B VA: 0x3B Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xE5 Offset: 0xE5 VA: 0xE5 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref DateTime value) { }

	// RVA: 0x2EF Offset: 0x2EF VA: 0x2EF
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class DateTimeOffsetTypeInfo : TraceLoggingTypeInfo<DateTimeOffset> // TypeDefIndex: 1329
{
	// Methods

	// RVA: 0x3A Offset: 0x3A VA: 0x3A Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xE4 Offset: 0xE4 VA: 0xE4 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref DateTimeOffset value) { }

	// RVA: 0x2EE Offset: 0x2EE VA: 0x2EE
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class TimeSpanTypeInfo : TraceLoggingTypeInfo<TimeSpan> // TypeDefIndex: 1330
{
	// Methods

	// RVA: 0x5A Offset: 0x5A VA: 0x5A Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0x113 Offset: 0x113 VA: 0x113 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref TimeSpan value) { }

	// RVA: 0x326 Offset: 0x326 VA: 0x326
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class DecimalTypeInfo : TraceLoggingTypeInfo<Decimal> // TypeDefIndex: 1331
{
	// Methods

	// RVA: 0x3C Offset: 0x3C VA: 0x3C Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: 0xE6 Offset: 0xE6 VA: 0xE6 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref Decimal value) { }

	// RVA: 0x2F0 Offset: 0x2F0 VA: 0x2F0
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal sealed class KeyValuePairTypeInfo<K, V> : TraceLoggingTypeInfo<KeyValuePair<K, V>> // TypeDefIndex: 1332
{
	// Fields
	private readonly TraceLoggingTypeInfo<K> keyInfo; // 0xFFFFFFFF
	private readonly TraceLoggingTypeInfo<V> valueInfo; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x137 Offset: 0x137 VA: 0x137
	|-KeyValuePairTypeInfo<object, object>.WriteMetadata
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref KeyValuePair<K, V> value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x435 Offset: 0x435 VA: 0x435
	|-KeyValuePairTypeInfo<object, object>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override object GetData(object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x698 Offset: 0x698 VA: 0x698
	|-KeyValuePairTypeInfo<object, object>.GetData
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class NullableTypeInfo<T> : TraceLoggingTypeInfo<Nullable<T>> // TypeDefIndex: 1333
{
	// Fields
	private readonly TraceLoggingTypeInfo<T> valueInfo; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1 Slot: 4
	public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: -1 Offset: -1 Slot: 7
	public override void WriteData(TraceLoggingDataCollector collector, ref Nullable<T> value) { }
}

// Namespace: System.Diagnostics.Tracing
internal static class Statics // TypeDefIndex: 1334
{
	// Fields
	public static readonly TraceLoggingDataType IntPtrType; // 0x0
	public static readonly TraceLoggingDataType UIntPtrType; // 0x4
	public static readonly TraceLoggingDataType HexIntPtrType; // 0x8

	// Methods

	// RVA: 0x60 Offset: 0x60 VA: 0x60
	public static byte[] MetadataForString(string name, int prefixSize, int suffixSize, int additionalSize) { }

	// RVA: 0x111 Offset: 0x111 VA: 0x111
	public static void EncodeTags(int tags, ref int pos, byte[] metadata) { }

	// RVA: 0x198 Offset: 0x198 VA: 0x198
	public static byte Combine(int settingValue, byte defaultValue) { }

	// RVA: 0x199 Offset: 0x199 VA: 0x199
	public static int Combine(int settingValue1, int settingValue2) { }

	// RVA: 0x324 Offset: 0x324 VA: 0x324
	public static void CheckName(string name) { }

	// RVA: 0x2C6 Offset: 0x2C6 VA: 0x2C6
	public static bool ShouldOverrideFieldName(string fieldName) { }

	// RVA: 0x19A Offset: 0x19A VA: 0x19A
	public static TraceLoggingDataType MakeDataType(TraceLoggingDataType baseType, EventFieldFormat format) { }

	// RVA: 0x19B Offset: 0x19B VA: 0x19B
	public static TraceLoggingDataType Format8(EventFieldFormat format, TraceLoggingDataType native) { }

	// RVA: 0x19C Offset: 0x19C VA: 0x19C
	public static TraceLoggingDataType Format16(EventFieldFormat format, TraceLoggingDataType native) { }

	// RVA: 0x19D Offset: 0x19D VA: 0x19D
	public static TraceLoggingDataType Format32(EventFieldFormat format, TraceLoggingDataType native) { }

	// RVA: 0x19E Offset: 0x19E VA: 0x19E
	public static TraceLoggingDataType Format64(EventFieldFormat format, TraceLoggingDataType native) { }

	// RVA: 0x19F Offset: 0x19F VA: 0x19F
	public static TraceLoggingDataType FormatPtr(EventFieldFormat format, TraceLoggingDataType native) { }

	// RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0
	public static object CreateInstance(Type type, object[] parameters) { }

	// RVA: 0x2C7 Offset: 0x2C7 VA: 0x2C7
	public static bool IsValueType(Type type) { }

	// RVA: 0x2C8 Offset: 0x2C8 VA: 0x2C8
	public static bool IsEnum(Type type) { }

	// RVA: 0x2C9 Offset: 0x2C9 VA: 0x2C9
	public static IEnumerable<PropertyInfo> GetProperties(Type type) { }

	// RVA: 0x2CA Offset: 0x2CA VA: 0x2CA
	public static MethodInfo GetGetMethod(PropertyInfo propInfo) { }

	// RVA: 0x1A1 Offset: 0x1A1 VA: 0x1A1
	public static MethodInfo GetDeclaredStaticMethod(Type declaringType, string name) { }

	// RVA: 0x1A2 Offset: 0x1A2 VA: 0x1A2
	public static bool HasCustomAttribute(PropertyInfo propInfo, Type attributeType) { }

	// RVA: -1 Offset: -1
	public static AttributeType GetCustomAttribute<AttributeType>(PropertyInfo propInfo) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD8A Offset: 0xD8A VA: 0xD8A
	|-Statics.GetCustomAttribute<EventFieldAttribute>
	|-Statics.GetCustomAttribute<object>
	*/

	// RVA: -1 Offset: -1
	public static AttributeType GetCustomAttribute<AttributeType>(Type type) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD8B Offset: 0xD8B VA: 0xD8B
	|-Statics.GetCustomAttribute<EventDataAttribute>
	|-Statics.GetCustomAttribute<object>
	|-Statics.GetCustomAttribute<CompilerGeneratedAttribute>
	*/

	// RVA: 0x2CB Offset: 0x2CB VA: 0x2CB
	public static Type[] GetGenericArguments(Type type) { }

	// RVA: 0x2CC Offset: 0x2CC VA: 0x2CC
	public static Type FindEnumerableElementType(Type type) { }

	// RVA: 0x1A3 Offset: 0x1A3 VA: 0x1A3
	public static bool IsGenericMatch(Type type, object openType) { }

	// RVA: 0x1A4 Offset: 0x1A4 VA: 0x1A4
	public static Delegate CreateDelegate(Type delegateType, MethodInfo methodInfo) { }

	// RVA: 0x1A5 Offset: 0x1A5 VA: 0x1A5
	public static TraceLoggingTypeInfo GetTypeInfoInstance(Type dataType, List<Type> recursionCheck) { }

	// RVA: -1 Offset: -1
	public static TraceLoggingTypeInfo<DataType> CreateDefaultTypeInfo<DataType>(List<Type> recursionCheck) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xE54 Offset: 0xE54 VA: 0xE54
	|-Statics.CreateDefaultTypeInfo<bool>
	|
	|-RVA: 0xE55 Offset: 0xE55 VA: 0xE55
	|-Statics.CreateDefaultTypeInfo<byte>
	|
	|-RVA: 0xE56 Offset: 0xE56 VA: 0xE56
	|-Statics.CreateDefaultTypeInfo<char>
	|
	|-RVA: 0xE57 Offset: 0xE57 VA: 0xE57
	|-Statics.CreateDefaultTypeInfo<KeyValuePair<object, object>>
	|
	|-RVA: 0xE58 Offset: 0xE58 VA: 0xE58
	|-Statics.CreateDefaultTypeInfo<DateTime>
	|
	|-RVA: 0xE59 Offset: 0xE59 VA: 0xE59
	|-Statics.CreateDefaultTypeInfo<DateTimeOffset>
	|
	|-RVA: 0xE5A Offset: 0xE5A VA: 0xE5A
	|-Statics.CreateDefaultTypeInfo<Decimal>
	|
	|-RVA: 0xE5B Offset: 0xE5B VA: 0xE5B
	|-Statics.CreateDefaultTypeInfo<EmptyStruct>
	|
	|-RVA: 0xE5C Offset: 0xE5C VA: 0xE5C
	|-Statics.CreateDefaultTypeInfo<double>
	|
	|-RVA: 0xE5D Offset: 0xE5D VA: 0xE5D
	|-Statics.CreateDefaultTypeInfo<Guid>
	|
	|-RVA: 0xE5E Offset: 0xE5E VA: 0xE5E
	|-Statics.CreateDefaultTypeInfo<short>
	|
	|-RVA: 0xE5F Offset: 0xE5F VA: 0xE5F
	|-Statics.CreateDefaultTypeInfo<int>
	|
	|-RVA: 0xE60 Offset: 0xE60 VA: 0xE60
	|-Statics.CreateDefaultTypeInfo<long>
	|
	|-RVA: 0xE61 Offset: 0xE61 VA: 0xE61
	|-Statics.CreateDefaultTypeInfo<IntPtr>
	|
	|-RVA: 0xD8C Offset: 0xD8C VA: 0xD8C
	|-Statics.CreateDefaultTypeInfo<object>
	|
	|-RVA: 0xE62 Offset: 0xE62 VA: 0xE62
	|-Statics.CreateDefaultTypeInfo<sbyte>
	|
	|-RVA: 0xE63 Offset: 0xE63 VA: 0xE63
	|-Statics.CreateDefaultTypeInfo<float>
	|
	|-RVA: 0xE64 Offset: 0xE64 VA: 0xE64
	|-Statics.CreateDefaultTypeInfo<TimeSpan>
	|
	|-RVA: 0xE65 Offset: 0xE65 VA: 0xE65
	|-Statics.CreateDefaultTypeInfo<ushort>
	|
	|-RVA: 0xE66 Offset: 0xE66 VA: 0xE66
	|-Statics.CreateDefaultTypeInfo<uint>
	|
	|-RVA: 0xE67 Offset: 0xE67 VA: 0xE67
	|-Statics.CreateDefaultTypeInfo<ulong>
	|
	|-RVA: 0xE68 Offset: 0xE68 VA: 0xE68
	|-Statics.CreateDefaultTypeInfo<UIntPtr>
	*/

	// RVA: 0xE79 Offset: 0xE79 VA: 0xE79
	private static void .cctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal class TraceLoggingDataCollector // TypeDefIndex: 1335
{
	// Fields
	internal static readonly TraceLoggingDataCollector Instance; // 0xFFFFFFFF

	// Methods

	// RVA: 0x328 Offset: 0x328 VA: 0x328
	private void .ctor() { }

	// RVA: 0x2CE Offset: 0x2CE VA: 0x2CE
	public int BeginBufferedArray() { }

	// RVA: 0x115 Offset: 0x115 VA: 0x115
	public void EndBufferedArray(int bookmark, int count) { }

	// RVA: 0x13C Offset: 0x13C VA: 0x13C
	public void AddScalar(bool value) { }

	// RVA: 0x13D Offset: 0x13D VA: 0x13D
	public void AddScalar(sbyte value) { }

	// RVA: 0x13E Offset: 0x13E VA: 0x13E
	public void AddScalar(byte value) { }

	// RVA: 0x13F Offset: 0x13F VA: 0x13F
	public void AddScalar(short value) { }

	// RVA: 0x140 Offset: 0x140 VA: 0x140
	public void AddScalar(ushort value) { }

	// RVA: 0x141 Offset: 0x141 VA: 0x141
	public void AddScalar(int value) { }

	// RVA: 0x142 Offset: 0x142 VA: 0x142
	public void AddScalar(uint value) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public void AddScalar(long value) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public void AddScalar(ulong value) { }

	// RVA: 0x143 Offset: 0x143 VA: 0x143
	public void AddScalar(IntPtr value) { }

	// RVA: 0x144 Offset: 0x144 VA: 0x144
	public void AddScalar(UIntPtr value) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public void AddScalar(float value) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public void AddScalar(double value) { }

	// RVA: 0x145 Offset: 0x145 VA: 0x145
	public void AddScalar(char value) { }

	// RVA: 0x146 Offset: 0x146 VA: 0x146
	public void AddScalar(Guid value) { }

	// RVA: 0x147 Offset: 0x147 VA: 0x147
	public void AddBinary(string value) { }

	// RVA: 0x148 Offset: 0x148 VA: 0x148
	public void AddBinary(byte[] value) { }

	// RVA: 0x149 Offset: 0x149 VA: 0x149
	public void AddArray(bool[] value) { }

	// RVA: 0x14A Offset: 0x14A VA: 0x14A
	public void AddArray(sbyte[] value) { }

	// RVA: 0x14B Offset: 0x14B VA: 0x14B
	public void AddArray(short[] value) { }

	// RVA: 0x14C Offset: 0x14C VA: 0x14C
	public void AddArray(ushort[] value) { }

	// RVA: 0x14D Offset: 0x14D VA: 0x14D
	public void AddArray(int[] value) { }

	// RVA: 0x14E Offset: 0x14E VA: 0x14E
	public void AddArray(uint[] value) { }

	// RVA: 0x14F Offset: 0x14F VA: 0x14F
	public void AddArray(long[] value) { }

	// RVA: 0x150 Offset: 0x150 VA: 0x150
	public void AddArray(ulong[] value) { }

	// RVA: 0x151 Offset: 0x151 VA: 0x151
	public void AddArray(IntPtr[] value) { }

	// RVA: 0x152 Offset: 0x152 VA: 0x152
	public void AddArray(UIntPtr[] value) { }

	// RVA: 0x153 Offset: 0x153 VA: 0x153
	public void AddArray(float[] value) { }

	// RVA: 0x154 Offset: 0x154 VA: 0x154
	public void AddArray(double[] value) { }

	// RVA: 0x155 Offset: 0x155 VA: 0x155
	public void AddArray(char[] value) { }

	// RVA: 0x156 Offset: 0x156 VA: 0x156
	public void AddArray(Guid[] value) { }

	// RVA: 0xE7B Offset: 0xE7B VA: 0xE7B
	private static void .cctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal enum TraceLoggingDataType // TypeDefIndex: 1336
{
	// Fields
	public int value__; // 0x0
	public const TraceLoggingDataType Nil = 0;
	public const TraceLoggingDataType Utf16String = 1;
	public const TraceLoggingDataType MbcsString = 2;
	public const TraceLoggingDataType Int8 = 3;
	public const TraceLoggingDataType UInt8 = 4;
	public const TraceLoggingDataType Int16 = 5;
	public const TraceLoggingDataType UInt16 = 6;
	public const TraceLoggingDataType Int32 = 7;
	public const TraceLoggingDataType UInt32 = 8;
	public const TraceLoggingDataType Int64 = 9;
	public const TraceLoggingDataType UInt64 = 10;
	public const TraceLoggingDataType Float = 11;
	public const TraceLoggingDataType Double = 12;
	public const TraceLoggingDataType Boolean32 = 13;
	public const TraceLoggingDataType Binary = 14;
	public const TraceLoggingDataType Guid = 15;
	public const TraceLoggingDataType FileTime = 17;
	public const TraceLoggingDataType SystemTime = 18;
	public const TraceLoggingDataType HexInt32 = 20;
	public const TraceLoggingDataType HexInt64 = 21;
	public const TraceLoggingDataType CountedUtf16String = 22;
	public const TraceLoggingDataType CountedMbcsString = 23;
	public const TraceLoggingDataType Struct = 24;
	public const TraceLoggingDataType Char16 = 518;
	public const TraceLoggingDataType Char8 = 516;
	public const TraceLoggingDataType Boolean8 = 772;
	public const TraceLoggingDataType HexInt8 = 1028;
	public const TraceLoggingDataType HexInt16 = 1030;
	public const TraceLoggingDataType Utf16Xml = 2817;
	public const TraceLoggingDataType MbcsXml = 2818;
	public const TraceLoggingDataType CountedUtf16Xml = 2838;
	public const TraceLoggingDataType CountedMbcsXml = 2839;
	public const TraceLoggingDataType Utf16Json = 3073;
	public const TraceLoggingDataType MbcsJson = 3074;
	public const TraceLoggingDataType CountedUtf16Json = 3094;
	public const TraceLoggingDataType CountedMbcsJson = 3095;
	public const TraceLoggingDataType HResult = 3847;
}

// Namespace: System.Diagnostics.Tracing
public class EventSource : IDisposable // TypeDefIndex: 1337
{
	// Fields
	private byte[] providerMetadata; // 0x8
	private string m_name; // 0xC
	internal int m_id; // 0x10
	private Guid m_guid; // 0x14
	internal EventSource.EventMetadata[] m_eventData; // 0x24
	private byte[] m_rawManifest; // 0x28
	private EventHandler<EventCommandEventArgs> m_eventCommandExecuted; // 0x2C
	private EventSourceSettings m_config; // 0x30
	private bool m_eventSourceEnabled; // 0x34
	internal EventLevel m_level; // 0x38
	internal EventKeywords m_matchAnyKeyword; // 0x40
	internal EventDispatcher m_Dispatchers; // 0x48
	private EventSource.OverideEventProvider m_provider; // 0x4C
	private bool m_completelyInited; // 0x50
	private Exception m_constructionException; // 0x54
	private byte m_outOfBandMessageCount; // 0x58
	private EventCommandEventArgs m_deferredCommands; // 0x5C
	private string[] m_traits; // 0x60
	internal static uint s_currentPid; // 0x0
	[ThreadStaticAttribute] // RVA: 0x5B2 Offset: 0x5B2 VA: 0x5B2
	private static byte m_EventSourceExceptionRecurenceCount; // 0x80000000
	private SessionMask m_curLiveSessions; // 0x64
	private EtwSession[] m_etwSessionIdMap; // 0x68
	private List<EtwSession> m_legacySessions; // 0x6C
	internal long m_keywordTriggers; // 0x70
	internal SessionMask m_activityFilteringForETWEnabled; // 0x78
	internal static Action<Guid> s_activityDying; // 0x4
	private ActivityTracker m_activityTracker; // 0x7C
	private static readonly byte[] namespaceBytes; // 0x8
	private static readonly Guid AspNetEventSourceGuid; // 0xC

	// Properties
	public string Name { get; }
	public Guid Guid { get; }
	public static Guid CurrentThreadActivityId { get; }
	internal static Guid InternalCurrentThreadActivityId { get; }
	internal static Guid FallbackActivityId { get; }
	private bool IsDisposed { get; }
	private bool ThrowOnEventWriteErrors { get; }
	private bool SelfDescribingEvents { get; }

	// Methods

	// RVA: 0xD Offset: 0xD VA: 0xD
	private void WriteMultiMerge(string eventName, ref EventSourceOptions options, TraceLoggingEventTypes eventTypes, Guid* activityID, Guid* childActivityID, object[] values) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private void WriteMultiMergeInner(string eventName, ref EventSourceOptions options, TraceLoggingEventTypes eventTypes, Guid* activityID, Guid* childActivityID, object[] values) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	internal void WriteMultiMerge(string eventName, ref EventSourceOptions options, TraceLoggingEventTypes eventTypes, Guid* activityID, Guid* childActivityID, EventSource.EventData* data) { }

	[NonEventAttribute] // RVA: 0x79B Offset: 0x79B VA: 0x79B
	[ReliabilityContractAttribute] // RVA: 0x79B Offset: 0x79B VA: 0x79B
	// RVA: 0xEE Offset: 0xEE VA: 0xEE
	private void WriteCleanup(GCHandle* pPins, int cPins) { }

	// RVA: 0x301 Offset: 0x301 VA: 0x301
	private void InitializeProviderMetadata() { }

	// RVA: 0x18B Offset: 0x18B VA: 0x18B
	private static int AddValueToMetaData(List<byte> metaData, string value) { }

	// RVA: 0x2AD Offset: 0x2AD VA: 0x2AD
	private static int HexDigit(char c) { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	private NameInfo UpdateDescriptor(string name, TraceLoggingEventTypes eventInfo, ref EventSourceOptions options, out EventDescriptor descriptor) { }

	// RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
	public string get_Name() { }

	// RVA: 0x11E Offset: 0x11E VA: 0x11E
	public Guid get_Guid() { }

	// RVA: 0x2AF Offset: 0x2AF VA: 0x2AF
	public bool IsEnabled() { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public bool IsEnabled(EventLevel level, EventKeywords keywords) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel) { }

	// RVA: 0x11F Offset: 0x11F VA: 0x11F
	public static Guid GetGuid(Type eventSourceType) { }

	// RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
	public static string GetName(Type eventSourceType) { }

	// RVA: 0x302 Offset: 0x302 VA: 0x302
	public static void SetCurrentThreadActivityId(Guid activityId) { }

	// RVA: 0x303 Offset: 0x303 VA: 0x303
	public static Guid get_CurrentThreadActivityId() { }

	// RVA: 0x304 Offset: 0x304 VA: 0x304
	internal static Guid get_InternalCurrentThreadActivityId() { }

	// RVA: 0x305 Offset: 0x305 VA: 0x305
	internal static Guid get_FallbackActivityId() { }

	// RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1 Slot: 3
	public override string ToString() { }

	// RVA: 0x306 Offset: 0x306 VA: 0x306
	protected void .ctor() { }

	// RVA: 0x120 Offset: 0x120 VA: 0x120
	protected void .ctor(EventSourceSettings settings) { }

	// RVA: 0xEF Offset: 0xEF VA: 0xEF
	protected void .ctor(EventSourceSettings settings, string[] traits) { }

	// RVA: 0x121 Offset: 0x121 VA: 0x121 Slot: 5
	protected virtual void OnEventCommand(EventCommandEventArgs command) { }

	// RVA: 0xF0 Offset: 0xF0 VA: 0xF0
	protected void WriteEvent(int eventId, int arg1) { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40
	protected void WriteEvent(int eventId, string arg1, string arg2) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	protected void WriteEvent(int eventId, string arg1, string arg2, string arg3) { }

	[CLSCompliantAttribute] // RVA: 0x79C Offset: 0x79C VA: 0x79C
	// RVA: 0x41 Offset: 0x41 VA: 0x41
	protected void WriteEventCore(int eventId, int eventDataCount, EventSource.EventData* data) { }

	[CLSCompliantAttribute] // RVA: 0x79D Offset: 0x79D VA: 0x79D
	// RVA: 0x32 Offset: 0x32 VA: 0x32
	protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid* relatedActivityId, int eventDataCount, EventSource.EventData* data) { }

	// RVA: 0xF1 Offset: 0xF1 VA: 0xF1
	protected void WriteEvent(int eventId, object[] args) { }

	// RVA: 0x307 Offset: 0x307 VA: 0x307 Slot: 4
	public void Dispose() { }

	// RVA: 0x122 Offset: 0x122 VA: 0x122 Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x308 Offset: 0x308 VA: 0x308 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42
	internal void WriteStringToListener(EventListener listener, string msg, SessionMask m) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	private void WriteEventRaw(string eventName, ref EventDescriptor eventDescriptor, Guid* activityID, Guid* relatedActivityID, int dataCount, IntPtr data) { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	private void Initialize(Guid eventSourceGuid, string eventSourceName, string[] traits) { }

	// RVA: 0x18C Offset: 0x18C VA: 0x18C
	private static string GetName(Type eventSourceType, EventManifestOptions flags) { }

	// RVA: 0x123 Offset: 0x123 VA: 0x123
	private static Guid GenerateGuidFromName(string name) { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B
	private object DecodeObject(int eventId, int parameterId, ref EventSource.EventData* data) { }

	// RVA: 0x18D Offset: 0x18D VA: 0x18D
	private EventDispatcher GetDispatcher(EventListener listener) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	private void WriteEventVarargs(int eventId, Guid* childActivityID, object[] args) { }

	// RVA: 0x85B Offset: 0x85B VA: 0x85B
	private object[] SerializeEventArgs(int eventId, object[] args) { }

	// RVA: 0xF2 Offset: 0xF2 VA: 0xF2
	private void LogEventArgsMismatches(ParameterInfo[] infos, object[] args) { }

	// RVA: 0x18E Offset: 0x18E VA: 0x18E
	private int GetParamLengthIncludingByteArray(ParameterInfo[] parameters) { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	private void WriteToAllListeners(int eventId, Guid* childActivityID, int eventDataCount, EventSource.EventData* data) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45
	private void WriteToAllListeners(int eventId, Guid* childActivityID, object[] args) { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46
	private void DispatchToAllListeners(int eventId, Guid* childActivityID, EventWrittenEventArgs eventCallbackArgs) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private void WriteEventString(EventLevel level, long keywords, string msgString) { }

	// RVA: 0xF3 Offset: 0xF3 VA: 0xF3
	private void WriteStringToAllListeners(string eventName, string msg) { }

	// RVA: 0x85C Offset: 0x85C VA: 0x85C
	private SessionMask GetEtwSessionMask(int eventId, Guid* childActivityID) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private bool IsEnabledByDefault(int eventNum, bool enable, EventLevel currentLevel, EventKeywords currentMatchAnyKeyword) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private bool IsEnabledCommon(bool enabled, EventLevel currentLevel, EventKeywords currentMatchAnyKeyword, EventLevel eventLevel, EventKeywords eventKeywords, EventChannel eventChannel) { }

	// RVA: 0xF4 Offset: 0xF4 VA: 0xF4
	private void ThrowEventSourceException(string eventName, Exception innerEx) { }

	// RVA: 0xF5 Offset: 0xF5 VA: 0xF5
	private void ValidateEventOpcodeForTransfer(ref EventSource.EventMetadata eventData, string eventName) { }

	// RVA: 0x18F Offset: 0x18F VA: 0x18F
	internal static EventOpcode GetOpcodeWithDefault(EventOpcode opcode, string eventName) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void SendCommand(EventListener listener, int perEventSourceSessionId, int etwSessionId, EventCommand command, bool enable, EventLevel level, EventKeywords matchAnyKeyword, IDictionary<string, string> commandArguments) { }

	// RVA: 0x124 Offset: 0x124 VA: 0x124
	internal void DoCommand(EventCommandEventArgs commandArgs) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	internal void UpdateEtwSession(int sessionIdBit, int etwSessionId, bool bEnable, string activityFilters, bool participateInSampling) { }

	// RVA: 0x5C Offset: 0x5C VA: 0x5C
	internal static bool ParseCommandArgs(IDictionary<string, string> commandArguments, out bool participateInSampling, out string activityFilters, out int sessionIdBit) { }

	// RVA: 0x125 Offset: 0x125 VA: 0x125
	internal void UpdateKwdTriggers(bool enable) { }

	// RVA: 0x5D Offset: 0x5D VA: 0x5D
	internal bool EnableEventForDispatcher(EventDispatcher dispatcher, int eventId, bool value) { }

	// RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2
	private bool AnyEventEnabled() { }

	// RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3
	private bool get_IsDisposed() { }

	// RVA: 0x309 Offset: 0x309 VA: 0x309
	private void EnsureDescriptorsInitialized() { }

	// RVA: 0x190 Offset: 0x190 VA: 0x190
	private bool SendManifest(byte[] rawManifest) { }

	// RVA: 0x85D Offset: 0x85D VA: 0x85D
	internal static Attribute GetCustomAttributeHelper(MemberInfo member, Type attributeType, EventManifestOptions flags = 0) { }

	// RVA: 0x191 Offset: 0x191 VA: 0x191
	private static bool AttributeTypeNamesMatch(Type attributeType, Type reflectedAttributeType) { }

	// RVA: 0x85E Offset: 0x85E VA: 0x85E
	private static Type GetEventSourceBaseType(Type eventSourceType, bool allowEventSourceOverride, bool reflectionOnly) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E
	private static byte[] CreateManifestAndDescriptors(Type eventSourceType, string eventSourceDllName, EventSource source, EventManifestOptions flags = 0) { }

	// RVA: 0x2B4 Offset: 0x2B4 VA: 0x2B4
	private static bool RemoveFirstArgIfRelatedActivityId(ref ParameterInfo[] args) { }

	// RVA: 0xF6 Offset: 0xF6 VA: 0xF6
	private static void AddProviderEnumKind(ManifestBuilder manifest, FieldInfo staticField, string providerEnumKind) { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34
	private static void AddEventDescriptor(ref EventSource.EventMetadata[] eventData, string eventName, EventAttribute eventAttribute, ParameterInfo[] eventParameters, bool hasRelatedActivityID) { }

	// RVA: 0x30A Offset: 0x30A VA: 0x30A
	private static void TrimEventDescriptors(ref EventSource.EventMetadata[] eventData) { }

	// RVA: 0x126 Offset: 0x126 VA: 0x126
	internal void AddListener(EventListener listener) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private static void DebugCheckEvent(ref Dictionary<string, string> eventsByName, EventSource.EventMetadata[] eventData, MethodInfo method, EventAttribute eventAttribute, ManifestBuilder manifest, EventManifestOptions options) { }

	// RVA: 0x2B5 Offset: 0x2B5 VA: 0x2B5
	private static int GetHelperCallFirstArg(MethodInfo method) { }

	// RVA: 0xF7 Offset: 0xF7 VA: 0xF7
	internal void ReportOutOfBandMessage(string msg, bool flush) { }

	// RVA: 0x192 Offset: 0x192 VA: 0x192
	private EventSourceSettings ValidateSettings(EventSourceSettings settings) { }

	// RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6
	private bool get_ThrowOnEventWriteErrors() { }

	// RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
	private bool get_SelfDescribingEvents() { }

	// RVA: 0xF8 Offset: 0xF8 VA: 0xF8
	private void ReportActivitySamplingInfo(EventListener listener, SessionMask sessions) { }

	// RVA: 0xE77 Offset: 0xE77 VA: 0xE77
	private static void .cctor() { }
}

// Namespace: 
protected internal struct EventSource.EventData // TypeDefIndex: 1338
{
	// Fields
	internal long m_Ptr; // 0x0
	internal int m_Size; // 0x8
	internal int m_Reserved; // 0xC

	// Properties
	public IntPtr DataPointer { get; set; }
	public int Size { set; }

	// Methods

	// RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
	public IntPtr get_DataPointer() { }

	// RVA: 0x127 Offset: 0x127 VA: 0x127
	public void set_DataPointer(IntPtr value) { }

	// RVA: 0x128 Offset: 0x128 VA: 0x128
	public void set_Size(int value) { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47
	internal void SetMetadata(byte* pointer, int size, int reserved) { }
}

// Namespace: 
private struct EventSource.Sha1ForNonSecretPurposes // TypeDefIndex: 1339
{
	// Fields
	private long length; // 0x0
	private uint[] w; // 0x8
	private int pos; // 0xC

	// Methods

	// RVA: 0x30B Offset: 0x30B VA: 0x30B
	public void Start() { }

	// RVA: 0x12A Offset: 0x12A VA: 0x12A
	public void Append(byte input) { }

	// RVA: 0x12B Offset: 0x12B VA: 0x12B
	public void Append(byte[] input) { }

	// RVA: 0x12C Offset: 0x12C VA: 0x12C
	public void Finish(byte[] output) { }

	// RVA: 0x30C Offset: 0x30C VA: 0x30C
	private void Drain() { }

	// RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
	private static uint Rol1(uint input) { }

	// RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
	private static uint Rol5(uint input) { }

	// RVA: 0x2BB Offset: 0x2BB VA: 0x2BB
	private static uint Rol30(uint input) { }
}

// Namespace: 
private class EventSource.OverideEventProvider : EventProvider // TypeDefIndex: 1340
{
	// Fields
	private EventSource m_eventSource; // 0x4C

	// Methods

	// RVA: 0x129 Offset: 0x129 VA: 0x129
	public void .ctor(EventSource eventSource) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35 Slot: 6
	protected override void OnControllerCommand(ControllerCommand command, IDictionary<string, string> arguments, int perEventSourceSessionId, int etwSessionId) { }
}

// Namespace: 
internal struct EventSource.EventMetadata // TypeDefIndex: 1341
{
	// Fields
	public EventDescriptor Descriptor; // 0x0
	public EventTags Tags; // 0x10
	public bool EnabledForAnyListener; // 0x14
	public bool EnabledForETW; // 0x15
	public bool HasRelatedActivityID; // 0x16
	public byte TriggersActivityTracking; // 0x17
	public string Name; // 0x18
	public string Message; // 0x1C
	public ParameterInfo[] Parameters; // 0x20
	public TraceLoggingEventTypes TraceLoggingEventTypes; // 0x24
	public EventActivityOptions ActivityOptions; // 0x28
}

// Namespace: System.Diagnostics.Tracing
[FlagsAttribute] // RVA: 0x510 Offset: 0x510 VA: 0x510
public enum EventTags // TypeDefIndex: 1342
{
	// Fields
	public int value__; // 0x0
	public const EventTags None = 0;
}

// Namespace: System.Diagnostics.Tracing
internal class TraceLoggingEventTypes // TypeDefIndex: 1343
{
	// Fields
	internal readonly TraceLoggingTypeInfo[] typeInfos; // 0x8
	internal readonly string name; // 0xC
	internal readonly EventTags tags; // 0x10
	internal readonly byte level; // 0x14
	internal readonly byte opcode; // 0x15
	internal readonly EventKeywords keywords; // 0x18
	internal readonly byte[] typeMetadata; // 0x20
	internal readonly int scratchSize; // 0x24
	internal readonly int dataCount; // 0x28
	internal readonly int pinCount; // 0x2C
	private ConcurrentSet<KeyValuePair<string, EventTags>, NameInfo> nameInfos; // 0x30

	// Properties
	internal string Name { get; }
	internal EventTags Tags { get; }

	// Methods

	// RVA: 0x5C Offset: 0x5C VA: 0x5C
	internal void .ctor(string name, EventTags tags, Type[] types) { }

	// RVA: 0x5D Offset: 0x5D VA: 0x5D
	internal void .ctor(string name, EventTags tags, ParameterInfo[] paramInfos) { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E
	private void .ctor(EventTags tags, string defaultName, TraceLoggingTypeInfo[] typeInfos) { }

	// RVA: 0x2CF Offset: 0x2CF VA: 0x2CF
	internal string get_Name() { }

	// RVA: 0x2D0 Offset: 0x2D0 VA: 0x2D0
	internal EventTags get_Tags() { }

	// RVA: 0x864 Offset: 0x864 VA: 0x864
	internal NameInfo GetNameInfo(string name, EventTags tags) { }

	// RVA: 0x1A7 Offset: 0x1A7 VA: 0x1A7
	private TraceLoggingTypeInfo[] MakeArray(ParameterInfo[] paramInfos) { }

	// RVA: 0x2D1 Offset: 0x2D1 VA: 0x2D1
	private static TraceLoggingTypeInfo[] MakeArray(Type[] types) { }
}

// Namespace: System.Diagnostics.Tracing
internal class TraceLoggingMetadataCollector // TypeDefIndex: 1344
{
	// Fields
	private readonly TraceLoggingMetadataCollector.Impl impl; // 0x8
	private readonly FieldMetadata currentGroup; // 0xC
	private int bufferedArrayFieldCount; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0x5B3 Offset: 0x5B3 VA: 0x5B3
	private EventFieldTags <Tags>k__BackingField; // 0x14

	// Properties
	internal EventFieldTags Tags { get; set; }
	internal int ScratchSize { get; }
	internal int DataCount { get; }
	internal int PinCount { get; }
	private bool BeginningBufferedArray { get; }

	// Methods

	// RVA: 0x329 Offset: 0x329 VA: 0x329
	internal void .ctor() { }

	// RVA: 0x116 Offset: 0x116 VA: 0x116
	private void .ctor(TraceLoggingMetadataCollector other, FieldMetadata group) { }

	[CompilerGeneratedAttribute] // RVA: 0x79E Offset: 0x79E VA: 0x79E
	// RVA: 0x2D2 Offset: 0x2D2 VA: 0x2D2
	internal EventFieldTags get_Tags() { }

	[CompilerGeneratedAttribute] // RVA: 0x79F Offset: 0x79F VA: 0x79F
	// RVA: 0x157 Offset: 0x157 VA: 0x157
	internal void set_Tags(EventFieldTags value) { }

	// RVA: 0x2D3 Offset: 0x2D3 VA: 0x2D3
	internal int get_ScratchSize() { }

	// RVA: 0x2D4 Offset: 0x2D4 VA: 0x2D4
	internal int get_DataCount() { }

	// RVA: 0x2D5 Offset: 0x2D5 VA: 0x2D5
	internal int get_PinCount() { }

	// RVA: 0x2D6 Offset: 0x2D6 VA: 0x2D6
	private bool get_BeginningBufferedArray() { }

	// RVA: 0x1A8 Offset: 0x1A8 VA: 0x1A8
	public TraceLoggingMetadataCollector AddGroup(string name) { }

	// RVA: 0x117 Offset: 0x117 VA: 0x117
	public void AddScalar(string name, TraceLoggingDataType type) { }

	// RVA: 0x118 Offset: 0x118 VA: 0x118
	public void AddBinary(string name, TraceLoggingDataType type) { }

	// RVA: 0x119 Offset: 0x119 VA: 0x119
	public void AddArray(string name, TraceLoggingDataType type) { }

	// RVA: 0x32A Offset: 0x32A VA: 0x32A
	public void BeginBufferedArray() { }

	// RVA: 0x32B Offset: 0x32B VA: 0x32B
	public void EndBufferedArray() { }

	// RVA: 0x2D7 Offset: 0x2D7 VA: 0x2D7
	internal byte[] GetMetadata() { }

	// RVA: 0x158 Offset: 0x158 VA: 0x158
	private void AddField(FieldMetadata fieldMetadata) { }
}

// Namespace: 
private class TraceLoggingMetadataCollector.Impl // TypeDefIndex: 1345
{
	// Fields
	internal readonly List<FieldMetadata> fields; // 0x8
	internal short scratchSize; // 0xC
	internal sbyte dataCount; // 0xE
	internal sbyte pinCount; // 0xF
	private int bufferNesting; // 0x10
	private bool scalar; // 0x14

	// Methods

	// RVA: 0x159 Offset: 0x159 VA: 0x159
	public void AddScalar(int size) { }

	// RVA: 0x32C Offset: 0x32C VA: 0x32C
	public void AddNonscalar() { }

	// RVA: 0x32D Offset: 0x32D VA: 0x32D
	public void BeginBuffered() { }

	// RVA: 0x32E Offset: 0x32E VA: 0x32E
	public void EndBuffered() { }

	// RVA: 0x1A9 Offset: 0x1A9 VA: 0x1A9
	public int Encode(byte[] metadata) { }

	// RVA: 0x32F Offset: 0x32F VA: 0x32F
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
internal abstract class TraceLoggingTypeInfo // TypeDefIndex: 1346
{
	// Fields
	private readonly string name; // 0x8
	private readonly EventKeywords keywords; // 0x10
	private readonly EventLevel level; // 0x18
	private readonly EventOpcode opcode; // 0x1C
	private readonly EventTags tags; // 0x20
	private readonly Type dataType; // 0x24

	// Properties
	public string Name { get; }
	public EventLevel Level { get; }
	public EventOpcode Opcode { get; }
	public EventKeywords Keywords { get; }
	public EventTags Tags { get; }
	internal Type DataType { get; }

	// Methods

	// RVA: 0x15A Offset: 0x15A VA: 0x15A
	internal void .ctor(Type dataType) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(Type dataType, string name, EventLevel level, EventOpcode opcode, EventKeywords keywords, EventTags tags) { }

	// RVA: 0x2D8 Offset: 0x2D8 VA: 0x2D8
	public string get_Name() { }

	// RVA: 0x2D9 Offset: 0x2D9 VA: 0x2D9
	public EventLevel get_Level() { }

	// RVA: 0x2DA Offset: 0x2DA VA: 0x2DA
	public EventOpcode get_Opcode() { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39
	public EventKeywords get_Keywords() { }

	// RVA: 0x2DB Offset: 0x2DB VA: 0x2DB
	public EventTags get_Tags() { }

	// RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
	internal Type get_DataType() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void WriteObjectData(TraceLoggingDataCollector collector, object value) { }

	// RVA: 0x1AA Offset: 0x1AA VA: 0x1AA Slot: 6
	public virtual object GetData(object value) { }
}

// Namespace: System.Diagnostics.Tracing
internal abstract class TraceLoggingTypeInfo<DataType> : TraceLoggingTypeInfo // TypeDefIndex: 1347
{
	// Fields
	private static TraceLoggingTypeInfo<DataType> instance; // 0xFFFFFFFF

	// Properties
	public static TraceLoggingTypeInfo<DataType> Instance { get; }

	// Methods

	// RVA: -1 Offset: -1
	protected void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x911 Offset: 0x911 VA: 0x911
	|-TraceLoggingTypeInfo<bool>..ctor
	|
	|-RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8
	|-TraceLoggingTypeInfo<bool[]>..ctor
	|-TraceLoggingTypeInfo<byte[]>..ctor
	|-TraceLoggingTypeInfo<char[]>..ctor
	|-TraceLoggingTypeInfo<double[]>..ctor
	|-TraceLoggingTypeInfo<Guid[]>..ctor
	|-TraceLoggingTypeInfo<short[]>..ctor
	|-TraceLoggingTypeInfo<int[]>..ctor
	|-TraceLoggingTypeInfo<long[]>..ctor
	|-TraceLoggingTypeInfo<IntPtr[]>..ctor
	|-TraceLoggingTypeInfo<object>..ctor
	|-TraceLoggingTypeInfo<sbyte[]>..ctor
	|-TraceLoggingTypeInfo<float[]>..ctor
	|-TraceLoggingTypeInfo<string>..ctor
	|-TraceLoggingTypeInfo<ushort[]>..ctor
	|-TraceLoggingTypeInfo<uint[]>..ctor
	|-TraceLoggingTypeInfo<ulong[]>..ctor
	|-TraceLoggingTypeInfo<UIntPtr[]>..ctor
	|
	|-RVA: 0x912 Offset: 0x912 VA: 0x912
	|-TraceLoggingTypeInfo<byte>..ctor
	|
	|-RVA: 0x913 Offset: 0x913 VA: 0x913
	|-TraceLoggingTypeInfo<char>..ctor
	|
	|-RVA: 0xBC6 Offset: 0xBC6 VA: 0xBC6
	|-TraceLoggingTypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x915 Offset: 0x915 VA: 0x915
	|-TraceLoggingTypeInfo<DateTime>..ctor
	|
	|-RVA: 0x914 Offset: 0x914 VA: 0x914
	|-TraceLoggingTypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0x916 Offset: 0x916 VA: 0x916
	|-TraceLoggingTypeInfo<Decimal>..ctor
	|
	|-RVA: 0xBC7 Offset: 0xBC7 VA: 0xBC7
	|-TraceLoggingTypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0x917 Offset: 0x917 VA: 0x917
	|-TraceLoggingTypeInfo<double>..ctor
	|
	|-RVA: 0x91A Offset: 0x91A VA: 0x91A
	|-TraceLoggingTypeInfo<Guid>..ctor
	|
	|-RVA: 0x91B Offset: 0x91B VA: 0x91B
	|-TraceLoggingTypeInfo<short>..ctor
	|
	|-RVA: 0x91C Offset: 0x91C VA: 0x91C
	|-TraceLoggingTypeInfo<int>..ctor
	|
	|-RVA: 0x91D Offset: 0x91D VA: 0x91D
	|-TraceLoggingTypeInfo<long>..ctor
	|
	|-RVA: 0x91E Offset: 0x91E VA: 0x91E
	|-TraceLoggingTypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x926 Offset: 0x926 VA: 0x926
	|-TraceLoggingTypeInfo<sbyte>..ctor
	|
	|-RVA: 0x927 Offset: 0x927 VA: 0x927
	|-TraceLoggingTypeInfo<float>..ctor
	|
	|-RVA: 0x928 Offset: 0x928 VA: 0x928
	|-TraceLoggingTypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0x929 Offset: 0x929 VA: 0x929
	|-TraceLoggingTypeInfo<ushort>..ctor
	|
	|-RVA: 0x92A Offset: 0x92A VA: 0x92A
	|-TraceLoggingTypeInfo<uint>..ctor
	|
	|-RVA: 0x92B Offset: 0x92B VA: 0x92B
	|-TraceLoggingTypeInfo<ulong>..ctor
	|
	|-RVA: 0x92C Offset: 0x92C VA: 0x92C
	|-TraceLoggingTypeInfo<UIntPtr>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void .ctor(string name, EventLevel level, EventOpcode opcode, EventKeywords keywords, EventTags tags) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2 Offset: 0x2 VA: 0x2
	|-TraceLoggingTypeInfo<bool>..ctor
	|
	|-RVA: 0x3 Offset: 0x3 VA: 0x3
	|-TraceLoggingTypeInfo<byte>..ctor
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-TraceLoggingTypeInfo<char>..ctor
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-TraceLoggingTypeInfo<KeyValuePair<object, object>>..ctor
	|
	|-RVA: 0x6 Offset: 0x6 VA: 0x6
	|-TraceLoggingTypeInfo<DateTime>..ctor
	|
	|-RVA: 0x7 Offset: 0x7 VA: 0x7
	|-TraceLoggingTypeInfo<DateTimeOffset>..ctor
	|
	|-RVA: 0x8 Offset: 0x8 VA: 0x8
	|-TraceLoggingTypeInfo<Decimal>..ctor
	|
	|-RVA: 0x9 Offset: 0x9 VA: 0x9
	|-TraceLoggingTypeInfo<EmptyStruct>..ctor
	|
	|-RVA: 0xA Offset: 0xA VA: 0xA
	|-TraceLoggingTypeInfo<double>..ctor
	|
	|-RVA: 0xB Offset: 0xB VA: 0xB
	|-TraceLoggingTypeInfo<Guid>..ctor
	|
	|-RVA: 0xC Offset: 0xC VA: 0xC
	|-TraceLoggingTypeInfo<short>..ctor
	|
	|-RVA: 0xD Offset: 0xD VA: 0xD
	|-TraceLoggingTypeInfo<int>..ctor
	|
	|-RVA: 0xE Offset: 0xE VA: 0xE
	|-TraceLoggingTypeInfo<long>..ctor
	|
	|-RVA: 0xF Offset: 0xF VA: 0xF
	|-TraceLoggingTypeInfo<IntPtr>..ctor
	|
	|-RVA: 0x1 Offset: 0x1 VA: 0x1
	|-TraceLoggingTypeInfo<object>..ctor
	|
	|-RVA: 0x10 Offset: 0x10 VA: 0x10
	|-TraceLoggingTypeInfo<sbyte>..ctor
	|
	|-RVA: 0x11 Offset: 0x11 VA: 0x11
	|-TraceLoggingTypeInfo<float>..ctor
	|
	|-RVA: 0x12 Offset: 0x12 VA: 0x12
	|-TraceLoggingTypeInfo<TimeSpan>..ctor
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-TraceLoggingTypeInfo<ushort>..ctor
	|
	|-RVA: 0x14 Offset: 0x14 VA: 0x14
	|-TraceLoggingTypeInfo<uint>..ctor
	|
	|-RVA: 0x15 Offset: 0x15 VA: 0x15
	|-TraceLoggingTypeInfo<ulong>..ctor
	|
	|-RVA: 0x16 Offset: 0x16 VA: 0x16
	|-TraceLoggingTypeInfo<UIntPtr>..ctor
	*/

	// RVA: -1 Offset: -1
	public static TraceLoggingTypeInfo<DataType> get_Instance() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x316 Offset: 0x316 VA: 0x316
	|-TraceLoggingTypeInfo<bool>.get_Instance
	|
	|-RVA: 0x318 Offset: 0x318 VA: 0x318
	|-TraceLoggingTypeInfo<byte>.get_Instance
	|
	|-RVA: 0x31A Offset: 0x31A VA: 0x31A
	|-TraceLoggingTypeInfo<char>.get_Instance
	|
	|-RVA: 0x31C Offset: 0x31C VA: 0x31C
	|-TraceLoggingTypeInfo<KeyValuePair<object, object>>.get_Instance
	|
	|-RVA: 0x31E Offset: 0x31E VA: 0x31E
	|-TraceLoggingTypeInfo<DateTime>.get_Instance
	|
	|-RVA: 0x320 Offset: 0x320 VA: 0x320
	|-TraceLoggingTypeInfo<DateTimeOffset>.get_Instance
	|
	|-RVA: 0x322 Offset: 0x322 VA: 0x322
	|-TraceLoggingTypeInfo<Decimal>.get_Instance
	|
	|-RVA: 0x324 Offset: 0x324 VA: 0x324
	|-TraceLoggingTypeInfo<EmptyStruct>.get_Instance
	|
	|-RVA: 0x326 Offset: 0x326 VA: 0x326
	|-TraceLoggingTypeInfo<double>.get_Instance
	|
	|-RVA: 0x328 Offset: 0x328 VA: 0x328
	|-TraceLoggingTypeInfo<Guid>.get_Instance
	|
	|-RVA: 0x32A Offset: 0x32A VA: 0x32A
	|-TraceLoggingTypeInfo<short>.get_Instance
	|
	|-RVA: 0x2B2 Offset: 0x2B2 VA: 0x2B2
	|-TraceLoggingTypeInfo<int>.get_Instance
	|
	|-RVA: 0x2B3 Offset: 0x2B3 VA: 0x2B3
	|-TraceLoggingTypeInfo<long>.get_Instance
	|
	|-RVA: 0x32E Offset: 0x32E VA: 0x32E
	|-TraceLoggingTypeInfo<IntPtr>.get_Instance
	|
	|-RVA: 0x2AE Offset: 0x2AE VA: 0x2AE
	|-TraceLoggingTypeInfo<object>.get_Instance
	|-TraceLoggingTypeInfo<string>.get_Instance
	|
	|-RVA: 0x330 Offset: 0x330 VA: 0x330
	|-TraceLoggingTypeInfo<sbyte>.get_Instance
	|
	|-RVA: 0x332 Offset: 0x332 VA: 0x332
	|-TraceLoggingTypeInfo<float>.get_Instance
	|
	|-RVA: 0x334 Offset: 0x334 VA: 0x334
	|-TraceLoggingTypeInfo<TimeSpan>.get_Instance
	|
	|-RVA: 0x336 Offset: 0x336 VA: 0x336
	|-TraceLoggingTypeInfo<ushort>.get_Instance
	|
	|-RVA: 0x338 Offset: 0x338 VA: 0x338
	|-TraceLoggingTypeInfo<uint>.get_Instance
	|
	|-RVA: 0x33A Offset: 0x33A VA: 0x33A
	|-TraceLoggingTypeInfo<ulong>.get_Instance
	|
	|-RVA: 0x33C Offset: 0x33C VA: 0x33C
	|-TraceLoggingTypeInfo<UIntPtr>.get_Instance
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void WriteData(TraceLoggingDataCollector collector, ref DataType value) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-TraceLoggingTypeInfo<object>.WriteData
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override void WriteObjectData(TraceLoggingDataCollector collector, object value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x963 Offset: 0x963 VA: 0x963
	|-TraceLoggingTypeInfo<bool>.WriteObjectData
	|
	|-RVA: 0x436 Offset: 0x436 VA: 0x436
	|-TraceLoggingTypeInfo<bool[]>.WriteObjectData
	|-TraceLoggingTypeInfo<byte[]>.WriteObjectData
	|-TraceLoggingTypeInfo<char[]>.WriteObjectData
	|-TraceLoggingTypeInfo<double[]>.WriteObjectData
	|-TraceLoggingTypeInfo<Guid[]>.WriteObjectData
	|-TraceLoggingTypeInfo<short[]>.WriteObjectData
	|-TraceLoggingTypeInfo<int[]>.WriteObjectData
	|-TraceLoggingTypeInfo<long[]>.WriteObjectData
	|-TraceLoggingTypeInfo<IntPtr[]>.WriteObjectData
	|-TraceLoggingTypeInfo<object>.WriteObjectData
	|-TraceLoggingTypeInfo<sbyte[]>.WriteObjectData
	|-TraceLoggingTypeInfo<float[]>.WriteObjectData
	|-TraceLoggingTypeInfo<string>.WriteObjectData
	|-TraceLoggingTypeInfo<ushort[]>.WriteObjectData
	|-TraceLoggingTypeInfo<uint[]>.WriteObjectData
	|-TraceLoggingTypeInfo<ulong[]>.WriteObjectData
	|-TraceLoggingTypeInfo<UIntPtr[]>.WriteObjectData
	|
	|-RVA: 0x964 Offset: 0x964 VA: 0x964
	|-TraceLoggingTypeInfo<byte>.WriteObjectData
	|
	|-RVA: 0x965 Offset: 0x965 VA: 0x965
	|-TraceLoggingTypeInfo<char>.WriteObjectData
	|
	|-RVA: 0x966 Offset: 0x966 VA: 0x966
	|-TraceLoggingTypeInfo<KeyValuePair<object, object>>.WriteObjectData
	|
	|-RVA: 0x967 Offset: 0x967 VA: 0x967
	|-TraceLoggingTypeInfo<DateTime>.WriteObjectData
	|
	|-RVA: 0x968 Offset: 0x968 VA: 0x968
	|-TraceLoggingTypeInfo<DateTimeOffset>.WriteObjectData
	|
	|-RVA: 0x969 Offset: 0x969 VA: 0x969
	|-TraceLoggingTypeInfo<Decimal>.WriteObjectData
	|
	|-RVA: 0x96A Offset: 0x96A VA: 0x96A
	|-TraceLoggingTypeInfo<EmptyStruct>.WriteObjectData
	|
	|-RVA: 0x96B Offset: 0x96B VA: 0x96B
	|-TraceLoggingTypeInfo<double>.WriteObjectData
	|
	|-RVA: 0x96C Offset: 0x96C VA: 0x96C
	|-TraceLoggingTypeInfo<Guid>.WriteObjectData
	|
	|-RVA: 0x96D Offset: 0x96D VA: 0x96D
	|-TraceLoggingTypeInfo<short>.WriteObjectData
	|
	|-RVA: 0x96E Offset: 0x96E VA: 0x96E
	|-TraceLoggingTypeInfo<int>.WriteObjectData
	|
	|-RVA: 0x96F Offset: 0x96F VA: 0x96F
	|-TraceLoggingTypeInfo<long>.WriteObjectData
	|
	|-RVA: 0x970 Offset: 0x970 VA: 0x970
	|-TraceLoggingTypeInfo<IntPtr>.WriteObjectData
	|
	|-RVA: 0x971 Offset: 0x971 VA: 0x971
	|-TraceLoggingTypeInfo<sbyte>.WriteObjectData
	|
	|-RVA: 0x972 Offset: 0x972 VA: 0x972
	|-TraceLoggingTypeInfo<float>.WriteObjectData
	|
	|-RVA: 0x973 Offset: 0x973 VA: 0x973
	|-TraceLoggingTypeInfo<TimeSpan>.WriteObjectData
	|
	|-RVA: 0x974 Offset: 0x974 VA: 0x974
	|-TraceLoggingTypeInfo<ushort>.WriteObjectData
	|
	|-RVA: 0x975 Offset: 0x975 VA: 0x975
	|-TraceLoggingTypeInfo<uint>.WriteObjectData
	|
	|-RVA: 0x976 Offset: 0x976 VA: 0x976
	|-TraceLoggingTypeInfo<ulong>.WriteObjectData
	|
	|-RVA: 0x977 Offset: 0x977 VA: 0x977
	|-TraceLoggingTypeInfo<UIntPtr>.WriteObjectData
	*/

	// RVA: -1 Offset: -1
	internal static TraceLoggingTypeInfo<DataType> GetInstance(List<Type> recursionCheck) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1256 Offset: 0x1256 VA: 0x1256
	|-TraceLoggingTypeInfo<bool>.GetInstance
	|
	|-RVA: 0x1257 Offset: 0x1257 VA: 0x1257
	|-TraceLoggingTypeInfo<byte>.GetInstance
	|
	|-RVA: 0x1258 Offset: 0x1258 VA: 0x1258
	|-TraceLoggingTypeInfo<char>.GetInstance
	|
	|-RVA: 0x1259 Offset: 0x1259 VA: 0x1259
	|-TraceLoggingTypeInfo<KeyValuePair<object, object>>.GetInstance
	|
	|-RVA: 0x125A Offset: 0x125A VA: 0x125A
	|-TraceLoggingTypeInfo<DateTime>.GetInstance
	|
	|-RVA: 0x125B Offset: 0x125B VA: 0x125B
	|-TraceLoggingTypeInfo<DateTimeOffset>.GetInstance
	|
	|-RVA: 0x125C Offset: 0x125C VA: 0x125C
	|-TraceLoggingTypeInfo<Decimal>.GetInstance
	|
	|-RVA: 0x125D Offset: 0x125D VA: 0x125D
	|-TraceLoggingTypeInfo<EmptyStruct>.GetInstance
	|
	|-RVA: 0x125E Offset: 0x125E VA: 0x125E
	|-TraceLoggingTypeInfo<double>.GetInstance
	|
	|-RVA: 0x125F Offset: 0x125F VA: 0x125F
	|-TraceLoggingTypeInfo<Guid>.GetInstance
	|
	|-RVA: 0x1260 Offset: 0x1260 VA: 0x1260
	|-TraceLoggingTypeInfo<short>.GetInstance
	|
	|-RVA: 0x1261 Offset: 0x1261 VA: 0x1261
	|-TraceLoggingTypeInfo<int>.GetInstance
	|
	|-RVA: 0x1262 Offset: 0x1262 VA: 0x1262
	|-TraceLoggingTypeInfo<long>.GetInstance
	|
	|-RVA: 0x1263 Offset: 0x1263 VA: 0x1263
	|-TraceLoggingTypeInfo<IntPtr>.GetInstance
	|
	|-RVA: 0xD8D Offset: 0xD8D VA: 0xD8D
	|-TraceLoggingTypeInfo<object>.GetInstance
	|
	|-RVA: 0x1264 Offset: 0x1264 VA: 0x1264
	|-TraceLoggingTypeInfo<sbyte>.GetInstance
	|
	|-RVA: 0x1265 Offset: 0x1265 VA: 0x1265
	|-TraceLoggingTypeInfo<float>.GetInstance
	|
	|-RVA: 0x1266 Offset: 0x1266 VA: 0x1266
	|-TraceLoggingTypeInfo<TimeSpan>.GetInstance
	|
	|-RVA: 0x1267 Offset: 0x1267 VA: 0x1267
	|-TraceLoggingTypeInfo<ushort>.GetInstance
	|
	|-RVA: 0x1268 Offset: 0x1268 VA: 0x1268
	|-TraceLoggingTypeInfo<uint>.GetInstance
	|
	|-RVA: 0x1269 Offset: 0x1269 VA: 0x1269
	|-TraceLoggingTypeInfo<ulong>.GetInstance
	|
	|-RVA: 0x126A Offset: 0x126A VA: 0x126A
	|-TraceLoggingTypeInfo<UIntPtr>.GetInstance
	*/

	// RVA: -1 Offset: -1
	private static TraceLoggingTypeInfo<DataType> InitInstance() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x317 Offset: 0x317 VA: 0x317
	|-TraceLoggingTypeInfo<bool>.InitInstance
	|
	|-RVA: 0x319 Offset: 0x319 VA: 0x319
	|-TraceLoggingTypeInfo<byte>.InitInstance
	|
	|-RVA: 0x31B Offset: 0x31B VA: 0x31B
	|-TraceLoggingTypeInfo<char>.InitInstance
	|
	|-RVA: 0x31D Offset: 0x31D VA: 0x31D
	|-TraceLoggingTypeInfo<KeyValuePair<object, object>>.InitInstance
	|
	|-RVA: 0x31F Offset: 0x31F VA: 0x31F
	|-TraceLoggingTypeInfo<DateTime>.InitInstance
	|
	|-RVA: 0x321 Offset: 0x321 VA: 0x321
	|-TraceLoggingTypeInfo<DateTimeOffset>.InitInstance
	|
	|-RVA: 0x323 Offset: 0x323 VA: 0x323
	|-TraceLoggingTypeInfo<Decimal>.InitInstance
	|
	|-RVA: 0x325 Offset: 0x325 VA: 0x325
	|-TraceLoggingTypeInfo<EmptyStruct>.InitInstance
	|
	|-RVA: 0x327 Offset: 0x327 VA: 0x327
	|-TraceLoggingTypeInfo<double>.InitInstance
	|
	|-RVA: 0x329 Offset: 0x329 VA: 0x329
	|-TraceLoggingTypeInfo<Guid>.InitInstance
	|
	|-RVA: 0x32B Offset: 0x32B VA: 0x32B
	|-TraceLoggingTypeInfo<short>.InitInstance
	|
	|-RVA: 0x32C Offset: 0x32C VA: 0x32C
	|-TraceLoggingTypeInfo<int>.InitInstance
	|
	|-RVA: 0x32D Offset: 0x32D VA: 0x32D
	|-TraceLoggingTypeInfo<long>.InitInstance
	|
	|-RVA: 0x32F Offset: 0x32F VA: 0x32F
	|-TraceLoggingTypeInfo<IntPtr>.InitInstance
	|
	|-RVA: 0x2AF Offset: 0x2AF VA: 0x2AF
	|-TraceLoggingTypeInfo<object>.InitInstance
	|
	|-RVA: 0x331 Offset: 0x331 VA: 0x331
	|-TraceLoggingTypeInfo<sbyte>.InitInstance
	|
	|-RVA: 0x333 Offset: 0x333 VA: 0x333
	|-TraceLoggingTypeInfo<float>.InitInstance
	|
	|-RVA: 0x335 Offset: 0x335 VA: 0x335
	|-TraceLoggingTypeInfo<TimeSpan>.InitInstance
	|
	|-RVA: 0x337 Offset: 0x337 VA: 0x337
	|-TraceLoggingTypeInfo<ushort>.InitInstance
	|
	|-RVA: 0x339 Offset: 0x339 VA: 0x339
	|-TraceLoggingTypeInfo<uint>.InitInstance
	|
	|-RVA: 0x33B Offset: 0x33B VA: 0x33B
	|-TraceLoggingTypeInfo<ulong>.InitInstance
	|
	|-RVA: 0x33D Offset: 0x33D VA: 0x33D
	|-TraceLoggingTypeInfo<UIntPtr>.InitInstance
	*/
}

// Namespace: System.Diagnostics.Tracing
internal sealed class TypeAnalysis // TypeDefIndex: 1348
{
	// Fields
	internal readonly PropertyAnalysis[] properties; // 0x8
	internal readonly string name; // 0xC
	internal readonly EventKeywords keywords; // 0x10
	internal readonly EventLevel level; // 0x18
	internal readonly EventOpcode opcode; // 0x1C
	internal readonly EventTags tags; // 0x20

	// Methods

	// RVA: 0x5F Offset: 0x5F VA: 0x5F
	public void .ctor(Type dataType, EventDataAttribute eventAttrib, List<Type> recursionCheck) { }
}

// Namespace: System.Diagnostics.Tracing
internal class ActivityTracker // TypeDefIndex: 1349
{
	// Fields
	private AsyncLocal<ActivityTracker.ActivityInfo> m_current; // 0x8
	private bool m_checkedForEnable; // 0xC
	private static ActivityTracker s_activityTrackerInstance; // 0x0
	private static long m_nextId; // 0x8

	// Properties
	public static ActivityTracker Instance { get; }

	// Methods

	// RVA: 0xB Offset: 0xB VA: 0xB
	public void OnStart(string providerName, string activityName, int task, ref Guid activityId, ref Guid relatedActivityId, EventActivityOptions options) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	public void OnStop(string providerName, string activityName, int task, ref Guid activityId) { }

	// RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0
	public void Enable() { }

	// RVA: 0x19D Offset: 0x19D VA: 0x19D
	public static ActivityTracker get_Instance() { }

	// RVA: 0x859 Offset: 0x859 VA: 0x859
	private ActivityTracker.ActivityInfo FindActiveActivity(string name, ActivityTracker.ActivityInfo startLocation) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57
	private string NormalizeActivityName(string providerName, string activityName, int task) { }

	// RVA: 0x105 Offset: 0x105 VA: 0x105
	private void ActivityChanging(AsyncLocalValueChangedArgs<ActivityTracker.ActivityInfo> args) { }

	// RVA: 0x2E1 Offset: 0x2E1 VA: 0x2E1
	public void .ctor() { }

	// RVA: 0xE71 Offset: 0xE71 VA: 0xE71
	private static void .cctor() { }
}

// Namespace: 
private class ActivityTracker.ActivityInfo // TypeDefIndex: 1350
{
	// Fields
	internal readonly string m_name; // 0x8
	private readonly long m_uniqueId; // 0x10
	internal readonly Guid m_guid; // 0x18
	internal readonly int m_activityPathGuidOffset; // 0x28
	internal readonly int m_level; // 0x2C
	internal readonly EventActivityOptions m_eventOptions; // 0x30
	internal long m_lastChildID; // 0x38
	internal int m_stopped; // 0x40
	internal readonly ActivityTracker.ActivityInfo m_creator; // 0x44
	internal readonly Guid m_activityIdToRestore; // 0x48

	// Properties
	public Guid ActivityId { get; }

	// Methods

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(string name, long uniqueId, ActivityTracker.ActivityInfo creator, Guid activityIDToRestore, EventActivityOptions options) { }

	// RVA: 0x106 Offset: 0x106 VA: 0x106
	public Guid get_ActivityId() { }

	// RVA: 0x281 Offset: 0x281 VA: 0x281
	public static string Path(ActivityTracker.ActivityInfo activityInfo) { }

	// RVA: 0x282 Offset: 0x282 VA: 0x282 Slot: 3
	public override string ToString() { }

	// RVA: 0x283 Offset: 0x283 VA: 0x283
	public static string LiveActivities(ActivityTracker.ActivityInfo list) { }

	// RVA: 0x284 Offset: 0x284 VA: 0x284
	public bool CanBeOrphan() { }

	// RVA: 0xD7 Offset: 0xD7 VA: 0xD7
	private void CreateActivityPathGuid(out Guid idRet, out int activityPathGuidOffset) { }

	// RVA: 0x107 Offset: 0x107 VA: 0x107
	private void CreateOverflowGuid(Guid* outPtr) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58
	private static int AddIdToGuid(Guid* outPtr, int whereToAddId, uint id, bool overflow = False) { }

	// RVA: 0xD8 Offset: 0xD8 VA: 0xD8
	private static void WriteNibble(ref byte* ptr, byte* endPtr, uint value) { }
}

// Namespace: System.Diagnostics.Tracing
[EventSourceAttribute] // RVA: 0x511 Offset: 0x511 VA: 0x511
internal class TplEtwProvider : EventSource // TypeDefIndex: 1351
{
	// Fields
	public static TplEtwProvider Log; // 0xFFFFFFFF

	// Properties
	public bool Debug { get; }

	// Methods

	// RVA: 0x2CD Offset: 0x2CD VA: 0x2CD
	public bool get_Debug() { }

	// RVA: 0x114 Offset: 0x114 VA: 0x114
	public void DebugFacilityMessage(string Facility, string Message) { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B
	public void DebugFacilityMessage1(string Facility, string Message, string Arg) { }

	// RVA: 0x13B Offset: 0x13B VA: 0x13B
	public void SetActivityId(Guid Id) { }

	// RVA: 0x327 Offset: 0x327 VA: 0x327
	public void .ctor() { }

	// RVA: 0xE7A Offset: 0xE7A VA: 0xE7A
	private static void .cctor() { }
}

// Namespace: 
public class TplEtwProvider.Keywords // TypeDefIndex: 1352
{
	// Fields
	public const EventKeywords Debug = 1;
}

// Namespace: System.Diagnostics.Tracing
[FlagsAttribute] // RVA: 0x512 Offset: 0x512 VA: 0x512
public enum EventActivityOptions // TypeDefIndex: 1353
{
	// Fields
	public int value__; // 0x0
	public const EventActivityOptions None = 0;
	public const EventActivityOptions Disable = 2;
	public const EventActivityOptions Recursive = 4;
	public const EventActivityOptions Detachable = 8;
}

// Namespace: System.Diagnostics.Tracing
internal struct EventDescriptor // TypeDefIndex: 1354
{
	// Fields
	private int m_traceloggingId; // 0x0
	private ushort m_id; // 0x0
	private byte m_version; // 0x2
	private byte m_channel; // 0x3
	private byte m_level; // 0x4
	private byte m_opcode; // 0x5
	private ushort m_task; // 0x6
	private long m_keywords; // 0x8

	// Properties
	public int EventId { get; }
	public byte Version { get; }
	public byte Channel { get; }
	public byte Level { get; }
	public byte Opcode { get; }
	public int Task { get; }
	public long Keywords { get; }

	// Methods

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(int traceloggingId, byte level, byte opcode, long keywords) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(int id, byte version, byte channel, byte level, byte opcode, int task, long keywords) { }

	// RVA: 0x296 Offset: 0x296 VA: 0x296
	public int get_EventId() { }

	// RVA: 0x297 Offset: 0x297 VA: 0x297
	public byte get_Version() { }

	// RVA: 0x298 Offset: 0x298 VA: 0x298
	public byte get_Channel() { }

	// RVA: 0x299 Offset: 0x299 VA: 0x299
	public byte get_Level() { }

	// RVA: 0x29A Offset: 0x29A VA: 0x29A
	public byte get_Opcode() { }

	// RVA: 0x29B Offset: 0x29B VA: 0x29B
	public int get_Task() { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	public long get_Keywords() { }

	// RVA: 0x184 Offset: 0x184 VA: 0x184 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x29C Offset: 0x29C VA: 0x29C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x185 Offset: 0x185 VA: 0x185
	public bool Equals(EventDescriptor other) { }
}

// Namespace: System.Diagnostics.Tracing
internal enum ControllerCommand // TypeDefIndex: 1355
{
	// Fields
	public int value__; // 0x0
	public const ControllerCommand Update = 0;
	public const ControllerCommand SendManifest = -1;
	public const ControllerCommand Enable = -2;
	public const ControllerCommand Disable = -3;
}

// Namespace: System.Diagnostics.Tracing
internal class EventProvider : IDisposable // TypeDefIndex: 1356
{
	// Fields
	private static bool m_setInformationMissing; // 0x0
	private UnsafeNativeMethods.ManifestEtw.EtwEnableCallback m_etwCallback; // 0x8
	private GCHandle m_thisGCHandle; // 0xC
	private long m_regHandle; // 0x10
	private byte m_level; // 0x18
	private long m_anyKeywordMask; // 0x20
	private long m_allKeywordMask; // 0x28
	private List<EventProvider.SessionInfo> m_liveSessions; // 0x30
	private bool m_enabled; // 0x34
	private Guid m_providerId; // 0x38
	internal bool m_disposed; // 0x48
	[ThreadStaticAttribute] // RVA: 0x5B4 Offset: 0x5B4 VA: 0x5B4
	private static EventProvider.WriteEventErrorCode s_returnCode; // 0x80000000
	private static int[] nibblebits; // 0x4

	// Properties
	protected EventLevel Level { get; }
	protected EventKeywords MatchAnyKeyword { get; }

	// Methods

	// RVA: 0x2FB Offset: 0x2FB VA: 0x2FB
	internal void .ctor() { }

	// RVA: 0x11A Offset: 0x11A VA: 0x11A
	internal void Register(Guid providerGuid) { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59
	internal int SetInformation(UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS eventInfoClass, void* data, int dataSize) { }

	// RVA: 0x2FC Offset: 0x2FC VA: 0x2FC Slot: 4
	public void Dispose() { }

	// RVA: 0x11B Offset: 0x11B VA: 0x11B Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2FD Offset: 0x2FD VA: 0x2FD Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2FE Offset: 0x2FE VA: 0x2FE
	private void Deregister() { }

	[EventProvider.MonoPInvokeCallbackAttribute] // RVA: 0x7A0 Offset: 0x7A0 VA: 0x7A0
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static void EtwEnableCallBack(in Guid sourceId, [In] int controlCode, [In] byte setLevel, [In] long anyKeyword, [In] long allKeyword, [In] UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData, [In] void* callbackContext) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private void EtwEnableCallBackImpl([In] int controlCode, [In] byte setLevel, [In] long anyKeyword, [In] long allKeyword, [In] UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData) { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30 Slot: 6
	protected virtual void OnControllerCommand(ControllerCommand command, IDictionary<string, string> arguments, int sessionId, int etwSessionId) { }

	// RVA: 0x2A7 Offset: 0x2A7 VA: 0x2A7
	protected EventLevel get_Level() { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	protected EventKeywords get_MatchAnyKeyword() { }

	// RVA: 0x189 Offset: 0x189 VA: 0x189
	private static int FindNull(byte[] buffer, int idx) { }

	// RVA: 0x2A8 Offset: 0x2A8 VA: 0x2A8
	private List<Tuple<EventProvider.SessionInfo, bool>> GetSessions() { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private static void GetSessionInfoCallback(int etwSessionId, long matchAllKeywords, ref List<EventProvider.SessionInfo> sessionList) { }

	// RVA: 0x11C Offset: 0x11C VA: 0x11C
	private void GetSessionInfo(Action<int, long> action) { }

	// RVA: 0x18A Offset: 0x18A VA: 0x18A
	private static int IndexOfSessionInList(List<EventProvider.SessionInfo> sessions, int etwSessionId) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	private bool GetDataFromController(int etwSessionId, UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData, out ControllerCommand command, out byte[] data, out int dataStart) { }

	// RVA: 0x2A9 Offset: 0x2A9 VA: 0x2A9
	public bool IsEnabled() { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public bool IsEnabled(byte level, long keywords) { }

	// RVA: 0x19F Offset: 0x19F VA: 0x19F
	public static EventProvider.WriteEventErrorCode GetLastWriteEventError() { }

	// RVA: 0x2FF Offset: 0x2FF VA: 0x2FF
	private static void SetLastError(int error) { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A
	private static object EncodeObject(ref object data, ref EventProvider.EventData* dataDescriptor, ref byte* dataBuffer, ref uint totalEventSize) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	internal bool WriteEvent(ref EventDescriptor eventDescriptor, Guid* activityID, Guid* childActivityID, object[] eventPayload) { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	protected internal bool WriteEvent(ref EventDescriptor eventDescriptor, Guid* activityID, Guid* childActivityID, int dataCount, IntPtr data) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	internal bool WriteEventRaw(ref EventDescriptor eventDescriptor, Guid* activityID, Guid* relatedActivityID, int dataCount, IntPtr data) { }

	// RVA: 0x2AA Offset: 0x2AA VA: 0x2AA
	private uint EventUnregister() { }

	// RVA: 0x2AB Offset: 0x2AB VA: 0x2AB
	private static int bitcount(uint n) { }

	// RVA: 0x2AC Offset: 0x2AC VA: 0x2AC
	private static int bitindex(uint n) { }

	// RVA: 0xE76 Offset: 0xE76 VA: 0xE76
	private static void .cctor() { }
}

// Namespace: 
public struct EventProvider.EventData // TypeDefIndex: 1357
{
	// Fields
	internal ulong Ptr; // 0x0
	internal uint Size; // 0x8
	internal uint Reserved; // 0xC
}

// Namespace: 
public struct EventProvider.SessionInfo // TypeDefIndex: 1358
{
	// Fields
	internal int sessionIdBit; // 0x0
	internal int etwSessionId; // 0x4

	// Methods

	// RVA: 0xED Offset: 0xED VA: 0xED
	internal void .ctor(int sessionIdBit_, int etwSessionId_) { }
}

// Namespace: 
public enum EventProvider.WriteEventErrorCode // TypeDefIndex: 1359
{
	// Fields
	public int value__; // 0x0
	public const EventProvider.WriteEventErrorCode NoError = 0;
	public const EventProvider.WriteEventErrorCode NoFreeBuffers = 1;
	public const EventProvider.WriteEventErrorCode EventTooBig = 2;
	public const EventProvider.WriteEventErrorCode NullInput = 3;
	public const EventProvider.WriteEventErrorCode TooManyArgs = 4;
	public const EventProvider.WriteEventErrorCode Other = 5;
}

// Namespace: 
[AttributeUsageAttribute] // RVA: 0x513 Offset: 0x513 VA: 0x513
private sealed class EventProvider.MonoPInvokeCallbackAttribute : Attribute // TypeDefIndex: 1360
{
	// Methods

	// RVA: 0x11D Offset: 0x11D VA: 0x11D
	public void .ctor(Type t) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x514 Offset: 0x514 VA: 0x514
private sealed class EventProvider.<>c__DisplayClass44_0 // TypeDefIndex: 1361
{
	// Fields
	public List<EventProvider.SessionInfo> liveSessionList; // 0x8

	// Methods

	// RVA: 0x300 Offset: 0x300 VA: 0x300
	public void .ctor() { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	internal void <GetSessions>b__0(int etwSessionId, long matchAllKeywords) { }
}

// Namespace: System.Diagnostics.Tracing
[FlagsAttribute] // RVA: 0x515 Offset: 0x515 VA: 0x515
public enum EventSourceSettings // TypeDefIndex: 1362
{
	// Fields
	public int value__; // 0x0
	public const EventSourceSettings Default = 0;
	public const EventSourceSettings ThrowOnEventWriteErrors = 1;
	public const EventSourceSettings EtwManifestEventFormat = 4;
	public const EventSourceSettings EtwSelfDescribingEventFormat = 8;
}

// Namespace: System.Diagnostics.Tracing
public class EventListener : IDisposable // TypeDefIndex: 1363
{
	// Fields
	private static readonly object s_EventSourceCreatedLock; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x5B5 Offset: 0x5B5 VA: 0x5B5
	private EventHandler<EventSourceCreatedEventArgs> _EventSourceCreated; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x5B6 Offset: 0x5B6 VA: 0x5B6
	private EventHandler<EventWrittenEventArgs> EventWritten; // 0xC
	internal EventListener m_Next; // 0x10
	internal ActivityFilter m_activityFilter; // 0x14
	internal static EventListener s_Listeners; // 0x4
	internal static List<WeakReference> s_EventSources; // 0x8
	private static bool s_CreatingListener; // 0xC
	private static bool s_EventSourceShutdownRegistered; // 0xD

	// Properties
	internal static object EventListenersLock { get; }

	// Methods

	// RVA: 0x2F6 Offset: 0x2F6 VA: 0x2F6 Slot: 5
	public virtual void Dispose() { }

	// RVA: 0x114 Offset: 0x114 VA: 0x114 Slot: 6
	protected internal virtual void OnEventSourceCreated(EventSource eventSource) { }

	// RVA: 0x115 Offset: 0x115 VA: 0x115 Slot: 7
	protected internal virtual void OnEventWritten(EventWrittenEventArgs eventData) { }

	// RVA: 0x2F7 Offset: 0x2F7 VA: 0x2F7
	internal static void AddEventSource(EventSource newEventSource) { }

	// RVA: 0x116 Offset: 0x116 VA: 0x116
	private static void DisposeOnShutdown(object sender, EventArgs e) { }

	// RVA: 0x2F8 Offset: 0x2F8 VA: 0x2F8
	private static void RemoveReferencesToListenerInEventSources(EventListener listenerToRemove) { }

	// RVA: 0x19E Offset: 0x19E VA: 0x19E
	internal static object get_EventListenersLock() { }

	// RVA: 0xE75 Offset: 0xE75 VA: 0xE75
	private static void .cctor() { }
}

// Namespace: System.Diagnostics.Tracing
public class EventCommandEventArgs : EventArgs // TypeDefIndex: 1364
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5B7 Offset: 0x5B7 VA: 0x5B7
	private EventCommand <Command>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x5B8 Offset: 0x5B8 VA: 0x5B8
	private IDictionary<string, string> <Arguments>k__BackingField; // 0xC
	internal EventSource eventSource; // 0x10
	internal EventDispatcher dispatcher; // 0x14
	internal EventListener listener; // 0x18
	internal int perEventSourceSessionId; // 0x1C
	internal int etwSessionId; // 0x20
	internal bool enable; // 0x24
	internal EventLevel level; // 0x28
	internal EventKeywords matchAnyKeyword; // 0x30
	internal EventCommandEventArgs nextCommand; // 0x38

	// Properties
	public EventCommand Command { get; set; }
	public IDictionary<string, string> Arguments { get; set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x7A1 Offset: 0x7A1 VA: 0x7A1
	// RVA: 0x290 Offset: 0x290 VA: 0x290
	public EventCommand get_Command() { }

	[CompilerGeneratedAttribute] // RVA: 0x7A2 Offset: 0x7A2 VA: 0x7A2
	// RVA: 0x112 Offset: 0x112 VA: 0x112
	internal void set_Command(EventCommand value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7A3 Offset: 0x7A3 VA: 0x7A3
	// RVA: 0x291 Offset: 0x291 VA: 0x291
	public IDictionary<string, string> get_Arguments() { }

	[CompilerGeneratedAttribute] // RVA: 0x7A4 Offset: 0x7A4 VA: 0x7A4
	// RVA: 0x113 Offset: 0x113 VA: 0x113
	internal void set_Arguments(IDictionary<string, string> value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal void .ctor(EventCommand command, IDictionary<string, string> arguments, EventSource eventSource, EventListener listener, int perEventSourceSessionId, int etwSessionId, bool enable, EventLevel level, EventKeywords matchAnyKeyword) { }
}

// Namespace: System.Diagnostics.Tracing
public class EventSourceCreatedEventArgs : EventArgs // TypeDefIndex: 1365
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5B9 Offset: 0x5B9 VA: 0x5B9
	private EventSource <EventSource>k__BackingField; // 0x8

	// Properties
	internal EventSource EventSource { set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x7A5 Offset: 0x7A5 VA: 0x7A5
	// RVA: 0x12F Offset: 0x12F VA: 0x12F
	internal void set_EventSource(EventSource value) { }

	// RVA: 0x30E Offset: 0x30E VA: 0x30E
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
public class EventWrittenEventArgs : EventArgs // TypeDefIndex: 1366
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5BA Offset: 0x5BA VA: 0x5BA
	private int <EventId>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x5BB Offset: 0x5BB VA: 0x5BB
	private Guid <RelatedActivityId>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x5BC Offset: 0x5BC VA: 0x5BC
	private ReadOnlyCollection<object> <Payload>k__BackingField; // 0x1C
	private string m_message; // 0x20
	private string m_eventName; // 0x24
	private EventSource m_eventSource; // 0x28
	private ReadOnlyCollection<string> m_payloadNames; // 0x2C

	// Properties
	internal string EventName { set; }
	internal int EventId { set; }
	internal Guid RelatedActivityId { set; }
	internal ReadOnlyCollection<object> Payload { set; }
	internal ReadOnlyCollection<string> PayloadNames { set; }
	internal string Message { set; }

	// Methods

	// RVA: 0x133 Offset: 0x133 VA: 0x133
	internal void set_EventName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7A6 Offset: 0x7A6 VA: 0x7A6
	// RVA: 0x134 Offset: 0x134 VA: 0x134
	internal void set_EventId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7A7 Offset: 0x7A7 VA: 0x7A7
	// RVA: 0x135 Offset: 0x135 VA: 0x135
	internal void set_RelatedActivityId(Guid value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7A8 Offset: 0x7A8 VA: 0x7A8
	// RVA: 0x136 Offset: 0x136 VA: 0x136
	internal void set_Payload(ReadOnlyCollection<object> value) { }

	// RVA: 0x137 Offset: 0x137 VA: 0x137
	internal void set_PayloadNames(ReadOnlyCollection<string> value) { }

	// RVA: 0x138 Offset: 0x138 VA: 0x138
	internal void set_Message(string value) { }

	// RVA: 0x139 Offset: 0x139 VA: 0x139
	internal void .ctor(EventSource eventSource) { }
}

// Namespace: System.Diagnostics.Tracing
[AttributeUsageAttribute] // RVA: 0x516 Offset: 0x516 VA: 0x516
public sealed class EventSourceAttribute : Attribute // TypeDefIndex: 1367
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5BD Offset: 0x5BD VA: 0x5BD
	private string <Name>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x5BE Offset: 0x5BE VA: 0x5BE
	private string <Guid>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x5BF Offset: 0x5BF VA: 0x5BF
	private string <LocalizationResources>k__BackingField; // 0x10

	// Properties
	public string Name { get; set; }
	public string Guid { get; set; }
	public string LocalizationResources { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0x7A9 Offset: 0x7A9 VA: 0x7A9
	// RVA: 0x2BC Offset: 0x2BC VA: 0x2BC
	public string get_Name() { }

	[CompilerGeneratedAttribute] // RVA: 0x7AA Offset: 0x7AA VA: 0x7AA
	// RVA: 0x12D Offset: 0x12D VA: 0x12D
	public void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7AB Offset: 0x7AB VA: 0x7AB
	// RVA: 0x2BD Offset: 0x2BD VA: 0x2BD
	public string get_Guid() { }

	[CompilerGeneratedAttribute] // RVA: 0x7AC Offset: 0x7AC VA: 0x7AC
	// RVA: 0x12E Offset: 0x12E VA: 0x12E
	public void set_Guid(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7AD Offset: 0x7AD VA: 0x7AD
	// RVA: 0x2BE Offset: 0x2BE VA: 0x2BE
	public string get_LocalizationResources() { }

	// RVA: 0x30D Offset: 0x30D VA: 0x30D
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
[AttributeUsageAttribute] // RVA: 0x517 Offset: 0x517 VA: 0x517
public sealed class EventAttribute : Attribute // TypeDefIndex: 1368
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x5C0 Offset: 0x5C0 VA: 0x5C0
	private int <EventId>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x5C1 Offset: 0x5C1 VA: 0x5C1
	private EventLevel <Level>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x5C2 Offset: 0x5C2 VA: 0x5C2
	private EventKeywords <Keywords>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0x5C3 Offset: 0x5C3 VA: 0x5C3
	private EventTask <Task>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0x5C4 Offset: 0x5C4 VA: 0x5C4
	private byte <Version>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0x5C5 Offset: 0x5C5 VA: 0x5C5
	private string <Message>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0x5C6 Offset: 0x5C6 VA: 0x5C6
	private EventTags <Tags>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0x5C7 Offset: 0x5C7 VA: 0x5C7
	private EventActivityOptions <ActivityOptions>k__BackingField; // 0x28
	private EventOpcode m_opcode; // 0x2C
	private bool m_opcodeSet; // 0x30

	// Properties
	public int EventId { get; set; }
	public EventLevel Level { get; set; }
	public EventKeywords Keywords { get; }
	public EventOpcode Opcode { get; set; }
	internal bool IsOpcodeSet { get; }
	public EventTask Task { get; set; }
	public byte Version { get; }
	public string Message { get; set; }
	public EventTags Tags { get; }
	public EventActivityOptions ActivityOptions { get; set; }

	// Methods

	// RVA: 0x10B Offset: 0x10B VA: 0x10B
	public void .ctor(int eventId) { }

	[CompilerGeneratedAttribute] // RVA: 0x7AE Offset: 0x7AE VA: 0x7AE
	// RVA: 0x287 Offset: 0x287 VA: 0x287
	public int get_EventId() { }

	[CompilerGeneratedAttribute] // RVA: 0x7AF Offset: 0x7AF VA: 0x7AF
	// RVA: 0x10C Offset: 0x10C VA: 0x10C
	private void set_EventId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7B0 Offset: 0x7B0 VA: 0x7B0
	// RVA: 0x288 Offset: 0x288 VA: 0x288
	public EventLevel get_Level() { }

	[CompilerGeneratedAttribute] // RVA: 0x7B1 Offset: 0x7B1 VA: 0x7B1
	// RVA: 0x10D Offset: 0x10D VA: 0x10D
	public void set_Level(EventLevel value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7B2 Offset: 0x7B2 VA: 0x7B2
	// RVA: 0x33 Offset: 0x33 VA: 0x33
	public EventKeywords get_Keywords() { }

	// RVA: 0x289 Offset: 0x289 VA: 0x289
	public EventOpcode get_Opcode() { }

	// RVA: 0x10E Offset: 0x10E VA: 0x10E
	public void set_Opcode(EventOpcode value) { }

	// RVA: 0x28A Offset: 0x28A VA: 0x28A
	internal bool get_IsOpcodeSet() { }

	[CompilerGeneratedAttribute] // RVA: 0x7B3 Offset: 0x7B3 VA: 0x7B3
	// RVA: 0x28B Offset: 0x28B VA: 0x28B
	public EventTask get_Task() { }

	[CompilerGeneratedAttribute] // RVA: 0x7B4 Offset: 0x7B4 VA: 0x7B4
	// RVA: 0x10F Offset: 0x10F VA: 0x10F
	public void set_Task(EventTask value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7B5 Offset: 0x7B5 VA: 0x7B5
	// RVA: 0x28C Offset: 0x28C VA: 0x28C
	public byte get_Version() { }

	[CompilerGeneratedAttribute] // RVA: 0x7B6 Offset: 0x7B6 VA: 0x7B6
	// RVA: 0x28D Offset: 0x28D VA: 0x28D
	public string get_Message() { }

	[CompilerGeneratedAttribute] // RVA: 0x7B7 Offset: 0x7B7 VA: 0x7B7
	// RVA: 0x110 Offset: 0x110 VA: 0x110
	public void set_Message(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x7B8 Offset: 0x7B8 VA: 0x7B8
	// RVA: 0x28E Offset: 0x28E VA: 0x28E
	public EventTags get_Tags() { }

	[CompilerGeneratedAttribute] // RVA: 0x7B9 Offset: 0x7B9 VA: 0x7B9
	// RVA: 0x28F Offset: 0x28F VA: 0x28F
	public EventActivityOptions get_ActivityOptions() { }

	[CompilerGeneratedAttribute] // RVA: 0x7BA Offset: 0x7BA VA: 0x7BA
	// RVA: 0x111 Offset: 0x111 VA: 0x111
	public void set_ActivityOptions(EventActivityOptions value) { }
}

// Namespace: System.Diagnostics.Tracing
[AttributeUsageAttribute] // RVA: 0x518 Offset: 0x518 VA: 0x518
public sealed class NonEventAttribute : Attribute // TypeDefIndex: 1369
{
	// Methods

	// RVA: 0x31F Offset: 0x31F VA: 0x31F
	public void .ctor() { }
}

// Namespace: System.Diagnostics.Tracing
public enum EventCommand // TypeDefIndex: 1370
{
	// Fields
	public int value__; // 0x0
	public const EventCommand Update = 0;
	public const EventCommand SendManifest = -1;
	public const EventCommand Enable = -2;
	public const EventCommand Disable = -3;
}

// Namespace: System.Diagnostics.Tracing
internal sealed class ActivityFilter : IDisposable // TypeDefIndex: 1371
{
	// Fields
	private ConcurrentDictionary<Guid, int> m_activeActivities; // 0x8
	private ConcurrentDictionary<Guid, Tuple<Guid, int>> m_rootActiveActivities; // 0xC
	private Guid m_providerGuid; // 0x10
	private int m_eventId; // 0x20
	private int m_samplingFreq; // 0x24
	private int m_curSampleCount; // 0x28
	private int m_perEventSourceSessionId; // 0x2C
	private ActivityFilter m_next; // 0x30
	private Action<Guid> m_myActivityDelegate; // 0x34

	// Methods

	// RVA: 0x102 Offset: 0x102 VA: 0x102
	public static void DisableFilter(ref ActivityFilter filterList, EventSource source) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	public static void UpdateFilter(ref ActivityFilter filterList, EventSource source, int perEventSourceSessionId, string startEvents) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	public static bool PassesActivityFilter(ActivityFilter filterList, Guid* childActivityID, bool triggeringEvent, EventSource source, int eventId) { }

	// RVA: 0xD6 Offset: 0xD6 VA: 0xD6
	public static void FlowActivityIfNeeded(ActivityFilter filterList, Guid* currentActivityId, Guid* childActivityID) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static void UpdateKwdTriggers(ActivityFilter activityFilter, Guid sourceGuid, EventSource source, EventKeywords sessKeywords) { }

	[IteratorStateMachineAttribute] // RVA: 0x7BB Offset: 0x7BB VA: 0x7BB
	// RVA: 0x180 Offset: 0x180 VA: 0x180
	public IEnumerable<Tuple<int, int>> GetFilterAsTuple(Guid sourceGuid) { }

	// RVA: 0x2DA Offset: 0x2DA VA: 0x2DA Slot: 4
	public void Dispose() { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	private void .ctor(EventSource source, int perEventSourceSessionId, int eventId, int samplingFreq, ActivityFilter existingFilter) { }

	// RVA: 0x2DB Offset: 0x2DB VA: 0x2DB
	private static void EnsureActivityCleanupDelegate(ActivityFilter filterList) { }

	// RVA: 0x27A Offset: 0x27A VA: 0x27A
	private static Action<Guid> GetActivityDyingDelegate(ActivityFilter filterList) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	private static bool EnableFilter(ref ActivityFilter filterList, EventSource source, int perEventSourceSessionId, int eventId, int samplingFreq) { }

	// RVA: 0x2DC Offset: 0x2DC VA: 0x2DC
	private static void TrimActiveActivityStore(ConcurrentDictionary<Guid, int> activities) { }

	// RVA: 0x27B Offset: 0x27B VA: 0x27B
	private static ConcurrentDictionary<Guid, int> GetActiveActivities(ActivityFilter filterList) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x519 Offset: 0x519 VA: 0x519
private sealed class ActivityFilter.<GetFilterAsTuple>d__7 : IEnumerable<Tuple<int, int>>, IEnumerable, IEnumerator<Tuple<int, int>>, IDisposable, IEnumerator // TypeDefIndex: 1372
{
	// Fields
	private int <>1__state; // 0x8
	private Tuple<int, int> <>2__current; // 0xC
	private int <>l__initialThreadId; // 0x10
	public ActivityFilter <>4__this; // 0x14
	private Guid sourceGuid; // 0x18
	public Guid <>3__sourceGuid; // 0x28
	private ActivityFilter <af>5__1; // 0x38

	// Properties
	private Tuple<int, int> System.Collections.Generic.IEnumerator<System.Tuple<System.Int32,System.Int32>>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0x7BC Offset: 0x7BC VA: 0x7BC
	// RVA: 0x104 Offset: 0x104 VA: 0x104
	public void .ctor(int <>1__state) { }

	[DebuggerHiddenAttribute] // RVA: 0x7BD Offset: 0x7BD VA: 0x7BD
	// RVA: 0x2DF Offset: 0x2DF VA: 0x2DF Slot: 7
	private void System.IDisposable.Dispose() { }

	// RVA: 0x27C Offset: 0x27C VA: 0x27C Slot: 8
	private bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0x7BE Offset: 0x7BE VA: 0x7BE
	// RVA: 0x27D Offset: 0x27D VA: 0x27D Slot: 6
	private Tuple<int, int> System.Collections.Generic.IEnumerator<System.Tuple<System.Int32,System.Int32>>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0x7BF Offset: 0x7BF VA: 0x7BF
	// RVA: 0x27E Offset: 0x27E VA: 0x27E Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0x7C0 Offset: 0x7C0 VA: 0x7C0
	// RVA: 0x27F Offset: 0x27F VA: 0x27F Slot: 4
	private IEnumerator<Tuple<int, int>> System.Collections.Generic.IEnumerable<System.Tuple<System.Int32,System.Int32>>.GetEnumerator() { }

	[DebuggerHiddenAttribute] // RVA: 0x7C1 Offset: 0x7C1 VA: 0x7C1
	// RVA: 0x280 Offset: 0x280 VA: 0x280 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x51A Offset: 0x51A VA: 0x51A
private sealed class ActivityFilter.<>c__DisplayClass11_0 // TypeDefIndex: 1373
{
	// Fields
	public ActivityFilter filterList; // 0x8

	// Methods

	// RVA: 0x2DD Offset: 0x2DD VA: 0x2DD
	public void .ctor() { }

	// RVA: 0x103 Offset: 0x103 VA: 0x103
	internal void <GetActivityDyingDelegate>b__0(Guid oldActivity) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x51B Offset: 0x51B VA: 0x51B
private sealed class ActivityFilter.<>c__DisplayClass13_0 // TypeDefIndex: 1374
{
	// Fields
	public int tickNow; // 0x8

	// Methods

	// RVA: 0x2DE Offset: 0x2DE VA: 0x2DE
	public void .ctor() { }

	// RVA: 0x858 Offset: 0x858 VA: 0x858
	internal int <TrimActiveActivityStore>b__0(KeyValuePair<Guid, int> x, KeyValuePair<Guid, int> y) { }
}

// Namespace: System.Diagnostics.Tracing
internal class EtwSession // TypeDefIndex: 1375
{
	// Fields
	public readonly int m_etwSessionId; // 0x8
	public ActivityFilter m_activityFilter; // 0xC
	private static List<WeakReference<EtwSession>> s_etwSessions; // 0x0

	// Methods

	// RVA: 0x181 Offset: 0x181 VA: 0x181
	public static EtwSession GetEtwSession(int etwSessionId, bool bCreateIfNeeded = False) { }

	// RVA: 0x2F3 Offset: 0x2F3 VA: 0x2F3
	public static void RemoveEtwSession(EtwSession etwSession) { }

	// RVA: 0xE72 Offset: 0xE72 VA: 0xE72
	private static void TrimGlobalList() { }

	// RVA: 0x10A Offset: 0x10A VA: 0x10A
	private void .ctor(int etwSessionId) { }

	// RVA: 0xE73 Offset: 0xE73 VA: 0xE73
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x51C Offset: 0x51C VA: 0x51C
private sealed class EtwSession.<>c__DisplayClass1_0 // TypeDefIndex: 1376
{
	// Fields
	public EtwSession etwSession; // 0x8

	// Methods

	// RVA: 0x2F5 Offset: 0x2F5 VA: 0x2F5
	public void .ctor() { }

	// RVA: 0x183 Offset: 0x183 VA: 0x183
	internal bool <RemoveEtwSession>b__0(WeakReference<EtwSession> wrEtwSession) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x51D Offset: 0x51D VA: 0x51D
[Serializable]
private sealed class EtwSession.<>c // TypeDefIndex: 1377
{
	// Fields
	public static readonly EtwSession.<>c <>9; // 0x0
	public static Predicate<WeakReference<EtwSession>> <>9__2_0; // 0x4

	// Methods

	// RVA: 0xE74 Offset: 0xE74 VA: 0xE74
	private static void .cctor() { }

	// RVA: 0x2F4 Offset: 0x2F4 VA: 0x2F4
	public void .ctor() { }

	// RVA: 0x182 Offset: 0x182 VA: 0x182
	internal bool <TrimGlobalList>b__2_0(WeakReference<EtwSession> wrEtwSession) { }
}

// Namespace: System.Diagnostics.Tracing
[DefaultMemberAttribute] // RVA: 0x51E Offset: 0x51E VA: 0x51E
internal struct SessionMask // TypeDefIndex: 1378
{
	// Fields
	private uint m_mask; // 0x0

	// Properties
	public static SessionMask All { get; }
	public bool Item { get; set; }

	// Methods

	// RVA: 0x13A Offset: 0x13A VA: 0x13A
	public void .ctor(uint mask = 0) { }

	// RVA: 0x196 Offset: 0x196 VA: 0x196
	public bool IsEqualOrSupersetOf(SessionMask m) { }

	// RVA: 0x1A0 Offset: 0x1A0 VA: 0x1A0
	public static SessionMask get_All() { }

	// RVA: 0x2C4 Offset: 0x2C4 VA: 0x2C4
	public static SessionMask FromId(int perEventSourceSessionId) { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37
	public ulong ToEventKeywords() { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public static SessionMask FromEventKeywords(ulong m) { }

	// RVA: 0x197 Offset: 0x197 VA: 0x197
	public bool get_Item(int perEventSourceSessionId) { }

	// RVA: 0x10E Offset: 0x10E VA: 0x10E
	public void set_Item(int perEventSourceSessionId, bool value) { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38
	public static ulong op_Explicit(SessionMask m) { }

	// RVA: 0x2C5 Offset: 0x2C5 VA: 0x2C5
	public static uint op_Explicit(SessionMask m) { }
}

// Namespace: System.Diagnostics.Tracing
internal class EventDispatcher // TypeDefIndex: 1379
{
	// Fields
	internal readonly EventListener m_Listener; // 0x8
	internal bool[] m_EventEnabled; // 0xC
	internal bool m_activityFilteringEnabled; // 0x10
	internal EventDispatcher m_Next; // 0x14

	// Methods

	// RVA: 0x3F Offset: 0x3F VA: 0x3F
	internal void .ctor(EventDispatcher next, bool[] eventEnabled, EventListener listener) { }
}

// Namespace: System.Diagnostics.Tracing
[FlagsAttribute] // RVA: 0x51F Offset: 0x51F VA: 0x51F
public enum EventManifestOptions // TypeDefIndex: 1380
{
	// Fields
	public int value__; // 0x0
	public const EventManifestOptions None = 0;
	public const EventManifestOptions Strict = 1;
	public const EventManifestOptions AllCultures = 2;
	public const EventManifestOptions OnlyIfNeededForRegistration = 4;
	public const EventManifestOptions AllowEventSourceOverride = 8;
}

// Namespace: System.Diagnostics.Tracing
internal class ManifestBuilder // TypeDefIndex: 1381
{
	// Fields
	private Dictionary<int, string> opcodeTab; // 0x8
	private Dictionary<int, string> taskTab; // 0xC
	private Dictionary<ulong, string> keywordTab; // 0x10
	private Dictionary<string, Type> mapsTab; // 0x14
	private Dictionary<string, string> stringTab; // 0x18
	private StringBuilder sb; // 0x1C
	private StringBuilder events; // 0x20
	private StringBuilder templates; // 0x24
	private ResourceManager resources; // 0x28
	private EventManifestOptions flags; // 0x2C
	private IList<string> errors; // 0x30
	private Dictionary<string, List<int>> perEventByteArrayArgIndices; // 0x34
	private string eventName; // 0x38
	private int numParams; // 0x3C
	private List<int> byteArrArgIndices; // 0x40

	// Properties
	public IList<string> Errors { get; }

	// Methods

	// RVA: 0xF Offset: 0xF VA: 0xF
	public void .ctor(string providerName, Guid providerGuid, string dllName, ResourceManager resources, EventManifestOptions flags) { }

	// RVA: 0x106 Offset: 0x106 VA: 0x106
	public void AddOpcode(string name, int value) { }

	// RVA: 0x107 Offset: 0x107 VA: 0x107
	public void AddTask(string name, int value) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public void AddKeyword(string name, ulong value) { }

	// RVA: 0x108 Offset: 0x108 VA: 0x108
	public void StartEvent(string eventName, EventAttribute eventAttribute) { }

	// RVA: 0x109 Offset: 0x109 VA: 0x109
	public void AddEventParameter(Type type, string name) { }

	// RVA: 0x31B Offset: 0x31B VA: 0x31B
	public void EndEvent() { }

	// RVA: 0x2BF Offset: 0x2BF VA: 0x2BF
	public byte[] CreateManifest() { }

	// RVA: 0x2C0 Offset: 0x2C0 VA: 0x2C0
	public IList<string> get_Errors() { }

	// RVA: 0x10A Offset: 0x10A VA: 0x10A
	public void ManifestError(string msg, bool runtimeCritical = False) { }

	// RVA: 0x2C1 Offset: 0x2C1 VA: 0x2C1
	private string CreateManifestString() { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52
	private void WriteNameAndMessageAttribs(StringBuilder stringBuilder, string elementName, string name) { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37
	private void WriteMessageAttrib(StringBuilder stringBuilder, string elementName, string name, string value) { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F
	internal string GetLocalizedMessage(string key, CultureInfo ci, bool etwFormat) { }

	// RVA: 0x2C2 Offset: 0x2C2 VA: 0x2C2
	private static List<CultureInfo> GetSupportedCultures(ResourceManager resources) { }

	// RVA: 0x2C3 Offset: 0x2C3 VA: 0x2C3
	private static string GetLevelName(EventLevel level) { }

	// RVA: 0x85F Offset: 0x85F VA: 0x85F
	private string GetTaskName(EventTask task, string eventName) { }

	// RVA: 0x860 Offset: 0x860 VA: 0x860
	private string GetOpcodeName(EventOpcode opcode, string eventName) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private string GetKeywords(ulong keywords, string eventName) { }

	// RVA: 0x193 Offset: 0x193 VA: 0x193
	private string GetTypeName(Type type) { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53
	private static void UpdateStringBuilder(ref StringBuilder stringBuilder, string eventMessage, int startIndex, int count) { }

	// RVA: 0x861 Offset: 0x861 VA: 0x861
	private string TranslateToManifestConvention(string eventMessage, string evtName) { }

	// RVA: 0x862 Offset: 0x862 VA: 0x862
	private int TranslateIndexToManifestConvention(int idx, string evtName) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x520 Offset: 0x520 VA: 0x520
private sealed class ManifestBuilder.<>c__DisplayClass22_0 // TypeDefIndex: 1382
{
	// Fields
	public StringBuilder stringBuilder; // 0x8
	public string eventMessage; // 0xC
	public int writtenSoFar; // 0x10

	// Methods

	// RVA: 0x31C Offset: 0x31C VA: 0x31C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x521 Offset: 0x521 VA: 0x521
private sealed class ManifestBuilder.<>c__DisplayClass22_1 // TypeDefIndex: 1383
{
	// Fields
	public int i; // 0x8
	public ManifestBuilder.<>c__DisplayClass22_0 CS$<>8__locals1; // 0xC

	// Methods

	// RVA: 0x31D Offset: 0x31D VA: 0x31D
	public void .ctor() { }

	// RVA: 0x10B Offset: 0x10B VA: 0x10B
	internal void <TranslateToManifestConvention>b__0(char ch, string escape) { }
}

// Namespace: System.Diagnostics.Tracing
internal struct ManifestEnvelope // TypeDefIndex: 1384
{
	// Fields
	public ManifestEnvelope.ManifestFormats Format; // 0x0
	public byte MajorVersion; // 0x1
	public byte MinorVersion; // 0x2
	public byte Magic; // 0x3
	public ushort TotalChunks; // 0x4
	public ushort ChunkNumber; // 0x6
}

// Namespace: 
public enum ManifestEnvelope.ManifestFormats // TypeDefIndex: 1385
{
	// Fields
	public byte value__; // 0x0
	public const ManifestEnvelope.ManifestFormats SimpleXmlFormat = 1;
}

// Namespace: System.Diagnostics.Tracing
[Serializable]
public class EventSourceException : Exception // TypeDefIndex: 1386
{
	// Methods

	// RVA: 0x30F Offset: 0x30F VA: 0x30F
	public void .ctor() { }

	// RVA: 0xF9 Offset: 0xF9 VA: 0xF9
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0xFA Offset: 0xFA VA: 0xFA
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x130 Offset: 0x130 VA: 0x130
	internal void .ctor(Exception innerException) { }
}

// Namespace: System.Diagnostics.Tracing
public enum EventLevel // TypeDefIndex: 1387
{
	// Fields
	public int value__; // 0x0
	public const EventLevel LogAlways = 0;
	public const EventLevel Critical = 1;
	public const EventLevel Error = 2;
	public const EventLevel Warning = 3;
	public const EventLevel Informational = 4;
	public const EventLevel Verbose = 5;
}

// Namespace: System.Diagnostics.Tracing
[FriendAccessAllowedAttribute] // RVA: 0x522 Offset: 0x522 VA: 0x522
public enum EventTask // TypeDefIndex: 1388
{
	// Fields
	public int value__; // 0x0
	public const EventTask None = 0;
}

// Namespace: System.Diagnostics.Tracing
[FriendAccessAllowedAttribute] // RVA: 0x523 Offset: 0x523 VA: 0x523
public enum EventOpcode // TypeDefIndex: 1389
{
	// Fields
	public int value__; // 0x0
	public const EventOpcode Info = 0;
	public const EventOpcode Start = 1;
	public const EventOpcode Stop = 2;
	public const EventOpcode DataCollectionStart = 3;
	public const EventOpcode DataCollectionStop = 4;
	public const EventOpcode Extension = 5;
	public const EventOpcode Reply = 6;
	public const EventOpcode Resume = 7;
	public const EventOpcode Suspend = 8;
	public const EventOpcode Send = 9;
	public const EventOpcode Receive = 240;
}

// Namespace: System.Diagnostics.Tracing
[FriendAccessAllowedAttribute] // RVA: 0x524 Offset: 0x524 VA: 0x524
public enum EventChannel // TypeDefIndex: 1390
{
	// Fields
	public byte value__; // 0x0
	public const EventChannel None = 0;
	public const EventChannel Admin = 16;
	public const EventChannel Operational = 17;
	public const EventChannel Analytic = 18;
	public const EventChannel Debug = 19;
}

// Namespace: System.Diagnostics.Tracing
[FlagsAttribute] // RVA: 0x525 Offset: 0x525 VA: 0x525
public enum EventKeywords // TypeDefIndex: 1391
{
	// Fields
	public long value__; // 0x0
	public const EventKeywords None = 0;
	public const EventKeywords All = -1;
	public const EventKeywords MicrosoftTelemetry = 562949953421312;
	public const EventKeywords WdiContext = 562949953421312;
	public const EventKeywords WdiDiagnostic = 1125899906842624;
	public const EventKeywords Sqm = 2251799813685248;
	public const EventKeywords AuditFailure = 4503599627370496;
	public const EventKeywords AuditSuccess = 9007199254740992;
	public const EventKeywords CorrelationHint = 4503599627370496;
	public const EventKeywords EventLogClassic = 36028797018963968;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x526 Offset: 0x526 VA: 0x526
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1392
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 0588059ACBD52F7EA2835882F977A9CF72EB9775 /*Metadata offset 0x122CB4*/; // 0x0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=84 0A1ADB22C1D3E1F4B2448EE3F27DF9DE63329C4C /*Metadata offset 0x122CFC*/; // 0x48
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=240 121EC59E23F7559B28D338D562528F6299C2DE22 /*Metadata offset 0x122D50*/; // 0x9C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=24 1730F09044E91DB8371B849EFF5E6D17BDE4AED0 /*Metadata offset 0x122E40*/; // 0x18C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 1FE6CE411858B3D864679DE2139FB081F08BFACD /*Metadata offset 0x122E58*/; // 0x1A4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 25420D0055076FA8D3E4DD96BC53AE24DE6E619F /*Metadata offset 0x122E68*/; // 0x1B4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1208 25CF935D2AE9EDF05DD75BCD47FF84D9255D6F6E /*Metadata offset 0x122E90*/; // 0x1DC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=42 29C1A61550F0E3260E1953D4FAD71C256218EF40 /*Metadata offset 0x123348*/; // 0x694
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 2B33BEC8C30DFDC49DAFE20D3BDE19487850D717 /*Metadata offset 0x123372*/; // 0x6BE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 2BA840FF6020B8FF623DBCB7188248CF853FAF4F /*Metadata offset 0x12337E*/; // 0x6CA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 2C840AFA48C27B9C05593E468C1232CA1CC74AFD /*Metadata offset 0x1233A2*/; // 0x6EE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 2D1DA5BB407F0C11C3B5116196C0C6374D932B20 /*Metadata offset 0x1233EA*/; // 0x736
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 2F71D2DA12F3CD0A6A112F5A5A75B4FDC6FE8547 /*Metadata offset 0x1233FA*/; // 0x746
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 34476C29F6F81C989CFCA42F7C06E84C66236834 /*Metadata offset 0x123442*/; // 0x78E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2382 35EED060772F2748D13B745DAEC8CD7BD3B87604 /*Metadata offset 0x12348A*/; // 0x7D6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=38 375F9AE9769A3D1DA789E9ACFE81F3A1BB14F0D3 /*Metadata offset 0x123DD8*/; // 0x1124
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1450 379C06C9E702D31469C29033F0DD63931EB349F5 /*Metadata offset 0x123DFE*/; // 0x114A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 399BD13E240F33F808CA7940293D6EC4E6FD5A00 /*Metadata offset 0x1243A8*/; // 0x16F4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 39C9CE73C7B0619D409EF28344F687C1B5C130FE /*Metadata offset 0x1243B2*/; // 0x16FE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=320 3C53AFB51FEC23491684C7BEDBC6D4E0F409F851 /*Metadata offset 0x1243FA*/; // 0x1746
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=64 3E4BBF9D0CDD2E34F78AA7A9A3979DCE1F7B02BD /*Metadata offset 0x12453A*/; // 0x1886
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 3E823444D2DFECF0F90B436B88F02A533CB376F1 /*Metadata offset 0x12457A*/; // 0x18C6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 3FE6C283BCF384FD2C8789880DFF59664E2AB4A1 /*Metadata offset 0x124586*/; // 0x18D2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1665 40981BAA39513E58B28DCF0103CC04DE2A0A0444 /*Metadata offset 0x1245CE*/; // 0x191A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 40E7C49413D261F3F38AD3A870C0AC69C8BDA048 /*Metadata offset 0x124C4F*/; // 0x1F9B
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 421EC7E82F2967DF6CA8C3605514DC6F29EE5845 /*Metadata offset 0x124C77*/; // 0x1FC3
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 4858DB4AA76D3933F1CA9E6712D4FDB16903F628 /*Metadata offset 0x124CBF*/; // 0x200B
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 4F7A8890F332B22B8DE0BD29D36FA7364748D76A /*Metadata offset 0x124D07*/; // 0x2053
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 536422B321459B242ADED7240B7447E904E083E3 /*Metadata offset 0x124D2F*/; // 0x207B
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1080 5382CEF491F422BFE0D6FC46EFAFF9EF9D4C89F3 /*Metadata offset 0x124D77*/; // 0x20C3
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=3 57218C316B6921E2CD61027A2387EDC31A2D9471 /*Metadata offset 0x1251AF*/; // 0x24FB
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 57F320D62696EC99727E0FE2045A05F1289CC0C6 /*Metadata offset 0x1251B2*/; // 0x24FE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=212 594A33A00BC4F785DFD43E3C6C44FBA1242CCAF3 /*Metadata offset 0x1251DA*/; // 0x2526
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 5BBDF8058D4235C33F2E8DCF76004031B6187A2F /*Metadata offset 0x1252AE*/; // 0x25FA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=288 5BCD21C341BE6DDF8FFFAE1A23ABA24DCBB612BF /*Metadata offset 0x1252D2*/; // 0x261E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 5BFE2819B4778217C56416C7585FF0E56EBACD89 /*Metadata offset 0x1253F2*/; // 0x273E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 609C0E8D8DA86A09D6013D301C86BA8782C16B8C /*Metadata offset 0x12543A*/; // 0x2786
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 65E32B4E150FD8D24B93B0D42A17F1DAD146162B /*Metadata offset 0x1254BA*/; // 0x2806
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 6770974FEF1E98B9C1864370E2B5B786EB0EA39E /*Metadata offset 0x1254E2*/; // 0x282E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 67EEAD805D708D9AA4E14BF747E44CED801744F3 /*Metadata offset 0x125516*/; // 0x2862
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 6C71197D228427B2864C69B357FEF73D8C9D59DF /*Metadata offset 0x12555E*/; // 0x28AA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 6CEE45445AFD150B047A5866FFA76AA651CDB7B7 /*Metadata offset 0x1255D6*/; // 0x2922
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 6FC754859E4EC74E447048364B216D825C6F8FE7 /*Metadata offset 0x1255E6*/; // 0x2932
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 704939CD172085D1295FCE3F1D92431D685D7AA2 /*Metadata offset 0x125632*/; // 0x297E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=24 7088AAE49F0627B72729078DE6E3182DDCF8ED99 /*Metadata offset 0x12565A*/; // 0x29A6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 7341C933A70EAE383CC50C4B945ADB8E08F06737 /*Metadata offset 0x125672*/; // 0x29BE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 7FE820C9CF0F0B90445A71F1D262D22E4F0C4C68 /*Metadata offset 0x1256BA*/; // 0x2A06
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=21252 811A927B7DADD378BE60BBDE794B9277AA9B50EC /*Metadata offset 0x1256E2*/; // 0x2A2E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 81917F1E21F3C22B9F916994547A614FB03E968E /*Metadata offset 0x12A9E6*/; // 0x7D32
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 823566DA642D6EA356E15585921F2A4CA23D6760 /*Metadata offset 0x12AA0A*/; // 0x7D56
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 82C2A59850B2E85BCE1A45A479537A384DF6098D /*Metadata offset 0x12AA32*/; // 0x7D7E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 82C383F8E6E4D3D87AEBB986A5D0077E8AD157C4 /*Metadata offset 0x12AA3E*/; // 0x7D8A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 871B9CF85DB352BAADF12BAE8F19857683E385AC /*Metadata offset 0x12AA6A*/; // 0x7DB6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 89A040451C8CC5C8FB268BE44BDD74964C104155 /*Metadata offset 0x12AA92*/; // 0x7DDE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 8CAA092E783257106251246FF5C97F88D28517A6 /*Metadata offset 0x12AAA2*/; // 0x7DEE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2100 8D231DD55FE1AD7631BBD0905A17D5EB616C2154 /*Metadata offset 0x12AACA*/; // 0x7E16
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 8E10AC2F34545DFBBF3FCBC06055D797A8C99991 /*Metadata offset 0x12B2FE*/; // 0x864A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 93A63E90605400F34B49F0EB3361D23C89164BDA /*Metadata offset 0x12B326*/; // 0x8672
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 94841DD2F330CCB1089BF413E4FA9B04505152E2 /*Metadata offset 0x12B332*/; // 0x867E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 95264589E48F94B7857CFF398FB72A537E13EEE2 /*Metadata offset 0x12B37A*/; // 0x86C6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 95C48758CAE1715783472FB073AB158AB8A0AB2A /*Metadata offset 0x12B386*/; // 0x86D2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 973417296623D8DC6961B09664E54039E44CA5D8 /*Metadata offset 0x12B3CE*/; // 0x871A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 A0074C15377C0C870B055927403EA9FA7A349D12 /*Metadata offset 0x12B416*/; // 0x8762
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=130 A1319B706116AB2C6D44483F60A7D0ACEA543396 /*Metadata offset 0x12B43E*/; // 0x878A
	internal static readonly long A13AA52274D951A18029131A8DDECF76B569A15D = -44474084896931794; // 0x8810
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=212 A5444763673307F6828C748D4B9708CFC02B0959 /*Metadata offset 0x12B4C8*/; // 0x8818
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 A6732F8E7FC23766AB329B492D6BF82E3B33233F /*Metadata offset 0x12B59C*/; // 0x88EC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=174 A705A106D95282BD15E13EEA6B0AF583FF786D83 /*Metadata offset 0x12B5E4*/; // 0x8934
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1018 A8A491E4CED49AE0027560476C10D933CE70C8DF /*Metadata offset 0x12B692*/; // 0x89E2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 AC791C4F39504D1184B73478943D0636258DA7B1 /*Metadata offset 0x12BA8C*/; // 0x8DDC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 AFCD4E1211233E99373A3367B23105A3D624B1F2 /*Metadata offset 0x12BAD4*/; // 0x8E24
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 B472ED77CB3B2A66D49D179F1EE2081B70A6AB61 /*Metadata offset 0x12BB08*/; // 0x8E58
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=256 B53A2C6DF21FC88B17AEFC40EB895B8D63210CDF /*Metadata offset 0x12BB30*/; // 0x8E80
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=998 B881DA88BE0B68D8A6B6B6893822586B8B2CFC45 /*Metadata offset 0x12BC30*/; // 0x8F80
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=162 B8864ACB9DD69E3D42151513C840AAE270BF21C8 /*Metadata offset 0x12C016*/; // 0x9366
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=360 B8F87834C3597B2EEF22BA6D3A392CC925636401 /*Metadata offset 0x12C0B8*/; // 0x9408
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 B9B670F134A59FB1107AF01A9FE8F8E3980B3093 /*Metadata offset 0x12C220*/; // 0x9570
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 BEBC9ECC660A13EFC359BA3383411F698CFF25DB /*Metadata offset 0x12C268*/; // 0x95B8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 BEE1CFE5DFAA408E14CE4AF4DCD824FA2E42DCB7 /*Metadata offset 0x12C2B0*/; // 0x9600
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=6 BF5EB60806ECB74EE484105DD9D6F463BF994867 /*Metadata offset 0x12C2D8*/; // 0x9628
	internal static readonly long C1A1100642BA9685B30A84D97348484E14AA1865 = 23362753784184900; // 0x9630
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 C6F364A0AD934EFED8909446C215752E565D77C1 /*Metadata offset 0x12C2E6*/; // 0x9638
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=174 CE5835130F5277F63D716FC9115526B0AC68FFAD /*Metadata offset 0x12C2F6*/; // 0x9648
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=6 CE93C35B755802BC4B3D180716B048FC61701EF7 /*Metadata offset 0x12C3A4*/; // 0x96F6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 D117188BE8D4609C0D531C51B0BB911A4219DEBE /*Metadata offset 0x12C3AA*/; // 0x96FC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 D78D08081C7A5AD6FBA7A8DC86BCD6D7A577C636 /*Metadata offset 0x12C3CA*/; // 0x971C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 DA19DB47B583EFCF7825D2E39D661D2354F28219 /*Metadata offset 0x12C3F6*/; // 0x9748
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 DD3AEFEADB1CD615F3017763F1568179FEE640B0 /*Metadata offset 0x12C442*/; // 0x9794
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 E1827270A5FE1C85F5352A66FD87BA747213D006 /*Metadata offset 0x12C476*/; // 0x97C8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 E45BAB43F7D5D038672B3E3431F92E34A7AF2571 /*Metadata offset 0x12C49A*/; // 0x97EC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 E92B39D8233061927D9ACDE54665E68E7535635A /*Metadata offset 0x12C4C2*/; // 0x9814
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 EA9506959484C55CFE0C139C624DF6060E285866 /*Metadata offset 0x12C4F6*/; // 0x9848
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=262 EB5E9A80A40096AB74D2E226650C7258D7BC5E9D /*Metadata offset 0x12C502*/; // 0x9854
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=64 EBF68F411848D603D059DFDEA2321C5A5EA78044 /*Metadata offset 0x12C608*/; // 0x995A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 EC89C317EA2BF49A70EFF5E89C691E34733D7C37 /*Metadata offset 0x12C648*/; // 0x999A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 F06E829E62F3AFBC045D064E10A4F5DF7C969612 /*Metadata offset 0x12C690*/; // 0x99E2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=11614 F073AA332018FDA0D572E99448FFF1D6422BD520 /*Metadata offset 0x12C6B8*/; // 0x9A0A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 F34B0E10653402E8F788F8BC3F7CD7090928A429 /*Metadata offset 0x12F416*/; // 0xC768
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 F37E34BEADB04F34FCC31078A59F49856CA83D5B /*Metadata offset 0x12F48E*/; // 0xC7E0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=94 F512A9ABF88066AAEB92684F95CC05D8101B462B /*Metadata offset 0x12F4D6*/; // 0xC828
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 F8FAABB821300AA500C2CEC6091B3782A7FB44A4 /*Metadata offset 0x12F534*/; // 0xC886
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2350 FCBD2781A933F0828ED4AAF88FD8B08D76DDD49B /*Metadata offset 0x12F540*/; // 0xC892

	// Methods

	// RVA: 0xFC Offset: 0xFC VA: 0xFC
	internal static uint ComputeStringHash(string s) { }
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=3 // TypeDefIndex: 1393
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=6 // TypeDefIndex: 1394
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 // TypeDefIndex: 1395
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 1396
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 // TypeDefIndex: 1397
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=24 // TypeDefIndex: 1398
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 // TypeDefIndex: 1399
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 // TypeDefIndex: 1400
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=38 // TypeDefIndex: 1401
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 // TypeDefIndex: 1402
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=42 // TypeDefIndex: 1403
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 // TypeDefIndex: 1404
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 // TypeDefIndex: 1405
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=64 // TypeDefIndex: 1406
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 // TypeDefIndex: 1407
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 // TypeDefIndex: 1408
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=84 // TypeDefIndex: 1409
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=94 // TypeDefIndex: 1410
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 // TypeDefIndex: 1411
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 // TypeDefIndex: 1412
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=130 // TypeDefIndex: 1413
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=162 // TypeDefIndex: 1414
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=174 // TypeDefIndex: 1415
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=212 // TypeDefIndex: 1416
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=240 // TypeDefIndex: 1417
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=256 // TypeDefIndex: 1418
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=262 // TypeDefIndex: 1419
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=288 // TypeDefIndex: 1420
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=320 // TypeDefIndex: 1421
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=360 // TypeDefIndex: 1422
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=998 // TypeDefIndex: 1423
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1018 // TypeDefIndex: 1424
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1080 // TypeDefIndex: 1425
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1208 // TypeDefIndex: 1426
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1450 // TypeDefIndex: 1427
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1665 // TypeDefIndex: 1428
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2100 // TypeDefIndex: 1429
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2350 // TypeDefIndex: 1430
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2382 // TypeDefIndex: 1431
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=11614 // TypeDefIndex: 1432
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=21252 // TypeDefIndex: 1433
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x527 Offset: 0x527 VA: 0x527
[TypeLibImportClassAttribute] // RVA: 0x527 Offset: 0x527 VA: 0x527
[GuidAttribute] // RVA: 0x527 Offset: 0x527 VA: 0x527
[InterfaceTypeAttribute] // RVA: 0x527 Offset: 0x527 VA: 0x527
[CLSCompliantAttribute] // RVA: 0x527 Offset: 0x527 VA: 0x527
public interface _AssemblyBuilder // TypeDefIndex: 1434
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x528 Offset: 0x528 VA: 0x528
[InterfaceTypeAttribute] // RVA: 0x528 Offset: 0x528 VA: 0x528
[TypeLibImportClassAttribute] // RVA: 0x528 Offset: 0x528 VA: 0x528
[GuidAttribute] // RVA: 0x528 Offset: 0x528 VA: 0x528
[ComVisibleAttribute] // RVA: 0x528 Offset: 0x528 VA: 0x528
public interface _ConstructorBuilder // TypeDefIndex: 1435
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x529 Offset: 0x529 VA: 0x529
[InterfaceTypeAttribute] // RVA: 0x529 Offset: 0x529 VA: 0x529
[TypeLibImportClassAttribute] // RVA: 0x529 Offset: 0x529 VA: 0x529
[CLSCompliantAttribute] // RVA: 0x529 Offset: 0x529 VA: 0x529
[ComVisibleAttribute] // RVA: 0x529 Offset: 0x529 VA: 0x529
public interface _CustomAttributeBuilder // TypeDefIndex: 1436
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x52A Offset: 0x52A VA: 0x52A
[CLSCompliantAttribute] // RVA: 0x52A Offset: 0x52A VA: 0x52A
[ComVisibleAttribute] // RVA: 0x52A Offset: 0x52A VA: 0x52A
[InterfaceTypeAttribute] // RVA: 0x52A Offset: 0x52A VA: 0x52A
[TypeLibImportClassAttribute] // RVA: 0x52A Offset: 0x52A VA: 0x52A
public interface _EnumBuilder // TypeDefIndex: 1437
{}

// Namespace: System.Runtime.InteropServices
[TypeLibImportClassAttribute] // RVA: 0x52B Offset: 0x52B VA: 0x52B
[CLSCompliantAttribute] // RVA: 0x52B Offset: 0x52B VA: 0x52B
[InterfaceTypeAttribute] // RVA: 0x52B Offset: 0x52B VA: 0x52B
[ComVisibleAttribute] // RVA: 0x52B Offset: 0x52B VA: 0x52B
[GuidAttribute] // RVA: 0x52B Offset: 0x52B VA: 0x52B
public interface _EventBuilder // TypeDefIndex: 1438
{}

// Namespace: System.Reflection.Emit
[ObsoleteAttribute] // RVA: 0x52C Offset: 0x52C VA: 0x52C
[ComVisibleAttribute] // RVA: 0x52C Offset: 0x52C VA: 0x52C
[Serializable]
public sealed class UnmanagedMarshal // TypeDefIndex: 1439
{
	// Methods

	// RVA: 0x3DD Offset: 0x3DD VA: 0x3DD
	internal void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[TypeLibImportClassAttribute] // RVA: 0x52D Offset: 0x52D VA: 0x52D
[GuidAttribute] // RVA: 0x52D Offset: 0x52D VA: 0x52D
[CLSCompliantAttribute] // RVA: 0x52D Offset: 0x52D VA: 0x52D
[ComVisibleAttribute] // RVA: 0x52D Offset: 0x52D VA: 0x52D
[InterfaceTypeAttribute] // RVA: 0x52D Offset: 0x52D VA: 0x52D
public interface _FieldBuilder // TypeDefIndex: 1440
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x52E Offset: 0x52E VA: 0x52E
[InterfaceTypeAttribute] // RVA: 0x52E Offset: 0x52E VA: 0x52E
[GuidAttribute] // RVA: 0x52E Offset: 0x52E VA: 0x52E
[CLSCompliantAttribute] // RVA: 0x52E Offset: 0x52E VA: 0x52E
[TypeLibImportClassAttribute] // RVA: 0x52E Offset: 0x52E VA: 0x52E
public interface _ILGenerator // TypeDefIndex: 1441
{}

// Namespace: System.Runtime.InteropServices
[TypeLibImportClassAttribute] // RVA: 0x52F Offset: 0x52F VA: 0x52F
[CLSCompliantAttribute] // RVA: 0x52F Offset: 0x52F VA: 0x52F
[GuidAttribute] // RVA: 0x52F Offset: 0x52F VA: 0x52F
[InterfaceTypeAttribute] // RVA: 0x52F Offset: 0x52F VA: 0x52F
[ComVisibleAttribute] // RVA: 0x52F Offset: 0x52F VA: 0x52F
public interface _LocalBuilder // TypeDefIndex: 1442
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0x530 Offset: 0x530 VA: 0x530
[TypeLibImportClassAttribute] // RVA: 0x530 Offset: 0x530 VA: 0x530
[ComVisibleAttribute] // RVA: 0x530 Offset: 0x530 VA: 0x530
[InterfaceTypeAttribute] // RVA: 0x530 Offset: 0x530 VA: 0x530
[GuidAttribute] // RVA: 0x530 Offset: 0x530 VA: 0x530
public interface _MethodBuilder // TypeDefIndex: 1443
{}

// Namespace: System.Runtime.InteropServices
[GuidAttribute] // RVA: 0x531 Offset: 0x531 VA: 0x531
[TypeLibImportClassAttribute] // RVA: 0x531 Offset: 0x531 VA: 0x531
[ComVisibleAttribute] // RVA: 0x531 Offset: 0x531 VA: 0x531
[CLSCompliantAttribute] // RVA: 0x531 Offset: 0x531 VA: 0x531
[InterfaceTypeAttribute] // RVA: 0x531 Offset: 0x531 VA: 0x531
public interface _ModuleBuilder // TypeDefIndex: 1444
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x532 Offset: 0x532 VA: 0x532
[CLSCompliantAttribute] // RVA: 0x532 Offset: 0x532 VA: 0x532
[GuidAttribute] // RVA: 0x532 Offset: 0x532 VA: 0x532
[TypeLibImportClassAttribute] // RVA: 0x532 Offset: 0x532 VA: 0x532
[InterfaceTypeAttribute] // RVA: 0x532 Offset: 0x532 VA: 0x532
public interface _ParameterBuilder // TypeDefIndex: 1445
{}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0x533 Offset: 0x533 VA: 0x533
[GuidAttribute] // RVA: 0x533 Offset: 0x533 VA: 0x533
[CLSCompliantAttribute] // RVA: 0x533 Offset: 0x533 VA: 0x533
[InterfaceTypeAttribute] // RVA: 0x533 Offset: 0x533 VA: 0x533
[TypeLibImportClassAttribute] // RVA: 0x533 Offset: 0x533 VA: 0x533
public interface _PropertyBuilder // TypeDefIndex: 1446
{}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0x534 Offset: 0x534 VA: 0x534
[TypeLibImportClassAttribute] // RVA: 0x534 Offset: 0x534 VA: 0x534
[GuidAttribute] // RVA: 0x534 Offset: 0x534 VA: 0x534
[CLSCompliantAttribute] // RVA: 0x534 Offset: 0x534 VA: 0x534
[ComVisibleAttribute] // RVA: 0x534 Offset: 0x534 VA: 0x534
public interface _TypeBuilder // TypeDefIndex: 1447
{}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0x535 Offset: 0x535 VA: 0x535
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 1448
{
	// Properties
	public override MethodAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6 Slot: 20
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7 Slot: 8
	public override Type get_DeclaringType() { }

	// RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8 Slot: 19
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9 Slot: 7
	public override string get_Name() { }

	// RVA: 0x4EA Offset: 0x4EA VA: 0x4EA Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x2E0 Offset: 0x2E0 VA: 0x2E0 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x4EB Offset: 0x4EB VA: 0x4EB Slot: 18
	public override MethodImplAttributes GetMethodImplementationFlags() { }

	// RVA: 0x4EC Offset: 0x4EC VA: 0x4EC Slot: 17
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37 Slot: 21
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: Unity
internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1449
{
	// Methods

	// RVA: 0xF1C Offset: 0xF1C VA: 0xF1C
	public static void ThrowNotSupportedException() { }
}

// Namespace: System
internal class __Il2CppComObject // TypeDefIndex: 1450
{
	// Methods

	// RVA: 0x5F5 Offset: 0x5F5 VA: 0x5F5 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
internal sealed class __Il2CppComDelegate : __Il2CppComObject // TypeDefIndex: 1451
{
	// Methods

	// RVA: 0x5F4 Offset: 0x5F4 VA: 0x5F4 Slot: 1
	protected override void Finalize() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1452
{}

// Namespace: 
internal static class SR // TypeDefIndex: 1453
{
	// Methods

	// RVA: 0x51F Offset: 0x51F VA: 0x51F
	internal static string GetString(string name, object[] args) { }

	// RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	internal static string GetString(CultureInfo culture, string name, object[] args) { }

	// RVA: 0x9C8 Offset: 0x9C8 VA: 0x9C8
	internal static string GetString(string name) { }
}

// Namespace: System
internal static class IriHelper // TypeDefIndex: 1454
{
	// Methods

	// RVA: 0x526 Offset: 0x526 VA: 0x526
	internal static bool CheckIriUnicodeRange(char unicode, bool isQuery) { }

	// RVA: 0x132 Offset: 0x132 VA: 0x132
	internal static bool CheckIriUnicodeRange(char highSurr, char lowSurr, ref bool surrogatePair, bool isQuery) { }

	// RVA: 0x527 Offset: 0x527 VA: 0x527
	internal static bool CheckIsReserved(char ch, UriComponents component) { }

	// RVA: 0x133 Offset: 0x133 VA: 0x133
	internal static string EscapeUnescapeIri(char* pInput, int start, int end, UriComponents component) { }
}

// Namespace: System
[TypeConverterAttribute] // RVA: 0x80C Offset: 0x80C VA: 0x80C
[Serializable]
public class Uri : ISerializable // TypeDefIndex: 1455
{
	// Fields
	public static readonly string UriSchemeFile; // 0x0
	public static readonly string UriSchemeFtp; // 0x4
	public static readonly string UriSchemeGopher; // 0x8
	public static readonly string UriSchemeHttp; // 0xC
	public static readonly string UriSchemeHttps; // 0x10
	internal static readonly string UriSchemeWs; // 0x14
	internal static readonly string UriSchemeWss; // 0x18
	public static readonly string UriSchemeMailto; // 0x1C
	public static readonly string UriSchemeNews; // 0x20
	public static readonly string UriSchemeNntp; // 0x24
	public static readonly string UriSchemeNetTcp; // 0x28
	public static readonly string UriSchemeNetPipe; // 0x2C
	public static readonly string SchemeDelimiter; // 0x30
	private string m_String; // 0x8
	private string m_originalUnicodeString; // 0xC
	private UriParser m_Syntax; // 0x10
	private string m_DnsSafeHost; // 0x14
	private Uri.Flags m_Flags; // 0x18
	private Uri.UriInfo m_Info; // 0x20
	private bool m_iriParsing; // 0x24
	private static bool s_ConfigInitialized; // 0x34
	private static bool s_ConfigInitializing; // 0x35
	private static UriIdnScope s_IdnScope; // 0x38
	private static bool s_IriParsing; // 0x3C
	private static bool useDotNetRelativeOrAbsolute; // 0x3D
	internal static readonly bool IsWindowsFileSystem; // 0x3E
	private static object s_initLock; // 0x40
	internal static readonly char[] HexLowerChars; // 0x44
	private static readonly char[] _WSchars; // 0x48

	// Properties
	private bool IsImplicitFile { get; }
	private bool IsUncOrDosPath { get; }
	private bool IsDosPath { get; }
	private Uri.Flags HostType { get; }
	private UriParser Syntax { get; }
	private bool IsNotAbsoluteUri { get; }
	private bool AllowIdn { get; }
	internal bool UserDrivenParsing { get; }
	private ushort SecuredPathIndex { get; }
	private static object InitializeLock { get; }
	public int Port { get; }
	private bool OriginalStringSwitched { get; }
	public string OriginalString { get; }
	public bool IsAbsoluteUri { get; }

	// Methods

	// RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	private bool get_IsImplicitFile() { }

	// RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	private bool get_IsUncOrDosPath() { }

	// RVA: 0xA04 Offset: 0xA04 VA: 0xA04
	private bool get_IsDosPath() { }

	// RVA: 0x6A Offset: 0x6A VA: 0x6A
	private Uri.Flags get_HostType() { }

	// RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	private UriParser get_Syntax() { }

	// RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	private bool get_IsNotAbsoluteUri() { }

	// RVA: 0xA07 Offset: 0xA07 VA: 0xA07
	internal static bool IriParsingStatic(UriParser syntax) { }

	// RVA: 0xA08 Offset: 0xA08 VA: 0xA08
	private bool get_AllowIdn() { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	private bool AllowIdnStatic(UriParser syntax, Uri.Flags flags) { }

	// RVA: 0x540 Offset: 0x540 VA: 0x540
	private bool IsIntranet(string schemeHost) { }

	// RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	internal bool get_UserDrivenParsing() { }

	// RVA: 0x620 Offset: 0x620 VA: 0x620
	private void SetUserDrivenParsing() { }

	// RVA: 0xA0A Offset: 0xA0A VA: 0xA0A
	private ushort get_SecuredPathIndex() { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	private bool NotAny(Uri.Flags flags) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	private bool InFact(Uri.Flags flags) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static bool StaticNotAny(Uri.Flags allFlags, Uri.Flags checkFlags) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static bool StaticInFact(Uri.Flags allFlags, Uri.Flags checkFlags) { }

	// RVA: 0xA0B Offset: 0xA0B VA: 0xA0B
	private Uri.UriInfo EnsureUriInfo() { }

	// RVA: 0x621 Offset: 0x621 VA: 0x621
	private void EnsureParseRemaining() { }

	// RVA: 0x49A Offset: 0x49A VA: 0x49A
	private void EnsureHostString(bool allowDnsOptimization) { }

	// RVA: 0x49B Offset: 0x49B VA: 0x49B
	public void .ctor(string uriString) { }

	// RVA: 0xA0C Offset: 0xA0C VA: 0xA0C
	private static UriFormatException GetException(ParsingError err) { }

	// RVA: 0x320 Offset: 0x320 VA: 0x320
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x321 Offset: 0x321 VA: 0x321 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x322 Offset: 0x322 VA: 0x322
	protected void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	private static bool StaticIsFile(UriParser syntax) { }

	// RVA: 0x250 Offset: 0x250 VA: 0x250
	private static object get_InitializeLock() { }

	// RVA: 0xF24 Offset: 0xF24 VA: 0xF24
	private static void InitializeUriConfig() { }

	// RVA: 0xA0E Offset: 0xA0E VA: 0xA0E
	public int get_Port() { }

	// RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	private bool get_OriginalStringSwitched() { }

	// RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	public string get_OriginalString() { }

	// RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	public bool get_IsAbsoluteUri() { }

	// RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	internal static bool IsGenDelim(char ch) { }

	// RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	public static bool IsHexDigit(char character) { }

	// RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	public static int FromHex(char digit) { }

	// RVA: 0xA15 Offset: 0xA15 VA: 0xA15 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xA16 Offset: 0xA16 VA: 0xA16 Slot: 3
	public override string ToString() { }

	// RVA: 0x541 Offset: 0x541 VA: 0x541
	public static bool op_Inequality(Uri uri1, Uri uri2) { }

	// RVA: 0x542 Offset: 0x542 VA: 0x542 Slot: 0
	public override bool Equals(object comparand) { }

	// RVA: 0x9FA Offset: 0x9FA VA: 0x9FA
	private static ParsingError ParseScheme(string uriString, ref Uri.Flags flags, ref UriParser syntax) { }

	// RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	internal UriFormatException ParseMinimal() { }

	// RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	private ParsingError PrivateParseMinimal() { }

	// RVA: 0x323 Offset: 0x323 VA: 0x323
	private void PrivateParseMinimalIri(string newHost, ushort idx) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	private void CreateUriInfo(Uri.Flags cF) { }

	// RVA: 0x622 Offset: 0x622 VA: 0x622
	private void CreateHostString() { }

	// RVA: 0x82 Offset: 0x82 VA: 0x82
	private static string CreateHostStringHelper(string str, ushort idx, ushort end, ref Uri.Flags flags, ref string scopeId) { }

	// RVA: 0x623 Offset: 0x623 VA: 0x623
	private void GetHostViaCustomSyntax() { }

	// RVA: 0x9FB Offset: 0x9FB VA: 0x9FB
	internal string GetParts(UriComponents uriParts, UriFormat formatAs) { }

	// RVA: 0x543 Offset: 0x543 VA: 0x543
	private string GetEscapedParts(UriComponents uriParts) { }

	// RVA: 0x9FC Offset: 0x9FC VA: 0x9FC
	private string GetUnescapedParts(UriComponents uriParts, UriFormat formatAs) { }

	// RVA: 0x136 Offset: 0x136 VA: 0x136
	private string ReCreateParts(UriComponents parts, ushort nonCanonical, UriFormat formatAs) { }

	// RVA: 0x544 Offset: 0x544 VA: 0x544
	private string GetUriPartsFromUserString(UriComponents uriParts) { }

	// RVA: 0x624 Offset: 0x624 VA: 0x624
	private void ParseRemaining() { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83
	private static ushort ParseSchemeCheckImplicitFile(char* uriString, ushort length, ref ParsingError err, ref Uri.Flags flags, ref UriParser syntax) { }

	// RVA: 0x9FD Offset: 0x9FD VA: 0x9FD
	private static bool CheckKnownSchemes(long* lptr, ushort nChars, ref UriParser syntax) { }

	// RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	private static ParsingError CheckSchemeSyntax(char* ptr, ushort length, ref UriParser syntax) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	private ushort CheckAuthorityHelper(char* pString, ushort idx, ushort length, ref ParsingError err, ref Uri.Flags flags, UriParser syntax, ref string newHost) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private void CheckAuthorityHelperHandleDnsIri(char* pString, ushort start, int end, int startInput, bool iriParsing, bool hasUnicode, UriParser syntax, string userInfoString, ref Uri.Flags flags, ref bool justNormalized, ref string newHost, ref ParsingError err) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	private void CheckAuthorityHelperHandleAnyHostIri(char* pString, int startInput, int end, bool iriParsing, bool hasUnicode, UriParser syntax, ref Uri.Flags flags, ref string newHost, ref ParsingError err) { }

	// RVA: 0x71 Offset: 0x71 VA: 0x71
	private void FindEndOfComponent(string input, ref ushort idx, ushort end, char delim) { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72
	private void FindEndOfComponent(char* str, ref ushort idx, ushort end, char delim) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84
	private Uri.Check CheckCanonical(char* str, ref ushort idx, ushort end, char delim) { }

	// RVA: 0x137 Offset: 0x137 VA: 0x137
	private char[] GetCanonicalPath(char[] dest, ref int pos, UriFormat formatAs) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	private static void UnescapeOnly(char* pch, int start, ref int end, char ch1, char ch2, char ch3) { }

	// RVA: 0x138 Offset: 0x138 VA: 0x138
	private static char[] Compress(char[] dest, ushort start, ref int destLength, UriParser syntax) { }

	// RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	internal static int CalculateCaseInsensitiveHashCode(string text) { }

	// RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	private static bool IsLWS(char ch) { }

	// RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	private static bool IsAsciiLetter(char character) { }

	// RVA: 0xA1C Offset: 0xA1C VA: 0xA1C
	internal static bool IsAsciiLetterOrDigit(char character) { }

	// RVA: 0xA1D Offset: 0xA1D VA: 0xA1D
	internal static bool IsBidiControlCharacter(char ch) { }

	// RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	internal static string StripBidiControlCharacter(char* strToClean, int start, int length) { }

	// RVA: 0xEC Offset: 0xEC VA: 0xEC
	private void CreateThis(string uri, bool dontEscape, UriKind uriKind) { }

	// RVA: 0xED Offset: 0xED VA: 0xED
	private void InitializeUri(ParsingError err, UriKind uriKind, out UriFormatException e) { }

	// RVA: 0x545 Offset: 0x545 VA: 0x545
	private bool CheckForConfigLoad(string data) { }

	// RVA: 0x546 Offset: 0x546 VA: 0x546
	private bool CheckForUnicode(string data) { }

	// RVA: 0x547 Offset: 0x547 VA: 0x547
	private bool CheckForEscapedUnreserved(string data) { }

	// RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	public static bool TryCreate(string uriString, UriKind uriKind, out Uri result) { }

	// RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	public string GetComponents(UriComponents components, UriFormat format) { }

	// RVA: 0xA1E Offset: 0xA1E VA: 0xA1E
	public static string UnescapeDataString(string stringToUnescape) { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85
	internal string EscapeUnescapeIri(string input, int start, int end, UriComponents component) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private void .ctor(Uri.Flags flags, UriParser uriParser, string uri) { }

	// RVA: 0x139 Offset: 0x139 VA: 0x139
	internal static Uri CreateHelper(string uriString, bool dontEscape, UriKind uriKind, ref UriFormatException e) { }

	// RVA: 0x548 Offset: 0x548 VA: 0x548
	private string GetRelativeSerializationString(UriFormat format) { }

	// RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	internal string GetComponentsHelper(UriComponents uriComponents, UriFormat uriFormat) { }

	// RVA: 0xF25 Offset: 0xF25 VA: 0xF25
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x80D Offset: 0x80D VA: 0x80D
private enum Uri.Flags // TypeDefIndex: 1456
{
	// Fields
	public ulong value__; // 0x0
	public const Uri.Flags Zero = 0;
	public const Uri.Flags SchemeNotCanonical = 1;
	public const Uri.Flags UserNotCanonical = 2;
	public const Uri.Flags HostNotCanonical = 4;
	public const Uri.Flags PortNotCanonical = 8;
	public const Uri.Flags PathNotCanonical = 16;
	public const Uri.Flags QueryNotCanonical = 32;
	public const Uri.Flags FragmentNotCanonical = 64;
	public const Uri.Flags CannotDisplayCanonical = 127;
	public const Uri.Flags E_UserNotCanonical = 128;
	public const Uri.Flags E_HostNotCanonical = 256;
	public const Uri.Flags E_PortNotCanonical = 512;
	public const Uri.Flags E_PathNotCanonical = 1024;
	public const Uri.Flags E_QueryNotCanonical = 2048;
	public const Uri.Flags E_FragmentNotCanonical = 4096;
	public const Uri.Flags E_CannotDisplayCanonical = 8064;
	public const Uri.Flags ShouldBeCompressed = 8192;
	public const Uri.Flags FirstSlashAbsent = 16384;
	public const Uri.Flags BackslashInPath = 32768;
	public const Uri.Flags IndexMask = 65535;
	public const Uri.Flags HostTypeMask = 458752;
	public const Uri.Flags HostNotParsed = 0;
	public const Uri.Flags IPv6HostType = 65536;
	public const Uri.Flags IPv4HostType = 131072;
	public const Uri.Flags DnsHostType = 196608;
	public const Uri.Flags UncHostType = 262144;
	public const Uri.Flags BasicHostType = 327680;
	public const Uri.Flags UnusedHostType = 393216;
	public const Uri.Flags UnknownHostType = 458752;
	public const Uri.Flags UserEscaped = 524288;
	public const Uri.Flags AuthorityFound = 1048576;
	public const Uri.Flags HasUserInfo = 2097152;
	public const Uri.Flags LoopbackHost = 4194304;
	public const Uri.Flags NotDefaultPort = 8388608;
	public const Uri.Flags UserDrivenParsing = 16777216;
	public const Uri.Flags CanonicalDnsHost = 33554432;
	public const Uri.Flags ErrorOrParsingRecursion = 67108864;
	public const Uri.Flags DosPath = 134217728;
	public const Uri.Flags UncPath = 268435456;
	public const Uri.Flags ImplicitFile = 536870912;
	public const Uri.Flags MinimalUriInfoSet = 1073741824;
	public const Uri.Flags AllUriInfoSet = 2147483648;
	public const Uri.Flags IdnHost = 4294967296;
	public const Uri.Flags HasUnicode = 8589934592;
	public const Uri.Flags HostUnicodeNormalized = 17179869184;
	public const Uri.Flags RestUnicodeNormalized = 34359738368;
	public const Uri.Flags UnicodeHost = 68719476736;
	public const Uri.Flags IntranetUri = 137438953472;
	public const Uri.Flags UseOrigUncdStrOffset = 274877906944;
	public const Uri.Flags UserIriCanonical = 549755813888;
	public const Uri.Flags PathIriCanonical = 1099511627776;
	public const Uri.Flags QueryIriCanonical = 2199023255552;
	public const Uri.Flags FragmentIriCanonical = 4398046511104;
	public const Uri.Flags IriCanonical = 8246337208320;
	public const Uri.Flags CompressedSlashes = 17592186044416;
}

// Namespace: 
private class Uri.UriInfo // TypeDefIndex: 1457
{
	// Fields
	public string Host; // 0x8
	public string ScopeId; // 0xC
	public string String; // 0x10
	public Uri.Offset Offset; // 0x14
	public string DnsSafeHost; // 0x24
	public Uri.MoreInfo MoreInfo; // 0x28

	// Methods

	// RVA: 0x626 Offset: 0x626 VA: 0x626
	public void .ctor() { }
}

// Namespace: 
private struct Uri.Offset // TypeDefIndex: 1458
{
	// Fields
	public ushort Scheme; // 0x0
	public ushort User; // 0x2
	public ushort Host; // 0x4
	public ushort PortValue; // 0x6
	public ushort Path; // 0x8
	public ushort Query; // 0xA
	public ushort Fragment; // 0xC
	public ushort End; // 0xE
}

// Namespace: 
private class Uri.MoreInfo // TypeDefIndex: 1459
{
	// Fields
	public int Hash; // 0x8
	public string RemoteUrl; // 0xC

	// Methods

	// RVA: 0x625 Offset: 0x625 VA: 0x625
	public void .ctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x80E Offset: 0x80E VA: 0x80E
private enum Uri.Check // TypeDefIndex: 1460
{
	// Fields
	public int value__; // 0x0
	public const Uri.Check None = 0;
	public const Uri.Check EscapedCanonical = 1;
	public const Uri.Check DisplayCanonical = 2;
	public const Uri.Check DotSlashAttn = 4;
	public const Uri.Check DotSlashEscaped = 128;
	public const Uri.Check BackslashInPath = 16;
	public const Uri.Check ReservedFound = 32;
	public const Uri.Check NotIriCanonical = 64;
	public const Uri.Check FoundNonAscii = 8;
}

// Namespace: System
[Serializable]
public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1461
{
	// Methods

	// RVA: 0x627 Offset: 0x627 VA: 0x627
	public void .ctor() { }

	// RVA: 0x49C Offset: 0x49C VA: 0x49C
	public void .ctor(string textString) { }

	// RVA: 0x324 Offset: 0x324 VA: 0x324
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x325 Offset: 0x325 VA: 0x325 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System
public enum UriKind // TypeDefIndex: 1462
{
	// Fields
	public int value__; // 0x0
	public const UriKind RelativeOrAbsolute = 0;
	public const UriKind Absolute = 1;
	public const UriKind Relative = 2;
}

// Namespace: System
[FlagsAttribute] // RVA: 0x80F Offset: 0x80F VA: 0x80F
public enum UriComponents // TypeDefIndex: 1463
{
	// Fields
	public int value__; // 0x0
	public const UriComponents Scheme = 1;
	public const UriComponents UserInfo = 2;
	public const UriComponents Host = 4;
	public const UriComponents Port = 8;
	public const UriComponents Path = 16;
	public const UriComponents Query = 32;
	public const UriComponents Fragment = 64;
	public const UriComponents StrongPort = 128;
	public const UriComponents NormalizedHost = 256;
	public const UriComponents KeepDelimiter = 1073741824;
	public const UriComponents SerializationInfoString = -2147483648;
	public const UriComponents AbsoluteUri = 127;
	public const UriComponents HostAndPort = 132;
	public const UriComponents StrongAuthority = 134;
	public const UriComponents SchemeAndServer = 13;
	public const UriComponents HttpRequestUrl = 61;
	public const UriComponents PathAndQuery = 48;
}

// Namespace: System
public enum UriFormat // TypeDefIndex: 1464
{
	// Fields
	public int value__; // 0x0
	public const UriFormat UriEscaped = 1;
	public const UriFormat Unescaped = 2;
	public const UriFormat SafeUnescaped = 3;
}

// Namespace: System
public enum UriIdnScope // TypeDefIndex: 1465
{
	// Fields
	public int value__; // 0x0
	public const UriIdnScope None = 0;
	public const UriIdnScope AllExceptIntranet = 1;
	public const UriIdnScope All = 2;
}

// Namespace: System
internal enum ParsingError // TypeDefIndex: 1466
{
	// Fields
	public int value__; // 0x0
	public const ParsingError None = 0;
	public const ParsingError BadFormat = 1;
	public const ParsingError BadScheme = 2;
	public const ParsingError BadAuthority = 3;
	public const ParsingError EmptyUriString = 4;
	public const ParsingError LastRelativeUriOkErrIndex = 4;
	public const ParsingError SchemeLimit = 5;
	public const ParsingError SizeLimit = 6;
	public const ParsingError MustRootedPath = 7;
	public const ParsingError BadHostName = 8;
	public const ParsingError NonEmptyHost = 9;
	public const ParsingError BadPort = 10;
	public const ParsingError BadAuthorityTerminator = 11;
	public const ParsingError CannotCreateRelative = 12;
}

// Namespace: System
[FlagsAttribute] // RVA: 0x810 Offset: 0x810 VA: 0x810
internal enum UnescapeMode // TypeDefIndex: 1467
{
	// Fields
	public int value__; // 0x0
	public const UnescapeMode CopyOnly = 0;
	public const UnescapeMode Escape = 1;
	public const UnescapeMode Unescape = 2;
	public const UnescapeMode EscapeUnescape = 3;
	public const UnescapeMode V1ToStringFlag = 4;
	public const UnescapeMode UnescapeAll = 8;
	public const UnescapeMode UnescapeAllOrThrow = 24;
}

// Namespace: System
internal static class UriHelper // TypeDefIndex: 1468
{
	// Fields
	private static readonly char[] HexUpperChars; // 0xFFFFFFFF

	// Methods

	// RVA: 0xB Offset: 0xB VA: 0xB
	internal static char[] EscapeString(string input, int start, int end, char[] dest, ref int destPos, bool isUriString, char force1, char force2, char rsvd) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	private static char[] EnsureDestinationSize(char* pStr, char[] dest, int currentInputPos, short charsToAdd, short minReallocateChars, ref int destPos, int prevInputPos) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal static char[] UnescapeString(string input, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	internal static char[] UnescapeString(char* pStr, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	internal static void MatchUTF8Sequence(char* pDest, char[] dest, ref int destOffset, char[] unescapedChars, int charCount, byte[] bytes, int byteCount, bool isQuery, bool iriParsing) { }

	// RVA: 0x326 Offset: 0x326 VA: 0x326
	internal static void EscapeAsciiChar(char ch, char[] to, ref int pos) { }

	// RVA: 0x549 Offset: 0x549 VA: 0x549
	internal static char EscapedAscii(char digit, char next) { }

	// RVA: 0xA1F Offset: 0xA1F VA: 0xA1F
	internal static bool IsNotSafeForUnescape(char ch) { }

	// RVA: 0xA20 Offset: 0xA20 VA: 0xA20
	private static bool IsReservedUnreservedOrHash(char c) { }

	// RVA: 0xA21 Offset: 0xA21 VA: 0xA21
	internal static bool IsUnreserved(char c) { }

	// RVA: 0xA22 Offset: 0xA22 VA: 0xA22
	internal static bool Is3986Unreserved(char c) { }

	// RVA: 0xF26 Offset: 0xF26 VA: 0xF26
	private static void .cctor() { }
}

// Namespace: System
public abstract class UriParser // TypeDefIndex: 1469
{
	// Fields
	private static readonly Dictionary<string, UriParser> m_Table; // 0x0
	private static Dictionary<string, UriParser> m_TempTable; // 0x4
	private UriSyntaxFlags m_Flags; // 0x8
	private UriSyntaxFlags m_UpdatableFlags; // 0xC
	private bool m_UpdatableFlagsUsed; // 0x10
	private int m_Port; // 0x14
	private string m_Scheme; // 0x18
	internal static UriParser HttpUri; // 0x8
	internal static UriParser HttpsUri; // 0xC
	internal static UriParser WsUri; // 0x10
	internal static UriParser WssUri; // 0x14
	internal static UriParser FtpUri; // 0x18
	internal static UriParser FileUri; // 0x1C
	internal static UriParser GopherUri; // 0x20
	internal static UriParser NntpUri; // 0x24
	internal static UriParser NewsUri; // 0x28
	internal static UriParser MailToUri; // 0x2C
	internal static UriParser UuidUri; // 0x30
	internal static UriParser TelnetUri; // 0x34
	internal static UriParser LdapUri; // 0x38
	internal static UriParser NetTcpUri; // 0x3C
	internal static UriParser NetPipeUri; // 0x40
	internal static UriParser VsMacrosUri; // 0x44
	private static readonly UriParser.UriQuirksVersion s_QuirksVersion; // 0x48
	private static readonly UriSyntaxFlags HttpSyntaxFlags; // 0x4C
	private static readonly UriSyntaxFlags FileSyntaxFlags; // 0x50

	// Properties
	internal string SchemeName { get; }
	internal int DefaultPort { get; }
	internal static bool ShouldUseLegacyV2Quirks { get; }
	internal UriSyntaxFlags Flags { get; }
	internal bool IsSimple { get; }

	// Methods

	// RVA: 0xA23 Offset: 0xA23 VA: 0xA23
	internal string get_SchemeName() { }

	// RVA: 0xA24 Offset: 0xA24 VA: 0xA24
	internal int get_DefaultPort() { }

	// RVA: 0xA25 Offset: 0xA25 VA: 0xA25 Slot: 4
	protected virtual UriParser OnNewUri() { }

	// RVA: 0x327 Offset: 0x327 VA: 0x327 Slot: 5
	protected virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError) { }

	// RVA: 0x13A Offset: 0x13A VA: 0x13A Slot: 6
	protected virtual string GetComponents(Uri uri, UriComponents components, UriFormat format) { }

	// RVA: 0x251 Offset: 0x251 VA: 0x251
	internal static bool get_ShouldUseLegacyV2Quirks() { }

	// RVA: 0xF27 Offset: 0xF27 VA: 0xF27
	private static void .cctor() { }

	// RVA: 0xA26 Offset: 0xA26 VA: 0xA26
	internal UriSyntaxFlags get_Flags() { }

	// RVA: 0x54A Offset: 0x54A VA: 0x54A
	internal bool NotAny(UriSyntaxFlags flags) { }

	// RVA: 0x54B Offset: 0x54B VA: 0x54B
	internal bool InFact(UriSyntaxFlags flags) { }

	// RVA: 0x54C Offset: 0x54C VA: 0x54C
	internal bool IsAllSet(UriSyntaxFlags flags) { }

	// RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	private bool IsFullMatch(UriSyntaxFlags flags, UriSyntaxFlags expected) { }

	// RVA: 0x49D Offset: 0x49D VA: 0x49D
	internal void .ctor(UriSyntaxFlags flags) { }

	// RVA: 0xA27 Offset: 0xA27 VA: 0xA27
	internal static UriParser FindOrFetchAsUnknownV1Syntax(string lwrCaseScheme) { }

	// RVA: 0xA28 Offset: 0xA28 VA: 0xA28
	internal bool get_IsSimple() { }

	// RVA: 0xA29 Offset: 0xA29 VA: 0xA29
	internal UriParser InternalOnNewUri() { }

	// RVA: 0x328 Offset: 0x328 VA: 0x328
	internal void InternalValidate(Uri thisUri, out UriFormatException parsingError) { }

	// RVA: 0x13B Offset: 0x13B VA: 0x13B
	internal string InternalGetComponents(Uri thisUri, UriComponents uriComponents, UriFormat uriFormat) { }
}

// Namespace: 
private enum UriParser.UriQuirksVersion // TypeDefIndex: 1470
{
	// Fields
	public int value__; // 0x0
	public const UriParser.UriQuirksVersion V2 = 2;
	public const UriParser.UriQuirksVersion V3 = 3;
}

// Namespace: 
private class UriParser.BuiltInUriParser : UriParser // TypeDefIndex: 1471
{
	// Methods

	// RVA: 0xEE Offset: 0xEE VA: 0xEE
	internal void .ctor(string lwrCaseScheme, int defaultPort, UriSyntaxFlags syntaxFlags) { }
}

// Namespace: System
internal class DomainNameHelper // TypeDefIndex: 1472
{
	// Methods

	// RVA: 0x129 Offset: 0x129 VA: 0x129
	internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback) { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C
	internal static bool IsValid(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	internal static bool IsValidByIri(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile) { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	internal static string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn) { }

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	internal static string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref string bidiStrippedHost) { }

	// RVA: 0x522 Offset: 0x522 VA: 0x522
	private static bool IsIdnAce(string input, int index) { }

	// RVA: 0x523 Offset: 0x523 VA: 0x523
	private static bool IsIdnAce(char* input, int index) { }

	// RVA: 0x12A Offset: 0x12A VA: 0x12A
	internal static string UnicodeEquivalent(string idnHost, char* hostname, int start, int end) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80
	internal static string UnicodeEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn) { }

	// RVA: 0x524 Offset: 0x524 VA: 0x524
	private static bool IsASCIILetterOrDigit(char character, ref bool notCanonical) { }

	// RVA: 0x525 Offset: 0x525 VA: 0x525
	private static bool IsValidDomainLabelCharacter(char character, ref bool notCanonical) { }
}

// Namespace: System
internal static class IPv4AddressHelper // TypeDefIndex: 1473
{
	// Methods

	// RVA: 0x12C Offset: 0x12C VA: 0x12C
	internal static string ParseCanonicalName(string str, int start, int end, ref bool isLoopback) { }

	// RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	internal static int ParseHostNumber(string str, int start, int end) { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78
	internal static bool IsValid(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile, bool unknownScheme) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81
	internal static bool IsValidCanonical(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	internal static long ParseNonCanonical(char* name, int start, ref int end, bool notImplicitFile) { }

	// RVA: 0x12D Offset: 0x12D VA: 0x12D
	private static bool Parse(string name, byte* numbers, int start, int end) { }

	// RVA: 0x12E Offset: 0x12E VA: 0x12E
	private static bool ParseCanonical(string name, byte* numbers, int start, int end) { }
}

// Namespace: System
internal static class IPv6AddressHelper // TypeDefIndex: 1474
{
	// Methods

	// RVA: 0x12F Offset: 0x12F VA: 0x12F
	internal static string ParseCanonicalName(string str, int start, ref bool isLoopback, ref string scopeId) { }

	// RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	internal static string CreateCanonicalName(ushort* numbers) { }

	// RVA: 0x489 Offset: 0x489 VA: 0x489
	private static KeyValuePair<int, int> FindCompressionRange(ushort* numbers) { }

	// RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5
	private static bool ShouldHaveIpv4Embedded(ushort* numbers) { }

	// RVA: 0x130 Offset: 0x130 VA: 0x130
	private static bool InternalIsValid(char* name, int start, ref int end, bool validateStrictAddress) { }

	// RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	internal static bool IsValid(char* name, int start, ref int end) { }

	// RVA: 0x131 Offset: 0x131 VA: 0x131
	internal static bool Parse(string address, ushort* numbers, int start, ref string scopeId) { }
}

// Namespace: System
internal class UncNameHelper // TypeDefIndex: 1475
{
	// Methods

	// RVA: 0x134 Offset: 0x134 VA: 0x134
	internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback) { }

	// RVA: 0x135 Offset: 0x135 VA: 0x135
	internal static bool IsValid(char* name, ushort start, ref int returnedEnd, bool notImplicitFile) { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x811 Offset: 0x811 VA: 0x811
internal enum UriSyntaxFlags // TypeDefIndex: 1476
{
	// Fields
	public int value__; // 0x0
	public const UriSyntaxFlags None = 0;
	public const UriSyntaxFlags MustHaveAuthority = 1;
	public const UriSyntaxFlags OptionalAuthority = 2;
	public const UriSyntaxFlags MayHaveUserInfo = 4;
	public const UriSyntaxFlags MayHavePort = 8;
	public const UriSyntaxFlags MayHavePath = 16;
	public const UriSyntaxFlags MayHaveQuery = 32;
	public const UriSyntaxFlags MayHaveFragment = 64;
	public const UriSyntaxFlags AllowEmptyHost = 128;
	public const UriSyntaxFlags AllowUncHost = 256;
	public const UriSyntaxFlags AllowDnsHost = 512;
	public const UriSyntaxFlags AllowIPv4Host = 1024;
	public const UriSyntaxFlags AllowIPv6Host = 2048;
	public const UriSyntaxFlags AllowAnInternetHost = 3584;
	public const UriSyntaxFlags AllowAnyOtherHost = 4096;
	public const UriSyntaxFlags FileLikeUri = 8192;
	public const UriSyntaxFlags MailToLikeUri = 16384;
	public const UriSyntaxFlags V1_UnknownUri = 65536;
	public const UriSyntaxFlags SimpleUserSyntax = 131072;
	public const UriSyntaxFlags BuiltInSyntax = 262144;
	public const UriSyntaxFlags ParserSchemeOnly = 524288;
	public const UriSyntaxFlags AllowDOSPath = 1048576;
	public const UriSyntaxFlags PathIsRooted = 2097152;
	public const UriSyntaxFlags ConvertPathSlashes = 4194304;
	public const UriSyntaxFlags CompressPath = 8388608;
	public const UriSyntaxFlags CanonicalizeAsFilePath = 16777216;
	public const UriSyntaxFlags UnEscapeDotsAndSlashes = 33554432;
	public const UriSyntaxFlags AllowIdn = 67108864;
	public const UriSyntaxFlags AllowIriParsing = 268435456;
}

// Namespace: System
internal enum IOOperation // TypeDefIndex: 1477
{
	// Fields
	public int value__; // 0x0
	public const IOOperation Read = 1;
	public const IOOperation Write = 2;
}

// Namespace: System
internal sealed class IOAsyncCallback : MulticastDelegate // TypeDefIndex: 1478
{
	// Methods

	// RVA: 0x314 Offset: 0x314 VA: 0x314
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x486 Offset: 0x486 VA: 0x486 Slot: 12
	public virtual void Invoke(IOAsyncResult ioares) { }

	// RVA: 0x12B Offset: 0x12B VA: 0x12B Slot: 13
	public virtual IAsyncResult BeginInvoke(IOAsyncResult ioares, AsyncCallback callback, object object) { }

	// RVA: 0x487 Offset: 0x487 VA: 0x487 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
internal abstract class IOAsyncResult : IAsyncResult // TypeDefIndex: 1479
{
	// Fields
	private AsyncCallback async_callback; // 0x8
	private object async_state; // 0xC
	private ManualResetEvent wait_handle; // 0x10
	private bool completed_synchronously; // 0x14
	private bool completed; // 0x15

	// Properties
	public WaitHandle AsyncWaitHandle { get; }

	// Methods

	// RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3 Slot: 4
	public WaitHandle get_AsyncWaitHandle() { }
}

// Namespace: System
internal class IOSelectorJob : IThreadPoolWorkItem // TypeDefIndex: 1480
{
	// Fields
	private IOOperation operation; // 0x8
	private IOAsyncCallback callback; // 0xC
	private IOAsyncResult state; // 0x10

	// Methods

	// RVA: 0x608 Offset: 0x608 VA: 0x608 Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }

	// RVA: 0x488 Offset: 0x488 VA: 0x488 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
}

// Namespace: System
public class UriTypeConverter : TypeConverter // TypeDefIndex: 1481
{
	// Methods

	// RVA: 0x628 Offset: 0x628 VA: 0x628
	public void .ctor() { }
}

// Namespace: System.Diagnostics
public class Stopwatch // TypeDefIndex: 1482
{
	// Fields
	public static readonly long Frequency; // 0x0
	public static readonly bool IsHighResolution; // 0x8
	private long elapsed; // 0x8
	private long started; // 0x10
	private bool is_running; // 0x18

	// Properties
	public TimeSpan Elapsed { get; }
	public long ElapsedMilliseconds { get; }
	public long ElapsedTicks { get; }

	// Methods

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public static long GetTimestamp() { }

	// RVA: 0x606 Offset: 0x606 VA: 0x606
	public void .ctor() { }

	// RVA: 0x66 Offset: 0x66 VA: 0x66
	public TimeSpan get_Elapsed() { }

	// RVA: 0x67 Offset: 0x67 VA: 0x67
	public long get_ElapsedMilliseconds() { }

	// RVA: 0x68 Offset: 0x68 VA: 0x68
	public long get_ElapsedTicks() { }

	// RVA: 0x607 Offset: 0x607 VA: 0x607
	public void Start() { }

	// RVA: 0xF21 Offset: 0xF21 VA: 0xF21
	private static void .cctor() { }
}

// Namespace: System.ComponentModel
public class ArrayConverter : CollectionConverter // TypeDefIndex: 1483
{
	// Methods

	// RVA: 0x5F6 Offset: 0x5F6 VA: 0x5F6
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class BooleanConverter : TypeConverter // TypeDefIndex: 1484
{
	// Fields
	private static TypeConverter.StandardValuesCollection values; // 0xFFFFFFFF

	// Methods

	// RVA: 0x5F8 Offset: 0x5F8 VA: 0x5F8
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class CollectionConverter : TypeConverter // TypeDefIndex: 1485
{
	// Methods

	// RVA: 0x5F9 Offset: 0x5F9 VA: 0x5F9
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1486
{
	// Methods

	// RVA: 0x5FA Offset: 0x5FA VA: 0x5FA
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1487
{
	// Methods

	// RVA: 0x5FB Offset: 0x5FB VA: 0x5FB
	public void .ctor() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0x812 Offset: 0x812 VA: 0x812
public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1488
{
	// Fields
	private EditorBrowsableState browsableState; // 0x8

	// Methods

	// RVA: 0x482 Offset: 0x482 VA: 0x482
	public void .ctor(EditorBrowsableState state) { }

	// RVA: 0x520 Offset: 0x520 VA: 0x520 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x9C9 Offset: 0x9C9 VA: 0x9C9 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
public enum EditorBrowsableState // TypeDefIndex: 1489
{
	// Fields
	public int value__; // 0x0
	public const EditorBrowsableState Always = 0;
	public const EditorBrowsableState Never = 1;
	public const EditorBrowsableState Advanced = 2;
}

// Namespace: System.ComponentModel
public class EnumConverter : TypeConverter // TypeDefIndex: 1490
{
	// Fields
	private TypeConverter.StandardValuesCollection values; // 0x8
	private Type type; // 0xC

	// Methods

	// RVA: 0x483 Offset: 0x483 VA: 0x483
	public void .ctor(Type type) { }
}

// Namespace: System.ComponentModel
public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1491
{
	// Methods

	// RVA: 0x5FC Offset: 0x5FC VA: 0x5FC
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1492
{
	// Methods

	// RVA: 0x5FD Offset: 0x5FD VA: 0x5FD
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1493
{
	// Methods

	// RVA: 0x5FE Offset: 0x5FE VA: 0x5FE
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class SingleConverter : BaseNumberConverter // TypeDefIndex: 1494
{
	// Methods

	// RVA: 0x5FF Offset: 0x5FF VA: 0x5FF
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class StringConverter : TypeConverter // TypeDefIndex: 1495
{
	// Methods

	// RVA: 0x600 Offset: 0x600 VA: 0x600
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class TimeSpanConverter : TypeConverter // TypeDefIndex: 1496
{
	// Methods

	// RVA: 0x601 Offset: 0x601 VA: 0x601
	public void .ctor() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0x813 Offset: 0x813 VA: 0x813
public class TypeConverter // TypeDefIndex: 1497
{
	// Fields
	private const string s_UseCompatibleTypeConverterBehavior = "UseCompatibleTypeConverterBehavior";
	private static bool useCompatibleTypeConversion; // 0xFFFFFFFF

	// Methods

	// RVA: 0x602 Offset: 0x602 VA: 0x602
	public void .ctor() { }

	// RVA: 0xF1D Offset: 0xF1D VA: 0xF1D
	private static void .cctor() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0x814 Offset: 0x814 VA: 0x814
public class TypeConverter.StandardValuesCollection : ICollection, IEnumerable // TypeDefIndex: 1498
{
	// Fields
	private ICollection values; // 0x8
	private Array valueArray; // 0xC

	// Properties
	public int Count { get; }
	private int System.Collections.ICollection.Count { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }

	// Methods

	// RVA: 0x9CA Offset: 0x9CA VA: 0x9CA
	public int get_Count() { }

	// RVA: 0x30F Offset: 0x30F VA: 0x30F
	public void CopyTo(Array array, int index) { }

	// RVA: 0x9CB Offset: 0x9CB VA: 0x9CB
	public IEnumerator GetEnumerator() { }

	// RVA: 0x9CC Offset: 0x9CC VA: 0x9CC Slot: 5
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x9CD Offset: 0x9CD VA: 0x9CD Slot: 7
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x9CE Offset: 0x9CE VA: 0x9CE Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x310 Offset: 0x310 VA: 0x310 Slot: 4
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x9CF Offset: 0x9CF VA: 0x9CF Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0x815 Offset: 0x815 VA: 0x815
public sealed class TypeConverterAttribute : Attribute // TypeDefIndex: 1499
{
	// Fields
	private string typeName; // 0x8
	public static readonly TypeConverterAttribute Default; // 0x0

	// Properties
	public string ConverterTypeName { get; }

	// Methods

	// RVA: 0x603 Offset: 0x603 VA: 0x603
	public void .ctor() { }

	// RVA: 0x484 Offset: 0x484 VA: 0x484
	public void .ctor(Type type) { }

	// RVA: 0x9D0 Offset: 0x9D0 VA: 0x9D0
	public string get_ConverterTypeName() { }

	// RVA: 0x521 Offset: 0x521 VA: 0x521 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x9D1 Offset: 0x9D1 VA: 0x9D1 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF1E Offset: 0xF1E VA: 0xF1E
	private static void .cctor() { }
}

// Namespace: System.ComponentModel
[Serializable]
public class Win32Exception : ExternalException, ISerializable // TypeDefIndex: 1500
{
	// Fields
	private readonly int nativeErrorCode; // 0x44
	private static bool s_ErrorMessagesInitialized; // 0x0
	private static Dictionary<int, string> s_ErrorMessage; // 0x4

	// Methods

	// RVA: 0x604 Offset: 0x604 VA: 0x604
	public void .ctor() { }

	// RVA: 0x485 Offset: 0x485 VA: 0x485
	public void .ctor(int error) { }

	// RVA: 0x311 Offset: 0x311 VA: 0x311
	public void .ctor(int error, string message) { }

	// RVA: 0x312 Offset: 0x312 VA: 0x312
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x313 Offset: 0x313 VA: 0x313 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x9D2 Offset: 0x9D2 VA: 0x9D2
	internal static string GetErrorMessage(int error) { }

	// RVA: 0xF1F Offset: 0xF1F VA: 0xF1F
	private static void InitializeErrorMessages() { }

	// RVA: 0xF20 Offset: 0xF20 VA: 0xF20
	private static void .cctor() { }
}

// Namespace: System.ComponentModel
public abstract class BaseNumberConverter : TypeConverter // TypeDefIndex: 1501
{
	// Methods

	// RVA: 0x5F7 Offset: 0x5F7 VA: 0x5F7
	protected void .ctor() { }
}

// Namespace: System.Security.Cryptography
public enum OidGroup // TypeDefIndex: 1502
{
	// Fields
	public int value__; // 0x0
	public const OidGroup All = 0;
	public const OidGroup HashAlgorithm = 1;
	public const OidGroup EncryptionAlgorithm = 2;
	public const OidGroup PublicKeyAlgorithm = 3;
	public const OidGroup SignatureAlgorithm = 4;
	public const OidGroup Attribute = 5;
	public const OidGroup ExtensionOrAttribute = 6;
	public const OidGroup EnhancedKeyUsage = 7;
	public const OidGroup Policy = 8;
	public const OidGroup Template = 9;
	public const OidGroup KeyDerivationFunction = 10;
}

// Namespace: System.Security.Cryptography
public sealed class Oid // TypeDefIndex: 1503
{
	// Fields
	private string m_value; // 0x8
	private string m_friendlyName; // 0xC
	private OidGroup m_group; // 0x10

	// Properties
	public string Value { get; set; }

	// Methods

	// RVA: 0x490 Offset: 0x490 VA: 0x490
	public void .ctor(string oid) { }

	// RVA: 0xEA Offset: 0xEA VA: 0xEA
	internal void .ctor(string oid, OidGroup group, bool lookupFriendlyName) { }

	// RVA: 0x316 Offset: 0x316 VA: 0x316
	public void .ctor(string value, string friendlyName) { }

	// RVA: 0x491 Offset: 0x491 VA: 0x491
	public void .ctor(Oid oid) { }

	// RVA: 0x9ED Offset: 0x9ED VA: 0x9ED
	public string get_Value() { }

	// RVA: 0x492 Offset: 0x492 VA: 0x492
	public void set_Value(string value) { }
}

// Namespace: System.Security.Cryptography
[DefaultMemberAttribute] // RVA: 0x816 Offset: 0x816 VA: 0x816
public sealed class OidCollection : ICollection, IEnumerable // TypeDefIndex: 1504
{
	// Fields
	private ArrayList m_list; // 0x8

	// Properties
	public Oid Item { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x61B Offset: 0x61B VA: 0x61B
	public void .ctor() { }

	// RVA: 0x533 Offset: 0x533 VA: 0x533
	public int Add(Oid oid) { }

	// RVA: 0x534 Offset: 0x534 VA: 0x534
	public Oid get_Item(int index) { }

	// RVA: 0x9EE Offset: 0x9EE VA: 0x9EE Slot: 5
	public int get_Count() { }

	// RVA: 0x9EF Offset: 0x9EF VA: 0x9EF Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x317 Offset: 0x317 VA: 0x317 Slot: 4
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0 Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1 Slot: 6
	public object get_SyncRoot() { }
}

// Namespace: System.Security.Cryptography
public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1505
{
	// Fields
	private OidCollection m_oids; // 0x8
	private int m_current; // 0xC

	// Properties
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: 0x493 Offset: 0x493 VA: 0x493
	internal void .ctor(OidCollection oids) { }

	// RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3 Slot: 4
	public bool MoveNext() { }
}

// Namespace: System.Security.Cryptography
internal static class CAPI // TypeDefIndex: 1506
{
	// Methods

	// RVA: 0x531 Offset: 0x531 VA: 0x531
	public static string CryptFindOIDInfoNameFromKey(string key, OidGroup oidGroup) { }

	// RVA: 0x532 Offset: 0x532 VA: 0x532
	public static string CryptFindOIDInfoKeyFromName(string name, OidGroup oidGroup) { }
}

// Namespace: System.Security.Cryptography
internal enum AsnDecodeStatus // TypeDefIndex: 1507
{
	// Fields
	public int value__; // 0x0
	public const AsnDecodeStatus NotDecoded = -1;
	public const AsnDecodeStatus Ok = 0;
	public const AsnDecodeStatus BadAsn = 1;
	public const AsnDecodeStatus BadTag = 2;
	public const AsnDecodeStatus BadLength = 3;
	public const AsnDecodeStatus InformationNotAvailable = 4;
}

// Namespace: System.Security.Cryptography
public class AsnEncodedData // TypeDefIndex: 1508
{
	// Fields
	internal Oid _oid; // 0x8
	internal byte[] _raw; // 0xC

	// Properties
	public Oid Oid { set; }
	public byte[] RawData { get; set; }

	// Methods

	// RVA: 0x61A Offset: 0x61A VA: 0x61A
	protected void .ctor() { }

	// RVA: 0x48D Offset: 0x48D VA: 0x48D
	public void set_Oid(Oid value) { }

	// RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	public byte[] get_RawData() { }

	// RVA: 0x48E Offset: 0x48E VA: 0x48E
	public void set_RawData(byte[] value) { }

	// RVA: 0x48F Offset: 0x48F VA: 0x48F Slot: 4
	public virtual void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x529 Offset: 0x529 VA: 0x529 Slot: 5
	internal virtual string ToString(bool multiLine) { }

	// RVA: 0x52A Offset: 0x52A VA: 0x52A
	internal string Default(bool multiLine) { }

	// RVA: 0x52B Offset: 0x52B VA: 0x52B
	internal string BasicConstraintsExtension(bool multiLine) { }

	// RVA: 0x52C Offset: 0x52C VA: 0x52C
	internal string EnhancedKeyUsageExtension(bool multiLine) { }

	// RVA: 0x52D Offset: 0x52D VA: 0x52D
	internal string KeyUsageExtension(bool multiLine) { }

	// RVA: 0x52E Offset: 0x52E VA: 0x52E
	internal string SubjectKeyIdentifierExtension(bool multiLine) { }

	// RVA: 0x52F Offset: 0x52F VA: 0x52F
	internal string SubjectAltName(bool multiLine) { }

	// RVA: 0x530 Offset: 0x530 VA: 0x530
	internal string NetscapeCertType(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0x817 Offset: 0x817 VA: 0x817
public enum X509KeyUsageFlags // TypeDefIndex: 1509
{
	// Fields
	public int value__; // 0x0
	public const X509KeyUsageFlags None = 0;
	public const X509KeyUsageFlags EncipherOnly = 1;
	public const X509KeyUsageFlags CrlSign = 2;
	public const X509KeyUsageFlags KeyCertSign = 4;
	public const X509KeyUsageFlags KeyAgreement = 8;
	public const X509KeyUsageFlags DataEncipherment = 16;
	public const X509KeyUsageFlags KeyEncipherment = 32;
	public const X509KeyUsageFlags NonRepudiation = 64;
	public const X509KeyUsageFlags DigitalSignature = 128;
	public const X509KeyUsageFlags DecipherOnly = 32768;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1510
{
	// Fields
	public int value__; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm Sha1 = 0;
	public const X509SubjectKeyIdentifierHashAlgorithm ShortSha1 = 1;
	public const X509SubjectKeyIdentifierHashAlgorithm CapiSha1 = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
internal class X509Utils // TypeDefIndex: 1511
{
	// Methods

	// RVA: 0x9F8 Offset: 0x9F8 VA: 0x9F8
	internal static string FindOidInfo(uint keyType, string keyValue, OidGroup oidGroup) { }

	// RVA: 0x9F9 Offset: 0x9F9 VA: 0x9F9
	internal static string FindOidInfoWithFallback(uint key, string value, OidGroup group) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class PublicKey // TypeDefIndex: 1512
{
	// Fields
	private AsnEncodedData _keyValue; // 0x8
	private AsnEncodedData _params; // 0xC
	private Oid _oid; // 0x10
	private static byte[] Empty; // 0x0

	// Properties
	public AsnEncodedData EncodedKeyValue { get; }
	public AsnEncodedData EncodedParameters { get; }
	public Oid Oid { get; }

	// Methods

	// RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	public AsnEncodedData get_EncodedKeyValue() { }

	// RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	public AsnEncodedData get_EncodedParameters() { }

	// RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	public Oid get_Oid() { }

	// RVA: 0xF23 Offset: 0xF23 VA: 0xF23
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509BasicConstraintsExtension : X509Extension // TypeDefIndex: 1513
{
	// Fields
	internal const string oid = "2.5.29.19";
	internal const string friendlyName = "Basic Constraints";
	private bool _certificateAuthority; // 0x11
	private bool _hasPathLengthConstraint; // 0x12
	private int _pathLengthConstraint; // 0x14
	private AsnDecodeStatus _status; // 0x18

	// Properties
	public bool CertificateAuthority { get; }
	public bool HasPathLengthConstraint { get; }
	public int PathLengthConstraint { get; }

	// Methods

	// RVA: 0x61C Offset: 0x61C VA: 0x61C
	public void .ctor() { }

	// RVA: 0x318 Offset: 0x318 VA: 0x318
	public void .ctor(AsnEncodedData encodedBasicConstraints, bool critical) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70
	public void .ctor(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical) { }

	// RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	public bool get_CertificateAuthority() { }

	// RVA: 0x9F8 Offset: 0x9F8 VA: 0x9F8
	public bool get_HasPathLengthConstraint() { }

	// RVA: 0x9F9 Offset: 0x9F9 VA: 0x9F9
	public int get_PathLengthConstraint() { }

	// RVA: 0x494 Offset: 0x494 VA: 0x494 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x535 Offset: 0x535 VA: 0x535
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x9FA Offset: 0x9FA VA: 0x9FA
	internal byte[] Encode() { }

	// RVA: 0x536 Offset: 0x536 VA: 0x536 Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509EnhancedKeyUsageExtension : X509Extension // TypeDefIndex: 1514
{
	// Fields
	private OidCollection _enhKeyUsage; // 0x14
	private AsnDecodeStatus _status; // 0x18

	// Methods

	// RVA: 0x319 Offset: 0x319 VA: 0x319
	public void .ctor(AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }

	// RVA: 0x495 Offset: 0x495 VA: 0x495 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x537 Offset: 0x537 VA: 0x537
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x538 Offset: 0x538 VA: 0x538 Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Extension : AsnEncodedData // TypeDefIndex: 1515
{
	// Fields
	private bool _critical; // 0x10

	// Properties
	public bool Critical { get; set; }

	// Methods

	// RVA: 0x61D Offset: 0x61D VA: 0x61D
	protected void .ctor() { }

	// RVA: 0x9FB Offset: 0x9FB VA: 0x9FB
	public bool get_Critical() { }

	// RVA: 0x496 Offset: 0x496 VA: 0x496
	public void set_Critical(bool value) { }

	// RVA: 0x497 Offset: 0x497 VA: 0x497 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x539 Offset: 0x539 VA: 0x539
	internal string FormatUnkownData(byte[] data) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageExtension : X509Extension // TypeDefIndex: 1516
{
	// Fields
	internal const string oid = "2.5.29.15";
	internal const string friendlyName = "Key Usage";
	internal const X509KeyUsageFlags all = 33023;
	private X509KeyUsageFlags _keyUsages; // 0x14
	private AsnDecodeStatus _status; // 0x18

	// Properties
	public X509KeyUsageFlags KeyUsages { get; }

	// Methods

	// RVA: 0x61E Offset: 0x61E VA: 0x61E
	public void .ctor() { }

	// RVA: 0x31A Offset: 0x31A VA: 0x31A
	public void .ctor(AsnEncodedData encodedKeyUsage, bool critical) { }

	// RVA: 0x31B Offset: 0x31B VA: 0x31B
	public void .ctor(X509KeyUsageFlags keyUsages, bool critical) { }

	// RVA: 0x9FC Offset: 0x9FC VA: 0x9FC
	public X509KeyUsageFlags get_KeyUsages() { }

	// RVA: 0x498 Offset: 0x498 VA: 0x498 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x53A Offset: 0x53A VA: 0x53A
	internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags) { }

	// RVA: 0x53B Offset: 0x53B VA: 0x53B
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x9FD Offset: 0x9FD VA: 0x9FD
	internal byte[] Encode() { }

	// RVA: 0x53C Offset: 0x53C VA: 0x53C Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1517
{
	// Fields
	internal const string oid = "2.5.29.14";
	internal const string friendlyName = "Subject Key Identifier";
	private byte[] _subjectKeyIdentifier; // 0x14
	private string _ski; // 0x18
	private AsnDecodeStatus _status; // 0x1C

	// Properties
	public string SubjectKeyIdentifier { get; }

	// Methods

	// RVA: 0x61F Offset: 0x61F VA: 0x61F
	public void .ctor() { }

	// RVA: 0x31C Offset: 0x31C VA: 0x31C
	public void .ctor(AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }

	// RVA: 0x31D Offset: 0x31D VA: 0x31D
	public void .ctor(byte[] subjectKeyIdentifier, bool critical) { }

	// RVA: 0x31E Offset: 0x31E VA: 0x31E
	public void .ctor(string subjectKeyIdentifier, bool critical) { }

	// RVA: 0x31F Offset: 0x31F VA: 0x31F
	public void .ctor(PublicKey key, bool critical) { }

	// RVA: 0xEB Offset: 0xEB VA: 0xEB
	public void .ctor(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }

	// RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	public string get_SubjectKeyIdentifier() { }

	// RVA: 0x499 Offset: 0x499 VA: 0x499 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	internal static byte FromHexChar(char c) { }

	// RVA: 0x53D Offset: 0x53D VA: 0x53D
	internal static byte FromHexChars(char c1, char c2) { }

	// RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	internal static byte[] FromHex(string hex) { }

	// RVA: 0x53E Offset: 0x53E VA: 0x53E
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	internal byte[] Encode() { }

	// RVA: 0x53F Offset: 0x53F VA: 0x53F Slot: 5
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Net
[Serializable]
public abstract class EndPoint // TypeDefIndex: 1518
{
	// Methods

	// RVA: 0x618 Offset: 0x618 VA: 0x618
	protected void .ctor() { }
}

// Namespace: System.Net
[Serializable]
public class IPAddress // TypeDefIndex: 1519
{
	// Fields
	public static readonly IPAddress Any; // 0x0
	public static readonly IPAddress Loopback; // 0x4
	public static readonly IPAddress Broadcast; // 0x8
	public static readonly IPAddress None; // 0xC
	internal const long LoopbackMask = 255;
	internal long m_Address; // 0x8
	internal string m_ToString; // 0x10
	public static readonly IPAddress IPv6Any; // 0x10
	public static readonly IPAddress IPv6Loopback; // 0x14
	public static readonly IPAddress IPv6None; // 0x18
	private AddressFamily m_Family; // 0x14
	private ushort[] m_Numbers; // 0x18
	private long m_ScopeId; // 0x20
	private int m_HashCode; // 0x28
	internal const int IPv4AddressBytes = 4;
	internal const int IPv6AddressBytes = 16;
	internal const int NumberOfLabels = 8;

	// Properties
	public long ScopeId { get; }

	// Methods

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	public void .ctor(long newAddress) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public void .ctor(byte[] address, long scopeid) { }

	// RVA: 0x48B Offset: 0x48B VA: 0x48B
	internal void .ctor(int newAddress) { }

	// RVA: 0x69 Offset: 0x69 VA: 0x69
	public long get_ScopeId() { }

	// RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4 Slot: 3
	public override string ToString() { }

	// RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	internal bool Equals(object comparandObj, bool compareScopeId) { }

	// RVA: 0x528 Offset: 0x528 VA: 0x528 Slot: 0
	public override bool Equals(object comparand) { }

	// RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF22 Offset: 0xF22 VA: 0xF22
	private static void .cctor() { }
}

// Namespace: System.Net
internal struct IPv6AddressFormatter // TypeDefIndex: 1520
{
	// Fields
	private ushort[] address; // 0x0
	private long scopeId; // 0x8

	// Methods

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public void .ctor(ushort[] addr, long scopeId) { }

	// RVA: 0x9E6 Offset: 0x9E6 VA: 0x9E6
	private static ushort SwapUShort(ushort number) { }

	// RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7
	private uint AsIPv4Int() { }

	// RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	private bool IsIPv4Compatible() { }

	// RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	private bool IsIPv4Mapped() { }

	// RVA: 0x9EA Offset: 0x9EA VA: 0x9EA Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net.Sockets
[Serializable]
public class SocketException : Win32Exception // TypeDefIndex: 1521
{
	// Fields
	private EndPoint m_EndPoint; // 0x48

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x24F Offset: 0x24F VA: 0x24F
	private static int WSAGetLastError_internal() { }

	// RVA: 0x619 Offset: 0x619 VA: 0x619
	public void .ctor() { }

	// RVA: 0x48C Offset: 0x48C VA: 0x48C
	internal void .ctor(SocketError socketError) { }

	// RVA: 0x315 Offset: 0x315 VA: 0x315
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x9EB Offset: 0x9EB VA: 0x9EB Slot: 5
	public override string get_Message() { }
}

// Namespace: System.Net.Sockets
public enum AddressFamily // TypeDefIndex: 1522
{
	// Fields
	public int value__; // 0x0
	public const AddressFamily Unknown = -1;
	public const AddressFamily Unspecified = 0;
	public const AddressFamily Unix = 1;
	public const AddressFamily InterNetwork = 2;
	public const AddressFamily ImpLink = 3;
	public const AddressFamily Pup = 4;
	public const AddressFamily Chaos = 5;
	public const AddressFamily NS = 6;
	public const AddressFamily Ipx = 6;
	public const AddressFamily Iso = 7;
	public const AddressFamily Osi = 7;
	public const AddressFamily Ecma = 8;
	public const AddressFamily DataKit = 9;
	public const AddressFamily Ccitt = 10;
	public const AddressFamily Sna = 11;
	public const AddressFamily DecNet = 12;
	public const AddressFamily DataLink = 13;
	public const AddressFamily Lat = 14;
	public const AddressFamily HyperChannel = 15;
	public const AddressFamily AppleTalk = 16;
	public const AddressFamily NetBios = 17;
	public const AddressFamily VoiceView = 18;
	public const AddressFamily FireFox = 19;
	public const AddressFamily Banyan = 21;
	public const AddressFamily Atm = 22;
	public const AddressFamily InterNetworkV6 = 23;
	public const AddressFamily Cluster = 24;
	public const AddressFamily Ieee12844 = 25;
	public const AddressFamily Irda = 26;
	public const AddressFamily NetworkDesigners = 28;
	public const AddressFamily Max = 29;
}

// Namespace: System.Net.Sockets
public enum SocketError // TypeDefIndex: 1523
{
	// Fields
	public int value__; // 0x0
	public const SocketError Success = 0;
	public const SocketError SocketError = -1;
	public const SocketError Interrupted = 10004;
	public const SocketError AccessDenied = 10013;
	public const SocketError Fault = 10014;
	public const SocketError InvalidArgument = 10022;
	public const SocketError TooManyOpenSockets = 10024;
	public const SocketError WouldBlock = 10035;
	public const SocketError InProgress = 10036;
	public const SocketError AlreadyInProgress = 10037;
	public const SocketError NotSocket = 10038;
	public const SocketError DestinationAddressRequired = 10039;
	public const SocketError MessageSize = 10040;
	public const SocketError ProtocolType = 10041;
	public const SocketError ProtocolOption = 10042;
	public const SocketError ProtocolNotSupported = 10043;
	public const SocketError SocketNotSupported = 10044;
	public const SocketError OperationNotSupported = 10045;
	public const SocketError ProtocolFamilyNotSupported = 10046;
	public const SocketError AddressFamilyNotSupported = 10047;
	public const SocketError AddressAlreadyInUse = 10048;
	public const SocketError AddressNotAvailable = 10049;
	public const SocketError NetworkDown = 10050;
	public const SocketError NetworkUnreachable = 10051;
	public const SocketError NetworkReset = 10052;
	public const SocketError ConnectionAborted = 10053;
	public const SocketError ConnectionReset = 10054;
	public const SocketError NoBufferSpaceAvailable = 10055;
	public const SocketError IsConnected = 10056;
	public const SocketError NotConnected = 10057;
	public const SocketError Shutdown = 10058;
	public const SocketError TimedOut = 10060;
	public const SocketError ConnectionRefused = 10061;
	public const SocketError HostDown = 10064;
	public const SocketError HostUnreachable = 10065;
	public const SocketError ProcessLimit = 10067;
	public const SocketError SystemNotReady = 10091;
	public const SocketError VersionNotSupported = 10092;
	public const SocketError NotInitialized = 10093;
	public const SocketError Disconnecting = 10101;
	public const SocketError TypeNotFound = 10109;
	public const SocketError HostNotFound = 11001;
	public const SocketError TryAgain = 11002;
	public const SocketError NoRecovery = 11003;
	public const SocketError NoData = 11004;
	public const SocketError IOPending = 997;
	public const SocketError OperationAborted = 995;
}

// Namespace: System.Collections.Generic
[DebuggerDisplayAttribute] // RVA: 0x818 Offset: 0x818 VA: 0x818
[DebuggerTypeProxyAttribute] // RVA: 0x818 Offset: 0x818 VA: 0x818
[Serializable]
public class Stack<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1524
{
	// Fields
	private T[] _array; // 0xFFFFFFFF
	private int _size; // 0xFFFFFFFF
	private int _version; // 0xFFFFFFFF
	private object _syncRoot; // 0xFFFFFFFF

	// Properties
	public int Count { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
	|-Stack<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD8E Offset: 0xD8E VA: 0xD8E
	|-Stack<object>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private bool System.Collections.ICollection.get_IsSynchronized() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD8F Offset: 0xD8F VA: 0xD8F
	|-Stack<object>.System.Collections.ICollection.get_IsSynchronized
	*/

	// RVA: -1 Offset: -1 Slot: 8
	private object System.Collections.ICollection.get_SyncRoot() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD90 Offset: 0xD90 VA: 0xD90
	|-Stack<object>.System.Collections.ICollection.get_SyncRoot
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x437 Offset: 0x437 VA: 0x437
	|-Stack<object>.System.Collections.ICollection.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD91 Offset: 0xD91 VA: 0xD91
	|-Stack<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD92 Offset: 0xD92 VA: 0xD92
	|-Stack<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1
	public T Peek() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD93 Offset: 0xD93 VA: 0xD93
	|-Stack<object>.Peek
	*/

	// RVA: -1 Offset: -1
	public T Pop() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD94 Offset: 0xD94 VA: 0xD94
	|-Stack<object>.Pop
	*/

	// RVA: -1 Offset: -1
	public void Push(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x831 Offset: 0x831 VA: 0x831
	|-Stack<object>.Push
	*/

	// RVA: -1 Offset: -1
	private void ThrowForEmptyStack() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
	|-Stack<object>.ThrowForEmptyStack
	*/
}

// Namespace: 
[Serializable]
public struct Stack.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1525
{
	// Fields
	private readonly Stack<T> _stack; // 0xFFFFFFFF
	private readonly int _version; // 0xFFFFFFFF
	private int _index; // 0xFFFFFFFF
	private T _currentElement; // 0xFFFFFFFF

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(Stack<T> stack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x832 Offset: 0x832 VA: 0x832
	|-Stack.Enumerator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
	|-Stack.Enumerator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD97 Offset: 0xD97 VA: 0xD97
	|-Stack.Enumerator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD95 Offset: 0xD95 VA: 0xD95
	|-Stack.Enumerator<object>.get_Current
	*/

	// RVA: -1 Offset: -1
	private void ThrowEnumerationNotStartedOrEnded() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
	|-Stack.Enumerator<object>.ThrowEnumerationNotStartedOrEnded
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD96 Offset: 0xD96 VA: 0xD96
	|-Stack.Enumerator<object>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: System.Collections.Generic
internal sealed class StackDebugView<T> // TypeDefIndex: 1526
{}

// Namespace: System.Collections.Generic
public interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 1527
{}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x819 Offset: 0x819 VA: 0x819
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1528
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 59F5BD34B6C013DEACC784F69C67E95150033A84 /*Metadata offset 0x1303E7*/; // 0x0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 C02C28AFEBE998F767E4AF43E3BE8F5E9FA11536 /*Metadata offset 0x130407*/; // 0x20
	internal static readonly long E5BC1BAFADE1862DD6E0B9FB632BFAA6C3873A78 = 2533330625626144; // 0x40

	// Methods

	// RVA: 0x9C7 Offset: 0x9C7 VA: 0x9C7
	internal static uint ComputeStringHash(string s) { }
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 // TypeDefIndex: 1529
{}

// Namespace: System.Configuration
public interface IConfigurationSectionHandler // TypeDefIndex: 1530
{}

// Namespace: System.Net.Configuration
public sealed class BypassElement : ConfigurationElement // TypeDefIndex: 1531
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
[DefaultMemberAttribute] // RVA: 0x81A Offset: 0x81A VA: 0x81A
[ConfigurationCollectionAttribute] // RVA: 0x81A Offset: 0x81A VA: 0x81A
public sealed class BypassElementCollection : ConfigurationElementCollection // TypeDefIndex: 1532
{
	// Methods

	// RVA: 0x609 Offset: 0x609 VA: 0x609
	public void .ctor() { }
}

// Namespace: System.Net.Configuration
public sealed class ConnectionManagementElement : ConfigurationElement // TypeDefIndex: 1533
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
[DefaultMemberAttribute] // RVA: 0x81B Offset: 0x81B VA: 0x81B
[ConfigurationCollectionAttribute] // RVA: 0x81B Offset: 0x81B VA: 0x81B
public sealed class ConnectionManagementElementCollection : ConfigurationElementCollection // TypeDefIndex: 1534
{
	// Methods

	// RVA: 0x60A Offset: 0x60A VA: 0x60A
	public void .ctor() { }
}

// Namespace: System.Net.Configuration
public sealed class ConnectionManagementSection : ConfigurationSection // TypeDefIndex: 1535
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x60B Offset: 0x60B VA: 0x60B
	public void .ctor() { }

	// RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class DefaultProxySection : ConfigurationSection // TypeDefIndex: 1536
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x60C Offset: 0x60C VA: 0x60C
	public void .ctor() { }

	// RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }

	// RVA: 0x48A Offset: 0x48A VA: 0x48A Slot: 6
	protected override void Reset(ConfigurationElement parentElement) { }
}

// Namespace: System.Net.Configuration
public sealed class ProxyElement : ConfigurationElement // TypeDefIndex: 1537
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x611 Offset: 0x611 VA: 0x611
	public void .ctor() { }

	// RVA: 0x9DD Offset: 0x9DD VA: 0x9DD Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class HttpWebRequestElement : ConfigurationElement // TypeDefIndex: 1538
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x60D Offset: 0x60D VA: 0x60D
	public void .ctor() { }

	// RVA: 0x9DA Offset: 0x9DA VA: 0x9DA Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class Ipv6Element : ConfigurationElement // TypeDefIndex: 1539
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x60E Offset: 0x60E VA: 0x60E
	public void .ctor() { }

	// RVA: 0x9DB Offset: 0x9DB VA: 0x9DB Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class NetSectionGroup : ConfigurationSectionGroup // TypeDefIndex: 1540
{
	// Methods

	// RVA: 0x60F Offset: 0x60F VA: 0x60F
	public void .ctor() { }
}

// Namespace: System.Net.Configuration
public sealed class SettingsSection : ConfigurationSection // TypeDefIndex: 1541
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x613 Offset: 0x613 VA: 0x613
	public void .ctor() { }

	// RVA: 0x9DF Offset: 0x9DF VA: 0x9DF Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class PerformanceCountersElement : ConfigurationElement // TypeDefIndex: 1542
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x610 Offset: 0x610 VA: 0x610
	public void .ctor() { }

	// RVA: 0x9DC Offset: 0x9DC VA: 0x9DC Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class ServicePointManagerElement : ConfigurationElement // TypeDefIndex: 1543
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x612 Offset: 0x612 VA: 0x612
	public void .ctor() { }

	// RVA: 0x9DE Offset: 0x9DE VA: 0x9DE Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class SocketElement : ConfigurationElement // TypeDefIndex: 1544
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x614 Offset: 0x614 VA: 0x614
	public void .ctor() { }

	// RVA: 0x9E0 Offset: 0x9E0 VA: 0x9E0 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class WebProxyScriptElement : ConfigurationElement // TypeDefIndex: 1545
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x615 Offset: 0x615 VA: 0x615
	public void .ctor() { }

	// RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
public sealed class WebRequestModulesSection : ConfigurationSection // TypeDefIndex: 1546
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x617 Offset: 0x617 VA: 0x617
	public void .ctor() { }

	// RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Net.Configuration
[ConfigurationCollectionAttribute] // RVA: 0x81C Offset: 0x81C VA: 0x81C
[DefaultMemberAttribute] // RVA: 0x81C Offset: 0x81C VA: 0x81C
public sealed class WebRequestModuleElementCollection : ConfigurationElementCollection // TypeDefIndex: 1547
{
	// Methods

	// RVA: 0x616 Offset: 0x616 VA: 0x616
	public void .ctor() { }
}

// Namespace: System.Net.Configuration
public sealed class WebRequestModuleElement : ConfigurationElement // TypeDefIndex: 1548
{
	// Properties
	protected override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2 Slot: 4
	protected override ConfigurationPropertyCollection get_Properties() { }
}

// Namespace: System.Diagnostics
[ObsoleteAttribute] // RVA: 0x81D Offset: 0x81D VA: 0x81D
public class DiagnosticsConfigurationHandler : IConfigurationSectionHandler // TypeDefIndex: 1549
{
	// Methods

	// RVA: 0x605 Offset: 0x605 VA: 0x605
	public void .ctor() { }

	// RVA: 0x128 Offset: 0x128 VA: 0x128 Slot: 4
	public virtual object Create(object parent, object configContext, XmlNode section) { }
}

// Namespace: Unity
internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1550
{
	// Methods

	// RVA: 0xF28 Offset: 0xF28 VA: 0xF28
	public static void ThrowNotSupportedException() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1551
{}

// Namespace: System.Configuration
public abstract class ConfigurationSection : ConfigurationElement // TypeDefIndex: 1552
{
	// Methods

	// RVA: 0x4A1 Offset: 0x4A1 VA: 0x4A1 Slot: 8
	protected internal virtual void DeserializeSection(XmlReader reader) { }

	// RVA: 0xA35 Offset: 0xA35 VA: 0xA35 Slot: 5
	protected internal override bool IsModified() { }

	// RVA: 0x62B Offset: 0x62B VA: 0x62B Slot: 7
	protected internal override void ResetModified() { }

	// RVA: 0x13C Offset: 0x13C VA: 0x13C Slot: 9
	protected internal virtual string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode) { }
}

// Namespace: System.Configuration
[DefaultMemberAttribute] // RVA: 0x821 Offset: 0x821 VA: 0x821
public abstract class ConfigurationElement // TypeDefIndex: 1553
{
	// Properties
	protected internal virtual ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0xA2A Offset: 0xA2A VA: 0xA2A Slot: 4
	protected internal virtual ConfigurationPropertyCollection get_Properties() { }

	// RVA: 0xA2B Offset: 0xA2B VA: 0xA2B Slot: 5
	protected internal virtual bool IsModified() { }

	// RVA: 0x49F Offset: 0x49F VA: 0x49F Slot: 6
	protected internal virtual void Reset(ConfigurationElement parentElement) { }

	// RVA: 0x629 Offset: 0x629 VA: 0x629 Slot: 7
	protected internal virtual void ResetModified() { }
}

// Namespace: System.Configuration
[DebuggerDisplayAttribute] // RVA: 0x822 Offset: 0x822 VA: 0x822
public abstract class ConfigurationElementCollection : ConfigurationElement, ICollection, IEnumerable // TypeDefIndex: 1554
{
	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0xA2C Offset: 0xA2C VA: 0xA2C Slot: 9
	public int get_Count() { }

	// RVA: 0xA2D Offset: 0xA2D VA: 0xA2D Slot: 11
	public bool get_IsSynchronized() { }

	// RVA: 0xA2E Offset: 0xA2E VA: 0xA2E Slot: 10
	public object get_SyncRoot() { }

	// RVA: 0xA2F Offset: 0xA2F VA: 0xA2F Slot: 12
	public IEnumerator GetEnumerator() { }

	// RVA: 0xA30 Offset: 0xA30 VA: 0xA30 Slot: 5
	protected internal override bool IsModified() { }

	// RVA: 0x4A0 Offset: 0x4A0 VA: 0x4A0 Slot: 6
	protected internal override void Reset(ConfigurationElement parentElement) { }

	// RVA: 0x62A Offset: 0x62A VA: 0x62A Slot: 7
	protected internal override void ResetModified() { }

	// RVA: 0x329 Offset: 0x329 VA: 0x329 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array arr, int index) { }
}

// Namespace: System.Configuration
public enum ConfigurationSaveMode // TypeDefIndex: 1555
{
	// Fields
	public int value__; // 0x0
	public const ConfigurationSaveMode Full = 2;
	public const ConfigurationSaveMode Minimal = 1;
	public const ConfigurationSaveMode Modified = 0;
}

// Namespace: System.Configuration
[DefaultMemberAttribute] // RVA: 0x823 Offset: 0x823 VA: 0x823
public class ConfigurationPropertyCollection : ICollection, IEnumerable // TypeDefIndex: 1556
{
	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0xA31 Offset: 0xA31 VA: 0xA31 Slot: 5
	public int get_Count() { }

	// RVA: 0xA32 Offset: 0xA32 VA: 0xA32 Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0xA33 Offset: 0xA33 VA: 0xA33 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0xA34 Offset: 0xA34 VA: 0xA34 Slot: 8
	public IEnumerator GetEnumerator() { }

	// RVA: 0x32A Offset: 0x32A VA: 0x32A Slot: 4
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
}

// Namespace: System.Configuration
[AttributeUsageAttribute] // RVA: 0x824 Offset: 0x824 VA: 0x824
public sealed class ConfigurationCollectionAttribute : Attribute // TypeDefIndex: 1557
{
	// Methods

	// RVA: 0x49E Offset: 0x49E VA: 0x49E
	public void .ctor(Type itemType) { }
}

// Namespace: System.Configuration
public class ConfigurationSectionGroup // TypeDefIndex: 1558
{}

// Namespace: System.Configuration
public sealed class IgnoreSection : ConfigurationSection // TypeDefIndex: 1559
{
	// Properties
	protected internal override ConfigurationPropertyCollection Properties { get; }

	// Methods

	// RVA: 0x62C Offset: 0x62C VA: 0x62C
	public void .ctor() { }

	// RVA: 0xA36 Offset: 0xA36 VA: 0xA36 Slot: 4
	protected internal override ConfigurationPropertyCollection get_Properties() { }

	// RVA: 0x4A2 Offset: 0x4A2 VA: 0x4A2 Slot: 8
	protected internal override void DeserializeSection(XmlReader xmlReader) { }

	// RVA: 0xA37 Offset: 0xA37 VA: 0xA37 Slot: 5
	protected internal override bool IsModified() { }

	// RVA: 0x4A3 Offset: 0x4A3 VA: 0x4A3 Slot: 6
	protected internal override void Reset(ConfigurationElement parentSection) { }

	// RVA: 0x62D Offset: 0x62D VA: 0x62D Slot: 7
	protected internal override void ResetModified() { }

	// RVA: 0x13D Offset: 0x13D VA: 0x13D Slot: 9
	protected internal override string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode) { }
}

// Namespace: Unity
internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1560
{
	// Methods

	// RVA: 0xF29 Offset: 0xF29 VA: 0xF29
	public static void ThrowNotSupportedException() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1561
{}

// Namespace: Mono.Security
[DefaultMemberAttribute] // RVA: 0x826 Offset: 0x826 VA: 0x826
public class ASN1 // TypeDefIndex: 1562
{
	// Fields
	private byte m_nTag; // 0x8
	private byte[] m_aValue; // 0xC
	private ArrayList elist; // 0x10

	// Properties
	public int Count { get; }
	public byte Tag { get; }
	public byte[] Value { get; set; }
	public ASN1 Item { get; }

	// Methods

	// RVA: 0x4A4 Offset: 0x4A4 VA: 0x4A4
	public void .ctor(byte tag) { }

	// RVA: 0x32B Offset: 0x32B VA: 0x32B
	public void .ctor(byte tag, byte[] data) { }

	// RVA: 0x4A5 Offset: 0x4A5 VA: 0x4A5
	public void .ctor(byte[] data) { }

	// RVA: 0xA38 Offset: 0xA38 VA: 0xA38
	public int get_Count() { }

	// RVA: 0xA39 Offset: 0xA39 VA: 0xA39
	public byte get_Tag() { }

	// RVA: 0xA3A Offset: 0xA3A VA: 0xA3A
	public byte[] get_Value() { }

	// RVA: 0x4A6 Offset: 0x4A6 VA: 0x4A6
	public void set_Value(byte[] value) { }

	// RVA: 0x54D Offset: 0x54D VA: 0x54D
	public ASN1 Add(ASN1 asn1) { }

	// RVA: 0xA3B Offset: 0xA3B VA: 0xA3B Slot: 4
	public virtual byte[] GetBytes() { }

	// RVA: 0xEF Offset: 0xEF VA: 0xEF
	protected void Decode(byte[] asn1, ref int anPos, int anLength) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content) { }

	// RVA: 0x54E Offset: 0x54E VA: 0x54E
	public ASN1 get_Item(int index) { }

	// RVA: 0xA3C Offset: 0xA3C VA: 0xA3C Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security
public static class ASN1Convert // TypeDefIndex: 1563
{
	// Methods

	// RVA: 0xA3D Offset: 0xA3D VA: 0xA3D
	public static ASN1 FromInt32(int value) { }

	// RVA: 0xA3E Offset: 0xA3E VA: 0xA3E
	public static int ToInt32(ASN1 asn1) { }

	// RVA: 0xA3F Offset: 0xA3F VA: 0xA3F
	public static string ToOid(ASN1 asn1) { }
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 1564
{
	// Methods

	// RVA: 0xA40 Offset: 0xA40 VA: 0xA40
	private static byte[] GetUIntBytes(byte* bytes) { }

	// RVA: 0xA41 Offset: 0xA41 VA: 0xA41
	internal static byte[] GetBytes(int value) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class CryptoConvert // TypeDefIndex: 1565
{
	// Methods

	// RVA: 0xA42 Offset: 0xA42 VA: 0xA42
	public static string ToHex(byte[] input) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1566
{}

// Namespace: System.Xml
public enum ReadState // TypeDefIndex: 1567
{
	// Fields
	public int value__; // 0x0
	public const ReadState Initial = 0;
	public const ReadState Interactive = 1;
	public const ReadState Error = 2;
	public const ReadState EndOfFile = 3;
	public const ReadState Closed = 4;
}

// Namespace: System.Xml
[DebuggerDisplayAttribute] // RVA: 0x828 Offset: 0x828 VA: 0x828
[DefaultMemberAttribute] // RVA: 0x828 Offset: 0x828 VA: 0x828
[DebuggerDisplayAttribute] // RVA: 0x828 Offset: 0x828 VA: 0x828
public abstract class XmlReader : IDisposable // TypeDefIndex: 1568
{
	// Fields
	private static uint IsTextualNodeBitmap; // 0x0
	private static uint CanReadContentAsBitmap; // 0x4
	private static uint HasValueBitmap; // 0x8

	// Properties
	public abstract ReadState ReadState { get; }

	// Methods

	// RVA: 0x62E Offset: 0x62E VA: 0x62E Slot: 5
	public virtual void Close() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract ReadState get_ReadState() { }

	// RVA: 0x62F Offset: 0x62F VA: 0x62F Slot: 4
	public void Dispose() { }

	// RVA: 0x4A8 Offset: 0x4A8 VA: 0x4A8 Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0xF2A Offset: 0xF2A VA: 0xF2A
	private static void .cctor() { }
}

// Namespace: System.Xml
internal sealed class XmlChildEnumerator : IEnumerator // TypeDefIndex: 1569
{
	// Fields
	internal XmlNode container; // 0x8
	internal XmlNode child; // 0xC
	internal bool isFirst; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	internal XmlNode Current { get; }

	// Methods

	// RVA: 0x4A7 Offset: 0x4A7 VA: 0x4A7
	internal void .ctor(XmlNode container) { }

	// RVA: 0xA44 Offset: 0xA44 VA: 0xA44 Slot: 4
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0xA45 Offset: 0xA45 VA: 0xA45
	internal bool MoveNext() { }

	// RVA: 0xA46 Offset: 0xA46 VA: 0xA46 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0xA47 Offset: 0xA47 VA: 0xA47
	internal XmlNode get_Current() { }
}

// Namespace: System.Xml
public abstract class XmlLinkedNode : XmlNode // TypeDefIndex: 1570
{
	// Fields
	internal XmlLinkedNode next; // 0xC

	// Properties
	public override XmlNode NextSibling { get; }

	// Methods

	// RVA: 0xA48 Offset: 0xA48 VA: 0xA48 Slot: 8
	public override XmlNode get_NextSibling() { }
}

// Namespace: System.Xml
[DefaultMemberAttribute] // RVA: 0x829 Offset: 0x829 VA: 0x829
[DebuggerDisplayAttribute] // RVA: 0x829 Offset: 0x829 VA: 0x829
public abstract class XmlNode : ICloneable, IEnumerable, IXPathNavigable // TypeDefIndex: 1571
{
	// Fields
	internal XmlNode parentNode; // 0x8

	// Properties
	public abstract XmlNodeType NodeType { get; }
	public virtual XmlNode ParentNode { get; }
	public virtual XmlNode NextSibling { get; }
	public virtual XmlNode FirstChild { get; }
	internal virtual XmlLinkedNode LastNode { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 6
	public abstract XmlNodeType get_NodeType() { }

	// RVA: 0xA49 Offset: 0xA49 VA: 0xA49 Slot: 7
	public virtual XmlNode get_ParentNode() { }

	// RVA: 0xA4A Offset: 0xA4A VA: 0xA4A Slot: 8
	public virtual XmlNode get_NextSibling() { }

	// RVA: 0xA4B Offset: 0xA4B VA: 0xA4B Slot: 9
	public virtual XmlNode get_FirstChild() { }

	// RVA: 0xA4C Offset: 0xA4C VA: 0xA4C Slot: 10
	internal virtual XmlLinkedNode get_LastNode() { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract XmlNode CloneNode(bool deep) { }

	// RVA: 0xA4D Offset: 0xA4D VA: 0xA4D Slot: 4
	private object System.ICloneable.Clone() { }

	// RVA: 0xA4E Offset: 0xA4E VA: 0xA4E Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: System.Xml
public enum XmlNodeType // TypeDefIndex: 1572
{
	// Fields
	public int value__; // 0x0
	public const XmlNodeType None = 0;
	public const XmlNodeType Element = 1;
	public const XmlNodeType Attribute = 2;
	public const XmlNodeType Text = 3;
	public const XmlNodeType CDATA = 4;
	public const XmlNodeType EntityReference = 5;
	public const XmlNodeType Entity = 6;
	public const XmlNodeType ProcessingInstruction = 7;
	public const XmlNodeType Comment = 8;
	public const XmlNodeType Document = 9;
	public const XmlNodeType DocumentType = 10;
	public const XmlNodeType DocumentFragment = 11;
	public const XmlNodeType Notation = 12;
	public const XmlNodeType Whitespace = 13;
	public const XmlNodeType SignificantWhitespace = 14;
	public const XmlNodeType EndElement = 15;
	public const XmlNodeType EndEntity = 16;
	public const XmlNodeType XmlDeclaration = 17;
}

// Namespace: System.Xml
internal static class Res // TypeDefIndex: 1573
{
	// Methods

	// RVA: 0xA43 Offset: 0xA43 VA: 0xA43
	public static string GetString(string name) { }
}

// Namespace: System.Xml.XPath
public interface IXPathNavigable // TypeDefIndex: 1574
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1575
{}

// Namespace: System.Linq
internal static class Error // TypeDefIndex: 1576
{
	// Methods

	// RVA: 0xA4F Offset: 0xA4F VA: 0xA4F
	internal static Exception ArgumentNull(string s) { }

	// RVA: 0x252 Offset: 0x252 VA: 0x252
	internal static Exception MoreThanOneMatch() { }
}

// Namespace: System.Linq
[ExtensionAttribute] // RVA: 0x82B Offset: 0x82B VA: 0x82B
public static class Enumerable // TypeDefIndex: 1577
{
	// Methods

	[ExtensionAttribute] // RVA: 0x82E Offset: 0x82E VA: 0x82E
	// RVA: -1 Offset: -1
	public static IEnumerable<TSource> Where<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x699 Offset: 0x699 VA: 0x699
	|-Enumerable.Where<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	|-Enumerable.Where<Toggle>
	|-Enumerable.Where<object>
	*/

	// RVA: -1 Offset: -1
	private static Func<TSource, bool> CombinePredicates<TSource>(Func<TSource, bool> predicate1, Func<TSource, bool> predicate2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x69A Offset: 0x69A VA: 0x69A
	|-Enumerable.CombinePredicates<object>
	*/

	[ExtensionAttribute] // RVA: 0x82F Offset: 0x82F VA: 0x82F
	// RVA: -1 Offset: -1
	public static TSource SingleOrDefault<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x69B Offset: 0x69B VA: 0x69B
	|-Enumerable.SingleOrDefault<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	|-Enumerable.SingleOrDefault<object>
	*/

	[ExtensionAttribute] // RVA: 0x830 Offset: 0x830 VA: 0x830
	// RVA: -1 Offset: -1
	public static bool Any<TSource>(IEnumerable<TSource> source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD98 Offset: 0xD98 VA: 0xD98
	|-Enumerable.Any<object>
	|-Enumerable.Any<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	*/

	[ExtensionAttribute] // RVA: 0x831 Offset: 0x831 VA: 0x831
	// RVA: -1 Offset: -1
	public static bool Any<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x69C Offset: 0x69C VA: 0x69C
	|-Enumerable.Any<object>
	|-Enumerable.Any<PlayerEditorConnectionEvents.MessageTypeSubscribers>
	*/
}

// Namespace: 
private abstract class Enumerable.Iterator<TSource> : IEnumerable<TSource>, IEnumerable, IEnumerator<TSource>, IDisposable, IEnumerator // TypeDefIndex: 1578
{
	// Fields
	private int threadId; // 0xFFFFFFFF
	internal int state; // 0xFFFFFFFF
	internal TSource current; // 0xFFFFFFFF

	// Properties
	public TSource Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
	|-Enumerable.Iterator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public TSource get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD99 Offset: 0xD99 VA: 0xD99
	|-Enumerable.Iterator<object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public abstract Enumerable.Iterator<TSource> Clone() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Enumerable.Iterator<object>.Clone
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
	|-Enumerable.Iterator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public IEnumerator<TSource> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD9B Offset: 0xD9B VA: 0xD9B
	|-Enumerable.Iterator<object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Enumerable.Iterator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public abstract IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Enumerable.Iterator<object>.Where
	*/

	// RVA: -1 Offset: -1 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD9A Offset: 0xD9A VA: 0xD9A
	|-Enumerable.Iterator<object>.System.Collections.IEnumerator.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD9C Offset: 0xD9C VA: 0xD9C
	|-Enumerable.Iterator<object>.System.Collections.IEnumerable.GetEnumerator
	*/
}

// Namespace: 
private class Enumerable.WhereEnumerableIterator<TSource> : Enumerable.Iterator<TSource> // TypeDefIndex: 1579
{
	// Fields
	private IEnumerable<TSource> source; // 0xFFFFFFFF
	private Func<TSource, bool> predicate; // 0xFFFFFFFF
	private IEnumerator<TSource> enumerator; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x438 Offset: 0x438 VA: 0x438
	|-Enumerable.WhereEnumerableIterator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public override Enumerable.Iterator<TSource> Clone() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD9D Offset: 0xD9D VA: 0xD9D
	|-Enumerable.WhereEnumerableIterator<object>.Clone
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public override void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
	|-Enumerable.WhereEnumerableIterator<object>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public override bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD9E Offset: 0xD9E VA: 0xD9E
	|-Enumerable.WhereEnumerableIterator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public override IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x69D Offset: 0x69D VA: 0x69D
	|-Enumerable.WhereEnumerableIterator<object>.Where
	*/
}

// Namespace: 
private class Enumerable.WhereArrayIterator<TSource> : Enumerable.Iterator<TSource> // TypeDefIndex: 1580
{
	// Fields
	private TSource[] source; // 0xFFFFFFFF
	private Func<TSource, bool> predicate; // 0xFFFFFFFF
	private int index; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(TSource[] source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x439 Offset: 0x439 VA: 0x439
	|-Enumerable.WhereArrayIterator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public override Enumerable.Iterator<TSource> Clone() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD9F Offset: 0xD9F VA: 0xD9F
	|-Enumerable.WhereArrayIterator<object>.Clone
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public override bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA0 Offset: 0xDA0 VA: 0xDA0
	|-Enumerable.WhereArrayIterator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public override IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x69E Offset: 0x69E VA: 0x69E
	|-Enumerable.WhereArrayIterator<object>.Where
	*/
}

// Namespace: 
private class Enumerable.WhereListIterator<TSource> : Enumerable.Iterator<TSource> // TypeDefIndex: 1581
{
	// Fields
	private List<TSource> source; // 0xFFFFFFFF
	private Func<TSource, bool> predicate; // 0xFFFFFFFF
	private List.Enumerator<TSource> enumerator; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(List<TSource> source, Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x43A Offset: 0x43A VA: 0x43A
	|-Enumerable.WhereListIterator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public override Enumerable.Iterator<TSource> Clone() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA1 Offset: 0xDA1 VA: 0xDA1
	|-Enumerable.WhereListIterator<object>.Clone
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public override bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA2 Offset: 0xDA2 VA: 0xDA2
	|-Enumerable.WhereListIterator<object>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public override IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x69F Offset: 0x69F VA: 0x69F
	|-Enumerable.WhereListIterator<object>.Where
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x82C Offset: 0x82C VA: 0x82C
private sealed class Enumerable.<>c__DisplayClass6_0<TSource> // TypeDefIndex: 1582
{
	// Fields
	public Func<TSource, bool> predicate1; // 0xFFFFFFFF
	public Func<TSource, bool> predicate2; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x900 Offset: 0x900 VA: 0x900
	|-Enumerable.<>c__DisplayClass6_0<object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal bool <CombinePredicates>b__0(TSource x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A0 Offset: 0x6A0 VA: 0x6A0
	|-Enumerable.<>c__DisplayClass6_0<object>.<CombinePredicates>b__0
	*/
}

// Namespace: System.Collections.Generic
[DebuggerTypeProxyAttribute] // RVA: 0x82D Offset: 0x82D VA: 0x82D
[DebuggerDisplayAttribute] // RVA: 0x82D Offset: 0x82D VA: 0x82D
[Serializable]
public class HashSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable, ISet<T>, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1583
{
	// Fields
	private const int Lower31BitMask = 2147483647;
	private const int StackAllocThreshold = 100;
	private const int ShrinkThreshold = 3;
	private const string CapacityName = "Capacity";
	private const string ElementsName = "Elements";
	private const string ComparerName = "Comparer";
	private const string VersionName = "Version";
	private int[] _buckets; // 0xFFFFFFFF
	private HashSet.Slot<T>[] _slots; // 0xFFFFFFFF
	private int _count; // 0xFFFFFFFF
	private int _lastIndex; // 0xFFFFFFFF
	private int _freeList; // 0xFFFFFFFF
	private IEqualityComparer<T> _comparer; // 0xFFFFFFFF
	private int _version; // 0xFFFFFFFF
	private SerializationInfo _siInfo; // 0xFFFFFFFF

	// Properties
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x901 Offset: 0x901 VA: 0x901
	|-HashSet<object>..ctor
	|-HashSet<IClippable>..ctor
	|-HashSet<Text>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(IEqualityComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x833 Offset: 0x833 VA: 0x833
	|-HashSet<object>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x43B Offset: 0x43B VA: 0x43B
	|-HashSet<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	private void System.Collections.Generic.ICollection<T>.Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x834 Offset: 0x834 VA: 0x834
	|-HashSet<object>.System.Collections.Generic.ICollection<T>.Add
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x902 Offset: 0x902 VA: 0x902
	|-HashSet<object>.Clear
	|-HashSet<IClippable>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A1 Offset: 0x6A1 VA: 0x6A1
	|-HashSet<object>.Contains
	|-HashSet<IClippable>.Contains
	|-HashSet<Text>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public void CopyTo(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x43C Offset: 0x43C VA: 0x43C
	|-HashSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A2 Offset: 0x6A2 VA: 0x6A2
	|-HashSet<object>.Remove
	|-HashSet<IClippable>.Remove
	|-HashSet<Text>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA3 Offset: 0xDA3 VA: 0xDA3
	|-HashSet<object>.get_Count
	|-HashSet<Text>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 5
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA4 Offset: 0xDA4 VA: 0xDA4
	|-HashSet<object>.System.Collections.Generic.ICollection<T>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1
	public HashSet.Enumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x835 Offset: 0x835 VA: 0x835
	|-HashSet<IClippable>.GetEnumerator
	|-HashSet<Text>.GetEnumerator
	|-HashSet<object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 11
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA5 Offset: 0xDA5 VA: 0xDA5
	|-HashSet<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA6 Offset: 0xDA6 VA: 0xDA6
	|-HashSet<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 16
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x43D Offset: 0x43D VA: 0x43D
	|-HashSet<object>.GetObjectData
	*/

	// RVA: -1 Offset: -1 Slot: 17
	public virtual void OnDeserialization(object sender) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x836 Offset: 0x836 VA: 0x836
	|-HashSet<object>.OnDeserialization
	*/

	// RVA: -1 Offset: -1 Slot: 18
	public bool Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A3 Offset: 0x6A3 VA: 0x6A3
	|-HashSet<object>.Add
	|-HashSet<IClippable>.Add
	|-HashSet<Text>.Add
	*/

	// RVA: -1 Offset: -1
	public void CopyTo(T[] array) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x837 Offset: 0x837 VA: 0x837
	|-HashSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	public void CopyTo(T[] array, int arrayIndex, int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x138 Offset: 0x138 VA: 0x138
	|-HashSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1
	private void Initialize(int capacity) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x838 Offset: 0x838 VA: 0x838
	|-HashSet<object>.Initialize
	*/

	// RVA: -1 Offset: -1
	private void IncreaseCapacity() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x903 Offset: 0x903 VA: 0x903
	|-HashSet<object>.IncreaseCapacity
	*/

	// RVA: -1 Offset: -1
	private void SetCapacity(int newSize) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x839 Offset: 0x839 VA: 0x839
	|-HashSet<object>.SetCapacity
	*/

	// RVA: -1 Offset: -1
	private bool AddIfNotPresent(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A4 Offset: 0x6A4 VA: 0x6A4
	|-HashSet<object>.AddIfNotPresent
	*/

	// RVA: -1 Offset: -1
	private int InternalGetHashCode(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A5 Offset: 0x6A5 VA: 0x6A5
	|-HashSet<object>.InternalGetHashCode
	*/
}

// Namespace: 
internal struct HashSet.Slot<T> // TypeDefIndex: 1584
{
	// Fields
	internal int hashCode; // 0xFFFFFFFF
	internal int next; // 0xFFFFFFFF
	internal T value; // 0xFFFFFFFF
}

// Namespace: 
[Serializable]
public struct HashSet.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1585
{
	// Fields
	private HashSet<T> _set; // 0xFFFFFFFF
	private int _index; // 0xFFFFFFFF
	private int _version; // 0xFFFFFFFF
	private T _current; // 0xFFFFFFFF

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(HashSet<T> set) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x83A Offset: 0x83A VA: 0x83A
	|-HashSet.Enumerator<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x904 Offset: 0x904 VA: 0x904
	|-HashSet.Enumerator<object>.Dispose
	|-HashSet.Enumerator<IClippable>.Dispose
	|-HashSet.Enumerator<Text>.Dispose
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA9 Offset: 0xDA9 VA: 0xDA9
	|-HashSet.Enumerator<object>.MoveNext
	|-HashSet.Enumerator<IClippable>.MoveNext
	|-HashSet.Enumerator<Text>.MoveNext
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA7 Offset: 0xDA7 VA: 0xDA7
	|-HashSet.Enumerator<IClippable>.get_Current
	|-HashSet.Enumerator<Text>.get_Current
	|-HashSet.Enumerator<object>.get_Current
	*/

	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDA8 Offset: 0xDA8 VA: 0xDA8
	|-HashSet.Enumerator<object>.System.Collections.IEnumerator.get_Current
	*/
}

// Namespace: System.Collections.Generic
internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1586
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 1587
{}

// Namespace: UnityEngine.Scripting
[VisibleToOtherModulesAttribute] // RVA: 0x833 Offset: 0x833 VA: 0x833
[AttributeUsageAttribute] // RVA: 0x833 Offset: 0x833 VA: 0x833
internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 1588
{
	// Methods

	// RVA: 0x63B Offset: 0x63B VA: 0x63B
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting
[VisibleToOtherModulesAttribute] // RVA: 0x834 Offset: 0x834 VA: 0x834
[AttributeUsageAttribute] // RVA: 0x834 Offset: 0x834 VA: 0x834
internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 1589
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x84C Offset: 0x84C VA: 0x84C
	[DebuggerBrowsableAttribute] // RVA: 0x84C Offset: 0x84C VA: 0x84C
	private bool <Optional>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x84D Offset: 0x84D VA: 0x84D
	[DebuggerBrowsableAttribute] // RVA: 0x84D Offset: 0x84D VA: 0x84D
	private bool <GenerateProxy>k__BackingField; // 0x9

	// Properties
	public bool Optional { set; }
	public bool GenerateProxy { set; }

	// Methods

	// RVA: 0x63A Offset: 0x63A VA: 0x63A
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0x863 Offset: 0x863 VA: 0x863
	// RVA: 0x4C7 Offset: 0x4C7 VA: 0x4C7
	public void set_Optional(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0x864 Offset: 0x864 VA: 0x864
	// RVA: 0x4C8 Offset: 0x4C8 VA: 0x4C8
	public void set_GenerateProxy(bool value) { }
}

// Namespace: UnityEngine.Scripting
[VisibleToOtherModulesAttribute] // RVA: 0x835 Offset: 0x835 VA: 0x835
internal class GeneratedByOldBindingsGeneratorAttribute : Attribute // TypeDefIndex: 1590
{
	// Methods

	// RVA: 0x639 Offset: 0x639 VA: 0x639
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x836 Offset: 0x836 VA: 0x836
[VisibleToOtherModulesAttribute] // RVA: 0x836 Offset: 0x836 VA: 0x836
internal sealed class AssetFileNameExtensionAttribute : Attribute // TypeDefIndex: 1591
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x84E Offset: 0x84E VA: 0x84E
	[DebuggerBrowsableAttribute] // RVA: 0x84E Offset: 0x84E VA: 0x84E
	private readonly string <preferredExtension>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x84F Offset: 0x84F VA: 0x84F
	[DebuggerBrowsableAttribute] // RVA: 0x84F Offset: 0x84F VA: 0x84F
	private readonly IEnumerable<string> <otherExtensions>k__BackingField; // 0xC

	// Methods

	// RVA: 0x32C Offset: 0x32C VA: 0x32C
	public void .ctor(string preferredExtension, string[] otherExtensions) { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x837 Offset: 0x837 VA: 0x837
internal class ThreadAndSerializationSafeAttribute : Attribute // TypeDefIndex: 1592
{
	// Methods

	// RVA: 0x63C Offset: 0x63C VA: 0x63C
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x838 Offset: 0x838 VA: 0x838
[VisibleToOtherModulesAttribute] // RVA: 0x838 Offset: 0x838 VA: 0x838
internal class WritableAttribute : Attribute // TypeDefIndex: 1593
{
	// Methods

	// RVA: 0x63E Offset: 0x63E VA: 0x63E
	public void .ctor() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x839 Offset: 0x839 VA: 0x839
[AttributeUsageAttribute] // RVA: 0x839 Offset: 0x839 VA: 0x839
internal class UnityEngineModuleAssembly : Attribute // TypeDefIndex: 1594
{
	// Methods

	// RVA: 0x63D Offset: 0x63D VA: 0x63D
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x83A Offset: 0x83A VA: 0x83A
[VisibleToOtherModulesAttribute] // RVA: 0x83A Offset: 0x83A VA: 0x83A
internal sealed class NativeClassAttribute : Attribute // TypeDefIndex: 1595
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x850 Offset: 0x850 VA: 0x850
	[CompilerGeneratedAttribute] // RVA: 0x850 Offset: 0x850 VA: 0x850
	private string <QualifiedNativeName>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x851 Offset: 0x851 VA: 0x851
	[CompilerGeneratedAttribute] // RVA: 0x851 Offset: 0x851 VA: 0x851
	private string <Declaration>k__BackingField; // 0xC

	// Properties
	private string QualifiedNativeName { set; }
	private string Declaration { set; }

	// Methods

	// RVA: 0x4C4 Offset: 0x4C4 VA: 0x4C4
	public void .ctor(string qualifiedCppName) { }

	// RVA: 0x331 Offset: 0x331 VA: 0x331
	public void .ctor(string qualifiedCppName, string declaration) { }

	[CompilerGeneratedAttribute] // RVA: 0x865 Offset: 0x865 VA: 0x865
	// RVA: 0x4C5 Offset: 0x4C5 VA: 0x4C5
	private void set_QualifiedNativeName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x866 Offset: 0x866 VA: 0x866
	// RVA: 0x4C6 Offset: 0x4C6 VA: 0x4C6
	private void set_Declaration(string value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x83B Offset: 0x83B VA: 0x83B
[VisibleToOtherModulesAttribute] // RVA: 0x83B Offset: 0x83B VA: 0x83B
internal class VisibleToOtherModulesAttribute : Attribute // TypeDefIndex: 1596
{
	// Methods

	// RVA: 0x638 Offset: 0x638 VA: 0x638
	public void .ctor() { }

	// RVA: 0x4C3 Offset: 0x4C3 VA: 0x4C3
	public void .ctor(string[] modules) { }
}

// Namespace: UnityEngine.Bindings
internal interface IBindingsAttribute // TypeDefIndex: 1597
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsNameProviderAttribute : IBindingsAttribute // TypeDefIndex: 1598
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsHeaderProviderAttribute : IBindingsAttribute // TypeDefIndex: 1599
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsIsThreadSafeProviderAttribute : IBindingsAttribute // TypeDefIndex: 1600
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsIsFreeFunctionProviderAttribute : IBindingsAttribute // TypeDefIndex: 1601
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsThrowsProviderAttribute : IBindingsAttribute // TypeDefIndex: 1602
{}

// Namespace: UnityEngine.Bindings
internal interface IBindingsGenerateMarshallingTypeAttribute : IBindingsAttribute // TypeDefIndex: 1603
{}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x83C Offset: 0x83C VA: 0x83C
[AttributeUsageAttribute] // RVA: 0x83C Offset: 0x83C VA: 0x83C
internal class NativeConditionalAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1604
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x852 Offset: 0x852 VA: 0x852
	[CompilerGeneratedAttribute] // RVA: 0x852 Offset: 0x852 VA: 0x852
	private string <Condition>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x853 Offset: 0x853 VA: 0x853
	[CompilerGeneratedAttribute] // RVA: 0x853 Offset: 0x853 VA: 0x853
	private bool <Enabled>k__BackingField; // 0xC

	// Properties
	public string Condition { set; }
	public bool Enabled { set; }

	// Methods

	// RVA: 0x4AB Offset: 0x4AB VA: 0x4AB
	public void .ctor(string condition) { }

	[CompilerGeneratedAttribute] // RVA: 0x867 Offset: 0x867 VA: 0x867
	// RVA: 0x4AC Offset: 0x4AC VA: 0x4AC
	public void set_Condition(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x868 Offset: 0x868 VA: 0x868
	// RVA: 0x4AD Offset: 0x4AD VA: 0x4AD
	public void set_Enabled(bool value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x83D Offset: 0x83D VA: 0x83D
[VisibleToOtherModulesAttribute] // RVA: 0x83D Offset: 0x83D VA: 0x83D
internal class NativeHeaderAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsAttribute // TypeDefIndex: 1605
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x854 Offset: 0x854 VA: 0x854
	[CompilerGeneratedAttribute] // RVA: 0x854 Offset: 0x854 VA: 0x854
	private string <Header>k__BackingField; // 0x8

	// Properties
	public string Header { set; }

	// Methods

	// RVA: 0x4AE Offset: 0x4AE VA: 0x4AE
	public void .ctor(string header) { }

	[CompilerGeneratedAttribute] // RVA: 0x869 Offset: 0x869 VA: 0x869
	// RVA: 0x4AF Offset: 0x4AF VA: 0x4AF Slot: 4
	public void set_Header(string value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x83E Offset: 0x83E VA: 0x83E
[AttributeUsageAttribute] // RVA: 0x83E Offset: 0x83E VA: 0x83E
internal class NativeNameAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsAttribute // TypeDefIndex: 1606
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x855 Offset: 0x855 VA: 0x855
	[DebuggerBrowsableAttribute] // RVA: 0x855 Offset: 0x855 VA: 0x855
	private string <Name>k__BackingField; // 0x8

	// Properties
	public string Name { set; }

	// Methods

	// RVA: 0x4B6 Offset: 0x4B6 VA: 0x4B6
	public void .ctor(string name) { }

	[CompilerGeneratedAttribute] // RVA: 0x86A Offset: 0x86A VA: 0x86A
	// RVA: 0x4B7 Offset: 0x4B7 VA: 0x4B7 Slot: 4
	public void set_Name(string value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x83F Offset: 0x83F VA: 0x83F
[AttributeUsageAttribute] // RVA: 0x83F Offset: 0x83F VA: 0x83F
internal class NativeMethodAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsIsThreadSafeProviderAttribute, IBindingsIsFreeFunctionProviderAttribute, IBindingsThrowsProviderAttribute, IBindingsAttribute // TypeDefIndex: 1607
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x856 Offset: 0x856 VA: 0x856
	[CompilerGeneratedAttribute] // RVA: 0x856 Offset: 0x856 VA: 0x856
	private string <Name>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x857 Offset: 0x857 VA: 0x857
	[CompilerGeneratedAttribute] // RVA: 0x857 Offset: 0x857 VA: 0x857
	private bool <IsThreadSafe>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x858 Offset: 0x858 VA: 0x858
	[DebuggerBrowsableAttribute] // RVA: 0x858 Offset: 0x858 VA: 0x858
	private bool <IsFreeFunction>k__BackingField; // 0xD
	[CompilerGeneratedAttribute] // RVA: 0x859 Offset: 0x859 VA: 0x859
	[DebuggerBrowsableAttribute] // RVA: 0x859 Offset: 0x859 VA: 0x859
	private bool <ThrowsException>k__BackingField; // 0xE
	[CompilerGeneratedAttribute] // RVA: 0x85A Offset: 0x85A VA: 0x85A
	[DebuggerBrowsableAttribute] // RVA: 0x85A Offset: 0x85A VA: 0x85A
	private bool <HasExplicitThis>k__BackingField; // 0xF

	// Properties
	public string Name { set; }
	public bool IsThreadSafe { set; }
	public bool IsFreeFunction { set; }
	public bool ThrowsException { set; }
	public bool HasExplicitThis { set; }

	// Methods

	// RVA: 0x632 Offset: 0x632 VA: 0x632
	public void .ctor() { }

	// RVA: 0x4B0 Offset: 0x4B0 VA: 0x4B0
	public void .ctor(string name) { }

	// RVA: 0x32E Offset: 0x32E VA: 0x32E
	public void .ctor(string name, bool isFreeFunction) { }

	// RVA: 0xF0 Offset: 0xF0 VA: 0xF0
	public void .ctor(string name, bool isFreeFunction, bool isThreadSafe) { }

	[CompilerGeneratedAttribute] // RVA: 0x86B Offset: 0x86B VA: 0x86B
	// RVA: 0x4B1 Offset: 0x4B1 VA: 0x4B1 Slot: 4
	public void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x86C Offset: 0x86C VA: 0x86C
	// RVA: 0x4B2 Offset: 0x4B2 VA: 0x4B2 Slot: 5
	public void set_IsThreadSafe(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0x86D Offset: 0x86D VA: 0x86D
	// RVA: 0x4B3 Offset: 0x4B3 VA: 0x4B3 Slot: 6
	public void set_IsFreeFunction(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0x86E Offset: 0x86E VA: 0x86E
	// RVA: 0x4B4 Offset: 0x4B4 VA: 0x4B4 Slot: 7
	public void set_ThrowsException(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0x86F Offset: 0x86F VA: 0x86F
	// RVA: 0x4B5 Offset: 0x4B5 VA: 0x4B5 Slot: 8
	public void set_HasExplicitThis(bool value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x840 Offset: 0x840 VA: 0x840
internal enum TargetType // TypeDefIndex: 1608
{
	// Fields
	public int value__; // 0x0
	public const TargetType Function = 0;
	public const TargetType Field = 1;
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x841 Offset: 0x841 VA: 0x841
[AttributeUsageAttribute] // RVA: 0x841 Offset: 0x841 VA: 0x841
internal class NativePropertyAttribute : NativeMethodAttribute // TypeDefIndex: 1609
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x85B Offset: 0x85B VA: 0x85B
	[DebuggerBrowsableAttribute] // RVA: 0x85B Offset: 0x85B VA: 0x85B
	private TargetType <TargetType>k__BackingField; // 0x10

	// Properties
	public TargetType TargetType { set; }

	// Methods

	// RVA: 0x633 Offset: 0x633 VA: 0x633
	public void .ctor() { }

	// RVA: 0x4B8 Offset: 0x4B8 VA: 0x4B8
	public void .ctor(string name) { }

	// RVA: 0xF1 Offset: 0xF1 VA: 0xF1
	public void .ctor(string name, bool isFree, TargetType targetType) { }

	[CompilerGeneratedAttribute] // RVA: 0x870 Offset: 0x870 VA: 0x870
	// RVA: 0x4B9 Offset: 0x4B9 VA: 0x4B9
	public void set_TargetType(TargetType value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x842 Offset: 0x842 VA: 0x842
internal enum CodegenOptions // TypeDefIndex: 1610
{
	// Fields
	public int value__; // 0x0
	public const CodegenOptions Auto = 0;
	public const CodegenOptions Custom = 1;
	public const CodegenOptions Force = 2;
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x843 Offset: 0x843 VA: 0x843
[VisibleToOtherModulesAttribute] // RVA: 0x843 Offset: 0x843 VA: 0x843
internal class NativeTypeAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsGenerateMarshallingTypeAttribute, IBindingsAttribute // TypeDefIndex: 1611
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x85C Offset: 0x85C VA: 0x85C
	[CompilerGeneratedAttribute] // RVA: 0x85C Offset: 0x85C VA: 0x85C
	private string <Header>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x85D Offset: 0x85D VA: 0x85D
	[CompilerGeneratedAttribute] // RVA: 0x85D Offset: 0x85D VA: 0x85D
	private string <IntermediateScriptingStructName>k__BackingField; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0x85E Offset: 0x85E VA: 0x85E
	[CompilerGeneratedAttribute] // RVA: 0x85E Offset: 0x85E VA: 0x85E
	private CodegenOptions <CodegenOptions>k__BackingField; // 0x10

	// Properties
	public string Header { set; }
	public string IntermediateScriptingStructName { set; }
	public CodegenOptions CodegenOptions { set; }

	// Methods

	// RVA: 0x635 Offset: 0x635 VA: 0x635
	public void .ctor() { }

	// RVA: 0x4BB Offset: 0x4BB VA: 0x4BB
	public void .ctor(CodegenOptions codegenOptions) { }

	// RVA: 0x4BC Offset: 0x4BC VA: 0x4BC
	public void .ctor(string header) { }

	// RVA: 0x32F Offset: 0x32F VA: 0x32F
	public void .ctor(CodegenOptions codegenOptions, string intermediateStructName) { }

	[CompilerGeneratedAttribute] // RVA: 0x871 Offset: 0x871 VA: 0x871
	// RVA: 0x4BD Offset: 0x4BD VA: 0x4BD Slot: 4
	public void set_Header(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x872 Offset: 0x872 VA: 0x872
	// RVA: 0x4BE Offset: 0x4BE VA: 0x4BE
	public void set_IntermediateScriptingStructName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x873 Offset: 0x873 VA: 0x873
	// RVA: 0x4BF Offset: 0x4BF VA: 0x4BF Slot: 5
	public void set_CodegenOptions(CodegenOptions value) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x844 Offset: 0x844 VA: 0x844
[AttributeUsageAttribute] // RVA: 0x844 Offset: 0x844 VA: 0x844
internal class NotNullAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1612
{
	// Methods

	// RVA: 0x636 Offset: 0x636 VA: 0x636
	public void .ctor() { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x845 Offset: 0x845 VA: 0x845
[VisibleToOtherModulesAttribute] // RVA: 0x845 Offset: 0x845 VA: 0x845
internal class UnmarshalledAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1613
{
	// Methods

	// RVA: 0x637 Offset: 0x637 VA: 0x637
	public void .ctor() { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x846 Offset: 0x846 VA: 0x846
[AttributeUsageAttribute] // RVA: 0x846 Offset: 0x846 VA: 0x846
internal class FreeFunctionAttribute : NativeMethodAttribute // TypeDefIndex: 1614
{
	// Methods

	// RVA: 0x630 Offset: 0x630 VA: 0x630
	public void .ctor() { }

	// RVA: 0x4A9 Offset: 0x4A9 VA: 0x4A9
	public void .ctor(string name) { }

	// RVA: 0x32D Offset: 0x32D VA: 0x32D
	public void .ctor(string name, bool isThreadSafe) { }
}

// Namespace: UnityEngine.Bindings
[VisibleToOtherModulesAttribute] // RVA: 0x847 Offset: 0x847 VA: 0x847
internal enum StaticAccessorType // TypeDefIndex: 1615
{
	// Fields
	public int value__; // 0x0
	public const StaticAccessorType Dot = 0;
	public const StaticAccessorType Arrow = 1;
	public const StaticAccessorType DoubleColon = 2;
	public const StaticAccessorType ArrowWithDefaultReturnIfNull = 3;
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x848 Offset: 0x848 VA: 0x848
[VisibleToOtherModulesAttribute] // RVA: 0x848 Offset: 0x848 VA: 0x848
internal class StaticAccessorAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1616
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x85F Offset: 0x85F VA: 0x85F
	[DebuggerBrowsableAttribute] // RVA: 0x85F Offset: 0x85F VA: 0x85F
	private string <Name>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x860 Offset: 0x860 VA: 0x860
	[DebuggerBrowsableAttribute] // RVA: 0x860 Offset: 0x860 VA: 0x860
	private StaticAccessorType <Type>k__BackingField; // 0xC

	// Properties
	public string Name { set; }
	public StaticAccessorType Type { set; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0x874 Offset: 0x874 VA: 0x874
	// RVA: 0x4C0 Offset: 0x4C0 VA: 0x4C0
	internal void .ctor(string name) { }

	// RVA: 0x330 Offset: 0x330 VA: 0x330
	public void .ctor(string name, StaticAccessorType type) { }

	[CompilerGeneratedAttribute] // RVA: 0x875 Offset: 0x875 VA: 0x875
	// RVA: 0x4C1 Offset: 0x4C1 VA: 0x4C1
	public void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0x876 Offset: 0x876 VA: 0x876
	// RVA: 0x4C2 Offset: 0x4C2 VA: 0x4C2
	public void set_Type(StaticAccessorType value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x849 Offset: 0x849 VA: 0x849
[VisibleToOtherModulesAttribute] // RVA: 0x849 Offset: 0x849 VA: 0x849
internal class NativeThrowsAttribute : Attribute, IBindingsThrowsProviderAttribute, IBindingsAttribute // TypeDefIndex: 1617
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x861 Offset: 0x861 VA: 0x861
	[CompilerGeneratedAttribute] // RVA: 0x861 Offset: 0x861 VA: 0x861
	private bool <ThrowsException>k__BackingField; // 0x8

	// Properties
	public bool ThrowsException { set; }

	// Methods

	// RVA: 0x634 Offset: 0x634 VA: 0x634
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0x877 Offset: 0x877 VA: 0x877
	// RVA: 0x4BA Offset: 0x4BA VA: 0x4BA Slot: 4
	public void set_ThrowsException(bool value) { }
}

// Namespace: UnityEngine.Bindings
[AttributeUsageAttribute] // RVA: 0x84A Offset: 0x84A VA: 0x84A
[VisibleToOtherModulesAttribute] // RVA: 0x84A Offset: 0x84A VA: 0x84A
internal class IgnoreAttribute : Attribute, IBindingsAttribute // TypeDefIndex: 1618
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x862 Offset: 0x862 VA: 0x862
	[CompilerGeneratedAttribute] // RVA: 0x862 Offset: 0x862 VA: 0x862
	private bool <DoesNotContributeToSize>k__BackingField; // 0x8

	// Properties
	public bool DoesNotContributeToSize { set; }

	// Methods

	// RVA: 0x631 Offset: 0x631 VA: 0x631
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0x878 Offset: 0x878 VA: 0x878
	// RVA: 0x4AA Offset: 0x4AA VA: 0x4AA
	public void set_DoesNotContributeToSize(bool value) { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0x84B Offset: 0x84B VA: 0x84B
internal sealed class UnityString // TypeDefIndex: 1619
{
	// Methods

	// RVA: 0x54F Offset: 0x54F VA: 0x54F
	public static string Format(string fmt, object[] args) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1620
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x87D Offset: 0x87D VA: 0x87D
public struct Keyframe // TypeDefIndex: 1621
{
	// Fields
	private float m_Time; // 0x0
	private float m_Value; // 0x4
	private float m_InTangent; // 0x8
	private float m_OutTangent; // 0xC
	private int m_WeightedMode; // 0x10
	private float m_InWeight; // 0x14
	private float m_OutWeight; // 0x18
}

// Namespace: UnityEngine
[ThreadAndSerializationSafeAttribute] // RVA: 0x87E Offset: 0x87E VA: 0x87E
[RequiredByNativeCodeAttribute] // RVA: 0x87E Offset: 0x87E VA: 0x87E
[NativeHeaderAttribute] // RVA: 0x87E Offset: 0x87E VA: 0x87E
[DefaultMemberAttribute] // RVA: 0x87E Offset: 0x87E VA: 0x87E
public class AnimationCurve : IEquatable<AnimationCurve> // TypeDefIndex: 1622
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x4CA Offset: 0x4CA VA: 0x4CA
	public void .ctor(Keyframe[] keys) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA1D Offset: 0xA1D VA: 0xA1D
	// RVA: 0x63F Offset: 0x63F VA: 0x63F
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA1E Offset: 0xA1E VA: 0xA1E
	// RVA: 0x640 Offset: 0x640 VA: 0x640
	private static void Internal_Destroy(IntPtr ptr) { }

	[FreeFunctionAttribute] // RVA: 0xA1F Offset: 0xA1F VA: 0xA1F
	// RVA: 0xA50 Offset: 0xA50 VA: 0xA50
	private static IntPtr Internal_Create(Keyframe[] keys) { }

	[FreeFunctionAttribute] // RVA: 0xA20 Offset: 0xA20 VA: 0xA20
	// RVA: 0x550 Offset: 0x550 VA: 0x550
	private bool Internal_Equals(IntPtr other) { }

	// RVA: 0x641 Offset: 0x641 VA: 0x641 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x551 Offset: 0x551 VA: 0x551 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x552 Offset: 0x552 VA: 0x552 Slot: 4
	public bool Equals(AnimationCurve other) { }

	// RVA: 0xA51 Offset: 0xA51 VA: 0xA51 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
[NativeHeaderAttribute] // RVA: 0x87F Offset: 0x87F VA: 0x87F
public class Application // TypeDefIndex: 1623
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	[CompilerGeneratedAttribute] // RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	private static Application.LowMemoryCallback lowMemory; // 0x0
	private static Application.LogCallback s_LogCallbackHandler; // 0x4
	private static Application.LogCallback s_LogCallbackHandlerThreaded; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	[DebuggerBrowsableAttribute] // RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	private static Action<bool> focusChanged; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	[DebuggerBrowsableAttribute] // RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	private static Func<bool> wantsToQuit; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	[DebuggerBrowsableAttribute] // RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	private static Action quitting; // 0x14

	// Properties
	public static bool isPlaying { get; }
	public static RuntimePlatform platform { get; }
	public static bool isEditor { get; }

	// Methods

	[FreeFunctionAttribute] // RVA: 0xA21 Offset: 0xA21 VA: 0xA21
	// RVA: 0x253 Offset: 0x253 VA: 0x253
	public static bool get_isPlaying() { }

	[FreeFunctionAttribute] // RVA: 0xA22 Offset: 0xA22 VA: 0xA22
	// RVA: 0x254 Offset: 0x254 VA: 0x254
	public static RuntimePlatform get_platform() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA23 Offset: 0xA23 VA: 0xA23
	// RVA: 0xF2B Offset: 0xF2B VA: 0xF2B
	private static void CallLowMemory() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA24 Offset: 0xA24 VA: 0xA24
	// RVA: 0xF2 Offset: 0xF2 VA: 0xF2
	private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread) { }

	// RVA: 0x255 Offset: 0x255 VA: 0x255
	public static bool get_isEditor() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA25 Offset: 0xA25 VA: 0xA25
	// RVA: 0x256 Offset: 0x256 VA: 0x256
	private static bool Internal_ApplicationWantsToQuit() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA26 Offset: 0xA26 VA: 0xA26
	// RVA: 0xF2C Offset: 0xF2C VA: 0xF2C
	private static void Internal_ApplicationQuit() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA27 Offset: 0xA27 VA: 0xA27
	// RVA: 0xF2D Offset: 0xF2D VA: 0xF2D
	internal static void InvokeOnBeforeRender() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA28 Offset: 0xA28 VA: 0xA28
	// RVA: 0x642 Offset: 0x642 VA: 0x642
	internal static void InvokeFocusChanged(bool focus) { }
}

// Namespace: 
public sealed class Application.LowMemoryCallback : MulticastDelegate // TypeDefIndex: 1624
{
	// Methods

	// RVA: 0x334 Offset: 0x334 VA: 0x334
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x643 Offset: 0x643 VA: 0x643 Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA04 Offset: 0xA04 VA: 0xA04 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x4CC Offset: 0x4CC VA: 0x4CC Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class Application.LogCallback : MulticastDelegate // TypeDefIndex: 1625
{
	// Methods

	// RVA: 0x333 Offset: 0x333 VA: 0x333
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF3 Offset: 0xF3 VA: 0xF3 Slot: 12
	public virtual void Invoke(string condition, string stackTrace, LogType type) { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79 Slot: 13
	public virtual IAsyncResult BeginInvoke(string condition, string stackTrace, LogType type, AsyncCallback callback, object object) { }

	// RVA: 0x4CB Offset: 0x4CB VA: 0x4CB Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x880 Offset: 0x880 VA: 0x880
[RequiredByNativeCodeAttribute] // RVA: 0x880 Offset: 0x880 VA: 0x880
[ThreadAndSerializationSafeAttribute] // RVA: 0x880 Offset: 0x880 VA: 0x880
[NativeHeaderAttribute] // RVA: 0x880 Offset: 0x880 VA: 0x880
public class AsyncOperation : YieldInstruction // TypeDefIndex: 1626
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private Action<AsyncOperation> m_completeCallback; // 0xC

	// Methods

	[StaticAccessorAttribute] // RVA: 0xA29 Offset: 0xA29 VA: 0xA29
	[NativeMethodAttribute] // RVA: 0xA29 Offset: 0xA29 VA: 0xA29
	// RVA: 0x644 Offset: 0x644 VA: 0x644
	private static void InternalDestroy(IntPtr ptr) { }

	// RVA: 0x645 Offset: 0x645 VA: 0x645 Slot: 1
	protected override void Finalize() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA2A Offset: 0xA2A VA: 0xA2A
	// RVA: 0x646 Offset: 0x646 VA: 0x646
	internal void InvokeCompletionEvent() { }
}

// Namespace: UnityEngine
internal class AttributeHelperEngine // TypeDefIndex: 1627
{
	// Fields
	public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x0
	public static ExecuteInEditMode[] _executeInEditModeArray; // 0x4
	public static RequireComponent[] _requireComponentArray; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA2B Offset: 0xA2B VA: 0xA2B
	// RVA: 0xA54 Offset: 0xA54 VA: 0xA54
	private static Type GetParentTypeDisallowingMultipleInclusion(Type type) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA2C Offset: 0xA2C VA: 0xA2C
	// RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	private static Type[] GetRequiredComponents(Type klass) { }

	// RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	private static int GetExecuteMode(Type klass) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA2D Offset: 0xA2D VA: 0xA2D
	// RVA: 0xA57 Offset: 0xA57 VA: 0xA57
	private static int CheckIsEditorScript(Type klass) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA2E Offset: 0xA2E VA: 0xA2E
	// RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	private static int GetDefaultExecutionOrderFor(Type klass) { }

	// RVA: -1 Offset: -1
	private static T GetCustomAttributeOfType<T>(Type klass) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDAA Offset: 0xDAA VA: 0xDAA
	|-AttributeHelperEngine.GetCustomAttributeOfType<object>
	|-AttributeHelperEngine.GetCustomAttributeOfType<DefaultExecutionOrder>
	*/

	// RVA: 0xF2F Offset: 0xF2F VA: 0xF2F
	private static void .cctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x881 Offset: 0x881 VA: 0x881
public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 1628
{
	// Methods

	// RVA: 0x65F Offset: 0x65F VA: 0x65F
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x882 Offset: 0x882 VA: 0x882
public sealed class RequireComponent : Attribute // TypeDefIndex: 1629
{
	// Fields
	public Type m_Type0; // 0x8
	public Type m_Type1; // 0xC
	public Type m_Type2; // 0x10

	// Methods

	// RVA: 0x56E Offset: 0x56E VA: 0x56E
	public void .ctor(Type requiredComponent) { }
}

// Namespace: UnityEngine
public sealed class AddComponentMenu : Attribute // TypeDefIndex: 1630
{
	// Fields
	private string m_AddComponentMenu; // 0x8
	private int m_Ordering; // 0xC

	// Methods

	// RVA: 0x4C9 Offset: 0x4C9 VA: 0x4C9
	public void .ctor(string menuName) { }

	// RVA: 0x332 Offset: 0x332 VA: 0x332
	public void .ctor(string menuName, int order) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x883 Offset: 0x883 VA: 0x883
[AttributeUsageAttribute] // RVA: 0x883 Offset: 0x883 VA: 0x883
public sealed class ContextMenu : Attribute // TypeDefIndex: 1631
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x884 Offset: 0x884 VA: 0x884
public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 1632
{
	// Methods

	// RVA: 0x679 Offset: 0x679 VA: 0x679
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x885 Offset: 0x885 VA: 0x885
public sealed class ExecuteAlways : Attribute // TypeDefIndex: 1633
{
	// Methods

	// RVA: 0x678 Offset: 0x678 VA: 0x678
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x886 Offset: 0x886 VA: 0x886
[UsedByNativeCodeAttribute] // RVA: 0x886 Offset: 0x886 VA: 0x886
public class DefaultExecutionOrder : Attribute // TypeDefIndex: 1634
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	[CompilerGeneratedAttribute] // RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	private int <order>k__BackingField; // 0x8

	// Properties
	public int order { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xA2F Offset: 0xA2F VA: 0xA2F
	// RVA: 0xA6E Offset: 0xA6E VA: 0xA6E
	public int get_order() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x887 Offset: 0x887 VA: 0x887
[RequiredByNativeCodeAttribute] // RVA: 0x887 Offset: 0x887 VA: 0x887
public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 1635
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x888 Offset: 0x888 VA: 0x888
[AttributeUsageAttribute] // RVA: 0x888 Offset: 0x888 VA: 0x888
public class ExcludeFromPresetAttribute : Attribute // TypeDefIndex: 1636
{
	// Methods

	// RVA: 0x677 Offset: 0x677 VA: 0x677
	public void .ctor() { }
}

// Namespace: UnityEngine
public enum SendMessageOptions // TypeDefIndex: 1637
{
	// Fields
	public int value__; // 0x0
	public const SendMessageOptions RequireReceiver = 0;
	public const SendMessageOptions DontRequireReceiver = 1;
}

// Namespace: UnityEngine
public enum RuntimePlatform // TypeDefIndex: 1638
{
	// Fields
	public int value__; // 0x0
	public const RuntimePlatform OSXEditor = 0;
	public const RuntimePlatform OSXPlayer = 1;
	public const RuntimePlatform WindowsPlayer = 2;
	[ObsoleteAttribute] // RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5
	public const RuntimePlatform OSXWebPlayer = 3;
	[ObsoleteAttribute] // RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6
	public const RuntimePlatform OSXDashboardPlayer = 4;
	[ObsoleteAttribute] // RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7
	public const RuntimePlatform WindowsWebPlayer = 5;
	public const RuntimePlatform WindowsEditor = 7;
	public const RuntimePlatform IPhonePlayer = 8;
	[ObsoleteAttribute] // RVA: 0x9A8 Offset: 0x9A8 VA: 0x9A8
	public const RuntimePlatform XBOX360 = 10;
	[ObsoleteAttribute] // RVA: 0x9A9 Offset: 0x9A9 VA: 0x9A9
	public const RuntimePlatform PS3 = 9;
	public const RuntimePlatform Android = 11;
	[ObsoleteAttribute] // RVA: 0x9AA Offset: 0x9AA VA: 0x9AA
	public const RuntimePlatform NaCl = 12;
	[ObsoleteAttribute] // RVA: 0x9AB Offset: 0x9AB VA: 0x9AB
	public const RuntimePlatform FlashPlayer = 15;
	public const RuntimePlatform LinuxPlayer = 13;
	public const RuntimePlatform LinuxEditor = 16;
	public const RuntimePlatform WebGLPlayer = 17;
	[ObsoleteAttribute] // RVA: 0x9AC Offset: 0x9AC VA: 0x9AC
	public const RuntimePlatform MetroPlayerX86 = 18;
	public const RuntimePlatform WSAPlayerX86 = 18;
	[ObsoleteAttribute] // RVA: 0x9AD Offset: 0x9AD VA: 0x9AD
	public const RuntimePlatform MetroPlayerX64 = 19;
	public const RuntimePlatform WSAPlayerX64 = 19;
	[ObsoleteAttribute] // RVA: 0x9AE Offset: 0x9AE VA: 0x9AE
	public const RuntimePlatform MetroPlayerARM = 20;
	public const RuntimePlatform WSAPlayerARM = 20;
	[ObsoleteAttribute] // RVA: 0x9AF Offset: 0x9AF VA: 0x9AF
	public const RuntimePlatform WP8Player = 21;
	[ObsoleteAttribute] // RVA: 0x9B0 Offset: 0x9B0 VA: 0x9B0
	public const RuntimePlatform BlackBerryPlayer = 22;
	[ObsoleteAttribute] // RVA: 0x9B1 Offset: 0x9B1 VA: 0x9B1
	public const RuntimePlatform TizenPlayer = 23;
	[ObsoleteAttribute] // RVA: 0x9B2 Offset: 0x9B2 VA: 0x9B2
	public const RuntimePlatform PSP2 = 24;
	public const RuntimePlatform PS4 = 25;
	[ObsoleteAttribute] // RVA: 0x9B3 Offset: 0x9B3 VA: 0x9B3
	public const RuntimePlatform PSM = 26;
	public const RuntimePlatform XboxOne = 27;
	[ObsoleteAttribute] // RVA: 0x9B4 Offset: 0x9B4 VA: 0x9B4
	public const RuntimePlatform SamsungTVPlayer = 28;
	[ObsoleteAttribute] // RVA: 0x9B5 Offset: 0x9B5 VA: 0x9B5
	public const RuntimePlatform WiiU = 30;
	public const RuntimePlatform tvOS = 31;
	public const RuntimePlatform Switch = 32;
	public const RuntimePlatform Lumin = 33;
}

// Namespace: UnityEngine
public enum LogType // TypeDefIndex: 1639
{
	// Fields
	public int value__; // 0x0
	public const LogType Error = 0;
	public const LogType Assert = 1;
	public const LogType Warning = 2;
	public const LogType Log = 3;
	public const LogType Exception = 4;
}

// Namespace: UnityEngine
internal static class BeforeRenderHelper // TypeDefIndex: 1640
{
	// Fields
	private static List<BeforeRenderHelper.OrderBlock> s_OrderBlocks; // 0xFFFFFFFF

	// Methods

	// RVA: 0xF30 Offset: 0xF30 VA: 0xF30
	public static void Invoke() { }

	// RVA: 0xF31 Offset: 0xF31 VA: 0xF31
	private static void .cctor() { }
}

// Namespace: 
private struct BeforeRenderHelper.OrderBlock // TypeDefIndex: 1641
{
	// Fields
	internal int order; // 0x0
	internal UnityAction callback; // 0x4
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x889 Offset: 0x889 VA: 0x889
[NativeHeaderAttribute] // RVA: 0x889 Offset: 0x889 VA: 0x889
public class Behaviour : Component // TypeDefIndex: 1642
{
	// Properties
	[RequiredByNativeCodeAttribute] // RVA: 0xB61 Offset: 0xB61 VA: 0xB61
	[NativePropertyAttribute] // RVA: 0xB61 Offset: 0xB61 VA: 0xB61
	public bool enabled { get; set; }
	[NativePropertyAttribute] // RVA: 0xB62 Offset: 0xB62 VA: 0xB62
	public bool isActiveAndEnabled { get; }

	// Methods

	// RVA: 0x647 Offset: 0x647 VA: 0x647
	public void .ctor() { }

	// RVA: 0xA59 Offset: 0xA59 VA: 0xA59
	public bool get_enabled() { }

	// RVA: 0x4CF Offset: 0x4CF VA: 0x4CF
	public void set_enabled(bool value) { }

	[NativeMethodAttribute] // RVA: 0xA30 Offset: 0xA30 VA: 0xA30
	// RVA: 0xA5A Offset: 0xA5A VA: 0xA5A
	public bool get_isActiveAndEnabled() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x88A Offset: 0x88A VA: 0x88A
internal class BootConfigData // TypeDefIndex: 1643
{
	// Fields
	private IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x4D0 Offset: 0x4D0 VA: 0x4D0
	private void .ctor(IntPtr nativeHandle) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA31 Offset: 0xA31 VA: 0xA31
	// RVA: 0xA5B Offset: 0xA5B VA: 0xA5B
	private static BootConfigData WrapBootConfigData(IntPtr nativeHandle) { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[RequiredByNativeCodeAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[NativeTypeAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[NativeHeaderAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[ThreadAndSerializationSafeAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[NativeHeaderAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[NativeHeaderAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
[NativeHeaderAttribute] // RVA: 0x88B Offset: 0x88B VA: 0x88B
public struct Bounds : IEquatable<Bounds> // TypeDefIndex: 1644
{
	// Fields
	private Vector3 m_Center; // 0x0
	[NativeNameAttribute] // RVA: 0x9B6 Offset: 0x9B6 VA: 0x9B6
	private Vector3 m_Extents; // 0xC

	// Properties
	public Vector3 center { get; set; }
	public Vector3 size { get; set; }
	public Vector3 extents { get; set; }
	public Vector3 min { get; }
	public Vector3 max { get; }

	// Methods

	// RVA: 0x337 Offset: 0x337 VA: 0x337
	public void .ctor(Vector3 center, Vector3 size) { }

	// RVA: 0xA5C Offset: 0xA5C VA: 0xA5C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x554 Offset: 0x554 VA: 0x554 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x555 Offset: 0x555 VA: 0x555 Slot: 4
	public bool Equals(Bounds other) { }

	// RVA: 0x4D1 Offset: 0x4D1 VA: 0x4D1
	public Vector3 get_center() { }

	// RVA: 0x4D2 Offset: 0x4D2 VA: 0x4D2
	public void set_center(Vector3 value) { }

	// RVA: 0x4D3 Offset: 0x4D3 VA: 0x4D3
	public Vector3 get_size() { }

	// RVA: 0x4D4 Offset: 0x4D4 VA: 0x4D4
	public void set_size(Vector3 value) { }

	// RVA: 0x4D5 Offset: 0x4D5 VA: 0x4D5
	public Vector3 get_extents() { }

	// RVA: 0x4D6 Offset: 0x4D6 VA: 0x4D6
	public void set_extents(Vector3 value) { }

	// RVA: 0x4D7 Offset: 0x4D7 VA: 0x4D7
	public Vector3 get_min() { }

	// RVA: 0x4D8 Offset: 0x4D8 VA: 0x4D8
	public Vector3 get_max() { }

	// RVA: 0x556 Offset: 0x556 VA: 0x556
	public static bool op_Equality(Bounds lhs, Bounds rhs) { }

	// RVA: 0x557 Offset: 0x557 VA: 0x557
	public static bool op_Inequality(Bounds lhs, Bounds rhs) { }

	// RVA: 0x338 Offset: 0x338 VA: 0x338
	public void SetMinMax(Vector3 min, Vector3 max) { }

	// RVA: 0x4D9 Offset: 0x4D9 VA: 0x4D9
	public void Encapsulate(Vector3 point) { }

	// RVA: 0xA5D Offset: 0xA5D VA: 0xA5D Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[UsedByNativeCodeAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
[NativeHeaderAttribute] // RVA: 0x88C Offset: 0x88C VA: 0x88C
public sealed class Camera : Behaviour // TypeDefIndex: 1645
{
	// Fields
	public static Camera.CameraCallback onPreCull; // 0x0
	public static Camera.CameraCallback onPreRender; // 0x4
	public static Camera.CameraCallback onPostRender; // 0x8

	// Properties
	[NativePropertyAttribute] // RVA: 0xB63 Offset: 0xB63 VA: 0xB63
	public float nearClipPlane { get; }
	[NativePropertyAttribute] // RVA: 0xB64 Offset: 0xB64 VA: 0xB64
	public float farClipPlane { get; }
	public float depth { get; }
	public int cullingMask { get; }
	public int eventMask { get; }
	public CameraClearFlags clearFlags { get; }
	[NativePropertyAttribute] // RVA: 0xB65 Offset: 0xB65 VA: 0xB65
	public Rect pixelRect { get; }
	public RenderTexture targetTexture { get; }
	public int targetDisplay { get; }
	public static Camera main { get; }
	public static int allCamerasCount { get; }

	// Methods

	// RVA: 0x648 Offset: 0x648 VA: 0x648
	public void .ctor() { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public float get_nearClipPlane() { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	public float get_farClipPlane() { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	public float get_depth() { }

	// RVA: 0xA5E Offset: 0xA5E VA: 0xA5E
	public int get_cullingMask() { }

	// RVA: 0xA5F Offset: 0xA5F VA: 0xA5F
	public int get_eventMask() { }

	// RVA: 0xA60 Offset: 0xA60 VA: 0xA60
	public CameraClearFlags get_clearFlags() { }

	// RVA: 0x4DA Offset: 0x4DA VA: 0x4DA
	public Rect get_pixelRect() { }

	// RVA: 0xA61 Offset: 0xA61 VA: 0xA61
	public RenderTexture get_targetTexture() { }

	// RVA: 0xA62 Offset: 0xA62 VA: 0xA62
	public int get_targetDisplay() { }

	// RVA: 0xF4 Offset: 0xF4 VA: 0xF4
	public Vector3 WorldToScreenPoint(Vector3 position, Camera.MonoOrStereoscopicEye eye) { }

	// RVA: 0x339 Offset: 0x339 VA: 0x339
	public Vector3 WorldToScreenPoint(Vector3 position) { }

	// RVA: 0x33A Offset: 0x33A VA: 0x33A
	public Vector3 ScreenToViewportPoint(Vector3 position) { }

	// RVA: 0xF5 Offset: 0xF5 VA: 0xF5
	private Ray ScreenPointToRay(Vector2 pos, Camera.MonoOrStereoscopicEye eye) { }

	// RVA: 0xF6 Offset: 0xF6 VA: 0xF6
	public Ray ScreenPointToRay(Vector3 pos, Camera.MonoOrStereoscopicEye eye) { }

	// RVA: 0x33B Offset: 0x33B VA: 0x33B
	public Ray ScreenPointToRay(Vector3 pos) { }

	[FreeFunctionAttribute] // RVA: 0xA32 Offset: 0xA32 VA: 0xA32
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal GameObject RaycastTry(Ray ray, float distance, int layerMask) { }

	[FreeFunctionAttribute] // RVA: 0xA33 Offset: 0xA33 VA: 0xA33
	// RVA: 0x2 Offset: 0x2 VA: 0x2
	internal GameObject RaycastTry2D(Ray ray, float distance, int layerMask) { }

	[FreeFunctionAttribute] // RVA: 0xA34 Offset: 0xA34 VA: 0xA34
	// RVA: 0x257 Offset: 0x257 VA: 0x257
	public static Camera get_main() { }

	[FreeFunctionAttribute] // RVA: 0xA35 Offset: 0xA35 VA: 0xA35
	// RVA: 0x258 Offset: 0x258 VA: 0x258
	private static int GetAllCamerasCount() { }

	[FreeFunctionAttribute] // RVA: 0xA36 Offset: 0xA36 VA: 0xA36
	// RVA: 0xA63 Offset: 0xA63 VA: 0xA63
	private static int GetAllCamerasImpl([Out] Camera[] cam) { }

	// RVA: 0x259 Offset: 0x259 VA: 0x259
	public static int get_allCamerasCount() { }

	// RVA: 0xA64 Offset: 0xA64 VA: 0xA64
	public static int GetAllCameras(Camera[] cameras) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA37 Offset: 0xA37 VA: 0xA37
	// RVA: 0x649 Offset: 0x649 VA: 0x649
	private static void FireOnPreCull(Camera cam) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA38 Offset: 0xA38 VA: 0xA38
	// RVA: 0x64A Offset: 0x64A VA: 0x64A
	private static void FireOnPreRender(Camera cam) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA39 Offset: 0xA39 VA: 0xA39
	// RVA: 0x64B Offset: 0x64B VA: 0x64B
	private static void FireOnPostRender(Camera cam) { }

	// RVA: 0x4DB Offset: 0x4DB VA: 0x4DB
	private void get_pixelRect_Injected(out Rect ret) { }

	// RVA: 0xF7 Offset: 0xF7 VA: 0xF7
	private void WorldToScreenPoint_Injected(ref Vector3 position, Camera.MonoOrStereoscopicEye eye, out Vector3 ret) { }

	// RVA: 0x33C Offset: 0x33C VA: 0x33C
	private void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret) { }

	// RVA: 0xF8 Offset: 0xF8 VA: 0xF8
	private void ScreenPointToRay_Injected(ref Vector2 pos, Camera.MonoOrStereoscopicEye eye, out Ray ret) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private GameObject RaycastTry_Injected(ref Ray ray, float distance, int layerMask) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	private GameObject RaycastTry2D_Injected(ref Ray ray, float distance, int layerMask) { }
}

// Namespace: 
public enum Camera.MonoOrStereoscopicEye // TypeDefIndex: 1646
{
	// Fields
	public int value__; // 0x0
	public const Camera.MonoOrStereoscopicEye Left = 0;
	public const Camera.MonoOrStereoscopicEye Right = 1;
	public const Camera.MonoOrStereoscopicEye Mono = 2;
}

// Namespace: 
public sealed class Camera.CameraCallback : MulticastDelegate // TypeDefIndex: 1647
{
	// Methods

	// RVA: 0x33D Offset: 0x33D VA: 0x33D
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4DC Offset: 0x4DC VA: 0x4DC Slot: 12
	public virtual void Invoke(Camera cam) { }

	// RVA: 0x13E Offset: 0x13E VA: 0x13E Slot: 13
	public virtual IAsyncResult BeginInvoke(Camera cam, AsyncCallback callback, object object) { }

	// RVA: 0x4DD Offset: 0x4DD VA: 0x4DD Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal static class ClassLibraryInitializer // TypeDefIndex: 1648
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA3A Offset: 0xA3A VA: 0xA3A
	// RVA: 0xF32 Offset: 0xF32 VA: 0xF32
	private static void Init() { }
}

// Namespace: UnityEngine
internal class LowerResBlitTexture : Object // TypeDefIndex: 1649
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA3B Offset: 0xA3B VA: 0xA3B
	// RVA: 0x696 Offset: 0x696 VA: 0x696
	internal void LowerResBlitTextureDontStripMe() { }
}

// Namespace: UnityEngine
internal class PreloadData : Object // TypeDefIndex: 1650
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA3C Offset: 0xA3C VA: 0xA3C
	// RVA: 0x6C4 Offset: 0x6C4 VA: 0x6C4
	internal void PreloadDataDontStripMe() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0x88D Offset: 0x88D VA: 0x88D
[RequiredByNativeCodeAttribute] // RVA: 0x88D Offset: 0x88D VA: 0x88D
[NativeClassAttribute] // RVA: 0x88D Offset: 0x88D VA: 0x88D
[NativeHeaderAttribute] // RVA: 0x88D Offset: 0x88D VA: 0x88D
public struct Color : IEquatable<Color> // TypeDefIndex: 1651
{
	// Fields
	public float r; // 0x0
	public float g; // 0x4
	public float b; // 0x8
	public float a; // 0xC

	// Properties
	public static Color red { get; }
	public static Color white { get; }
	public static Color black { get; }
	public static Color clear { get; }

	// Methods

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(float r, float g, float b, float a) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(float r, float g, float b) { }

	// RVA: 0xA65 Offset: 0xA65 VA: 0xA65 Slot: 3
	public override string ToString() { }

	// RVA: 0xA66 Offset: 0xA66 VA: 0xA66 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x558 Offset: 0x558 VA: 0x558 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x559 Offset: 0x559 VA: 0x559 Slot: 4
	public bool Equals(Color other) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static Color op_Multiply(Color a, float b) { }

	// RVA: 0x55A Offset: 0x55A VA: 0x55A
	public static bool op_Equality(Color lhs, Color rhs) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static Color Lerp(Color a, Color b, float t) { }

	// RVA: 0x64C Offset: 0x64C VA: 0x64C
	public static Color get_red() { }

	// RVA: 0x64D Offset: 0x64D VA: 0x64D
	public static Color get_white() { }

	// RVA: 0x64E Offset: 0x64E VA: 0x64E
	public static Color get_black() { }

	// RVA: 0x64F Offset: 0x64F VA: 0x64F
	public static Color get_clear() { }

	// RVA: 0x4DE Offset: 0x4DE VA: 0x4DE
	public static Vector4 op_Implicit(Color c) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x88E Offset: 0x88E VA: 0x88E
public struct Color32 // TypeDefIndex: 1652
{
	// Fields
	[IgnoreAttribute] // RVA: 0x9B7 Offset: 0x9B7 VA: 0x9B7
	private int rgba; // 0x0
	public byte r; // 0x0
	public byte g; // 0x1
	public byte b; // 0x2
	public byte a; // 0x3

	// Methods

	// RVA: 0x73 Offset: 0x73 VA: 0x73
	public void .ctor(byte r, byte g, byte b, byte a) { }

	// RVA: 0x4DF Offset: 0x4DF VA: 0x4DF
	public static Color32 op_Implicit(Color c) { }

	// RVA: 0x4E0 Offset: 0x4E0 VA: 0x4E0
	public static Color op_Implicit(Color32 c) { }

	// RVA: 0xA67 Offset: 0xA67 VA: 0xA67 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x88F Offset: 0x88F VA: 0x88F
[NativeClassAttribute] // RVA: 0x88F Offset: 0x88F VA: 0x88F
[NativeHeaderAttribute] // RVA: 0x88F Offset: 0x88F VA: 0x88F
public class Component : Object // TypeDefIndex: 1653
{
	// Properties
	public Transform transform { get; }
	public GameObject gameObject { get; }

	// Methods

	// RVA: 0x650 Offset: 0x650 VA: 0x650
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA3D Offset: 0xA3D VA: 0xA3D
	// RVA: 0xA68 Offset: 0xA68 VA: 0xA68
	public Transform get_transform() { }

	[FreeFunctionAttribute] // RVA: 0xA3E Offset: 0xA3E VA: 0xA3E
	// RVA: 0xA69 Offset: 0xA69 VA: 0xA69
	public GameObject get_gameObject() { }

	[TypeInferenceRuleAttribute] // RVA: 0xA3F Offset: 0xA3F VA: 0xA3F
	// RVA: 0x55B Offset: 0x55B VA: 0x55B
	public Component GetComponent(Type type) { }

	// RVA: -1 Offset: -1
	public T GetComponent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDAB Offset: 0xDAB VA: 0xDAB
	|-Component.GetComponent<Animator>
	|-Component.GetComponent<Camera>
	|-Component.GetComponent<Canvas>
	|-Component.GetComponent<CanvasRenderer>
	|-Component.GetComponent<EventSystem>
	|-Component.GetComponent<RectTransform>
	|-Component.GetComponent<Transform>
	|-Component.GetComponent<Graphic>
	|-Component.GetComponent<Image>
	|-Component.GetComponent<InputField>
	|-Component.GetComponent<Mask>
	|-Component.GetComponent<Text>
	|-Component.GetComponent<object>
	|-Component.GetComponent<GUILayer>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA40 Offset: 0xA40 VA: 0xA40
	// RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	public Component GetComponentInChildren(Type t, bool includeInactive) { }

	[ExcludeFromDocsAttribute] // RVA: 0xA41 Offset: 0xA41 VA: 0xA41
	// RVA: -1 Offset: -1
	public T GetComponentInChildren<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDAC Offset: 0xDAC VA: 0xDAC
	|-Component.GetComponentInChildren<Toggle>
	|-Component.GetComponentInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInChildren<T>(bool includeInactive, List<T> result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x43E Offset: 0x43E VA: 0x43E
	|-Component.GetComponentsInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInChildren<T>(List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x83B Offset: 0x83B VA: 0x83B
	|-Component.GetComponentsInChildren<object>
	|-Component.GetComponentsInChildren<Component>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA42 Offset: 0xA42 VA: 0xA42
	// RVA: 0x55C Offset: 0x55C VA: 0x55C
	public Component GetComponentInParent(Type t) { }

	// RVA: -1 Offset: -1
	public T GetComponentInParent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDAD Offset: 0xDAD VA: 0xDAD
	|-Component.GetComponentInParent<Dropdown>
	|-Component.GetComponentInParent<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInParent<T>(bool includeInactive, List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x43F Offset: 0x43F VA: 0x43F
	|-Component.GetComponentsInParent<object>
	|-Component.GetComponentsInParent<Canvas>
	|-Component.GetComponentsInParent<RectMask2D>
	*/

	[FreeFunctionAttribute] // RVA: 0xA43 Offset: 0xA43 VA: 0xA43
	// RVA: 0x33E Offset: 0x33E VA: 0x33E
	private void GetComponentsForListInternal(Type searchType, object resultList) { }

	// RVA: 0x33F Offset: 0x33F VA: 0x33F
	public void GetComponents(Type type, List<Component> results) { }

	// RVA: -1 Offset: -1
	public void GetComponents<T>(List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x83C Offset: 0x83C VA: 0x83C
	|-Component.GetComponents<object>
	|-Component.GetComponents<CanvasGroup>
	|-Component.GetComponents<Component>
	|-Component.GetComponents<BaseInputModule>
	|-Component.GetComponents<Mask>
	*/

	// RVA: -1 Offset: -1
	public T[] GetComponents<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDAE Offset: 0xDAE VA: 0xDAE
	|-Component.GetComponents<BaseInput>
	|-Component.GetComponents<object>
	*/
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x890 Offset: 0x890 VA: 0x890
[RequiredByNativeCodeAttribute] // RVA: 0x890 Offset: 0x890 VA: 0x890
public sealed class Coroutine : YieldInstruction // TypeDefIndex: 1654
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x651 Offset: 0x651 VA: 0x651
	private void .ctor() { }

	// RVA: 0x652 Offset: 0x652 VA: 0x652 Slot: 1
	protected override void Finalize() { }

	[FreeFunctionAttribute] // RVA: 0xA44 Offset: 0xA44 VA: 0xA44
	// RVA: 0x653 Offset: 0x653 VA: 0x653
	private static void ReleaseCoroutine(IntPtr ptr) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x891 Offset: 0x891 VA: 0x891
internal class SetupCoroutine // TypeDefIndex: 1655
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA45 Offset: 0xA45 VA: 0xA45
	// RVA: 0x579 Offset: 0x579 VA: 0x579
	public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA46 Offset: 0xA46 VA: 0xA46
	// RVA: 0xA1D Offset: 0xA1D VA: 0xA1D
	public static object InvokeMember(object behaviour, string name, object variable) { }
}

// Namespace: UnityEngine
public struct CullingGroupEvent // TypeDefIndex: 1656
{
	// Fields
	private int m_Index; // 0x0
	private byte m_PrevState; // 0x4
	private byte m_ThisState; // 0x5
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x892 Offset: 0x892 VA: 0x892
public class CullingGroup : IDisposable // TypeDefIndex: 1657
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private CullingGroup.StateChanged m_OnStateChanged; // 0xC

	// Methods

	// RVA: 0x654 Offset: 0x654 VA: 0x654 Slot: 1
	protected override void Finalize() { }

	[FreeFunctionAttribute] // RVA: 0xA47 Offset: 0xA47 VA: 0xA47
	// RVA: 0x655 Offset: 0x655 VA: 0x655
	private void DisposeInternal() { }

	// RVA: 0x656 Offset: 0x656 VA: 0x656 Slot: 4
	public void Dispose() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA48 Offset: 0xA48 VA: 0xA48
	// RVA: 0x340 Offset: 0x340 VA: 0x340
	private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count) { }

	[FreeFunctionAttribute] // RVA: 0xA49 Offset: 0xA49 VA: 0xA49
	// RVA: 0x657 Offset: 0x657 VA: 0x657
	private void FinalizerFailure() { }
}

// Namespace: 
public sealed class CullingGroup.StateChanged : MulticastDelegate // TypeDefIndex: 1658
{
	// Methods

	// RVA: 0x341 Offset: 0x341 VA: 0x341
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4E1 Offset: 0x4E1 VA: 0x4E1 Slot: 12
	public virtual void Invoke(CullingGroupEvent sphere) { }

	// RVA: 0x13F Offset: 0x13F VA: 0x13F Slot: 13
	public virtual IAsyncResult BeginInvoke(CullingGroupEvent sphere, AsyncCallback callback, object object) { }

	// RVA: 0x4E2 Offset: 0x4E2 VA: 0x4E2 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public enum CursorLockMode // TypeDefIndex: 1659
{
	// Fields
	public int value__; // 0x0
	public const CursorLockMode None = 0;
	public const CursorLockMode Locked = 1;
	public const CursorLockMode Confined = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x893 Offset: 0x893 VA: 0x893
public class Cursor // TypeDefIndex: 1660
{
	// Properties
	public static CursorLockMode lockState { get; }

	// Methods

	// RVA: 0x25A Offset: 0x25A VA: 0x25A
	public static CursorLockMode get_lockState() { }
}

// Namespace: UnityEngine
public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 1661
{
	// Properties
	public abstract bool keepWaiting { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x658 Offset: 0x658 VA: 0x658
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_keepWaiting() { }

	// RVA: 0xA6C Offset: 0xA6C VA: 0xA6C Slot: 5
	public object get_Current() { }

	// RVA: 0xA6D Offset: 0xA6D VA: 0xA6D Slot: 4
	public bool MoveNext() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x894 Offset: 0x894 VA: 0x894
internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 1662
{
	// Methods

	// RVA: 0x65E Offset: 0x65E VA: 0x65E
	public void .ctor() { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA4A Offset: 0xA4A VA: 0xA4A
	// RVA: 0x344 Offset: 0x344 VA: 0x344
	internal static void Internal_Log(LogType level, string msg, Object obj) { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA4B Offset: 0xA4B VA: 0xA4B
	// RVA: 0x4E6 Offset: 0x4E6 VA: 0x4E6
	internal static void Internal_LogException(Exception exception, Object obj) { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79 Slot: 4
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: 0x345 Offset: 0x345 VA: 0x345 Slot: 5
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x895 Offset: 0x895 VA: 0x895
public class Debug // TypeDefIndex: 1663
{
	// Fields
	internal static ILogger s_Logger; // 0xFFFFFFFF

	// Properties
	public static ILogger unityLogger { get; }

	// Methods

	// RVA: 0x25B Offset: 0x25B VA: 0x25B
	public static ILogger get_unityLogger() { }

	// RVA: 0x659 Offset: 0x659 VA: 0x659
	public static void Log(object message) { }

	// RVA: 0x65A Offset: 0x65A VA: 0x65A
	public static void LogError(object message) { }

	// RVA: 0x4E3 Offset: 0x4E3 VA: 0x4E3
	public static void LogError(object message, Object context) { }

	// RVA: 0x342 Offset: 0x342 VA: 0x342
	public static void LogErrorFormat(Object context, string format, object[] args) { }

	// RVA: 0x65B Offset: 0x65B VA: 0x65B
	public static void LogException(Exception exception) { }

	// RVA: 0x4E4 Offset: 0x4E4 VA: 0x4E4
	public static void LogException(Exception exception, Object context) { }

	// RVA: 0x65C Offset: 0x65C VA: 0x65C
	public static void LogWarning(object message) { }

	// RVA: 0x4E5 Offset: 0x4E5 VA: 0x4E5
	public static void LogWarning(object message, Object context) { }

	// RVA: 0x343 Offset: 0x343 VA: 0x343
	public static void LogWarningFormat(Object context, string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xA4C Offset: 0xA4C VA: 0xA4C
	// RVA: 0x65D Offset: 0x65D VA: 0x65D
	public static void LogAssertion(object message) { }

	// RVA: 0xF33 Offset: 0xF33 VA: 0xF33
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x896 Offset: 0x896 VA: 0x896
[NativeHeaderAttribute] // RVA: 0x896 Offset: 0x896 VA: 0x896
public class Display // TypeDefIndex: 1664
{
	// Fields
	internal IntPtr nativeDisplay; // 0x8
	public static Display[] displays; // 0x0
	private static Display _mainDisplay; // 0x4
	[DebuggerBrowsableAttribute] // RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8
	[CompilerGeneratedAttribute] // RVA: 0x9B8 Offset: 0x9B8 VA: 0x9B8
	private static Display.DisplaysUpdatedDelegate onDisplaysUpdated; // 0x8

	// Properties
	public int renderingWidth { get; }
	public int renderingHeight { get; }
	public int systemWidth { get; }
	public int systemHeight { get; }
	public static Display main { get; }

	// Methods

	// RVA: 0x660 Offset: 0x660 VA: 0x660
	internal void .ctor() { }

	// RVA: 0x4E7 Offset: 0x4E7 VA: 0x4E7
	internal void .ctor(IntPtr nativeDisplay) { }

	// RVA: 0xA6F Offset: 0xA6F VA: 0xA6F
	public int get_renderingWidth() { }

	// RVA: 0xA70 Offset: 0xA70 VA: 0xA70
	public int get_renderingHeight() { }

	// RVA: 0xA71 Offset: 0xA71 VA: 0xA71
	public int get_systemWidth() { }

	// RVA: 0xA72 Offset: 0xA72 VA: 0xA72
	public int get_systemHeight() { }

	// RVA: 0x4E8 Offset: 0x4E8 VA: 0x4E8
	public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates) { }

	// RVA: 0x25C Offset: 0x25C VA: 0x25C
	public static Display get_main() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA4D Offset: 0xA4D VA: 0xA4D
	// RVA: 0x661 Offset: 0x661 VA: 0x661
	private static void RecreateDisplayList(IntPtr[] nativeDisplay) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA4E Offset: 0xA4E VA: 0xA4E
	// RVA: 0xF34 Offset: 0xF34 VA: 0xF34
	private static void FireDisplaysUpdated() { }

	[FreeFunctionAttribute] // RVA: 0xA4F Offset: 0xA4F VA: 0xA4F
	// RVA: 0x346 Offset: 0x346 VA: 0x346
	private static void GetSystemExtImpl(IntPtr nativeDisplay, out int w, out int h) { }

	[FreeFunctionAttribute] // RVA: 0xA50 Offset: 0xA50 VA: 0xA50
	// RVA: 0x347 Offset: 0x347 VA: 0x347
	private static void GetRenderingExtImpl(IntPtr nativeDisplay, out int w, out int h) { }

	[FreeFunctionAttribute] // RVA: 0xA51 Offset: 0xA51 VA: 0xA51
	// RVA: 0x140 Offset: 0x140 VA: 0x140
	private static int RelativeMouseAtImpl(int x, int y, out int rx, out int ry) { }

	// RVA: 0xF35 Offset: 0xF35 VA: 0xF35
	private static void .cctor() { }
}

// Namespace: 
public sealed class Display.DisplaysUpdatedDelegate : MulticastDelegate // TypeDefIndex: 1665
{
	// Methods

	// RVA: 0x348 Offset: 0x348 VA: 0x348
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x662 Offset: 0x662 VA: 0x662 Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA07 Offset: 0xA07 VA: 0xA07 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x4E9 Offset: 0x4E9 VA: 0x4E9 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x897 Offset: 0x897 VA: 0x897
[UsedByNativeCodeAttribute] // RVA: 0x897 Offset: 0x897 VA: 0x897
public class ExcludeFromObjectFactoryAttribute : Attribute // TypeDefIndex: 1666
{
	// Methods

	// RVA: 0x676 Offset: 0x676 VA: 0x676
	public void .ctor() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0x898 Offset: 0x898 VA: 0x898
[ExcludeFromObjectFactoryAttribute] // RVA: 0x898 Offset: 0x898 VA: 0x898
[RequiredByNativeCodeAttribute] // RVA: 0x898 Offset: 0x898 VA: 0x898
internal class FailedToLoadScriptObject : Object // TypeDefIndex: 1667
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x899 Offset: 0x899 VA: 0x899
[NativeHeaderAttribute] // RVA: 0x899 Offset: 0x899 VA: 0x899
[UsedByNativeCodeAttribute] // RVA: 0x899 Offset: 0x899 VA: 0x899
[Serializable]
public class RectOffset // TypeDefIndex: 1668
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0x9B9 Offset: 0x9B9 VA: 0x9B9
	internal IntPtr m_Ptr; // 0x8
	private readonly object m_SourceStyle; // 0xC

	// Properties
	[NativePropertyAttribute] // RVA: 0xB66 Offset: 0xB66 VA: 0xB66
	public int left { get; }
	[NativePropertyAttribute] // RVA: 0xB67 Offset: 0xB67 VA: 0xB67
	public int right { get; }
	[NativePropertyAttribute] // RVA: 0xB68 Offset: 0xB68 VA: 0xB68
	public int top { get; }
	[NativePropertyAttribute] // RVA: 0xB69 Offset: 0xB69 VA: 0xB69
	public int bottom { get; }
	public int horizontal { get; }
	public int vertical { get; }

	// Methods

	// RVA: 0x6C8 Offset: 0x6C8 VA: 0x6C8
	public void .ctor() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xA52 Offset: 0xA52 VA: 0xA52
	// RVA: 0x368 Offset: 0x368 VA: 0x368
	internal void .ctor(object sourceStyle, IntPtr source) { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA53 Offset: 0xA53 VA: 0xA53
	// RVA: 0x26D Offset: 0x26D VA: 0x26D
	private static IntPtr InternalCreate() { }

	[ThreadAndSerializationSafeAttribute] // RVA: 0xA54 Offset: 0xA54 VA: 0xA54
	// RVA: 0x6C9 Offset: 0x6C9 VA: 0x6C9
	private static void InternalDestroy(IntPtr ptr) { }

	// RVA: 0xAD7 Offset: 0xAD7 VA: 0xAD7
	public int get_left() { }

	// RVA: 0xAD8 Offset: 0xAD8 VA: 0xAD8
	public int get_right() { }

	// RVA: 0xAD9 Offset: 0xAD9 VA: 0xAD9
	public int get_top() { }

	// RVA: 0xADA Offset: 0xADA VA: 0xADA
	public int get_bottom() { }

	// RVA: 0xADB Offset: 0xADB VA: 0xADB
	public int get_horizontal() { }

	// RVA: 0xADC Offset: 0xADC VA: 0xADC
	public int get_vertical() { }

	// RVA: 0x6CA Offset: 0x6CA VA: 0x6CA Slot: 1
	protected override void Finalize() { }

	// RVA: 0xADD Offset: 0xADD VA: 0xADD Slot: 3
	public override string ToString() { }

	// RVA: 0x6CB Offset: 0x6CB VA: 0x6CB
	private void Destroy() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0x89A Offset: 0x89A VA: 0x89A
public class GUIElement : Behaviour // TypeDefIndex: 1669
{
	// Methods

	// RVA: 0x687 Offset: 0x687 VA: 0x687
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0x89B Offset: 0x89B VA: 0x89B
[ObsoleteAttribute] // RVA: 0x89B Offset: 0x89B VA: 0x89B
public class GUILayer : Behaviour // TypeDefIndex: 1670
{
	// Methods

	// RVA: 0x568 Offset: 0x568 VA: 0x568
	public GUIElement HitTest(Vector3 screenPosition) { }

	// RVA: 0x569 Offset: 0x569 VA: 0x569
	private GUIElement HitTest(Vector2 screenPosition) { }

	// RVA: 0x56A Offset: 0x56A VA: 0x56A
	private GUIElement HitTest_Injected(ref Vector2 screenPosition) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x89C Offset: 0x89C VA: 0x89C
[NativeHeaderAttribute] // RVA: 0x89C Offset: 0x89C VA: 0x89C
[ExcludeFromPresetAttribute] // RVA: 0x89C Offset: 0x89C VA: 0x89C
public sealed class GameObject : Object // TypeDefIndex: 1671
{
	// Properties
	public Transform transform { get; }
	public int layer { get; set; }
	public bool activeSelf { get; }
	public bool activeInHierarchy { get; }

	// Methods

	// RVA: 0x4FF Offset: 0x4FF VA: 0x4FF
	public void .ctor(string name) { }

	// RVA: 0x688 Offset: 0x688 VA: 0x688
	public void .ctor() { }

	// RVA: 0x350 Offset: 0x350 VA: 0x350
	public void .ctor(string name, Type[] components) { }

	// RVA: -1 Offset: -1
	public T GetComponent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDAF Offset: 0xDAF VA: 0xDAF
	|-GameObject.GetComponent<Canvas>
	|-GameObject.GetComponent<CanvasGroup>
	|-GameObject.GetComponent<CanvasRenderer>
	|-GameObject.GetComponent<RectTransform>
	|-GameObject.GetComponent<SpriteRenderer>
	|-GameObject.GetComponent<Scrollbar>
	|-GameObject.GetComponent<object>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	[FreeFunctionAttribute] // RVA: 0xA55 Offset: 0xA55 VA: 0xA55
	// RVA: 0x56B Offset: 0x56B VA: 0x56B
	public Component GetComponent(Type type) { }

	[FreeFunctionAttribute] // RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	[TypeInferenceRuleAttribute] // RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	// RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	public Component GetComponentInChildren(Type type, bool includeInactive) { }

	[ExcludeFromDocsAttribute] // RVA: 0xA57 Offset: 0xA57 VA: 0xA57
	// RVA: -1 Offset: -1
	public T GetComponentInChildren<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB0 Offset: 0xDB0 VA: 0xDB0
	|-GameObject.GetComponentInChildren<Dropdown.DropdownItem>
	|-GameObject.GetComponentInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public T GetComponentInChildren<T>(bool includeInactive) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6
	|-GameObject.GetComponentInChildren<object>
	*/

	[TypeInferenceRuleAttribute] // RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	[FreeFunctionAttribute] // RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	// RVA: 0x56C Offset: 0x56C VA: 0x56C
	public Component GetComponentInParent(Type type) { }

	[FreeFunctionAttribute] // RVA: 0xA59 Offset: 0xA59 VA: 0xA59
	// RVA: 0x24 Offset: 0x24 VA: 0x24
	private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList) { }

	// RVA: -1 Offset: -1
	public T[] GetComponents<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB1 Offset: 0xDB1 VA: 0xDB1
	|-GameObject.GetComponents<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponents<T>(List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x83D Offset: 0x83D VA: 0x83D
	|-GameObject.GetComponents<object>
	|-GameObject.GetComponents<Component>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInChildren<T>(bool includeInactive, List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x440 Offset: 0x440 VA: 0x440
	|-GameObject.GetComponentsInChildren<object>
	*/

	// RVA: -1 Offset: -1
	public void GetComponentsInParent<T>(bool includeInactive, List<T> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x441 Offset: 0x441 VA: 0x441
	|-GameObject.GetComponentsInParent<object>
	|-GameObject.GetComponentsInParent<Canvas>
	*/

	[FreeFunctionAttribute] // RVA: 0xA5A Offset: 0xA5A VA: 0xA5A
	// RVA: 0x56D Offset: 0x56D VA: 0x56D
	private Component Internal_AddComponentWithType(Type componentType) { }

	[TypeInferenceRuleAttribute] // RVA: 0xA5B Offset: 0xA5B VA: 0xA5B
	// RVA: 0x56E Offset: 0x56E VA: 0x56E
	public Component AddComponent(Type componentType) { }

	// RVA: -1 Offset: -1
	public T AddComponent<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB2 Offset: 0xDB2 VA: 0xDB2
	|-GameObject.AddComponent<Canvas>
	|-GameObject.AddComponent<BaseInput>
	|-GameObject.AddComponent<RectTransform>
	|-GameObject.AddComponent<Button>
	|-GameObject.AddComponent<Dropdown.DropdownItem>
	|-GameObject.AddComponent<Dropdown>
	|-GameObject.AddComponent<GraphicRaycaster>
	|-GameObject.AddComponent<Image>
	|-GameObject.AddComponent<InputField>
	|-GameObject.AddComponent<LayoutElement>
	|-GameObject.AddComponent<Mask>
	|-GameObject.AddComponent<RawImage>
	|-GameObject.AddComponent<ScrollRect>
	|-GameObject.AddComponent<Scrollbar>
	|-GameObject.AddComponent<Slider>
	|-GameObject.AddComponent<Text>
	|-GameObject.AddComponent<Toggle>
	|-GameObject.AddComponent<object>
	*/

	[FreeFunctionAttribute] // RVA: 0xA5C Offset: 0xA5C VA: 0xA5C
	// RVA: 0xA91 Offset: 0xA91 VA: 0xA91
	public Transform get_transform() { }

	// RVA: 0xA92 Offset: 0xA92 VA: 0xA92
	public int get_layer() { }

	// RVA: 0x500 Offset: 0x500 VA: 0x500
	public void set_layer(int value) { }

	[NativeMethodAttribute] // RVA: 0xA5D Offset: 0xA5D VA: 0xA5D
	// RVA: 0x501 Offset: 0x501 VA: 0x501
	public void SetActive(bool value) { }

	[NativeMethodAttribute] // RVA: 0xA5E Offset: 0xA5E VA: 0xA5E
	// RVA: 0xA93 Offset: 0xA93 VA: 0xA93
	public bool get_activeSelf() { }

	[NativeMethodAttribute] // RVA: 0xA5F Offset: 0xA5F VA: 0xA5F
	// RVA: 0xA94 Offset: 0xA94 VA: 0xA94
	public bool get_activeInHierarchy() { }

	[FreeFunctionAttribute] // RVA: 0xA60 Offset: 0xA60 VA: 0xA60
	// RVA: 0xFC Offset: 0xFC VA: 0xFC
	public void SendMessage(string methodName, object value, SendMessageOptions options) { }

	[FreeFunctionAttribute] // RVA: 0xA61 Offset: 0xA61 VA: 0xA61
	// RVA: 0x502 Offset: 0x502 VA: 0x502
	private static void Internal_CreateGameObject(GameObject self, string name) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x89D Offset: 0x89D VA: 0x89D
[NativeHeaderAttribute] // RVA: 0x89D Offset: 0x89D VA: 0x89D
public class Gradient : IEquatable<Gradient> // TypeDefIndex: 1672
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA62 Offset: 0xA62 VA: 0xA62
	// RVA: 0x689 Offset: 0x689 VA: 0x689
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA63 Offset: 0xA63 VA: 0xA63
	// RVA: 0x262 Offset: 0x262 VA: 0x262
	private static IntPtr Init() { }

	[FreeFunctionAttribute] // RVA: 0xA64 Offset: 0xA64 VA: 0xA64
	// RVA: 0x68A Offset: 0x68A VA: 0x68A
	private void Cleanup() { }

	[FreeFunctionAttribute] // RVA: 0xA65 Offset: 0xA65 VA: 0xA65
	// RVA: 0x56F Offset: 0x56F VA: 0x56F
	private bool Internal_Equals(IntPtr other) { }

	// RVA: 0x68B Offset: 0x68B VA: 0x68B Slot: 1
	protected override void Finalize() { }

	// RVA: 0x570 Offset: 0x570 VA: 0x570 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x571 Offset: 0x571 VA: 0x571 Slot: 4
	public bool Equals(Gradient other) { }

	// RVA: 0xA95 Offset: 0xA95 VA: 0xA95 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
public enum FullScreenMode // TypeDefIndex: 1673
{
	// Fields
	public int value__; // 0x0
	public const FullScreenMode ExclusiveFullScreen = 0;
	public const FullScreenMode FullScreenWindow = 1;
	public const FullScreenMode MaximizedWindow = 2;
	public const FullScreenMode Windowed = 3;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x89E Offset: 0x89E VA: 0x89E
[StaticAccessorAttribute] // RVA: 0x89E Offset: 0x89E VA: 0x89E
[NativeHeaderAttribute] // RVA: 0x89E Offset: 0x89E VA: 0x89E
public sealed class Screen // TypeDefIndex: 1674
{
	// Properties
	public static int width { get; }
	public static int height { get; }
	public static float dpi { get; }
	public static FullScreenMode fullScreenMode { get; }

	// Methods

	[NativeMethodAttribute] // RVA: 0xA66 Offset: 0xA66 VA: 0xA66
	// RVA: 0x26E Offset: 0x26E VA: 0x26E
	public static int get_width() { }

	[NativeMethodAttribute] // RVA: 0xA67 Offset: 0xA67 VA: 0xA67
	// RVA: 0x26F Offset: 0x26F VA: 0x26F
	public static int get_height() { }

	[NativeNameAttribute] // RVA: 0xA68 Offset: 0xA68 VA: 0xA68
	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static float get_dpi() { }

	[NativeNameAttribute] // RVA: 0xA69 Offset: 0xA69 VA: 0xA69
	// RVA: 0x270 Offset: 0x270 VA: 0x270
	public static FullScreenMode get_fullScreenMode() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x89F Offset: 0x89F VA: 0x89F
public struct Resolution // TypeDefIndex: 1675
{
	// Fields
	private int m_Width; // 0x0
	private int m_Height; // 0x4
	private int m_RefreshRate; // 0x8

	// Methods

	// RVA: 0xAE7 Offset: 0xAE7 VA: 0xAE7 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
[NativeHeaderAttribute] // RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
[NativeHeaderAttribute] // RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0
public sealed class QualitySettings : Object // TypeDefIndex: 1676
{
	// Properties
	public static ColorSpace activeColorSpace { get; }

	// Methods

	[StaticAccessorAttribute] // RVA: 0xA6A Offset: 0xA6A VA: 0xA6A
	[NativeNameAttribute] // RVA: 0xA6A Offset: 0xA6A VA: 0xA6A
	// RVA: 0x26C Offset: 0x26C VA: 0x26C
	public static ColorSpace get_activeColorSpace() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
[RequireComponent] // RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
[UsedByNativeCodeAttribute] // RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
[NativeHeaderAttribute] // RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1
public class Renderer : Component // TypeDefIndex: 1677
{
	// Properties
	public int sortingLayerID { get; }
	public int sortingOrder { get; }

	// Methods

	// RVA: 0xAE5 Offset: 0xAE5 VA: 0xAE5
	public int get_sortingLayerID() { }

	// RVA: 0xAE6 Offset: 0xAE6 VA: 0xAE6
	public int get_sortingOrder() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
[NativeHeaderAttribute] // RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
[NativeHeaderAttribute] // RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
[NativeHeaderAttribute] // RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
[NativeHeaderAttribute] // RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
[NativeHeaderAttribute] // RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2
public sealed class Shader : Object // TypeDefIndex: 1678
{
	// Methods

	[FreeFunctionAttribute] // RVA: 0xA6B Offset: 0xA6B VA: 0xA6B
	// RVA: 0xAED Offset: 0xAED VA: 0xAED
	public static int PropertyToID(string name) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
[NativeHeaderAttribute] // RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
public class Material : Object // TypeDefIndex: 1679
{
	// Properties
	public Texture mainTexture { get; }

	// Methods

	// RVA: 0x50B Offset: 0x50B VA: 0x50B
	public void .ctor(Shader shader) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA6C Offset: 0xA6C VA: 0xA6C
	// RVA: 0x50C Offset: 0x50C VA: 0x50C
	public void .ctor(Material source) { }

	[EditorBrowsableAttribute] // RVA: 0xA6D Offset: 0xA6D VA: 0xA6D
	[ObsoleteAttribute] // RVA: 0xA6D Offset: 0xA6D VA: 0xA6D
	// RVA: 0x50D Offset: 0x50D VA: 0x50D
	public void .ctor(string contents) { }

	[FreeFunctionAttribute] // RVA: 0xA6E Offset: 0xA6E VA: 0xA6E
	// RVA: 0x50E Offset: 0x50E VA: 0x50E
	private static void CreateWithShader(Material self, Shader shader) { }

	[FreeFunctionAttribute] // RVA: 0xA6F Offset: 0xA6F VA: 0xA6F
	// RVA: 0x50F Offset: 0x50F VA: 0x50F
	private static void CreateWithMaterial(Material self, Material source) { }

	[FreeFunctionAttribute] // RVA: 0xA70 Offset: 0xA70 VA: 0xA70
	// RVA: 0x698 Offset: 0x698 VA: 0x698
	private static void CreateWithString(Material self) { }

	// RVA: 0xAA2 Offset: 0xAA2 VA: 0xAA2
	public Texture get_mainTexture() { }

	[NativeNameAttribute] // RVA: 0xA71 Offset: 0xA71 VA: 0xA71
	// RVA: 0x574 Offset: 0x574 VA: 0x574
	public bool HasProperty(int nameID) { }

	// RVA: 0x575 Offset: 0x575 VA: 0x575
	public bool HasProperty(string name) { }

	// RVA: 0x510 Offset: 0x510 VA: 0x510
	public void EnableKeyword(string keyword) { }

	// RVA: 0x511 Offset: 0x511 VA: 0x511
	public void DisableKeyword(string keyword) { }

	[NativeNameAttribute] // RVA: 0xA72 Offset: 0xA72 VA: 0xA72
	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private void SetFloatImpl(int name, float value) { }

	[NativeNameAttribute] // RVA: 0xA73 Offset: 0xA73 VA: 0xA73
	// RVA: 0x576 Offset: 0x576 VA: 0x576
	private Texture GetTextureImpl(int name) { }

	// RVA: 0x353 Offset: 0x353 VA: 0x353
	public void SetInt(string name, int value) { }

	// RVA: 0x577 Offset: 0x577 VA: 0x577
	public Texture GetTexture(string name) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
[NativeHeaderAttribute] // RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4
public sealed class MeshFilter : Component // TypeDefIndex: 1680
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA74 Offset: 0xA74 VA: 0xA74
	// RVA: 0x69F Offset: 0x69F VA: 0x69F
	private void DontStripMeshFilter() { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5
public enum LightmapBakeType // TypeDefIndex: 1681
{
	// Fields
	public int value__; // 0x0
	public const LightmapBakeType Realtime = 4;
	public const LightmapBakeType Baked = 2;
	public const LightmapBakeType Mixed = 1;
}

// Namespace: UnityEngine
public enum MixedLightingMode // TypeDefIndex: 1682
{
	// Fields
	public int value__; // 0x0
	public const MixedLightingMode IndirectOnly = 0;
	public const MixedLightingMode Shadowmask = 2;
	public const MixedLightingMode Subtractive = 1;
}

// Namespace: UnityEngine
public enum CameraClearFlags // TypeDefIndex: 1683
{
	// Fields
	public int value__; // 0x0
	public const CameraClearFlags Skybox = 1;
	public const CameraClearFlags Color = 2;
	public const CameraClearFlags SolidColor = 2;
	public const CameraClearFlags Depth = 3;
	public const CameraClearFlags Nothing = 4;
}

// Namespace: UnityEngine
public enum MeshTopology // TypeDefIndex: 1684
{
	// Fields
	public int value__; // 0x0
	public const MeshTopology Triangles = 0;
	public const MeshTopology Quads = 2;
	public const MeshTopology Lines = 3;
	public const MeshTopology LineStrip = 4;
	public const MeshTopology Points = 5;
}

// Namespace: UnityEngine
public enum ColorSpace // TypeDefIndex: 1685
{
	// Fields
	public int value__; // 0x0
	public const ColorSpace Uninitialized = -1;
	public const ColorSpace Gamma = 0;
	public const ColorSpace Linear = 1;
}

// Namespace: UnityEngine
public enum TextureWrapMode // TypeDefIndex: 1686
{
	// Fields
	public int value__; // 0x0
	public const TextureWrapMode Repeat = 0;
	public const TextureWrapMode Clamp = 1;
	public const TextureWrapMode Mirror = 2;
	public const TextureWrapMode MirrorOnce = 3;
}

// Namespace: UnityEngine
public enum TextureFormat // TypeDefIndex: 1687
{
	// Fields
	public int value__; // 0x0
	public const TextureFormat Alpha8 = 1;
	public const TextureFormat ARGB4444 = 2;
	public const TextureFormat RGB24 = 3;
	public const TextureFormat RGBA32 = 4;
	public const TextureFormat ARGB32 = 5;
	public const TextureFormat RGB565 = 7;
	public const TextureFormat R16 = 9;
	public const TextureFormat DXT1 = 10;
	public const TextureFormat DXT5 = 12;
	public const TextureFormat RGBA4444 = 13;
	public const TextureFormat BGRA32 = 14;
	public const TextureFormat RHalf = 15;
	public const TextureFormat RGHalf = 16;
	public const TextureFormat RGBAHalf = 17;
	public const TextureFormat RFloat = 18;
	public const TextureFormat RGFloat = 19;
	public const TextureFormat RGBAFloat = 20;
	public const TextureFormat YUY2 = 21;
	public const TextureFormat RGB9e5Float = 22;
	public const TextureFormat BC4 = 26;
	public const TextureFormat BC5 = 27;
	public const TextureFormat BC6H = 24;
	public const TextureFormat BC7 = 25;
	public const TextureFormat DXT1Crunched = 28;
	public const TextureFormat DXT5Crunched = 29;
	public const TextureFormat PVRTC_RGB2 = 30;
	public const TextureFormat PVRTC_RGBA2 = 31;
	public const TextureFormat PVRTC_RGB4 = 32;
	public const TextureFormat PVRTC_RGBA4 = 33;
	public const TextureFormat ETC_RGB4 = 34;
	public const TextureFormat EAC_R = 41;
	public const TextureFormat EAC_R_SIGNED = 42;
	public const TextureFormat EAC_RG = 43;
	public const TextureFormat EAC_RG_SIGNED = 44;
	public const TextureFormat ETC2_RGB = 45;
	public const TextureFormat ETC2_RGBA1 = 46;
	public const TextureFormat ETC2_RGBA8 = 47;
	public const TextureFormat ASTC_RGB_4x4 = 48;
	public const TextureFormat ASTC_RGB_5x5 = 49;
	public const TextureFormat ASTC_RGB_6x6 = 50;
	public const TextureFormat ASTC_RGB_8x8 = 51;
	public const TextureFormat ASTC_RGB_10x10 = 52;
	public const TextureFormat ASTC_RGB_12x12 = 53;
	public const TextureFormat ASTC_RGBA_4x4 = 54;
	public const TextureFormat ASTC_RGBA_5x5 = 55;
	public const TextureFormat ASTC_RGBA_6x6 = 56;
	public const TextureFormat ASTC_RGBA_8x8 = 57;
	public const TextureFormat ASTC_RGBA_10x10 = 58;
	public const TextureFormat ASTC_RGBA_12x12 = 59;
	[ObsoleteAttribute] // RVA: 0x9BA Offset: 0x9BA VA: 0x9BA
	public const TextureFormat ETC_RGB4_3DS = 60;
	[ObsoleteAttribute] // RVA: 0x9BB Offset: 0x9BB VA: 0x9BB
	public const TextureFormat ETC_RGBA8_3DS = 61;
	public const TextureFormat RG16 = 62;
	public const TextureFormat R8 = 63;
	public const TextureFormat ETC_RGB4Crunched = 64;
	public const TextureFormat ETC2_RGBA8Crunched = 65;
}

// Namespace: UnityEngine
public enum RenderTextureFormat // TypeDefIndex: 1688
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureFormat ARGB32 = 0;
	public const RenderTextureFormat Depth = 1;
	public const RenderTextureFormat ARGBHalf = 2;
	public const RenderTextureFormat Shadowmap = 3;
	public const RenderTextureFormat RGB565 = 4;
	public const RenderTextureFormat ARGB4444 = 5;
	public const RenderTextureFormat ARGB1555 = 6;
	public const RenderTextureFormat Default = 7;
	public const RenderTextureFormat ARGB2101010 = 8;
	public const RenderTextureFormat DefaultHDR = 9;
	public const RenderTextureFormat ARGB64 = 10;
	public const RenderTextureFormat ARGBFloat = 11;
	public const RenderTextureFormat RGFloat = 12;
	public const RenderTextureFormat RGHalf = 13;
	public const RenderTextureFormat RFloat = 14;
	public const RenderTextureFormat RHalf = 15;
	public const RenderTextureFormat R8 = 16;
	public const RenderTextureFormat ARGBInt = 17;
	public const RenderTextureFormat RGInt = 18;
	public const RenderTextureFormat RInt = 19;
	public const RenderTextureFormat BGRA32 = 20;
	public const RenderTextureFormat RGB111110Float = 22;
	public const RenderTextureFormat RG32 = 23;
	public const RenderTextureFormat RGBAUShort = 24;
	public const RenderTextureFormat RG16 = 25;
	public const RenderTextureFormat BGRA10101010_XR = 26;
	public const RenderTextureFormat BGR101010_XR = 27;
	public const RenderTextureFormat R16 = 28;
}

// Namespace: UnityEngine
public enum VRTextureUsage // TypeDefIndex: 1689
{
	// Fields
	public int value__; // 0x0
	public const VRTextureUsage None = 0;
	public const VRTextureUsage OneEye = 1;
	public const VRTextureUsage TwoEyes = 2;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6
public enum RenderTextureCreationFlags // TypeDefIndex: 1690
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureCreationFlags MipMap = 1;
	public const RenderTextureCreationFlags AutoGenerateMips = 2;
	public const RenderTextureCreationFlags SRGB = 4;
	public const RenderTextureCreationFlags EyeTexture = 8;
	public const RenderTextureCreationFlags EnableRandomWrite = 16;
	public const RenderTextureCreationFlags CreatedFromScript = 32;
	public const RenderTextureCreationFlags AllowVerticalFlip = 128;
	public const RenderTextureCreationFlags NoResolvedColorSurface = 256;
	public const RenderTextureCreationFlags DynamicallyScalable = 1024;
	public const RenderTextureCreationFlags BindMS = 2048;
}

// Namespace: UnityEngine
public enum RenderTextureReadWrite // TypeDefIndex: 1691
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureReadWrite Default = 0;
	public const RenderTextureReadWrite Linear = 1;
	public const RenderTextureReadWrite sRGB = 2;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7
public enum RenderTextureMemoryless // TypeDefIndex: 1692
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureMemoryless None = 0;
	public const RenderTextureMemoryless Color = 1;
	public const RenderTextureMemoryless Depth = 2;
	public const RenderTextureMemoryless MSAA = 4;
}

// Namespace: UnityEngine.Experimental.Rendering
[FlagsAttribute] // RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8
public enum TextureCreationFlags // TypeDefIndex: 1693
{
	// Fields
	public int value__; // 0x0
	public const TextureCreationFlags None = 0;
	public const TextureCreationFlags MipChain = 1;
	public const TextureCreationFlags Crunch = 64;
}

// Namespace: UnityEngine.Experimental.Rendering
public enum FormatUsage // TypeDefIndex: 1694
{
	// Fields
	public int value__; // 0x0
	public const FormatUsage Sample = 0;
	public const FormatUsage Linear = 1;
	public const FormatUsage Render = 3;
	public const FormatUsage Blend = 4;
	public const FormatUsage LoadStore = 8;
	public const FormatUsage MSAA2x = 9;
	public const FormatUsage MSAA4x = 10;
	public const FormatUsage MSAA8x = 11;
}

// Namespace: UnityEngine.Experimental.Rendering
public enum GraphicsFormat // TypeDefIndex: 1695
{
	// Fields
	public int value__; // 0x0
	public const GraphicsFormat None = 0;
	public const GraphicsFormat R8_SRGB = 1;
	public const GraphicsFormat R8G8_SRGB = 2;
	public const GraphicsFormat R8G8B8_SRGB = 3;
	public const GraphicsFormat R8G8B8A8_SRGB = 4;
	public const GraphicsFormat R8_UNorm = 5;
	public const GraphicsFormat R8G8_UNorm = 6;
	public const GraphicsFormat R8G8B8_UNorm = 7;
	public const GraphicsFormat R8G8B8A8_UNorm = 8;
	public const GraphicsFormat R8_SNorm = 9;
	public const GraphicsFormat R8G8_SNorm = 10;
	public const GraphicsFormat R8G8B8_SNorm = 11;
	public const GraphicsFormat R8G8B8A8_SNorm = 12;
	public const GraphicsFormat R8_UInt = 13;
	public const GraphicsFormat R8G8_UInt = 14;
	public const GraphicsFormat R8G8B8_UInt = 15;
	public const GraphicsFormat R8G8B8A8_UInt = 16;
	public const GraphicsFormat R8_SInt = 17;
	public const GraphicsFormat R8G8_SInt = 18;
	public const GraphicsFormat R8G8B8_SInt = 19;
	public const GraphicsFormat R8G8B8A8_SInt = 20;
	public const GraphicsFormat R16_UNorm = 21;
	public const GraphicsFormat R16G16_UNorm = 22;
	public const GraphicsFormat R16G16B16_UNorm = 23;
	public const GraphicsFormat R16G16B16A16_UNorm = 24;
	public const GraphicsFormat R16_SNorm = 25;
	public const GraphicsFormat R16G16_SNorm = 26;
	public const GraphicsFormat R16G16B16_SNorm = 27;
	public const GraphicsFormat R16G16B16A16_SNorm = 28;
	public const GraphicsFormat R16_UInt = 29;
	public const GraphicsFormat R16G16_UInt = 30;
	public const GraphicsFormat R16G16B16_UInt = 31;
	public const GraphicsFormat R16G16B16A16_UInt = 32;
	public const GraphicsFormat R16_SInt = 33;
	public const GraphicsFormat R16G16_SInt = 34;
	public const GraphicsFormat R16G16B16_SInt = 35;
	public const GraphicsFormat R16G16B16A16_SInt = 36;
	public const GraphicsFormat R32_UInt = 37;
	public const GraphicsFormat R32G32_UInt = 38;
	public const GraphicsFormat R32G32B32_UInt = 39;
	public const GraphicsFormat R32G32B32A32_UInt = 40;
	public const GraphicsFormat R32_SInt = 41;
	public const GraphicsFormat R32G32_SInt = 42;
	public const GraphicsFormat R32G32B32_SInt = 43;
	public const GraphicsFormat R32G32B32A32_SInt = 44;
	public const GraphicsFormat R16_SFloat = 45;
	public const GraphicsFormat R16G16_SFloat = 46;
	public const GraphicsFormat R16G16B16_SFloat = 47;
	public const GraphicsFormat R16G16B16A16_SFloat = 48;
	public const GraphicsFormat R32_SFloat = 49;
	public const GraphicsFormat R32G32_SFloat = 50;
	public const GraphicsFormat R32G32B32_SFloat = 51;
	public const GraphicsFormat R32G32B32A32_SFloat = 52;
	public const GraphicsFormat B8G8R8_SRGB = 56;
	public const GraphicsFormat B8G8R8A8_SRGB = 57;
	public const GraphicsFormat B8G8R8_UNorm = 58;
	public const GraphicsFormat B8G8R8A8_UNorm = 59;
	public const GraphicsFormat B8G8R8_SNorm = 60;
	public const GraphicsFormat B8G8R8A8_SNorm = 61;
	public const GraphicsFormat B8G8R8_UInt = 62;
	public const GraphicsFormat B8G8R8A8_UInt = 63;
	public const GraphicsFormat B8G8R8_SInt = 64;
	public const GraphicsFormat B8G8R8A8_SInt = 65;
	public const GraphicsFormat R4G4B4A4_UNormPack16 = 66;
	public const GraphicsFormat B4G4R4A4_UNormPack16 = 67;
	public const GraphicsFormat R5G6B5_UNormPack16 = 68;
	public const GraphicsFormat B5G6R5_UNormPack16 = 69;
	public const GraphicsFormat R5G5B5A1_UNormPack16 = 70;
	public const GraphicsFormat B5G5R5A1_UNormPack16 = 71;
	public const GraphicsFormat A1R5G5B5_UNormPack16 = 72;
	public const GraphicsFormat E5B9G9R9_UFloatPack32 = 73;
	public const GraphicsFormat B10G11R11_UFloatPack32 = 74;
	public const GraphicsFormat A2B10G10R10_UNormPack32 = 75;
	public const GraphicsFormat A2B10G10R10_UIntPack32 = 76;
	public const GraphicsFormat A2B10G10R10_SIntPack32 = 77;
	public const GraphicsFormat A2R10G10B10_UNormPack32 = 78;
	public const GraphicsFormat A2R10G10B10_UIntPack32 = 79;
	public const GraphicsFormat A2R10G10B10_SIntPack32 = 80;
	public const GraphicsFormat A2R10G10B10_XRSRGBPack32 = 81;
	public const GraphicsFormat A2R10G10B10_XRUNormPack32 = 82;
	public const GraphicsFormat R10G10B10_XRSRGBPack32 = 83;
	public const GraphicsFormat R10G10B10_XRUNormPack32 = 84;
	public const GraphicsFormat A10R10G10B10_XRSRGBPack32 = 85;
	public const GraphicsFormat A10R10G10B10_XRUNormPack32 = 86;
	public const GraphicsFormat D16_UNorm = 90;
	public const GraphicsFormat D24_UNorm = 91;
	public const GraphicsFormat D24_UNorm_S8_UInt = 92;
	public const GraphicsFormat D32_SFloat = 93;
	public const GraphicsFormat D32_SFloat_S8_Uint = 94;
	public const GraphicsFormat S8_Uint = 95;
	[EditorBrowsableAttribute] // RVA: 0x9BC Offset: 0x9BC VA: 0x9BC
	[ObsoleteAttribute] // RVA: 0x9BC Offset: 0x9BC VA: 0x9BC
	public const GraphicsFormat RGB_DXT1_SRGB = 96;
	public const GraphicsFormat RGBA_DXT1_SRGB = 96;
	[ObsoleteAttribute] // RVA: 0x9BD Offset: 0x9BD VA: 0x9BD
	[EditorBrowsableAttribute] // RVA: 0x9BD Offset: 0x9BD VA: 0x9BD
	public const GraphicsFormat RGB_DXT1_UNorm = 97;
	public const GraphicsFormat RGBA_DXT1_UNorm = 97;
	public const GraphicsFormat RGBA_DXT3_SRGB = 98;
	public const GraphicsFormat RGBA_DXT3_UNorm = 99;
	public const GraphicsFormat RGBA_DXT5_SRGB = 100;
	public const GraphicsFormat RGBA_DXT5_UNorm = 101;
	public const GraphicsFormat R_BC4_UNorm = 102;
	public const GraphicsFormat R_BC4_SNorm = 103;
	public const GraphicsFormat RG_BC5_UNorm = 104;
	public const GraphicsFormat RG_BC5_SNorm = 105;
	public const GraphicsFormat RGB_BC6H_UFloat = 106;
	public const GraphicsFormat RGB_BC6H_SFloat = 107;
	public const GraphicsFormat RGBA_BC7_SRGB = 108;
	public const GraphicsFormat RGBA_BC7_UNorm = 109;
	public const GraphicsFormat RGB_PVRTC_2Bpp_SRGB = 110;
	public const GraphicsFormat RGB_PVRTC_2Bpp_UNorm = 111;
	public const GraphicsFormat RGB_PVRTC_4Bpp_SRGB = 112;
	public const GraphicsFormat RGB_PVRTC_4Bpp_UNorm = 113;
	public const GraphicsFormat RGBA_PVRTC_2Bpp_SRGB = 114;
	public const GraphicsFormat RGBA_PVRTC_2Bpp_UNorm = 115;
	public const GraphicsFormat RGBA_PVRTC_4Bpp_SRGB = 116;
	public const GraphicsFormat RGBA_PVRTC_4Bpp_UNorm = 117;
	public const GraphicsFormat RGB_ETC_UNorm = 118;
	public const GraphicsFormat RGB_ETC2_SRGB = 119;
	public const GraphicsFormat RGB_ETC2_UNorm = 120;
	public const GraphicsFormat RGB_A1_ETC2_SRGB = 121;
	public const GraphicsFormat RGB_A1_ETC2_UNorm = 122;
	public const GraphicsFormat RGBA_ETC2_SRGB = 123;
	public const GraphicsFormat RGBA_ETC2_UNorm = 124;
	public const GraphicsFormat R_EAC_UNorm = 125;
	public const GraphicsFormat R_EAC_SNorm = 126;
	public const GraphicsFormat RG_EAC_UNorm = 127;
	public const GraphicsFormat RG_EAC_SNorm = 128;
	public const GraphicsFormat RGBA_ASTC4X4_SRGB = 129;
	public const GraphicsFormat RGBA_ASTC4X4_UNorm = 130;
	public const GraphicsFormat RGBA_ASTC5X5_SRGB = 131;
	public const GraphicsFormat RGBA_ASTC5X5_UNorm = 132;
	public const GraphicsFormat RGBA_ASTC6X6_SRGB = 133;
	public const GraphicsFormat RGBA_ASTC6X6_UNorm = 134;
	public const GraphicsFormat RGBA_ASTC8X8_SRGB = 135;
	public const GraphicsFormat RGBA_ASTC8X8_UNorm = 136;
	public const GraphicsFormat RGBA_ASTC10X10_SRGB = 137;
	public const GraphicsFormat RGBA_ASTC10X10_UNorm = 138;
	public const GraphicsFormat RGBA_ASTC12X12_SRGB = 139;
	public const GraphicsFormat RGBA_ASTC12X12_UNorm = 140;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9
public enum LightmapsMode // TypeDefIndex: 1696
{
	// Fields
	public int value__; // 0x0
	public const LightmapsMode NonDirectional = 0;
	public const LightmapsMode CombinedDirectional = 1;
}

// Namespace: UnityEngine.Rendering
[MovedFromAttribute] // RVA: 0x8AA Offset: 0x8AA VA: 0x8AA
public enum VertexAttribute // TypeDefIndex: 1697
{
	// Fields
	public int value__; // 0x0
	public const VertexAttribute Position = 0;
	public const VertexAttribute Normal = 1;
	public const VertexAttribute Tangent = 2;
	public const VertexAttribute Color = 3;
	public const VertexAttribute TexCoord0 = 4;
	public const VertexAttribute TexCoord1 = 5;
	public const VertexAttribute TexCoord2 = 6;
	public const VertexAttribute TexCoord3 = 7;
	public const VertexAttribute TexCoord4 = 8;
	public const VertexAttribute TexCoord5 = 9;
	public const VertexAttribute TexCoord6 = 10;
	public const VertexAttribute TexCoord7 = 11;
	public const VertexAttribute BlendWeight = 12;
	public const VertexAttribute BlendIndices = 13;
}

// Namespace: UnityEngine.Rendering
public enum CompareFunction // TypeDefIndex: 1698
{
	// Fields
	public int value__; // 0x0
	public const CompareFunction Disabled = 0;
	public const CompareFunction Never = 1;
	public const CompareFunction Less = 2;
	public const CompareFunction Equal = 3;
	public const CompareFunction LessEqual = 4;
	public const CompareFunction Greater = 5;
	public const CompareFunction NotEqual = 6;
	public const CompareFunction GreaterEqual = 7;
	public const CompareFunction Always = 8;
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0x8AB Offset: 0x8AB VA: 0x8AB
public enum ColorWriteMask // TypeDefIndex: 1699
{
	// Fields
	public int value__; // 0x0
	public const ColorWriteMask Alpha = 1;
	public const ColorWriteMask Blue = 2;
	public const ColorWriteMask Green = 4;
	public const ColorWriteMask Red = 8;
	public const ColorWriteMask All = 15;
}

// Namespace: UnityEngine.Rendering
public enum StencilOp // TypeDefIndex: 1700
{
	// Fields
	public int value__; // 0x0
	public const StencilOp Keep = 0;
	public const StencilOp Zero = 1;
	public const StencilOp Replace = 2;
	public const StencilOp IncrementSaturate = 3;
	public const StencilOp DecrementSaturate = 4;
	public const StencilOp Invert = 5;
	public const StencilOp IncrementWrap = 6;
	public const StencilOp DecrementWrap = 7;
}

// Namespace: UnityEngine.Rendering
public enum ShadowSamplingMode // TypeDefIndex: 1701
{
	// Fields
	public int value__; // 0x0
	public const ShadowSamplingMode CompareDepths = 0;
	public const ShadowSamplingMode RawDepth = 1;
	public const ShadowSamplingMode None = 2;
}

// Namespace: UnityEngine.Rendering
public enum TextureDimension // TypeDefIndex: 1702
{
	// Fields
	public int value__; // 0x0
	public const TextureDimension Unknown = -1;
	public const TextureDimension None = 0;
	public const TextureDimension Any = 1;
	public const TextureDimension Tex2D = 2;
	public const TextureDimension Tex3D = 3;
	public const TextureDimension Cube = 4;
	public const TextureDimension Tex2DArray = 5;
	public const TextureDimension CubeArray = 6;
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0x8AC Offset: 0x8AC VA: 0x8AC
[NativeHeaderAttribute] // RVA: 0x8AC Offset: 0x8AC VA: 0x8AC
public class GraphicsFormatUtility // TypeDefIndex: 1703
{
	// Methods

	// RVA: 0x563 Offset: 0x563 VA: 0x563
	public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB) { }

	[FreeFunctionAttribute] // RVA: 0xA75 Offset: 0xA75 VA: 0xA75
	// RVA: 0x564 Offset: 0x564 VA: 0x564
	private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB) { }

	[FreeFunctionAttribute] // RVA: 0xA76 Offset: 0xA76 VA: 0xA76
	// RVA: 0xA83 Offset: 0xA83 VA: 0xA83
	public static bool IsSRGBFormat(GraphicsFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xA77 Offset: 0xA77 VA: 0xA77
	// RVA: 0xA84 Offset: 0xA84 VA: 0xA84
	public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xA78 Offset: 0xA78 VA: 0xA78
	// RVA: 0xA85 Offset: 0xA85 VA: 0xA85
	internal static bool IsCompressedTextureFormat(TextureFormat format) { }

	// RVA: 0xA86 Offset: 0xA86 VA: 0xA86
	public static bool IsCrunchFormat(TextureFormat format) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8AD Offset: 0x8AD VA: 0x8AD
public class MeshRenderer : Renderer // TypeDefIndex: 1704
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA79 Offset: 0xA79 VA: 0xA79
	// RVA: 0x6A0 Offset: 0x6A0 VA: 0x6A0
	private void DontStripMeshRenderer() { }
}

// Namespace: UnityEngine
public class TouchScreenKeyboard // TypeDefIndex: 1705
{
	// Properties
	public string text { get; set; }
	public static bool hideInput { set; }
	public bool active { get; set; }
	public TouchScreenKeyboard.Status status { get; }
	public static bool isSupported { get; }
	public bool canGetSelection { get; }
	public bool canSetSelection { get; }
	public RangeInt selection { get; set; }
	public int characterLimit { set; }

	// Methods

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }

	// RVA: 0xB0C Offset: 0xB0C VA: 0xB0C
	public string get_text() { }

	// RVA: 0x595 Offset: 0x595 VA: 0x595
	public void set_text(string value) { }

	// RVA: 0x6DE Offset: 0x6DE VA: 0x6DE
	public static void set_hideInput(bool value) { }

	// RVA: 0xB0D Offset: 0xB0D VA: 0xB0D
	public bool get_active() { }

	// RVA: 0x596 Offset: 0x596 VA: 0x596
	public void set_active(bool value) { }

	// RVA: 0xB0E Offset: 0xB0E VA: 0xB0E
	public TouchScreenKeyboard.Status get_status() { }

	// RVA: 0x275 Offset: 0x275 VA: 0x275
	public static bool get_isSupported() { }

	// RVA: 0xB0F Offset: 0xB0F VA: 0xB0F
	public bool get_canGetSelection() { }

	// RVA: 0xB10 Offset: 0xB10 VA: 0xB10
	public bool get_canSetSelection() { }

	// RVA: 0x597 Offset: 0x597 VA: 0x597
	public RangeInt get_selection() { }

	// RVA: 0x598 Offset: 0x598 VA: 0x598
	public void set_selection(RangeInt value) { }

	// RVA: 0x599 Offset: 0x599 VA: 0x599
	public void set_characterLimit(int value) { }
}

// Namespace: 
public enum TouchScreenKeyboard.Status // TypeDefIndex: 1706
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboard.Status Visible = 0;
	public const TouchScreenKeyboard.Status Done = 1;
	public const TouchScreenKeyboard.Status Canceled = 2;
	public const TouchScreenKeyboard.Status LostFocus = 3;
}

// Namespace: UnityEngine
public enum TouchPhase // TypeDefIndex: 1707
{
	// Fields
	public int value__; // 0x0
	public const TouchPhase Began = 0;
	public const TouchPhase Moved = 1;
	public const TouchPhase Stationary = 2;
	public const TouchPhase Ended = 3;
	public const TouchPhase Canceled = 4;
}

// Namespace: UnityEngine
public enum IMECompositionMode // TypeDefIndex: 1708
{
	// Fields
	public int value__; // 0x0
	public const IMECompositionMode Auto = 0;
	public const IMECompositionMode On = 1;
	public const IMECompositionMode Off = 2;
}

// Namespace: UnityEngine
public enum TouchType // TypeDefIndex: 1709
{
	// Fields
	public int value__; // 0x0
	public const TouchType Direct = 0;
	public const TouchType Indirect = 1;
	public const TouchType Stylus = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8AE Offset: 0x8AE VA: 0x8AE
public struct Touch // TypeDefIndex: 1710
{
	// Fields
	private int m_FingerId; // 0x0
	private Vector2 m_Position; // 0x4
	private Vector2 m_RawPosition; // 0xC
	private Vector2 m_PositionDelta; // 0x14
	private float m_TimeDelta; // 0x1C
	private int m_TapCount; // 0x20
	private TouchPhase m_Phase; // 0x24
	private TouchType m_Type; // 0x28
	private float m_Pressure; // 0x2C
	private float m_maximumPossiblePressure; // 0x30
	private float m_Radius; // 0x34
	private float m_RadiusVariance; // 0x38
	private float m_AltitudeAngle; // 0x3C
	private float m_AzimuthAngle; // 0x40

	// Properties
	public int fingerId { get; }
	public Vector2 position { get; }
	public TouchPhase phase { get; }
	public TouchType type { get; }

	// Methods

	// RVA: 0xB09 Offset: 0xB09 VA: 0xB09
	public int get_fingerId() { }

	// RVA: 0x594 Offset: 0x594 VA: 0x594
	public Vector2 get_position() { }

	// RVA: 0xB0A Offset: 0xB0A VA: 0xB0A
	public TouchPhase get_phase() { }

	// RVA: 0xB0B Offset: 0xB0B VA: 0xB0B
	public TouchType get_type() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8AF Offset: 0x8AF VA: 0x8AF
public class Input // TypeDefIndex: 1711
{
	// Properties
	public static Vector3 mousePosition { get; }
	public static Vector2 mouseScrollDelta { get; }
	public static IMECompositionMode imeCompositionMode { get; set; }
	public static string compositionString { get; }
	public static Vector2 compositionCursorPos { get; set; }
	public static bool mousePresent { get; }
	public static int touchCount { get; }
	public static bool touchSupported { get; }

	// Methods

	[NativeThrowsAttribute] // RVA: 0xA7A Offset: 0xA7A VA: 0xA7A
	// RVA: 0x17 Offset: 0x17 VA: 0x17
	public static float GetAxisRaw(string axisName) { }

	[NativeThrowsAttribute] // RVA: 0xA7B Offset: 0xA7B VA: 0xA7B
	// RVA: 0xA96 Offset: 0xA96 VA: 0xA96
	public static bool GetButtonDown(string buttonName) { }

	[NativeThrowsAttribute] // RVA: 0xA7C Offset: 0xA7C VA: 0xA7C
	// RVA: 0xA97 Offset: 0xA97 VA: 0xA97
	public static bool GetMouseButton(int button) { }

	[NativeThrowsAttribute] // RVA: 0xA7D Offset: 0xA7D VA: 0xA7D
	// RVA: 0xA98 Offset: 0xA98 VA: 0xA98
	public static bool GetMouseButtonDown(int button) { }

	[NativeThrowsAttribute] // RVA: 0xA7E Offset: 0xA7E VA: 0xA7E
	// RVA: 0xA99 Offset: 0xA99 VA: 0xA99
	public static bool GetMouseButtonUp(int button) { }

	[NativeThrowsAttribute] // RVA: 0xA7F Offset: 0xA7F VA: 0xA7F
	// RVA: 0x503 Offset: 0x503 VA: 0x503
	public static Touch GetTouch(int index) { }

	// RVA: 0x68C Offset: 0x68C VA: 0x68C
	public static Vector3 get_mousePosition() { }

	// RVA: 0x68D Offset: 0x68D VA: 0x68D
	public static Vector2 get_mouseScrollDelta() { }

	// RVA: 0x263 Offset: 0x263 VA: 0x263
	public static IMECompositionMode get_imeCompositionMode() { }

	// RVA: 0x68E Offset: 0x68E VA: 0x68E
	public static void set_imeCompositionMode(IMECompositionMode value) { }

	// RVA: 0x264 Offset: 0x264 VA: 0x264
	public static string get_compositionString() { }

	// RVA: 0x68F Offset: 0x68F VA: 0x68F
	public static Vector2 get_compositionCursorPos() { }

	// RVA: 0x690 Offset: 0x690 VA: 0x690
	public static void set_compositionCursorPos(Vector2 value) { }

	[FreeFunctionAttribute] // RVA: 0xA80 Offset: 0xA80 VA: 0xA80
	// RVA: 0x265 Offset: 0x265 VA: 0x265
	public static bool get_mousePresent() { }

	[FreeFunctionAttribute] // RVA: 0xA81 Offset: 0xA81 VA: 0xA81
	// RVA: 0x266 Offset: 0x266 VA: 0x266
	public static int get_touchCount() { }

	[FreeFunctionAttribute] // RVA: 0xA82 Offset: 0xA82 VA: 0xA82
	// RVA: 0x267 Offset: 0x267 VA: 0x267
	public static bool get_touchSupported() { }

	// RVA: 0x504 Offset: 0x504 VA: 0x504
	private static void GetTouch_Injected(int index, out Touch ret) { }

	// RVA: 0x691 Offset: 0x691 VA: 0x691
	private static void get_mousePosition_Injected(out Vector3 ret) { }

	// RVA: 0x692 Offset: 0x692 VA: 0x692
	private static void get_mouseScrollDelta_Injected(out Vector2 ret) { }

	// RVA: 0x693 Offset: 0x693 VA: 0x693
	private static void get_compositionCursorPos_Injected(out Vector2 ret) { }

	// RVA: 0x694 Offset: 0x694 VA: 0x694
	private static void set_compositionCursorPos_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
public enum KeyCode // TypeDefIndex: 1712
{
	// Fields
	public int value__; // 0x0
	public const KeyCode None = 0;
	public const KeyCode Backspace = 8;
	public const KeyCode Delete = 127;
	public const KeyCode Tab = 9;
	public const KeyCode Clear = 12;
	public const KeyCode Return = 13;
	public const KeyCode Pause = 19;
	public const KeyCode Escape = 27;
	public const KeyCode Space = 32;
	public const KeyCode Keypad0 = 256;
	public const KeyCode Keypad1 = 257;
	public const KeyCode Keypad2 = 258;
	public const KeyCode Keypad3 = 259;
	public const KeyCode Keypad4 = 260;
	public const KeyCode Keypad5 = 261;
	public const KeyCode Keypad6 = 262;
	public const KeyCode Keypad7 = 263;
	public const KeyCode Keypad8 = 264;
	public const KeyCode Keypad9 = 265;
	public const KeyCode KeypadPeriod = 266;
	public const KeyCode KeypadDivide = 267;
	public const KeyCode KeypadMultiply = 268;
	public const KeyCode KeypadMinus = 269;
	public const KeyCode KeypadPlus = 270;
	public const KeyCode KeypadEnter = 271;
	public const KeyCode KeypadEquals = 272;
	public const KeyCode UpArrow = 273;
	public const KeyCode DownArrow = 274;
	public const KeyCode RightArrow = 275;
	public const KeyCode LeftArrow = 276;
	public const KeyCode Insert = 277;
	public const KeyCode Home = 278;
	public const KeyCode End = 279;
	public const KeyCode PageUp = 280;
	public const KeyCode PageDown = 281;
	public const KeyCode F1 = 282;
	public const KeyCode F2 = 283;
	public const KeyCode F3 = 284;
	public const KeyCode F4 = 285;
	public const KeyCode F5 = 286;
	public const KeyCode F6 = 287;
	public const KeyCode F7 = 288;
	public const KeyCode F8 = 289;
	public const KeyCode F9 = 290;
	public const KeyCode F10 = 291;
	public const KeyCode F11 = 292;
	public const KeyCode F12 = 293;
	public const KeyCode F13 = 294;
	public const KeyCode F14 = 295;
	public const KeyCode F15 = 296;
	public const KeyCode Alpha0 = 48;
	public const KeyCode Alpha1 = 49;
	public const KeyCode Alpha2 = 50;
	public const KeyCode Alpha3 = 51;
	public const KeyCode Alpha4 = 52;
	public const KeyCode Alpha5 = 53;
	public const KeyCode Alpha6 = 54;
	public const KeyCode Alpha7 = 55;
	public const KeyCode Alpha8 = 56;
	public const KeyCode Alpha9 = 57;
	public const KeyCode Exclaim = 33;
	public const KeyCode DoubleQuote = 34;
	public const KeyCode Hash = 35;
	public const KeyCode Dollar = 36;
	public const KeyCode Percent = 37;
	public const KeyCode Ampersand = 38;
	public const KeyCode Quote = 39;
	public const KeyCode LeftParen = 40;
	public const KeyCode RightParen = 41;
	public const KeyCode Asterisk = 42;
	public const KeyCode Plus = 43;
	public const KeyCode Comma = 44;
	public const KeyCode Minus = 45;
	public const KeyCode Period = 46;
	public const KeyCode Slash = 47;
	public const KeyCode Colon = 58;
	public const KeyCode Semicolon = 59;
	public const KeyCode Less = 60;
	public const KeyCode Equals = 61;
	public const KeyCode Greater = 62;
	public const KeyCode Question = 63;
	public const KeyCode At = 64;
	public const KeyCode LeftBracket = 91;
	public const KeyCode Backslash = 92;
	public const KeyCode RightBracket = 93;
	public const KeyCode Caret = 94;
	public const KeyCode Underscore = 95;
	public const KeyCode BackQuote = 96;
	public const KeyCode A = 97;
	public const KeyCode B = 98;
	public const KeyCode C = 99;
	public const KeyCode D = 100;
	public const KeyCode E = 101;
	public const KeyCode F = 102;
	public const KeyCode G = 103;
	public const KeyCode H = 104;
	public const KeyCode I = 105;
	public const KeyCode J = 106;
	public const KeyCode K = 107;
	public const KeyCode L = 108;
	public const KeyCode M = 109;
	public const KeyCode N = 110;
	public const KeyCode O = 111;
	public const KeyCode P = 112;
	public const KeyCode Q = 113;
	public const KeyCode R = 114;
	public const KeyCode S = 115;
	public const KeyCode T = 116;
	public const KeyCode U = 117;
	public const KeyCode V = 118;
	public const KeyCode W = 119;
	public const KeyCode X = 120;
	public const KeyCode Y = 121;
	public const KeyCode Z = 122;
	public const KeyCode LeftCurlyBracket = 123;
	public const KeyCode Pipe = 124;
	public const KeyCode RightCurlyBracket = 125;
	public const KeyCode Tilde = 126;
	public const KeyCode Numlock = 300;
	public const KeyCode CapsLock = 301;
	public const KeyCode ScrollLock = 302;
	public const KeyCode RightShift = 303;
	public const KeyCode LeftShift = 304;
	public const KeyCode RightControl = 305;
	public const KeyCode LeftControl = 306;
	public const KeyCode RightAlt = 307;
	public const KeyCode LeftAlt = 308;
	public const KeyCode LeftCommand = 310;
	public const KeyCode LeftApple = 310;
	public const KeyCode LeftWindows = 311;
	public const KeyCode RightCommand = 309;
	public const KeyCode RightApple = 309;
	public const KeyCode RightWindows = 312;
	public const KeyCode AltGr = 313;
	public const KeyCode Help = 315;
	public const KeyCode Print = 316;
	public const KeyCode SysReq = 317;
	public const KeyCode Break = 318;
	public const KeyCode Menu = 319;
	public const KeyCode Mouse0 = 323;
	public const KeyCode Mouse1 = 324;
	public const KeyCode Mouse2 = 325;
	public const KeyCode Mouse3 = 326;
	public const KeyCode Mouse4 = 327;
	public const KeyCode Mouse5 = 328;
	public const KeyCode Mouse6 = 329;
	public const KeyCode JoystickButton0 = 330;
	public const KeyCode JoystickButton1 = 331;
	public const KeyCode JoystickButton2 = 332;
	public const KeyCode JoystickButton3 = 333;
	public const KeyCode JoystickButton4 = 334;
	public const KeyCode JoystickButton5 = 335;
	public const KeyCode JoystickButton6 = 336;
	public const KeyCode JoystickButton7 = 337;
	public const KeyCode JoystickButton8 = 338;
	public const KeyCode JoystickButton9 = 339;
	public const KeyCode JoystickButton10 = 340;
	public const KeyCode JoystickButton11 = 341;
	public const KeyCode JoystickButton12 = 342;
	public const KeyCode JoystickButton13 = 343;
	public const KeyCode JoystickButton14 = 344;
	public const KeyCode JoystickButton15 = 345;
	public const KeyCode JoystickButton16 = 346;
	public const KeyCode JoystickButton17 = 347;
	public const KeyCode JoystickButton18 = 348;
	public const KeyCode JoystickButton19 = 349;
	public const KeyCode Joystick1Button0 = 350;
	public const KeyCode Joystick1Button1 = 351;
	public const KeyCode Joystick1Button2 = 352;
	public const KeyCode Joystick1Button3 = 353;
	public const KeyCode Joystick1Button4 = 354;
	public const KeyCode Joystick1Button5 = 355;
	public const KeyCode Joystick1Button6 = 356;
	public const KeyCode Joystick1Button7 = 357;
	public const KeyCode Joystick1Button8 = 358;
	public const KeyCode Joystick1Button9 = 359;
	public const KeyCode Joystick1Button10 = 360;
	public const KeyCode Joystick1Button11 = 361;
	public const KeyCode Joystick1Button12 = 362;
	public const KeyCode Joystick1Button13 = 363;
	public const KeyCode Joystick1Button14 = 364;
	public const KeyCode Joystick1Button15 = 365;
	public const KeyCode Joystick1Button16 = 366;
	public const KeyCode Joystick1Button17 = 367;
	public const KeyCode Joystick1Button18 = 368;
	public const KeyCode Joystick1Button19 = 369;
	public const KeyCode Joystick2Button0 = 370;
	public const KeyCode Joystick2Button1 = 371;
	public const KeyCode Joystick2Button2 = 372;
	public const KeyCode Joystick2Button3 = 373;
	public const KeyCode Joystick2Button4 = 374;
	public const KeyCode Joystick2Button5 = 375;
	public const KeyCode Joystick2Button6 = 376;
	public const KeyCode Joystick2Button7 = 377;
	public const KeyCode Joystick2Button8 = 378;
	public const KeyCode Joystick2Button9 = 379;
	public const KeyCode Joystick2Button10 = 380;
	public const KeyCode Joystick2Button11 = 381;
	public const KeyCode Joystick2Button12 = 382;
	public const KeyCode Joystick2Button13 = 383;
	public const KeyCode Joystick2Button14 = 384;
	public const KeyCode Joystick2Button15 = 385;
	public const KeyCode Joystick2Button16 = 386;
	public const KeyCode Joystick2Button17 = 387;
	public const KeyCode Joystick2Button18 = 388;
	public const KeyCode Joystick2Button19 = 389;
	public const KeyCode Joystick3Button0 = 390;
	public const KeyCode Joystick3Button1 = 391;
	public const KeyCode Joystick3Button2 = 392;
	public const KeyCode Joystick3Button3 = 393;
	public const KeyCode Joystick3Button4 = 394;
	public const KeyCode Joystick3Button5 = 395;
	public const KeyCode Joystick3Button6 = 396;
	public const KeyCode Joystick3Button7 = 397;
	public const KeyCode Joystick3Button8 = 398;
	public const KeyCode Joystick3Button9 = 399;
	public const KeyCode Joystick3Button10 = 400;
	public const KeyCode Joystick3Button11 = 401;
	public const KeyCode Joystick3Button12 = 402;
	public const KeyCode Joystick3Button13 = 403;
	public const KeyCode Joystick3Button14 = 404;
	public const KeyCode Joystick3Button15 = 405;
	public const KeyCode Joystick3Button16 = 406;
	public const KeyCode Joystick3Button17 = 407;
	public const KeyCode Joystick3Button18 = 408;
	public const KeyCode Joystick3Button19 = 409;
	public const KeyCode Joystick4Button0 = 410;
	public const KeyCode Joystick4Button1 = 411;
	public const KeyCode Joystick4Button2 = 412;
	public const KeyCode Joystick4Button3 = 413;
	public const KeyCode Joystick4Button4 = 414;
	public const KeyCode Joystick4Button5 = 415;
	public const KeyCode Joystick4Button6 = 416;
	public const KeyCode Joystick4Button7 = 417;
	public const KeyCode Joystick4Button8 = 418;
	public const KeyCode Joystick4Button9 = 419;
	public const KeyCode Joystick4Button10 = 420;
	public const KeyCode Joystick4Button11 = 421;
	public const KeyCode Joystick4Button12 = 422;
	public const KeyCode Joystick4Button13 = 423;
	public const KeyCode Joystick4Button14 = 424;
	public const KeyCode Joystick4Button15 = 425;
	public const KeyCode Joystick4Button16 = 426;
	public const KeyCode Joystick4Button17 = 427;
	public const KeyCode Joystick4Button18 = 428;
	public const KeyCode Joystick4Button19 = 429;
	public const KeyCode Joystick5Button0 = 430;
	public const KeyCode Joystick5Button1 = 431;
	public const KeyCode Joystick5Button2 = 432;
	public const KeyCode Joystick5Button3 = 433;
	public const KeyCode Joystick5Button4 = 434;
	public const KeyCode Joystick5Button5 = 435;
	public const KeyCode Joystick5Button6 = 436;
	public const KeyCode Joystick5Button7 = 437;
	public const KeyCode Joystick5Button8 = 438;
	public const KeyCode Joystick5Button9 = 439;
	public const KeyCode Joystick5Button10 = 440;
	public const KeyCode Joystick5Button11 = 441;
	public const KeyCode Joystick5Button12 = 442;
	public const KeyCode Joystick5Button13 = 443;
	public const KeyCode Joystick5Button14 = 444;
	public const KeyCode Joystick5Button15 = 445;
	public const KeyCode Joystick5Button16 = 446;
	public const KeyCode Joystick5Button17 = 447;
	public const KeyCode Joystick5Button18 = 448;
	public const KeyCode Joystick5Button19 = 449;
	public const KeyCode Joystick6Button0 = 450;
	public const KeyCode Joystick6Button1 = 451;
	public const KeyCode Joystick6Button2 = 452;
	public const KeyCode Joystick6Button3 = 453;
	public const KeyCode Joystick6Button4 = 454;
	public const KeyCode Joystick6Button5 = 455;
	public const KeyCode Joystick6Button6 = 456;
	public const KeyCode Joystick6Button7 = 457;
	public const KeyCode Joystick6Button8 = 458;
	public const KeyCode Joystick6Button9 = 459;
	public const KeyCode Joystick6Button10 = 460;
	public const KeyCode Joystick6Button11 = 461;
	public const KeyCode Joystick6Button12 = 462;
	public const KeyCode Joystick6Button13 = 463;
	public const KeyCode Joystick6Button14 = 464;
	public const KeyCode Joystick6Button15 = 465;
	public const KeyCode Joystick6Button16 = 466;
	public const KeyCode Joystick6Button17 = 467;
	public const KeyCode Joystick6Button18 = 468;
	public const KeyCode Joystick6Button19 = 469;
	public const KeyCode Joystick7Button0 = 470;
	public const KeyCode Joystick7Button1 = 471;
	public const KeyCode Joystick7Button2 = 472;
	public const KeyCode Joystick7Button3 = 473;
	public const KeyCode Joystick7Button4 = 474;
	public const KeyCode Joystick7Button5 = 475;
	public const KeyCode Joystick7Button6 = 476;
	public const KeyCode Joystick7Button7 = 477;
	public const KeyCode Joystick7Button8 = 478;
	public const KeyCode Joystick7Button9 = 479;
	public const KeyCode Joystick7Button10 = 480;
	public const KeyCode Joystick7Button11 = 481;
	public const KeyCode Joystick7Button12 = 482;
	public const KeyCode Joystick7Button13 = 483;
	public const KeyCode Joystick7Button14 = 484;
	public const KeyCode Joystick7Button15 = 485;
	public const KeyCode Joystick7Button16 = 486;
	public const KeyCode Joystick7Button17 = 487;
	public const KeyCode Joystick7Button18 = 488;
	public const KeyCode Joystick7Button19 = 489;
	public const KeyCode Joystick8Button0 = 490;
	public const KeyCode Joystick8Button1 = 491;
	public const KeyCode Joystick8Button2 = 492;
	public const KeyCode Joystick8Button3 = 493;
	public const KeyCode Joystick8Button4 = 494;
	public const KeyCode Joystick8Button5 = 495;
	public const KeyCode Joystick8Button6 = 496;
	public const KeyCode Joystick8Button7 = 497;
	public const KeyCode Joystick8Button8 = 498;
	public const KeyCode Joystick8Button9 = 499;
	public const KeyCode Joystick8Button10 = 500;
	public const KeyCode Joystick8Button11 = 501;
	public const KeyCode Joystick8Button12 = 502;
	public const KeyCode Joystick8Button13 = 503;
	public const KeyCode Joystick8Button14 = 504;
	public const KeyCode Joystick8Button15 = 505;
	public const KeyCode Joystick8Button16 = 506;
	public const KeyCode Joystick8Button17 = 507;
	public const KeyCode Joystick8Button18 = 508;
	public const KeyCode Joystick8Button19 = 509;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
[NativeClassAttribute] // RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
[RequiredByNativeCodeAttribute] // RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
[NativeHeaderAttribute] // RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
public struct LayerMask // TypeDefIndex: 1713
{
	// Fields
	[NativeNameAttribute] // RVA: 0x9BE Offset: 0x9BE VA: 0x9BE
	private int m_Mask; // 0x0

	// Methods

	// RVA: 0xA9C Offset: 0xA9C VA: 0xA9C
	public static int op_Implicit(LayerMask mask) { }

	// RVA: 0xA9D Offset: 0xA9D VA: 0xA9D
	public static LayerMask op_Implicit(int intVal) { }
}

// Namespace: UnityEngine
internal static class ManagedStreamHelpers // TypeDefIndex: 1714
{
	// Methods

	// RVA: 0x697 Offset: 0x697 VA: 0x697
	internal static void ValidateLoadFromStream(Stream stream) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA83 Offset: 0xA83 VA: 0xA83
	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA84 Offset: 0xA84 VA: 0xA84
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA85 Offset: 0xA85 VA: 0xA85
	// RVA: 0x50A Offset: 0x50A VA: 0x50A
	internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
[NativeTypeAttribute] // RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
[ThreadAndSerializationSafeAttribute] // RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
[DefaultMemberAttribute] // RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
[NativeClassAttribute] // RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
[RequiredByNativeCodeAttribute] // RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 1715
{
	// Fields
	[NativeNameAttribute] // RVA: 0x9BF Offset: 0x9BF VA: 0x9BF
	public float m00; // 0x0
	[NativeNameAttribute] // RVA: 0x9C0 Offset: 0x9C0 VA: 0x9C0
	public float m10; // 0x4
	[NativeNameAttribute] // RVA: 0x9C1 Offset: 0x9C1 VA: 0x9C1
	public float m20; // 0x8
	[NativeNameAttribute] // RVA: 0x9C2 Offset: 0x9C2 VA: 0x9C2
	public float m30; // 0xC
	[NativeNameAttribute] // RVA: 0x9C3 Offset: 0x9C3 VA: 0x9C3
	public float m01; // 0x10
	[NativeNameAttribute] // RVA: 0x9C4 Offset: 0x9C4 VA: 0x9C4
	public float m11; // 0x14
	[NativeNameAttribute] // RVA: 0x9C5 Offset: 0x9C5 VA: 0x9C5
	public float m21; // 0x18
	[NativeNameAttribute] // RVA: 0x9C6 Offset: 0x9C6 VA: 0x9C6
	public float m31; // 0x1C
	[NativeNameAttribute] // RVA: 0x9C7 Offset: 0x9C7 VA: 0x9C7
	public float m02; // 0x20
	[NativeNameAttribute] // RVA: 0x9C8 Offset: 0x9C8 VA: 0x9C8
	public float m12; // 0x24
	[NativeNameAttribute] // RVA: 0x9C9 Offset: 0x9C9 VA: 0x9C9
	public float m22; // 0x28
	[NativeNameAttribute] // RVA: 0x9CA Offset: 0x9CA VA: 0x9CA
	public float m32; // 0x2C
	[NativeNameAttribute] // RVA: 0x9CB Offset: 0x9CB VA: 0x9CB
	public float m03; // 0x30
	[NativeNameAttribute] // RVA: 0x9CC Offset: 0x9CC VA: 0x9CC
	public float m13; // 0x34
	[NativeNameAttribute] // RVA: 0x9CD Offset: 0x9CD VA: 0x9CD
	public float m23; // 0x38
	[NativeNameAttribute] // RVA: 0x9CE Offset: 0x9CE VA: 0x9CE
	public float m33; // 0x3C
	private static readonly Matrix4x4 zeroMatrix; // 0x0
	private static readonly Matrix4x4 identityMatrix; // 0x40

	// Methods

	// RVA: 0x7C Offset: 0x7C VA: 0x7C
	public void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3) { }

	// RVA: 0xAA3 Offset: 0xAA3 VA: 0xAA3 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x57A Offset: 0x57A VA: 0x57A Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x57B Offset: 0x57B VA: 0x57B Slot: 4
	public bool Equals(Matrix4x4 other) { }

	// RVA: 0x354 Offset: 0x354 VA: 0x354
	public Vector4 GetColumn(int index) { }

	// RVA: 0x355 Offset: 0x355 VA: 0x355
	public Vector3 MultiplyPoint(Vector3 point) { }

	// RVA: 0x356 Offset: 0x356 VA: 0x356
	public Vector3 MultiplyPoint3x4(Vector3 point) { }

	// RVA: 0xAA4 Offset: 0xAA4 VA: 0xAA4 Slot: 3
	public override string ToString() { }

	// RVA: 0xF3C Offset: 0xF3C VA: 0xF3C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[ThreadAndSerializationSafeAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
[DefaultMemberAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
[NativeHeaderAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
[NativeHeaderAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
[NativeClassAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
[NativeTypeAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
[RequiredByNativeCodeAttribute] // RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 1716
{
	// Fields
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	private static readonly Vector3 zeroVector; // 0x0
	private static readonly Vector3 oneVector; // 0xC
	private static readonly Vector3 upVector; // 0x18
	private static readonly Vector3 downVector; // 0x24
	private static readonly Vector3 leftVector; // 0x30
	private static readonly Vector3 rightVector; // 0x3C
	private static readonly Vector3 forwardVector; // 0x48
	private static readonly Vector3 backVector; // 0x54
	private static readonly Vector3 positiveInfinityVector; // 0x60
	private static readonly Vector3 negativeInfinityVector; // 0x6C

	// Properties
	public float Item { get; set; }
	public Vector3 normalized { get; }
	public float sqrMagnitude { get; }
	public static Vector3 zero { get; }
	public static Vector3 one { get; }
	public static Vector3 forward { get; }
	public static Vector3 back { get; }
	public static Vector3 up { get; }
	public static Vector3 down { get; }
	public static Vector3 left { get; }
	public static Vector3 right { get; }

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(float x, float y, float z) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public void .ctor(float x, float y) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static Vector3 Lerp(Vector3 a, Vector3 b, float t) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public float get_Item(int index) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	public void set_Item(int index, float value) { }

	// RVA: 0xB1E Offset: 0xB1E VA: 0xB1E Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5B9 Offset: 0x5B9 VA: 0x5B9 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x5BA Offset: 0x5BA VA: 0x5BA Slot: 4
	public bool Equals(Vector3 other) { }

	// RVA: 0x5B9 Offset: 0x5B9 VA: 0x5B9
	public static Vector3 Normalize(Vector3 value) { }

	// RVA: 0x5BA Offset: 0x5BA VA: 0x5BA
	public Vector3 get_normalized() { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public static float Dot(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	public static float Distance(Vector3 a, Vector3 b) { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	public static float Magnitude(Vector3 vector) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	public static float SqrMagnitude(Vector3 vector) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	public float get_sqrMagnitude() { }

	// RVA: 0x37B Offset: 0x37B VA: 0x37B
	public static Vector3 Min(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x37C Offset: 0x37C VA: 0x37C
	public static Vector3 Max(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x6EC Offset: 0x6EC VA: 0x6EC
	public static Vector3 get_zero() { }

	// RVA: 0x6ED Offset: 0x6ED VA: 0x6ED
	public static Vector3 get_one() { }

	// RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	public static Vector3 get_forward() { }

	// RVA: 0x6EF Offset: 0x6EF VA: 0x6EF
	public static Vector3 get_back() { }

	// RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0
	public static Vector3 get_up() { }

	// RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1
	public static Vector3 get_down() { }

	// RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2
	public static Vector3 get_left() { }

	// RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3
	public static Vector3 get_right() { }

	// RVA: 0x37D Offset: 0x37D VA: 0x37D
	public static Vector3 op_Addition(Vector3 a, Vector3 b) { }

	// RVA: 0x37E Offset: 0x37E VA: 0x37E
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public static Vector3 op_Multiply(Vector3 a, float d) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public static Vector3 op_Division(Vector3 a, float d) { }

	// RVA: 0x5BB Offset: 0x5BB VA: 0x5BB
	public static bool op_Equality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x5BC Offset: 0x5BC VA: 0x5BC
	public static bool op_Inequality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0xB1F Offset: 0xB1F VA: 0xB1F Slot: 3
	public override string ToString() { }

	// RVA: 0xF51 Offset: 0xF51 VA: 0xF51
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
[NativeHeaderAttribute] // RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
[DefaultMemberAttribute] // RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
[NativeTypeAttribute] // RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
[ThreadAndSerializationSafeAttribute] // RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3
public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 1717
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Quaternion identityQuaternion; // 0x0

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(float x, float y, float z, float w) { }

	[FreeFunctionAttribute] // RVA: 0xA86 Offset: 0xA86 VA: 0xA86
	// RVA: 0x53A Offset: 0x53A VA: 0x53A
	public static Quaternion Inverse(Quaternion rotation) { }

	// RVA: 0x364 Offset: 0x364 VA: 0x364
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point) { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	private static bool IsEqualUsingDot(float dot) { }

	// RVA: 0x59E Offset: 0x59E VA: 0x59E
	public static bool op_Equality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x59F Offset: 0x59F VA: 0x59F
	public static bool op_Inequality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	public static float Dot(Quaternion a, Quaternion b) { }

	// RVA: 0xAD1 Offset: 0xAD1 VA: 0xAD1 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5A0 Offset: 0x5A0 VA: 0x5A0 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x5A1 Offset: 0x5A1 VA: 0x5A1 Slot: 4
	public bool Equals(Quaternion other) { }

	// RVA: 0xAD2 Offset: 0xAD2 VA: 0xAD2 Slot: 3
	public override string ToString() { }

	// RVA: 0xF46 Offset: 0xF46 VA: 0xF46
	private static void .cctor() { }

	// RVA: 0x53B Offset: 0x53B VA: 0x53B
	private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
[NativeHeaderAttribute] // RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
[NativeHeaderAttribute] // RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
[ThreadAndSerializationSafeAttribute] // RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
[NativeHeaderAttribute] // RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
public struct Mathf // TypeDefIndex: 1718
{
	// Fields
	public static readonly float Epsilon; // 0xFFFFFFFF

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static float Sin(float f) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static float Cos(float f) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static float Sqrt(float f) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static float Abs(float f) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static float Min(float a, float b) { }

	// RVA: 0x578 Offset: 0x578 VA: 0x578
	public static int Min(int a, int b) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public static float Max(float a, float b) { }

	// RVA: 0x579 Offset: 0x579 VA: 0x579
	public static int Max(int a, int b) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public static float Pow(float f, float p) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static float Log(float f, float p) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public static float Floor(float f) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static float Round(float f) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public static int CeilToInt(float f) { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	public static int FloorToInt(float f) { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public static int RoundToInt(float f) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static float Sign(float f) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float Clamp(float value, float min, float max) { }

	// RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	public static int Clamp(int value, int min, int max) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static float Clamp01(float value) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static float Lerp(float a, float b, float t) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static bool Approximately(float a, float b) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static float Repeat(float t, float length) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public static float InverseLerp(float a, float b, float value) { }

	// RVA: 0xF3B Offset: 0xF3B VA: 0xF3B
	private static void .cctor() { }
}

// Namespace: UnityEngineInternal
public struct MathfInternal // TypeDefIndex: 1719
{
	// Fields
	public static float FloatMinNormal; // 0x0
	public static float FloatMinDenormal; // 0x4
	public static bool IsFlushToZeroEnabled; // 0x8

	// Methods

	// RVA: 0xF53 Offset: 0xF53 VA: 0xF53
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
[NativeHeaderAttribute] // RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
public sealed class Mesh : Object // TypeDefIndex: 1720
{
	// Properties
	internal bool canAccess { get; }
	public int subMeshCount { get; }
	public Vector3[] vertices { get; }
	public Vector3[] normals { get; }
	public Vector4[] tangents { get; }
	public Vector2[] uv { get; }
	public Vector2[] uv2 { get; }
	public Vector2[] uv3 { get; }
	public Vector2[] uv4 { get; }
	public Color32[] colors32 { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA87 Offset: 0xA87 VA: 0xA87
	// RVA: 0x699 Offset: 0x699 VA: 0x699
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xA88 Offset: 0xA88 VA: 0xA88
	// RVA: 0x69A Offset: 0x69A VA: 0x69A
	private static void Internal_Create(Mesh mono) { }

	[FreeFunctionAttribute] // RVA: 0xA89 Offset: 0xA89 VA: 0xA89
	// RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	private int[] GetIndicesImpl(int submesh, bool applyBaseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xA8A Offset: 0xA8A VA: 0xA8A
	// RVA: 0x26 Offset: 0x26 VA: 0x26
	private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds, int baseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xA8B Offset: 0xA8B VA: 0xA8B
	// RVA: 0x512 Offset: 0x512 VA: 0x512
	private void PrintErrorCantAccessChannel(VertexAttribute ch) { }

	[FreeFunctionAttribute] // RVA: 0xA8C Offset: 0xA8C VA: 0xA8C
	// RVA: 0x57C Offset: 0x57C VA: 0x57C
	internal bool HasChannel(VertexAttribute ch) { }

	[FreeFunctionAttribute] // RVA: 0xA8D Offset: 0xA8D VA: 0xA8D
	// RVA: 0x30 Offset: 0x30 VA: 0x30
	private void SetArrayForChannelImpl(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, Array values, int arraySize) { }

	[FreeFunctionAttribute] // RVA: 0xA8E Offset: 0xA8E VA: 0xA8E
	// RVA: 0x141 Offset: 0x141 VA: 0x141
	private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim) { }

	[NativeMethodAttribute] // RVA: 0xA8F Offset: 0xA8F VA: 0xA8F
	// RVA: 0xAA5 Offset: 0xAA5 VA: 0xAA5
	internal bool get_canAccess() { }

	[NativeMethodAttribute] // RVA: 0xA90 Offset: 0xA90 VA: 0xA90
	// RVA: 0xAA6 Offset: 0xAA6 VA: 0xAA6
	public int get_subMeshCount() { }

	[NativeMethodAttribute] // RVA: 0xA91 Offset: 0xA91 VA: 0xA91
	// RVA: 0x513 Offset: 0x513 VA: 0x513
	private void ClearImpl(bool keepVertexLayout) { }

	[NativeMethodAttribute] // RVA: 0xA92 Offset: 0xA92 VA: 0xA92
	// RVA: 0x69B Offset: 0x69B VA: 0x69B
	private void RecalculateBoundsImpl() { }

	// RVA: 0x57D Offset: 0x57D VA: 0x57D
	internal VertexAttribute GetUVChannel(int uvIndex) { }

	// RVA: 0xAA7 Offset: 0xAA7 VA: 0xAA7
	internal static int DefaultDimensionForChannel(VertexAttribute channel) { }

	// RVA: -1 Offset: -1
	private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x162 Offset: 0x162 VA: 0x162
	|-Mesh.GetAllocArrayFromChannel<object>
	|
	|-RVA: 0x165 Offset: 0x165 VA: 0x165
	|-Mesh.GetAllocArrayFromChannel<Color32>
	|
	|-RVA: 0x182 Offset: 0x182 VA: 0x182
	|-Mesh.GetAllocArrayFromChannel<Vector2>
	|
	|-RVA: 0x183 Offset: 0x183 VA: 0x183
	|-Mesh.GetAllocArrayFromChannel<Vector3>
	|
	|-RVA: 0x184 Offset: 0x184 VA: 0x184
	|-Mesh.GetAllocArrayFromChannel<Vector4>
	*/

	// RVA: -1 Offset: -1
	private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7
	|-Mesh.GetAllocArrayFromChannel<object>
	|
	|-RVA: 0x6BD Offset: 0x6BD VA: 0x6BD
	|-Mesh.GetAllocArrayFromChannel<Vector2>
	|
	|-RVA: 0x6BB Offset: 0x6BB VA: 0x6BB
	|-Mesh.GetAllocArrayFromChannel<Vector3>
	|
	|-RVA: 0x6BC Offset: 0x6BC VA: 0x6BC
	|-Mesh.GetAllocArrayFromChannel<Vector4>
	*/

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	private void SetSizedArrayForChannel(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, Array values, int valuesCount) { }

	// RVA: -1 Offset: -1
	private void SetListForChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x93 Offset: 0x93 VA: 0x93
	|-Mesh.SetListForChannel<object>
	|
	|-RVA: 0x97 Offset: 0x97 VA: 0x97
	|-Mesh.SetListForChannel<Color32>
	|
	|-RVA: 0x99 Offset: 0x99 VA: 0x99
	|-Mesh.SetListForChannel<Vector2>
	*/

	// RVA: -1 Offset: -1
	private void SetListForChannel<T>(VertexAttribute channel, List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x442 Offset: 0x442 VA: 0x442
	|-Mesh.SetListForChannel<object>
	|
	|-RVA: 0x470 Offset: 0x470 VA: 0x470
	|-Mesh.SetListForChannel<Vector3>
	|
	|-RVA: 0x471 Offset: 0x471 VA: 0x471
	|-Mesh.SetListForChannel<Vector4>
	*/

	// RVA: 0xAA8 Offset: 0xAA8 VA: 0xAA8
	public Vector3[] get_vertices() { }

	// RVA: 0xAA9 Offset: 0xAA9 VA: 0xAA9
	public Vector3[] get_normals() { }

	// RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	public Vector4[] get_tangents() { }

	// RVA: 0xAAB Offset: 0xAAB VA: 0xAAB
	public Vector2[] get_uv() { }

	// RVA: 0xAAC Offset: 0xAAC VA: 0xAAC
	public Vector2[] get_uv2() { }

	// RVA: 0xAAD Offset: 0xAAD VA: 0xAAD
	public Vector2[] get_uv3() { }

	// RVA: 0xAAE Offset: 0xAAE VA: 0xAAE
	public Vector2[] get_uv4() { }

	// RVA: 0xAAF Offset: 0xAAF VA: 0xAAF
	public Color32[] get_colors32() { }

	// RVA: 0x514 Offset: 0x514 VA: 0x514
	public void SetVertices(List<Vector3> inVertices) { }

	// RVA: 0x515 Offset: 0x515 VA: 0x515
	public void SetNormals(List<Vector3> inNormals) { }

	// RVA: 0x516 Offset: 0x516 VA: 0x516
	public void SetTangents(List<Vector4> inTangents) { }

	// RVA: 0x517 Offset: 0x517 VA: 0x517
	public void SetColors(List<Color32> inColors) { }

	// RVA: -1 Offset: -1
	private void SetUvsImpl<T>(int uvIndex, int dim, List<T> uvs) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x139 Offset: 0x139 VA: 0x139
	|-Mesh.SetUvsImpl<object>
	|
	|-RVA: 0x13F Offset: 0x13F VA: 0x13F
	|-Mesh.SetUvsImpl<Vector2>
	*/

	// RVA: 0x357 Offset: 0x357 VA: 0x357
	public void SetUVs(int channel, List<Vector2> uvs) { }

	// RVA: 0x69C Offset: 0x69C VA: 0x69C
	private void PrintErrorCantAccessIndices() { }

	// RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles) { }

	// RVA: 0x57E Offset: 0x57E VA: 0x57E
	private bool CheckCanAccessSubmeshTriangles(int submesh) { }

	// RVA: 0x57F Offset: 0x57F VA: 0x57F
	private bool CheckCanAccessSubmeshIndices(int submesh) { }

	// RVA: 0x580 Offset: 0x580 VA: 0x580
	public int[] GetIndices(int submesh) { }

	// RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	public int[] GetIndices(int submesh, bool applyBaseVertex) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds, int baseVertex) { }

	// RVA: 0x358 Offset: 0x358 VA: 0x358
	public void SetTriangles(List<int> triangles, int submesh) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	public void SetTriangles(List<int> triangles, int submesh, bool calculateBounds, int baseVertex) { }

	// RVA: 0x69D Offset: 0x69D VA: 0x69D
	public void Clear() { }

	// RVA: 0x69E Offset: 0x69E VA: 0x69E
	public void RecalculateBounds() { }
}

// Namespace: 
internal enum Mesh.InternalVertexChannelType // TypeDefIndex: 1721
{
	// Fields
	public int value__; // 0x0
	public const Mesh.InternalVertexChannelType Float = 0;
	public const Mesh.InternalVertexChannelType Color = 2;
}

// Namespace: UnityEngineInternal
public class ScriptingUtils // TypeDefIndex: 1722
{
	// Methods

	// RVA: 0x5C0 Offset: 0x5C0 VA: 0x5C0
	public static Delegate CreateDelegate(Type type, MethodInfo methodInfo) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
[NativeHeaderAttribute] // RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
[NativeHeaderAttribute] // RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
[ExtensionOfNativeClassAttribute] // RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6
public class MonoBehaviour : Behaviour // TypeDefIndex: 1723
{
	// Properties
	public bool useGUILayout { get; set; }

	// Methods

	// RVA: 0x6A1 Offset: 0x6A1 VA: 0x6A1
	public void .ctor() { }

	// RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	public bool IsInvoking() { }

	// RVA: 0x6A2 Offset: 0x6A2 VA: 0x6A2
	public void CancelInvoke() { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6
	public void Invoke(string methodName, float time) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void InvokeRepeating(string methodName, float time, float repeatRate) { }

	// RVA: 0x518 Offset: 0x518 VA: 0x518
	public void CancelInvoke(string methodName) { }

	// RVA: 0x581 Offset: 0x581 VA: 0x581
	public bool IsInvoking(string methodName) { }

	[ExcludeFromDocsAttribute] // RVA: 0xA93 Offset: 0xA93 VA: 0xA93
	// RVA: 0x582 Offset: 0x582 VA: 0x582
	public Coroutine StartCoroutine(string methodName) { }

	// RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	public Coroutine StartCoroutine(string methodName, object value) { }

	// RVA: 0x583 Offset: 0x583 VA: 0x583
	public Coroutine StartCoroutine(IEnumerator routine) { }

	[ObsoleteAttribute] // RVA: 0xA94 Offset: 0xA94 VA: 0xA94
	// RVA: 0x584 Offset: 0x584 VA: 0x584
	public Coroutine StartCoroutine_Auto(IEnumerator routine) { }

	// RVA: 0x519 Offset: 0x519 VA: 0x519
	public void StopCoroutine(IEnumerator routine) { }

	// RVA: 0x51A Offset: 0x51A VA: 0x51A
	public void StopCoroutine(Coroutine routine) { }

	// RVA: 0x51B Offset: 0x51B VA: 0x51B
	public void StopCoroutine(string methodName) { }

	// RVA: 0x6A3 Offset: 0x6A3 VA: 0x6A3
	public void StopAllCoroutines() { }

	// RVA: 0xAB1 Offset: 0xAB1 VA: 0xAB1
	public bool get_useGUILayout() { }

	// RVA: 0x51C Offset: 0x51C VA: 0x51C
	public void set_useGUILayout(bool value) { }

	// RVA: 0x6A4 Offset: 0x6A4 VA: 0x6A4
	public static void print(object message) { }

	[FreeFunctionAttribute] // RVA: 0xA95 Offset: 0xA95 VA: 0xA95
	// RVA: 0x6A5 Offset: 0x6A5 VA: 0x6A5
	private static void Internal_CancelInvokeAll(MonoBehaviour self) { }

	[FreeFunctionAttribute] // RVA: 0xA96 Offset: 0xA96 VA: 0xA96
	// RVA: 0xAB2 Offset: 0xAB2 VA: 0xAB2
	private static bool Internal_IsInvokingAll(MonoBehaviour self) { }

	[FreeFunctionAttribute] // RVA: 0xA97 Offset: 0xA97 VA: 0xA97
	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate) { }

	[FreeFunctionAttribute] // RVA: 0xA98 Offset: 0xA98 VA: 0xA98
	// RVA: 0x51D Offset: 0x51D VA: 0x51D
	private static void CancelInvoke(MonoBehaviour self, string methodName) { }

	[FreeFunctionAttribute] // RVA: 0xA99 Offset: 0xA99 VA: 0xA99
	// RVA: 0x585 Offset: 0x585 VA: 0x585
	private static bool IsInvoking(MonoBehaviour self, string methodName) { }

	[FreeFunctionAttribute] // RVA: 0xA9A Offset: 0xA9A VA: 0xA9A
	// RVA: 0xAB3 Offset: 0xAB3 VA: 0xAB3
	private static bool IsObjectMonoBehaviour(Object obj) { }

	// RVA: 0xA15 Offset: 0xA15 VA: 0xA15
	private Coroutine StartCoroutineManaged(string methodName, object value) { }

	// RVA: 0x586 Offset: 0x586 VA: 0x586
	private Coroutine StartCoroutineManaged2(IEnumerator enumerator) { }

	// RVA: 0x51E Offset: 0x51E VA: 0x51E
	private void StopCoroutineManaged(Coroutine routine) { }

	// RVA: 0x51F Offset: 0x51F VA: 0x51F
	private void StopCoroutineFromEnumeratorManaged(IEnumerator routine) { }

	// RVA: 0xAB4 Offset: 0xAB4 VA: 0xAB4
	internal string GetScriptClassName() { }
}

// Namespace: UnityEngine
internal class SendMouseEvents // TypeDefIndex: 1724
{
	// Fields
	private static bool s_MouseUsed; // 0x0
	private static readonly SendMouseEvents.HitInfo[] m_LastHit; // 0x4
	private static readonly SendMouseEvents.HitInfo[] m_MouseDownHit; // 0x8
	private static readonly SendMouseEvents.HitInfo[] m_CurrentHit; // 0xC
	private static Camera[] m_Cameras; // 0x10

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xA9B Offset: 0xA9B VA: 0xA9B
	// RVA: 0xF49 Offset: 0xF49 VA: 0xF49
	private static void SetMouseMoved() { }

	// RVA: 0x36B Offset: 0x36B VA: 0x36B
	private static void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref SendMouseEvents.HitInfo hitInfo) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xA9C Offset: 0xA9C VA: 0xA9C
	// RVA: 0x6D8 Offset: 0x6D8 VA: 0x6D8
	private static void DoSendMouseEvents(int skipRTCameras) { }

	// RVA: 0x576 Offset: 0x576 VA: 0x576
	private static void SendEvents(int i, SendMouseEvents.HitInfo hit) { }

	// RVA: 0xF4A Offset: 0xF4A VA: 0xF4A
	private static void .cctor() { }
}

// Namespace: 
private struct SendMouseEvents.HitInfo // TypeDefIndex: 1725
{
	// Fields
	public GameObject target; // 0x0
	public Camera camera; // 0x4

	// Methods

	// RVA: 0x577 Offset: 0x577 VA: 0x577
	public void SendMessage(string name) { }

	// RVA: 0xAEC Offset: 0xAEC VA: 0xAEC
	public static bool op_Implicit(SendMouseEvents.HitInfo exists) { }

	// RVA: 0x5AA Offset: 0x5AA VA: 0x5AA
	public static bool Compare(SendMouseEvents.HitInfo lhs, SendMouseEvents.HitInfo rhs) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7
internal sealed class NoAllocHelpers // TypeDefIndex: 1726
{
	// Methods

	// RVA: -1 Offset: -1
	public static int SafeLength<T>(List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDF9 Offset: 0xDF9 VA: 0xDF9
	|-NoAllocHelpers.SafeLength<int>
	|
	|-RVA: 0xDB3 Offset: 0xDB3 VA: 0xDB3
	|-NoAllocHelpers.SafeLength<object>
	|
	|-RVA: 0xE6A Offset: 0xE6A VA: 0xE6A
	|-NoAllocHelpers.SafeLength<Color32>
	|
	|-RVA: 0xE6B Offset: 0xE6B VA: 0xE6B
	|-NoAllocHelpers.SafeLength<Vector2>
	|
	|-RVA: 0xE6C Offset: 0xE6C VA: 0xE6C
	|-NoAllocHelpers.SafeLength<Vector3>
	|
	|-RVA: 0xE6D Offset: 0xE6D VA: 0xE6D
	|-NoAllocHelpers.SafeLength<Vector4>
	*/

	[FreeFunctionAttribute] // RVA: 0xA9D Offset: 0xA9D VA: 0xA9D
	// RVA: 0xAB7 Offset: 0xAB7 VA: 0xAB7
	public static Array ExtractArrayFromList(object list) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8
public struct Plane // TypeDefIndex: 1727
{
	// Fields
	private Vector3 m_Normal; // 0x0
	private float m_Distance; // 0xC

	// Methods

	// RVA: 0x35D Offset: 0x35D VA: 0x35D
	public void .ctor(Vector3 inNormal, Vector3 inPoint) { }

	// RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	public bool Raycast(Ray ray, out float enter) { }

	// RVA: 0xAC2 Offset: 0xAC2 VA: 0xAC2 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal interface IPlayerEditorConnectionNative // TypeDefIndex: 1728
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void DisconnectAll() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void SendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool TrySendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Poll() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void RegisterInternal(Guid messageId) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void UnregisterInternal(Guid messageId) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsConnected() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9
internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 1729
{
	// Methods

	// RVA: 0x6BE Offset: 0x6BE VA: 0x6BE
	public void .ctor() { }

	// RVA: 0x102 Offset: 0x102 VA: 0x102 Slot: 6
	private void UnityEngine.IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x142 Offset: 0x142 VA: 0x142 Slot: 7
	private bool UnityEngine.IPlayerEditorConnectionNative.TrySendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x6BF Offset: 0x6BF VA: 0x6BF Slot: 8
	private void UnityEngine.IPlayerEditorConnectionNative.Poll() { }

	// RVA: 0x533 Offset: 0x533 VA: 0x533 Slot: 9
	private void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(Guid messageId) { }

	// RVA: 0x534 Offset: 0x534 VA: 0x534 Slot: 10
	private void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId) { }

	// RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0 Slot: 4
	private void UnityEngine.IPlayerEditorConnectionNative.Initialize() { }

	// RVA: 0xACB Offset: 0xACB VA: 0xACB Slot: 11
	private bool UnityEngine.IPlayerEditorConnectionNative.IsConnected() { }

	// RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1 Slot: 5
	private void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll() { }

	[FreeFunctionAttribute] // RVA: 0xA9E Offset: 0xA9E VA: 0xA9E
	// RVA: 0x26A Offset: 0x26A VA: 0x26A
	private static bool IsConnected() { }

	[FreeFunctionAttribute] // RVA: 0xA9F Offset: 0xA9F VA: 0xA9F
	// RVA: 0xF43 Offset: 0xF43 VA: 0xF43
	private static void Initialize() { }

	[FreeFunctionAttribute] // RVA: 0xAA0 Offset: 0xAA0 VA: 0xAA0
	// RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2
	private static void RegisterInternal(string messageId) { }

	[FreeFunctionAttribute] // RVA: 0xAA1 Offset: 0xAA1 VA: 0xAA1
	// RVA: 0x6C3 Offset: 0x6C3 VA: 0x6C3
	private static void UnregisterInternal(string messageId) { }

	[FreeFunctionAttribute] // RVA: 0xAA2 Offset: 0xAA2 VA: 0xAA2
	// RVA: 0x363 Offset: 0x363 VA: 0x363
	private static void SendMessage(string messageId, byte[] data, int playerId) { }

	[FreeFunctionAttribute] // RVA: 0xAA3 Offset: 0xAA3 VA: 0xAA3
	// RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	private static bool TrySendMessage(string messageId, byte[] data, int playerId) { }

	[FreeFunctionAttribute] // RVA: 0xAA4 Offset: 0xAA4 VA: 0xAA4
	// RVA: 0xF44 Offset: 0xF44 VA: 0xF44
	private static void PollInternal() { }

	[FreeFunctionAttribute] // RVA: 0xAA5 Offset: 0xAA5 VA: 0xAA5
	// RVA: 0xF45 Offset: 0xF45 VA: 0xF45
	private static void DisconnectAll() { }
}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x8BA Offset: 0x8BA VA: 0x8BA
public struct Initialization // TypeDefIndex: 1730
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8BB Offset: 0x8BB VA: 0x8BB
public struct Initialization.PlayerUpdateTime // TypeDefIndex: 1731
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8BC Offset: 0x8BC VA: 0x8BC
public struct Initialization.AsyncUploadTimeSlicedUpdate // TypeDefIndex: 1732
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
public struct Initialization.SynchronizeState // TypeDefIndex: 1733
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
public struct Initialization.SynchronizeInputs // TypeDefIndex: 1734
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8BF Offset: 0x8BF VA: 0x8BF
public struct Initialization.XREarlyUpdate // TypeDefIndex: 1735
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x8C0 Offset: 0x8C0 VA: 0x8C0
public struct EarlyUpdate // TypeDefIndex: 1736
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C1 Offset: 0x8C1 VA: 0x8C1
public struct EarlyUpdate.PollPlayerConnection // TypeDefIndex: 1737
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C2 Offset: 0x8C2 VA: 0x8C2
public struct EarlyUpdate.ProfilerStartFrame // TypeDefIndex: 1738
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C3 Offset: 0x8C3 VA: 0x8C3
public struct EarlyUpdate.PollHtcsPlayerConnection // TypeDefIndex: 1739
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C4 Offset: 0x8C4 VA: 0x8C4
public struct EarlyUpdate.GpuTimestamp // TypeDefIndex: 1740
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C5 Offset: 0x8C5 VA: 0x8C5
public struct EarlyUpdate.AnalyticsCoreStatsUpdate // TypeDefIndex: 1741
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C6 Offset: 0x8C6 VA: 0x8C6
public struct EarlyUpdate.UnityWebRequestUpdate // TypeDefIndex: 1742
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C7 Offset: 0x8C7 VA: 0x8C7
public struct EarlyUpdate.UpdateStreamingManager // TypeDefIndex: 1743
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C8 Offset: 0x8C8 VA: 0x8C8
public struct EarlyUpdate.ExecuteMainThreadJobs // TypeDefIndex: 1744
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8C9 Offset: 0x8C9 VA: 0x8C9
public struct EarlyUpdate.ProcessMouseInWindow // TypeDefIndex: 1745
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8CA Offset: 0x8CA VA: 0x8CA
public struct EarlyUpdate.ClearIntermediateRenderers // TypeDefIndex: 1746
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8CB Offset: 0x8CB VA: 0x8CB
public struct EarlyUpdate.ClearLines // TypeDefIndex: 1747
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8CC Offset: 0x8CC VA: 0x8CC
public struct EarlyUpdate.PresentBeforeUpdate // TypeDefIndex: 1748
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8CD Offset: 0x8CD VA: 0x8CD
public struct EarlyUpdate.ResetFrameStatsAfterPresent // TypeDefIndex: 1749
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8CE Offset: 0x8CE VA: 0x8CE
public struct EarlyUpdate.UpdateAllUnityWebStreams // TypeDefIndex: 1750
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8CF Offset: 0x8CF VA: 0x8CF
public struct EarlyUpdate.UpdateAsyncReadbackManager // TypeDefIndex: 1751
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D0 Offset: 0x8D0 VA: 0x8D0
public struct EarlyUpdate.UpdateTextureStreamingManager // TypeDefIndex: 1752
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D1 Offset: 0x8D1 VA: 0x8D1
public struct EarlyUpdate.UpdatePreloading // TypeDefIndex: 1753
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D2 Offset: 0x8D2 VA: 0x8D2
public struct EarlyUpdate.RendererNotifyInvisible // TypeDefIndex: 1754
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D3 Offset: 0x8D3 VA: 0x8D3
public struct EarlyUpdate.PlayerCleanupCachedData // TypeDefIndex: 1755
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D4 Offset: 0x8D4 VA: 0x8D4
public struct EarlyUpdate.UpdateMainGameViewRect // TypeDefIndex: 1756
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D5 Offset: 0x8D5 VA: 0x8D5
public struct EarlyUpdate.UpdateCanvasRectTransform // TypeDefIndex: 1757
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D6 Offset: 0x8D6 VA: 0x8D6
public struct EarlyUpdate.UpdateInputManager // TypeDefIndex: 1758
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D7 Offset: 0x8D7 VA: 0x8D7
public struct EarlyUpdate.ProcessRemoteInput // TypeDefIndex: 1759
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D8 Offset: 0x8D8 VA: 0x8D8
public struct EarlyUpdate.XRUpdate // TypeDefIndex: 1760
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8D9 Offset: 0x8D9 VA: 0x8D9
public struct EarlyUpdate.ScriptRunDelayedStartupFrame // TypeDefIndex: 1761
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8DA Offset: 0x8DA VA: 0x8DA
public struct EarlyUpdate.UpdateKinect // TypeDefIndex: 1762
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8DB Offset: 0x8DB VA: 0x8DB
public struct EarlyUpdate.DeliverIosPlatformEvents // TypeDefIndex: 1763
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8DC Offset: 0x8DC VA: 0x8DC
public struct EarlyUpdate.DispatchEventQueueEvents // TypeDefIndex: 1764
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8DD Offset: 0x8DD VA: 0x8DD
public struct EarlyUpdate.DirectorSampleTime // TypeDefIndex: 1765
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8DE Offset: 0x8DE VA: 0x8DE
public struct EarlyUpdate.PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 1766
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8DF Offset: 0x8DF VA: 0x8DF
public struct EarlyUpdate.SpriteAtlasManagerUpdate // TypeDefIndex: 1767
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E0 Offset: 0x8E0 VA: 0x8E0
public struct EarlyUpdate.TangoUpdate // TypeDefIndex: 1768
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E1 Offset: 0x8E1 VA: 0x8E1
public struct EarlyUpdate.PerformanceAnalyticsUpdate // TypeDefIndex: 1769
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x8E2 Offset: 0x8E2 VA: 0x8E2
public struct FixedUpdate // TypeDefIndex: 1770
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E3 Offset: 0x8E3 VA: 0x8E3
public struct FixedUpdate.ClearLines // TypeDefIndex: 1771
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E4 Offset: 0x8E4 VA: 0x8E4
public struct FixedUpdate.DirectorFixedSampleTime // TypeDefIndex: 1772
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E5 Offset: 0x8E5 VA: 0x8E5
public struct FixedUpdate.AudioFixedUpdate // TypeDefIndex: 1773
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E6 Offset: 0x8E6 VA: 0x8E6
public struct FixedUpdate.ScriptRunBehaviourFixedUpdate // TypeDefIndex: 1774
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E7 Offset: 0x8E7 VA: 0x8E7
public struct FixedUpdate.DirectorFixedUpdate // TypeDefIndex: 1775
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E8 Offset: 0x8E8 VA: 0x8E8
public struct FixedUpdate.LegacyFixedAnimationUpdate // TypeDefIndex: 1776
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8E9 Offset: 0x8E9 VA: 0x8E9
public struct FixedUpdate.XRFixedUpdate // TypeDefIndex: 1777
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8EA Offset: 0x8EA VA: 0x8EA
public struct FixedUpdate.PhysicsFixedUpdate // TypeDefIndex: 1778
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8EB Offset: 0x8EB VA: 0x8EB
public struct FixedUpdate.Physics2DFixedUpdate // TypeDefIndex: 1779
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8EC Offset: 0x8EC VA: 0x8EC
public struct FixedUpdate.DirectorFixedUpdatePostPhysics // TypeDefIndex: 1780
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8ED Offset: 0x8ED VA: 0x8ED
public struct FixedUpdate.ScriptRunDelayedFixedFrameRate // TypeDefIndex: 1781
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8EE Offset: 0x8EE VA: 0x8EE
public struct FixedUpdate.NewInputFixedUpdate // TypeDefIndex: 1782
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x8EF Offset: 0x8EF VA: 0x8EF
public struct PreUpdate // TypeDefIndex: 1783
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F0 Offset: 0x8F0 VA: 0x8F0
public struct PreUpdate.PhysicsUpdate // TypeDefIndex: 1784
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F1 Offset: 0x8F1 VA: 0x8F1
public struct PreUpdate.Physics2DUpdate // TypeDefIndex: 1785
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F2 Offset: 0x8F2 VA: 0x8F2
public struct PreUpdate.CheckTexFieldInput // TypeDefIndex: 1786
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F3 Offset: 0x8F3 VA: 0x8F3
public struct PreUpdate.IMGUISendQueuedEvents // TypeDefIndex: 1787
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F4 Offset: 0x8F4 VA: 0x8F4
public struct PreUpdate.SendMouseEvents // TypeDefIndex: 1788
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F5 Offset: 0x8F5 VA: 0x8F5
public struct PreUpdate.AIUpdate // TypeDefIndex: 1789
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F6 Offset: 0x8F6 VA: 0x8F6
public struct PreUpdate.WindUpdate // TypeDefIndex: 1790
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F7 Offset: 0x8F7 VA: 0x8F7
public struct PreUpdate.UpdateVideo // TypeDefIndex: 1791
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8F8 Offset: 0x8F8 VA: 0x8F8
public struct PreUpdate.NewInputUpdate // TypeDefIndex: 1792
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x8F9 Offset: 0x8F9 VA: 0x8F9
public struct Update // TypeDefIndex: 1793
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8FA Offset: 0x8FA VA: 0x8FA
public struct Update.ScriptRunBehaviourUpdate // TypeDefIndex: 1794
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8FB Offset: 0x8FB VA: 0x8FB
public struct Update.DirectorUpdate // TypeDefIndex: 1795
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8FC Offset: 0x8FC VA: 0x8FC
public struct Update.ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1796
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8FD Offset: 0x8FD VA: 0x8FD
public struct Update.ScriptRunDelayedTasks // TypeDefIndex: 1797
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x8FE Offset: 0x8FE VA: 0x8FE
public struct PreLateUpdate // TypeDefIndex: 1798
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x8FF Offset: 0x8FF VA: 0x8FF
public struct PreLateUpdate.AIUpdatePostScript // TypeDefIndex: 1799
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x900 Offset: 0x900 VA: 0x900
public struct PreLateUpdate.DirectorUpdateAnimationBegin // TypeDefIndex: 1800
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x901 Offset: 0x901 VA: 0x901
public struct PreLateUpdate.LegacyAnimationUpdate // TypeDefIndex: 1801
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x902 Offset: 0x902 VA: 0x902
public struct PreLateUpdate.DirectorUpdateAnimationEnd // TypeDefIndex: 1802
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x903 Offset: 0x903 VA: 0x903
public struct PreLateUpdate.DirectorDeferredEvaluate // TypeDefIndex: 1803
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x904 Offset: 0x904 VA: 0x904
public struct PreLateUpdate.UpdateNetworkManager // TypeDefIndex: 1804
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x905 Offset: 0x905 VA: 0x905
public struct PreLateUpdate.UpdateMasterServerInterface // TypeDefIndex: 1805
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x906 Offset: 0x906 VA: 0x906
public struct PreLateUpdate.UNetUpdate // TypeDefIndex: 1806
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x907 Offset: 0x907 VA: 0x907
public struct PreLateUpdate.EndGraphicsJobsAfterScriptUpdate // TypeDefIndex: 1807
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x908 Offset: 0x908 VA: 0x908
public struct PreLateUpdate.ParticleSystemBeginUpdateAll // TypeDefIndex: 1808
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x909 Offset: 0x909 VA: 0x909
public struct PreLateUpdate.ScriptRunBehaviourLateUpdate // TypeDefIndex: 1809
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x90A Offset: 0x90A VA: 0x90A
public struct PreLateUpdate.ConstraintManagerUpdate // TypeDefIndex: 1810
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0x90B Offset: 0x90B VA: 0x90B
public struct PostLateUpdate // TypeDefIndex: 1811
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x90C Offset: 0x90C VA: 0x90C
public struct PostLateUpdate.PlayerSendFrameStarted // TypeDefIndex: 1812
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x90D Offset: 0x90D VA: 0x90D
public struct PostLateUpdate.UpdateRectTransform // TypeDefIndex: 1813
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x90E Offset: 0x90E VA: 0x90E
public struct PostLateUpdate.UpdateCanvasRectTransform // TypeDefIndex: 1814
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x90F Offset: 0x90F VA: 0x90F
public struct PostLateUpdate.PlayerUpdateCanvases // TypeDefIndex: 1815
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x910 Offset: 0x910 VA: 0x910
public struct PostLateUpdate.UpdateAudio // TypeDefIndex: 1816
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x911 Offset: 0x911 VA: 0x911
public struct PostLateUpdate.UpdateVideo // TypeDefIndex: 1817
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x912 Offset: 0x912 VA: 0x912
public struct PostLateUpdate.DirectorLateUpdate // TypeDefIndex: 1818
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x913 Offset: 0x913 VA: 0x913
public struct PostLateUpdate.ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1819
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x914 Offset: 0x914 VA: 0x914
public struct PostLateUpdate.VFXUpdate // TypeDefIndex: 1820
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x915 Offset: 0x915 VA: 0x915
public struct PostLateUpdate.ParticleSystemEndUpdateAll // TypeDefIndex: 1821
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x916 Offset: 0x916 VA: 0x916
public struct PostLateUpdate.EndGraphicsJobsAfterScriptLateUpdate // TypeDefIndex: 1822
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x917 Offset: 0x917 VA: 0x917
public struct PostLateUpdate.UpdateSubstance // TypeDefIndex: 1823
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x918 Offset: 0x918 VA: 0x918
public struct PostLateUpdate.UpdateCustomRenderTextures // TypeDefIndex: 1824
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x919 Offset: 0x919 VA: 0x919
public struct PostLateUpdate.UpdateAllRenderers // TypeDefIndex: 1825
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x91A Offset: 0x91A VA: 0x91A
public struct PostLateUpdate.EnlightenRuntimeUpdate // TypeDefIndex: 1826
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x91B Offset: 0x91B VA: 0x91B
public struct PostLateUpdate.UpdateAllSkinnedMeshes // TypeDefIndex: 1827
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x91C Offset: 0x91C VA: 0x91C
public struct PostLateUpdate.ProcessWebSendMessages // TypeDefIndex: 1828
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x91D Offset: 0x91D VA: 0x91D
public struct PostLateUpdate.SortingGroupsUpdate // TypeDefIndex: 1829
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x91E Offset: 0x91E VA: 0x91E
public struct PostLateUpdate.UpdateVideoTextures // TypeDefIndex: 1830
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x91F Offset: 0x91F VA: 0x91F
public struct PostLateUpdate.DirectorRenderImage // TypeDefIndex: 1831
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x920 Offset: 0x920 VA: 0x920
public struct PostLateUpdate.PlayerEmitCanvasGeometry // TypeDefIndex: 1832
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x921 Offset: 0x921 VA: 0x921
public struct PostLateUpdate.FinishFrameRendering // TypeDefIndex: 1833
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x922 Offset: 0x922 VA: 0x922
public struct PostLateUpdate.BatchModeUpdate // TypeDefIndex: 1834
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x923 Offset: 0x923 VA: 0x923
public struct PostLateUpdate.PlayerSendFrameComplete // TypeDefIndex: 1835
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x924 Offset: 0x924 VA: 0x924
public struct PostLateUpdate.UpdateCaptureScreenshot // TypeDefIndex: 1836
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x925 Offset: 0x925 VA: 0x925
public struct PostLateUpdate.PresentAfterDraw // TypeDefIndex: 1837
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x926 Offset: 0x926 VA: 0x926
public struct PostLateUpdate.ClearImmediateRenderers // TypeDefIndex: 1838
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x927 Offset: 0x927 VA: 0x927
public struct PostLateUpdate.XRPostPresent // TypeDefIndex: 1839
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x928 Offset: 0x928 VA: 0x928
public struct PostLateUpdate.UpdateResolution // TypeDefIndex: 1840
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x929 Offset: 0x929 VA: 0x929
public struct PostLateUpdate.InputEndFrame // TypeDefIndex: 1841
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x92A Offset: 0x92A VA: 0x92A
public struct PostLateUpdate.GUIClearEvents // TypeDefIndex: 1842
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x92B Offset: 0x92B VA: 0x92B
public struct PostLateUpdate.ShaderHandleErrors // TypeDefIndex: 1843
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x92C Offset: 0x92C VA: 0x92C
public struct PostLateUpdate.ResetInputAxis // TypeDefIndex: 1844
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x92D Offset: 0x92D VA: 0x92D
public struct PostLateUpdate.ThreadedLoadingDebug // TypeDefIndex: 1845
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x92E Offset: 0x92E VA: 0x92E
public struct PostLateUpdate.ProfilerSynchronizeStats // TypeDefIndex: 1846
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x92F Offset: 0x92F VA: 0x92F
public struct PostLateUpdate.MemoryFrameMaintenance // TypeDefIndex: 1847
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x930 Offset: 0x930 VA: 0x930
public struct PostLateUpdate.ExecuteGameCenterCallbacks // TypeDefIndex: 1848
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x931 Offset: 0x931 VA: 0x931
public struct PostLateUpdate.ProfilerEndFrame // TypeDefIndex: 1849
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x932 Offset: 0x932 VA: 0x932
public struct PostLateUpdate.PlayerSendFramePostPresent // TypeDefIndex: 1850
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x933 Offset: 0x933 VA: 0x933
public struct PostLateUpdate.PhysicsSkinnedClothBeginUpdate // TypeDefIndex: 1851
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x934 Offset: 0x934 VA: 0x934
public struct PostLateUpdate.PhysicsSkinnedClothFinishUpdate // TypeDefIndex: 1852
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x935 Offset: 0x935 VA: 0x935
public struct PostLateUpdate.TriggerEndOfFrameCallbacks // TypeDefIndex: 1853
{}

// Namespace: UnityEngine.Experimental.LowLevel
[NativeTypeAttribute] // RVA: 0x936 Offset: 0x936 VA: 0x936
[RequiredByNativeCodeAttribute] // RVA: 0x936 Offset: 0x936 VA: 0x936
internal struct PlayerLoopSystemInternal // TypeDefIndex: 1854
{
	// Fields
	public Type type; // 0x0
	public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x4
	public IntPtr updateFunction; // 0x8
	public IntPtr loopConditionFunction; // 0xC
	public int numSubSystems; // 0x10
}

// Namespace: UnityEngine.Experimental.LowLevel
public struct PlayerLoopSystem // TypeDefIndex: 1855
{
	// Fields
	public Type type; // 0x0
	public PlayerLoopSystem[] subSystemList; // 0x4
	public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x8
	public IntPtr updateFunction; // 0xC
	public IntPtr loopConditionFunction; // 0x10
}

// Namespace: 
public sealed class PlayerLoopSystem.UpdateFunction : MulticastDelegate // TypeDefIndex: 1856
{
	// Methods

	// RVA: 0x34F Offset: 0x34F VA: 0x34F
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x67A Offset: 0x67A VA: 0x67A Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA0E Offset: 0xA0E VA: 0xA0E Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x4F3 Offset: 0x4F3 VA: 0x4F3 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x937 Offset: 0x937 VA: 0x937
public abstract class PropertyAttribute : Attribute // TypeDefIndex: 1857
{
	// Methods

	// RVA: 0x6C6 Offset: 0x6C6 VA: 0x6C6
	protected void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x938 Offset: 0x938 VA: 0x938
public class TooltipAttribute : PropertyAttribute // TypeDefIndex: 1858
{
	// Fields
	public readonly string tooltip; // 0x8

	// Methods

	// RVA: 0x593 Offset: 0x593 VA: 0x593
	public void .ctor(string tooltip) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x939 Offset: 0x939 VA: 0x939
public class SpaceAttribute : PropertyAttribute // TypeDefIndex: 1859
{
	// Fields
	public readonly float height; // 0x8

	// Methods

	// RVA: 0x6DA Offset: 0x6DA VA: 0x6DA
	public void .ctor() { }

	// RVA: 0x15 Offset: 0x15 VA: 0x15
	public void .ctor(float height) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x93A Offset: 0x93A VA: 0x93A
public sealed class RangeAttribute : PropertyAttribute // TypeDefIndex: 1860
{
	// Fields
	public readonly float min; // 0x8
	public readonly float max; // 0xC

	// Methods

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(float min, float max) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x93B Offset: 0x93B VA: 0x93B
public sealed class TextAreaAttribute : PropertyAttribute // TypeDefIndex: 1861
{
	// Fields
	public readonly int minLines; // 0x8
	public readonly int maxLines; // 0xC

	// Methods

	// RVA: 0x36D Offset: 0x36D VA: 0x36D
	public void .ctor(int minLines, int maxLines) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x93C Offset: 0x93C VA: 0x93C
internal class PropertyNameUtils // TypeDefIndex: 1862
{
	// Methods

	[FreeFunctionAttribute] // RVA: 0xAA6 Offset: 0xAA6 VA: 0xAA6
	// RVA: 0xAD0 Offset: 0xAD0 VA: 0xAD0
	public static PropertyName PropertyNameFromString(string name) { }

	// RVA: 0x539 Offset: 0x539 VA: 0x539
	private static void PropertyNameFromString_Injected(string name, out PropertyName ret) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x93D Offset: 0x93D VA: 0x93D
public struct PropertyName : IEquatable<PropertyName> // TypeDefIndex: 1863
{
	// Fields
	internal int id; // 0x0

	// Methods

	// RVA: 0x536 Offset: 0x536 VA: 0x536
	public void .ctor(string name) { }

	// RVA: 0x537 Offset: 0x537 VA: 0x537
	public void .ctor(PropertyName other) { }

	// RVA: 0x538 Offset: 0x538 VA: 0x538
	public void .ctor(int id) { }

	// RVA: 0x59B Offset: 0x59B VA: 0x59B
	public static bool op_Equality(PropertyName lhs, PropertyName rhs) { }

	// RVA: 0xACC Offset: 0xACC VA: 0xACC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x59C Offset: 0x59C VA: 0x59C Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x59D Offset: 0x59D VA: 0x59D Slot: 4
	public bool Equals(PropertyName other) { }

	// RVA: 0xACD Offset: 0xACD VA: 0xACD
	public static PropertyName op_Implicit(string name) { }

	// RVA: 0xACE Offset: 0xACE VA: 0xACE
	public static PropertyName op_Implicit(int id) { }

	// RVA: 0xACF Offset: 0xACF VA: 0xACF Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
public struct RangeInt // TypeDefIndex: 1864
{
	// Fields
	public int start; // 0x0
	public int length; // 0x4

	// Properties
	public int end { get; }

	// Methods

	// RVA: 0x365 Offset: 0x365 VA: 0x365
	public void .ctor(int start, int length) { }

	// RVA: 0xAD3 Offset: 0xAD3 VA: 0xAD3
	public int get_end() { }
}

// Namespace: UnityEngine
public struct Ray // TypeDefIndex: 1865
{
	// Fields
	private Vector3 m_Origin; // 0x0
	private Vector3 m_Direction; // 0xC

	// Properties
	public Vector3 origin { get; }
	public Vector3 direction { get; }

	// Methods

	// RVA: 0x366 Offset: 0x366 VA: 0x366
	public void .ctor(Vector3 origin, Vector3 direction) { }

	// RVA: 0x53C Offset: 0x53C VA: 0x53C
	public Vector3 get_origin() { }

	// RVA: 0x53D Offset: 0x53D VA: 0x53D
	public Vector3 get_direction() { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public Vector3 GetPoint(float distance) { }

	// RVA: 0xAD4 Offset: 0xAD4 VA: 0xAD4 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x93E Offset: 0x93E VA: 0x93E
[NativeClassAttribute] // RVA: 0x93E Offset: 0x93E VA: 0x93E
[NativeHeaderAttribute] // RVA: 0x93E Offset: 0x93E VA: 0x93E
public struct Rect : IEquatable<Rect> // TypeDefIndex: 1866
{
	// Fields
	[NativeNameAttribute] // RVA: 0x9CF Offset: 0x9CF VA: 0x9CF
	private float m_XMin; // 0x0
	[NativeNameAttribute] // RVA: 0x9D0 Offset: 0x9D0 VA: 0x9D0
	private float m_YMin; // 0x4
	[NativeNameAttribute] // RVA: 0x9D1 Offset: 0x9D1 VA: 0x9D1
	private float m_Width; // 0x8
	[NativeNameAttribute] // RVA: 0x9D2 Offset: 0x9D2 VA: 0x9D2
	private float m_Height; // 0xC

	// Properties
	public static Rect zero { get; }
	public float x { get; set; }
	public float y { get; set; }
	public Vector2 position { get; }
	public Vector2 center { get; }
	public Vector2 min { get; }
	public Vector2 max { get; }
	public float width { get; set; }
	public float height { get; set; }
	public Vector2 size { get; }
	public float xMin { get; set; }
	public float yMin { get; set; }
	public float xMax { get; set; }
	public float yMax { get; set; }

	// Methods

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public void .ctor(float x, float y, float width, float height) { }

	// RVA: 0x367 Offset: 0x367 VA: 0x367
	public void .ctor(Vector2 position, Vector2 size) { }

	[CompilerGeneratedAttribute] // RVA: 0xAA7 Offset: 0xAA7 VA: 0xAA7
	// RVA: 0x6C7 Offset: 0x6C7 VA: 0x6C7
	public static Rect get_zero() { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	public float get_x() { }

	// RVA: 0xD Offset: 0xD VA: 0xD
	public void set_x(float value) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	public float get_y() { }

	// RVA: 0xE Offset: 0xE VA: 0xE
	public void set_y(float value) { }

	// RVA: 0x53E Offset: 0x53E VA: 0x53E
	public Vector2 get_position() { }

	// RVA: 0x53F Offset: 0x53F VA: 0x53F
	public Vector2 get_center() { }

	// RVA: 0x540 Offset: 0x540 VA: 0x540
	public Vector2 get_min() { }

	// RVA: 0x541 Offset: 0x541 VA: 0x541
	public Vector2 get_max() { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	public float get_width() { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public void set_width(float value) { }

	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public float get_height() { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public void set_height(float value) { }

	// RVA: 0x542 Offset: 0x542 VA: 0x542
	public Vector2 get_size() { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public float get_xMin() { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public void set_xMin(float value) { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	public float get_yMin() { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12
	public void set_yMin(float value) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	public float get_xMax() { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public void set_xMax(float value) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	public float get_yMax() { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	public void set_yMax(float value) { }

	// RVA: 0x5A2 Offset: 0x5A2 VA: 0x5A2
	public bool Contains(Vector3 point) { }

	// RVA: 0x543 Offset: 0x543 VA: 0x543
	private static Rect OrderMinMax(Rect rect) { }

	// RVA: 0x5A3 Offset: 0x5A3 VA: 0x5A3
	public bool Overlaps(Rect other) { }

	// RVA: 0xA1C Offset: 0xA1C VA: 0xA1C
	public bool Overlaps(Rect other, bool allowInverse) { }

	// RVA: 0x5A4 Offset: 0x5A4 VA: 0x5A4
	public static bool op_Inequality(Rect lhs, Rect rhs) { }

	// RVA: 0x5A5 Offset: 0x5A5 VA: 0x5A5
	public static bool op_Equality(Rect lhs, Rect rhs) { }

	// RVA: 0xAD5 Offset: 0xAD5 VA: 0xAD5 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5A6 Offset: 0x5A6 VA: 0x5A6 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x5A7 Offset: 0x5A7 VA: 0x5A7 Slot: 4
	public bool Equals(Rect other) { }

	// RVA: 0xAD6 Offset: 0xAD6 VA: 0xAD6 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x93F Offset: 0x93F VA: 0x93F
public sealed class ReflectionProbe : Behaviour // TypeDefIndex: 1867
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3
	[CompilerGeneratedAttribute] // RVA: 0x9D3 Offset: 0x9D3 VA: 0x9D3
	private static Action<ReflectionProbe, ReflectionProbe.ReflectionProbeEvent> reflectionProbeChanged; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	[CompilerGeneratedAttribute] // RVA: 0x9D4 Offset: 0x9D4 VA: 0x9D4
	private static Action<Cubemap> defaultReflectionSet; // 0x4

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAA8 Offset: 0xAA8 VA: 0xAA8
	// RVA: 0x561 Offset: 0x561 VA: 0x561
	private static void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbe.ReflectionProbeEvent probeEvent) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAA9 Offset: 0xAA9 VA: 0xAA9
	// RVA: 0x6CF Offset: 0x6CF VA: 0x6CF
	private static void CallSetDefaultReflection(Cubemap defaultReflectionCubemap) { }
}

// Namespace: 
public enum ReflectionProbe.ReflectionProbeEvent // TypeDefIndex: 1868
{
	// Fields
	public int value__; // 0x0
	public const ReflectionProbe.ReflectionProbeEvent ReflectionProbeAdded = 0;
	public const ReflectionProbe.ReflectionProbeEvent ReflectionProbeRemoved = 1;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x940 Offset: 0x940 VA: 0x940
public class ResourceRequest : AsyncOperation // TypeDefIndex: 1869
{
	// Fields
	internal string m_Path; // 0x10
	internal Type m_Type; // 0x14
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x941 Offset: 0x941 VA: 0x941
[NativeHeaderAttribute] // RVA: 0x941 Offset: 0x941 VA: 0x941
public sealed class Resources // TypeDefIndex: 1870
{
	// Methods

	[TypeInferenceRuleAttribute] // RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	[FreeFunctionAttribute] // RVA: 0xAAA Offset: 0xAAA VA: 0xAAA
	// RVA: 0x5A8 Offset: 0x5A8 VA: 0x5A8
	public static Object GetBuiltinResource(Type type, string path) { }

	// RVA: -1 Offset: -1
	public static T GetBuiltinResource<T>(string path) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB4 Offset: 0xDB4 VA: 0xDB4
	|-Resources.GetBuiltinResource<Font>
	|-Resources.GetBuiltinResource<object>
	*/
}

// Namespace: UnityEngine
public enum RuntimeInitializeLoadType // TypeDefIndex: 1871
{
	// Fields
	public int value__; // 0x0
	public const RuntimeInitializeLoadType AfterSceneLoad = 0;
	public const RuntimeInitializeLoadType BeforeSceneLoad = 1;
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x942 Offset: 0x942 VA: 0x942
public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute // TypeDefIndex: 1872
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5
	[CompilerGeneratedAttribute] // RVA: 0x9D5 Offset: 0x9D5 VA: 0x9D5
	private RuntimeInitializeLoadType <loadType>k__BackingField; // 0x8

	// Properties
	private RuntimeInitializeLoadType loadType { set; }

	// Methods

	// RVA: 0x56F Offset: 0x56F VA: 0x56F
	public void .ctor(RuntimeInitializeLoadType loadType) { }

	[CompilerGeneratedAttribute] // RVA: 0xAAB Offset: 0xAAB VA: 0xAAB
	// RVA: 0x570 Offset: 0x570 VA: 0x570
	private void set_loadType(RuntimeInitializeLoadType value) { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0x943 Offset: 0x943 VA: 0x943
[NativeHeaderAttribute] // RVA: 0x943 Offset: 0x943 VA: 0x943
[RequiredByNativeCodeAttribute] // RVA: 0x943 Offset: 0x943 VA: 0x943
[ExtensionOfNativeClassAttribute] // RVA: 0x943 Offset: 0x943 VA: 0x943
public class ScriptableObject : Object // TypeDefIndex: 1873
{
	// Methods

	// RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4
	public void .ctor() { }

	// RVA: 0xAEA Offset: 0xAEA VA: 0xAEA
	public static ScriptableObject CreateInstance(Type type) { }

	// RVA: -1 Offset: -1
	public static T CreateInstance<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B0 Offset: 0x2B0 VA: 0x2B0
	|-ScriptableObject.CreateInstance<object>
	|-ScriptableObject.CreateInstance<PlayerConnection>
	*/

	[NativeMethodAttribute] // RVA: 0xAAC Offset: 0xAAC VA: 0xAAC
	// RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5
	private static void CreateScriptableObject(ScriptableObject self) { }

	[FreeFunctionAttribute] // RVA: 0xAAD Offset: 0xAAD VA: 0xAAD
	// RVA: 0xAEB Offset: 0xAEB VA: 0xAEB
	private static ScriptableObject CreateScriptableObjectInstanceFromType(Type type) { }
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0x944 Offset: 0x944 VA: 0x944
[NativeHeaderAttribute] // RVA: 0x944 Offset: 0x944 VA: 0x944
[NativeTypeAttribute] // RVA: 0x944 Offset: 0x944 VA: 0x944
[NativeHeaderAttribute] // RVA: 0x944 Offset: 0x944 VA: 0x944
public struct ScriptableRenderContext // TypeDefIndex: 1874
{
	// Fields
	private IntPtr m_Ptr; // 0x0

	// Methods

	// RVA: 0x4F9 Offset: 0x4F9 VA: 0x4F9
	internal void .ctor(IntPtr ptr) { }

	// RVA: 0xA87 Offset: 0xA87 VA: 0xA87
	private int GetNumberOfCameras_Internal() { }

	// RVA: 0x565 Offset: 0x565 VA: 0x565
	private Camera GetCamera_Internal(int index) { }

	// RVA: 0xA88 Offset: 0xA88 VA: 0xA88
	internal int GetNumberOfCameras() { }

	// RVA: 0x566 Offset: 0x566 VA: 0x566
	internal Camera GetCamera(int index) { }

	// RVA: 0x680 Offset: 0x680 VA: 0x680
	internal void CheckValid() { }

	// RVA: 0xA89 Offset: 0xA89 VA: 0xA89
	private static int GetNumberOfCameras_Internal_Injected(ref ScriptableRenderContext _unity_self) { }

	// RVA: 0x567 Offset: 0x567 VA: 0x567
	private static Camera GetCamera_Internal_Injected(ref ScriptableRenderContext _unity_self, int index) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x945 Offset: 0x945 VA: 0x945
public class SelectionBaseAttribute : Attribute // TypeDefIndex: 1875
{
	// Methods

	// RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7
	public void .ctor() { }
}

// Namespace: UnityEngine
[ObsoleteAttribute] // RVA: 0x946 Offset: 0x946 VA: 0x946
[RequiredByNativeCodeAttribute] // RVA: 0x946 Offset: 0x946 VA: 0x946
public sealed class SerializePrivateVariables : Attribute // TypeDefIndex: 1876
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x947 Offset: 0x947 VA: 0x947
public sealed class SerializeField : Attribute // TypeDefIndex: 1877
{
	// Methods

	// RVA: 0x6D9 Offset: 0x6D9 VA: 0x6D9
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x948 Offset: 0x948 VA: 0x948
[RequiredByNativeCodeAttribute] // RVA: 0x948 Offset: 0x948 VA: 0x948
public sealed class PreferBinarySerialization : Attribute // TypeDefIndex: 1878
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x949 Offset: 0x949 VA: 0x949
public interface ISerializationCallbackReceiver // TypeDefIndex: 1879
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAAE Offset: 0xAAE VA: 0xAAE
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnBeforeSerialize() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAAF Offset: 0xAAF VA: 0xAAF
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnAfterDeserialize() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x94A Offset: 0x94A VA: 0x94A
[NativeHeaderAttribute] // RVA: 0x94A Offset: 0x94A VA: 0x94A
public sealed class ComputeShader : Object // TypeDefIndex: 1880
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	[NativeMethodAttribute] // RVA: 0xAB0 Offset: 0xAB0 VA: 0xAB0
	// RVA: 0x55D Offset: 0x55D VA: 0x55D
	public int FindKernel(string name) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x94B Offset: 0x94B VA: 0x94B
public struct SortingLayer // TypeDefIndex: 1881
{
	// Fields
	private int m_Id; // 0x0

	// Methods

	[FreeFunctionAttribute] // RVA: 0xAB1 Offset: 0xAB1 VA: 0xAB1
	// RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	public static int GetLayerValueFromID(int id) { }
}

// Namespace: UnityEngine
public static class StackTraceUtility // TypeDefIndex: 1882
{
	// Fields
	private static string projectFolder; // 0xFFFFFFFF

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAB2 Offset: 0xAB2 VA: 0xAB2
	// RVA: 0x6DC Offset: 0x6DC VA: 0x6DC
	internal static void SetProjectFolder(string folder) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAB3 Offset: 0xAB3 VA: 0xAB3
	// RVA: 0x271 Offset: 0x271 VA: 0x271
	public static string ExtractStackTrace() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAB4 Offset: 0xAB4 VA: 0xAB4
	// RVA: 0x36C Offset: 0x36C VA: 0x36C
	internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace) { }

	// RVA: 0xAF8 Offset: 0xAF8 VA: 0xAF8
	internal static string ExtractFormattedStackTrace(StackTrace stackTrace) { }

	// RVA: 0xF4B Offset: 0xF4B VA: 0xF4B
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x94C Offset: 0x94C VA: 0x94C
[Serializable]
public class UnityException : Exception // TypeDefIndex: 1883
{
	// Methods

	// RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5
	public void .ctor() { }

	// RVA: 0x5B5 Offset: 0x5B5 VA: 0x5B5
	public void .ctor(string message) { }
}

// Namespace: UnityEngine
public enum OperatingSystemFamily // TypeDefIndex: 1884
{
	// Fields
	public int value__; // 0x0
	public const OperatingSystemFamily Other = 0;
	public const OperatingSystemFamily MacOSX = 1;
	public const OperatingSystemFamily Windows = 2;
	public const OperatingSystemFamily Linux = 3;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x94D Offset: 0x94D VA: 0x94D
[NativeHeaderAttribute] // RVA: 0x94D Offset: 0x94D VA: 0x94D
[NativeHeaderAttribute] // RVA: 0x94D Offset: 0x94D VA: 0x94D
[NativeHeaderAttribute] // RVA: 0x94D Offset: 0x94D VA: 0x94D
[NativeHeaderAttribute] // RVA: 0x94D Offset: 0x94D VA: 0x94D
public sealed class SystemInfo // TypeDefIndex: 1885
{
	// Properties
	public static OperatingSystemFamily operatingSystemFamily { get; }

	// Methods

	// RVA: 0x272 Offset: 0x272 VA: 0x272
	public static OperatingSystemFamily get_operatingSystemFamily() { }

	// RVA: 0xAF9 Offset: 0xAF9 VA: 0xAF9
	private static bool IsValidEnumValue(Enum value) { }

	// RVA: 0xAFA Offset: 0xAFA VA: 0xAFA
	public static bool SupportsRenderTextureFormat(RenderTextureFormat format) { }

	// RVA: 0xAFB Offset: 0xAFB VA: 0xAFB
	public static bool SupportsTextureFormat(TextureFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAB5 Offset: 0xAB5 VA: 0xAB5
	// RVA: 0x273 Offset: 0x273 VA: 0x273
	private static OperatingSystemFamily GetOperatingSystemFamily() { }

	[FreeFunctionAttribute] // RVA: 0xAB6 Offset: 0xAB6 VA: 0xAB6
	// RVA: 0xAFC Offset: 0xAFC VA: 0xAFC
	private static bool HasRenderTextureNative(RenderTextureFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAB7 Offset: 0xAB7 VA: 0xAB7
	// RVA: 0xAFD Offset: 0xAFD VA: 0xAFD
	private static bool SupportsTextureFormatNative(TextureFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xAB8 Offset: 0xAB8 VA: 0xAB8
	// RVA: 0x5AB Offset: 0x5AB VA: 0x5AB
	public static bool IsFormatSupported(GraphicsFormat format, FormatUsage usage) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x94E Offset: 0x94E VA: 0x94E
[UsedByNativeCodeAttribute] // RVA: 0x94E Offset: 0x94E VA: 0x94E
[NativeHeaderAttribute] // RVA: 0x94E Offset: 0x94E VA: 0x94E
public class Texture : Object // TypeDefIndex: 1886
{
	// Properties
	public virtual int width { get; set; }
	public virtual int height { get; set; }
	public virtual bool isReadable { get; }
	public TextureWrapMode wrapMode { get; }
	public Vector2 texelSize { get; }

	// Methods

	// RVA: 0x6DD Offset: 0x6DD VA: 0x6DD
	protected void .ctor() { }

	// RVA: 0xAFE Offset: 0xAFE VA: 0xAFE
	private int GetDataWidth() { }

	// RVA: 0xAFF Offset: 0xAFF VA: 0xAFF
	private int GetDataHeight() { }

	// RVA: 0xB00 Offset: 0xB00 VA: 0xB00 Slot: 4
	public virtual int get_width() { }

	// RVA: 0x58F Offset: 0x58F VA: 0x58F Slot: 5
	public virtual void set_width(int value) { }

	// RVA: 0xB01 Offset: 0xB01 VA: 0xB01 Slot: 6
	public virtual int get_height() { }

	// RVA: 0x590 Offset: 0x590 VA: 0x590 Slot: 7
	public virtual void set_height(int value) { }

	// RVA: 0xB02 Offset: 0xB02 VA: 0xB02 Slot: 8
	public virtual bool get_isReadable() { }

	[NativeNameAttribute] // RVA: 0xAB9 Offset: 0xAB9 VA: 0xAB9
	// RVA: 0xB03 Offset: 0xB03 VA: 0xB03
	public TextureWrapMode get_wrapMode() { }

	[NativeNameAttribute] // RVA: 0xABA Offset: 0xABA VA: 0xABA
	// RVA: 0x591 Offset: 0x591 VA: 0x591
	public Vector2 get_texelSize() { }

	// RVA: 0x5AC Offset: 0x5AC VA: 0x5AC
	internal bool ValidateFormat(RenderTextureFormat format) { }

	// RVA: 0x5AD Offset: 0x5AD VA: 0x5AD
	internal bool ValidateFormat(TextureFormat format) { }

	// RVA: 0xA1E Offset: 0xA1E VA: 0xA1E
	internal bool ValidateFormat(GraphicsFormat format, FormatUsage usage) { }

	// RVA: 0x5AE Offset: 0x5AE VA: 0x5AE
	internal UnityException CreateNonReadableException(Texture t) { }

	// RVA: 0x592 Offset: 0x592 VA: 0x592
	private void get_texelSize_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x94F Offset: 0x94F VA: 0x94F
[NativeHeaderAttribute] // RVA: 0x94F Offset: 0x94F VA: 0x94F
[NativeHeaderAttribute] // RVA: 0x94F Offset: 0x94F VA: 0x94F
public sealed class Texture2D : Texture // TypeDefIndex: 1887
{
	// Properties
	public TextureFormat format { get; }
	[StaticAccessorAttribute] // RVA: 0xB6A Offset: 0xB6A VA: 0xB6A
	public static Texture2D whiteTexture { get; }
	public override bool isReadable { get; }

	// Methods

	[NativeNameAttribute] // RVA: 0xABB Offset: 0xABB VA: 0xABB
	// RVA: 0xB04 Offset: 0xB04 VA: 0xB04
	public TextureFormat get_format() { }

	// RVA: 0x274 Offset: 0x274 VA: 0x274
	public static Texture2D get_whiteTexture() { }

	// RVA: 0xB05 Offset: 0xB05 VA: 0xB05 Slot: 8
	public override bool get_isReadable() { }

	[NativeNameAttribute] // RVA: 0xABC Offset: 0xABC VA: 0xABC
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private Color GetPixelBilinearImpl(int image, float x, float y) { }

	[FreeFunctionAttribute] // RVA: 0xABD Offset: 0xABD VA: 0xABD
	// RVA: 0xB06 Offset: 0xB06 VA: 0xB06
	public byte[] GetRawTextureData() { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public Color GetPixelBilinear(float x, float y) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private void GetPixelBilinearImpl_Injected(int image, float x, float y, out Color ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x950 Offset: 0x950 VA: 0x950
[ExcludeFromPresetAttribute] // RVA: 0x950 Offset: 0x950 VA: 0x950
public sealed class Cubemap : Texture // TypeDefIndex: 1888
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xABE Offset: 0xABE VA: 0xABE
	// RVA: 0xF9 Offset: 0xF9 VA: 0xF9
	public void .ctor(int width, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	internal void .ctor(int width, TextureFormat textureFormat, bool mipChain, IntPtr nativeTex) { }

	// RVA: 0xFA Offset: 0xFA VA: 0xFA
	public void .ctor(int width, TextureFormat textureFormat, bool mipChain) { }

	[FreeFunctionAttribute] // RVA: 0xABF Offset: 0xABF VA: 0xABF
	// RVA: 0x86 Offset: 0x86 VA: 0x86
	private static bool Internal_CreateImpl(Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }

	// RVA: 0x75 Offset: 0x75 VA: 0x75
	private static void Internal_Create(Cubemap mono, int ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }

	// RVA: 0xA6A Offset: 0xA6A VA: 0xA6A Slot: 8
	public override bool get_isReadable() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x951 Offset: 0x951 VA: 0x951
[ExcludeFromPresetAttribute] // RVA: 0x951 Offset: 0x951 VA: 0x951
public sealed class Texture3D : Texture // TypeDefIndex: 1889
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC0 Offset: 0xAC0 VA: 0xAC0
	// RVA: 0x37 Offset: 0x37 VA: 0x37
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain) { }

	// RVA: 0xB08 Offset: 0xB08 VA: 0xB08 Slot: 8
	public override bool get_isReadable() { }

	[FreeFunctionAttribute] // RVA: 0xAC1 Offset: 0xAC1 VA: 0xAC1
	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	private static bool Internal_CreateImpl(Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39
	private static void Internal_Create(Texture3D mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x952 Offset: 0x952 VA: 0x952
public sealed class Texture2DArray : Texture // TypeDefIndex: 1890
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC2 Offset: 0xAC2 VA: 0xAC2
	// RVA: 0x34 Offset: 0x34 VA: 0x34
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain, bool linear) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain) { }

	// RVA: 0xB07 Offset: 0xB07 VA: 0xB07 Slot: 8
	public override bool get_isReadable() { }

	[FreeFunctionAttribute] // RVA: 0xAC3 Offset: 0xAC3 VA: 0xAC3
	// RVA: 0x7A Offset: 0x7A VA: 0x7A
	private static bool Internal_CreateImpl(Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	private static void Internal_Create(Texture2DArray mono, int w, int h, int d, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x953 Offset: 0x953 VA: 0x953
public sealed class CubemapArray : Texture // TypeDefIndex: 1891
{
	// Properties
	public override bool isReadable { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC4 Offset: 0xAC4 VA: 0xAC4
	// RVA: 0x76 Offset: 0x76 VA: 0x76
	public void .ctor(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain, bool linear) { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain) { }

	// RVA: 0xA6B Offset: 0xA6B VA: 0xA6B Slot: 8
	public override bool get_isReadable() { }

	[FreeFunctionAttribute] // RVA: 0xAC5 Offset: 0xAC5 VA: 0xAC5
	// RVA: 0x87 Offset: 0x87 VA: 0x87
	private static bool Internal_CreateImpl(CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags) { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78
	private static void Internal_Create(CubemapArray mono, int ext, int count, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x954 Offset: 0x954 VA: 0x954
[NativeHeaderAttribute] // RVA: 0x954 Offset: 0x954 VA: 0x954
[NativeHeaderAttribute] // RVA: 0x954 Offset: 0x954 VA: 0x954
[NativeHeaderAttribute] // RVA: 0x954 Offset: 0x954 VA: 0x954
[UsedByNativeCodeAttribute] // RVA: 0x954 Offset: 0x954 VA: 0x954
public class RenderTexture : Texture // TypeDefIndex: 1892
{
	// Properties
	public override int width { get; set; }
	public override int height { get; set; }
	[NativePropertyAttribute] // RVA: 0xB6B Offset: 0xB6B VA: 0xB6B
	public RenderTextureFormat format { set; }
	public int depth { set; }
	public RenderTextureDescriptor descriptor { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAC6 Offset: 0xAC6 VA: 0xAC6
	// RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	protected internal void .ctor() { }

	// RVA: 0x562 Offset: 0x562 VA: 0x562
	public void .ctor(RenderTextureDescriptor desc) { }

	// RVA: 0x563 Offset: 0x563 VA: 0x563
	public void .ctor(RenderTexture textureToCopy) { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	public void .ctor(int width, int height, int depth, GraphicsFormat format) { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	public void .ctor(int width, int height, int depth, RenderTextureFormat format, RenderTextureReadWrite readWrite) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAC7 Offset: 0xAC7 VA: 0xAC7
	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	public void .ctor(int width, int height, int depth, RenderTextureFormat format) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAC8 Offset: 0xAC8 VA: 0xAC8
	// RVA: 0x103 Offset: 0x103 VA: 0x103
	public void .ctor(int width, int height, int depth) { }

	// RVA: 0xADE Offset: 0xADE VA: 0xADE Slot: 4
	public override int get_width() { }

	// RVA: 0x564 Offset: 0x564 VA: 0x564 Slot: 5
	public override void set_width(int value) { }

	// RVA: 0xADF Offset: 0xADF VA: 0xADF Slot: 6
	public override int get_height() { }

	// RVA: 0x565 Offset: 0x565 VA: 0x565 Slot: 7
	public override void set_height(int value) { }

	// RVA: 0x566 Offset: 0x566 VA: 0x566
	public void set_format(RenderTextureFormat value) { }

	// RVA: 0x567 Offset: 0x567 VA: 0x567
	internal void SetSRGBReadWrite(bool srgb) { }

	[FreeFunctionAttribute] // RVA: 0xAC9 Offset: 0xAC9 VA: 0xAC9
	// RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1
	private static void Internal_Create(RenderTexture rt) { }

	[NativeNameAttribute] // RVA: 0xACA Offset: 0xACA VA: 0xACA
	// RVA: 0x568 Offset: 0x568 VA: 0x568
	private void SetRenderTextureDescriptor(RenderTextureDescriptor desc) { }

	[NativeNameAttribute] // RVA: 0xACB Offset: 0xACB VA: 0xACB
	// RVA: 0x569 Offset: 0x569 VA: 0x569
	private RenderTextureDescriptor GetDescriptor() { }

	[FreeFunctionAttribute] // RVA: 0xACC Offset: 0xACC VA: 0xACC
	// RVA: 0x56A Offset: 0x56A VA: 0x56A
	public void set_depth(int value) { }

	// RVA: 0x56B Offset: 0x56B VA: 0x56B
	public RenderTextureDescriptor get_descriptor() { }

	// RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2
	private static void ValidateRenderTextureDesc(RenderTextureDescriptor desc) { }

	// RVA: 0x56C Offset: 0x56C VA: 0x56C
	private void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc) { }

	// RVA: 0x56D Offset: 0x56D VA: 0x56D
	private void GetDescriptor_Injected(out RenderTextureDescriptor ret) { }
}

// Namespace: UnityEngine
public struct RenderTextureDescriptor // TypeDefIndex: 1893
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6
	[DebuggerBrowsableAttribute] // RVA: 0x9D6 Offset: 0x9D6 VA: 0x9D6
	private int <width>k__BackingField; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7
	[DebuggerBrowsableAttribute] // RVA: 0x9D7 Offset: 0x9D7 VA: 0x9D7
	private int <height>k__BackingField; // 0x4
	[DebuggerBrowsableAttribute] // RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8
	[CompilerGeneratedAttribute] // RVA: 0x9D8 Offset: 0x9D8 VA: 0x9D8
	private int <msaaSamples>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9
	[CompilerGeneratedAttribute] // RVA: 0x9D9 Offset: 0x9D9 VA: 0x9D9
	private int <volumeDepth>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9DA Offset: 0x9DA VA: 0x9DA
	[DebuggerBrowsableAttribute] // RVA: 0x9DA Offset: 0x9DA VA: 0x9DA
	private RenderTextureFormat <colorFormat>k__BackingField; // 0x10
	private int _depthBufferBits; // 0x14
	private static int[] depthFormatBits; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0x9DB Offset: 0x9DB VA: 0x9DB
	[CompilerGeneratedAttribute] // RVA: 0x9DB Offset: 0x9DB VA: 0x9DB
	private TextureDimension <dimension>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0x9DC Offset: 0x9DC VA: 0x9DC
	[DebuggerBrowsableAttribute] // RVA: 0x9DC Offset: 0x9DC VA: 0x9DC
	private ShadowSamplingMode <shadowSamplingMode>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0x9DD Offset: 0x9DD VA: 0x9DD
	[DebuggerBrowsableAttribute] // RVA: 0x9DD Offset: 0x9DD VA: 0x9DD
	private VRTextureUsage <vrUsage>k__BackingField; // 0x20
	private RenderTextureCreationFlags _flags; // 0x24
	[DebuggerBrowsableAttribute] // RVA: 0x9DE Offset: 0x9DE VA: 0x9DE
	[CompilerGeneratedAttribute] // RVA: 0x9DE Offset: 0x9DE VA: 0x9DE
	private RenderTextureMemoryless <memoryless>k__BackingField; // 0x28

	// Properties
	public int width { get; }
	public int height { get; }
	public int msaaSamples { get; }
	public int volumeDepth { get; }
	public int depthBufferBits { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xACD Offset: 0xACD VA: 0xACD
	// RVA: 0xAE0 Offset: 0xAE0 VA: 0xAE0
	public int get_width() { }

	[CompilerGeneratedAttribute] // RVA: 0xACE Offset: 0xACE VA: 0xACE
	// RVA: 0xAE1 Offset: 0xAE1 VA: 0xAE1
	public int get_height() { }

	[CompilerGeneratedAttribute] // RVA: 0xACF Offset: 0xACF VA: 0xACF
	// RVA: 0xAE2 Offset: 0xAE2 VA: 0xAE2
	public int get_msaaSamples() { }

	[CompilerGeneratedAttribute] // RVA: 0xAD0 Offset: 0xAD0 VA: 0xAD0
	// RVA: 0xAE3 Offset: 0xAE3 VA: 0xAE3
	public int get_volumeDepth() { }

	// RVA: 0xAE4 Offset: 0xAE4 VA: 0xAE4
	public int get_depthBufferBits() { }

	// RVA: 0xF47 Offset: 0xF47 VA: 0xF47
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x955 Offset: 0x955 VA: 0x955
[StaticAccessorAttribute] // RVA: 0x955 Offset: 0x955 VA: 0x955
public class Time // TypeDefIndex: 1894
{
	// Properties
	public static float deltaTime { get; }
	public static float unscaledTime { get; }
	public static float unscaledDeltaTime { get; }
	[NativePropertyAttribute] // RVA: 0xB6C Offset: 0xB6C VA: 0xB6C
	public static float realtimeSinceStartup { get; }

	// Methods

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public static float get_deltaTime() { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	public static float get_unscaledTime() { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public static float get_unscaledDeltaTime() { }

	// RVA: 0xC Offset: 0xC VA: 0xC
	public static float get_realtimeSinceStartup() { }
}

// Namespace: UnityEngine
public enum TouchScreenKeyboardType // TypeDefIndex: 1895
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboardType Default = 0;
	public const TouchScreenKeyboardType ASCIICapable = 1;
	public const TouchScreenKeyboardType NumbersAndPunctuation = 2;
	public const TouchScreenKeyboardType URL = 3;
	public const TouchScreenKeyboardType NumberPad = 4;
	public const TouchScreenKeyboardType PhonePad = 5;
	public const TouchScreenKeyboardType NamePhonePad = 6;
	public const TouchScreenKeyboardType EmailAddress = 7;
	[ObsoleteAttribute] // RVA: 0x9DF Offset: 0x9DF VA: 0x9DF
	public const TouchScreenKeyboardType NintendoNetworkAccount = 8;
	public const TouchScreenKeyboardType Social = 9;
	public const TouchScreenKeyboardType Search = 10;
	public const TouchScreenKeyboardType DecimalPad = 11;
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x956 Offset: 0x956 VA: 0x956
public class TrackedReference // TypeDefIndex: 1896
{
	// Fields
	internal IntPtr m_Ptr; // 0x8

	// Methods

	// RVA: 0x5AF Offset: 0x5AF VA: 0x5AF
	public static bool op_Equality(TrackedReference x, TrackedReference y) { }

	// RVA: 0x5B0 Offset: 0x5B0 VA: 0x5B0 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xB11 Offset: 0xB11 VA: 0xB11 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x957 Offset: 0x957 VA: 0x957
internal sealed class UnhandledExceptionHandler // TypeDefIndex: 1897
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9E0 Offset: 0x9E0 VA: 0x9E0
	private static UnhandledExceptionEventHandler <>f__am$cache0; // 0xFFFFFFFF

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAD1 Offset: 0xAD1 VA: 0xAD1
	// RVA: 0xF4D Offset: 0xF4D VA: 0xF4D
	private static void RegisterUECatcher() { }

	[CompilerGeneratedAttribute] // RVA: 0xAD2 Offset: 0xAD2 VA: 0xAD2
	// RVA: 0x5B3 Offset: 0x5B3 VA: 0x5B3
	private static void <RegisterUECatcher>m__0(object sender, UnhandledExceptionEventArgs e) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0x958 Offset: 0x958 VA: 0x958
public class UnityAPICompatibilityVersionAttribute : Attribute // TypeDefIndex: 1898
{
	// Fields
	private string _version; // 0x8

	// Methods

	// RVA: 0x5B4 Offset: 0x5B4 VA: 0x5B4
	public void .ctor(string version) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x959 Offset: 0x959 VA: 0x959
public enum HideFlags // TypeDefIndex: 1899
{
	// Fields
	public int value__; // 0x0
	public const HideFlags None = 0;
	public const HideFlags HideInHierarchy = 1;
	public const HideFlags HideInInspector = 2;
	public const HideFlags DontSaveInEditor = 4;
	public const HideFlags NotEditable = 8;
	public const HideFlags DontSaveInBuild = 16;
	public const HideFlags DontUnloadUnusedAsset = 32;
	public const HideFlags DontSave = 52;
	public const HideFlags HideAndDontSave = 61;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x95A Offset: 0x95A VA: 0x95A
[RequiredByNativeCodeAttribute] // RVA: 0x95A Offset: 0x95A VA: 0x95A
[NativeHeaderAttribute] // RVA: 0x95A Offset: 0x95A VA: 0x95A
[NativeHeaderAttribute] // RVA: 0x95A Offset: 0x95A VA: 0x95A
public class Object // TypeDefIndex: 1900
{
	// Fields
	private IntPtr m_CachedPtr; // 0x8
	internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x0
	private const string objectIsNullMessage = "The Object you want to instantiate is null.";
	private const string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake.";

	// Properties
	public string name { get; set; }
	public HideFlags hideFlags { set; }

	// Methods

	// RVA: 0x6B6 Offset: 0x6B6 VA: 0x6B6
	public void .ctor() { }

	// RVA: 0xAB8 Offset: 0xAB8 VA: 0xAB8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x58D Offset: 0x58D VA: 0x58D Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xAB9 Offset: 0xAB9 VA: 0xAB9
	public static bool op_Implicit(Object exists) { }

	// RVA: 0x58E Offset: 0x58E VA: 0x58E
	private static bool CompareBaseObjects(Object lhs, Object rhs) { }

	// RVA: 0xABA Offset: 0xABA VA: 0xABA
	private static bool IsNativeObjectAlive(Object o) { }

	// RVA: 0xABB Offset: 0xABB VA: 0xABB
	private IntPtr GetCachedPtr() { }

	// RVA: 0xABC Offset: 0xABC VA: 0xABC
	public string get_name() { }

	// RVA: 0x525 Offset: 0x525 VA: 0x525
	public void set_name(string value) { }

	// RVA: -1 Offset: -1
	public static T Instantiate<T>(T original) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB5 Offset: 0xDB5 VA: 0xDB5
	|-Object.Instantiate<GameObject>
	|-Object.Instantiate<Dropdown.DropdownItem>
	|-Object.Instantiate<object>
	*/

	[NativeMethodAttribute] // RVA: 0xAD3 Offset: 0xAD3 VA: 0xAD3
	// RVA: 0xC Offset: 0xC VA: 0xC
	public static void Destroy(Object obj, float t) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAD4 Offset: 0xAD4 VA: 0xAD4
	// RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	public static void Destroy(Object obj) { }

	[NativeMethodAttribute] // RVA: 0xAD5 Offset: 0xAD5 VA: 0xAD5
	// RVA: 0x526 Offset: 0x526 VA: 0x526
	public static void DestroyImmediate(Object obj, bool allowDestroyingAssets) { }

	[ExcludeFromDocsAttribute] // RVA: 0xAD6 Offset: 0xAD6 VA: 0xAD6
	// RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8
	public static void DestroyImmediate(Object obj) { }

	// RVA: 0x527 Offset: 0x527 VA: 0x527
	public void set_hideFlags(HideFlags value) { }

	// RVA: 0x528 Offset: 0x528 VA: 0x528
	private static void CheckNullArgument(object arg, string message) { }

	// RVA: 0xABD Offset: 0xABD VA: 0xABD Slot: 3
	public override string ToString() { }

	// RVA: 0x58F Offset: 0x58F VA: 0x58F
	public static bool op_Equality(Object x, Object y) { }

	// RVA: 0x590 Offset: 0x590 VA: 0x590
	public static bool op_Inequality(Object x, Object y) { }

	[FreeFunctionAttribute] // RVA: 0xAD7 Offset: 0xAD7 VA: 0xAD7
	// RVA: 0xABE Offset: 0xABE VA: 0xABE
	private static Object Internal_CloneSingle(Object data) { }

	[FreeFunctionAttribute] // RVA: 0xAD8 Offset: 0xAD8 VA: 0xAD8
	// RVA: 0xABF Offset: 0xABF VA: 0xABF
	private static string ToString(Object obj) { }

	[FreeFunctionAttribute] // RVA: 0xAD9 Offset: 0xAD9 VA: 0xAD9
	// RVA: 0xAC0 Offset: 0xAC0 VA: 0xAC0
	private static string GetName(Object obj) { }

	[FreeFunctionAttribute] // RVA: 0xADA Offset: 0xADA VA: 0xADA
	// RVA: 0x529 Offset: 0x529 VA: 0x529
	private static void SetName(Object obj, string name) { }

	[FreeFunctionAttribute] // RVA: 0xADB Offset: 0xADB VA: 0xADB
	[VisibleToOtherModulesAttribute] // RVA: 0xADB Offset: 0xADB VA: 0xADB
	// RVA: 0xAC1 Offset: 0xAC1 VA: 0xAC1
	internal static Object FindObjectFromInstanceID(int instanceID) { }

	// RVA: 0xF3D Offset: 0xF3D VA: 0xF3D
	private static void .cctor() { }
}

// Namespace: UnityEngine.Events
[Serializable]
public enum PersistentListenerMode // TypeDefIndex: 1901
{
	// Fields
	public int value__; // 0x0
	public const PersistentListenerMode EventDefined = 0;
	public const PersistentListenerMode Void = 1;
	public const PersistentListenerMode Object = 2;
	public const PersistentListenerMode Int = 3;
	public const PersistentListenerMode Float = 4;
	public const PersistentListenerMode String = 5;
	public const PersistentListenerMode Bool = 6;
}

// Namespace: UnityEngine.Events
[Serializable]
internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 1902
{
	// Fields
	[SerializeField] // RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1
	[FormerlySerializedAsAttribute] // RVA: 0x9E1 Offset: 0x9E1 VA: 0x9E1
	private Object m_ObjectArgument; // 0x8
	[SerializeField] // RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2
	[FormerlySerializedAsAttribute] // RVA: 0x9E2 Offset: 0x9E2 VA: 0x9E2
	private string m_ObjectArgumentAssemblyTypeName; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3
	[SerializeField] // RVA: 0x9E3 Offset: 0x9E3 VA: 0x9E3
	private int m_IntArgument; // 0x10
	[SerializeField] // RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4
	[FormerlySerializedAsAttribute] // RVA: 0x9E4 Offset: 0x9E4 VA: 0x9E4
	private float m_FloatArgument; // 0x14
	[SerializeField] // RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5
	[FormerlySerializedAsAttribute] // RVA: 0x9E5 Offset: 0x9E5 VA: 0x9E5
	private string m_StringArgument; // 0x18
	[SerializeField] // RVA: 0x9E6 Offset: 0x9E6 VA: 0x9E6
	private bool m_BoolArgument; // 0x1C

	// Properties
	public Object unityObjectArgument { get; }
	public string unityObjectArgumentAssemblyTypeName { get; }
	public int intArgument { get; }
	public float floatArgument { get; }
	public string stringArgument { get; }
	public bool boolArgument { get; }

	// Methods

	// RVA: 0x664 Offset: 0x664 VA: 0x664
	public void .ctor() { }

	// RVA: 0xA73 Offset: 0xA73 VA: 0xA73
	public Object get_unityObjectArgument() { }

	// RVA: 0xA74 Offset: 0xA74 VA: 0xA74
	public string get_unityObjectArgumentAssemblyTypeName() { }

	// RVA: 0xA75 Offset: 0xA75 VA: 0xA75
	public int get_intArgument() { }

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public float get_floatArgument() { }

	// RVA: 0xA76 Offset: 0xA76 VA: 0xA76
	public string get_stringArgument() { }

	// RVA: 0xA77 Offset: 0xA77 VA: 0xA77
	public bool get_boolArgument() { }

	// RVA: 0x665 Offset: 0x665 VA: 0x665
	private void TidyAssemblyTypeName() { }

	// RVA: 0x666 Offset: 0x666 VA: 0x666 Slot: 4
	public void OnBeforeSerialize() { }

	// RVA: 0x667 Offset: 0x667 VA: 0x667 Slot: 5
	public void OnAfterDeserialize() { }
}

// Namespace: UnityEngine.Events
internal abstract class BaseInvokableCall // TypeDefIndex: 1903
{
	// Methods

	// RVA: 0x668 Offset: 0x668 VA: 0x668
	protected void .ctor() { }

	// RVA: 0x349 Offset: 0x349 VA: 0x349
	protected void .ctor(object target, MethodInfo function) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Invoke(object[] args) { }

	// RVA: -1 Offset: -1
	protected static void ThrowOnInvalidArg<T>(object arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x94F Offset: 0x94F VA: 0x94F
	|-BaseInvokableCall.ThrowOnInvalidArg<bool>
	|
	|-RVA: 0x950 Offset: 0x950 VA: 0x950
	|-BaseInvokableCall.ThrowOnInvalidArg<int>
	|
	|-RVA: 0x905 Offset: 0x905 VA: 0x905
	|-BaseInvokableCall.ThrowOnInvalidArg<object>
	|
	|-RVA: 0x951 Offset: 0x951 VA: 0x951
	|-BaseInvokableCall.ThrowOnInvalidArg<float>
	|
	|-RVA: 0x952 Offset: 0x952 VA: 0x952
	|-BaseInvokableCall.ThrowOnInvalidArg<Color>
	|
	|-RVA: 0x953 Offset: 0x953 VA: 0x953
	|-BaseInvokableCall.ThrowOnInvalidArg<Vector2>
	*/

	// RVA: 0xA78 Offset: 0xA78 VA: 0xA78
	protected static bool AllowInvoke(Delegate delegate) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 1904
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7
	[DebuggerBrowsableAttribute] // RVA: 0x9E7 Offset: 0x9E7 VA: 0x9E7
	private UnityAction Delegate; // 0x8

	// Methods

	// RVA: 0x34A Offset: 0x34A VA: 0x34A
	public void .ctor(object target, MethodInfo theFunction) { }

	// RVA: 0x4EA Offset: 0x4EA VA: 0x4EA
	public void .ctor(UnityAction action) { }

	// RVA: 0x4EB Offset: 0x4EB VA: 0x4EB
	private void add_Delegate(UnityAction value) { }

	// RVA: 0x4EC Offset: 0x4EC VA: 0x4EC
	private void remove_Delegate(UnityAction value) { }

	// RVA: 0x4ED Offset: 0x4ED VA: 0x4ED Slot: 4
	public override void Invoke(object[] args) { }

	// RVA: 0x669 Offset: 0x669 VA: 0x669
	public void Invoke() { }

	// RVA: 0xA08 Offset: 0xA08 VA: 0xA08 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1> : BaseInvokableCall // TypeDefIndex: 1905
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	[DebuggerBrowsableAttribute] // RVA: 0x9E8 Offset: 0x9E8 VA: 0x9E8
	private UnityAction<T1> Delegate; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x99E Offset: 0x99E VA: 0x99E
	|-InvokableCall<bool>..ctor
	|
	|-RVA: 0x99F Offset: 0x99F VA: 0x99F
	|-InvokableCall<int>..ctor
	|
	|-RVA: 0x443 Offset: 0x443 VA: 0x443
	|-InvokableCall<object>..ctor
	|
	|-RVA: 0x9A0 Offset: 0x9A0 VA: 0x9A0
	|-InvokableCall<float>..ctor
	|
	|-RVA: 0x9A1 Offset: 0x9A1 VA: 0x9A1
	|-InvokableCall<Color>..ctor
	|
	|-RVA: 0x9A2 Offset: 0x9A2 VA: 0x9A2
	|-InvokableCall<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1
	public void .ctor(UnityAction<T1> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB68 Offset: 0xB68 VA: 0xB68
	|-InvokableCall<bool>..ctor
	|
	|-RVA: 0xB6D Offset: 0xB6D VA: 0xB6D
	|-InvokableCall<int>..ctor
	|
	|-RVA: 0x83E Offset: 0x83E VA: 0x83E
	|-InvokableCall<object>..ctor
	|
	|-RVA: 0xB72 Offset: 0xB72 VA: 0xB72
	|-InvokableCall<float>..ctor
	|
	|-RVA: 0xB76 Offset: 0xB76 VA: 0xB76
	|-InvokableCall<Color>..ctor
	|
	|-RVA: 0xB7B Offset: 0xB7B VA: 0xB7B
	|-InvokableCall<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1
	protected void add_Delegate(UnityAction<T1> value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB69 Offset: 0xB69 VA: 0xB69
	|-InvokableCall<bool>.add_Delegate
	|
	|-RVA: 0xB6E Offset: 0xB6E VA: 0xB6E
	|-InvokableCall<int>.add_Delegate
	|
	|-RVA: 0x83F Offset: 0x83F VA: 0x83F
	|-InvokableCall<object>.add_Delegate
	|
	|-RVA: 0xB73 Offset: 0xB73 VA: 0xB73
	|-InvokableCall<float>.add_Delegate
	|
	|-RVA: 0xB77 Offset: 0xB77 VA: 0xB77
	|-InvokableCall<Color>.add_Delegate
	|
	|-RVA: 0xB7C Offset: 0xB7C VA: 0xB7C
	|-InvokableCall<Vector2>.add_Delegate
	*/

	// RVA: -1 Offset: -1
	protected void remove_Delegate(UnityAction<T1> value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB6A Offset: 0xB6A VA: 0xB6A
	|-InvokableCall<bool>.remove_Delegate
	|
	|-RVA: 0xB6F Offset: 0xB6F VA: 0xB6F
	|-InvokableCall<int>.remove_Delegate
	|
	|-RVA: 0x840 Offset: 0x840 VA: 0x840
	|-InvokableCall<object>.remove_Delegate
	|
	|-RVA: 0xB74 Offset: 0xB74 VA: 0xB74
	|-InvokableCall<float>.remove_Delegate
	|
	|-RVA: 0xB78 Offset: 0xB78 VA: 0xB78
	|-InvokableCall<Color>.remove_Delegate
	|
	|-RVA: 0xB7D Offset: 0xB7D VA: 0xB7D
	|-InvokableCall<Vector2>.remove_Delegate
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB6B Offset: 0xB6B VA: 0xB6B
	|-InvokableCall<bool>.Invoke
	|
	|-RVA: 0xB70 Offset: 0xB70 VA: 0xB70
	|-InvokableCall<int>.Invoke
	|
	|-RVA: 0x841 Offset: 0x841 VA: 0x841
	|-InvokableCall<object>.Invoke
	|
	|-RVA: 0xB75 Offset: 0xB75 VA: 0xB75
	|-InvokableCall<float>.Invoke
	|
	|-RVA: 0xB79 Offset: 0xB79 VA: 0xB79
	|-InvokableCall<Color>.Invoke
	|
	|-RVA: 0xB7E Offset: 0xB7E VA: 0xB7E
	|-InvokableCall<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public virtual void Invoke(T1 args0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB6C Offset: 0xB6C VA: 0xB6C
	|-InvokableCall<bool>.Invoke
	|
	|-RVA: 0xB71 Offset: 0xB71 VA: 0xB71
	|-InvokableCall<int>.Invoke
	|
	|-RVA: 0x842 Offset: 0x842 VA: 0x842
	|-InvokableCall<object>.Invoke
	|
	|-RVA: 0x52 Offset: 0x52 VA: 0x52
	|-InvokableCall<float>.Invoke
	|
	|-RVA: 0xB7A Offset: 0xB7A VA: 0xB7A
	|-InvokableCall<Color>.Invoke
	|
	|-RVA: 0xB7F Offset: 0xB7F VA: 0xB7F
	|-InvokableCall<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAED Offset: 0xAED VA: 0xAED
	|-InvokableCall<bool>.Find
	|
	|-RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	|-InvokableCall<int>.Find
	|
	|-RVA: 0xA56 Offset: 0xA56 VA: 0xA56
	|-InvokableCall<object>.Find
	|
	|-RVA: 0xAEF Offset: 0xAEF VA: 0xAEF
	|-InvokableCall<float>.Find
	|
	|-RVA: 0xAF0 Offset: 0xAF0 VA: 0xAF0
	|-InvokableCall<Color>.Find
	|
	|-RVA: 0xAF1 Offset: 0xAF1 VA: 0xAF1
	|-InvokableCall<Vector2>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2> : BaseInvokableCall // TypeDefIndex: 1906
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	[CompilerGeneratedAttribute] // RVA: 0x9E9 Offset: 0x9E9 VA: 0x9E9
	private UnityAction<T1, T2> Delegate; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x444 Offset: 0x444 VA: 0x444
	|-InvokableCall<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x843 Offset: 0x843 VA: 0x843
	|-InvokableCall<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA57 Offset: 0xA57 VA: 0xA57
	|-InvokableCall<object, object>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2, T3> : BaseInvokableCall // TypeDefIndex: 1907
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9EA Offset: 0x9EA VA: 0x9EA
	[CompilerGeneratedAttribute] // RVA: 0x9EA Offset: 0x9EA VA: 0x9EA
	private UnityAction<T1, T2, T3> Delegate; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x445 Offset: 0x445 VA: 0x445
	|-InvokableCall<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x844 Offset: 0x844 VA: 0x844
	|-InvokableCall<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA58 Offset: 0xA58 VA: 0xA58
	|-InvokableCall<object, object, object>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2, T3, T4> : BaseInvokableCall // TypeDefIndex: 1908
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9EB Offset: 0x9EB VA: 0x9EB
	[DebuggerBrowsableAttribute] // RVA: 0x9EB Offset: 0x9EB VA: 0x9EB
	private UnityAction<T1, T2, T3, T4> Delegate; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x446 Offset: 0x446 VA: 0x446
	|-InvokableCall<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x845 Offset: 0x845 VA: 0x845
	|-InvokableCall<object, object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA59 Offset: 0xA59 VA: 0xA59
	|-InvokableCall<object, object, object, object>.Find
	*/
}

// Namespace: UnityEngine.Events
internal class CachedInvokableCall<T> : InvokableCall<T> // TypeDefIndex: 1909
{
	// Fields
	private readonly T m_Arg1; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(Object target, MethodInfo theFunction, T argument) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x13E Offset: 0x13E VA: 0x13E
	|-CachedInvokableCall<bool>..ctor
	|
	|-RVA: 0x13D Offset: 0x13D VA: 0x13D
	|-CachedInvokableCall<int>..ctor
	|
	|-RVA: 0x13A Offset: 0x13A VA: 0x13A
	|-CachedInvokableCall<object>..ctor
	|-CachedInvokableCall<string>..ctor
	|
	|-RVA: 0x5 Offset: 0x5 VA: 0x5
	|-CachedInvokableCall<float>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void Invoke(object[] args) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB63 Offset: 0xB63 VA: 0xB63
	|-CachedInvokableCall<bool>.Invoke
	|
	|-RVA: 0xB65 Offset: 0xB65 VA: 0xB65
	|-CachedInvokableCall<int>.Invoke
	|
	|-RVA: 0x846 Offset: 0x846 VA: 0x846
	|-CachedInvokableCall<object>.Invoke
	|
	|-RVA: 0xB67 Offset: 0xB67 VA: 0xB67
	|-CachedInvokableCall<float>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public override void Invoke(T arg0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB64 Offset: 0xB64 VA: 0xB64
	|-CachedInvokableCall<bool>.Invoke
	|
	|-RVA: 0xB66 Offset: 0xB66 VA: 0xB66
	|-CachedInvokableCall<int>.Invoke
	|
	|-RVA: 0x847 Offset: 0x847 VA: 0x847
	|-CachedInvokableCall<object>.Invoke
	|
	|-RVA: 0x51 Offset: 0x51 VA: 0x51
	|-CachedInvokableCall<float>.Invoke
	*/
}

// Namespace: UnityEngine.Events
public enum UnityEventCallState // TypeDefIndex: 1910
{
	// Fields
	public int value__; // 0x0
	public const UnityEventCallState Off = 0;
	public const UnityEventCallState EditorAndRuntime = 1;
	public const UnityEventCallState RuntimeOnly = 2;
}

// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCall // TypeDefIndex: 1911
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	[SerializeField] // RVA: 0x9EC Offset: 0x9EC VA: 0x9EC
	private Object m_Target; // 0x8
	[SerializeField] // RVA: 0x9ED Offset: 0x9ED VA: 0x9ED
	[FormerlySerializedAsAttribute] // RVA: 0x9ED Offset: 0x9ED VA: 0x9ED
	private string m_MethodName; // 0xC
	[SerializeField] // RVA: 0x9EE Offset: 0x9EE VA: 0x9EE
	[FormerlySerializedAsAttribute] // RVA: 0x9EE Offset: 0x9EE VA: 0x9EE
	private PersistentListenerMode m_Mode; // 0x10
	[SerializeField] // RVA: 0x9EF Offset: 0x9EF VA: 0x9EF
	[FormerlySerializedAsAttribute] // RVA: 0x9EF Offset: 0x9EF VA: 0x9EF
	private ArgumentCache m_Arguments; // 0x14
	[FormerlySerializedAsAttribute] // RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	[FormerlySerializedAsAttribute] // RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	[SerializeField] // RVA: 0x9F0 Offset: 0x9F0 VA: 0x9F0
	private UnityEventCallState m_CallState; // 0x18

	// Properties
	public Object target { get; }
	public string methodName { get; }
	public PersistentListenerMode mode { get; }
	public ArgumentCache arguments { get; }

	// Methods

	// RVA: 0x66C Offset: 0x66C VA: 0x66C
	public void .ctor() { }

	// RVA: 0xA7A Offset: 0xA7A VA: 0xA7A
	public Object get_target() { }

	// RVA: 0xA7B Offset: 0xA7B VA: 0xA7B
	public string get_methodName() { }

	// RVA: 0xA7C Offset: 0xA7C VA: 0xA7C
	public PersistentListenerMode get_mode() { }

	// RVA: 0xA7D Offset: 0xA7D VA: 0xA7D
	public ArgumentCache get_arguments() { }

	// RVA: 0xA7E Offset: 0xA7E VA: 0xA7E
	public bool IsValid() { }

	// RVA: 0x55E Offset: 0x55E VA: 0x55E
	public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent) { }

	// RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	private static BaseInvokableCall GetObjectCall(Object target, MethodInfo method, ArgumentCache arguments) { }
}

// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCallGroup // TypeDefIndex: 1912
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1
	[SerializeField] // RVA: 0x9F1 Offset: 0x9F1 VA: 0x9F1
	private List<PersistentCall> m_Calls; // 0x8

	// Methods

	// RVA: 0x66D Offset: 0x66D VA: 0x66D
	public void .ctor() { }

	// RVA: 0x34C Offset: 0x34C VA: 0x34C
	public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCallList // TypeDefIndex: 1913
{
	// Fields
	private readonly List<BaseInvokableCall> m_PersistentCalls; // 0x8
	private readonly List<BaseInvokableCall> m_RuntimeCalls; // 0xC
	private readonly List<BaseInvokableCall> m_ExecutingCalls; // 0x10
	private bool m_NeedsUpdate; // 0x14

	// Methods

	// RVA: 0x66A Offset: 0x66A VA: 0x66A
	public void .ctor() { }

	// RVA: 0x4EE Offset: 0x4EE VA: 0x4EE
	public void AddPersistentInvokableCall(BaseInvokableCall call) { }

	// RVA: 0x4EF Offset: 0x4EF VA: 0x4EF
	public void AddListener(BaseInvokableCall call) { }

	// RVA: 0x34B Offset: 0x34B VA: 0x34B
	public void RemoveListener(object targetObj, MethodInfo method) { }

	// RVA: 0x66B Offset: 0x66B VA: 0x66B
	public void ClearPersistent() { }

	// RVA: 0xA79 Offset: 0xA79 VA: 0xA79
	public List<BaseInvokableCall> PrepareInvoke() { }
}

// Namespace: UnityEngine.Events
[UsedByNativeCodeAttribute] // RVA: 0x95B Offset: 0x95B VA: 0x95B
[Serializable]
public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 1914
{
	// Fields
	private InvokableCallList m_Calls; // 0x8
	[FormerlySerializedAsAttribute] // RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2
	[SerializeField] // RVA: 0x9F2 Offset: 0x9F2 VA: 0x9F2
	private PersistentCallGroup m_PersistentCalls; // 0xC
	private bool m_CallsDirty; // 0x10

	// Methods

	// RVA: 0x671 Offset: 0x671 VA: 0x671
	protected void .ctor() { }

	// RVA: 0x672 Offset: 0x672 VA: 0x672 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }

	// RVA: 0x673 Offset: 0x673 VA: 0x673 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract MethodInfo FindMethod_Impl(string name, object targetObj) { }

	// RVA: -1 Offset: -1 Slot: 7
	internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }

	// RVA: 0x55F Offset: 0x55F VA: 0x55F
	internal MethodInfo FindMethod(PersistentCall call) { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88
	internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType) { }

	// RVA: 0x674 Offset: 0x674 VA: 0x674
	private void DirtyPersistentCalls() { }

	// RVA: 0x675 Offset: 0x675 VA: 0x675
	private void RebuildPersistentCallsIfNeeded() { }

	// RVA: 0x4F2 Offset: 0x4F2 VA: 0x4F2
	internal void AddCall(BaseInvokableCall call) { }

	// RVA: 0x34E Offset: 0x34E VA: 0x34E
	protected void RemoveListener(object targetObj, MethodInfo method) { }

	// RVA: 0xA80 Offset: 0xA80 VA: 0xA80
	internal List<BaseInvokableCall> PrepareInvoke() { }

	// RVA: 0xA81 Offset: 0xA81 VA: 0xA81 Slot: 3
	public override string ToString() { }

	// RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	public static MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes) { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction : MulticastDelegate // TypeDefIndex: 1915
{
	// Methods

	// RVA: 0x34D Offset: 0x34D VA: 0x34D
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x66E Offset: 0x66E VA: 0x66E Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA0A Offset: 0xA0A VA: 0xA0A Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x4F0 Offset: 0x4F0 VA: 0x4F0 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent : UnityEventBase // TypeDefIndex: 1916
{
	// Fields
	private object[] m_InvokeArray; // 0x14

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xADC Offset: 0xADC VA: 0xADC
	// RVA: 0x66F Offset: 0x66F VA: 0x66F
	public void .ctor() { }

	// RVA: 0x4F1 Offset: 0x4F1 VA: 0x4F1
	public void AddListener(UnityAction call) { }

	// RVA: 0xA0B Offset: 0xA0B VA: 0xA0B Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }

	// RVA: 0xA0C Offset: 0xA0C VA: 0xA0C Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }

	// RVA: 0xA7F Offset: 0xA7F VA: 0xA7F
	private static BaseInvokableCall GetDelegate(UnityAction action) { }

	// RVA: 0x670 Offset: 0x670 VA: 0x670
	public void Invoke() { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0> : MulticastDelegate // TypeDefIndex: 1917
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x47A Offset: 0x47A VA: 0x47A
	|-UnityAction<bool>..ctor
	|
	|-RVA: 0x447 Offset: 0x447 VA: 0x447
	|-UnityAction<List<IEventSystemHandler>>..ctor
	|-UnityAction<object>..ctor
	|-UnityAction<Component>..ctor
	|-UnityAction<MessageEventArgs>..ctor
	|-UnityAction<LayoutRebuilder>..ctor
	|
	|-RVA: 0x9A3 Offset: 0x9A3 VA: 0x9A3
	|-UnityAction<int>..ctor
	|
	|-RVA: 0x47B Offset: 0x47B VA: 0x47B
	|-UnityAction<float>..ctor
	|
	|-RVA: 0x47C Offset: 0x47C VA: 0x47C
	|-UnityAction<Color>..ctor
	|
	|-RVA: 0x9A4 Offset: 0x9A4 VA: 0x9A4
	|-UnityAction<Scene>..ctor
	|
	|-RVA: 0x9A5 Offset: 0x9A5 VA: 0x9A5
	|-UnityAction<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T0 arg0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB80 Offset: 0xB80 VA: 0xB80
	|-UnityAction<bool>.Invoke
	|
	|-RVA: 0x87A Offset: 0x87A VA: 0x87A
	|-UnityAction<int>.Invoke
	|
	|-RVA: 0x848 Offset: 0x848 VA: 0x848
	|-UnityAction<object>.Invoke
	|-UnityAction<Component>.Invoke
	|
	|-RVA: 0x53 Offset: 0x53 VA: 0x53
	|-UnityAction<float>.Invoke
	|
	|-RVA: 0xB84 Offset: 0xB84 VA: 0xB84
	|-UnityAction<Color>.Invoke
	|
	|-RVA: 0x87D Offset: 0x87D VA: 0x87D
	|-UnityAction<Scene>.Invoke
	|
	|-RVA: 0xB87 Offset: 0xB87 VA: 0xB87
	|-UnityAction<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x278 Offset: 0x278 VA: 0x278
	|-UnityAction<bool>.BeginInvoke
	|
	|-RVA: 0x279 Offset: 0x279 VA: 0x279
	|-UnityAction<int>.BeginInvoke
	|
	|-RVA: 0x163 Offset: 0x163 VA: 0x163
	|-UnityAction<object>.BeginInvoke
	|
	|-RVA: 0xC Offset: 0xC VA: 0xC
	|-UnityAction<float>.BeginInvoke
	|
	|-RVA: 0x27A Offset: 0x27A VA: 0x27A
	|-UnityAction<Color>.BeginInvoke
	|
	|-RVA: 0x27B Offset: 0x27B VA: 0x27B
	|-UnityAction<Scene>.BeginInvoke
	|
	|-RVA: 0x27C Offset: 0x27C VA: 0x27C
	|-UnityAction<Vector2>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB81 Offset: 0xB81 VA: 0xB81
	|-UnityAction<bool>.EndInvoke
	|
	|-RVA: 0xB82 Offset: 0xB82 VA: 0xB82
	|-UnityAction<int>.EndInvoke
	|
	|-RVA: 0x849 Offset: 0x849 VA: 0x849
	|-UnityAction<object>.EndInvoke
	|
	|-RVA: 0xB83 Offset: 0xB83 VA: 0xB83
	|-UnityAction<float>.EndInvoke
	|
	|-RVA: 0xB85 Offset: 0xB85 VA: 0xB85
	|-UnityAction<Color>.EndInvoke
	|
	|-RVA: 0xB86 Offset: 0xB86 VA: 0xB86
	|-UnityAction<Scene>.EndInvoke
	|
	|-RVA: 0xB88 Offset: 0xB88 VA: 0xB88
	|-UnityAction<Vector2>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0> : UnityEventBase // TypeDefIndex: 1918
{
	// Fields
	private object[] m_InvokeArray; // 0xFFFFFFFF

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xADD Offset: 0xADD VA: 0xADD
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x941 Offset: 0x941 VA: 0x941
	|-UnityEvent<bool>..ctor
	|
	|-RVA: 0x934 Offset: 0x934 VA: 0x934
	|-UnityEvent<int>..ctor
	|
	|-RVA: 0x906 Offset: 0x906 VA: 0x906
	|-UnityEvent<object>..ctor
	|-UnityEvent<string>..ctor
	|-UnityEvent<BaseEventData>..ctor
	|-UnityEvent<MessageEventArgs>..ctor
	|
	|-RVA: 0x93D Offset: 0x93D VA: 0x93D
	|-UnityEvent<float>..ctor
	|
	|-RVA: 0x93C Offset: 0x93C VA: 0x93C
	|-UnityEvent<Color>..ctor
	|
	|-RVA: 0x943 Offset: 0x943 VA: 0x943
	|-UnityEvent<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1
	public void AddListener(UnityAction<T0> call) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x890 Offset: 0x890 VA: 0x890
	|-UnityEvent<bool>.AddListener
	|
	|-RVA: 0x87B Offset: 0x87B VA: 0x87B
	|-UnityEvent<int>.AddListener
	|
	|-RVA: 0x84A Offset: 0x84A VA: 0x84A
	|-UnityEvent<object>.AddListener
	|-UnityEvent<MessageEventArgs>.AddListener
	|
	|-RVA: 0x88E Offset: 0x88E VA: 0x88E
	|-UnityEvent<float>.AddListener
	|
	|-RVA: 0x88D Offset: 0x88D VA: 0x88D
	|-UnityEvent<Color>.AddListener
	|
	|-RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
	|-UnityEvent<Vector2>.AddListener
	*/

	// RVA: -1 Offset: -1
	public void RemoveListener(UnityAction<T0> call) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
	|-UnityEvent<bool>.RemoveListener
	|
	|-RVA: 0xB8C Offset: 0xB8C VA: 0xB8C
	|-UnityEvent<int>.RemoveListener
	|
	|-RVA: 0x84B Offset: 0x84B VA: 0x84B
	|-UnityEvent<object>.RemoveListener
	|-UnityEvent<MessageEventArgs>.RemoveListener
	|
	|-RVA: 0x896 Offset: 0x896 VA: 0x896
	|-UnityEvent<float>.RemoveListener
	|
	|-RVA: 0xB8D Offset: 0xB8D VA: 0xB8D
	|-UnityEvent<Color>.RemoveListener
	|
	|-RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
	|-UnityEvent<Vector2>.RemoveListener
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAF2 Offset: 0xAF2 VA: 0xAF2
	|-UnityEvent<bool>.FindMethod_Impl
	|
	|-RVA: 0xAF4 Offset: 0xAF4 VA: 0xAF4
	|-UnityEvent<int>.FindMethod_Impl
	|
	|-RVA: 0xA5A Offset: 0xA5A VA: 0xA5A
	|-UnityEvent<object>.FindMethod_Impl
	|-UnityEvent<string>.FindMethod_Impl
	|-UnityEvent<BaseEventData>.FindMethod_Impl
	|-UnityEvent<MessageEventArgs>.FindMethod_Impl
	|
	|-RVA: 0xAF6 Offset: 0xAF6 VA: 0xAF6
	|-UnityEvent<float>.FindMethod_Impl
	|
	|-RVA: 0xAF8 Offset: 0xAF8 VA: 0xAF8
	|-UnityEvent<Color>.FindMethod_Impl
	|
	|-RVA: 0xAFA Offset: 0xAFA VA: 0xAFA
	|-UnityEvent<Vector2>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xAF3 Offset: 0xAF3 VA: 0xAF3
	|-UnityEvent<bool>.GetDelegate
	|
	|-RVA: 0xAF5 Offset: 0xAF5 VA: 0xAF5
	|-UnityEvent<int>.GetDelegate
	|
	|-RVA: 0xA5B Offset: 0xA5B VA: 0xA5B
	|-UnityEvent<object>.GetDelegate
	|-UnityEvent<string>.GetDelegate
	|-UnityEvent<BaseEventData>.GetDelegate
	|-UnityEvent<MessageEventArgs>.GetDelegate
	|
	|-RVA: 0xAF7 Offset: 0xAF7 VA: 0xAF7
	|-UnityEvent<float>.GetDelegate
	|
	|-RVA: 0xAF9 Offset: 0xAF9 VA: 0xAF9
	|-UnityEvent<Color>.GetDelegate
	|
	|-RVA: 0xAFB Offset: 0xAFB VA: 0xAFB
	|-UnityEvent<Vector2>.GetDelegate
	*/

	// RVA: -1 Offset: -1
	private static BaseInvokableCall GetDelegate(UnityAction<T0> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1284 Offset: 0x1284 VA: 0x1284
	|-UnityEvent<bool>.GetDelegate
	|
	|-RVA: 0x1285 Offset: 0x1285 VA: 0x1285
	|-UnityEvent<int>.GetDelegate
	|
	|-RVA: 0xDB6 Offset: 0xDB6 VA: 0xDB6
	|-UnityEvent<object>.GetDelegate
	|
	|-RVA: 0x1286 Offset: 0x1286 VA: 0x1286
	|-UnityEvent<float>.GetDelegate
	|
	|-RVA: 0x1287 Offset: 0x1287 VA: 0x1287
	|-UnityEvent<Color>.GetDelegate
	|
	|-RVA: 0x1288 Offset: 0x1288 VA: 0x1288
	|-UnityEvent<Vector2>.GetDelegate
	*/

	// RVA: -1 Offset: -1
	public void Invoke(T0 arg0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x894 Offset: 0x894 VA: 0x894
	|-UnityEvent<bool>.Invoke
	|
	|-RVA: 0x87C Offset: 0x87C VA: 0x87C
	|-UnityEvent<int>.Invoke
	|
	|-RVA: 0x84C Offset: 0x84C VA: 0x84C
	|-UnityEvent<object>.Invoke
	|-UnityEvent<string>.Invoke
	|-UnityEvent<BaseEventData>.Invoke
	|-UnityEvent<MessageEventArgs>.Invoke
	|
	|-RVA: 0x4F Offset: 0x4F VA: 0x4F
	|-UnityEvent<float>.Invoke
	|
	|-RVA: 0x88C Offset: 0x88C VA: 0x88C
	|-UnityEvent<Color>.Invoke
	|
	|-RVA: 0x897 Offset: 0x897 VA: 0x897
	|-UnityEvent<Vector2>.Invoke
	*/
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1> : MulticastDelegate // TypeDefIndex: 1919
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x448 Offset: 0x448 VA: 0x448
	|-UnityAction<object, object>..ctor
	|
	|-RVA: 0x9A6 Offset: 0x9A6 VA: 0x9A6
	|-UnityAction<Scene, Int32Enum>..ctor
	|
	|-RVA: 0x9A7 Offset: 0x9A7 VA: 0x9A7
	|-UnityAction<Scene, Scene>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T0 arg0, T1 arg1) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x449 Offset: 0x449 VA: 0x449
	|-UnityAction<object, object>.Invoke
	|
	|-RVA: 0x475 Offset: 0x475 VA: 0x475
	|-UnityAction<Scene, Int32Enum>.Invoke
	|-UnityAction<Scene, LoadSceneMode>.Invoke
	|
	|-RVA: 0x476 Offset: 0x476 VA: 0x476
	|-UnityAction<Scene, Scene>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9D Offset: 0x9D VA: 0x9D
	|-UnityAction<object, object>.BeginInvoke
	|
	|-RVA: 0x144 Offset: 0x144 VA: 0x144
	|-UnityAction<Scene, Int32Enum>.BeginInvoke
	|
	|-RVA: 0x145 Offset: 0x145 VA: 0x145
	|-UnityAction<Scene, Scene>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x84D Offset: 0x84D VA: 0x84D
	|-UnityAction<object, object>.EndInvoke
	|
	|-RVA: 0xB89 Offset: 0xB89 VA: 0xB89
	|-UnityAction<Scene, Int32Enum>.EndInvoke
	|
	|-RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
	|-UnityAction<Scene, Scene>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0, T1> : UnityEventBase // TypeDefIndex: 1920
{
	// Fields
	private object[] m_InvokeArray; // 0xFFFFFFFF

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xADE Offset: 0xADE VA: 0xADE
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x907 Offset: 0x907 VA: 0x907
	|-UnityEvent<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA5C Offset: 0xA5C VA: 0xA5C
	|-UnityEvent<object, object>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA5D Offset: 0xA5D VA: 0xA5D
	|-UnityEvent<object, object>.GetDelegate
	*/
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1, T2> : MulticastDelegate // TypeDefIndex: 1921
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x44A Offset: 0x44A VA: 0x44A
	|-UnityAction<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T0 arg0, T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x13B Offset: 0x13B VA: 0x13B
	|-UnityAction<object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x7F Offset: 0x7F VA: 0x7F
	|-UnityAction<object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x84E Offset: 0x84E VA: 0x84E
	|-UnityAction<object, object, object>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0, T1, T2> : UnityEventBase // TypeDefIndex: 1922
{
	// Fields
	private object[] m_InvokeArray; // 0xFFFFFFFF

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xADF Offset: 0xADF VA: 0xADF
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x908 Offset: 0x908 VA: 0x908
	|-UnityEvent<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA5E Offset: 0xA5E VA: 0xA5E
	|-UnityEvent<object, object, object>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA5F Offset: 0xA5F VA: 0xA5F
	|-UnityEvent<object, object, object>.GetDelegate
	*/
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1, T2, T3> : MulticastDelegate // TypeDefIndex: 1923
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x44B Offset: 0x44B VA: 0x44B
	|-UnityAction<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x94 Offset: 0x94 VA: 0x94
	|-UnityAction<object, object, object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x27 Offset: 0x27 VA: 0x27
	|-UnityAction<object, object, object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x84F Offset: 0x84F VA: 0x84F
	|-UnityAction<object, object, object, object>.EndInvoke
	*/
}

// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent<T0, T1, T2, T3> : UnityEventBase // TypeDefIndex: 1924
{
	// Fields
	private object[] m_InvokeArray; // 0xFFFFFFFF

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAE0 Offset: 0xAE0 VA: 0xAE0
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x909 Offset: 0x909 VA: 0x909
	|-UnityEvent<object, object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, object targetObj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA60 Offset: 0xA60 VA: 0xA60
	|-UnityEvent<object, object, object, object>.FindMethod_Impl
	*/

	// RVA: -1 Offset: -1 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA61 Offset: 0xA61 VA: 0xA61
	|-UnityEvent<object, object, object, object>.GetDelegate
	*/
}

// Namespace: UnityEngine
internal sealed class UnitySynchronizationContext : SynchronizationContext // TypeDefIndex: 1925
{
	// Fields
	private readonly List<UnitySynchronizationContext.WorkRequest> m_AsyncWorkQueue; // 0x8
	private readonly List<UnitySynchronizationContext.WorkRequest> m_CurrentFrameWork; // 0xC
	private readonly int m_MainThreadID; // 0x10
	private int m_TrackedCount; // 0x14

	// Methods

	// RVA: 0x5B6 Offset: 0x5B6 VA: 0x5B6
	private void .ctor(int mainThreadID) { }

	// RVA: 0x373 Offset: 0x373 VA: 0x373
	private void .ctor(List<UnitySynchronizationContext.WorkRequest> queue, int mainThreadID) { }

	// RVA: 0x374 Offset: 0x374 VA: 0x374 Slot: 4
	public override void Send(SendOrPostCallback callback, object state) { }

	// RVA: 0x375 Offset: 0x375 VA: 0x375 Slot: 5
	public override void Post(SendOrPostCallback callback, object state) { }

	// RVA: 0xB1A Offset: 0xB1A VA: 0xB1A Slot: 6
	public override SynchronizationContext CreateCopy() { }

	// RVA: 0x6E6 Offset: 0x6E6 VA: 0x6E6
	private void Exec() { }

	// RVA: 0xB1B Offset: 0xB1B VA: 0xB1B
	private bool HasPendingTasks() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAE1 Offset: 0xAE1 VA: 0xAE1
	// RVA: 0xF4E Offset: 0xF4E VA: 0xF4E
	private static void InitializeSynchronizationContext() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAE2 Offset: 0xAE2 VA: 0xAE2
	// RVA: 0xF4F Offset: 0xF4F VA: 0xF4F
	private static void ExecuteTasks() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAE3 Offset: 0xAE3 VA: 0xAE3
	// RVA: 0x16 Offset: 0x16 VA: 0x16
	private static bool ExecutePendingTasks(long millisecondsTimeout) { }
}

// Namespace: 
private struct UnitySynchronizationContext.WorkRequest // TypeDefIndex: 1926
{
	// Fields
	private readonly SendOrPostCallback m_DelagateCallback; // 0x0
	private readonly object m_DelagateState; // 0x4
	private readonly ManualResetEvent m_WaitHandle; // 0x8

	// Methods

	// RVA: 0x104 Offset: 0x104 VA: 0x104
	public void .ctor(SendOrPostCallback callback, object state, ManualResetEvent waitHandle) { }

	// RVA: 0x6E7 Offset: 0x6E7 VA: 0x6E7
	public void Invoke() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0x95C Offset: 0x95C VA: 0x95C
[DefaultMemberAttribute] // RVA: 0x95C Offset: 0x95C VA: 0x95C
[RequiredByNativeCodeAttribute] // RVA: 0x95C Offset: 0x95C VA: 0x95C
public struct Vector2 : IEquatable<Vector2> // TypeDefIndex: 1927
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	private static readonly Vector2 zeroVector; // 0x0
	private static readonly Vector2 oneVector; // 0x8
	private static readonly Vector2 upVector; // 0x10
	private static readonly Vector2 downVector; // 0x18
	private static readonly Vector2 leftVector; // 0x20
	private static readonly Vector2 rightVector; // 0x28
	private static readonly Vector2 positiveInfinityVector; // 0x30
	private static readonly Vector2 negativeInfinityVector; // 0x38
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;

	// Properties
	public float Item { get; set; }
	public float sqrMagnitude { get; }
	public static Vector2 zero { get; }
	public static Vector2 one { get; }
	public static Vector2 up { get; }
	public static Vector2 right { get; }

	// Methods

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public void .ctor(float x, float y) { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	public float get_Item(int index) { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9
	public void set_Item(int index, float value) { }

	// RVA: 0x376 Offset: 0x376 VA: 0x376
	public static Vector2 Scale(Vector2 a, Vector2 b) { }

	// RVA: 0xB1C Offset: 0xB1C VA: 0xB1C Slot: 3
	public override string ToString() { }

	// RVA: 0xB1D Offset: 0xB1D VA: 0xB1D Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5B5 Offset: 0x5B5 VA: 0x5B5 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x5B6 Offset: 0x5B6 VA: 0x5B6 Slot: 4
	public bool Equals(Vector2 other) { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	public static float Dot(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	public float get_sqrMagnitude() { }

	// RVA: 0x377 Offset: 0x377 VA: 0x377
	public static Vector2 op_Addition(Vector2 a, Vector2 b) { }

	// RVA: 0x378 Offset: 0x378 VA: 0x378
	public static Vector2 op_Subtraction(Vector2 a, Vector2 b) { }

	// RVA: 0x379 Offset: 0x379 VA: 0x379
	public static Vector2 op_Multiply(Vector2 a, Vector2 b) { }

	// RVA: 0x37A Offset: 0x37A VA: 0x37A
	public static Vector2 op_Division(Vector2 a, Vector2 b) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	public static Vector2 op_Multiply(Vector2 a, float d) { }

	// RVA: 0xB Offset: 0xB VA: 0xB
	public static Vector2 op_Division(Vector2 a, float d) { }

	// RVA: 0x5B7 Offset: 0x5B7 VA: 0x5B7
	public static bool op_Equality(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x5B8 Offset: 0x5B8 VA: 0x5B8
	public static bool op_Inequality(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x5B7 Offset: 0x5B7 VA: 0x5B7
	public static Vector2 op_Implicit(Vector3 v) { }

	// RVA: 0x5B8 Offset: 0x5B8 VA: 0x5B8
	public static Vector3 op_Implicit(Vector2 v) { }

	// RVA: 0x6E8 Offset: 0x6E8 VA: 0x6E8
	public static Vector2 get_zero() { }

	// RVA: 0x6E9 Offset: 0x6E9 VA: 0x6E9
	public static Vector2 get_one() { }

	// RVA: 0x6EA Offset: 0x6EA VA: 0x6EA
	public static Vector2 get_up() { }

	// RVA: 0x6EB Offset: 0x6EB VA: 0x6EB
	public static Vector2 get_right() { }

	// RVA: 0xF50 Offset: 0xF50 VA: 0xF50
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x95D Offset: 0x95D VA: 0x95D
[NativeHeaderAttribute] // RVA: 0x95D Offset: 0x95D VA: 0x95D
[NativeClassAttribute] // RVA: 0x95D Offset: 0x95D VA: 0x95D
[DefaultMemberAttribute] // RVA: 0x95D Offset: 0x95D VA: 0x95D
public struct Vector4 : IEquatable<Vector4> // TypeDefIndex: 1928
{
	// Fields
	public const float kEpsilon = 1E-05;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Vector4 zeroVector; // 0x0
	private static readonly Vector4 oneVector; // 0x10
	private static readonly Vector4 positiveInfinityVector; // 0x20
	private static readonly Vector4 negativeInfinityVector; // 0x30

	// Properties
	public float Item { get; set; }
	public float sqrMagnitude { get; }
	public static Vector4 zero { get; }

	// Methods

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public void .ctor(float x, float y, float z, float w) { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	public float get_Item(int index) { }

	// RVA: 0xF Offset: 0xF VA: 0xF
	public void set_Item(int index, float value) { }

	// RVA: 0xB20 Offset: 0xB20 VA: 0xB20 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5BD Offset: 0x5BD VA: 0x5BD Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x5BE Offset: 0x5BE VA: 0x5BE Slot: 4
	public bool Equals(Vector4 other) { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	public static float Dot(Vector4 a, Vector4 b) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	public float get_sqrMagnitude() { }

	// RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4
	public static Vector4 get_zero() { }

	// RVA: 0x37F Offset: 0x37F VA: 0x37F
	public static Vector4 op_Subtraction(Vector4 a, Vector4 b) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public static Vector4 op_Division(Vector4 a, float d) { }

	// RVA: 0x5BF Offset: 0x5BF VA: 0x5BF
	public static bool op_Equality(Vector4 lhs, Vector4 rhs) { }

	// RVA: 0xB21 Offset: 0xB21 VA: 0xB21 Slot: 3
	public override string ToString() { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	public static float SqrMagnitude(Vector4 a) { }

	// RVA: 0xF52 Offset: 0xF52 VA: 0xF52
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x95E Offset: 0x95E VA: 0x95E
public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 1929
{
	// Methods

	// RVA: 0x6F5 Offset: 0x6F5 VA: 0x6F5
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x95F Offset: 0x95F VA: 0x95F
public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 1930
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x960 Offset: 0x960 VA: 0x960
public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 1931
{
	// Fields
	internal float m_Seconds; // 0x8
}

// Namespace: UnityEngine
public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 1932
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3
	[CompilerGeneratedAttribute] // RVA: 0x9F3 Offset: 0x9F3 VA: 0x9F3
	private float <waitTime>k__BackingField; // 0x8
	private float m_WaitUntilTime; // 0xC

	// Properties
	public float waitTime { get; set; }
	public override bool keepWaiting { get; }

	// Methods

	// RVA: 0x16 Offset: 0x16 VA: 0x16
	public void .ctor(float time) { }

	[CompilerGeneratedAttribute] // RVA: 0xAE4 Offset: 0xAE4 VA: 0xAE4
	// RVA: 0x27 Offset: 0x27 VA: 0x27
	public float get_waitTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xAE5 Offset: 0xAE5 VA: 0xAE5
	// RVA: 0x17 Offset: 0x17 VA: 0x17
	public void set_waitTime(float value) { }

	// RVA: 0xB22 Offset: 0xB22 VA: 0xB22 Slot: 6
	public override bool get_keepWaiting() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x961 Offset: 0x961 VA: 0x961
public class YieldInstruction // TypeDefIndex: 1933
{
	// Methods

	// RVA: 0x6F6 Offset: 0x6F6 VA: 0x6F6
	public void .ctor() { }
}

// Namespace: UnityEngine.Assertions
[DebuggerStepThroughAttribute] // RVA: 0x962 Offset: 0x962 VA: 0x962
public static class Assert // TypeDefIndex: 1934
{
	// Fields
	public static bool raiseExceptions; // 0xFFFFFFFF

	// Methods

	// RVA: 0x4CD Offset: 0x4CD VA: 0x4CD
	private static void Fail(string message, string userMessage) { }

	[ConditionalAttribute] // RVA: 0xAE6 Offset: 0xAE6 VA: 0xAE6
	// RVA: -1 Offset: -1
	public static void AreEqual<T>(T expected, T actual, string message) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x46E Offset: 0x46E VA: 0x46E
	|-Assert.AreEqual<int>
	|
	|-RVA: 0x44C Offset: 0x44C VA: 0x44C
	|-Assert.AreEqual<object>
	*/

	[ConditionalAttribute] // RVA: 0xAE7 Offset: 0xAE7 VA: 0xAE7
	// RVA: -1 Offset: -1
	public static void AreEqual<T>(T expected, T actual, string message, IEqualityComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x14F Offset: 0x14F VA: 0x14F
	|-Assert.AreEqual<int>
	|
	|-RVA: 0x13C Offset: 0x13C VA: 0x13C
	|-Assert.AreEqual<object>
	*/

	[ConditionalAttribute] // RVA: 0xAE8 Offset: 0xAE8 VA: 0xAE8
	// RVA: 0x335 Offset: 0x335 VA: 0x335
	public static void AreEqual(Object expected, Object actual, string message) { }

	[ConditionalAttribute] // RVA: 0xAE9 Offset: 0xAE9 VA: 0xAE9
	// RVA: 0x4CE Offset: 0x4CE VA: 0x4CE
	public static void AreEqual(int expected, int actual) { }

	// RVA: 0xF2E Offset: 0xF2E VA: 0xF2E
	private static void .cctor() { }
}

// Namespace: UnityEngine.Assertions
public class AssertionException : Exception // TypeDefIndex: 1935
{
	// Fields
	private string m_UserMessage; // 0x44

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x336 Offset: 0x336 VA: 0x336
	public void .ctor(string message, string userMessage) { }

	// RVA: 0xA52 Offset: 0xA52 VA: 0xA52 Slot: 5
	public override string get_Message() { }
}

// Namespace: UnityEngine.Assertions
internal class AssertionMessageUtil // TypeDefIndex: 1936
{
	// Methods

	// RVA: 0xA53 Offset: 0xA53 VA: 0xA53
	public static string GetMessage(string failureMessage) { }

	// RVA: 0x553 Offset: 0x553 VA: 0x553
	public static string GetMessage(string failureMessage, string expected) { }

	// RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	public static string GetEqualityMessage(object actual, object expected, bool expectEqual) { }
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0x963 Offset: 0x963 VA: 0x963
internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem, IDisposable // TypeDefIndex: 1937
{
	// Methods

	// RVA: 0x67B Offset: 0x67B VA: 0x67B
	public void .ctor() { }

	// RVA: 0xA82 Offset: 0xA82 VA: 0xA82 Slot: 4
	public bool TickRealtimeProbes() { }

	// RVA: 0x67C Offset: 0x67C VA: 0x67C Slot: 5
	public void Dispose() { }

	// RVA: 0x4F7 Offset: 0x4F7 VA: 0x4F7
	private void Dispose(bool disposing) { }

	[StaticAccessorAttribute] // RVA: 0xAEA Offset: 0xAEA VA: 0xAEA
	// RVA: 0x25D Offset: 0x25D VA: 0x25D
	private static bool BuiltinUpdate() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAEB Offset: 0xAEB VA: 0xAEB
	// RVA: 0x25E Offset: 0x25E VA: 0x25E
	private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New() { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 1938
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool TickRealtimeProbes() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0x964 Offset: 0x964 VA: 0x964
[NativeHeaderAttribute] // RVA: 0x964 Offset: 0x964 VA: 0x964
public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 1939
{
	// Fields
	private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0xFFFFFFFF

	// Properties
	private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { set; }
	private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAEC Offset: 0xAEC VA: 0xAEC
	// RVA: 0x681 Offset: 0x681 VA: 0x681
	private static void set_Internal_ScriptableRuntimeReflectionSystemSettings_system(IScriptableRuntimeReflectionSystem value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAED Offset: 0xAED VA: 0xAED
	// RVA: 0x260 Offset: 0x260 VA: 0x260
	private static ScriptableRuntimeReflectionSystemWrapper get_Internal_ScriptableRuntimeReflectionSystemSettings_instance() { }

	[StaticAccessorAttribute] // RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xAEE Offset: 0xAEE VA: 0xAEE
	// RVA: 0xF38 Offset: 0xF38 VA: 0xF38
	private static void ScriptingDirtyReflectionSystemInstance() { }

	// RVA: 0xF39 Offset: 0xF39 VA: 0xF39
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0x965 Offset: 0x965 VA: 0x965
internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 1940
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	[DebuggerBrowsableAttribute] // RVA: 0x9F4 Offset: 0x9F4 VA: 0x9F4
	private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x8

	// Properties
	internal IScriptableRuntimeReflectionSystem implementation { get; set; }

	// Methods

	// RVA: 0x682 Offset: 0x682 VA: 0x682
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xAEF Offset: 0xAEF VA: 0xAEF
	// RVA: 0xA8A Offset: 0xA8A VA: 0xA8A
	internal IScriptableRuntimeReflectionSystem get_implementation() { }

	[CompilerGeneratedAttribute] // RVA: 0xAF0 Offset: 0xAF0 VA: 0xAF0
	// RVA: 0x4FA Offset: 0x4FA VA: 0x4FA
	internal void set_implementation(IScriptableRuntimeReflectionSystem value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF1 Offset: 0xAF1 VA: 0xAF1
	// RVA: 0x4FB Offset: 0x4FB VA: 0x4FB
	private void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(IntPtr result) { }
}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0x966 Offset: 0x966 VA: 0x966
[AttributeUsageAttribute] // RVA: 0x966 Offset: 0x966 VA: 0x966
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1941
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0x967 Offset: 0x967 VA: 0x967
[AttributeUsageAttribute] // RVA: 0x967 Offset: 0x967 VA: 0x967
public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 1942
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0x968 Offset: 0x968 VA: 0x968
[AttributeUsageAttribute] // RVA: 0x968 Offset: 0x968 VA: 0x968
public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1943
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0x969 Offset: 0x969 VA: 0x969
[AttributeUsageAttribute] // RVA: 0x969 Offset: 0x969 VA: 0x969
public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 1944
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0x96A Offset: 0x96A VA: 0x96A
[AttributeUsageAttribute] // RVA: 0x96A Offset: 0x96A VA: 0x96A
public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 1945
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0x96B Offset: 0x96B VA: 0x96B
[AttributeUsageAttribute] // RVA: 0x96B Offset: 0x96B VA: 0x96B
public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 1946
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0x96C Offset: 0x96C VA: 0x96C
[RequiredByNativeCodeAttribute] // RVA: 0x96C Offset: 0x96C VA: 0x96C
public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 1947
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x96D Offset: 0x96D VA: 0x96D
[AttributeUsageAttribute] // RVA: 0x96D Offset: 0x96D VA: 0x96D
public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 1948
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0x96E Offset: 0x96E VA: 0x96E
[RequiredByNativeCodeAttribute] // RVA: 0x96E Offset: 0x96E VA: 0x96E
public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 1949
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x96F Offset: 0x96F VA: 0x96F
[AttributeUsageAttribute] // RVA: 0x96F Offset: 0x96F VA: 0x96F
public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 1950
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0x970 Offset: 0x970 VA: 0x970
[RequiredByNativeCodeAttribute] // RVA: 0x970 Offset: 0x970 VA: 0x970
public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1951
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x971 Offset: 0x971 VA: 0x971
[AttributeUsageAttribute] // RVA: 0x971 Offset: 0x971 VA: 0x971
public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 1952
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x972 Offset: 0x972 VA: 0x972
[AttributeUsageAttribute] // RVA: 0x972 Offset: 0x972 VA: 0x972
public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 1953
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[ObsoleteAttribute] // RVA: 0x973 Offset: 0x973 VA: 0x973
[RequiredByNativeCodeAttribute] // RVA: 0x973 Offset: 0x973 VA: 0x973
[AttributeUsageAttribute] // RVA: 0x973 Offset: 0x973 VA: 0x973
public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 1954
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x974 Offset: 0x974 VA: 0x974
[AttributeUsageAttribute] // RVA: 0x974 Offset: 0x974 VA: 0x974
public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 1955
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x975 Offset: 0x975 VA: 0x975
[AttributeUsageAttribute] // RVA: 0x975 Offset: 0x975 VA: 0x975
public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 1956
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0x976 Offset: 0x976 VA: 0x976
[AttributeUsageAttribute] // RVA: 0x976 Offset: 0x976 VA: 0x976
public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 1957
{}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0x977 Offset: 0x977 VA: 0x977
[NativeHeaderAttribute] // RVA: 0x977 Offset: 0x977 VA: 0x977
[NativeHeaderAttribute] // RVA: 0x977 Offset: 0x977 VA: 0x977
[RequiredByNativeCodeAttribute] // RVA: 0x977 Offset: 0x977 VA: 0x977
[StaticAccessorAttribute] // RVA: 0x977 Offset: 0x977 VA: 0x977
public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 1958
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0x4F4 Offset: 0x4F4 VA: 0x4F4 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x560 Offset: 0x560 VA: 0x560 Slot: 4
	public bool Equals(CameraPlayable other) { }
}

// Namespace: UnityEngine.Playables
public struct FrameData // TypeDefIndex: 1959
{
	// Fields
	internal ulong m_FrameID; // 0x0
	internal double m_DeltaTime; // 0x8
	internal float m_Weight; // 0x10
	internal float m_EffectiveWeight; // 0x14
	internal double m_EffectiveParentDelay; // 0x18
	internal float m_EffectiveParentSpeed; // 0x20
	internal float m_EffectiveSpeed; // 0x24
	internal FrameData.Flags m_Flags; // 0x28
	internal PlayableOutput m_Output; // 0x2C
}

// Namespace: 
[FlagsAttribute] // RVA: 0x978 Offset: 0x978 VA: 0x978
internal enum FrameData.Flags // TypeDefIndex: 1960
{
	// Fields
	public int value__; // 0x0
	public const FrameData.Flags Evaluate = 1;
	public const FrameData.Flags SeekOccured = 2;
	public const FrameData.Flags Loop = 4;
	public const FrameData.Flags Hold = 8;
	public const FrameData.Flags EffectivePlayStateDelayed = 16;
	public const FrameData.Flags EffectivePlayStatePlaying = 32;
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x979 Offset: 0x979 VA: 0x979
public interface INotificationReceiver // TypeDefIndex: 1961
{}

// Namespace: UnityEngine.Playables
public interface IPlayable // TypeDefIndex: 1962
{}

// Namespace: UnityEngine.Playables
public interface IPlayableBehaviour // TypeDefIndex: 1963
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xAF2 Offset: 0xAF2 VA: 0xAF2
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnGraphStart(Playable playable) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF3 Offset: 0xAF3 VA: 0xAF3
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnGraphStop(Playable playable) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF4 Offset: 0xAF4 VA: 0xAF4
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnPlayableCreate(Playable playable) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF5 Offset: 0xAF5 VA: 0xAF5
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnPlayableDestroy(Playable playable) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF6 Offset: 0xAF6 VA: 0xAF6
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnBehaviourPlay(Playable playable, FrameData info) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF7 Offset: 0xAF7 VA: 0xAF7
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnBehaviourPause(Playable playable, FrameData info) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF8 Offset: 0xAF8 VA: 0xAF8
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void PrepareFrame(Playable playable, FrameData info) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAF9 Offset: 0xAF9 VA: 0xAF9
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ProcessFrame(Playable playable, FrameData info, object playerData) { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableOutput // TypeDefIndex: 1964
{}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0x97A Offset: 0x97A VA: 0x97A
[StaticAccessorAttribute] // RVA: 0x97A Offset: 0x97A VA: 0x97A
[RequiredByNativeCodeAttribute] // RVA: 0x97A Offset: 0x97A VA: 0x97A
[NativeHeaderAttribute] // RVA: 0x97A Offset: 0x97A VA: 0x97A
[NativeHeaderAttribute] // RVA: 0x97A Offset: 0x97A VA: 0x97A
public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 1965
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0x4F5 Offset: 0x4F5 VA: 0x4F5 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x561 Offset: 0x561 VA: 0x561 Slot: 4
	public bool Equals(MaterialEffectPlayable other) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x97B Offset: 0x97B VA: 0x97B
public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 1966
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly Playable m_NullPlayable; // 0x0

	// Properties
	public static Playable Null { get; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xAFA Offset: 0xAFA VA: 0xAFA
	// RVA: 0x52A Offset: 0x52A VA: 0x52A
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	public static Playable get_Null() { }

	// RVA: 0x52B Offset: 0x52B VA: 0x52B Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x591 Offset: 0x591 VA: 0x591 Slot: 4
	public bool Equals(Playable other) { }

	// RVA: 0xF3E Offset: 0xF3E VA: 0xF3E
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableAsset // TypeDefIndex: 1967
{}

// Namespace: UnityEngine.Playables
[AssetFileNameExtensionAttribute] // RVA: 0x97C Offset: 0x97C VA: 0x97C
[RequiredByNativeCodeAttribute] // RVA: 0x97C Offset: 0x97C VA: 0x97C
[Serializable]
public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 1968
{
	// Properties
	public virtual double duration { get; }
	public virtual IEnumerable<PlayableBinding> outputs { get; }

	// Methods

	// RVA: 0x6BA Offset: 0x6BA VA: 0x6BA
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner) { }

	// RVA: 0x13 Offset: 0x13 VA: 0x13 Slot: 5
	public virtual double get_duration() { }

	// RVA: 0xAC3 Offset: 0xAC3 VA: 0xAC3 Slot: 6
	public virtual IEnumerable<PlayableBinding> get_outputs() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAFB Offset: 0xAFB VA: 0xAFB
	// RVA: 0xFF Offset: 0xFF VA: 0xFF
	internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xAFC Offset: 0xAFC VA: 0xAFC
	// RVA: 0x52C Offset: 0x52C VA: 0x52C
	internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x97D Offset: 0x97D VA: 0x97D
[Serializable]
public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 1969
{
	// Methods

	// RVA: 0x6BB Offset: 0x6BB VA: 0x6BB
	public void .ctor() { }

	// RVA: 0x52D Offset: 0x52D VA: 0x52D Slot: 13
	public virtual void OnGraphStart(Playable playable) { }

	// RVA: 0x52E Offset: 0x52E VA: 0x52E Slot: 14
	public virtual void OnGraphStop(Playable playable) { }

	// RVA: 0x52F Offset: 0x52F VA: 0x52F Slot: 15
	public virtual void OnPlayableCreate(Playable playable) { }

	// RVA: 0x530 Offset: 0x530 VA: 0x530 Slot: 16
	public virtual void OnPlayableDestroy(Playable playable) { }

	// RVA: 0x35E Offset: 0x35E VA: 0x35E Slot: 17
	public virtual void OnBehaviourPlay(Playable playable, FrameData info) { }

	// RVA: 0x35F Offset: 0x35F VA: 0x35F Slot: 18
	public virtual void OnBehaviourPause(Playable playable, FrameData info) { }

	// RVA: 0x360 Offset: 0x360 VA: 0x360 Slot: 19
	public virtual void PrepareFrame(Playable playable, FrameData info) { }

	// RVA: 0x100 Offset: 0x100 VA: 0x100 Slot: 20
	public virtual void ProcessFrame(Playable playable, FrameData info, object playerData) { }

	// RVA: 0xAC4 Offset: 0xAC4 VA: 0xAC4 Slot: 21
	public virtual object Clone() { }
}

// Namespace: UnityEngine.Playables
public struct PlayableBinding // TypeDefIndex: 1970
{
	// Fields
	private string m_StreamName; // 0x0
	private Object m_SourceObject; // 0x4
	private Type m_SourceBindingType; // 0x8
	private PlayableBinding.CreateOutputMethod m_CreateOutputMethod; // 0xC
	public static readonly PlayableBinding[] None; // 0x0
	public static readonly double DefaultDuration; // 0x8

	// Methods

	// RVA: 0xF3F Offset: 0xF3F VA: 0xF3F
	private static void .cctor() { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0x97E Offset: 0x97E VA: 0x97E
internal sealed class PlayableBinding.CreateOutputMethod : MulticastDelegate // TypeDefIndex: 1971
{
	// Methods

	// RVA: 0x361 Offset: 0x361 VA: 0x361
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x101 Offset: 0x101 VA: 0x101 Slot: 12
	public virtual PlayableOutput Invoke(PlayableGraph graph, string name) { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89 Slot: 13
	public virtual IAsyncResult BeginInvoke(PlayableGraph graph, string name, AsyncCallback callback, object object) { }

	// RVA: 0x362 Offset: 0x362 VA: 0x362 Slot: 14
	public virtual PlayableOutput EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0x97F Offset: 0x97F VA: 0x97F
[NativeHeaderAttribute] // RVA: 0x97F Offset: 0x97F VA: 0x97F
[NativeHeaderAttribute] // RVA: 0x97F Offset: 0x97F VA: 0x97F
[UsedByNativeCodeAttribute] // RVA: 0x97F Offset: 0x97F VA: 0x97F
[NativeHeaderAttribute] // RVA: 0x97F Offset: 0x97F VA: 0x97F
public struct PlayableGraph // TypeDefIndex: 1972
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x4
}

// Namespace: UnityEngine.Playables
[UsedByNativeCodeAttribute] // RVA: 0x980 Offset: 0x980 VA: 0x980
[NativeHeaderAttribute] // RVA: 0x980 Offset: 0x980 VA: 0x980
[NativeHeaderAttribute] // RVA: 0x980 Offset: 0x980 VA: 0x980
[NativeHeaderAttribute] // RVA: 0x980 Offset: 0x980 VA: 0x980
public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 1973
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x4
	private static readonly PlayableHandle m_Null; // 0x0

	// Properties
	public static PlayableHandle Null { get; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xAFD Offset: 0xAFD VA: 0xAFD
	// RVA: -1 Offset: -1
	internal bool IsPlayableOfType<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB7 Offset: 0xDB7 VA: 0xDB7
	|-PlayableHandle.IsPlayableOfType<object>
	|
	|-RVA: 0xDFC Offset: 0xDFC VA: 0xDFC
	|-PlayableHandle.IsPlayableOfType<AnimationLayerMixerPlayable>
	|
	|-RVA: 0xDFD Offset: 0xDFD VA: 0xDFD
	|-PlayableHandle.IsPlayableOfType<AnimationMixerPlayable>
	|
	|-RVA: 0xDFE Offset: 0xDFE VA: 0xDFE
	|-PlayableHandle.IsPlayableOfType<AnimationMotionXToDeltaPlayable>
	|
	|-RVA: 0xDFF Offset: 0xDFF VA: 0xDFF
	|-PlayableHandle.IsPlayableOfType<AnimationOffsetPlayable>
	|
	|-RVA: 0xE00 Offset: 0xE00 VA: 0xE00
	|-PlayableHandle.IsPlayableOfType<AnimationPosePlayable>
	|
	|-RVA: 0xE01 Offset: 0xE01 VA: 0xE01
	|-PlayableHandle.IsPlayableOfType<AnimationRemoveScalePlayable>
	|
	|-RVA: 0xE02 Offset: 0xE02 VA: 0xE02
	|-PlayableHandle.IsPlayableOfType<AnimatorControllerPlayable>
	|
	|-RVA: 0xE03 Offset: 0xE03 VA: 0xE03
	|-PlayableHandle.IsPlayableOfType<AnimationScriptPlayable>
	*/

	// RVA: 0x6BC Offset: 0x6BC VA: 0x6BC
	public static PlayableHandle get_Null() { }

	// RVA: 0x592 Offset: 0x592 VA: 0x592
	public static bool op_Equality(PlayableHandle x, PlayableHandle y) { }

	// RVA: 0x593 Offset: 0x593 VA: 0x593 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0x594 Offset: 0x594 VA: 0x594 Slot: 4
	public bool Equals(PlayableHandle other) { }

	// RVA: 0xAC5 Offset: 0xAC5 VA: 0xAC5 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x595 Offset: 0x595 VA: 0x595
	internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xAFE Offset: 0xAFE VA: 0xAFE
	// RVA: 0xAC6 Offset: 0xAC6 VA: 0xAC6
	internal bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xAFF Offset: 0xAFF VA: 0xAFF
	[VisibleToOtherModulesAttribute] // RVA: 0xAFF Offset: 0xAFF VA: 0xAFF
	// RVA: 0xAC7 Offset: 0xAC7 VA: 0xAC7
	internal Type GetPlayableType() { }

	// RVA: 0xF40 Offset: 0xF40 VA: 0xF40
	private static void .cctor() { }

	// RVA: 0xAC8 Offset: 0xAC8 VA: 0xAC8
	private static bool IsValid_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0xAC9 Offset: 0xAC9 VA: 0xAC9
	private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x981 Offset: 0x981 VA: 0x981
public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 1974
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
	private static readonly PlayableOutput m_NullPlayableOutput; // 0x0

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xB00 Offset: 0xB00 VA: 0xB00
	// RVA: 0x531 Offset: 0x531 VA: 0x531
	internal void .ctor(PlayableOutputHandle handle) { }

	// RVA: 0x532 Offset: 0x532 VA: 0x532 Slot: 5
	public PlayableOutputHandle GetHandle() { }

	// RVA: 0x596 Offset: 0x596 VA: 0x596 Slot: 4
	public bool Equals(PlayableOutput other) { }

	// RVA: 0xF41 Offset: 0xF41 VA: 0xF41
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0x982 Offset: 0x982 VA: 0x982
[NativeHeaderAttribute] // RVA: 0x982 Offset: 0x982 VA: 0x982
[UsedByNativeCodeAttribute] // RVA: 0x982 Offset: 0x982 VA: 0x982
[NativeHeaderAttribute] // RVA: 0x982 Offset: 0x982 VA: 0x982
public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 1975
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x4
	private static readonly PlayableOutputHandle m_Null; // 0x0

	// Properties
	public static PlayableOutputHandle Null { get; }

	// Methods

	// RVA: 0x6BD Offset: 0x6BD VA: 0x6BD
	public static PlayableOutputHandle get_Null() { }

	// RVA: 0xACA Offset: 0xACA VA: 0xACA Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x597 Offset: 0x597 VA: 0x597
	public static bool op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	// RVA: 0x598 Offset: 0x598 VA: 0x598 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0x599 Offset: 0x599 VA: 0x599 Slot: 4
	public bool Equals(PlayableOutputHandle other) { }

	// RVA: 0x59A Offset: 0x59A VA: 0x59A
	internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	// RVA: 0xF42 Offset: 0xF42 VA: 0xF42
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x983 Offset: 0x983 VA: 0x983
public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 1976
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x984 Offset: 0x984 VA: 0x984
[StaticAccessorAttribute] // RVA: 0x984 Offset: 0x984 VA: 0x984
[NativeHeaderAttribute] // RVA: 0x984 Offset: 0x984 VA: 0x984
[NativeHeaderAttribute] // RVA: 0x984 Offset: 0x984 VA: 0x984
[NativeHeaderAttribute] // RVA: 0x984 Offset: 0x984 VA: 0x984
public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 1977
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0x4F6 Offset: 0x4F6 VA: 0x4F6 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x562 Offset: 0x562 VA: 0x562 Slot: 4
	public bool Equals(TextureMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0x985 Offset: 0x985 VA: 0x985
[NativeHeaderAttribute] // RVA: 0x985 Offset: 0x985 VA: 0x985
[NativeHeaderAttribute] // RVA: 0x985 Offset: 0x985 VA: 0x985
[StaticAccessorAttribute] // RVA: 0x985 Offset: 0x985 VA: 0x985
[RequiredByNativeCodeAttribute] // RVA: 0x985 Offset: 0x985 VA: 0x985
public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 1978
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Internal
[AttributeUsageAttribute] // RVA: 0x986 Offset: 0x986 VA: 0x986
[Serializable]
public class DefaultValueAttribute : Attribute // TypeDefIndex: 1979
{
	// Fields
	private object DefaultValue; // 0x8

	// Properties
	public object Value { get; }

	// Methods

	// RVA: 0x505 Offset: 0x505 VA: 0x505
	public void .ctor(string value) { }

	// RVA: 0xA9A Offset: 0xA9A VA: 0xA9A
	public object get_Value() { }

	// RVA: 0x572 Offset: 0x572 VA: 0x572 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xA9B Offset: 0xA9B VA: 0xA9B Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.Internal
[Serializable]
public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 1980
{
	// Methods

	// RVA: 0x695 Offset: 0x695 VA: 0x695
	public void .ctor() { }
}

// Namespace: UnityEngine
public interface ILogHandler // TypeDefIndex: 1981
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine
public interface ILogger : ILogHandler // TypeDefIndex: 1982
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Log(LogType logType, object message) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Log(LogType logType, object message, Object context) { }
}

// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler // TypeDefIndex: 1983
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	[CompilerGeneratedAttribute] // RVA: 0x9F5 Offset: 0x9F5 VA: 0x9F5
	private ILogHandler <logHandler>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	[CompilerGeneratedAttribute] // RVA: 0x9F6 Offset: 0x9F6 VA: 0x9F6
	private bool <logEnabled>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	[DebuggerBrowsableAttribute] // RVA: 0x9F7 Offset: 0x9F7 VA: 0x9F7
	private LogType <filterLogType>k__BackingField; // 0x10

	// Properties
	public ILogHandler logHandler { get; set; }
	public bool logEnabled { get; set; }
	public LogType filterLogType { get; set; }

	// Methods

	// RVA: 0x506 Offset: 0x506 VA: 0x506
	public void .ctor(ILogHandler logHandler) { }

	[CompilerGeneratedAttribute] // RVA: 0xB01 Offset: 0xB01 VA: 0xB01
	// RVA: 0xA9E Offset: 0xA9E VA: 0xA9E Slot: 8
	public ILogHandler get_logHandler() { }

	[CompilerGeneratedAttribute] // RVA: 0xB02 Offset: 0xB02 VA: 0xB02
	// RVA: 0x507 Offset: 0x507 VA: 0x507 Slot: 9
	public void set_logHandler(ILogHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0xB03 Offset: 0xB03 VA: 0xB03
	// RVA: 0xA9F Offset: 0xA9F VA: 0xA9F Slot: 10
	public bool get_logEnabled() { }

	[CompilerGeneratedAttribute] // RVA: 0xB04 Offset: 0xB04 VA: 0xB04
	// RVA: 0x508 Offset: 0x508 VA: 0x508 Slot: 11
	public void set_logEnabled(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xB05 Offset: 0xB05 VA: 0xB05
	// RVA: 0xAA0 Offset: 0xAA0 VA: 0xAA0 Slot: 12
	public LogType get_filterLogType() { }

	[CompilerGeneratedAttribute] // RVA: 0xB06 Offset: 0xB06 VA: 0xB06
	// RVA: 0x509 Offset: 0x509 VA: 0x509 Slot: 13
	public void set_filterLogType(LogType value) { }

	// RVA: 0x573 Offset: 0x573 VA: 0x573 Slot: 14
	public bool IsLogTypeAllowed(LogType logType) { }

	// RVA: 0xAA1 Offset: 0xAA1 VA: 0xAA1
	private static string GetString(object message) { }

	// RVA: 0x351 Offset: 0x351 VA: 0x351 Slot: 4
	public void Log(LogType logType, object message) { }

	// RVA: 0xFD Offset: 0xFD VA: 0xFD Slot: 5
	public void Log(LogType logType, object message, Object context) { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A Slot: 6
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: 0x352 Offset: 0x352 VA: 0x352 Slot: 7
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class MessageEventArgs // TypeDefIndex: 1984
{
	// Fields
	public int playerId; // 0x8
	public byte[] data; // 0xC

	// Methods

	// RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6
	public void .ctor() { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
public interface IEditorPlayerConnection // TypeDefIndex: 1985
{}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class PlayerConnection : ScriptableObject, IEditorPlayerConnection // TypeDefIndex: 1986
{
	// Fields
	internal static IPlayerEditorConnectionNative connectionNative; // 0x0
	[SerializeField] // RVA: 0x9F8 Offset: 0x9F8 VA: 0x9F8
	private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0xC
	[SerializeField] // RVA: 0x9F9 Offset: 0x9F9 VA: 0x9F9
	private List<int> m_connectedPlayers; // 0x10
	private bool m_IsInitilized; // 0x14
	private static PlayerConnection s_Instance; // 0x4

	// Properties
	public static PlayerConnection instance { get; }
	public bool isConnected { get; }

	// Methods

	// RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7
	public void .ctor() { }

	// RVA: 0x268 Offset: 0x268 VA: 0x268
	public static PlayerConnection get_instance() { }

	// RVA: 0xAB5 Offset: 0xAB5 VA: 0xAB5
	public bool get_isConnected() { }

	// RVA: 0x269 Offset: 0x269 VA: 0x269
	private static PlayerConnection CreateInstance() { }

	// RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8
	public void OnEnable() { }

	// RVA: 0xAB6 Offset: 0xAB6 VA: 0xAB6
	private IPlayerEditorConnectionNative GetConnectionNativeApi() { }

	// RVA: 0x359 Offset: 0x359 VA: 0x359 Slot: 4
	public void Register(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x35A Offset: 0x35A VA: 0x35A Slot: 5
	public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x520 Offset: 0x520 VA: 0x520 Slot: 6
	public void RegisterConnection(UnityAction<int> callback) { }

	// RVA: 0x521 Offset: 0x521 VA: 0x521 Slot: 7
	public void RegisterDisconnection(UnityAction<int> callback) { }

	// RVA: 0x35B Offset: 0x35B VA: 0x35B Slot: 8
	public void Send(Guid messageId, byte[] data) { }

	// RVA: 0xA16 Offset: 0xA16 VA: 0xA16 Slot: 9
	public bool TrySend(Guid messageId, byte[] data) { }

	// RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	public bool BlockUntilRecvMsg(Guid messageId, int timeout) { }

	// RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9 Slot: 10
	public void DisconnectAll() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB07 Offset: 0xB07 VA: 0xB07
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB08 Offset: 0xB08 VA: 0xB08
	// RVA: 0x6AA Offset: 0x6AA VA: 0x6AA
	private static void ConnectedCallbackInternal(int playerId) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB09 Offset: 0xB09 VA: 0xB09
	// RVA: 0x6AB Offset: 0x6AB VA: 0x6AB
	private static void DisconnectedCallback(int playerId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x987 Offset: 0x987 VA: 0x987
private sealed class PlayerConnection.<Register>c__AnonStorey0 // TypeDefIndex: 1987
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x6AD Offset: 0x6AD VA: 0x6AD
	public void .ctor() { }

	// RVA: 0x587 Offset: 0x587 VA: 0x587
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x988 Offset: 0x988 VA: 0x988
private sealed class PlayerConnection.<Unregister>c__AnonStorey1 // TypeDefIndex: 1988
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	public void .ctor() { }

	// RVA: 0x588 Offset: 0x588 VA: 0x588
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x989 Offset: 0x989 VA: 0x989
private sealed class PlayerConnection.<BlockUntilRecvMsg>c__AnonStorey2 // TypeDefIndex: 1989
{
	// Fields
	internal bool msgReceived; // 0x8

	// Methods

	// RVA: 0x6AC Offset: 0x6AC VA: 0x6AC
	public void .ctor() { }

	// RVA: 0x522 Offset: 0x522 VA: 0x522
	internal void <>m__0(MessageEventArgs args) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
internal class PlayerEditorConnectionEvents // TypeDefIndex: 1990
{
	// Fields
	[SerializeField] // RVA: 0x9FA Offset: 0x9FA VA: 0x9FA
	public List<PlayerEditorConnectionEvents.MessageTypeSubscribers> messageTypeSubscribers; // 0x8
	[SerializeField] // RVA: 0x9FB Offset: 0x9FB VA: 0x9FB
	public PlayerEditorConnectionEvents.ConnectionChangeEvent connectionEvent; // 0xC
	[SerializeField] // RVA: 0x9FC Offset: 0x9FC VA: 0x9FC
	public PlayerEditorConnectionEvents.ConnectionChangeEvent disconnectionEvent; // 0x10

	// Methods

	// RVA: 0x6AF Offset: 0x6AF VA: 0x6AF
	public void .ctor() { }

	// RVA: 0xFE Offset: 0xFE VA: 0xFE
	public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x589 Offset: 0x589 VA: 0x589
	public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId) { }

	// RVA: 0x35C Offset: 0x35C VA: 0x35C
	public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback) { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 1991
{
	// Methods

	// RVA: 0x6B4 Offset: 0x6B4 VA: 0x6B4
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 1992
{
	// Methods

	// RVA: 0x6B3 Offset: 0x6B3 VA: 0x6B3
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageTypeSubscribers // TypeDefIndex: 1993
{
	// Fields
	[SerializeField] // RVA: 0x9FD Offset: 0x9FD VA: 0x9FD
	private string m_messageTypeId; // 0x8
	public int subscriberCount; // 0xC
	public PlayerEditorConnectionEvents.MessageEvent messageCallback; // 0x10

	// Properties
	public Guid MessageTypeId { get; set; }

	// Methods

	// RVA: 0x6B5 Offset: 0x6B5 VA: 0x6B5
	public void .ctor() { }

	// RVA: 0x523 Offset: 0x523 VA: 0x523
	public Guid get_MessageTypeId() { }

	// RVA: 0x524 Offset: 0x524 VA: 0x524
	public void set_MessageTypeId(Guid value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x98A Offset: 0x98A VA: 0x98A
private sealed class PlayerEditorConnectionEvents.<InvokeMessageIdSubscribers>c__AnonStorey0 // TypeDefIndex: 1994
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	public void .ctor() { }

	// RVA: 0x58B Offset: 0x58B VA: 0x58B
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x98B Offset: 0x98B VA: 0x98B
private sealed class PlayerEditorConnectionEvents.<AddAndCreate>c__AnonStorey1 // TypeDefIndex: 1995
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x6B0 Offset: 0x6B0 VA: 0x6B0
	public void .ctor() { }

	// RVA: 0x58A Offset: 0x58A VA: 0x58A
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0x98C Offset: 0x98C VA: 0x98C
private sealed class PlayerEditorConnectionEvents.<UnregisterManagedCallback>c__AnonStorey2 // TypeDefIndex: 1996
{
	// Fields
	internal Guid messageId; // 0x8

	// Methods

	// RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	public void .ctor() { }

	// RVA: 0x58C Offset: 0x58C VA: 0x58C
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IRenderPipeline : IDisposable // TypeDefIndex: 1997
{
	// Properties
	public abstract bool disposed { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_disposed() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Render(ScriptableRenderContext renderContext, Camera[] cameras) { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IRenderPipelineAsset // TypeDefIndex: 1998
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void DestroyCreatedInstances() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IRenderPipeline CreatePipeline() { }
}

// Namespace: UnityEngine.Experimental.Rendering
public static class RenderPipelineManager // TypeDefIndex: 1999
{
	// Fields
	private static IRenderPipelineAsset s_CurrentPipelineAsset; // 0x0
	private static Camera[] s_Cameras; // 0x4
	private static int s_CameraCapacity; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	[CompilerGeneratedAttribute] // RVA: 0x9FE Offset: 0x9FE VA: 0x9FE
	private static IRenderPipeline <currentPipeline>k__BackingField; // 0xC

	// Properties
	public static IRenderPipeline currentPipeline { get; set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xB0A Offset: 0xB0A VA: 0xB0A
	// RVA: 0x25F Offset: 0x25F VA: 0x25F
	public static IRenderPipeline get_currentPipeline() { }

	[CompilerGeneratedAttribute] // RVA: 0xB0B Offset: 0xB0B VA: 0xB0B
	// RVA: 0x67D Offset: 0x67D VA: 0x67D
	private static void set_currentPipeline(IRenderPipeline value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB0C Offset: 0xB0C VA: 0xB0C
	// RVA: 0xF36 Offset: 0xF36 VA: 0xF36
	internal static void CleanupRenderPipeline() { }

	// RVA: 0x67E Offset: 0x67E VA: 0x67E
	private static void GetCameras(ScriptableRenderContext context) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB0D Offset: 0xB0D VA: 0xB0D
	// RVA: 0x4F8 Offset: 0x4F8 VA: 0x4F8
	private static void DoRenderLoop_Internal(IRenderPipelineAsset pipe, IntPtr loopPtr) { }

	// RVA: 0x67F Offset: 0x67F VA: 0x67F
	private static void PrepareRenderPipeline(IRenderPipelineAsset pipe) { }

	// RVA: 0xF37 Offset: 0xF37 VA: 0xF37
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
public class SupportedRenderingFeatures // TypeDefIndex: 2000
{
	// Fields
	private static SupportedRenderingFeatures s_Active; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	[CompilerGeneratedAttribute] // RVA: 0x9FF Offset: 0x9FF VA: 0x9FF
	private SupportedRenderingFeatures.ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	[DebuggerBrowsableAttribute] // RVA: 0xA00 Offset: 0xA00 VA: 0xA00
	private SupportedRenderingFeatures.LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	[DebuggerBrowsableAttribute] // RVA: 0xA01 Offset: 0xA01 VA: 0xA01
	private SupportedRenderingFeatures.LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField; // 0x10
	[DebuggerBrowsableAttribute] // RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	[CompilerGeneratedAttribute] // RVA: 0xA02 Offset: 0xA02 VA: 0xA02
	private LightmapBakeType <supportedLightmapBakeTypes>k__BackingField; // 0x14
	[DebuggerBrowsableAttribute] // RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	[CompilerGeneratedAttribute] // RVA: 0xA03 Offset: 0xA03 VA: 0xA03
	private LightmapsMode <supportedLightmapsModes>k__BackingField; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xA04 Offset: 0xA04 VA: 0xA04
	[CompilerGeneratedAttribute] // RVA: 0xA04 Offset: 0xA04 VA: 0xA04
	private bool <rendererSupportsLightProbeProxyVolumes>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	[DebuggerBrowsableAttribute] // RVA: 0xA05 Offset: 0xA05 VA: 0xA05
	private bool <rendererSupportsMotionVectors>k__BackingField; // 0x1D
	[DebuggerBrowsableAttribute] // RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	[CompilerGeneratedAttribute] // RVA: 0xA06 Offset: 0xA06 VA: 0xA06
	private bool <rendererSupportsReceiveShadows>k__BackingField; // 0x1E
	[DebuggerBrowsableAttribute] // RVA: 0xA07 Offset: 0xA07 VA: 0xA07
	[CompilerGeneratedAttribute] // RVA: 0xA07 Offset: 0xA07 VA: 0xA07
	private bool <rendererSupportsReflectionProbes>k__BackingField; // 0x1F
	[DebuggerBrowsableAttribute] // RVA: 0xA08 Offset: 0xA08 VA: 0xA08
	[CompilerGeneratedAttribute] // RVA: 0xA08 Offset: 0xA08 VA: 0xA08
	private bool <rendererSupportsRendererPriority>k__BackingField; // 0x20
	[DebuggerBrowsableAttribute] // RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	[CompilerGeneratedAttribute] // RVA: 0xA09 Offset: 0xA09 VA: 0xA09
	private bool <rendererOverridesEnvironmentLighting>k__BackingField; // 0x21
	[CompilerGeneratedAttribute] // RVA: 0xA0A Offset: 0xA0A VA: 0xA0A
	[DebuggerBrowsableAttribute] // RVA: 0xA0A Offset: 0xA0A VA: 0xA0A
	private bool <rendererOverridesFog>k__BackingField; // 0x22
	[CompilerGeneratedAttribute] // RVA: 0xA0B Offset: 0xA0B VA: 0xA0B
	[DebuggerBrowsableAttribute] // RVA: 0xA0B Offset: 0xA0B VA: 0xA0B
	private bool <rendererOverridesOtherLightingSettings>k__BackingField; // 0x23

	// Properties
	public static SupportedRenderingFeatures active { get; set; }
	public SupportedRenderingFeatures.LightmapMixedBakeMode defaultMixedLightingMode { get; }
	public SupportedRenderingFeatures.LightmapMixedBakeMode supportedMixedLightingModes { get; }
	public LightmapBakeType supportedLightmapBakeTypes { get; }
	public LightmapsMode supportedLightmapsModes { get; }

	// Methods

	// RVA: 0x683 Offset: 0x683 VA: 0x683
	public void .ctor() { }

	// RVA: 0x261 Offset: 0x261 VA: 0x261
	public static SupportedRenderingFeatures get_active() { }

	// RVA: 0x684 Offset: 0x684 VA: 0x684
	public static void set_active(SupportedRenderingFeatures value) { }

	[CompilerGeneratedAttribute] // RVA: 0xB0E Offset: 0xB0E VA: 0xB0E
	// RVA: 0xA8B Offset: 0xA8B VA: 0xA8B
	public SupportedRenderingFeatures.LightmapMixedBakeMode get_defaultMixedLightingMode() { }

	[CompilerGeneratedAttribute] // RVA: 0xB0F Offset: 0xB0F VA: 0xB0F
	// RVA: 0xA8C Offset: 0xA8C VA: 0xA8C
	public SupportedRenderingFeatures.LightmapMixedBakeMode get_supportedMixedLightingModes() { }

	[CompilerGeneratedAttribute] // RVA: 0xB10 Offset: 0xB10 VA: 0xB10
	// RVA: 0xA8D Offset: 0xA8D VA: 0xA8D
	public LightmapBakeType get_supportedLightmapBakeTypes() { }

	[CompilerGeneratedAttribute] // RVA: 0xB11 Offset: 0xB11 VA: 0xB11
	// RVA: 0xA8E Offset: 0xA8E VA: 0xA8E
	public LightmapsMode get_supportedLightmapsModes() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB12 Offset: 0xB12 VA: 0xB12
	// RVA: 0x685 Offset: 0x685 VA: 0x685
	internal static void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr) { }

	// RVA: 0xA8F Offset: 0xA8F VA: 0xA8F
	internal static bool IsMixedLightingModeSupported(MixedLightingMode mixedMode) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB13 Offset: 0xB13 VA: 0xB13
	// RVA: 0x4FC Offset: 0x4FC VA: 0x4FC
	internal static void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr) { }

	// RVA: 0xA90 Offset: 0xA90 VA: 0xA90
	internal static bool IsLightmapBakeTypeSupported(LightmapBakeType bakeType) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB14 Offset: 0xB14 VA: 0xB14
	// RVA: 0x4FD Offset: 0x4FD VA: 0x4FD
	internal static void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB15 Offset: 0xB15 VA: 0xB15
	// RVA: 0x4FE Offset: 0x4FE VA: 0x4FE
	internal static void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr) { }

	// RVA: 0xF3A Offset: 0xF3A VA: 0xF3A
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x98D Offset: 0x98D VA: 0x98D
public enum SupportedRenderingFeatures.ReflectionProbeSupportFlags // TypeDefIndex: 2001
{
	// Fields
	public int value__; // 0x0
	public const SupportedRenderingFeatures.ReflectionProbeSupportFlags None = 0;
	public const SupportedRenderingFeatures.ReflectionProbeSupportFlags Rotation = 1;
}

// Namespace: 
[FlagsAttribute] // RVA: 0x98E Offset: 0x98E VA: 0x98E
public enum SupportedRenderingFeatures.LightmapMixedBakeMode // TypeDefIndex: 2002
{
	// Fields
	public int value__; // 0x0
	public const SupportedRenderingFeatures.LightmapMixedBakeMode None = 0;
	public const SupportedRenderingFeatures.LightmapMixedBakeMode IndirectOnly = 1;
	public const SupportedRenderingFeatures.LightmapMixedBakeMode Subtractive = 2;
	public const SupportedRenderingFeatures.LightmapMixedBakeMode Shadowmask = 4;
}

// Namespace: UnityEngine.SceneManagement
[NativeHeaderAttribute] // RVA: 0x98F Offset: 0x98F VA: 0x98F
[Serializable]
public struct Scene // TypeDefIndex: 2003
{
	// Fields
	[SerializeField] // RVA: 0xA0C Offset: 0xA0C VA: 0xA0C
	private int m_Handle; // 0x0

	// Properties
	public int handle { get; }

	// Methods

	// RVA: 0xAE8 Offset: 0xAE8 VA: 0xAE8
	public int get_handle() { }

	// RVA: 0xAE9 Offset: 0xAE9 VA: 0xAE9 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5A9 Offset: 0x5A9 VA: 0x5A9 Slot: 0
	public override bool Equals(object other) { }
}

// Namespace: UnityEngine.SceneManagement
[RequiredByNativeCodeAttribute] // RVA: 0x990 Offset: 0x990 VA: 0x990
[NativeHeaderAttribute] // RVA: 0x990 Offset: 0x990 VA: 0x990
public class SceneManager // TypeDefIndex: 2004
{
	// Fields
	internal static bool s_AllowLoadScene; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	[DebuggerBrowsableAttribute] // RVA: 0xA0D Offset: 0xA0D VA: 0xA0D
	private static UnityAction<Scene, LoadSceneMode> sceneLoaded; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xA0E Offset: 0xA0E VA: 0xA0E
	[DebuggerBrowsableAttribute] // RVA: 0xA0E Offset: 0xA0E VA: 0xA0E
	private static UnityAction<Scene> sceneUnloaded; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	[CompilerGeneratedAttribute] // RVA: 0xA0F Offset: 0xA0F VA: 0xA0F
	private static UnityAction<Scene, Scene> activeSceneChanged; // 0xC

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB16 Offset: 0xB16 VA: 0xB16
	// RVA: 0x571 Offset: 0x571 VA: 0x571
	private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB17 Offset: 0xB17 VA: 0xB17
	// RVA: 0x6D3 Offset: 0x6D3 VA: 0x6D3
	private static void Internal_SceneUnloaded(Scene scene) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB18 Offset: 0xB18 VA: 0xB18
	// RVA: 0x572 Offset: 0x572 VA: 0x572
	private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene) { }

	// RVA: 0xF48 Offset: 0xF48 VA: 0xF48
	private static void .cctor() { }
}

// Namespace: UnityEngine.SceneManagement
public enum LoadSceneMode // TypeDefIndex: 2005
{
	// Fields
	public int value__; // 0x0
	public const LoadSceneMode Single = 0;
	public const LoadSceneMode Additive = 1;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x991 Offset: 0x991 VA: 0x991
[AttributeUsageAttribute] // RVA: 0x991 Offset: 0x991 VA: 0x991
internal sealed class ExtensionOfNativeClassAttribute : Attribute // TypeDefIndex: 2006
{
	// Methods

	// RVA: 0x686 Offset: 0x686 VA: 0x686
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting
[AttributeUsageAttribute] // RVA: 0x992 Offset: 0x992 VA: 0x992
public class PreserveAttribute : Attribute // TypeDefIndex: 2007
{
	// Methods

	// RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting.APIUpdating
[AttributeUsageAttribute] // RVA: 0x993 Offset: 0x993 VA: 0x993
public class MovedFromAttribute : Attribute // TypeDefIndex: 2008
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	[DebuggerBrowsableAttribute] // RVA: 0xA10 Offset: 0xA10 VA: 0xA10
	private string <Namespace>k__BackingField; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	[CompilerGeneratedAttribute] // RVA: 0xA11 Offset: 0xA11 VA: 0xA11
	private bool <IsInDifferentAssembly>k__BackingField; // 0xC

	// Properties
	private string Namespace { set; }
	private bool IsInDifferentAssembly { set; }

	// Methods

	// RVA: 0x573 Offset: 0x573 VA: 0x573
	public void .ctor(string sourceNamespace) { }

	// RVA: 0x36A Offset: 0x36A VA: 0x36A
	public void .ctor(string sourceNamespace, bool isInDifferentAssembly) { }

	[CompilerGeneratedAttribute] // RVA: 0xB19 Offset: 0xB19 VA: 0xB19
	// RVA: 0x574 Offset: 0x574 VA: 0x574
	private void set_Namespace(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xB1A Offset: 0xB1A VA: 0xB1A
	// RVA: 0x575 Offset: 0x575 VA: 0x575
	private void set_IsInDifferentAssembly(bool value) { }
}

// Namespace: UnityEngine.Serialization
[AttributeUsageAttribute] // RVA: 0x994 Offset: 0x994 VA: 0x994
[RequiredByNativeCodeAttribute] // RVA: 0x994 Offset: 0x994 VA: 0x994
public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 2009
{
	// Fields
	private string m_oldName; // 0x8

	// Methods

	// RVA: 0x578 Offset: 0x578 VA: 0x578
	public void .ctor(string oldName) { }
}

// Namespace: UnityEngineInternal
public enum TypeInferenceRules // TypeDefIndex: 2010
{
	// Fields
	public int value__; // 0x0
	public const TypeInferenceRules TypeReferencedByFirstArgument = 0;
	public const TypeInferenceRules TypeReferencedBySecondArgument = 1;
	public const TypeInferenceRules ArrayOfTypeReferencedByFirstArgument = 2;
	public const TypeInferenceRules TypeOfFirstArgument = 3;
}

// Namespace: UnityEngineInternal
[AttributeUsageAttribute] // RVA: 0x995 Offset: 0x995 VA: 0x995
[Serializable]
public class TypeInferenceRuleAttribute : Attribute // TypeDefIndex: 2011
{
	// Fields
	private readonly string _rule; // 0x8

	// Methods

	// RVA: 0x5BB Offset: 0x5BB VA: 0x5BB
	public void .ctor(TypeInferenceRules rule) { }

	// RVA: 0x5BC Offset: 0x5BC VA: 0x5BC
	public void .ctor(string rule) { }

	// RVA: 0xB24 Offset: 0xB24 VA: 0xB24 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngineInternal
public class GenericStack : Stack // TypeDefIndex: 2012
{
	// Methods

	// RVA: 0x6F7 Offset: 0x6F7 VA: 0x6F7
	public void .ctor() { }
}

// Namespace: UnityEngineInternal
[ExtensionAttribute] // RVA: 0x996 Offset: 0x996 VA: 0x996
internal static class NetFxCoreExtensions // TypeDefIndex: 2013
{
	// Methods

	[ExtensionAttribute] // RVA: 0xB1B Offset: 0xB1B VA: 0xB1B
	// RVA: 0xA20 Offset: 0xA20 VA: 0xA20
	public static Delegate CreateDelegate(MethodInfo self, Type delegateType, object target) { }

	[ExtensionAttribute] // RVA: 0xB1C Offset: 0xB1C VA: 0xB1C
	// RVA: 0xB23 Offset: 0xB23 VA: 0xB23
	public static MethodInfo GetMethodInfo(Delegate self) { }
}

// Namespace: UnityEngine.Profiling.Memory.Experimental
public class MetaData // TypeDefIndex: 2014
{
	// Fields
	public string content; // 0x8
	public string platform; // 0xC
	public Texture2D screenshot; // 0x10

	// Methods

	// RVA: 0x6C5 Offset: 0x6C5 VA: 0x6C5
	public void .ctor() { }
}

// Namespace: UnityEngine.Profiling.Memory.Experimental
[NativeHeaderAttribute] // RVA: 0x997 Offset: 0x997 VA: 0x997
public sealed class MemoryProfiler // TypeDefIndex: 2015
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	[DebuggerBrowsableAttribute] // RVA: 0xA12 Offset: 0xA12 VA: 0xA12
	private static Action<string, bool> snapshotFinished; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	[CompilerGeneratedAttribute] // RVA: 0xA13 Offset: 0xA13 VA: 0xA13
	private static Action<MetaData> createMetaData; // 0x4

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB1D Offset: 0xB1D VA: 0xB1D
	// RVA: 0x26B Offset: 0x26B VA: 0x26B
	private static byte[] PrepareMetadata() { }

	// RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	internal static int WriteIntToByteArray(byte[] array, int offset, int value) { }

	// RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	internal static int WriteStringToByteArray(byte[] array, int offset, string value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB1E Offset: 0xB1E VA: 0xB1E
	// RVA: 0x535 Offset: 0x535 VA: 0x535
	private static void FinalizeSnapshot(string path, bool result) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x998 Offset: 0x998 VA: 0x998
public enum DrivenTransformProperties // TypeDefIndex: 2016
{
	// Fields
	public int value__; // 0x0
	public const DrivenTransformProperties None = 0;
	public const DrivenTransformProperties All = -1;
	public const DrivenTransformProperties AnchoredPositionX = 2;
	public const DrivenTransformProperties AnchoredPositionY = 4;
	public const DrivenTransformProperties AnchoredPositionZ = 8;
	public const DrivenTransformProperties Rotation = 16;
	public const DrivenTransformProperties ScaleX = 32;
	public const DrivenTransformProperties ScaleY = 64;
	public const DrivenTransformProperties ScaleZ = 128;
	public const DrivenTransformProperties AnchorMinX = 256;
	public const DrivenTransformProperties AnchorMinY = 512;
	public const DrivenTransformProperties AnchorMaxX = 1024;
	public const DrivenTransformProperties AnchorMaxY = 2048;
	public const DrivenTransformProperties SizeDeltaX = 4096;
	public const DrivenTransformProperties SizeDeltaY = 8192;
	public const DrivenTransformProperties PivotX = 16384;
	public const DrivenTransformProperties PivotY = 32768;
	public const DrivenTransformProperties AnchoredPosition = 6;
	public const DrivenTransformProperties AnchoredPosition3D = 14;
	public const DrivenTransformProperties Scale = 224;
	public const DrivenTransformProperties AnchorMin = 768;
	public const DrivenTransformProperties AnchorMax = 3072;
	public const DrivenTransformProperties Anchors = 3840;
	public const DrivenTransformProperties SizeDelta = 12288;
	public const DrivenTransformProperties Pivot = 49152;
}

// Namespace: UnityEngine
public struct DrivenRectTransformTracker // TypeDefIndex: 2017
{
	// Methods

	// RVA: 0xFB Offset: 0xFB VA: 0xFB
	public void Add(Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties) { }

	// RVA: 0x663 Offset: 0x663 VA: 0x663
	public void Clear() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0x999 Offset: 0x999 VA: 0x999
[NativeHeaderAttribute] // RVA: 0x999 Offset: 0x999 VA: 0x999
public sealed class RectTransform : Transform // TypeDefIndex: 2018
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	[DebuggerBrowsableAttribute] // RVA: 0xA14 Offset: 0xA14 VA: 0xA14
	private static RectTransform.ReapplyDrivenProperties reapplyDrivenProperties; // 0xFFFFFFFF

	// Properties
	public Rect rect { get; }
	public Vector2 anchorMin { get; set; }
	public Vector2 anchorMax { get; set; }
	public Vector2 anchoredPosition { get; set; }
	public Vector2 sizeDelta { get; set; }
	public Vector2 pivot { get; set; }
	public Vector2 offsetMin { set; }
	public Vector2 offsetMax { set; }

	// Methods

	// RVA: 0x6CC Offset: 0x6CC VA: 0x6CC
	public static void add_reapplyDrivenProperties(RectTransform.ReapplyDrivenProperties value) { }

	// RVA: 0x6CD Offset: 0x6CD VA: 0x6CD
	public static void remove_reapplyDrivenProperties(RectTransform.ReapplyDrivenProperties value) { }

	// RVA: 0x544 Offset: 0x544 VA: 0x544
	public Rect get_rect() { }

	// RVA: 0x545 Offset: 0x545 VA: 0x545
	public Vector2 get_anchorMin() { }

	// RVA: 0x546 Offset: 0x546 VA: 0x546
	public void set_anchorMin(Vector2 value) { }

	// RVA: 0x547 Offset: 0x547 VA: 0x547
	public Vector2 get_anchorMax() { }

	// RVA: 0x548 Offset: 0x548 VA: 0x548
	public void set_anchorMax(Vector2 value) { }

	// RVA: 0x549 Offset: 0x549 VA: 0x549
	public Vector2 get_anchoredPosition() { }

	// RVA: 0x54A Offset: 0x54A VA: 0x54A
	public void set_anchoredPosition(Vector2 value) { }

	// RVA: 0x54B Offset: 0x54B VA: 0x54B
	public Vector2 get_sizeDelta() { }

	// RVA: 0x54C Offset: 0x54C VA: 0x54C
	public void set_sizeDelta(Vector2 value) { }

	// RVA: 0x54D Offset: 0x54D VA: 0x54D
	public Vector2 get_pivot() { }

	// RVA: 0x54E Offset: 0x54E VA: 0x54E
	public void set_pivot(Vector2 value) { }

	// RVA: 0x54F Offset: 0x54F VA: 0x54F
	public void set_offsetMin(Vector2 value) { }

	// RVA: 0x550 Offset: 0x550 VA: 0x550
	public void set_offsetMax(Vector2 value) { }

	// RVA: 0x551 Offset: 0x551 VA: 0x551
	public void GetLocalCorners(Vector3[] fourCornersArray) { }

	// RVA: 0x552 Offset: 0x552 VA: 0x552
	public void GetWorldCorners(Vector3[] fourCornersArray) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	public void SetInsetAndSizeFromParentEdge(RectTransform.Edge edge, float inset, float size) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public void SetSizeWithCurrentAnchors(RectTransform.Axis axis, float size) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB1F Offset: 0xB1F VA: 0xB1F
	// RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	internal static void SendReapplyDrivenProperties(RectTransform driven) { }

	// RVA: 0x553 Offset: 0x553 VA: 0x553
	private Vector2 GetParentSize() { }

	// RVA: 0x554 Offset: 0x554 VA: 0x554
	private void get_rect_Injected(out Rect ret) { }

	// RVA: 0x555 Offset: 0x555 VA: 0x555
	private void get_anchorMin_Injected(out Vector2 ret) { }

	// RVA: 0x556 Offset: 0x556 VA: 0x556
	private void set_anchorMin_Injected(ref Vector2 value) { }

	// RVA: 0x557 Offset: 0x557 VA: 0x557
	private void get_anchorMax_Injected(out Vector2 ret) { }

	// RVA: 0x558 Offset: 0x558 VA: 0x558
	private void set_anchorMax_Injected(ref Vector2 value) { }

	// RVA: 0x559 Offset: 0x559 VA: 0x559
	private void get_anchoredPosition_Injected(out Vector2 ret) { }

	// RVA: 0x55A Offset: 0x55A VA: 0x55A
	private void set_anchoredPosition_Injected(ref Vector2 value) { }

	// RVA: 0x55B Offset: 0x55B VA: 0x55B
	private void get_sizeDelta_Injected(out Vector2 ret) { }

	// RVA: 0x55C Offset: 0x55C VA: 0x55C
	private void set_sizeDelta_Injected(ref Vector2 value) { }

	// RVA: 0x55D Offset: 0x55D VA: 0x55D
	private void get_pivot_Injected(out Vector2 ret) { }

	// RVA: 0x55E Offset: 0x55E VA: 0x55E
	private void set_pivot_Injected(ref Vector2 value) { }
}

// Namespace: 
public enum RectTransform.Edge // TypeDefIndex: 2019
{
	// Fields
	public int value__; // 0x0
	public const RectTransform.Edge Left = 0;
	public const RectTransform.Edge Right = 1;
	public const RectTransform.Edge Top = 2;
	public const RectTransform.Edge Bottom = 3;
}

// Namespace: 
public enum RectTransform.Axis // TypeDefIndex: 2020
{
	// Fields
	public int value__; // 0x0
	public const RectTransform.Axis Horizontal = 0;
	public const RectTransform.Axis Vertical = 1;
}

// Namespace: 
public sealed class RectTransform.ReapplyDrivenProperties : MulticastDelegate // TypeDefIndex: 2021
{
	// Methods

	// RVA: 0x369 Offset: 0x369 VA: 0x369
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x55F Offset: 0x55F VA: 0x55F Slot: 12
	public virtual void Invoke(RectTransform driven) { }

	// RVA: 0x143 Offset: 0x143 VA: 0x143 Slot: 13
	public virtual IAsyncResult BeginInvoke(RectTransform driven, AsyncCallback callback, object object) { }

	// RVA: 0x560 Offset: 0x560 VA: 0x560 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x99A Offset: 0x99A VA: 0x99A
[NativeHeaderAttribute] // RVA: 0x99A Offset: 0x99A VA: 0x99A
[RequiredByNativeCodeAttribute] // RVA: 0x99A Offset: 0x99A VA: 0x99A
[NativeHeaderAttribute] // RVA: 0x99A Offset: 0x99A VA: 0x99A
public class Transform : Component, IEnumerable // TypeDefIndex: 2022
{
	// Properties
	public Vector3 position { get; }
	public Vector3 localPosition { get; set; }
	public Vector3 forward { get; }
	public Quaternion rotation { get; }
	public Quaternion localRotation { get; set; }
	public Vector3 localScale { get; set; }
	public Transform parent { get; set; }
	internal Transform parentInternal { get; set; }
	public Matrix4x4 worldToLocalMatrix { get; }
	public Matrix4x4 localToWorldMatrix { get; }
	public int childCount { get; }

	// Methods

	// RVA: 0x6DF Offset: 0x6DF VA: 0x6DF
	protected void .ctor() { }

	// RVA: 0x59A Offset: 0x59A VA: 0x59A
	public Vector3 get_position() { }

	// RVA: 0x59B Offset: 0x59B VA: 0x59B
	public Vector3 get_localPosition() { }

	// RVA: 0x59C Offset: 0x59C VA: 0x59C
	public void set_localPosition(Vector3 value) { }

	// RVA: 0x59D Offset: 0x59D VA: 0x59D
	public Vector3 get_forward() { }

	// RVA: 0x59E Offset: 0x59E VA: 0x59E
	public Quaternion get_rotation() { }

	// RVA: 0x59F Offset: 0x59F VA: 0x59F
	public Quaternion get_localRotation() { }

	// RVA: 0x5A0 Offset: 0x5A0 VA: 0x5A0
	public void set_localRotation(Quaternion value) { }

	// RVA: 0x5A1 Offset: 0x5A1 VA: 0x5A1
	public Vector3 get_localScale() { }

	// RVA: 0x5A2 Offset: 0x5A2 VA: 0x5A2
	public void set_localScale(Vector3 value) { }

	// RVA: 0xB12 Offset: 0xB12 VA: 0xB12
	public Transform get_parent() { }

	// RVA: 0x5A3 Offset: 0x5A3 VA: 0x5A3
	public void set_parent(Transform value) { }

	// RVA: 0xB13 Offset: 0xB13 VA: 0xB13
	internal Transform get_parentInternal() { }

	// RVA: 0x5A4 Offset: 0x5A4 VA: 0x5A4
	internal void set_parentInternal(Transform value) { }

	// RVA: 0xB14 Offset: 0xB14 VA: 0xB14
	private Transform GetParent() { }

	// RVA: 0x5A5 Offset: 0x5A5 VA: 0x5A5
	public void SetParent(Transform p) { }

	[FreeFunctionAttribute] // RVA: 0xB20 Offset: 0xB20 VA: 0xB20
	// RVA: 0x36E Offset: 0x36E VA: 0x36E
	public void SetParent(Transform parent, bool worldPositionStays) { }

	// RVA: 0x5A6 Offset: 0x5A6 VA: 0x5A6
	public Matrix4x4 get_worldToLocalMatrix() { }

	// RVA: 0x5A7 Offset: 0x5A7 VA: 0x5A7
	public Matrix4x4 get_localToWorldMatrix() { }

	// RVA: 0x36F Offset: 0x36F VA: 0x36F
	public Vector3 TransformPoint(Vector3 position) { }

	// RVA: 0x370 Offset: 0x370 VA: 0x370
	public Vector3 InverseTransformPoint(Vector3 position) { }

	[NativeMethodAttribute] // RVA: 0xB21 Offset: 0xB21 VA: 0xB21
	// RVA: 0xB15 Offset: 0xB15 VA: 0xB15
	public int get_childCount() { }

	// RVA: 0x6E0 Offset: 0x6E0 VA: 0x6E0
	public void SetAsFirstSibling() { }

	[FreeFunctionAttribute] // RVA: 0xB22 Offset: 0xB22 VA: 0xB22
	// RVA: 0xA1F Offset: 0xA1F VA: 0xA1F
	private static Transform FindRelativeTransformWithPath(Transform transform, string path, bool isActiveOnly) { }

	// RVA: 0x5B1 Offset: 0x5B1 VA: 0x5B1
	public Transform Find(string n) { }

	[FreeFunctionAttribute] // RVA: 0xB23 Offset: 0xB23 VA: 0xB23
	// RVA: 0x5B2 Offset: 0x5B2 VA: 0x5B2
	public bool IsChildOf(Transform parent) { }

	// RVA: 0xB16 Offset: 0xB16 VA: 0xB16 Slot: 4
	public IEnumerator GetEnumerator() { }

	[FreeFunctionAttribute] // RVA: 0xB24 Offset: 0xB24 VA: 0xB24
	[NativeThrowsAttribute] // RVA: 0xB24 Offset: 0xB24 VA: 0xB24
	// RVA: 0x5B3 Offset: 0x5B3 VA: 0x5B3
	public Transform GetChild(int index) { }

	// RVA: 0x5A8 Offset: 0x5A8 VA: 0x5A8
	private void get_position_Injected(out Vector3 ret) { }

	// RVA: 0x5A9 Offset: 0x5A9 VA: 0x5A9
	private void get_localPosition_Injected(out Vector3 ret) { }

	// RVA: 0x5AA Offset: 0x5AA VA: 0x5AA
	private void set_localPosition_Injected(ref Vector3 value) { }

	// RVA: 0x5AB Offset: 0x5AB VA: 0x5AB
	private void get_rotation_Injected(out Quaternion ret) { }

	// RVA: 0x5AC Offset: 0x5AC VA: 0x5AC
	private void get_localRotation_Injected(out Quaternion ret) { }

	// RVA: 0x5AD Offset: 0x5AD VA: 0x5AD
	private void set_localRotation_Injected(ref Quaternion value) { }

	// RVA: 0x5AE Offset: 0x5AE VA: 0x5AE
	private void get_localScale_Injected(out Vector3 ret) { }

	// RVA: 0x5AF Offset: 0x5AF VA: 0x5AF
	private void set_localScale_Injected(ref Vector3 value) { }

	// RVA: 0x5B0 Offset: 0x5B0 VA: 0x5B0
	private void get_worldToLocalMatrix_Injected(out Matrix4x4 ret) { }

	// RVA: 0x5B1 Offset: 0x5B1 VA: 0x5B1
	private void get_localToWorldMatrix_Injected(out Matrix4x4 ret) { }

	// RVA: 0x371 Offset: 0x371 VA: 0x371
	private void TransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }

	// RVA: 0x372 Offset: 0x372 VA: 0x372
	private void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }
}

// Namespace: 
private class Transform.Enumerator : IEnumerator // TypeDefIndex: 2023
{
	// Fields
	private Transform outer; // 0x8
	private int currentIndex; // 0xC

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x5B2 Offset: 0x5B2 VA: 0x5B2
	internal void .ctor(Transform outer) { }

	// RVA: 0xB17 Offset: 0xB17 VA: 0xB17 Slot: 5
	public object get_Current() { }

	// RVA: 0xB18 Offset: 0xB18 VA: 0xB18 Slot: 4
	public bool MoveNext() { }
}

// Namespace: UnityEngine.Experimental.U2D
[NativeHeaderAttribute] // RVA: 0x99B Offset: 0x99B VA: 0x99B
[NativeTypeAttribute] // RVA: 0x99B Offset: 0x99B VA: 0x99B
[RequiredByNativeCodeAttribute] // RVA: 0x99B Offset: 0x99B VA: 0x99B
[Serializable]
public struct SpriteBone // TypeDefIndex: 2024
{
	// Fields
	[SerializeField] // RVA: 0xA15 Offset: 0xA15 VA: 0xA15
	[NativeNameAttribute] // RVA: 0xA15 Offset: 0xA15 VA: 0xA15
	private string m_Name; // 0x0
	[SerializeField] // RVA: 0xA16 Offset: 0xA16 VA: 0xA16
	[NativeNameAttribute] // RVA: 0xA16 Offset: 0xA16 VA: 0xA16
	private Vector3 m_Position; // 0x4
	[NativeNameAttribute] // RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	[SerializeField] // RVA: 0xA17 Offset: 0xA17 VA: 0xA17
	private Quaternion m_Rotation; // 0x10
	[NativeNameAttribute] // RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	[SerializeField] // RVA: 0xA18 Offset: 0xA18 VA: 0xA18
	private float m_Length; // 0x20
	[NativeNameAttribute] // RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	[SerializeField] // RVA: 0xA19 Offset: 0xA19 VA: 0xA19
	private int m_ParentId; // 0x24
}

// Namespace: UnityEngine.Sprites
public sealed class DataUtility // TypeDefIndex: 2025
{
	// Methods

	// RVA: 0x58B Offset: 0x58B VA: 0x58B
	public static Vector4 GetInnerUV(Sprite sprite) { }

	// RVA: 0x58C Offset: 0x58C VA: 0x58C
	public static Vector4 GetOuterUV(Sprite sprite) { }

	// RVA: 0x58D Offset: 0x58D VA: 0x58D
	public static Vector4 GetPadding(Sprite sprite) { }

	// RVA: 0x58E Offset: 0x58E VA: 0x58E
	public static Vector2 GetMinSize(Sprite sprite) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0x99C Offset: 0x99C VA: 0x99C
[NativeTypeAttribute] // RVA: 0x99C Offset: 0x99C VA: 0x99C
public sealed class SpriteRenderer : Renderer // TypeDefIndex: 2026
{}

// Namespace: UnityEngine
public enum SpritePackingMode // TypeDefIndex: 2027
{
	// Fields
	public int value__; // 0x0
	public const SpritePackingMode Tight = 0;
	public const SpritePackingMode Rectangle = 1;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0x99D Offset: 0x99D VA: 0x99D
[ExcludeFromPresetAttribute] // RVA: 0x99D Offset: 0x99D VA: 0x99D
[NativeTypeAttribute] // RVA: 0x99D Offset: 0x99D VA: 0x99D
[NativeHeaderAttribute] // RVA: 0x99D Offset: 0x99D VA: 0x99D
[NativeHeaderAttribute] // RVA: 0x99D Offset: 0x99D VA: 0x99D
public sealed class Sprite : Object // TypeDefIndex: 2028
{
	// Properties
	public Bounds bounds { get; }
	public Rect rect { get; }
	public Vector4 border { get; }
	public Texture2D texture { get; }
	public float pixelsPerUnit { get; }
	public Texture2D associatedAlphaSplitTexture { get; }
	public Vector2 pivot { get; }
	public bool packed { get; }
	public SpritePackingMode packingMode { get; }
	public Rect textureRect { get; }
	public Vector2[] vertices { get; }
	public ushort[] triangles { get; }
	public Vector2[] uv { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB25 Offset: 0xB25 VA: 0xB25
	// RVA: 0x6DB Offset: 0x6DB VA: 0x6DB
	private void .ctor() { }

	// RVA: 0xAEF Offset: 0xAEF VA: 0xAEF
	internal int GetPackingMode() { }

	// RVA: 0xAF0 Offset: 0xAF0 VA: 0xAF0
	internal int GetPacked() { }

	// RVA: 0x57A Offset: 0x57A VA: 0x57A
	internal Rect GetTextureRect() { }

	// RVA: 0x57B Offset: 0x57B VA: 0x57B
	internal Vector4 GetInnerUVs() { }

	// RVA: 0x57C Offset: 0x57C VA: 0x57C
	internal Vector4 GetOuterUVs() { }

	// RVA: 0x57D Offset: 0x57D VA: 0x57D
	internal Vector4 GetPadding() { }

	// RVA: 0x57E Offset: 0x57E VA: 0x57E
	public Bounds get_bounds() { }

	// RVA: 0x57F Offset: 0x57F VA: 0x57F
	public Rect get_rect() { }

	// RVA: 0x580 Offset: 0x580 VA: 0x580
	public Vector4 get_border() { }

	// RVA: 0xAF1 Offset: 0xAF1 VA: 0xAF1
	public Texture2D get_texture() { }

	[NativeMethodAttribute] // RVA: 0xB26 Offset: 0xB26 VA: 0xB26
	// RVA: 0x20 Offset: 0x20 VA: 0x20
	public float get_pixelsPerUnit() { }

	[NativeMethodAttribute] // RVA: 0xB27 Offset: 0xB27 VA: 0xB27
	// RVA: 0xAF2 Offset: 0xAF2 VA: 0xAF2
	public Texture2D get_associatedAlphaSplitTexture() { }

	[NativeMethodAttribute] // RVA: 0xB28 Offset: 0xB28 VA: 0xB28
	// RVA: 0x581 Offset: 0x581 VA: 0x581
	public Vector2 get_pivot() { }

	// RVA: 0xAF3 Offset: 0xAF3 VA: 0xAF3
	public bool get_packed() { }

	// RVA: 0xAF4 Offset: 0xAF4 VA: 0xAF4
	public SpritePackingMode get_packingMode() { }

	// RVA: 0x582 Offset: 0x582 VA: 0x582
	public Rect get_textureRect() { }

	[FreeFunctionAttribute] // RVA: 0xB29 Offset: 0xB29 VA: 0xB29
	// RVA: 0xAF5 Offset: 0xAF5 VA: 0xAF5
	public Vector2[] get_vertices() { }

	[FreeFunctionAttribute] // RVA: 0xB2A Offset: 0xB2A VA: 0xB2A
	// RVA: 0xAF6 Offset: 0xAF6 VA: 0xAF6
	public ushort[] get_triangles() { }

	[FreeFunctionAttribute] // RVA: 0xB2B Offset: 0xB2B VA: 0xB2B
	// RVA: 0xAF7 Offset: 0xAF7 VA: 0xAF7
	public Vector2[] get_uv() { }

	// RVA: 0x583 Offset: 0x583 VA: 0x583
	private void GetTextureRect_Injected(out Rect ret) { }

	// RVA: 0x584 Offset: 0x584 VA: 0x584
	private void GetInnerUVs_Injected(out Vector4 ret) { }

	// RVA: 0x585 Offset: 0x585 VA: 0x585
	private void GetOuterUVs_Injected(out Vector4 ret) { }

	// RVA: 0x586 Offset: 0x586 VA: 0x586
	private void GetPadding_Injected(out Vector4 ret) { }

	// RVA: 0x587 Offset: 0x587 VA: 0x587
	private void get_bounds_Injected(out Bounds ret) { }

	// RVA: 0x588 Offset: 0x588 VA: 0x588
	private void get_rect_Injected(out Rect ret) { }

	// RVA: 0x589 Offset: 0x589 VA: 0x589
	private void get_border_Injected(out Vector4 ret) { }

	// RVA: 0x58A Offset: 0x58A VA: 0x58A
	private void get_pivot_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine.U2D
[NativeHeaderAttribute] // RVA: 0x99E Offset: 0x99E VA: 0x99E
[NativeHeaderAttribute] // RVA: 0x99E Offset: 0x99E VA: 0x99E
[StaticAccessorAttribute] // RVA: 0x99E Offset: 0x99E VA: 0x99E
public class SpriteAtlasManager // TypeDefIndex: 2029
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	[CompilerGeneratedAttribute] // RVA: 0xA1A Offset: 0xA1A VA: 0xA1A
	private static Action<string, Action<SpriteAtlas>> atlasRequested; // 0x0
	[DebuggerBrowsableAttribute] // RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	[CompilerGeneratedAttribute] // RVA: 0xA1B Offset: 0xA1B VA: 0xA1B
	private static Action<SpriteAtlas> atlasRegistered; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xA1C Offset: 0xA1C VA: 0xA1C
	private static Action<SpriteAtlas> <>f__mg$cache0; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xB2C Offset: 0xB2C VA: 0xB2C
	// RVA: 0xB19 Offset: 0xB19 VA: 0xB19
	private static bool RequestAtlas(string tag) { }

	// RVA: 0x6E1 Offset: 0x6E1 VA: 0x6E1
	public static void add_atlasRegistered(Action<SpriteAtlas> value) { }

	// RVA: 0x6E2 Offset: 0x6E2 VA: 0x6E2
	public static void remove_atlasRegistered(Action<SpriteAtlas> value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB2D Offset: 0xB2D VA: 0xB2D
	// RVA: 0x6E3 Offset: 0x6E3 VA: 0x6E3
	private static void PostRegisteredAtlas(SpriteAtlas spriteAtlas) { }

	// RVA: 0x6E4 Offset: 0x6E4 VA: 0x6E4
	internal static void Register(SpriteAtlas spriteAtlas) { }

	// RVA: 0xF4C Offset: 0xF4C VA: 0xF4C
	private static void .cctor() { }
}

// Namespace: UnityEngine.U2D
[NativeHeaderAttribute] // RVA: 0x99F Offset: 0x99F VA: 0x99F
[NativeTypeAttribute] // RVA: 0x99F Offset: 0x99F VA: 0x99F
public class SpriteAtlas : Object // TypeDefIndex: 2030
{
	// Methods

	// RVA: 0x5B4 Offset: 0x5B4 VA: 0x5B4
	public bool CanBindTo(Sprite sprite) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2031
{}

// Namespace: UnityEngine
public enum FontStyle // TypeDefIndex: 2032
{
	// Fields
	public int value__; // 0x0
	public const FontStyle Normal = 0;
	public const FontStyle Bold = 1;
	public const FontStyle Italic = 2;
	public const FontStyle BoldAndItalic = 3;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xB6E Offset: 0xB6E VA: 0xB6E
internal enum TextGenerationError // TypeDefIndex: 2033
{
	// Fields
	public int value__; // 0x0
	public const TextGenerationError None = 0;
	public const TextGenerationError CustomSizeOnNonDynamicFont = 1;
	public const TextGenerationError CustomStyleOnNonDynamicFont = 2;
	public const TextGenerationError NoFont = 4;
}

// Namespace: UnityEngine
public struct TextGenerationSettings // TypeDefIndex: 2034
{
	// Fields
	public Font font; // 0x0
	public Color color; // 0x4
	public int fontSize; // 0x14
	public float lineSpacing; // 0x18
	public bool richText; // 0x1C
	public float scaleFactor; // 0x20
	public FontStyle fontStyle; // 0x24
	public TextAnchor textAnchor; // 0x28
	public bool alignByGeometry; // 0x2C
	public bool resizeTextForBestFit; // 0x2D
	public int resizeTextMinSize; // 0x30
	public int resizeTextMaxSize; // 0x34
	public bool updateBounds; // 0x38
	public VerticalWrapMode verticalOverflow; // 0x3C
	public HorizontalWrapMode horizontalOverflow; // 0x40
	public Vector2 generationExtents; // 0x44
	public Vector2 pivot; // 0x4C
	public bool generateOutOfBounds; // 0x54

	// Methods

	// RVA: 0xA22 Offset: 0xA22 VA: 0xA22
	private bool CompareColors(Color left, Color right) { }

	// RVA: 0xA23 Offset: 0xA23 VA: 0xA23
	private bool CompareVector2(Vector2 left, Vector2 right) { }

	// RVA: 0x5C3 Offset: 0x5C3 VA: 0x5C3
	public bool Equals(TextGenerationSettings other) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB6F Offset: 0xB6F VA: 0xB6F
[NativeHeaderAttribute] // RVA: 0xB6F Offset: 0xB6F VA: 0xB6F
public sealed class TextGenerator : IDisposable // TypeDefIndex: 2035
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private string m_LastString; // 0xC
	private TextGenerationSettings m_LastSettings; // 0x10
	private bool m_HasGenerated; // 0x68
	private TextGenerationError m_LastValid; // 0x6C
	private readonly List<UIVertex> m_Verts; // 0x70
	private readonly List<UICharInfo> m_Characters; // 0x74
	private readonly List<UILineInfo> m_Lines; // 0x78
	private bool m_CachedVerts; // 0x7C
	private bool m_CachedCharacters; // 0x7D
	private bool m_CachedLines; // 0x7E

	// Properties
	public int characterCountVisible { get; }
	public IList<UIVertex> verts { get; }
	public IList<UICharInfo> characters { get; }
	public IList<UILineInfo> lines { get; }
	public Rect rectExtents { get; }
	public int characterCount { get; }
	public int lineCount { get; }

	// Methods

	// RVA: 0x6FC Offset: 0x6FC VA: 0x6FC
	public void .ctor() { }

	// RVA: 0x5BE Offset: 0x5BE VA: 0x5BE
	public void .ctor(int initialCapacity) { }

	// RVA: 0x6FD Offset: 0x6FD VA: 0x6FD Slot: 1
	protected override void Finalize() { }

	// RVA: 0x6FE Offset: 0x6FE VA: 0x6FE Slot: 4
	private void System.IDisposable.Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xB76 Offset: 0xB76 VA: 0xB76
	// RVA: 0xB28 Offset: 0xB28 VA: 0xB28
	public int get_characterCountVisible() { }

	// RVA: 0x381 Offset: 0x381 VA: 0x381
	private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings) { }

	// RVA: 0x6FF Offset: 0x6FF VA: 0x6FF
	public void Invalidate() { }

	// RVA: 0x5BF Offset: 0x5BF VA: 0x5BF
	public void GetCharacters(List<UICharInfo> characters) { }

	// RVA: 0x5C0 Offset: 0x5C0 VA: 0x5C0
	public void GetLines(List<UILineInfo> lines) { }

	// RVA: 0x5C1 Offset: 0x5C1 VA: 0x5C1
	public void GetVertices(List<UIVertex> vertices) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	public float GetPreferredWidth(string str, TextGenerationSettings settings) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	public float GetPreferredHeight(string str, TextGenerationSettings settings) { }

	// RVA: 0x144 Offset: 0x144 VA: 0x144
	public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context) { }

	// RVA: 0xA24 Offset: 0xA24 VA: 0xA24
	public bool Populate(string str, TextGenerationSettings settings) { }

	// RVA: 0xA25 Offset: 0xA25 VA: 0xA25
	private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings) { }

	// RVA: 0xA26 Offset: 0xA26 VA: 0xA26
	private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings) { }

	// RVA: 0xB29 Offset: 0xB29 VA: 0xB29
	public IList<UIVertex> get_verts() { }

	// RVA: 0xB2A Offset: 0xB2A VA: 0xB2A
	public IList<UICharInfo> get_characters() { }

	// RVA: 0xB2B Offset: 0xB2B VA: 0xB2B
	public IList<UILineInfo> get_lines() { }

	// RVA: 0x5C2 Offset: 0x5C2 VA: 0x5C2
	public Rect get_rectExtents() { }

	// RVA: 0xB2C Offset: 0xB2C VA: 0xB2C
	public int get_characterCount() { }

	// RVA: 0xB2D Offset: 0xB2D VA: 0xB2D
	public int get_lineCount() { }

	[NativeMethodAttribute] // RVA: 0xB77 Offset: 0xB77 VA: 0xB77
	// RVA: 0x276 Offset: 0x276 VA: 0x276
	private static IntPtr Internal_Create() { }

	[NativeMethodAttribute] // RVA: 0xB78 Offset: 0xB78 VA: 0xB78
	// RVA: 0x700 Offset: 0x700 VA: 0x700
	private static void Internal_Destroy(IntPtr ptr) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, out TextGenerationError error) { }

	[NativeThrowsAttribute] // RVA: 0xB79 Offset: 0xB79 VA: 0xB79
	// RVA: 0x5C3 Offset: 0x5C3 VA: 0x5C3
	private void GetVerticesInternal(object vertices) { }

	[NativeThrowsAttribute] // RVA: 0xB7A Offset: 0xB7A VA: 0xB7A
	// RVA: 0x5C4 Offset: 0x5C4 VA: 0x5C4
	private void GetCharactersInternal(object characters) { }

	[NativeThrowsAttribute] // RVA: 0xB7B Offset: 0xB7B VA: 0xB7B
	// RVA: 0x5C5 Offset: 0x5C5 VA: 0x5C5
	private void GetLinesInternal(object lines) { }

	// RVA: 0x5C6 Offset: 0x5C6 VA: 0x5C6
	private void get_rectExtents_Injected(out Rect ret) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private bool Populate_Internal_Injected(string str, Font font, ref Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error) { }
}

// Namespace: UnityEngine
public enum TextAnchor // TypeDefIndex: 2036
{
	// Fields
	public int value__; // 0x0
	public const TextAnchor UpperLeft = 0;
	public const TextAnchor UpperCenter = 1;
	public const TextAnchor UpperRight = 2;
	public const TextAnchor MiddleLeft = 3;
	public const TextAnchor MiddleCenter = 4;
	public const TextAnchor MiddleRight = 5;
	public const TextAnchor LowerLeft = 6;
	public const TextAnchor LowerCenter = 7;
	public const TextAnchor LowerRight = 8;
}

// Namespace: UnityEngine
public enum HorizontalWrapMode // TypeDefIndex: 2037
{
	// Fields
	public int value__; // 0x0
	public const HorizontalWrapMode Wrap = 0;
	public const HorizontalWrapMode Overflow = 1;
}

// Namespace: UnityEngine
public enum VerticalWrapMode // TypeDefIndex: 2038
{
	// Fields
	public int value__; // 0x0
	public const VerticalWrapMode Truncate = 0;
	public const VerticalWrapMode Overflow = 1;
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB70 Offset: 0xB70 VA: 0xB70
public struct UICharInfo // TypeDefIndex: 2039
{
	// Fields
	public Vector2 cursorPos; // 0x0
	public float charWidth; // 0x8
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB71 Offset: 0xB71 VA: 0xB71
public struct UILineInfo // TypeDefIndex: 2040
{
	// Fields
	public int startCharIdx; // 0x0
	public int height; // 0x4
	public float topY; // 0x8
	public float leading; // 0xC
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB72 Offset: 0xB72 VA: 0xB72
public struct UIVertex // TypeDefIndex: 2041
{
	// Fields
	public Vector3 position; // 0x0
	public Vector3 normal; // 0xC
	public Vector4 tangent; // 0x18
	public Color32 color; // 0x28
	public Vector2 uv0; // 0x2C
	public Vector2 uv1; // 0x34
	public Vector2 uv2; // 0x3C
	public Vector2 uv3; // 0x44
	private static readonly Color32 s_DefaultColor; // 0x0
	private static readonly Vector4 s_DefaultTangent; // 0x4
	public static UIVertex simpleVert; // 0x14

	// Methods

	// RVA: 0xF54 Offset: 0xF54 VA: 0xF54
	private static void .cctor() { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xB73 Offset: 0xB73 VA: 0xB73
[NativeClassAttribute] // RVA: 0xB73 Offset: 0xB73 VA: 0xB73
[NativeHeaderAttribute] // RVA: 0xB73 Offset: 0xB73 VA: 0xB73
[NativeHeaderAttribute] // RVA: 0xB73 Offset: 0xB73 VA: 0xB73
public sealed class Font : Object // TypeDefIndex: 2042
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xB74 Offset: 0xB74 VA: 0xB74
	[CompilerGeneratedAttribute] // RVA: 0xB74 Offset: 0xB74 VA: 0xB74
	private static Action<Font> textureRebuilt; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xB75 Offset: 0xB75 VA: 0xB75
	[DebuggerBrowsableAttribute] // RVA: 0xB75 Offset: 0xB75 VA: 0xB75
	private Font.FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0xC

	// Properties
	public Material material { get; }
	public bool dynamic { get; }
	public int fontSize { get; }

	// Methods

	// RVA: 0x6F8 Offset: 0x6F8 VA: 0x6F8
	public static void add_textureRebuilt(Action<Font> value) { }

	// RVA: 0x6F9 Offset: 0x6F9 VA: 0x6F9
	public static void remove_textureRebuilt(Action<Font> value) { }

	// RVA: 0xB25 Offset: 0xB25 VA: 0xB25
	public Material get_material() { }

	// RVA: 0xB26 Offset: 0xB26 VA: 0xB26
	public bool get_dynamic() { }

	// RVA: 0xB27 Offset: 0xB27 VA: 0xB27
	public int get_fontSize() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xB7C Offset: 0xB7C VA: 0xB7C
	// RVA: 0x6FA Offset: 0x6FA VA: 0x6FA
	internal static void InvokeTextureRebuilt_Internal(Font font) { }

	// RVA: 0x5C1 Offset: 0x5C1 VA: 0x5C1
	public bool HasCharacter(char c) { }

	// RVA: 0x5C2 Offset: 0x5C2 VA: 0x5C2
	private bool HasCharacter(int c) { }
}

// Namespace: 
public sealed class Font.FontTextureRebuildCallback : MulticastDelegate // TypeDefIndex: 2043
{
	// Methods

	// RVA: 0x380 Offset: 0x380 VA: 0x380
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x6FB Offset: 0x6FB VA: 0x6FB Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA21 Offset: 0xA21 VA: 0xA21 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5BD Offset: 0x5BD VA: 0x5BD Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2044
{}

// Namespace: UnityEngine.Experimental.Animations
public interface IAnimationJobPlayable : IPlayable // TypeDefIndex: 2045
{}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xB7E Offset: 0xB7E VA: 0xB7E
[RequiredByNativeCodeAttribute] // RVA: 0xB7E Offset: 0xB7E VA: 0xB7E
public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 2046
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB7F Offset: 0xB7F VA: 0xB7F
public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 2047
{
	// Methods

	// RVA: 0x704 Offset: 0x704 VA: 0x704
	protected void .ctor() { }

	// RVA: 0x105 Offset: 0x105 VA: 0x105 Slot: 4
	public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x106 Offset: 0x106 VA: 0x106 Slot: 5
	public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x107 Offset: 0x107 VA: 0x107 Slot: 6
	public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x108 Offset: 0x108 VA: 0x108 Slot: 7
	public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x109 Offset: 0x109 VA: 0x109 Slot: 8
	public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) { }

	// RVA: 0x383 Offset: 0x383 VA: 0x383 Slot: 9
	public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash) { }

	// RVA: 0x384 Offset: 0x384 VA: 0x384 Slot: 10
	public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80 Slot: 11
	public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81 Slot: 12
	public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x82 Offset: 0x82 VA: 0x82 Slot: 13
	public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83 Slot: 14
	public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84 Slot: 15
	public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) { }

	// RVA: 0x10A Offset: 0x10A VA: 0x10A Slot: 16
	public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller) { }

	// RVA: 0x10B Offset: 0x10B VA: 0x10B Slot: 17
	public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xB80 Offset: 0xB80 VA: 0xB80
[StaticAccessorAttribute] // RVA: 0xB80 Offset: 0xB80 VA: 0xB80
[NativeHeaderAttribute] // RVA: 0xB80 Offset: 0xB80 VA: 0xB80
[NativeHeaderAttribute] // RVA: 0xB80 Offset: 0xB80 VA: 0xB80
public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 2048
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0x5C7 Offset: 0x5C7 VA: 0x5C7 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5C4 Offset: 0x5C4 VA: 0x5C4 Slot: 4
	public bool Equals(AnimationClipPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xB81 Offset: 0xB81 VA: 0xB81
[RequiredByNativeCodeAttribute] // RVA: 0xB81 Offset: 0xB81 VA: 0xB81
[NativeHeaderAttribute] // RVA: 0xB81 Offset: 0xB81 VA: 0xB81
public struct AnimationHumanStream // TypeDefIndex: 2049
{
	// Fields
	private IntPtr stream; // 0x0
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB82 Offset: 0xB82 VA: 0xB82
[NativeHeaderAttribute] // RVA: 0xB82 Offset: 0xB82 VA: 0xB82
[StaticAccessorAttribute] // RVA: 0xB82 Offset: 0xB82 VA: 0xB82
[RequiredByNativeCodeAttribute] // RVA: 0xB82 Offset: 0xB82 VA: 0xB82
[NativeHeaderAttribute] // RVA: 0xB82 Offset: 0xB82 VA: 0xB82
public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 2050
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5C8 Offset: 0x5C8 VA: 0x5C8
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5C9 Offset: 0x5C9 VA: 0x5C9 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5C5 Offset: 0x5C5 VA: 0x5C5 Slot: 4
	public bool Equals(AnimationLayerMixerPlayable other) { }

	// RVA: 0xF55 Offset: 0xF55 VA: 0xF55
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB83 Offset: 0xB83 VA: 0xB83
[NativeHeaderAttribute] // RVA: 0xB83 Offset: 0xB83 VA: 0xB83
[NativeHeaderAttribute] // RVA: 0xB83 Offset: 0xB83 VA: 0xB83
[RequiredByNativeCodeAttribute] // RVA: 0xB83 Offset: 0xB83 VA: 0xB83
[StaticAccessorAttribute] // RVA: 0xB83 Offset: 0xB83 VA: 0xB83
public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2051
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5CA Offset: 0x5CA VA: 0x5CA
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5CB Offset: 0x5CB VA: 0x5CB Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5C6 Offset: 0x5C6 VA: 0x5C6 Slot: 4
	public bool Equals(AnimationMixerPlayable other) { }

	// RVA: 0xF56 Offset: 0xF56 VA: 0xF56
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xB84 Offset: 0xB84 VA: 0xB84
[StaticAccessorAttribute] // RVA: 0xB84 Offset: 0xB84 VA: 0xB84
[NativeHeaderAttribute] // RVA: 0xB84 Offset: 0xB84 VA: 0xB84
internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2052
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5CC Offset: 0x5CC VA: 0x5CC
	private void .ctor(PlayableHandle handle) { }

	// RVA: 0x5CD Offset: 0x5CD VA: 0x5CD Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5C7 Offset: 0x5C7 VA: 0x5C7 Slot: 4
	public bool Equals(AnimationMotionXToDeltaPlayable other) { }

	// RVA: 0xF57 Offset: 0xF57 VA: 0xF57
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xB85 Offset: 0xB85 VA: 0xB85
[NativeHeaderAttribute] // RVA: 0xB85 Offset: 0xB85 VA: 0xB85
[NativeHeaderAttribute] // RVA: 0xB85 Offset: 0xB85 VA: 0xB85
[NativeHeaderAttribute] // RVA: 0xB85 Offset: 0xB85 VA: 0xB85
[StaticAccessorAttribute] // RVA: 0xB85 Offset: 0xB85 VA: 0xB85
internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2053
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5CE Offset: 0x5CE VA: 0x5CE
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5CF Offset: 0x5CF VA: 0x5CF Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5C8 Offset: 0x5C8 VA: 0x5C8 Slot: 4
	public bool Equals(AnimationOffsetPlayable other) { }

	// RVA: 0xF58 Offset: 0xF58 VA: 0xF58
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[StaticAccessorAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
[NativeHeaderAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
[NativeHeaderAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
[NativeHeaderAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
[RequiredByNativeCodeAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
[NativeHeaderAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
[NativeHeaderAttribute] // RVA: 0xB86 Offset: 0xB86 VA: 0xB86
public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2054
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xB87 Offset: 0xB87 VA: 0xB87
[StaticAccessorAttribute] // RVA: 0xB87 Offset: 0xB87 VA: 0xB87
[NativeHeaderAttribute] // RVA: 0xB87 Offset: 0xB87 VA: 0xB87
[NativeHeaderAttribute] // RVA: 0xB87 Offset: 0xB87 VA: 0xB87
[NativeHeaderAttribute] // RVA: 0xB87 Offset: 0xB87 VA: 0xB87
internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2055
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationPosePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5D0 Offset: 0x5D0 VA: 0x5D0
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5D1 Offset: 0x5D1 VA: 0x5D1 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5C9 Offset: 0x5C9 VA: 0x5C9 Slot: 4
	public bool Equals(AnimationPosePlayable other) { }

	// RVA: 0xF59 Offset: 0xF59 VA: 0xF59
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB88 Offset: 0xB88 VA: 0xB88
[NativeHeaderAttribute] // RVA: 0xB88 Offset: 0xB88 VA: 0xB88
[RequiredByNativeCodeAttribute] // RVA: 0xB88 Offset: 0xB88 VA: 0xB88
[StaticAccessorAttribute] // RVA: 0xB88 Offset: 0xB88 VA: 0xB88
[NativeHeaderAttribute] // RVA: 0xB88 Offset: 0xB88 VA: 0xB88
internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2056
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5D2 Offset: 0x5D2 VA: 0x5D2
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5D3 Offset: 0x5D3 VA: 0x5D3 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5CA Offset: 0x5CA VA: 0x5CA Slot: 4
	public bool Equals(AnimationRemoveScalePlayable other) { }

	// RVA: 0xF5A Offset: 0xF5A VA: 0xF5A
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xB89 Offset: 0xB89 VA: 0xB89
[NativeHeaderAttribute] // RVA: 0xB89 Offset: 0xB89 VA: 0xB89
[RequiredByNativeCodeAttribute] // RVA: 0xB89 Offset: 0xB89 VA: 0xB89
[StaticAccessorAttribute] // RVA: 0xB89 Offset: 0xB89 VA: 0xB89
[NativeHeaderAttribute] // RVA: 0xB89 Offset: 0xB89 VA: 0xB89
public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable<AnimationScriptPlayable>, IPlayable // TypeDefIndex: 2057
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationScriptPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5DC Offset: 0x5DC VA: 0x5DC
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5DD Offset: 0x5DD VA: 0x5DD Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5CC Offset: 0x5CC VA: 0x5CC Slot: 4
	public bool Equals(AnimationScriptPlayable other) { }

	// RVA: 0xF5C Offset: 0xF5C VA: 0xF5C
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
[NativeHeaderAttribute] // RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
[NativeHeaderAttribute] // RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
public struct AnimationStream // TypeDefIndex: 2058
{
	// Fields
	private uint m_AnimatorBindingsVersion; // 0x0
	private IntPtr constant; // 0x4
	private IntPtr input; // 0x8
	private IntPtr output; // 0xC
	private IntPtr workspace; // 0x10
	private IntPtr inputStreamAccessor; // 0x14
	private IntPtr animationHandleBinder; // 0x18
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
[UsedByNativeCodeAttribute] // RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
[NativeHeaderAttribute] // RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
public struct AnimatorClipInfo // TypeDefIndex: 2059
{
	// Fields
	private int m_ClipInstanceID; // 0x0
	private float m_Weight; // 0x4
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB8C Offset: 0xB8C VA: 0xB8C
[NativeHeaderAttribute] // RVA: 0xB8C Offset: 0xB8C VA: 0xB8C
public struct AnimatorStateInfo // TypeDefIndex: 2060
{
	// Fields
	private int m_Name; // 0x0
	private int m_Path; // 0x4
	private int m_FullPath; // 0x8
	private float m_NormalizedTime; // 0xC
	private float m_Length; // 0x10
	private float m_Speed; // 0x14
	private float m_SpeedMultiplier; // 0x18
	private int m_Tag; // 0x1C
	private int m_Loop; // 0x20
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB8D Offset: 0xB8D VA: 0xB8D
[RequiredByNativeCodeAttribute] // RVA: 0xB8D Offset: 0xB8D VA: 0xB8D
public struct AnimatorTransitionInfo // TypeDefIndex: 2061
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB97 Offset: 0xB97 VA: 0xB97
	private int m_FullPath; // 0x0
	[NativeNameAttribute] // RVA: 0xB98 Offset: 0xB98 VA: 0xB98
	private int m_UserName; // 0x4
	[NativeNameAttribute] // RVA: 0xB99 Offset: 0xB99 VA: 0xB99
	private int m_Name; // 0x8
	[NativeNameAttribute] // RVA: 0xB9A Offset: 0xB9A VA: 0xB9A
	private bool m_HasFixedDuration; // 0xC
	[NativeNameAttribute] // RVA: 0xB9B Offset: 0xB9B VA: 0xB9B
	private float m_Duration; // 0x10
	[NativeNameAttribute] // RVA: 0xB9C Offset: 0xB9C VA: 0xB9C
	private float m_NormalizedTime; // 0x14
	[NativeNameAttribute] // RVA: 0xB9D Offset: 0xB9D VA: 0xB9D
	private bool m_AnyState; // 0x18
	[NativeNameAttribute] // RVA: 0xB9E Offset: 0xB9E VA: 0xB9E
	private int m_TransitionType; // 0x1C
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
[NativeHeaderAttribute] // RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
[NativeHeaderAttribute] // RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
[NativeHeaderAttribute] // RVA: 0xB8E Offset: 0xB8E VA: 0xB8E
public class Animator : Behaviour // TypeDefIndex: 2062
{
	// Properties
	public bool hasBoundPlayables { get; }

	// Methods

	// RVA: 0x5D7 Offset: 0x5D7 VA: 0x5D7
	public void SetTrigger(string name) { }

	// RVA: 0x5D8 Offset: 0x5D8 VA: 0x5D8
	public void ResetTrigger(string name) { }

	[NativeMethodAttribute] // RVA: 0xBA5 Offset: 0xBA5 VA: 0xBA5
	// RVA: 0xB2E Offset: 0xB2E VA: 0xB2E
	public bool get_hasBoundPlayables() { }

	[FreeFunctionAttribute] // RVA: 0xBA6 Offset: 0xBA6 VA: 0xBA6
	// RVA: 0x5D9 Offset: 0x5D9 VA: 0x5D9
	private void SetTriggerString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xBA7 Offset: 0xBA7 VA: 0xBA7
	// RVA: 0x5DA Offset: 0x5DA VA: 0x5DA
	private void ResetTriggerString(string name) { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
[NativeHeaderAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
[NativeHeaderAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
[RequiredByNativeCodeAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
[NativeHeaderAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
[StaticAccessorAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
[NativeHeaderAttribute] // RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2063
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0x5D4 Offset: 0x5D4 VA: 0x5D4
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x5D5 Offset: 0x5D5 VA: 0x5D5 Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5D6 Offset: 0x5D6 VA: 0x5D6
	public void SetHandle(PlayableHandle handle) { }

	// RVA: 0x5CB Offset: 0x5CB VA: 0x5CB Slot: 4
	public bool Equals(AnimatorControllerPlayable other) { }

	// RVA: 0xF5B Offset: 0xF5B VA: 0xF5B
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB90 Offset: 0xB90 VA: 0xB90
[NativeHeaderAttribute] // RVA: 0xB90 Offset: 0xB90 VA: 0xB90
[DefaultMemberAttribute] // RVA: 0xB90 Offset: 0xB90 VA: 0xB90
[NativeHeaderAttribute] // RVA: 0xB90 Offset: 0xB90 VA: 0xB90
public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2064
{
	// Fields
	internal AnimatorOverrideController.OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0xC

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBA8 Offset: 0xBA8 VA: 0xBA8
	[NativeConditionalAttribute] // RVA: 0xBA8 Offset: 0xBA8 VA: 0xBA8
	// RVA: 0x702 Offset: 0x702 VA: 0x702
	internal static void OnInvalidateOverrideController(AnimatorOverrideController controller) { }
}

// Namespace: 
internal sealed class AnimatorOverrideController.OnOverrideControllerDirtyCallback : MulticastDelegate // TypeDefIndex: 2065
{
	// Methods

	// RVA: 0x382 Offset: 0x382 VA: 0x382
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x703 Offset: 0x703 VA: 0x703 Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA27 Offset: 0xA27 VA: 0xA27 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x5DB Offset: 0x5DB VA: 0x5DB Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeTypeAttribute] // RVA: 0xB91 Offset: 0xB91 VA: 0xB91
[NativeHeaderAttribute] // RVA: 0xB91 Offset: 0xB91 VA: 0xB91
[RequiredByNativeCodeAttribute] // RVA: 0xB91 Offset: 0xB91 VA: 0xB91
public struct SkeletonBone // TypeDefIndex: 2066
{
	// Fields
	[NativeNameAttribute] // RVA: 0xB9F Offset: 0xB9F VA: 0xB9F
	public string name; // 0x0
	[NativeNameAttribute] // RVA: 0xBA0 Offset: 0xBA0 VA: 0xBA0
	internal string parentName; // 0x4
	[NativeNameAttribute] // RVA: 0xBA1 Offset: 0xBA1 VA: 0xBA1
	public Vector3 position; // 0x8
	[NativeNameAttribute] // RVA: 0xBA2 Offset: 0xBA2 VA: 0xBA2
	public Quaternion rotation; // 0x14
	[NativeNameAttribute] // RVA: 0xBA3 Offset: 0xBA3 VA: 0xBA3
	public Vector3 scale; // 0x24
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB92 Offset: 0xB92 VA: 0xB92
[NativeHeaderAttribute] // RVA: 0xB92 Offset: 0xB92 VA: 0xB92
[NativeTypeAttribute] // RVA: 0xB92 Offset: 0xB92 VA: 0xB92
public struct HumanLimit // TypeDefIndex: 2067
{
	// Fields
	private Vector3 m_Min; // 0x0
	private Vector3 m_Max; // 0xC
	private Vector3 m_Center; // 0x18
	private float m_AxisLength; // 0x24
	private int m_UseDefaultValues; // 0x28
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB93 Offset: 0xB93 VA: 0xB93
[NativeTypeAttribute] // RVA: 0xB93 Offset: 0xB93 VA: 0xB93
[NativeHeaderAttribute] // RVA: 0xB93 Offset: 0xB93 VA: 0xB93
public struct HumanBone // TypeDefIndex: 2068
{
	// Fields
	private string m_BoneName; // 0x0
	private string m_HumanName; // 0x4
	[NativeNameAttribute] // RVA: 0xBA4 Offset: 0xBA4 VA: 0xBA4
	public HumanLimit limit; // 0x8
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xB94 Offset: 0xB94 VA: 0xB94
[ExcludeFromObjectFactoryAttribute] // RVA: 0xB94 Offset: 0xB94 VA: 0xB94
[UsedByNativeCodeAttribute] // RVA: 0xB94 Offset: 0xB94 VA: 0xB94
public class RuntimeAnimatorController : Object // TypeDefIndex: 2069
{}

// Namespace: UnityEngine
internal enum AnimationEventSource // TypeDefIndex: 2070
{
	// Fields
	public int value__; // 0x0
	public const AnimationEventSource NoSource = 0;
	public const AnimationEventSource Legacy = 1;
	public const AnimationEventSource Animator = 2;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xB95 Offset: 0xB95 VA: 0xB95
[Serializable]
public sealed class AnimationEvent // TypeDefIndex: 2071
{
	// Fields
	internal float m_Time; // 0x8
	internal string m_FunctionName; // 0xC
	internal string m_StringParameter; // 0x10
	internal Object m_ObjectReferenceParameter; // 0x14
	internal float m_FloatParameter; // 0x18
	internal int m_IntParameter; // 0x1C
	internal int m_MessageOptions; // 0x20
	internal AnimationEventSource m_Source; // 0x24
	internal AnimationState m_StateSender; // 0x28
	internal AnimatorStateInfo m_AnimatorStateInfo; // 0x2C
	internal AnimatorClipInfo m_AnimatorClipInfo; // 0x50

	// Methods

	// RVA: 0x701 Offset: 0x701 VA: 0x701
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xB96 Offset: 0xB96 VA: 0xB96
public sealed class AnimationState : TrackedReference // TypeDefIndex: 2072
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2073
{}

// Namespace: UnityEngine
internal class AudioExtensionDefinition // TypeDefIndex: 2074
{
	// Fields
	private string assemblyName; // 0x8
	private string extensionNamespace; // 0xC
	private string extensionTypeName; // 0x10
	private Type extensionType; // 0x14

	// Methods

	// RVA: 0xB30 Offset: 0xB30 VA: 0xB30
	public Type GetExtensionType() { }
}

// Namespace: UnityEngine
internal class AudioSpatializerExtensionDefinition // TypeDefIndex: 2075
{
	// Fields
	public PropertyName spatializerName; // 0x8
	public AudioExtensionDefinition definition; // 0xC
}

// Namespace: UnityEngine
internal class AudioAmbisonicExtensionDefinition // TypeDefIndex: 2076
{
	// Fields
	public PropertyName ambisonicPluginName; // 0x8
	public AudioExtensionDefinition definition; // 0xC
}

// Namespace: UnityEngine
internal class AudioListenerExtension : ScriptableObject // TypeDefIndex: 2077
{
	// Fields
	[SerializeField] // RVA: 0xBB1 Offset: 0xBB1 VA: 0xBB1
	private AudioListener m_audioListener; // 0xC

	// Properties
	public AudioListener audioListener { get; set; }

	// Methods

	// RVA: 0x709 Offset: 0x709 VA: 0x709
	public void .ctor() { }

	// RVA: 0xB35 Offset: 0xB35 VA: 0xB35
	public AudioListener get_audioListener() { }

	// RVA: 0x5EA Offset: 0x5EA VA: 0x5EA
	public void set_audioListener(AudioListener value) { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21 Slot: 4
	public virtual float ReadExtensionProperty(PropertyName propertyName) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11 Slot: 5
	public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue) { }

	// RVA: 0x70A Offset: 0x70A VA: 0x70A Slot: 6
	public virtual void ExtensionUpdate() { }
}

// Namespace: UnityEngine
internal class AudioSourceExtension : ScriptableObject // TypeDefIndex: 2078
{
	// Fields
	[SerializeField] // RVA: 0xBB2 Offset: 0xBB2 VA: 0xBB2
	private AudioSource m_audioSource; // 0xC
	internal int m_ExtensionManagerUpdateIndex; // 0x10

	// Properties
	public AudioSource audioSource { get; set; }

	// Methods

	// RVA: 0x70D Offset: 0x70D VA: 0x70D
	public void .ctor() { }

	// RVA: 0xB3B Offset: 0xB3B VA: 0xB3B
	public AudioSource get_audioSource() { }

	// RVA: 0x5EF Offset: 0x5EF VA: 0x5EF
	public void set_audioSource(AudioSource value) { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23 Slot: 4
	public virtual float ReadExtensionProperty(PropertyName propertyName) { }

	// RVA: 0x12 Offset: 0x12 VA: 0x12 Slot: 5
	public virtual void WriteExtensionProperty(PropertyName propertyName, float propertyValue) { }

	// RVA: 0x70E Offset: 0x70E VA: 0x70E Slot: 6
	public virtual void Play() { }

	// RVA: 0x70F Offset: 0x70F VA: 0x70F Slot: 7
	public virtual void Stop() { }

	// RVA: 0x710 Offset: 0x710 VA: 0x710 Slot: 8
	public virtual void ExtensionUpdate() { }

	// RVA: 0x711 Offset: 0x711 VA: 0x711
	public void OnDestroy() { }
}

// Namespace: UnityEngine
internal sealed class AudioExtensionManager // TypeDefIndex: 2079
{
	// Fields
	private static List<AudioSpatializerExtensionDefinition> m_ListenerSpatializerExtensionDefinitions; // 0x0
	private static List<AudioSpatializerExtensionDefinition> m_SourceSpatializerExtensionDefinitions; // 0x4
	private static List<AudioAmbisonicExtensionDefinition> m_SourceAmbisonicDecoderExtensionDefinitions; // 0x8
	private static List<AudioSourceExtension> m_SourceExtensionsToUpdate; // 0xC
	private static int m_NextStopIndex; // 0x10
	private static bool m_BuiltinDefinitionsRegistered; // 0x14
	private static PropertyName m_SpatializerName; // 0x18
	private static PropertyName m_SpatializerExtensionName; // 0x1C
	private static PropertyName m_ListenerSpatializerExtensionName; // 0x20

	// Methods

	// RVA: 0xB31 Offset: 0xB31 VA: 0xB31
	internal static AudioSourceExtension AddSpatializerExtension(AudioSource source) { }

	// RVA: 0xB32 Offset: 0xB32 VA: 0xB32
	internal static AudioSourceExtension AddAmbisonicDecoderExtension(AudioSource source) { }

	// RVA: 0x5E6 Offset: 0x5E6 VA: 0x5E6
	internal static void WriteExtensionProperties(AudioSourceExtension extension, string extensionName) { }

	// RVA: 0xB33 Offset: 0xB33 VA: 0xB33
	internal static AudioListenerExtension AddSpatializerExtension(AudioListener listener) { }

	// RVA: 0x5E7 Offset: 0x5E7 VA: 0x5E7
	internal static void WriteExtensionProperties(AudioListenerExtension extension, string extensionName) { }

	// RVA: 0x706 Offset: 0x706 VA: 0x706
	internal static void AddExtensionToManager(AudioSourceExtension extension) { }

	// RVA: 0x707 Offset: 0x707 VA: 0x707
	internal static void RemoveExtensionFromManager(AudioSourceExtension extension) { }

	// RVA: 0xF5D Offset: 0xF5D VA: 0xF5D
	internal static void Update() { }

	// RVA: 0x708 Offset: 0x708 VA: 0x708
	internal static void GetReadyToPlay(AudioSourceExtension extension) { }

	// RVA: 0xF5E Offset: 0xF5E VA: 0xF5E
	private static void RegisterBuiltinDefinitions() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBBD Offset: 0xBBD VA: 0xBBD
	// RVA: 0x277 Offset: 0x277 VA: 0x277
	internal static Object GetAudioListener() { }

	// RVA: 0xF5F Offset: 0xF5F VA: 0xF5F
	private static void .cctor() { }
}

// Namespace: UnityEngine.Audio
[NativeHeaderAttribute] // RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
[NativeHeaderAttribute] // RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
[NativeHeaderAttribute] // RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
[RequiredByNativeCodeAttribute] // RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
[StaticAccessorAttribute] // RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
public struct AudioPlayableOutput : IPlayableOutput // TypeDefIndex: 2080
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
}

// Namespace: UnityEngine.Audio
[NativeHeaderAttribute] // RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
[StaticAccessorAttribute] // RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
[NativeHeaderAttribute] // RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
[RequiredByNativeCodeAttribute] // RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
[NativeHeaderAttribute] // RVA: 0xBAB Offset: 0xBAB VA: 0xBAB
public struct AudioClipPlayable : IPlayable, IEquatable<AudioClipPlayable> // TypeDefIndex: 2081
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0x5DE Offset: 0x5DE VA: 0x5DE Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5CD Offset: 0x5CD VA: 0x5CD Slot: 4
	public bool Equals(AudioClipPlayable other) { }
}

// Namespace: UnityEngine.Audio
[NativeHeaderAttribute] // RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
[NativeHeaderAttribute] // RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
[StaticAccessorAttribute] // RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
[NativeHeaderAttribute] // RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
[RequiredByNativeCodeAttribute] // RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
public struct AudioMixerPlayable : IPlayable, IEquatable<AudioMixerPlayable> // TypeDefIndex: 2082
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0x5DF Offset: 0x5DF VA: 0x5DF Slot: 5
	public PlayableHandle GetHandle() { }

	// RVA: 0x5CE Offset: 0x5CE VA: 0x5CE Slot: 4
	public bool Equals(AudioMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Audio
[NativeTypeAttribute] // RVA: 0xBAD Offset: 0xBAD VA: 0xBAD
[StaticAccessorAttribute] // RVA: 0xBAD Offset: 0xBAD VA: 0xBAD
public class AudioSampleProvider : IDisposable // TypeDefIndex: 2083
{
	// Fields
	private AudioSampleProvider.ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction; // 0x8
	[DebuggerBrowsableAttribute] // RVA: 0xBB3 Offset: 0xBB3 VA: 0xBB3
	[CompilerGeneratedAttribute] // RVA: 0xBB3 Offset: 0xBB3 VA: 0xBB3
	private uint <id>k__BackingField; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0xBB4 Offset: 0xBB4 VA: 0xBB4
	[CompilerGeneratedAttribute] // RVA: 0xBB4 Offset: 0xBB4 VA: 0xBB4
	private ushort <trackIndex>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBB5 Offset: 0xBB5 VA: 0xBB5
	[DebuggerBrowsableAttribute] // RVA: 0xBB5 Offset: 0xBB5 VA: 0xBB5
	private Object <owner>k__BackingField; // 0x14
	[DebuggerBrowsableAttribute] // RVA: 0xBB6 Offset: 0xBB6 VA: 0xBB6
	[CompilerGeneratedAttribute] // RVA: 0xBB6 Offset: 0xBB6 VA: 0xBB6
	private ushort <channelCount>k__BackingField; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xBB7 Offset: 0xBB7 VA: 0xBB7
	[CompilerGeneratedAttribute] // RVA: 0xBB7 Offset: 0xBB7 VA: 0xBB7
	private uint <sampleRate>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xBB8 Offset: 0xBB8 VA: 0xBB8
	[DebuggerBrowsableAttribute] // RVA: 0xBB8 Offset: 0xBB8 VA: 0xBB8
	private AudioSampleProvider.SampleFramesHandler sampleFramesAvailable; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xBB9 Offset: 0xBB9 VA: 0xBB9
	[DebuggerBrowsableAttribute] // RVA: 0xBB9 Offset: 0xBB9 VA: 0xBB9
	private AudioSampleProvider.SampleFramesHandler sampleFramesOverflow; // 0x24

	// Properties
	public uint id { get; set; }

	// Methods

	// RVA: 0x712 Offset: 0x712 VA: 0x712 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x713 Offset: 0x713 VA: 0x713 Slot: 4
	public void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xBBE Offset: 0xBBE VA: 0xBBE
	// RVA: 0xB3C Offset: 0xB3C VA: 0xB3C
	public uint get_id() { }

	[CompilerGeneratedAttribute] // RVA: 0xBBF Offset: 0xBBF VA: 0xBBF
	// RVA: 0x5F0 Offset: 0x5F0 VA: 0x5F0
	private void set_id(uint value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC0 Offset: 0xBC0 VA: 0xBC0
	// RVA: 0x5F1 Offset: 0x5F1 VA: 0x5F1
	private void InvokeSampleFramesAvailable(int sampleFrameCount) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC1 Offset: 0xBC1 VA: 0xBC1
	// RVA: 0x5F2 Offset: 0x5F2 VA: 0x5F2
	private void InvokeSampleFramesOverflow(int droppedSampleFrameCount) { }

	[NativeMethodAttribute] // RVA: 0xBC2 Offset: 0xBC2 VA: 0xBC2
	// RVA: 0x5F3 Offset: 0x5F3 VA: 0x5F3
	private static void InternalSetScriptingPtr(uint providerId, AudioSampleProvider provider) { }
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xBAE Offset: 0xBAE VA: 0xBAE
public sealed class AudioSampleProvider.ConsumeSampleFramesNativeFunction : MulticastDelegate // TypeDefIndex: 2084
{
	// Methods

	// RVA: 0x38C Offset: 0x38C VA: 0x38C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x148 Offset: 0x148 VA: 0x148 Slot: 12
	public virtual uint Invoke(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount) { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C Slot: 13
	public virtual IAsyncResult BeginInvoke(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount, AsyncCallback callback, object object) { }

	// RVA: 0x5D6 Offset: 0x5D6 VA: 0x5D6 Slot: 14
	public virtual uint EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class AudioSampleProvider.SampleFramesHandler : MulticastDelegate // TypeDefIndex: 2085
{
	// Methods

	// RVA: 0x38D Offset: 0x38D VA: 0x38D
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x38E Offset: 0x38E VA: 0x38E Slot: 12
	public virtual void Invoke(AudioSampleProvider provider, uint sampleFrameCount) { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 13
	public virtual IAsyncResult BeginInvoke(AudioSampleProvider provider, uint sampleFrameCount, AsyncCallback callback, object object) { }

	// RVA: 0x5F4 Offset: 0x5F4 VA: 0x5F4 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AudioSettings // TypeDefIndex: 2086
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBBA Offset: 0xBBA VA: 0xBBA
	[CompilerGeneratedAttribute] // RVA: 0xBBA Offset: 0xBBA VA: 0xBBA
	private static AudioSettings.AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0xFFFFFFFF

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBC3 Offset: 0xBC3 VA: 0xBC3
	// RVA: 0x278 Offset: 0x278 VA: 0x278
	public static string GetSpatializerPluginName() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC4 Offset: 0xBC4 VA: 0xBC4
	// RVA: 0x70B Offset: 0x70B VA: 0x70B
	internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC5 Offset: 0xBC5 VA: 0xBC5
	// RVA: 0xF60 Offset: 0xF60 VA: 0xF60
	internal static void InvokeOnAudioManagerUpdate() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC6 Offset: 0xBC6 VA: 0xBC6
	// RVA: 0x70C Offset: 0x70C VA: 0x70C
	internal static void InvokeOnAudioSourcePlay(AudioSource source) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBC7 Offset: 0xBC7 VA: 0xBC7
	// RVA: 0x279 Offset: 0x279 VA: 0x279
	internal static string GetAmbisonicDecoderPluginName() { }
}

// Namespace: 
public sealed class AudioSettings.AudioConfigurationChangeHandler : MulticastDelegate // TypeDefIndex: 2087
{
	// Methods

	// RVA: 0x389 Offset: 0x389 VA: 0x389
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5EB Offset: 0x5EB VA: 0x5EB Slot: 12
	public virtual void Invoke(bool deviceWasChanged) { }

	// RVA: 0x147 Offset: 0x147 VA: 0x147 Slot: 13
	public virtual IAsyncResult BeginInvoke(bool deviceWasChanged, AsyncCallback callback, object object) { }

	// RVA: 0x5EC Offset: 0x5EC VA: 0x5EC Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AudioClip : Object // TypeDefIndex: 2088
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xBBB Offset: 0xBBB VA: 0xBBB
	[DebuggerBrowsableAttribute] // RVA: 0xBBB Offset: 0xBBB VA: 0xBBB
	private AudioClip.PCMReaderCallback m_PCMReaderCallback; // 0xC
	[DebuggerBrowsableAttribute] // RVA: 0xBBC Offset: 0xBBC VA: 0xBBC
	[CompilerGeneratedAttribute] // RVA: 0xBBC Offset: 0xBBC VA: 0xBBC
	private AudioClip.PCMSetPositionCallback m_PCMSetPositionCallback; // 0x10

	// Properties
	public bool ambisonic { get; }

	// Methods

	// RVA: 0x705 Offset: 0x705 VA: 0x705
	private void .ctor() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBC8 Offset: 0xBC8 VA: 0xBC8
	// RVA: 0xB2F Offset: 0xB2F VA: 0xB2F
	public bool get_ambisonic() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBC9 Offset: 0xBC9 VA: 0xBC9
	// RVA: 0x5E0 Offset: 0x5E0 VA: 0x5E0
	private void InvokePCMReaderCallback_Internal(float[] data) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBCA Offset: 0xBCA VA: 0xBCA
	// RVA: 0x5E1 Offset: 0x5E1 VA: 0x5E1
	private void InvokePCMSetPositionCallback_Internal(int position) { }
}

// Namespace: 
public sealed class AudioClip.PCMReaderCallback : MulticastDelegate // TypeDefIndex: 2089
{
	// Methods

	// RVA: 0x385 Offset: 0x385 VA: 0x385
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5E2 Offset: 0x5E2 VA: 0x5E2 Slot: 12
	public virtual void Invoke(float[] data) { }

	// RVA: 0x145 Offset: 0x145 VA: 0x145 Slot: 13
	public virtual IAsyncResult BeginInvoke(float[] data, AsyncCallback callback, object object) { }

	// RVA: 0x5E3 Offset: 0x5E3 VA: 0x5E3 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class AudioClip.PCMSetPositionCallback : MulticastDelegate // TypeDefIndex: 2090
{
	// Methods

	// RVA: 0x386 Offset: 0x386 VA: 0x386
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5E4 Offset: 0x5E4 VA: 0x5E4 Slot: 12
	public virtual void Invoke(int position) { }

	// RVA: 0x146 Offset: 0x146 VA: 0x146 Slot: 13
	public virtual IAsyncResult BeginInvoke(int position, AsyncCallback callback, object object) { }

	// RVA: 0x5E5 Offset: 0x5E5 VA: 0x5E5 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public class AudioBehaviour : Behaviour // TypeDefIndex: 2091
{}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xBAF Offset: 0xBAF VA: 0xBAF
public sealed class AudioListener : AudioBehaviour // TypeDefIndex: 2092
{
	// Fields
	internal AudioListenerExtension spatializerExtension; // 0xC

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBCB Offset: 0xBCB VA: 0xBCB
	// RVA: 0xB34 Offset: 0xB34 VA: 0xB34
	internal int GetNumExtensionProperties() { }

	// RVA: 0x5CF Offset: 0x5CF VA: 0x5CF
	internal PropertyName ReadExtensionName(int listenerIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBCC Offset: 0xBCC VA: 0xBCC
	// RVA: 0x387 Offset: 0x387 VA: 0x387
	private static void INTERNAL_CALL_ReadExtensionName(AudioListener self, int listenerIndex, out PropertyName value) { }

	// RVA: 0x5D0 Offset: 0x5D0 VA: 0x5D0
	internal PropertyName ReadExtensionPropertyName(int listenerIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBCD Offset: 0xBCD VA: 0xBCD
	// RVA: 0x388 Offset: 0x388 VA: 0x388
	private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioListener self, int listenerIndex, out PropertyName value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBCE Offset: 0xBCE VA: 0xBCE
	// RVA: 0x20 Offset: 0x20 VA: 0x20
	internal float ReadExtensionPropertyValue(int listenerIndex) { }

	// RVA: 0x5E8 Offset: 0x5E8 VA: 0x5E8
	internal void ClearExtensionProperties(PropertyName extensionName) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBCF Offset: 0xBCF VA: 0xBCF
	// RVA: 0x5E9 Offset: 0x5E9 VA: 0x5E9
	private static void INTERNAL_CALL_ClearExtensionProperties(AudioListener self, ref PropertyName extensionName) { }

	// RVA: 0x5D1 Offset: 0x5D1 VA: 0x5D1
	internal AudioListenerExtension AddExtension(Type extensionType) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xBB0 Offset: 0xBB0 VA: 0xBB0
public sealed class AudioSource : AudioBehaviour // TypeDefIndex: 2093
{
	// Fields
	internal AudioSourceExtension spatializerExtension; // 0xC
	internal AudioSourceExtension ambisonicExtension; // 0x10

	// Properties
	[ThreadAndSerializationSafeAttribute] // RVA: 0xBD8 Offset: 0xBD8 VA: 0xBD8
	public AudioClip clip { get; }
	public bool isPlaying { get; }
	internal bool spatializeInternal { get; }
	public bool spatialize { get; }

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD0 Offset: 0xBD0 VA: 0xBD0
	// RVA: 0xB36 Offset: 0xB36 VA: 0xB36
	public AudioClip get_clip() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD1 Offset: 0xBD1 VA: 0xBD1
	// RVA: 0xB37 Offset: 0xB37 VA: 0xB37
	public bool get_isPlaying() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD2 Offset: 0xBD2 VA: 0xBD2
	// RVA: 0xB38 Offset: 0xB38 VA: 0xB38
	internal bool get_spatializeInternal() { }

	// RVA: 0xB39 Offset: 0xB39 VA: 0xB39
	public bool get_spatialize() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD3 Offset: 0xBD3 VA: 0xBD3
	// RVA: 0xB3A Offset: 0xB3A VA: 0xB3A
	internal int GetNumExtensionProperties() { }

	// RVA: 0x5D2 Offset: 0x5D2 VA: 0x5D2
	internal PropertyName ReadExtensionName(int sourceIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD4 Offset: 0xBD4 VA: 0xBD4
	// RVA: 0x38A Offset: 0x38A VA: 0x38A
	private static void INTERNAL_CALL_ReadExtensionName(AudioSource self, int sourceIndex, out PropertyName value) { }

	// RVA: 0x5D3 Offset: 0x5D3 VA: 0x5D3
	internal PropertyName ReadExtensionPropertyName(int sourceIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD5 Offset: 0xBD5 VA: 0xBD5
	// RVA: 0x38B Offset: 0x38B VA: 0x38B
	private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioSource self, int sourceIndex, out PropertyName value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD6 Offset: 0xBD6 VA: 0xBD6
	// RVA: 0x22 Offset: 0x22 VA: 0x22
	internal float ReadExtensionPropertyValue(int sourceIndex) { }

	// RVA: 0x5ED Offset: 0x5ED VA: 0x5ED
	internal void ClearExtensionProperties(PropertyName extensionName) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBD7 Offset: 0xBD7 VA: 0xBD7
	// RVA: 0x5EE Offset: 0x5EE VA: 0x5EE
	private static void INTERNAL_CALL_ClearExtensionProperties(AudioSource self, ref PropertyName extensionName) { }

	// RVA: 0x5D4 Offset: 0x5D4 VA: 0x5D4
	internal AudioSourceExtension AddSpatializerExtension(Type extensionType) { }

	// RVA: 0x5D5 Offset: 0x5D5 VA: 0x5D5
	internal AudioSourceExtension AddAmbisonicExtension(Type extensionType) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2094
{}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xBDA Offset: 0xBDA VA: 0xBDA
[NativeHeaderAttribute] // RVA: 0xBDA Offset: 0xBDA VA: 0xBDA
public sealed class Event // TypeDefIndex: 2095
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private static Event s_Current; // 0x0
	private static Event s_MasterEvent; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xBE8 Offset: 0xBE8 VA: 0xBE8
	private static Dictionary<string, int> <>f__switch$map0; // 0x8

	// Properties
	[NativePropertyAttribute] // RVA: 0xC50 Offset: 0xC50 VA: 0xC50
	public EventType rawType { get; }
	[NativePropertyAttribute] // RVA: 0xC51 Offset: 0xC51 VA: 0xC51
	public Vector2 mousePosition { get; }
	[NativePropertyAttribute] // RVA: 0xC52 Offset: 0xC52 VA: 0xC52
	public EventModifiers modifiers { get; }
	[NativePropertyAttribute] // RVA: 0xC53 Offset: 0xC53 VA: 0xC53
	public char character { get; }
	[NativePropertyAttribute] // RVA: 0xC54 Offset: 0xC54 VA: 0xC54
	public KeyCode keyCode { get; }
	[NativePropertyAttribute] // RVA: 0xC55 Offset: 0xC55 VA: 0xC55
	public int displayIndex { set; }
	public EventType type { get; }
	public string commandName { get; }
	public static Event current { get; }
	public bool isKey { get; }
	public bool isMouse { get; }

	// Methods

	// RVA: 0x714 Offset: 0x714 VA: 0x714
	public void .ctor() { }

	// RVA: 0x5F5 Offset: 0x5F5 VA: 0x5F5
	public void .ctor(int displayIndex) { }

	// RVA: 0xB3D Offset: 0xB3D VA: 0xB3D
	public EventType get_rawType() { }

	// RVA: 0x5F6 Offset: 0x5F6 VA: 0x5F6
	public Vector2 get_mousePosition() { }

	// RVA: 0xB3E Offset: 0xB3E VA: 0xB3E
	public EventModifiers get_modifiers() { }

	// RVA: 0xB3F Offset: 0xB3F VA: 0xB3F
	public char get_character() { }

	// RVA: 0xB40 Offset: 0xB40 VA: 0xB40
	public KeyCode get_keyCode() { }

	// RVA: 0x5F7 Offset: 0x5F7 VA: 0x5F7
	public void set_displayIndex(int value) { }

	[FreeFunctionAttribute] // RVA: 0xC1F Offset: 0xC1F VA: 0xC1F
	// RVA: 0xB41 Offset: 0xB41 VA: 0xB41
	public EventType get_type() { }

	[FreeFunctionAttribute] // RVA: 0xC20 Offset: 0xC20 VA: 0xC20
	// RVA: 0xB42 Offset: 0xB42 VA: 0xB42
	public string get_commandName() { }

	[FreeFunctionAttribute] // RVA: 0xC21 Offset: 0xC21 VA: 0xC21
	// RVA: 0xB43 Offset: 0xB43 VA: 0xB43
	private static IntPtr Internal_Create(int displayIndex) { }

	[FreeFunctionAttribute] // RVA: 0xC22 Offset: 0xC22 VA: 0xC22
	// RVA: 0x715 Offset: 0x715 VA: 0x715
	private static void Internal_Destroy(IntPtr ptr) { }

	// RVA: 0xB44 Offset: 0xB44 VA: 0xB44
	public static bool PopEvent(Event outEvent) { }

	// RVA: 0x716 Offset: 0x716 VA: 0x716
	private static void Internal_SetNativeEvent(IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC23 Offset: 0xC23 VA: 0xC23
	// RVA: 0x717 Offset: 0x717 VA: 0x717
	internal static void Internal_MakeMasterEventCurrent(int displayIndex) { }

	// RVA: 0x718 Offset: 0x718 VA: 0x718 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x27A Offset: 0x27A VA: 0x27A
	public static Event get_current() { }

	// RVA: 0xB45 Offset: 0xB45 VA: 0xB45
	public bool get_isKey() { }

	// RVA: 0xB46 Offset: 0xB46 VA: 0xB46
	public bool get_isMouse() { }

	// RVA: 0xB47 Offset: 0xB47 VA: 0xB47 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x5D7 Offset: 0x5D7 VA: 0x5D7 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xB48 Offset: 0xB48 VA: 0xB48 Slot: 3
	public override string ToString() { }

	// RVA: 0x5F8 Offset: 0x5F8 VA: 0x5F8
	private void get_mousePosition_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
public enum EventType // TypeDefIndex: 2096
{
	// Fields
	public int value__; // 0x0
	public const EventType MouseDown = 0;
	public const EventType MouseUp = 1;
	public const EventType MouseMove = 2;
	public const EventType MouseDrag = 3;
	public const EventType KeyDown = 4;
	public const EventType KeyUp = 5;
	public const EventType ScrollWheel = 6;
	public const EventType Repaint = 7;
	public const EventType Layout = 8;
	public const EventType DragUpdated = 9;
	public const EventType DragPerform = 10;
	public const EventType DragExited = 15;
	public const EventType Ignore = 11;
	public const EventType Used = 12;
	public const EventType ValidateCommand = 13;
	public const EventType ExecuteCommand = 14;
	public const EventType ContextClick = 16;
	public const EventType MouseEnterWindow = 20;
	public const EventType MouseLeaveWindow = 21;
	[ObsoleteAttribute] // RVA: 0xBE9 Offset: 0xBE9 VA: 0xBE9
	[EditorBrowsableAttribute] // RVA: 0xBE9 Offset: 0xBE9 VA: 0xBE9
	public const EventType mouseDown = 0;
	[ObsoleteAttribute] // RVA: 0xBEA Offset: 0xBEA VA: 0xBEA
	[EditorBrowsableAttribute] // RVA: 0xBEA Offset: 0xBEA VA: 0xBEA
	public const EventType mouseUp = 1;
	[EditorBrowsableAttribute] // RVA: 0xBEB Offset: 0xBEB VA: 0xBEB
	[ObsoleteAttribute] // RVA: 0xBEB Offset: 0xBEB VA: 0xBEB
	public const EventType mouseMove = 2;
	[EditorBrowsableAttribute] // RVA: 0xBEC Offset: 0xBEC VA: 0xBEC
	[ObsoleteAttribute] // RVA: 0xBEC Offset: 0xBEC VA: 0xBEC
	public const EventType mouseDrag = 3;
	[EditorBrowsableAttribute] // RVA: 0xBED Offset: 0xBED VA: 0xBED
	[ObsoleteAttribute] // RVA: 0xBED Offset: 0xBED VA: 0xBED
	public const EventType keyDown = 4;
	[ObsoleteAttribute] // RVA: 0xBEE Offset: 0xBEE VA: 0xBEE
	[EditorBrowsableAttribute] // RVA: 0xBEE Offset: 0xBEE VA: 0xBEE
	public const EventType keyUp = 5;
	[ObsoleteAttribute] // RVA: 0xBEF Offset: 0xBEF VA: 0xBEF
	[EditorBrowsableAttribute] // RVA: 0xBEF Offset: 0xBEF VA: 0xBEF
	public const EventType scrollWheel = 6;
	[EditorBrowsableAttribute] // RVA: 0xBF0 Offset: 0xBF0 VA: 0xBF0
	[ObsoleteAttribute] // RVA: 0xBF0 Offset: 0xBF0 VA: 0xBF0
	public const EventType repaint = 7;
	[EditorBrowsableAttribute] // RVA: 0xBF1 Offset: 0xBF1 VA: 0xBF1
	[ObsoleteAttribute] // RVA: 0xBF1 Offset: 0xBF1 VA: 0xBF1
	public const EventType layout = 8;
	[EditorBrowsableAttribute] // RVA: 0xBF2 Offset: 0xBF2 VA: 0xBF2
	[ObsoleteAttribute] // RVA: 0xBF2 Offset: 0xBF2 VA: 0xBF2
	public const EventType dragUpdated = 9;
	[ObsoleteAttribute] // RVA: 0xBF3 Offset: 0xBF3 VA: 0xBF3
	[EditorBrowsableAttribute] // RVA: 0xBF3 Offset: 0xBF3 VA: 0xBF3
	public const EventType dragPerform = 10;
	[EditorBrowsableAttribute] // RVA: 0xBF4 Offset: 0xBF4 VA: 0xBF4
	[ObsoleteAttribute] // RVA: 0xBF4 Offset: 0xBF4 VA: 0xBF4
	public const EventType ignore = 11;
	[ObsoleteAttribute] // RVA: 0xBF5 Offset: 0xBF5 VA: 0xBF5
	[EditorBrowsableAttribute] // RVA: 0xBF5 Offset: 0xBF5 VA: 0xBF5
	public const EventType used = 12;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xBDB Offset: 0xBDB VA: 0xBDB
public enum EventModifiers // TypeDefIndex: 2097
{
	// Fields
	public int value__; // 0x0
	public const EventModifiers None = 0;
	public const EventModifiers Shift = 1;
	public const EventModifiers Control = 2;
	public const EventModifiers Alt = 4;
	public const EventModifiers Command = 8;
	public const EventModifiers Numeric = 16;
	public const EventModifiers CapsLock = 32;
	public const EventModifiers FunctionKey = 64;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBDC Offset: 0xBDC VA: 0xBDC
[NativeHeaderAttribute] // RVA: 0xBDC Offset: 0xBDC VA: 0xBDC
public class GUI // TypeDefIndex: 2098
{
	// Fields
	private static int s_HotTextField; // 0x0
	private static readonly int s_BoxHash; // 0x4
	private static readonly int s_ButonHash; // 0x8
	private static readonly int s_RepeatButtonHash; // 0xC
	private static readonly int s_ToggleHash; // 0x10
	private static readonly int s_ButtonGridHash; // 0x14
	private static readonly int s_SliderHash; // 0x18
	private static readonly int s_BeginGroupHash; // 0x1C
	private static readonly int s_ScrollviewHash; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xBF6 Offset: 0xBF6 VA: 0xBF6
	[DebuggerBrowsableAttribute] // RVA: 0xBF6 Offset: 0xBF6 VA: 0xBF6
	private static DateTime <nextScrollStepTime>k__BackingField; // 0x28
	private static GUISkin s_Skin; // 0x30
	private static readonly GenericStack s_ScrollViewStates; // 0x34

	// Properties
	public static bool changed { set; }
	internal static DateTime nextScrollStepTime { set; }
	public static GUISkin skin { get; set; }

	// Methods

	// RVA: 0xF61 Offset: 0xF61 VA: 0xF61
	private static void .cctor() { }

	// RVA: 0x719 Offset: 0x719 VA: 0x719
	public static void set_changed(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24 Offset: 0xC24 VA: 0xC24
	// RVA: 0x71A Offset: 0x71A VA: 0x71A
	internal static void set_nextScrollStepTime(DateTime value) { }

	// RVA: 0x71B Offset: 0x71B VA: 0x71B
	public static void set_skin(GUISkin value) { }

	// RVA: 0x27B Offset: 0x27B VA: 0x27B
	public static GUISkin get_skin() { }

	// RVA: 0x71C Offset: 0x71C VA: 0x71C
	internal static void DoSetSkin(GUISkin newSkin) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC25 Offset: 0xC25 VA: 0xC25
	// RVA: 0x1 Offset: 0x1 VA: 0x1
	internal static void CallWindowDelegate(GUI.WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style) { }
}

// Namespace: 
public sealed class GUI.WindowFunction : MulticastDelegate // TypeDefIndex: 2099
{
	// Methods

	// RVA: 0x38F Offset: 0x38F VA: 0x38F
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x5F9 Offset: 0x5F9 VA: 0x5F9 Slot: 12
	public virtual void Invoke(int id) { }

	// RVA: 0x149 Offset: 0x149 VA: 0x149 Slot: 13
	public virtual IAsyncResult BeginInvoke(int id, AsyncCallback callback, object object) { }

	// RVA: 0x5FA Offset: 0x5FA VA: 0x5FA Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBDD Offset: 0xBDD VA: 0xBDD
[NativeHeaderAttribute] // RVA: 0xBDD Offset: 0xBDD VA: 0xBDD
[Serializable]
public class GUIContent // TypeDefIndex: 2100
{
	// Fields
	[SerializeField] // RVA: 0xBF7 Offset: 0xBF7 VA: 0xBF7
	private string m_Text; // 0x8
	[SerializeField] // RVA: 0xBF8 Offset: 0xBF8 VA: 0xBF8
	private Texture m_Image; // 0xC
	[SerializeField] // RVA: 0xBF9 Offset: 0xBF9 VA: 0xBF9
	private string m_Tooltip; // 0x10
	private static readonly GUIContent s_Text; // 0x0
	private static readonly GUIContent s_Image; // 0x4
	private static readonly GUIContent s_TextImage; // 0x8
	public static GUIContent none; // 0xC

	// Properties
	public string text { set; }
	public Texture image { set; }
	public string tooltip { set; }

	// Methods

	// RVA: 0x71D Offset: 0x71D VA: 0x71D
	public void .ctor() { }

	// RVA: 0x5FB Offset: 0x5FB VA: 0x5FB
	public void .ctor(string text) { }

	// RVA: 0x10C Offset: 0x10C VA: 0x10C
	public void .ctor(string text, Texture image, string tooltip) { }

	// RVA: 0x5FC Offset: 0x5FC VA: 0x5FC
	public void set_text(string value) { }

	// RVA: 0x5FD Offset: 0x5FD VA: 0x5FD
	public void set_image(Texture value) { }

	// RVA: 0x5FE Offset: 0x5FE VA: 0x5FE
	public void set_tooltip(string value) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC26 Offset: 0xC26 VA: 0xC26
	// RVA: 0xF62 Offset: 0xF62 VA: 0xF62
	internal static void ClearStaticCache() { }

	// RVA: 0xF63 Offset: 0xF63 VA: 0xF63
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class GUILayout // TypeDefIndex: 2101
{
	// Methods

	// RVA: 0xF Offset: 0xF VA: 0xF
	public static GUILayoutOption Width(float width) { }

	// RVA: 0x10 Offset: 0x10 VA: 0x10
	public static GUILayoutOption Height(float height) { }
}

// Namespace: UnityEngine
public sealed class GUILayoutOption // TypeDefIndex: 2102
{
	// Fields
	internal GUILayoutOption.Type type; // 0x8
	internal object value; // 0xC

	// Methods

	// RVA: 0x390 Offset: 0x390 VA: 0x390
	internal void .ctor(GUILayoutOption.Type type, object value) { }
}

// Namespace: 
internal enum GUILayoutOption.Type // TypeDefIndex: 2103
{
	// Fields
	public int value__; // 0x0
	public const GUILayoutOption.Type fixedWidth = 0;
	public const GUILayoutOption.Type fixedHeight = 1;
	public const GUILayoutOption.Type minWidth = 2;
	public const GUILayoutOption.Type maxWidth = 3;
	public const GUILayoutOption.Type minHeight = 4;
	public const GUILayoutOption.Type maxHeight = 5;
	public const GUILayoutOption.Type stretchWidth = 6;
	public const GUILayoutOption.Type stretchHeight = 7;
	public const GUILayoutOption.Type alignStart = 8;
	public const GUILayoutOption.Type alignMiddle = 9;
	public const GUILayoutOption.Type alignEnd = 10;
	public const GUILayoutOption.Type alignJustify = 11;
	public const GUILayoutOption.Type equalSize = 12;
	public const GUILayoutOption.Type spacing = 13;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBDE Offset: 0xBDE VA: 0xBDE
public class GUILayoutUtility // TypeDefIndex: 2104
{
	// Fields
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredLayouts; // 0x0
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredWindows; // 0x4
	internal static GUILayoutUtility.LayoutCache current; // 0x8
	internal static readonly Rect kDummyRect; // 0xC

	// Methods

	// RVA: 0x604 Offset: 0x604 VA: 0x604
	private static Rect Internal_GetWindowRect(int windowID) { }

	// RVA: 0x605 Offset: 0x605 VA: 0x605
	private static void Internal_MoveWindow(int windowID, Rect r) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC27 Offset: 0xC27 VA: 0xC27
	// RVA: 0x5D8 Offset: 0x5D8 VA: 0x5D8
	internal static GUILayoutUtility.LayoutCache SelectIDList(int instanceID, bool isWindow) { }

	// RVA: 0x724 Offset: 0x724 VA: 0x724
	internal static void Begin(int instanceID) { }

	// RVA: 0x391 Offset: 0x391 VA: 0x391
	internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0xF65 Offset: 0xF65 VA: 0xF65
	internal static void Layout() { }

	// RVA: 0xF66 Offset: 0xF66 VA: 0xF66
	internal static void LayoutFromEditorWindow() { }

	// RVA: 0x725 Offset: 0x725 VA: 0x725
	internal static void LayoutFreeGroup(GUILayoutGroup toplevel) { }

	// RVA: 0x726 Offset: 0x726 VA: 0x726
	private static void LayoutSingleGroup(GUILayoutGroup i) { }

	// RVA: 0xF67 Offset: 0xF67 VA: 0xF67
	private static void .cctor() { }

	// RVA: 0x606 Offset: 0x606 VA: 0x606
	private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret) { }

	// RVA: 0x607 Offset: 0x607 VA: 0x607
	private static void Internal_MoveWindow_Injected(int windowID, ref Rect r) { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0xBDF Offset: 0xBDF VA: 0xBDF
internal sealed class GUILayoutUtility.LayoutCache // TypeDefIndex: 2105
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xBFA Offset: 0xBFA VA: 0xBFA
	internal GUILayoutGroup topLevel; // 0x8
	internal GenericStack layoutGroups; // 0xC
	internal GUILayoutGroup windows; // 0x10

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xC28 Offset: 0xC28 VA: 0xC28
	// RVA: 0x727 Offset: 0x727 VA: 0x727
	internal void .ctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBE0 Offset: 0xBE0 VA: 0xBE0
[Serializable]
public sealed class GUISettings // TypeDefIndex: 2106
{
	// Fields
	[SerializeField] // RVA: 0xBFB Offset: 0xBFB VA: 0xBFB
	private bool m_DoubleClickSelectsWord; // 0x8
	[SerializeField] // RVA: 0xBFC Offset: 0xBFC VA: 0xBFC
	private bool m_TripleClickSelectsLine; // 0x9
	[SerializeField] // RVA: 0xBFD Offset: 0xBFD VA: 0xBFD
	private Color m_CursorColor; // 0xC
	[SerializeField] // RVA: 0xBFE Offset: 0xBFE VA: 0xBFE
	private float m_CursorFlashSpeed; // 0x1C
	[SerializeField] // RVA: 0xBFF Offset: 0xBFF VA: 0xBFF
	private Color m_SelectionColor; // 0x20

	// Methods

	// RVA: 0x72B Offset: 0x72B VA: 0x72B
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBE1 Offset: 0xBE1 VA: 0xBE1
[ExecuteInEditMode] // RVA: 0xBE1 Offset: 0xBE1 VA: 0xBE1
[AssetFileNameExtensionAttribute] // RVA: 0xBE1 Offset: 0xBE1 VA: 0xBE1
[Serializable]
public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2107
{
	// Fields
	[SerializeField] // RVA: 0xC00 Offset: 0xC00 VA: 0xC00
	private Font m_Font; // 0xC
	[SerializeField] // RVA: 0xC01 Offset: 0xC01 VA: 0xC01
	private GUIStyle m_box; // 0x10
	[SerializeField] // RVA: 0xC02 Offset: 0xC02 VA: 0xC02
	private GUIStyle m_button; // 0x14
	[SerializeField] // RVA: 0xC03 Offset: 0xC03 VA: 0xC03
	private GUIStyle m_toggle; // 0x18
	[SerializeField] // RVA: 0xC04 Offset: 0xC04 VA: 0xC04
	private GUIStyle m_label; // 0x1C
	[SerializeField] // RVA: 0xC05 Offset: 0xC05 VA: 0xC05
	private GUIStyle m_textField; // 0x20
	[SerializeField] // RVA: 0xC06 Offset: 0xC06 VA: 0xC06
	private GUIStyle m_textArea; // 0x24
	[SerializeField] // RVA: 0xC07 Offset: 0xC07 VA: 0xC07
	private GUIStyle m_window; // 0x28
	[SerializeField] // RVA: 0xC08 Offset: 0xC08 VA: 0xC08
	private GUIStyle m_horizontalSlider; // 0x2C
	[SerializeField] // RVA: 0xC09 Offset: 0xC09 VA: 0xC09
	private GUIStyle m_horizontalSliderThumb; // 0x30
	[SerializeField] // RVA: 0xC0A Offset: 0xC0A VA: 0xC0A
	private GUIStyle m_verticalSlider; // 0x34
	[SerializeField] // RVA: 0xC0B Offset: 0xC0B VA: 0xC0B
	private GUIStyle m_verticalSliderThumb; // 0x38
	[SerializeField] // RVA: 0xC0C Offset: 0xC0C VA: 0xC0C
	private GUIStyle m_horizontalScrollbar; // 0x3C
	[SerializeField] // RVA: 0xC0D Offset: 0xC0D VA: 0xC0D
	private GUIStyle m_horizontalScrollbarThumb; // 0x40
	[SerializeField] // RVA: 0xC0E Offset: 0xC0E VA: 0xC0E
	private GUIStyle m_horizontalScrollbarLeftButton; // 0x44
	[SerializeField] // RVA: 0xC0F Offset: 0xC0F VA: 0xC0F
	private GUIStyle m_horizontalScrollbarRightButton; // 0x48
	[SerializeField] // RVA: 0xC10 Offset: 0xC10 VA: 0xC10
	private GUIStyle m_verticalScrollbar; // 0x4C
	[SerializeField] // RVA: 0xC11 Offset: 0xC11 VA: 0xC11
	private GUIStyle m_verticalScrollbarThumb; // 0x50
	[SerializeField] // RVA: 0xC12 Offset: 0xC12 VA: 0xC12
	private GUIStyle m_verticalScrollbarUpButton; // 0x54
	[SerializeField] // RVA: 0xC13 Offset: 0xC13 VA: 0xC13
	private GUIStyle m_verticalScrollbarDownButton; // 0x58
	[SerializeField] // RVA: 0xC14 Offset: 0xC14 VA: 0xC14
	private GUIStyle m_ScrollView; // 0x5C
	[SerializeField] // RVA: 0xC15 Offset: 0xC15 VA: 0xC15
	internal GUIStyle[] m_CustomStyles; // 0x60
	[SerializeField] // RVA: 0xC16 Offset: 0xC16 VA: 0xC16
	private GUISettings m_Settings; // 0x64
	internal static GUIStyle ms_Error; // 0x0
	private Dictionary<string, GUIStyle> m_Styles; // 0x68
	internal static GUISkin.SkinChangedDelegate m_SkinChanged; // 0x4
	internal static GUISkin current; // 0x8

	// Properties
	public Font font { get; set; }
	public GUIStyle box { get; set; }
	public GUIStyle label { get; set; }
	public GUIStyle textField { get; set; }
	public GUIStyle textArea { get; set; }
	public GUIStyle button { get; set; }
	public GUIStyle toggle { get; set; }
	public GUIStyle window { get; set; }
	public GUIStyle horizontalSlider { get; set; }
	public GUIStyle horizontalSliderThumb { get; set; }
	public GUIStyle verticalSlider { get; set; }
	public GUIStyle verticalSliderThumb { get; set; }
	public GUIStyle horizontalScrollbar { get; set; }
	public GUIStyle horizontalScrollbarThumb { get; set; }
	public GUIStyle horizontalScrollbarLeftButton { get; set; }
	public GUIStyle horizontalScrollbarRightButton { get; set; }
	public GUIStyle verticalScrollbar { get; set; }
	public GUIStyle verticalScrollbarThumb { get; set; }
	public GUIStyle verticalScrollbarUpButton { get; set; }
	public GUIStyle verticalScrollbarDownButton { get; set; }
	public GUIStyle scrollView { get; set; }
	public GUIStyle[] customStyles { get; set; }
	public GUISettings settings { get; }
	internal static GUIStyle error { get; }

	// Methods

	// RVA: 0x72C Offset: 0x72C VA: 0x72C
	public void .ctor() { }

	// RVA: 0x72D Offset: 0x72D VA: 0x72D
	internal void OnEnable() { }

	// RVA: 0xF68 Offset: 0xF68 VA: 0xF68
	internal static void CleanupRoots() { }

	// RVA: 0xB56 Offset: 0xB56 VA: 0xB56
	public Font get_font() { }

	// RVA: 0x608 Offset: 0x608 VA: 0x608
	public void set_font(Font value) { }

	// RVA: 0xB57 Offset: 0xB57 VA: 0xB57
	public GUIStyle get_box() { }

	// RVA: 0x609 Offset: 0x609 VA: 0x609
	public void set_box(GUIStyle value) { }

	// RVA: 0xB58 Offset: 0xB58 VA: 0xB58
	public GUIStyle get_label() { }

	// RVA: 0x60A Offset: 0x60A VA: 0x60A
	public void set_label(GUIStyle value) { }

	// RVA: 0xB59 Offset: 0xB59 VA: 0xB59
	public GUIStyle get_textField() { }

	// RVA: 0x60B Offset: 0x60B VA: 0x60B
	public void set_textField(GUIStyle value) { }

	// RVA: 0xB5A Offset: 0xB5A VA: 0xB5A
	public GUIStyle get_textArea() { }

	// RVA: 0x60C Offset: 0x60C VA: 0x60C
	public void set_textArea(GUIStyle value) { }

	// RVA: 0xB5B Offset: 0xB5B VA: 0xB5B
	public GUIStyle get_button() { }

	// RVA: 0x60D Offset: 0x60D VA: 0x60D
	public void set_button(GUIStyle value) { }

	// RVA: 0xB5C Offset: 0xB5C VA: 0xB5C
	public GUIStyle get_toggle() { }

	// RVA: 0x60E Offset: 0x60E VA: 0x60E
	public void set_toggle(GUIStyle value) { }

	// RVA: 0xB5D Offset: 0xB5D VA: 0xB5D
	public GUIStyle get_window() { }

	// RVA: 0x60F Offset: 0x60F VA: 0x60F
	public void set_window(GUIStyle value) { }

	// RVA: 0xB5E Offset: 0xB5E VA: 0xB5E
	public GUIStyle get_horizontalSlider() { }

	// RVA: 0x610 Offset: 0x610 VA: 0x610
	public void set_horizontalSlider(GUIStyle value) { }

	// RVA: 0xB5F Offset: 0xB5F VA: 0xB5F
	public GUIStyle get_horizontalSliderThumb() { }

	// RVA: 0x611 Offset: 0x611 VA: 0x611
	public void set_horizontalSliderThumb(GUIStyle value) { }

	// RVA: 0xB60 Offset: 0xB60 VA: 0xB60
	public GUIStyle get_verticalSlider() { }

	// RVA: 0x612 Offset: 0x612 VA: 0x612
	public void set_verticalSlider(GUIStyle value) { }

	// RVA: 0xB61 Offset: 0xB61 VA: 0xB61
	public GUIStyle get_verticalSliderThumb() { }

	// RVA: 0x613 Offset: 0x613 VA: 0x613
	public void set_verticalSliderThumb(GUIStyle value) { }

	// RVA: 0xB62 Offset: 0xB62 VA: 0xB62
	public GUIStyle get_horizontalScrollbar() { }

	// RVA: 0x614 Offset: 0x614 VA: 0x614
	public void set_horizontalScrollbar(GUIStyle value) { }

	// RVA: 0xB63 Offset: 0xB63 VA: 0xB63
	public GUIStyle get_horizontalScrollbarThumb() { }

	// RVA: 0x615 Offset: 0x615 VA: 0x615
	public void set_horizontalScrollbarThumb(GUIStyle value) { }

	// RVA: 0xB64 Offset: 0xB64 VA: 0xB64
	public GUIStyle get_horizontalScrollbarLeftButton() { }

	// RVA: 0x616 Offset: 0x616 VA: 0x616
	public void set_horizontalScrollbarLeftButton(GUIStyle value) { }

	// RVA: 0xB65 Offset: 0xB65 VA: 0xB65
	public GUIStyle get_horizontalScrollbarRightButton() { }

	// RVA: 0x617 Offset: 0x617 VA: 0x617
	public void set_horizontalScrollbarRightButton(GUIStyle value) { }

	// RVA: 0xB66 Offset: 0xB66 VA: 0xB66
	public GUIStyle get_verticalScrollbar() { }

	// RVA: 0x618 Offset: 0x618 VA: 0x618
	public void set_verticalScrollbar(GUIStyle value) { }

	// RVA: 0xB67 Offset: 0xB67 VA: 0xB67
	public GUIStyle get_verticalScrollbarThumb() { }

	// RVA: 0x619 Offset: 0x619 VA: 0x619
	public void set_verticalScrollbarThumb(GUIStyle value) { }

	// RVA: 0xB68 Offset: 0xB68 VA: 0xB68
	public GUIStyle get_verticalScrollbarUpButton() { }

	// RVA: 0x61A Offset: 0x61A VA: 0x61A
	public void set_verticalScrollbarUpButton(GUIStyle value) { }

	// RVA: 0xB69 Offset: 0xB69 VA: 0xB69
	public GUIStyle get_verticalScrollbarDownButton() { }

	// RVA: 0x61B Offset: 0x61B VA: 0x61B
	public void set_verticalScrollbarDownButton(GUIStyle value) { }

	// RVA: 0xB6A Offset: 0xB6A VA: 0xB6A
	public GUIStyle get_scrollView() { }

	// RVA: 0x61C Offset: 0x61C VA: 0x61C
	public void set_scrollView(GUIStyle value) { }

	// RVA: 0xB6B Offset: 0xB6B VA: 0xB6B
	public GUIStyle[] get_customStyles() { }

	// RVA: 0x61D Offset: 0x61D VA: 0x61D
	public void set_customStyles(GUIStyle[] value) { }

	// RVA: 0xB6C Offset: 0xB6C VA: 0xB6C
	public GUISettings get_settings() { }

	// RVA: 0x27C Offset: 0x27C VA: 0x27C
	internal static GUIStyle get_error() { }

	// RVA: 0x72E Offset: 0x72E VA: 0x72E
	internal void Apply() { }

	// RVA: 0x72F Offset: 0x72F VA: 0x72F
	private void BuildStyleCache() { }

	// RVA: 0x5D9 Offset: 0x5D9 VA: 0x5D9
	public GUIStyle GetStyle(string styleName) { }

	// RVA: 0x5DA Offset: 0x5DA VA: 0x5DA
	public GUIStyle FindStyle(string styleName) { }

	// RVA: 0x730 Offset: 0x730 VA: 0x730
	internal void MakeCurrent() { }

	// RVA: 0xB6D Offset: 0xB6D VA: 0xB6D
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
internal sealed class GUISkin.SkinChangedDelegate : MulticastDelegate // TypeDefIndex: 2108
{
	// Methods

	// RVA: 0x392 Offset: 0x392 VA: 0x392
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x731 Offset: 0x731 VA: 0x731 Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA28 Offset: 0xA28 VA: 0xA28 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x61E Offset: 0x61E VA: 0x61E Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBE2 Offset: 0xBE2 VA: 0xBE2
[Serializable]
public sealed class GUIStyleState // TypeDefIndex: 2109
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private readonly GUIStyle m_SourceStyle; // 0xC

	// Properties
	[NativePropertyAttribute] // RVA: 0xC56 Offset: 0xC56 VA: 0xC56
	public Color textColor { set; }

	// Methods

	// RVA: 0x736 Offset: 0x736 VA: 0x736
	public void .ctor() { }

	// RVA: 0x393 Offset: 0x393 VA: 0x393
	private void .ctor(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x621 Offset: 0x621 VA: 0x621
	public void set_textColor(Color value) { }

	[FreeFunctionAttribute] // RVA: 0xC29 Offset: 0xC29 VA: 0xC29
	// RVA: 0x27E Offset: 0x27E VA: 0x27E
	private static IntPtr Init() { }

	[FreeFunctionAttribute] // RVA: 0xC2A Offset: 0xC2A VA: 0xC2A
	// RVA: 0x737 Offset: 0x737 VA: 0x737
	private void Cleanup() { }

	// RVA: 0x5DD Offset: 0x5DD VA: 0x5DD
	internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x738 Offset: 0x738 VA: 0x738 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x622 Offset: 0x622 VA: 0x622
	private void set_textColor_Injected(ref Color value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBE3 Offset: 0xBE3 VA: 0xBE3
[RequiredByNativeCodeAttribute] // RVA: 0xBE3 Offset: 0xBE3 VA: 0xBE3
[NativeHeaderAttribute] // RVA: 0xBE3 Offset: 0xBE3 VA: 0xBE3
[Serializable]
public sealed class GUIStyle // TypeDefIndex: 2110
{
	// Fields
	internal IntPtr m_Ptr; // 0x8
	private GUIStyleState m_Normal; // 0xC
	private GUIStyleState m_Hover; // 0x10
	private GUIStyleState m_Active; // 0x14
	private GUIStyleState m_Focused; // 0x18
	private GUIStyleState m_OnNormal; // 0x1C
	private GUIStyleState m_OnHover; // 0x20
	private GUIStyleState m_OnActive; // 0x24
	private GUIStyleState m_OnFocused; // 0x28
	private RectOffset m_Border; // 0x2C
	private RectOffset m_Padding; // 0x30
	private RectOffset m_Margin; // 0x34
	private RectOffset m_Overflow; // 0x38
	internal static bool showKeyboardFocus; // 0x0
	private static GUIStyle s_None; // 0x4

	// Properties
	[NativePropertyAttribute] // RVA: 0xC57 Offset: 0xC57 VA: 0xC57
	public string name { get; set; }
	[NativePropertyAttribute] // RVA: 0xC58 Offset: 0xC58 VA: 0xC58
	public float fixedWidth { get; }
	[NativePropertyAttribute] // RVA: 0xC59 Offset: 0xC59 VA: 0xC59
	public float fixedHeight { get; }
	[NativePropertyAttribute] // RVA: 0xC5A Offset: 0xC5A VA: 0xC5A
	public bool stretchWidth { get; }
	[NativePropertyAttribute] // RVA: 0xC5B Offset: 0xC5B VA: 0xC5B
	public bool stretchHeight { get; set; }
	public GUIStyleState normal { get; }
	public RectOffset margin { get; }
	public RectOffset padding { get; }
	public static GUIStyle none { get; }

	// Methods

	// RVA: 0x732 Offset: 0x732 VA: 0x732
	public void .ctor() { }

	// RVA: 0xB6E Offset: 0xB6E VA: 0xB6E
	public string get_name() { }

	// RVA: 0x61F Offset: 0x61F VA: 0x61F
	public void set_name(string value) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	public float get_fixedWidth() { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	public float get_fixedHeight() { }

	// RVA: 0xB6F Offset: 0xB6F VA: 0xB6F
	public bool get_stretchWidth() { }

	// RVA: 0xB70 Offset: 0xB70 VA: 0xB70
	public bool get_stretchHeight() { }

	// RVA: 0x620 Offset: 0x620 VA: 0x620
	public void set_stretchHeight(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xC2B Offset: 0xC2B VA: 0xC2B
	// RVA: 0xB71 Offset: 0xB71 VA: 0xB71
	private static IntPtr Internal_Create(GUIStyle self) { }

	[FreeFunctionAttribute] // RVA: 0xC2C Offset: 0xC2C VA: 0xC2C
	// RVA: 0x733 Offset: 0x733 VA: 0x733
	private static void Internal_Destroy(IntPtr self) { }

	[FreeFunctionAttribute] // RVA: 0xC2D Offset: 0xC2D VA: 0xC2D
	// RVA: 0x5DB Offset: 0x5DB VA: 0x5DB
	private IntPtr GetStyleStatePtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xC2E Offset: 0xC2E VA: 0xC2E
	// RVA: 0x5DC Offset: 0x5DC VA: 0x5DC
	private IntPtr GetRectOffsetPtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xC2F Offset: 0xC2F VA: 0xC2F
	// RVA: 0x734 Offset: 0x734 VA: 0x734
	internal static void SetDefaultFont(Font font) { }

	// RVA: 0x735 Offset: 0x735 VA: 0x735 Slot: 1
	protected override void Finalize() { }

	// RVA: 0xB72 Offset: 0xB72 VA: 0xB72
	public GUIStyleState get_normal() { }

	// RVA: 0xB73 Offset: 0xB73 VA: 0xB73
	public RectOffset get_margin() { }

	// RVA: 0xB74 Offset: 0xB74 VA: 0xB74
	public RectOffset get_padding() { }

	[CompilerGeneratedAttribute] // RVA: 0xC30 Offset: 0xC30 VA: 0xC30
	// RVA: 0x27D Offset: 0x27D VA: 0x27D
	public static GUIStyle get_none() { }

	// RVA: 0xB75 Offset: 0xB75 VA: 0xB75 Slot: 3
	public override string ToString() { }

	// RVA: 0xF69 Offset: 0xF69 VA: 0xF69
	private static void .cctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xBE4 Offset: 0xBE4 VA: 0xBE4
public class GUITargetAttribute : Attribute // TypeDefIndex: 2111
{
	// Fields
	internal int displayMask; // 0x8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC31 Offset: 0xC31 VA: 0xC31
	// RVA: 0x5DE Offset: 0x5DE VA: 0x5DE
	private static int GetGUITargetAttrValue(Type klass, string methodName) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBE5 Offset: 0xBE5 VA: 0xBE5
[NativeHeaderAttribute] // RVA: 0xBE5 Offset: 0xBE5 VA: 0xBE5
[NativeHeaderAttribute] // RVA: 0xBE5 Offset: 0xBE5 VA: 0xBE5
[NativeHeaderAttribute] // RVA: 0xBE5 Offset: 0xBE5 VA: 0xBE5
[NativeHeaderAttribute] // RVA: 0xBE5 Offset: 0xBE5 VA: 0xBE5
public class GUIUtility // TypeDefIndex: 2112
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xC17 Offset: 0xC17 VA: 0xC17
	internal static int s_SkinMode; // 0x0
	[VisibleToOtherModulesAttribute] // RVA: 0xC18 Offset: 0xC18 VA: 0xC18
	internal static int s_OriginalID; // 0x4
	[VisibleToOtherModulesAttribute] // RVA: 0xC19 Offset: 0xC19 VA: 0xC19
	internal static Action takeCapture; // 0x8
	[VisibleToOtherModulesAttribute] // RVA: 0xC1A Offset: 0xC1A VA: 0xC1A
	internal static Action releaseCapture; // 0xC
	[VisibleToOtherModulesAttribute] // RVA: 0xC1B Offset: 0xC1B VA: 0xC1B
	internal static Func<int, IntPtr, bool> processEvent; // 0x10
	[VisibleToOtherModulesAttribute] // RVA: 0xC1C Offset: 0xC1C VA: 0xC1C
	internal static Func<Exception, bool> endContainerGUIFromException; // 0x14
	[VisibleToOtherModulesAttribute] // RVA: 0xC1D Offset: 0xC1D VA: 0xC1D
	internal static Action enabledStateChanged; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC1E Offset: 0xC1E VA: 0xC1E
	[DebuggerBrowsableAttribute] // RVA: 0xC1E Offset: 0xC1E VA: 0xC1E
	private static bool <guiIsExiting>k__BackingField; // 0x1C

	// Properties
	[NativePropertyAttribute] // RVA: 0xC5C Offset: 0xC5C VA: 0xC5C
	internal static float pixelsPerPoint { get; }
	[NativePropertyAttribute] // RVA: 0xC5D Offset: 0xC5D VA: 0xC5D
	internal static int guiDepth { get; }
	public static string systemCopyBuffer { get; set; }
	internal static bool guiIsExiting { set; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xC32 Offset: 0xC32 VA: 0xC32
	// RVA: 0xD Offset: 0xD VA: 0xD
	internal static float get_pixelsPerPoint() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC33 Offset: 0xC33 VA: 0xC33
	// RVA: 0x27F Offset: 0x27F VA: 0x27F
	internal static int get_guiDepth() { }

	[FreeFunctionAttribute] // RVA: 0xC34 Offset: 0xC34 VA: 0xC34
	// RVA: 0x280 Offset: 0x280 VA: 0x280
	public static string get_systemCopyBuffer() { }

	[FreeFunctionAttribute] // RVA: 0xC35 Offset: 0xC35 VA: 0xC35
	// RVA: 0x739 Offset: 0x739 VA: 0x739
	public static void set_systemCopyBuffer(string value) { }

	// RVA: 0xB76 Offset: 0xB76 VA: 0xB76
	private static object Internal_GetDefaultSkin(int skinMode) { }

	// RVA: 0xF6A Offset: 0xF6A VA: 0xF6A
	private static void Internal_ExitGUI() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC36 Offset: 0xC36 VA: 0xC36
	// RVA: 0xF6B Offset: 0xF6B VA: 0xF6B
	private static void MarkGUIChanged() { }

	[CompilerGeneratedAttribute] // RVA: 0xC37 Offset: 0xC37 VA: 0xC37
	// RVA: 0x73A Offset: 0x73A VA: 0x73A
	internal static void set_guiIsExiting(bool value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC38 Offset: 0xC38 VA: 0xC38
	// RVA: 0xF6C Offset: 0xF6C VA: 0xF6C
	internal static void TakeCapture() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC39 Offset: 0xC39 VA: 0xC39
	// RVA: 0xF6D Offset: 0xF6D VA: 0xF6D
	internal static void RemoveCapture() { }

	// RVA: 0x281 Offset: 0x281 VA: 0x281
	internal static GUISkin GetDefaultSkin() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC3A Offset: 0xC3A VA: 0xC3A
	// RVA: 0x5DF Offset: 0x5DF VA: 0x5DF
	internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC3B Offset: 0xC3B VA: 0xC3B
	// RVA: 0x394 Offset: 0x394 VA: 0x394
	internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC3C Offset: 0xC3C VA: 0xC3C
	// RVA: 0x73B Offset: 0x73B VA: 0x73B
	internal static void EndGUI(int layoutType) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC3D Offset: 0xC3D VA: 0xC3D
	// RVA: 0xB77 Offset: 0xB77 VA: 0xB77
	internal static bool EndGUIFromException(Exception exception) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC3E Offset: 0xC3E VA: 0xC3E
	// RVA: 0xB78 Offset: 0xB78 VA: 0xB78
	internal static bool EndContainerGUIFromException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC3F Offset: 0xC3F VA: 0xC3F
	// RVA: 0xF6E Offset: 0xF6E VA: 0xF6E
	internal static void ResetGlobalState() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC40 Offset: 0xC40 VA: 0xC40
	// RVA: 0xB79 Offset: 0xB79 VA: 0xB79
	internal static bool IsExitGUIException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC41 Offset: 0xC41 VA: 0xC41
	// RVA: 0xB7A Offset: 0xB7A VA: 0xB7A
	internal static bool ShouldRethrowException(Exception exception) { }

	// RVA: 0xF6F Offset: 0xF6F VA: 0xF6F
	internal static void CheckOnGUI() { }
}

// Namespace: UnityEngine
public sealed class ExitGUIException : Exception // TypeDefIndex: 2113
{}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0xBE6 Offset: 0xBE6 VA: 0xBE6
internal class GUILayoutEntry // TypeDefIndex: 2114
{
	// Fields
	public float minWidth; // 0x8
	public float maxWidth; // 0xC
	public float minHeight; // 0x10
	public float maxHeight; // 0x14
	public Rect rect; // 0x18
	public int stretchWidth; // 0x28
	public int stretchHeight; // 0x2C
	public bool consideredForMargin; // 0x30
	private GUIStyle m_Style; // 0x34
	internal static Rect kDummyRect; // 0x0
	protected static int indent; // 0x10

	// Properties
	public GUIStyle style { get; set; }
	public virtual int marginLeft { get; }
	public virtual int marginRight { get; }
	public virtual int marginTop { get; }
	public virtual int marginBottom { get; }
	public int marginHorizontal { get; }
	public int marginVertical { get; }

	// Methods

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style) { }

	// RVA: 0xB49 Offset: 0xB49 VA: 0xB49
	public GUIStyle get_style() { }

	// RVA: 0x5FF Offset: 0x5FF VA: 0x5FF
	public void set_style(GUIStyle value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC42 Offset: 0xC42 VA: 0xC42
	// RVA: 0xB4A Offset: 0xB4A VA: 0xB4A Slot: 4
	public virtual int get_marginLeft() { }

	[CompilerGeneratedAttribute] // RVA: 0xC43 Offset: 0xC43 VA: 0xC43
	// RVA: 0xB4B Offset: 0xB4B VA: 0xB4B Slot: 5
	public virtual int get_marginRight() { }

	[CompilerGeneratedAttribute] // RVA: 0xC44 Offset: 0xC44 VA: 0xC44
	// RVA: 0xB4C Offset: 0xB4C VA: 0xB4C Slot: 6
	public virtual int get_marginTop() { }

	[CompilerGeneratedAttribute] // RVA: 0xC45 Offset: 0xC45 VA: 0xC45
	// RVA: 0xB4D Offset: 0xB4D VA: 0xB4D Slot: 7
	public virtual int get_marginBottom() { }

	[CompilerGeneratedAttribute] // RVA: 0xC46 Offset: 0xC46 VA: 0xC46
	// RVA: 0xB4E Offset: 0xB4E VA: 0xB4E
	public int get_marginHorizontal() { }

	[CompilerGeneratedAttribute] // RVA: 0xC47 Offset: 0xC47 VA: 0xC47
	// RVA: 0xB4F Offset: 0xB4F VA: 0xB4F
	public int get_marginVertical() { }

	// RVA: 0x71E Offset: 0x71E VA: 0x71E Slot: 8
	public virtual void CalcWidth() { }

	// RVA: 0x71F Offset: 0x71F VA: 0x71F Slot: 9
	public virtual void CalcHeight() { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 10
	public virtual void SetHorizontal(float x, float width) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5 Slot: 11
	public virtual void SetVertical(float y, float height) { }

	// RVA: 0x600 Offset: 0x600 VA: 0x600 Slot: 12
	protected virtual void ApplyStyleSettings(GUIStyle style) { }

	// RVA: 0x601 Offset: 0x601 VA: 0x601 Slot: 13
	public virtual void ApplyOptions(GUILayoutOption[] options) { }

	// RVA: 0xB50 Offset: 0xB50 VA: 0xB50 Slot: 3
	public override string ToString() { }

	// RVA: 0xF64 Offset: 0xF64 VA: 0xF64
	private static void .cctor() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0xBE7 Offset: 0xBE7 VA: 0xBE7
internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 2115
{
	// Fields
	public List<GUILayoutEntry> entries; // 0x38
	public bool isVertical; // 0x3C
	public bool resetCoords; // 0x3D
	public float spacing; // 0x40
	public bool sameSize; // 0x44
	public bool isWindow; // 0x45
	public int windowID; // 0x48
	private int m_Cursor; // 0x4C
	protected int m_StretchableCountX; // 0x50
	protected int m_StretchableCountY; // 0x54
	protected bool m_UserSpecifiedWidth; // 0x58
	protected bool m_UserSpecifiedHeight; // 0x59
	protected float m_ChildMinWidth; // 0x5C
	protected float m_ChildMaxWidth; // 0x60
	protected float m_ChildMinHeight; // 0x64
	protected float m_ChildMaxHeight; // 0x68
	protected int m_MarginLeft; // 0x6C
	protected int m_MarginRight; // 0x70
	protected int m_MarginTop; // 0x74
	protected int m_MarginBottom; // 0x78

	// Properties
	public override int marginLeft { get; }
	public override int marginRight { get; }
	public override int marginTop { get; }
	public override int marginBottom { get; }

	// Methods

	// RVA: 0x720 Offset: 0x720 VA: 0x720
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC48 Offset: 0xC48 VA: 0xC48
	// RVA: 0xB51 Offset: 0xB51 VA: 0xB51 Slot: 4
	public override int get_marginLeft() { }

	[CompilerGeneratedAttribute] // RVA: 0xC49 Offset: 0xC49 VA: 0xC49
	// RVA: 0xB52 Offset: 0xB52 VA: 0xB52 Slot: 5
	public override int get_marginRight() { }

	[CompilerGeneratedAttribute] // RVA: 0xC4A Offset: 0xC4A VA: 0xC4A
	// RVA: 0xB53 Offset: 0xB53 VA: 0xB53 Slot: 6
	public override int get_marginTop() { }

	[CompilerGeneratedAttribute] // RVA: 0xC4B Offset: 0xC4B VA: 0xC4B
	// RVA: 0xB54 Offset: 0xB54 VA: 0xB54 Slot: 7
	public override int get_marginBottom() { }

	// RVA: 0x602 Offset: 0x602 VA: 0x602 Slot: 13
	public override void ApplyOptions(GUILayoutOption[] options) { }

	// RVA: 0x603 Offset: 0x603 VA: 0x603 Slot: 12
	protected override void ApplyStyleSettings(GUIStyle style) { }

	// RVA: 0x721 Offset: 0x721 VA: 0x721
	public void ResetCursor() { }

	// RVA: 0x722 Offset: 0x722 VA: 0x722 Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6 Slot: 10
	public override void SetHorizontal(float x, float width) { }

	// RVA: 0x723 Offset: 0x723 VA: 0x723 Slot: 9
	public override void CalcHeight() { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 11
	public override void SetVertical(float y, float height) { }

	// RVA: 0xB55 Offset: 0xB55 VA: 0xB55 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 2116
{
	// Fields
	public float calcMinWidth; // 0x7C
	public float calcMaxWidth; // 0x80
	public float calcMinHeight; // 0x84
	public float calcMaxHeight; // 0x88
	public float clientWidth; // 0x8C
	public float clientHeight; // 0x90
	public bool allowHorizontalScroll; // 0x94
	public bool allowVerticalScroll; // 0x95
	public bool needsHorizontalScrollbar; // 0x96
	public bool needsVerticalScrollbar; // 0x97
	public GUIStyle horizontalScrollbar; // 0x98
	public GUIStyle verticalScrollbar; // 0x9C

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC4C Offset: 0xC4C VA: 0xC4C
	// RVA: 0x728 Offset: 0x728 VA: 0x728
	public void .ctor() { }

	// RVA: 0x729 Offset: 0x729 VA: 0x729 Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8 Slot: 10
	public override void SetHorizontal(float x, float width) { }

	// RVA: 0x72A Offset: 0x72A VA: 0x72A Slot: 9
	public override void CalcHeight() { }

	// RVA: 0x9 Offset: 0x9 VA: 0x9 Slot: 11
	public override void SetVertical(float y, float height) { }
}

// Namespace: UnityEngine
internal class ScrollViewState // TypeDefIndex: 2117
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC4D Offset: 0xC4D VA: 0xC4D
	// RVA: 0x73C Offset: 0x73C VA: 0x73C
	public void .ctor() { }
}

// Namespace: UnityEngine
internal class SliderState // TypeDefIndex: 2118
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC4E Offset: 0xC4E VA: 0xC4E
	// RVA: 0x73D Offset: 0x73D VA: 0x73D
	public void .ctor() { }
}

// Namespace: UnityEngine
public class TextEditor // TypeDefIndex: 2119
{
	// Fields
	public TouchScreenKeyboard keyboardOnScreen; // 0x8
	public int controlID; // 0xC
	public GUIStyle style; // 0x10
	public bool multiline; // 0x14
	public bool hasHorizontalCursorPos; // 0x15
	public bool isPasswordField; // 0x16
	public Vector2 scrollOffset; // 0x18
	private GUIContent m_Content; // 0x20
	private int m_CursorIndex; // 0x24
	private int m_SelectIndex; // 0x28
	private bool m_RevealCursor; // 0x2C
	private bool m_MouseDragSelectsWholeWords; // 0x2D
	private int m_DblClickInitPos; // 0x30
	private TextEditor.DblClickSnapping m_DblClickSnap; // 0x34
	private bool m_bJustSelected; // 0x35
	private int m_iAltCursorPos; // 0x38

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC4F Offset: 0xC4F VA: 0xC4F
	// RVA: 0x73E Offset: 0x73E VA: 0x73E
	public void .ctor() { }
}

// Namespace: 
public enum TextEditor.DblClickSnapping // TypeDefIndex: 2120
{
	// Fields
	public byte value__; // 0x0
	public const TextEditor.DblClickSnapping WORDS = 0;
	public const TextEditor.DblClickSnapping PARAGRAPHS = 1;
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2121
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5F Offset: 0xC5F VA: 0xC5F
[NativeHeaderAttribute] // RVA: 0xC5F Offset: 0xC5F VA: 0xC5F
[StaticAccessorAttribute] // RVA: 0xC5F Offset: 0xC5F VA: 0xC5F
[NativeHeaderAttribute] // RVA: 0xC5F Offset: 0xC5F VA: 0xC5F
public class Physics2D // TypeDefIndex: 2122
{
	// Fields
	private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0xFFFFFFFF

	// Methods

	// RVA: 0xF70 Offset: 0xF70 VA: 0xF70
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC60 Offset: 0xC60 VA: 0xC60
[NativeHeaderAttribute] // RVA: 0xC60 Offset: 0xC60 VA: 0xC60
[NativeClassAttribute] // RVA: 0xC60 Offset: 0xC60 VA: 0xC60
public struct RaycastHit2D // TypeDefIndex: 2123
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC63 Offset: 0xC63 VA: 0xC63
	private Vector2 m_Centroid; // 0x0
	[NativeNameAttribute] // RVA: 0xC64 Offset: 0xC64 VA: 0xC64
	private Vector2 m_Point; // 0x8
	[NativeNameAttribute] // RVA: 0xC65 Offset: 0xC65 VA: 0xC65
	private Vector2 m_Normal; // 0x10
	[NativeNameAttribute] // RVA: 0xC66 Offset: 0xC66 VA: 0xC66
	private float m_Distance; // 0x18
	[NativeNameAttribute] // RVA: 0xC67 Offset: 0xC67 VA: 0xC67
	private float m_Fraction; // 0x1C
	[NativeNameAttribute] // RVA: 0xC68 Offset: 0xC68 VA: 0xC68
	private int m_Collider; // 0x20

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public float distance { get; }
	public Collider2D collider { get; }

	// Methods

	// RVA: 0x623 Offset: 0x623 VA: 0x623
	public Vector2 get_point() { }

	// RVA: 0x624 Offset: 0x624 VA: 0x624
	public Vector2 get_normal() { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	public float get_distance() { }

	// RVA: 0xB7B Offset: 0xB7B VA: 0xB7B
	public Collider2D get_collider() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC61 Offset: 0xC61 VA: 0xC61
[NativeHeaderAttribute] // RVA: 0xC61 Offset: 0xC61 VA: 0xC61
public sealed class Rigidbody2D : Component // TypeDefIndex: 2124
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC62 Offset: 0xC62 VA: 0xC62
[RequireComponent] // RVA: 0xC62 Offset: 0xC62 VA: 0xC62
[RequiredByNativeCodeAttribute] // RVA: 0xC62 Offset: 0xC62 VA: 0xC62
public class Collider2D : Behaviour // TypeDefIndex: 2125
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2126
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6A Offset: 0xC6A VA: 0xC6A
[NativeHeaderAttribute] // RVA: 0xC6A Offset: 0xC6A VA: 0xC6A
[UsedByNativeCodeAttribute] // RVA: 0xC6A Offset: 0xC6A VA: 0xC6A
[NativeHeaderAttribute] // RVA: 0xC6A Offset: 0xC6A VA: 0xC6A
public struct RaycastHit // TypeDefIndex: 2127
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC6D Offset: 0xC6D VA: 0xC6D
	internal Vector3 m_Point; // 0x0
	[NativeNameAttribute] // RVA: 0xC6E Offset: 0xC6E VA: 0xC6E
	internal Vector3 m_Normal; // 0xC
	[NativeNameAttribute] // RVA: 0xC6F Offset: 0xC6F VA: 0xC6F
	internal uint m_FaceID; // 0x18
	[NativeNameAttribute] // RVA: 0xC70 Offset: 0xC70 VA: 0xC70
	internal float m_Distance; // 0x1C
	[NativeNameAttribute] // RVA: 0xC71 Offset: 0xC71 VA: 0xC71
	internal Vector2 m_UV; // 0x20
	[NativeNameAttribute] // RVA: 0xC72 Offset: 0xC72 VA: 0xC72
	internal int m_Collider; // 0x28

	// Properties
	public Collider collider { get; }
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public float distance { get; }

	// Methods

	// RVA: 0xB7C Offset: 0xB7C VA: 0xB7C
	public Collider get_collider() { }

	// RVA: 0x625 Offset: 0x625 VA: 0x625
	public Vector3 get_point() { }

	// RVA: 0x626 Offset: 0x626 VA: 0x626
	public Vector3 get_normal() { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	public float get_distance() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC6B Offset: 0xC6B VA: 0xC6B
[NativeHeaderAttribute] // RVA: 0xC6B Offset: 0xC6B VA: 0xC6B
[RequireComponent] // RVA: 0xC6B Offset: 0xC6B VA: 0xC6B
public class Collider : Component // TypeDefIndex: 2128
{}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xC6C Offset: 0xC6C VA: 0xC6C
[NativeHeaderAttribute] // RVA: 0xC6C Offset: 0xC6C VA: 0xC6C
public class Physics // TypeDefIndex: 2129
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2130
{}

// Namespace: UnityEngine
public enum RenderMode // TypeDefIndex: 2131
{
	// Fields
	public int value__; // 0x0
	public const RenderMode ScreenSpaceOverlay = 0;
	public const RenderMode ScreenSpaceCamera = 1;
	public const RenderMode WorldSpace = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC74 Offset: 0xC74 VA: 0xC74
[NativeHeaderAttribute] // RVA: 0xC74 Offset: 0xC74 VA: 0xC74
[NativeClassAttribute] // RVA: 0xC74 Offset: 0xC74 VA: 0xC74
[RequireComponent] // RVA: 0xC74 Offset: 0xC74 VA: 0xC74
public sealed class Canvas : Behaviour // TypeDefIndex: 2132
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xC79 Offset: 0xC79 VA: 0xC79
	[CompilerGeneratedAttribute] // RVA: 0xC79 Offset: 0xC79 VA: 0xC79
	private static Canvas.WillRenderCanvases willRenderCanvases; // 0xFFFFFFFF

	// Properties
	public RenderMode renderMode { get; }
	public bool isRootCanvas { get; }
	public float scaleFactor { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public bool pixelPerfect { get; }
	public int renderOrder { get; }
	public bool overrideSorting { get; set; }
	public int sortingOrder { get; set; }
	public int targetDisplay { get; }
	public int sortingLayerID { get; set; }
	public Canvas rootCanvas { get; }
	[NativePropertyAttribute] // RVA: 0xC81 Offset: 0xC81 VA: 0xC81
	public Camera worldCamera { get; }

	// Methods

	// RVA: 0x73F Offset: 0x73F VA: 0x73F
	public void .ctor() { }

	// RVA: 0x740 Offset: 0x740 VA: 0x740
	public static void add_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x741 Offset: 0x741 VA: 0x741
	public static void remove_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0xB7D Offset: 0xB7D VA: 0xB7D
	public RenderMode get_renderMode() { }

	// RVA: 0xB7E Offset: 0xB7E VA: 0xB7E
	public bool get_isRootCanvas() { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	public float get_scaleFactor() { }

	// RVA: 0x18 Offset: 0x18 VA: 0x18
	public void set_scaleFactor(float value) { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	public float get_referencePixelsPerUnit() { }

	// RVA: 0x19 Offset: 0x19 VA: 0x19
	public void set_referencePixelsPerUnit(float value) { }

	// RVA: 0xB7F Offset: 0xB7F VA: 0xB7F
	public bool get_pixelPerfect() { }

	// RVA: 0xB80 Offset: 0xB80 VA: 0xB80
	public int get_renderOrder() { }

	// RVA: 0xB81 Offset: 0xB81 VA: 0xB81
	public bool get_overrideSorting() { }

	// RVA: 0x627 Offset: 0x627 VA: 0x627
	public void set_overrideSorting(bool value) { }

	// RVA: 0xB82 Offset: 0xB82 VA: 0xB82
	public int get_sortingOrder() { }

	// RVA: 0x628 Offset: 0x628 VA: 0x628
	public void set_sortingOrder(int value) { }

	// RVA: 0xB83 Offset: 0xB83 VA: 0xB83
	public int get_targetDisplay() { }

	// RVA: 0xB84 Offset: 0xB84 VA: 0xB84
	public int get_sortingLayerID() { }

	// RVA: 0x629 Offset: 0x629 VA: 0x629
	public void set_sortingLayerID(int value) { }

	// RVA: 0xB85 Offset: 0xB85 VA: 0xB85
	public Canvas get_rootCanvas() { }

	// RVA: 0xB86 Offset: 0xB86 VA: 0xB86
	public Camera get_worldCamera() { }

	[FreeFunctionAttribute] // RVA: 0xC7B Offset: 0xC7B VA: 0xC7B
	// RVA: 0x282 Offset: 0x282 VA: 0x282
	public static Material GetDefaultCanvasMaterial() { }

	[FreeFunctionAttribute] // RVA: 0xC7C Offset: 0xC7C VA: 0xC7C
	// RVA: 0x283 Offset: 0x283 VA: 0x283
	public static Material GetETC1SupportedCanvasMaterial() { }

	// RVA: 0xF71 Offset: 0xF71 VA: 0xF71
	public static void ForceUpdateCanvases() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC7D Offset: 0xC7D VA: 0xC7D
	// RVA: 0xF72 Offset: 0xF72 VA: 0xF72
	private static void SendWillRenderCanvases() { }
}

// Namespace: 
public sealed class Canvas.WillRenderCanvases : MulticastDelegate // TypeDefIndex: 2133
{
	// Methods

	// RVA: 0x395 Offset: 0x395 VA: 0x395
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x742 Offset: 0x742 VA: 0x742 Slot: 12
	public virtual void Invoke() { }

	// RVA: 0xA29 Offset: 0xA29 VA: 0xA29 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x62A Offset: 0x62A VA: 0x62A Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xC75 Offset: 0xC75 VA: 0xC75
[NativeHeaderAttribute] // RVA: 0xC75 Offset: 0xC75 VA: 0xC75
public static class UISystemProfilerApi // TypeDefIndex: 2134
{
	// Methods

	// RVA: 0x745 Offset: 0x745 VA: 0x745
	public static void BeginSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x746 Offset: 0x746 VA: 0x746
	public static void EndSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x63A Offset: 0x63A VA: 0x63A
	public static void AddMarker(string name, Object obj) { }
}

// Namespace: 
public enum UISystemProfilerApi.SampleType // TypeDefIndex: 2135
{
	// Fields
	public int value__; // 0x0
	public const UISystemProfilerApi.SampleType Layout = 0;
	public const UISystemProfilerApi.SampleType Render = 1;
}

// Namespace: UnityEngine
public interface ICanvasRaycastFilter // TypeDefIndex: 2136
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC76 Offset: 0xC76 VA: 0xC76
[NativeHeaderAttribute] // RVA: 0xC76 Offset: 0xC76 VA: 0xC76
public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2137
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xC82 Offset: 0xC82 VA: 0xC82
	public float alpha { get; set; }
	[NativePropertyAttribute] // RVA: 0xC83 Offset: 0xC83 VA: 0xC83
	public bool interactable { get; }
	[NativePropertyAttribute] // RVA: 0xC84 Offset: 0xC84 VA: 0xC84
	public bool blocksRaycasts { get; }
	[NativePropertyAttribute] // RVA: 0xC85 Offset: 0xC85 VA: 0xC85
	public bool ignoreParentGroups { get; }

	// Methods

	// RVA: 0x2E Offset: 0x2E VA: 0x2E
	public float get_alpha() { }

	// RVA: 0x1A Offset: 0x1A VA: 0x1A
	public void set_alpha(float value) { }

	// RVA: 0xB87 Offset: 0xB87 VA: 0xB87
	public bool get_interactable() { }

	// RVA: 0xB88 Offset: 0xB88 VA: 0xB88
	public bool get_blocksRaycasts() { }

	// RVA: 0xB89 Offset: 0xB89 VA: 0xB89
	public bool get_ignoreParentGroups() { }

	// RVA: 0xA2A Offset: 0xA2A VA: 0xA2A Slot: 4
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC77 Offset: 0xC77 VA: 0xC77
[NativeClassAttribute] // RVA: 0xC77 Offset: 0xC77 VA: 0xC77
public sealed class CanvasRenderer : Component // TypeDefIndex: 2138
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xC7A Offset: 0xC7A VA: 0xC7A
	[CompilerGeneratedAttribute] // RVA: 0xC7A Offset: 0xC7A VA: 0xC7A
	private bool <isMask>k__BackingField; // 0xC

	// Properties
	public bool hasPopInstruction { set; }
	public int materialCount { get; set; }
	public int popMaterialCount { set; }
	public int absoluteDepth { get; }
	public bool hasMoved { get; }
	[NativePropertyAttribute] // RVA: 0xC86 Offset: 0xC86 VA: 0xC86
	public bool cull { get; set; }

	// Methods

	// RVA: 0x62B Offset: 0x62B VA: 0x62B
	public void set_hasPopInstruction(bool value) { }

	// RVA: 0xB8A Offset: 0xB8A VA: 0xB8A
	public int get_materialCount() { }

	// RVA: 0x62C Offset: 0x62C VA: 0x62C
	public void set_materialCount(int value) { }

	// RVA: 0x62D Offset: 0x62D VA: 0x62D
	public void set_popMaterialCount(int value) { }

	// RVA: 0xB8B Offset: 0xB8B VA: 0xB8B
	public int get_absoluteDepth() { }

	// RVA: 0xB8C Offset: 0xB8C VA: 0xB8C
	public bool get_hasMoved() { }

	// RVA: 0xB8D Offset: 0xB8D VA: 0xB8D
	public bool get_cull() { }

	// RVA: 0x62E Offset: 0x62E VA: 0x62E
	public void set_cull(bool value) { }

	// RVA: 0x62F Offset: 0x62F VA: 0x62F
	public void SetColor(Color color) { }

	// RVA: 0x630 Offset: 0x630 VA: 0x630
	public Color GetColor() { }

	// RVA: 0x631 Offset: 0x631 VA: 0x631
	public void EnableRectClipping(Rect rect) { }

	// RVA: 0x743 Offset: 0x743 VA: 0x743
	public void DisableRectClipping() { }

	// RVA: 0x396 Offset: 0x396 VA: 0x396
	public void SetMaterial(Material material, int index) { }

	// RVA: 0x397 Offset: 0x397 VA: 0x397
	public void SetPopMaterial(Material material, int index) { }

	// RVA: 0x632 Offset: 0x632 VA: 0x632
	public void SetTexture(Texture texture) { }

	// RVA: 0x633 Offset: 0x633 VA: 0x633
	public void SetAlphaTexture(Texture texture) { }

	// RVA: 0x634 Offset: 0x634 VA: 0x634
	public void SetMesh(Mesh mesh) { }

	// RVA: 0x744 Offset: 0x744 VA: 0x744
	public void Clear() { }

	// RVA: 0x398 Offset: 0x398 VA: 0x398
	public void SetMaterial(Material material, Texture texture) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7
	public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }

	// RVA: 0x11 Offset: 0x11 VA: 0x11
	public static void AddUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents) { }

	[StaticAccessorAttribute] // RVA: 0xC7E Offset: 0xC7E VA: 0xC7E
	// RVA: 0x635 Offset: 0x635 VA: 0x635
	private static void SplitIndicesStreamsInternal(object verts, object indices) { }

	[StaticAccessorAttribute] // RVA: 0xC7F Offset: 0xC7F VA: 0xC7F
	// RVA: 0x12 Offset: 0x12 VA: 0x12
	private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents) { }

	[StaticAccessorAttribute] // RVA: 0xC80 Offset: 0xC80 VA: 0xC80
	// RVA: 0x9 Offset: 0x9 VA: 0x9
	private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices) { }

	// RVA: 0x636 Offset: 0x636 VA: 0x636
	private void SetColor_Injected(ref Color color) { }

	// RVA: 0x637 Offset: 0x637 VA: 0x637
	private void GetColor_Injected(out Color ret) { }

	// RVA: 0x638 Offset: 0x638 VA: 0x638
	private void EnableRectClipping_Injected(ref Rect rect) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC78 Offset: 0xC78 VA: 0xC78
[NativeHeaderAttribute] // RVA: 0xC78 Offset: 0xC78 VA: 0xC78
[StaticAccessorAttribute] // RVA: 0xC78 Offset: 0xC78 VA: 0xC78
[NativeHeaderAttribute] // RVA: 0xC78 Offset: 0xC78 VA: 0xC78
[NativeHeaderAttribute] // RVA: 0xC78 Offset: 0xC78 VA: 0xC78
public sealed class RectTransformUtility // TypeDefIndex: 2139
{
	// Fields
	private static readonly Vector3[] s_Corners; // 0xFFFFFFFF

	// Methods

	// RVA: 0xA2B Offset: 0xA2B VA: 0xA2B
	public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam) { }

	// RVA: 0x14A Offset: 0x14A VA: 0x14A
	public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint) { }

	// RVA: 0x14B Offset: 0x14B VA: 0x14B
	public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint) { }

	// RVA: 0x399 Offset: 0x399 VA: 0x399
	public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos) { }

	// RVA: 0x39A Offset: 0x39A VA: 0x39A
	public static Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint) { }

	// RVA: 0x10D Offset: 0x10D VA: 0x10D
	public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive) { }

	// RVA: 0x39B Offset: 0x39B VA: 0x39B
	public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive) { }

	// RVA: 0x639 Offset: 0x639 VA: 0x639
	private static Vector2 GetTransposed(Vector2 input) { }

	// RVA: 0x10E Offset: 0x10E VA: 0x10E
	public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas) { }

	// RVA: 0x39C Offset: 0x39C VA: 0x39C
	public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas) { }

	// RVA: 0xA2C Offset: 0xA2C VA: 0xA2C
	private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam) { }

	// RVA: 0xF73 Offset: 0xF73 VA: 0xF73
	private static void .cctor() { }

	// RVA: 0x10F Offset: 0x10F VA: 0x10F
	private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret) { }

	// RVA: 0x39D Offset: 0x39D VA: 0x39D
	private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret) { }

	// RVA: 0xA2D Offset: 0xA2D VA: 0xA2D
	private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2140
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2141
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2142
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2143
{}

// Namespace: UnityEngine.EventSystems
[FlagsAttribute] // RVA: 0xC8B Offset: 0xC8B VA: 0xC8B
public enum EventHandle // TypeDefIndex: 2144
{
	// Fields
	public int value__; // 0x0
	public const EventHandle Unused = 0;
	public const EventHandle Used = 1;
}

// Namespace: UnityEngine.EventSystems
public interface IEventSystemHandler // TypeDefIndex: 2145
{}

// Namespace: UnityEngine.EventSystems
public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 2146
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerEnter(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 2147
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerExit(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 2148
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerDown(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 2149
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerUp(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 2150
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerClick(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 2151
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnBeginDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 2152
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnInitializePotentialDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 2153
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 2154
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnEndDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 2155
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDrop(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 2156
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnScroll(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 2157
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnUpdateSelected(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 2158
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSelect(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 2159
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeselect(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 2160
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnMove(AxisEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 2161
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSubmit(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 2162
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnCancel(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC8C Offset: 0xC8C VA: 0xC8C
public class EventSystem : UIBehaviour // TypeDefIndex: 2163
{
	// Fields
	private List<BaseInputModule> m_SystemInputModules; // 0xC
	private BaseInputModule m_CurrentInputModule; // 0x10
	private static List<EventSystem> m_EventSystems; // 0x0
	[SerializeField] // RVA: 0xCC0 Offset: 0xCC0 VA: 0xCC0
	[FormerlySerializedAsAttribute] // RVA: 0xCC0 Offset: 0xCC0 VA: 0xCC0
	private GameObject m_FirstSelected; // 0x14
	[SerializeField] // RVA: 0xCC1 Offset: 0xCC1 VA: 0xCC1
	private bool m_sendNavigationEvents; // 0x18
	[SerializeField] // RVA: 0xCC2 Offset: 0xCC2 VA: 0xCC2
	private int m_DragThreshold; // 0x1C
	private GameObject m_CurrentSelected; // 0x20
	private bool m_HasFocus; // 0x24
	private bool m_SelectionGuard; // 0x25
	private BaseEventData m_DummyData; // 0x28
	private static readonly Comparison<RaycastResult> s_RaycastComparer; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xCC3 Offset: 0xCC3 VA: 0xCC3
	private static Comparison<RaycastResult> <>f__mg$cache0; // 0x8

	// Properties
	public static EventSystem current { get; set; }
	public bool sendNavigationEvents { get; set; }
	public int pixelDragThreshold { get; set; }
	public BaseInputModule currentInputModule { get; }
	public GameObject firstSelectedGameObject { get; set; }
	public GameObject currentSelectedGameObject { get; }
	[ObsoleteAttribute] // RVA: 0xE37 Offset: 0xE37 VA: 0xE37
	public GameObject lastSelectedGameObject { get; }
	public bool isFocused { get; }
	public bool alreadySelecting { get; }
	private BaseEventData baseEventDataCache { get; }

	// Methods

	// RVA: 0x754 Offset: 0x754 VA: 0x754
	protected void .ctor() { }

	// RVA: 0x284 Offset: 0x284 VA: 0x284
	public static EventSystem get_current() { }

	// RVA: 0x755 Offset: 0x755 VA: 0x755
	public static void set_current(EventSystem value) { }

	// RVA: 0xBA1 Offset: 0xBA1 VA: 0xBA1
	public bool get_sendNavigationEvents() { }

	// RVA: 0x648 Offset: 0x648 VA: 0x648
	public void set_sendNavigationEvents(bool value) { }

	// RVA: 0xBA2 Offset: 0xBA2 VA: 0xBA2
	public int get_pixelDragThreshold() { }

	// RVA: 0x649 Offset: 0x649 VA: 0x649
	public void set_pixelDragThreshold(int value) { }

	// RVA: 0xBA3 Offset: 0xBA3 VA: 0xBA3
	public BaseInputModule get_currentInputModule() { }

	// RVA: 0xBA4 Offset: 0xBA4 VA: 0xBA4
	public GameObject get_firstSelectedGameObject() { }

	// RVA: 0x64A Offset: 0x64A VA: 0x64A
	public void set_firstSelectedGameObject(GameObject value) { }

	// RVA: 0xBA5 Offset: 0xBA5 VA: 0xBA5
	public GameObject get_currentSelectedGameObject() { }

	// RVA: 0xBA6 Offset: 0xBA6 VA: 0xBA6
	public GameObject get_lastSelectedGameObject() { }

	// RVA: 0xBA7 Offset: 0xBA7 VA: 0xBA7
	public bool get_isFocused() { }

	// RVA: 0x756 Offset: 0x756 VA: 0x756
	public void UpdateModules() { }

	// RVA: 0xBA8 Offset: 0xBA8 VA: 0xBA8
	public bool get_alreadySelecting() { }

	// RVA: 0x3A0 Offset: 0x3A0 VA: 0x3A0
	public void SetSelectedGameObject(GameObject selected, BaseEventData pointer) { }

	// RVA: 0xBA9 Offset: 0xBA9 VA: 0xBA9
	private BaseEventData get_baseEventDataCache() { }

	// RVA: 0x64B Offset: 0x64B VA: 0x64B
	public void SetSelectedGameObject(GameObject selected) { }

	// RVA: 0x5E6 Offset: 0x5E6 VA: 0x5E6
	private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs) { }

	// RVA: 0x3A1 Offset: 0x3A1 VA: 0x3A1
	public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults) { }

	// RVA: 0xBAA Offset: 0xBAA VA: 0xBAA
	public bool IsPointerOverGameObject() { }

	// RVA: 0x5E7 Offset: 0x5E7 VA: 0x5E7
	public bool IsPointerOverGameObject(int pointerId) { }

	// RVA: 0x757 Offset: 0x757 VA: 0x757 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x758 Offset: 0x758 VA: 0x758 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x759 Offset: 0x759 VA: 0x759
	private void TickModules() { }

	// RVA: 0x64C Offset: 0x64C VA: 0x64C Slot: 17
	protected virtual void OnApplicationFocus(bool hasFocus) { }

	// RVA: 0x75A Offset: 0x75A VA: 0x75A Slot: 18
	protected virtual void Update() { }

	// RVA: 0x64D Offset: 0x64D VA: 0x64D
	private void ChangeEventModule(BaseInputModule module) { }

	// RVA: 0xBAB Offset: 0xBAB VA: 0xBAB Slot: 3
	public override string ToString() { }

	// RVA: 0xF74 Offset: 0xF74 VA: 0xF74
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC8D Offset: 0xC8D VA: 0xC8D
public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler // TypeDefIndex: 2164
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xCC4 Offset: 0xCC4 VA: 0xCC4
	[SerializeField] // RVA: 0xCC4 Offset: 0xCC4 VA: 0xCC4
	private List<EventTrigger.Entry> m_Delegates; // 0xC
	[EditorBrowsableAttribute] // RVA: 0xCC5 Offset: 0xCC5 VA: 0xCC5
	[ObsoleteAttribute] // RVA: 0xCC5 Offset: 0xCC5 VA: 0xCC5
	public List<EventTrigger.Entry> delegates; // 0x10

	// Properties
	public List<EventTrigger.Entry> triggers { get; set; }

	// Methods

	// RVA: 0x75B Offset: 0x75B VA: 0x75B
	protected void .ctor() { }

	// RVA: 0xBAC Offset: 0xBAC VA: 0xBAC
	public List<EventTrigger.Entry> get_triggers() { }

	// RVA: 0x64E Offset: 0x64E VA: 0x64E
	public void set_triggers(List<EventTrigger.Entry> value) { }

	// RVA: 0x3A2 Offset: 0x3A2 VA: 0x3A2
	private void Execute(EventTriggerType id, BaseEventData eventData) { }

	// RVA: 0x64F Offset: 0x64F VA: 0x64F Slot: 21
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x650 Offset: 0x650 VA: 0x650 Slot: 22
	public virtual void OnPointerExit(PointerEventData eventData) { }

	// RVA: 0x651 Offset: 0x651 VA: 0x651 Slot: 23
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x652 Offset: 0x652 VA: 0x652 Slot: 24
	public virtual void OnDrop(PointerEventData eventData) { }

	// RVA: 0x653 Offset: 0x653 VA: 0x653 Slot: 25
	public virtual void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x654 Offset: 0x654 VA: 0x654 Slot: 26
	public virtual void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x655 Offset: 0x655 VA: 0x655 Slot: 27
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x656 Offset: 0x656 VA: 0x656 Slot: 28
	public virtual void OnSelect(BaseEventData eventData) { }

	// RVA: 0x657 Offset: 0x657 VA: 0x657 Slot: 29
	public virtual void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x658 Offset: 0x658 VA: 0x658 Slot: 30
	public virtual void OnScroll(PointerEventData eventData) { }

	// RVA: 0x659 Offset: 0x659 VA: 0x659 Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }

	// RVA: 0x65A Offset: 0x65A VA: 0x65A Slot: 32
	public virtual void OnUpdateSelected(BaseEventData eventData) { }

	// RVA: 0x65B Offset: 0x65B VA: 0x65B Slot: 33
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x65C Offset: 0x65C VA: 0x65C Slot: 34
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x65D Offset: 0x65D VA: 0x65D Slot: 35
	public virtual void OnEndDrag(PointerEventData eventData) { }

	// RVA: 0x65E Offset: 0x65E VA: 0x65E Slot: 36
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x65F Offset: 0x65F VA: 0x65F Slot: 37
	public virtual void OnCancel(BaseEventData eventData) { }
}

// Namespace: 
[Serializable]
public class EventTrigger.TriggerEvent : UnityEvent<BaseEventData> // TypeDefIndex: 2165
{
	// Methods

	// RVA: 0x75D Offset: 0x75D VA: 0x75D
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class EventTrigger.Entry // TypeDefIndex: 2166
{
	// Fields
	public EventTriggerType eventID; // 0x8
	public EventTrigger.TriggerEvent callback; // 0xC

	// Methods

	// RVA: 0x75C Offset: 0x75C VA: 0x75C
	public void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
public enum EventTriggerType // TypeDefIndex: 2167
{
	// Fields
	public int value__; // 0x0
	public const EventTriggerType PointerEnter = 0;
	public const EventTriggerType PointerExit = 1;
	public const EventTriggerType PointerDown = 2;
	public const EventTriggerType PointerUp = 3;
	public const EventTriggerType PointerClick = 4;
	public const EventTriggerType Drag = 5;
	public const EventTriggerType Drop = 6;
	public const EventTriggerType Scroll = 7;
	public const EventTriggerType UpdateSelected = 8;
	public const EventTriggerType Select = 9;
	public const EventTriggerType Deselect = 10;
	public const EventTriggerType Move = 11;
	public const EventTriggerType InitializePotentialDrag = 12;
	public const EventTriggerType BeginDrag = 13;
	public const EventTriggerType EndDrag = 14;
	public const EventTriggerType Submit = 15;
	public const EventTriggerType Cancel = 16;
}

// Namespace: UnityEngine.EventSystems
public static class ExecuteEvents // TypeDefIndex: 2168
{
	// Fields
	private static readonly ExecuteEvents.EventFunction<IPointerEnterHandler> s_PointerEnterHandler; // 0x0
	private static readonly ExecuteEvents.EventFunction<IPointerExitHandler> s_PointerExitHandler; // 0x4
	private static readonly ExecuteEvents.EventFunction<IPointerDownHandler> s_PointerDownHandler; // 0x8
	private static readonly ExecuteEvents.EventFunction<IPointerUpHandler> s_PointerUpHandler; // 0xC
	private static readonly ExecuteEvents.EventFunction<IPointerClickHandler> s_PointerClickHandler; // 0x10
	private static readonly ExecuteEvents.EventFunction<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x14
	private static readonly ExecuteEvents.EventFunction<IBeginDragHandler> s_BeginDragHandler; // 0x18
	private static readonly ExecuteEvents.EventFunction<IDragHandler> s_DragHandler; // 0x1C
	private static readonly ExecuteEvents.EventFunction<IEndDragHandler> s_EndDragHandler; // 0x20
	private static readonly ExecuteEvents.EventFunction<IDropHandler> s_DropHandler; // 0x24
	private static readonly ExecuteEvents.EventFunction<IScrollHandler> s_ScrollHandler; // 0x28
	private static readonly ExecuteEvents.EventFunction<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x2C
	private static readonly ExecuteEvents.EventFunction<ISelectHandler> s_SelectHandler; // 0x30
	private static readonly ExecuteEvents.EventFunction<IDeselectHandler> s_DeselectHandler; // 0x34
	private static readonly ExecuteEvents.EventFunction<IMoveHandler> s_MoveHandler; // 0x38
	private static readonly ExecuteEvents.EventFunction<ISubmitHandler> s_SubmitHandler; // 0x3C
	private static readonly ExecuteEvents.EventFunction<ICancelHandler> s_CancelHandler; // 0x40
	private static readonly ObjectPool<List<IEventSystemHandler>> s_HandlerListPool; // 0x44
	private static readonly List<Transform> s_InternalTransformList; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCC6 Offset: 0xCC6 VA: 0xCC6
	private static ExecuteEvents.EventFunction<IPointerEnterHandler> <>f__mg$cache0; // 0x4C
	[CompilerGeneratedAttribute] // RVA: 0xCC7 Offset: 0xCC7 VA: 0xCC7
	private static ExecuteEvents.EventFunction<IPointerExitHandler> <>f__mg$cache1; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCC8 Offset: 0xCC8 VA: 0xCC8
	private static ExecuteEvents.EventFunction<IPointerDownHandler> <>f__mg$cache2; // 0x54
	[CompilerGeneratedAttribute] // RVA: 0xCC9 Offset: 0xCC9 VA: 0xCC9
	private static ExecuteEvents.EventFunction<IPointerUpHandler> <>f__mg$cache3; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCCA Offset: 0xCCA VA: 0xCCA
	private static ExecuteEvents.EventFunction<IPointerClickHandler> <>f__mg$cache4; // 0x5C
	[CompilerGeneratedAttribute] // RVA: 0xCCB Offset: 0xCCB VA: 0xCCB
	private static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> <>f__mg$cache5; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCCC Offset: 0xCCC VA: 0xCCC
	private static ExecuteEvents.EventFunction<IBeginDragHandler> <>f__mg$cache6; // 0x64
	[CompilerGeneratedAttribute] // RVA: 0xCCD Offset: 0xCCD VA: 0xCCD
	private static ExecuteEvents.EventFunction<IDragHandler> <>f__mg$cache7; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCCE Offset: 0xCCE VA: 0xCCE
	private static ExecuteEvents.EventFunction<IEndDragHandler> <>f__mg$cache8; // 0x6C
	[CompilerGeneratedAttribute] // RVA: 0xCCF Offset: 0xCCF VA: 0xCCF
	private static ExecuteEvents.EventFunction<IDropHandler> <>f__mg$cache9; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCD0 Offset: 0xCD0 VA: 0xCD0
	private static ExecuteEvents.EventFunction<IScrollHandler> <>f__mg$cacheA; // 0x74
	[CompilerGeneratedAttribute] // RVA: 0xCD1 Offset: 0xCD1 VA: 0xCD1
	private static ExecuteEvents.EventFunction<IUpdateSelectedHandler> <>f__mg$cacheB; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCD2 Offset: 0xCD2 VA: 0xCD2
	private static ExecuteEvents.EventFunction<ISelectHandler> <>f__mg$cacheC; // 0x7C
	[CompilerGeneratedAttribute] // RVA: 0xCD3 Offset: 0xCD3 VA: 0xCD3
	private static ExecuteEvents.EventFunction<IDeselectHandler> <>f__mg$cacheD; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCD4 Offset: 0xCD4 VA: 0xCD4
	private static ExecuteEvents.EventFunction<IMoveHandler> <>f__mg$cacheE; // 0x84
	[CompilerGeneratedAttribute] // RVA: 0xCD5 Offset: 0xCD5 VA: 0xCD5
	private static ExecuteEvents.EventFunction<ISubmitHandler> <>f__mg$cacheF; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCD6 Offset: 0xCD6 VA: 0xCD6
	private static ExecuteEvents.EventFunction<ICancelHandler> <>f__mg$cache10; // 0x8C

	// Properties
	public static ExecuteEvents.EventFunction<IPointerEnterHandler> pointerEnterHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerExitHandler> pointerExitHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerDownHandler> pointerDownHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerUpHandler> pointerUpHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerClickHandler> pointerClickHandler { get; }
	public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; }
	public static ExecuteEvents.EventFunction<IBeginDragHandler> beginDragHandler { get; }
	public static ExecuteEvents.EventFunction<IDragHandler> dragHandler { get; }
	public static ExecuteEvents.EventFunction<IEndDragHandler> endDragHandler { get; }
	public static ExecuteEvents.EventFunction<IDropHandler> dropHandler { get; }
	public static ExecuteEvents.EventFunction<IScrollHandler> scrollHandler { get; }
	public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; }
	public static ExecuteEvents.EventFunction<ISelectHandler> selectHandler { get; }
	public static ExecuteEvents.EventFunction<IDeselectHandler> deselectHandler { get; }
	public static ExecuteEvents.EventFunction<IMoveHandler> moveHandler { get; }
	public static ExecuteEvents.EventFunction<ISubmitHandler> submitHandler { get; }
	public static ExecuteEvents.EventFunction<ICancelHandler> cancelHandler { get; }

	// Methods

	// RVA: -1 Offset: -1
	public static T ValidateEventData<T>(BaseEventData data) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB8 Offset: 0xDB8 VA: 0xDB8
	|-ExecuteEvents.ValidateEventData<object>
	|-ExecuteEvents.ValidateEventData<AxisEventData>
	|-ExecuteEvents.ValidateEventData<PointerEventData>
	*/

	// RVA: 0x660 Offset: 0x660 VA: 0x660
	private static void Execute(IPointerEnterHandler handler, BaseEventData eventData) { }

	// RVA: 0x661 Offset: 0x661 VA: 0x661
	private static void Execute(IPointerExitHandler handler, BaseEventData eventData) { }

	// RVA: 0x662 Offset: 0x662 VA: 0x662
	private static void Execute(IPointerDownHandler handler, BaseEventData eventData) { }

	// RVA: 0x663 Offset: 0x663 VA: 0x663
	private static void Execute(IPointerUpHandler handler, BaseEventData eventData) { }

	// RVA: 0x664 Offset: 0x664 VA: 0x664
	private static void Execute(IPointerClickHandler handler, BaseEventData eventData) { }

	// RVA: 0x665 Offset: 0x665 VA: 0x665
	private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x666 Offset: 0x666 VA: 0x666
	private static void Execute(IBeginDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x667 Offset: 0x667 VA: 0x667
	private static void Execute(IDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x668 Offset: 0x668 VA: 0x668
	private static void Execute(IEndDragHandler handler, BaseEventData eventData) { }

	// RVA: 0x669 Offset: 0x669 VA: 0x669
	private static void Execute(IDropHandler handler, BaseEventData eventData) { }

	// RVA: 0x66A Offset: 0x66A VA: 0x66A
	private static void Execute(IScrollHandler handler, BaseEventData eventData) { }

	// RVA: 0x66B Offset: 0x66B VA: 0x66B
	private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData) { }

	// RVA: 0x66C Offset: 0x66C VA: 0x66C
	private static void Execute(ISelectHandler handler, BaseEventData eventData) { }

	// RVA: 0x66D Offset: 0x66D VA: 0x66D
	private static void Execute(IDeselectHandler handler, BaseEventData eventData) { }

	// RVA: 0x66E Offset: 0x66E VA: 0x66E
	private static void Execute(IMoveHandler handler, BaseEventData eventData) { }

	// RVA: 0x66F Offset: 0x66F VA: 0x66F
	private static void Execute(ISubmitHandler handler, BaseEventData eventData) { }

	// RVA: 0x670 Offset: 0x670 VA: 0x670
	private static void Execute(ICancelHandler handler, BaseEventData eventData) { }

	// RVA: 0x285 Offset: 0x285 VA: 0x285
	public static ExecuteEvents.EventFunction<IPointerEnterHandler> get_pointerEnterHandler() { }

	// RVA: 0x286 Offset: 0x286 VA: 0x286
	public static ExecuteEvents.EventFunction<IPointerExitHandler> get_pointerExitHandler() { }

	// RVA: 0x287 Offset: 0x287 VA: 0x287
	public static ExecuteEvents.EventFunction<IPointerDownHandler> get_pointerDownHandler() { }

	// RVA: 0x288 Offset: 0x288 VA: 0x288
	public static ExecuteEvents.EventFunction<IPointerUpHandler> get_pointerUpHandler() { }

	// RVA: 0x289 Offset: 0x289 VA: 0x289
	public static ExecuteEvents.EventFunction<IPointerClickHandler> get_pointerClickHandler() { }

	// RVA: 0x28A Offset: 0x28A VA: 0x28A
	public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> get_initializePotentialDrag() { }

	// RVA: 0x28B Offset: 0x28B VA: 0x28B
	public static ExecuteEvents.EventFunction<IBeginDragHandler> get_beginDragHandler() { }

	// RVA: 0x28C Offset: 0x28C VA: 0x28C
	public static ExecuteEvents.EventFunction<IDragHandler> get_dragHandler() { }

	// RVA: 0x28D Offset: 0x28D VA: 0x28D
	public static ExecuteEvents.EventFunction<IEndDragHandler> get_endDragHandler() { }

	// RVA: 0x28E Offset: 0x28E VA: 0x28E
	public static ExecuteEvents.EventFunction<IDropHandler> get_dropHandler() { }

	// RVA: 0x28F Offset: 0x28F VA: 0x28F
	public static ExecuteEvents.EventFunction<IScrollHandler> get_scrollHandler() { }

	// RVA: 0x290 Offset: 0x290 VA: 0x290
	public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> get_updateSelectedHandler() { }

	// RVA: 0x291 Offset: 0x291 VA: 0x291
	public static ExecuteEvents.EventFunction<ISelectHandler> get_selectHandler() { }

	// RVA: 0x292 Offset: 0x292 VA: 0x292
	public static ExecuteEvents.EventFunction<IDeselectHandler> get_deselectHandler() { }

	// RVA: 0x293 Offset: 0x293 VA: 0x293
	public static ExecuteEvents.EventFunction<IMoveHandler> get_moveHandler() { }

	// RVA: 0x294 Offset: 0x294 VA: 0x294
	public static ExecuteEvents.EventFunction<ISubmitHandler> get_submitHandler() { }

	// RVA: 0x295 Offset: 0x295 VA: 0x295
	public static ExecuteEvents.EventFunction<ICancelHandler> get_cancelHandler() { }

	// RVA: 0x671 Offset: 0x671 VA: 0x671
	private static void GetEventChain(GameObject root, IList<Transform> eventChain) { }

	// RVA: -1 Offset: -1
	public static bool Execute<T>(GameObject target, BaseEventData eventData, ExecuteEvents.EventFunction<T> functor) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA62 Offset: 0xA62 VA: 0xA62
	|-ExecuteEvents.Execute<object>
	|-ExecuteEvents.Execute<IBeginDragHandler>
	|-ExecuteEvents.Execute<ICancelHandler>
	|-ExecuteEvents.Execute<IDeselectHandler>
	|-ExecuteEvents.Execute<IDragHandler>
	|-ExecuteEvents.Execute<IEndDragHandler>
	|-ExecuteEvents.Execute<IInitializePotentialDragHandler>
	|-ExecuteEvents.Execute<IMoveHandler>
	|-ExecuteEvents.Execute<IPointerClickHandler>
	|-ExecuteEvents.Execute<IPointerEnterHandler>
	|-ExecuteEvents.Execute<IPointerExitHandler>
	|-ExecuteEvents.Execute<IPointerUpHandler>
	|-ExecuteEvents.Execute<ISelectHandler>
	|-ExecuteEvents.Execute<ISubmitHandler>
	|-ExecuteEvents.Execute<IUpdateSelectedHandler>
	*/

	// RVA: -1 Offset: -1
	public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, ExecuteEvents.EventFunction<T> callbackFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xA63 Offset: 0xA63 VA: 0xA63
	|-ExecuteEvents.ExecuteHierarchy<object>
	|-ExecuteEvents.ExecuteHierarchy<IDropHandler>
	|-ExecuteEvents.ExecuteHierarchy<IPointerDownHandler>
	|-ExecuteEvents.ExecuteHierarchy<IPointerExitHandler>
	|-ExecuteEvents.ExecuteHierarchy<IScrollHandler>
	*/

	// RVA: -1 Offset: -1
	private static bool ShouldSendToComponent<T>(Component component) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDB9 Offset: 0xDB9 VA: 0xDB9
	|-ExecuteEvents.ShouldSendToComponent<object>
	*/

	// RVA: -1 Offset: -1
	private static void GetEventList<T>(GameObject go, IList<IEventSystemHandler> results) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x850 Offset: 0x850 VA: 0x850
	|-ExecuteEvents.GetEventList<object>
	*/

	// RVA: -1 Offset: -1
	public static bool CanHandleEvent<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDBA Offset: 0xDBA VA: 0xDBA
	|-ExecuteEvents.CanHandleEvent<object>
	*/

	// RVA: -1 Offset: -1
	public static GameObject GetEventHandler<T>(GameObject root) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDBB Offset: 0xDBB VA: 0xDBB
	|-ExecuteEvents.GetEventHandler<object>
	|-ExecuteEvents.GetEventHandler<IDragHandler>
	|-ExecuteEvents.GetEventHandler<IPointerClickHandler>
	|-ExecuteEvents.GetEventHandler<IScrollHandler>
	|-ExecuteEvents.GetEventHandler<ISelectHandler>
	*/

	// RVA: 0xF75 Offset: 0xF75 VA: 0xF75
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xDB9 Offset: 0xDB9 VA: 0xDB9
	// RVA: 0x75E Offset: 0x75E VA: 0x75E
	private static void <s_HandlerListPool>m__0(List<IEventSystemHandler> l) { }
}

// Namespace: 
public sealed class ExecuteEvents.EventFunction<T1> : MulticastDelegate // TypeDefIndex: 2169
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x44D Offset: 0x44D VA: 0x44D
	|-ExecuteEvents.EventFunction<object>..ctor
	|-ExecuteEvents.EventFunction<IBeginDragHandler>..ctor
	|-ExecuteEvents.EventFunction<ICancelHandler>..ctor
	|-ExecuteEvents.EventFunction<IDeselectHandler>..ctor
	|-ExecuteEvents.EventFunction<IDragHandler>..ctor
	|-ExecuteEvents.EventFunction<IDropHandler>..ctor
	|-ExecuteEvents.EventFunction<IEndDragHandler>..ctor
	|-ExecuteEvents.EventFunction<IInitializePotentialDragHandler>..ctor
	|-ExecuteEvents.EventFunction<IMoveHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerClickHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerDownHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerEnterHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerExitHandler>..ctor
	|-ExecuteEvents.EventFunction<IPointerUpHandler>..ctor
	|-ExecuteEvents.EventFunction<IScrollHandler>..ctor
	|-ExecuteEvents.EventFunction<ISelectHandler>..ctor
	|-ExecuteEvents.EventFunction<ISubmitHandler>..ctor
	|-ExecuteEvents.EventFunction<IUpdateSelectedHandler>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual void Invoke(T1 handler, BaseEventData eventData) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x44E Offset: 0x44E VA: 0x44E
	|-ExecuteEvents.EventFunction<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 handler, BaseEventData eventData, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x9E Offset: 0x9E VA: 0x9E
	|-ExecuteEvents.EventFunction<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x851 Offset: 0x851 VA: 0x851
	|-ExecuteEvents.EventFunction<object>.EndInvoke
	*/
}

// Namespace: UnityEngine.EventSystems
public enum MoveDirection // TypeDefIndex: 2170
{
	// Fields
	public int value__; // 0x0
	public const MoveDirection Left = 0;
	public const MoveDirection Up = 1;
	public const MoveDirection Right = 2;
	public const MoveDirection Down = 3;
	public const MoveDirection None = 4;
}

// Namespace: UnityEngine.EventSystems
internal static class RaycasterManager // TypeDefIndex: 2171
{
	// Fields
	private static readonly List<BaseRaycaster> s_Raycasters; // 0xFFFFFFFF

	// Methods

	// RVA: 0x767 Offset: 0x767 VA: 0x767
	public static void AddRaycaster(BaseRaycaster baseRaycaster) { }

	// RVA: 0x296 Offset: 0x296 VA: 0x296
	public static List<BaseRaycaster> GetRaycasters() { }

	// RVA: 0x768 Offset: 0x768 VA: 0x768
	public static void RemoveRaycasters(BaseRaycaster baseRaycaster) { }

	// RVA: 0xF76 Offset: 0xF76 VA: 0xF76
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
public struct RaycastResult // TypeDefIndex: 2172
{
	// Fields
	private GameObject m_GameObject; // 0x0
	public BaseRaycaster module; // 0x4
	public float distance; // 0x8
	public float index; // 0xC
	public int depth; // 0x10
	public int sortingLayer; // 0x14
	public int sortingOrder; // 0x18
	public Vector3 worldPosition; // 0x1C
	public Vector3 worldNormal; // 0x28
	public Vector2 screenPosition; // 0x34
	internal int displayIndex; // 0x3C

	// Properties
	public GameObject gameObject { get; set; }
	public bool isValid { get; }

	// Methods

	// RVA: 0xBCA Offset: 0xBCA VA: 0xBCA
	public GameObject get_gameObject() { }

	// RVA: 0x695 Offset: 0x695 VA: 0x695
	public void set_gameObject(GameObject value) { }

	// RVA: 0xBCB Offset: 0xBCB VA: 0xBCB
	public bool get_isValid() { }

	// RVA: 0x766 Offset: 0x766 VA: 0x766
	public void Clear() { }

	// RVA: 0xBCC Offset: 0xBCC VA: 0xBCC Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 2173
{
	// Methods

	// RVA: 0x775 Offset: 0x775 VA: 0x775
	protected void .ctor() { }

	// RVA: 0x776 Offset: 0x776 VA: 0x776 Slot: 4
	protected virtual void Awake() { }

	// RVA: 0x777 Offset: 0x777 VA: 0x777 Slot: 5
	protected virtual void OnEnable() { }

	// RVA: 0x778 Offset: 0x778 VA: 0x778 Slot: 6
	protected virtual void Start() { }

	// RVA: 0x779 Offset: 0x779 VA: 0x779 Slot: 7
	protected virtual void OnDisable() { }

	// RVA: 0x77A Offset: 0x77A VA: 0x77A Slot: 8
	protected virtual void OnDestroy() { }

	// RVA: 0xBE3 Offset: 0xBE3 VA: 0xBE3 Slot: 9
	public virtual bool IsActive() { }

	// RVA: 0x77B Offset: 0x77B VA: 0x77B Slot: 10
	protected virtual void OnRectTransformDimensionsChange() { }

	// RVA: 0x77C Offset: 0x77C VA: 0x77C Slot: 11
	protected virtual void OnBeforeTransformParentChanged() { }

	// RVA: 0x77D Offset: 0x77D VA: 0x77D Slot: 12
	protected virtual void OnTransformParentChanged() { }

	// RVA: 0x77E Offset: 0x77E VA: 0x77E Slot: 13
	protected virtual void OnDidApplyAnimationProperties() { }

	// RVA: 0x77F Offset: 0x77F VA: 0x77F Slot: 14
	protected virtual void OnCanvasGroupChanged() { }

	// RVA: 0x780 Offset: 0x780 VA: 0x780 Slot: 15
	protected virtual void OnCanvasHierarchyChanged() { }

	// RVA: 0xBE4 Offset: 0xBE4 VA: 0xBE4 Slot: 16
	public bool IsDestroyed() { }
}

// Namespace: UnityEngine.EventSystems
public class AxisEventData : BaseEventData // TypeDefIndex: 2174
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD7 Offset: 0xCD7 VA: 0xCD7
	[DebuggerBrowsableAttribute] // RVA: 0xCD7 Offset: 0xCD7 VA: 0xCD7
	private Vector2 <moveVector>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD8 Offset: 0xCD8 VA: 0xCD8
	[DebuggerBrowsableAttribute] // RVA: 0xCD8 Offset: 0xCD8 VA: 0xCD8
	private MoveDirection <moveDir>k__BackingField; // 0x18

	// Properties
	public Vector2 moveVector { get; set; }
	public MoveDirection moveDir { get; set; }

	// Methods

	// RVA: 0x63B Offset: 0x63B VA: 0x63B
	public void .ctor(EventSystem eventSystem) { }

	[CompilerGeneratedAttribute] // RVA: 0xDBA Offset: 0xDBA VA: 0xDBA
	// RVA: 0x63C Offset: 0x63C VA: 0x63C
	public Vector2 get_moveVector() { }

	[CompilerGeneratedAttribute] // RVA: 0xDBB Offset: 0xDBB VA: 0xDBB
	// RVA: 0x63D Offset: 0x63D VA: 0x63D
	public void set_moveVector(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDBC Offset: 0xDBC VA: 0xDBC
	// RVA: 0xB8F Offset: 0xB8F VA: 0xB8F
	public MoveDirection get_moveDir() { }

	[CompilerGeneratedAttribute] // RVA: 0xDBD Offset: 0xDBD VA: 0xDBD
	// RVA: 0x63E Offset: 0x63E VA: 0x63E
	public void set_moveDir(MoveDirection value) { }
}

// Namespace: UnityEngine.EventSystems
public abstract class AbstractEventData // TypeDefIndex: 2175
{
	// Fields
	protected bool m_Used; // 0x8

	// Properties
	public virtual bool used { get; }

	// Methods

	// RVA: 0x747 Offset: 0x747 VA: 0x747
	protected void .ctor() { }

	// RVA: 0x748 Offset: 0x748 VA: 0x748 Slot: 4
	public virtual void Reset() { }

	// RVA: 0x749 Offset: 0x749 VA: 0x749 Slot: 5
	public virtual void Use() { }

	// RVA: 0xB8E Offset: 0xB8E VA: 0xB8E Slot: 6
	public virtual bool get_used() { }
}

// Namespace: UnityEngine.EventSystems
public class BaseEventData : AbstractEventData // TypeDefIndex: 2176
{
	// Fields
	private readonly EventSystem m_EventSystem; // 0xC

	// Properties
	public BaseInputModule currentInputModule { get; }
	public GameObject selectedObject { get; set; }

	// Methods

	// RVA: 0x63F Offset: 0x63F VA: 0x63F
	public void .ctor(EventSystem eventSystem) { }

	// RVA: 0xB90 Offset: 0xB90 VA: 0xB90
	public BaseInputModule get_currentInputModule() { }

	// RVA: 0xB91 Offset: 0xB91 VA: 0xB91
	public GameObject get_selectedObject() { }

	// RVA: 0x640 Offset: 0x640 VA: 0x640
	public void set_selectedObject(GameObject value) { }
}

// Namespace: UnityEngine.EventSystems
public class PointerEventData : BaseEventData // TypeDefIndex: 2177
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD9 Offset: 0xCD9 VA: 0xCD9
	[DebuggerBrowsableAttribute] // RVA: 0xCD9 Offset: 0xCD9 VA: 0xCD9
	private GameObject <pointerEnter>k__BackingField; // 0x10
	private GameObject m_PointerPress; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCDA Offset: 0xCDA VA: 0xCDA
	[DebuggerBrowsableAttribute] // RVA: 0xCDA Offset: 0xCDA VA: 0xCDA
	private GameObject <lastPress>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCDB Offset: 0xCDB VA: 0xCDB
	[DebuggerBrowsableAttribute] // RVA: 0xCDB Offset: 0xCDB VA: 0xCDB
	private GameObject <rawPointerPress>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCDC Offset: 0xCDC VA: 0xCDC
	[DebuggerBrowsableAttribute] // RVA: 0xCDC Offset: 0xCDC VA: 0xCDC
	private GameObject <pointerDrag>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCDD Offset: 0xCDD VA: 0xCDD
	[DebuggerBrowsableAttribute] // RVA: 0xCDD Offset: 0xCDD VA: 0xCDD
	private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xCDE Offset: 0xCDE VA: 0xCDE
	[DebuggerBrowsableAttribute] // RVA: 0xCDE Offset: 0xCDE VA: 0xCDE
	private RaycastResult <pointerPressRaycast>k__BackingField; // 0x64
	public List<GameObject> hovered; // 0xA4
	[CompilerGeneratedAttribute] // RVA: 0xCDF Offset: 0xCDF VA: 0xCDF
	[DebuggerBrowsableAttribute] // RVA: 0xCDF Offset: 0xCDF VA: 0xCDF
	private bool <eligibleForClick>k__BackingField; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xCE0 Offset: 0xCE0 VA: 0xCE0
	[DebuggerBrowsableAttribute] // RVA: 0xCE0 Offset: 0xCE0 VA: 0xCE0
	private int <pointerId>k__BackingField; // 0xAC
	[CompilerGeneratedAttribute] // RVA: 0xCE1 Offset: 0xCE1 VA: 0xCE1
	[DebuggerBrowsableAttribute] // RVA: 0xCE1 Offset: 0xCE1 VA: 0xCE1
	private Vector2 <position>k__BackingField; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xCE2 Offset: 0xCE2 VA: 0xCE2
	[DebuggerBrowsableAttribute] // RVA: 0xCE2 Offset: 0xCE2 VA: 0xCE2
	private Vector2 <delta>k__BackingField; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xCE3 Offset: 0xCE3 VA: 0xCE3
	[DebuggerBrowsableAttribute] // RVA: 0xCE3 Offset: 0xCE3 VA: 0xCE3
	private Vector2 <pressPosition>k__BackingField; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xCE4 Offset: 0xCE4 VA: 0xCE4
	[DebuggerBrowsableAttribute] // RVA: 0xCE4 Offset: 0xCE4 VA: 0xCE4
	private Vector3 <worldPosition>k__BackingField; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xCE5 Offset: 0xCE5 VA: 0xCE5
	[DebuggerBrowsableAttribute] // RVA: 0xCE5 Offset: 0xCE5 VA: 0xCE5
	private Vector3 <worldNormal>k__BackingField; // 0xD4
	[CompilerGeneratedAttribute] // RVA: 0xCE6 Offset: 0xCE6 VA: 0xCE6
	[DebuggerBrowsableAttribute] // RVA: 0xCE6 Offset: 0xCE6 VA: 0xCE6
	private float <clickTime>k__BackingField; // 0xE0
	[CompilerGeneratedAttribute] // RVA: 0xCE7 Offset: 0xCE7 VA: 0xCE7
	[DebuggerBrowsableAttribute] // RVA: 0xCE7 Offset: 0xCE7 VA: 0xCE7
	private int <clickCount>k__BackingField; // 0xE4
	[CompilerGeneratedAttribute] // RVA: 0xCE8 Offset: 0xCE8 VA: 0xCE8
	[DebuggerBrowsableAttribute] // RVA: 0xCE8 Offset: 0xCE8 VA: 0xCE8
	private Vector2 <scrollDelta>k__BackingField; // 0xE8
	[CompilerGeneratedAttribute] // RVA: 0xCE9 Offset: 0xCE9 VA: 0xCE9
	[DebuggerBrowsableAttribute] // RVA: 0xCE9 Offset: 0xCE9 VA: 0xCE9
	private bool <useDragThreshold>k__BackingField; // 0xF0
	[CompilerGeneratedAttribute] // RVA: 0xCEA Offset: 0xCEA VA: 0xCEA
	[DebuggerBrowsableAttribute] // RVA: 0xCEA Offset: 0xCEA VA: 0xCEA
	private bool <dragging>k__BackingField; // 0xF1
	[CompilerGeneratedAttribute] // RVA: 0xCEB Offset: 0xCEB VA: 0xCEB
	[DebuggerBrowsableAttribute] // RVA: 0xCEB Offset: 0xCEB VA: 0xCEB
	private PointerEventData.InputButton <button>k__BackingField; // 0xF4

	// Properties
	public GameObject pointerEnter { get; set; }
	public GameObject lastPress { get; set; }
	public GameObject rawPointerPress { get; set; }
	public GameObject pointerDrag { get; set; }
	public RaycastResult pointerCurrentRaycast { get; set; }
	public RaycastResult pointerPressRaycast { get; set; }
	public bool eligibleForClick { get; set; }
	public int pointerId { get; set; }
	public Vector2 position { get; set; }
	public Vector2 delta { get; set; }
	public Vector2 pressPosition { get; set; }
	[ObsoleteAttribute] // RVA: 0xE38 Offset: 0xE38 VA: 0xE38
	public Vector3 worldPosition { get; set; }
	[ObsoleteAttribute] // RVA: 0xE39 Offset: 0xE39 VA: 0xE39
	public Vector3 worldNormal { get; set; }
	public float clickTime { get; set; }
	public int clickCount { get; set; }
	public Vector2 scrollDelta { get; set; }
	public bool useDragThreshold { get; set; }
	public bool dragging { get; set; }
	public PointerEventData.InputButton button { get; set; }
	public Camera enterEventCamera { get; }
	public Camera pressEventCamera { get; }
	public GameObject pointerPress { get; set; }

	// Methods

	// RVA: 0x674 Offset: 0x674 VA: 0x674
	public void .ctor(EventSystem eventSystem) { }

	[CompilerGeneratedAttribute] // RVA: 0xDBE Offset: 0xDBE VA: 0xDBE
	// RVA: 0xBB2 Offset: 0xBB2 VA: 0xBB2
	public GameObject get_pointerEnter() { }

	[CompilerGeneratedAttribute] // RVA: 0xDBF Offset: 0xDBF VA: 0xDBF
	// RVA: 0x675 Offset: 0x675 VA: 0x675
	public void set_pointerEnter(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDC0 Offset: 0xDC0 VA: 0xDC0
	// RVA: 0xBB3 Offset: 0xBB3 VA: 0xBB3
	public GameObject get_lastPress() { }

	[CompilerGeneratedAttribute] // RVA: 0xDC1 Offset: 0xDC1 VA: 0xDC1
	// RVA: 0x676 Offset: 0x676 VA: 0x676
	private void set_lastPress(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDC2 Offset: 0xDC2 VA: 0xDC2
	// RVA: 0xBB4 Offset: 0xBB4 VA: 0xBB4
	public GameObject get_rawPointerPress() { }

	[CompilerGeneratedAttribute] // RVA: 0xDC3 Offset: 0xDC3 VA: 0xDC3
	// RVA: 0x677 Offset: 0x677 VA: 0x677
	public void set_rawPointerPress(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDC4 Offset: 0xDC4 VA: 0xDC4
	// RVA: 0xBB5 Offset: 0xBB5 VA: 0xBB5
	public GameObject get_pointerDrag() { }

	[CompilerGeneratedAttribute] // RVA: 0xDC5 Offset: 0xDC5 VA: 0xDC5
	// RVA: 0x678 Offset: 0x678 VA: 0x678
	public void set_pointerDrag(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDC6 Offset: 0xDC6 VA: 0xDC6
	// RVA: 0x679 Offset: 0x679 VA: 0x679
	public RaycastResult get_pointerCurrentRaycast() { }

	[CompilerGeneratedAttribute] // RVA: 0xDC7 Offset: 0xDC7 VA: 0xDC7
	// RVA: 0x67A Offset: 0x67A VA: 0x67A
	public void set_pointerCurrentRaycast(RaycastResult value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDC8 Offset: 0xDC8 VA: 0xDC8
	// RVA: 0x67B Offset: 0x67B VA: 0x67B
	public RaycastResult get_pointerPressRaycast() { }

	[CompilerGeneratedAttribute] // RVA: 0xDC9 Offset: 0xDC9 VA: 0xDC9
	// RVA: 0x67C Offset: 0x67C VA: 0x67C
	public void set_pointerPressRaycast(RaycastResult value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDCA Offset: 0xDCA VA: 0xDCA
	// RVA: 0xBB6 Offset: 0xBB6 VA: 0xBB6
	public bool get_eligibleForClick() { }

	[CompilerGeneratedAttribute] // RVA: 0xDCB Offset: 0xDCB VA: 0xDCB
	// RVA: 0x67D Offset: 0x67D VA: 0x67D
	public void set_eligibleForClick(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDCC Offset: 0xDCC VA: 0xDCC
	// RVA: 0xBB7 Offset: 0xBB7 VA: 0xBB7
	public int get_pointerId() { }

	[CompilerGeneratedAttribute] // RVA: 0xDCD Offset: 0xDCD VA: 0xDCD
	// RVA: 0x67E Offset: 0x67E VA: 0x67E
	public void set_pointerId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDCE Offset: 0xDCE VA: 0xDCE
	// RVA: 0x67F Offset: 0x67F VA: 0x67F
	public Vector2 get_position() { }

	[CompilerGeneratedAttribute] // RVA: 0xDCF Offset: 0xDCF VA: 0xDCF
	// RVA: 0x680 Offset: 0x680 VA: 0x680
	public void set_position(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDD0 Offset: 0xDD0 VA: 0xDD0
	// RVA: 0x681 Offset: 0x681 VA: 0x681
	public Vector2 get_delta() { }

	[CompilerGeneratedAttribute] // RVA: 0xDD1 Offset: 0xDD1 VA: 0xDD1
	// RVA: 0x682 Offset: 0x682 VA: 0x682
	public void set_delta(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDD2 Offset: 0xDD2 VA: 0xDD2
	// RVA: 0x683 Offset: 0x683 VA: 0x683
	public Vector2 get_pressPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xDD3 Offset: 0xDD3 VA: 0xDD3
	// RVA: 0x684 Offset: 0x684 VA: 0x684
	public void set_pressPosition(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDD4 Offset: 0xDD4 VA: 0xDD4
	// RVA: 0x685 Offset: 0x685 VA: 0x685
	public Vector3 get_worldPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xDD5 Offset: 0xDD5 VA: 0xDD5
	// RVA: 0x686 Offset: 0x686 VA: 0x686
	public void set_worldPosition(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDD6 Offset: 0xDD6 VA: 0xDD6
	// RVA: 0x687 Offset: 0x687 VA: 0x687
	public Vector3 get_worldNormal() { }

	[CompilerGeneratedAttribute] // RVA: 0xDD7 Offset: 0xDD7 VA: 0xDD7
	// RVA: 0x688 Offset: 0x688 VA: 0x688
	public void set_worldNormal(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDD8 Offset: 0xDD8 VA: 0xDD8
	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	public float get_clickTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xDD9 Offset: 0xDD9 VA: 0xDD9
	// RVA: 0x1B Offset: 0x1B VA: 0x1B
	public void set_clickTime(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDDA Offset: 0xDDA VA: 0xDDA
	// RVA: 0xBB8 Offset: 0xBB8 VA: 0xBB8
	public int get_clickCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xDDB Offset: 0xDDB VA: 0xDDB
	// RVA: 0x689 Offset: 0x689 VA: 0x689
	public void set_clickCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDDC Offset: 0xDDC VA: 0xDDC
	// RVA: 0x68A Offset: 0x68A VA: 0x68A
	public Vector2 get_scrollDelta() { }

	[CompilerGeneratedAttribute] // RVA: 0xDDD Offset: 0xDDD VA: 0xDDD
	// RVA: 0x68B Offset: 0x68B VA: 0x68B
	public void set_scrollDelta(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDDE Offset: 0xDDE VA: 0xDDE
	// RVA: 0xBB9 Offset: 0xBB9 VA: 0xBB9
	public bool get_useDragThreshold() { }

	[CompilerGeneratedAttribute] // RVA: 0xDDF Offset: 0xDDF VA: 0xDDF
	// RVA: 0x68C Offset: 0x68C VA: 0x68C
	public void set_useDragThreshold(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDE0 Offset: 0xDE0 VA: 0xDE0
	// RVA: 0xBBA Offset: 0xBBA VA: 0xBBA
	public bool get_dragging() { }

	[CompilerGeneratedAttribute] // RVA: 0xDE1 Offset: 0xDE1 VA: 0xDE1
	// RVA: 0x68D Offset: 0x68D VA: 0x68D
	public void set_dragging(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDE2 Offset: 0xDE2 VA: 0xDE2
	// RVA: 0xBBB Offset: 0xBBB VA: 0xBBB
	public PointerEventData.InputButton get_button() { }

	[CompilerGeneratedAttribute] // RVA: 0xDE3 Offset: 0xDE3 VA: 0xDE3
	// RVA: 0x68E Offset: 0x68E VA: 0x68E
	public void set_button(PointerEventData.InputButton value) { }

	// RVA: 0xBBC Offset: 0xBBC VA: 0xBBC
	public bool IsPointerMoving() { }

	// RVA: 0xBBD Offset: 0xBBD VA: 0xBBD
	public bool IsScrolling() { }

	// RVA: 0xBBE Offset: 0xBBE VA: 0xBBE
	public Camera get_enterEventCamera() { }

	// RVA: 0xBBF Offset: 0xBBF VA: 0xBBF
	public Camera get_pressEventCamera() { }

	// RVA: 0xBC0 Offset: 0xBC0 VA: 0xBC0
	public GameObject get_pointerPress() { }

	// RVA: 0x68F Offset: 0x68F VA: 0x68F
	public void set_pointerPress(GameObject value) { }

	// RVA: 0xBC1 Offset: 0xBC1 VA: 0xBC1 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public enum PointerEventData.InputButton // TypeDefIndex: 2178
{
	// Fields
	public int value__; // 0x0
	public const PointerEventData.InputButton Left = 0;
	public const PointerEventData.InputButton Right = 1;
	public const PointerEventData.InputButton Middle = 2;
}

// Namespace: 
public enum PointerEventData.FramePressState // TypeDefIndex: 2179
{
	// Fields
	public int value__; // 0x0
	public const PointerEventData.FramePressState Pressed = 0;
	public const PointerEventData.FramePressState Released = 1;
	public const PointerEventData.FramePressState PressedAndReleased = 2;
	public const PointerEventData.FramePressState NotChanged = 3;
}

// Namespace: UnityEngine.EventSystems
public class BaseInput : UIBehaviour // TypeDefIndex: 2180
{
	// Properties
	public virtual string compositionString { get; }
	public virtual IMECompositionMode imeCompositionMode { get; set; }
	public virtual Vector2 compositionCursorPos { get; set; }
	public virtual bool mousePresent { get; }
	public virtual Vector2 mousePosition { get; }
	public virtual Vector2 mouseScrollDelta { get; }
	public virtual bool touchSupported { get; }
	public virtual int touchCount { get; }

	// Methods

	// RVA: 0x74A Offset: 0x74A VA: 0x74A
	public void .ctor() { }

	// RVA: 0xB92 Offset: 0xB92 VA: 0xB92 Slot: 17
	public virtual string get_compositionString() { }

	// RVA: 0xB93 Offset: 0xB93 VA: 0xB93 Slot: 18
	public virtual IMECompositionMode get_imeCompositionMode() { }

	// RVA: 0x641 Offset: 0x641 VA: 0x641 Slot: 19
	public virtual void set_imeCompositionMode(IMECompositionMode value) { }

	// RVA: 0x642 Offset: 0x642 VA: 0x642 Slot: 20
	public virtual Vector2 get_compositionCursorPos() { }

	// RVA: 0x643 Offset: 0x643 VA: 0x643 Slot: 21
	public virtual void set_compositionCursorPos(Vector2 value) { }

	// RVA: 0xB94 Offset: 0xB94 VA: 0xB94 Slot: 22
	public virtual bool get_mousePresent() { }

	// RVA: 0x5E0 Offset: 0x5E0 VA: 0x5E0 Slot: 23
	public virtual bool GetMouseButtonDown(int button) { }

	// RVA: 0x5E1 Offset: 0x5E1 VA: 0x5E1 Slot: 24
	public virtual bool GetMouseButtonUp(int button) { }

	// RVA: 0x5E2 Offset: 0x5E2 VA: 0x5E2 Slot: 25
	public virtual bool GetMouseButton(int button) { }

	// RVA: 0x644 Offset: 0x644 VA: 0x644 Slot: 26
	public virtual Vector2 get_mousePosition() { }

	// RVA: 0x645 Offset: 0x645 VA: 0x645 Slot: 27
	public virtual Vector2 get_mouseScrollDelta() { }

	// RVA: 0xB95 Offset: 0xB95 VA: 0xB95 Slot: 28
	public virtual bool get_touchSupported() { }

	// RVA: 0xB96 Offset: 0xB96 VA: 0xB96 Slot: 29
	public virtual int get_touchCount() { }

	// RVA: 0x39E Offset: 0x39E VA: 0x39E Slot: 30
	public virtual Touch GetTouch(int index) { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24 Slot: 31
	public virtual float GetAxisRaw(string axisName) { }

	// RVA: 0x5E3 Offset: 0x5E3 VA: 0x5E3 Slot: 32
	public virtual bool GetButtonDown(string buttonName) { }
}

// Namespace: UnityEngine.EventSystems
[RequireComponent] // RVA: 0xC8E Offset: 0xC8E VA: 0xC8E
public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 2181
{
	// Fields
	protected List<RaycastResult> m_RaycastResultCache; // 0xC
	private AxisEventData m_AxisEventData; // 0x10
	private EventSystem m_EventSystem; // 0x14
	private BaseEventData m_BaseEventData; // 0x18
	protected BaseInput m_InputOverride; // 0x1C
	private BaseInput m_DefaultInput; // 0x20

	// Properties
	public BaseInput input { get; }
	public BaseInput inputOverride { get; set; }
	protected EventSystem eventSystem { get; }

	// Methods

	// RVA: 0x74B Offset: 0x74B VA: 0x74B
	protected void .ctor() { }

	// RVA: 0xB97 Offset: 0xB97 VA: 0xB97
	public BaseInput get_input() { }

	// RVA: 0xB98 Offset: 0xB98 VA: 0xB98
	public BaseInput get_inputOverride() { }

	// RVA: 0x646 Offset: 0x646 VA: 0x646
	public void set_inputOverride(BaseInput value) { }

	// RVA: 0xB99 Offset: 0xB99 VA: 0xB99
	protected EventSystem get_eventSystem() { }

	// RVA: 0x74C Offset: 0x74C VA: 0x74C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x74D Offset: 0x74D VA: 0x74D Slot: 7
	protected override void OnDisable() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Process() { }

	// RVA: 0x647 Offset: 0x647 VA: 0x647
	protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	protected static MoveDirection DetermineMoveDirection(float x, float y) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone) { }

	// RVA: 0x5E4 Offset: 0x5E4 VA: 0x5E4
	protected static GameObject FindCommonRoot(GameObject g1, GameObject g2) { }

	// RVA: 0x39F Offset: 0x39F VA: 0x39F
	protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 18
	protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone) { }

	// RVA: 0xB9A Offset: 0xB9A VA: 0xB9A Slot: 19
	protected virtual BaseEventData GetBaseEventData() { }

	// RVA: 0x5E5 Offset: 0x5E5 VA: 0x5E5 Slot: 20
	public virtual bool IsPointerOverGameObject(int pointerId) { }

	// RVA: 0xB9B Offset: 0xB9B VA: 0xB9B Slot: 21
	public virtual bool ShouldActivateModule() { }

	// RVA: 0x74E Offset: 0x74E VA: 0x74E Slot: 22
	public virtual void DeactivateModule() { }

	// RVA: 0x74F Offset: 0x74F VA: 0x74F Slot: 23
	public virtual void ActivateModule() { }

	// RVA: 0x750 Offset: 0x750 VA: 0x750 Slot: 24
	public virtual void UpdateModule() { }

	// RVA: 0xB9C Offset: 0xB9C VA: 0xB9C Slot: 25
	public virtual bool IsModuleSupported() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 2182
{
	// Fields
	public const int kMouseLeftId = -1;
	public const int kMouseRightId = -2;
	public const int kMouseMiddleId = -3;
	public const int kFakeTouchesId = -4;
	protected Dictionary<int, PointerEventData> m_PointerData; // 0x24
	private readonly PointerInputModule.MouseState m_MouseState; // 0x28

	// Methods

	// RVA: 0x761 Offset: 0x761 VA: 0x761
	protected void .ctor() { }

	// RVA: 0x14C Offset: 0x14C VA: 0x14C
	protected bool GetPointerData(int id, out PointerEventData data, bool create) { }

	// RVA: 0x690 Offset: 0x690 VA: 0x690
	protected void RemovePointerData(PointerEventData data) { }

	// RVA: 0x14D Offset: 0x14D VA: 0x14D
	protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released) { }

	// RVA: 0x3A5 Offset: 0x3A5 VA: 0x3A5
	protected void CopyFromTo(PointerEventData from, PointerEventData to) { }

	// RVA: 0x5E9 Offset: 0x5E9 VA: 0x5E9
	protected PointerEventData.FramePressState StateForMouseButton(int buttonId) { }

	// RVA: 0xBC2 Offset: 0xBC2 VA: 0xBC2 Slot: 26
	protected virtual PointerInputModule.MouseState GetMousePointerEventData() { }

	// RVA: 0x5EA Offset: 0x5EA VA: 0x5EA Slot: 27
	protected virtual PointerInputModule.MouseState GetMousePointerEventData(int id) { }

	// RVA: 0x5EB Offset: 0x5EB VA: 0x5EB
	protected PointerEventData GetLastPointerEventData(int id) { }

	// RVA: 0x5 Offset: 0x5 VA: 0x5
	private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold) { }

	// RVA: 0x691 Offset: 0x691 VA: 0x691 Slot: 28
	protected virtual void ProcessMove(PointerEventData pointerEvent) { }

	// RVA: 0x692 Offset: 0x692 VA: 0x692 Slot: 29
	protected virtual void ProcessDrag(PointerEventData pointerEvent) { }

	// RVA: 0x5EC Offset: 0x5EC VA: 0x5EC Slot: 20
	public override bool IsPointerOverGameObject(int pointerId) { }

	// RVA: 0x762 Offset: 0x762 VA: 0x762
	protected void ClearSelection() { }

	// RVA: 0xBC3 Offset: 0xBC3 VA: 0xBC3 Slot: 3
	public override string ToString() { }

	// RVA: 0x3A6 Offset: 0x3A6 VA: 0x3A6
	protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent) { }
}

// Namespace: 
protected class PointerInputModule.ButtonState // TypeDefIndex: 2183
{
	// Fields
	private PointerEventData.InputButton m_Button; // 0x8
	private PointerInputModule.MouseButtonEventData m_EventData; // 0xC

	// Properties
	public PointerInputModule.MouseButtonEventData eventData { get; set; }
	public PointerEventData.InputButton button { get; set; }

	// Methods

	// RVA: 0x763 Offset: 0x763 VA: 0x763
	public void .ctor() { }

	// RVA: 0xBC4 Offset: 0xBC4 VA: 0xBC4
	public PointerInputModule.MouseButtonEventData get_eventData() { }

	// RVA: 0x693 Offset: 0x693 VA: 0x693
	public void set_eventData(PointerInputModule.MouseButtonEventData value) { }

	// RVA: 0xBC5 Offset: 0xBC5 VA: 0xBC5
	public PointerEventData.InputButton get_button() { }

	// RVA: 0x694 Offset: 0x694 VA: 0x694
	public void set_button(PointerEventData.InputButton value) { }
}

// Namespace: 
protected class PointerInputModule.MouseState // TypeDefIndex: 2184
{
	// Fields
	private List<PointerInputModule.ButtonState> m_TrackedButtons; // 0x8

	// Methods

	// RVA: 0x765 Offset: 0x765 VA: 0x765
	public void .ctor() { }

	// RVA: 0xBC8 Offset: 0xBC8 VA: 0xBC8
	public bool AnyPressesThisFrame() { }

	// RVA: 0xBC9 Offset: 0xBC9 VA: 0xBC9
	public bool AnyReleasesThisFrame() { }

	// RVA: 0x5ED Offset: 0x5ED VA: 0x5ED
	public PointerInputModule.ButtonState GetButtonState(PointerEventData.InputButton button) { }

	// RVA: 0x110 Offset: 0x110 VA: 0x110
	public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data) { }
}

// Namespace: 
public class PointerInputModule.MouseButtonEventData // TypeDefIndex: 2185
{
	// Fields
	public PointerEventData.FramePressState buttonState; // 0x8
	public PointerEventData buttonData; // 0xC

	// Methods

	// RVA: 0x764 Offset: 0x764 VA: 0x764
	public void .ctor() { }

	// RVA: 0xBC6 Offset: 0xBC6 VA: 0xBC6
	public bool PressedThisFrame() { }

	// RVA: 0xBC7 Offset: 0xBC7 VA: 0xBC7
	public bool ReleasedThisFrame() { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC8F Offset: 0xC8F VA: 0xC8F
public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 2186
{
	// Fields
	private float m_PrevActionTime; // 0x2C
	private Vector2 m_LastMoveVector; // 0x30
	private int m_ConsecutiveMoveCount; // 0x38
	private Vector2 m_LastMousePosition; // 0x3C
	private Vector2 m_MousePosition; // 0x44
	private GameObject m_CurrentFocusedGameObject; // 0x4C
	private PointerEventData m_InputPointerEvent; // 0x50
	[SerializeField] // RVA: 0xCEC Offset: 0xCEC VA: 0xCEC
	private string m_HorizontalAxis; // 0x54
	[SerializeField] // RVA: 0xCED Offset: 0xCED VA: 0xCED
	private string m_VerticalAxis; // 0x58
	[SerializeField] // RVA: 0xCEE Offset: 0xCEE VA: 0xCEE
	private string m_SubmitButton; // 0x5C
	[SerializeField] // RVA: 0xCEF Offset: 0xCEF VA: 0xCEF
	private string m_CancelButton; // 0x60
	[SerializeField] // RVA: 0xCF0 Offset: 0xCF0 VA: 0xCF0
	private float m_InputActionsPerSecond; // 0x64
	[SerializeField] // RVA: 0xCF1 Offset: 0xCF1 VA: 0xCF1
	private float m_RepeatDelay; // 0x68
	[SerializeField] // RVA: 0xCF2 Offset: 0xCF2 VA: 0xCF2
	[FormerlySerializedAsAttribute] // RVA: 0xCF2 Offset: 0xCF2 VA: 0xCF2
	private bool m_ForceModuleActive; // 0x6C

	// Properties
	[ObsoleteAttribute] // RVA: 0xE3A Offset: 0xE3A VA: 0xE3A
	public StandaloneInputModule.InputMode inputMode { get; }
	[ObsoleteAttribute] // RVA: 0xE3B Offset: 0xE3B VA: 0xE3B
	public bool allowActivationOnMobileDevice { get; set; }
	public bool forceModuleActive { get; set; }
	public float inputActionsPerSecond { get; set; }
	public float repeatDelay { get; set; }
	public string horizontalAxis { get; set; }
	public string verticalAxis { get; set; }
	public string submitButton { get; set; }
	public string cancelButton { get; set; }

	// Methods

	// RVA: 0x769 Offset: 0x769 VA: 0x769
	protected void .ctor() { }

	// RVA: 0xBCD Offset: 0xBCD VA: 0xBCD
	public StandaloneInputModule.InputMode get_inputMode() { }

	// RVA: 0xBCE Offset: 0xBCE VA: 0xBCE
	public bool get_allowActivationOnMobileDevice() { }

	// RVA: 0x696 Offset: 0x696 VA: 0x696
	public void set_allowActivationOnMobileDevice(bool value) { }

	// RVA: 0xBCF Offset: 0xBCF VA: 0xBCF
	public bool get_forceModuleActive() { }

	// RVA: 0x697 Offset: 0x697 VA: 0x697
	public void set_forceModuleActive(bool value) { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30
	public float get_inputActionsPerSecond() { }

	// RVA: 0x1C Offset: 0x1C VA: 0x1C
	public void set_inputActionsPerSecond(float value) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	public float get_repeatDelay() { }

	// RVA: 0x1D Offset: 0x1D VA: 0x1D
	public void set_repeatDelay(float value) { }

	// RVA: 0xBD0 Offset: 0xBD0 VA: 0xBD0
	public string get_horizontalAxis() { }

	// RVA: 0x698 Offset: 0x698 VA: 0x698
	public void set_horizontalAxis(string value) { }

	// RVA: 0xBD1 Offset: 0xBD1 VA: 0xBD1
	public string get_verticalAxis() { }

	// RVA: 0x699 Offset: 0x699 VA: 0x699
	public void set_verticalAxis(string value) { }

	// RVA: 0xBD2 Offset: 0xBD2 VA: 0xBD2
	public string get_submitButton() { }

	// RVA: 0x69A Offset: 0x69A VA: 0x69A
	public void set_submitButton(string value) { }

	// RVA: 0xBD3 Offset: 0xBD3 VA: 0xBD3
	public string get_cancelButton() { }

	// RVA: 0x69B Offset: 0x69B VA: 0x69B
	public void set_cancelButton(string value) { }

	// RVA: 0xBD4 Offset: 0xBD4 VA: 0xBD4
	private bool ShouldIgnoreEventsOnNoFocus() { }

	// RVA: 0x76A Offset: 0x76A VA: 0x76A Slot: 24
	public override void UpdateModule() { }

	// RVA: 0xBD5 Offset: 0xBD5 VA: 0xBD5 Slot: 25
	public override bool IsModuleSupported() { }

	// RVA: 0xBD6 Offset: 0xBD6 VA: 0xBD6 Slot: 21
	public override bool ShouldActivateModule() { }

	// RVA: 0x76B Offset: 0x76B VA: 0x76B Slot: 23
	public override void ActivateModule() { }

	// RVA: 0x76C Offset: 0x76C VA: 0x76C Slot: 22
	public override void DeactivateModule() { }

	// RVA: 0x76D Offset: 0x76D VA: 0x76D Slot: 17
	public override void Process() { }

	// RVA: 0xBD7 Offset: 0xBD7 VA: 0xBD7
	private bool ProcessTouchEvents() { }

	// RVA: 0x111 Offset: 0x111 VA: 0x111
	protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) { }

	// RVA: 0xBD8 Offset: 0xBD8 VA: 0xBD8
	protected bool SendSubmitEventToSelectedObject() { }

	// RVA: 0x69C Offset: 0x69C VA: 0x69C
	private Vector2 GetRawMoveVector() { }

	// RVA: 0xBD9 Offset: 0xBD9 VA: 0xBD9
	protected bool SendMoveEventToSelectedObject() { }

	// RVA: 0x76E Offset: 0x76E VA: 0x76E
	protected void ProcessMouseEvent() { }

	[ObsoleteAttribute] // RVA: 0xDE4 Offset: 0xDE4 VA: 0xDE4
	// RVA: 0xBDA Offset: 0xBDA VA: 0xBDA Slot: 30
	protected virtual bool ForceAutoSelect() { }

	// RVA: 0x69D Offset: 0x69D VA: 0x69D
	protected void ProcessMouseEvent(int id) { }

	// RVA: 0xBDB Offset: 0xBDB VA: 0xBDB
	protected bool SendUpdateEventToSelectedObject() { }

	// RVA: 0x69E Offset: 0x69E VA: 0x69E
	protected void ProcessMousePress(PointerInputModule.MouseButtonEventData data) { }

	// RVA: 0xBDC Offset: 0xBDC VA: 0xBDC
	protected GameObject GetCurrentFocusedGameObject() { }
}

// Namespace: 
[ObsoleteAttribute] // RVA: 0xC90 Offset: 0xC90 VA: 0xC90
public enum StandaloneInputModule.InputMode // TypeDefIndex: 2187
{
	// Fields
	public int value__; // 0x0
	public const StandaloneInputModule.InputMode Mouse = 0;
	public const StandaloneInputModule.InputMode Buttons = 1;
}

// Namespace: UnityEngine.EventSystems
[ObsoleteAttribute] // RVA: 0xC91 Offset: 0xC91 VA: 0xC91
[AddComponentMenu] // RVA: 0xC91 Offset: 0xC91 VA: 0xC91
public class TouchInputModule : PointerInputModule // TypeDefIndex: 2188
{
	// Fields
	private Vector2 m_LastMousePosition; // 0x2C
	private Vector2 m_MousePosition; // 0x34
	private PointerEventData m_InputPointerEvent; // 0x3C
	[SerializeField] // RVA: 0xCF3 Offset: 0xCF3 VA: 0xCF3
	[FormerlySerializedAsAttribute] // RVA: 0xCF3 Offset: 0xCF3 VA: 0xCF3
	private bool m_ForceModuleActive; // 0x40

	// Properties
	[ObsoleteAttribute] // RVA: 0xE3C Offset: 0xE3C VA: 0xE3C
	public bool allowActivationOnStandalone { get; set; }
	public bool forceModuleActive { get; set; }

	// Methods

	// RVA: 0x76F Offset: 0x76F VA: 0x76F
	protected void .ctor() { }

	// RVA: 0xBDD Offset: 0xBDD VA: 0xBDD
	public bool get_allowActivationOnStandalone() { }

	// RVA: 0x69F Offset: 0x69F VA: 0x69F
	public void set_allowActivationOnStandalone(bool value) { }

	// RVA: 0xBDE Offset: 0xBDE VA: 0xBDE
	public bool get_forceModuleActive() { }

	// RVA: 0x6A0 Offset: 0x6A0 VA: 0x6A0
	public void set_forceModuleActive(bool value) { }

	// RVA: 0x770 Offset: 0x770 VA: 0x770 Slot: 24
	public override void UpdateModule() { }

	// RVA: 0xBDF Offset: 0xBDF VA: 0xBDF Slot: 25
	public override bool IsModuleSupported() { }

	// RVA: 0xBE0 Offset: 0xBE0 VA: 0xBE0 Slot: 21
	public override bool ShouldActivateModule() { }

	// RVA: 0xBE1 Offset: 0xBE1 VA: 0xBE1
	private bool UseFakeInput() { }

	// RVA: 0x771 Offset: 0x771 VA: 0x771 Slot: 17
	public override void Process() { }

	// RVA: 0x772 Offset: 0x772 VA: 0x772
	private void FakeTouches() { }

	// RVA: 0x773 Offset: 0x773 VA: 0x773
	private void ProcessTouchEvents() { }

	// RVA: 0x112 Offset: 0x112 VA: 0x112
	protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) { }

	// RVA: 0x774 Offset: 0x774 VA: 0x774 Slot: 22
	public override void DeactivateModule() { }

	// RVA: 0xBE2 Offset: 0xBE2 VA: 0xBE2 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 2189
{
	// Properties
	public abstract Camera eventCamera { get; }
	[ObsoleteAttribute] // RVA: 0xE3D Offset: 0xE3D VA: 0xE3D
	public virtual int priority { get; }
	public virtual int sortOrderPriority { get; }
	public virtual int renderOrderPriority { get; }

	// Methods

	// RVA: 0x751 Offset: 0x751 VA: 0x751
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract Camera get_eventCamera() { }

	// RVA: 0xB9D Offset: 0xB9D VA: 0xB9D Slot: 19
	public virtual int get_priority() { }

	// RVA: 0xB9E Offset: 0xB9E VA: 0xB9E Slot: 20
	public virtual int get_sortOrderPriority() { }

	// RVA: 0xB9F Offset: 0xB9F VA: 0xB9F Slot: 21
	public virtual int get_renderOrderPriority() { }

	// RVA: 0xBA0 Offset: 0xBA0 VA: 0xBA0 Slot: 3
	public override string ToString() { }

	// RVA: 0x752 Offset: 0x752 VA: 0x752 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x753 Offset: 0x753 VA: 0x753 Slot: 7
	protected override void OnDisable() { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC92 Offset: 0xC92 VA: 0xC92
[RequireComponent] // RVA: 0xC92 Offset: 0xC92 VA: 0xC92
public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 2190
{
	// Fields
	private RaycastHit2D[] m_Hits; // 0x20

	// Methods

	// RVA: 0x75F Offset: 0x75F VA: 0x75F
	protected void .ctor() { }

	// RVA: 0x3A3 Offset: 0x3A3 VA: 0x3A3 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }
}

// Namespace: UnityEngine.EventSystems
[AddComponentMenu] // RVA: 0xC93 Offset: 0xC93 VA: 0xC93
[RequireComponent] // RVA: 0xC93 Offset: 0xC93 VA: 0xC93
public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 2191
{
	// Fields
	protected const int kNoEventMaskSet = -1;
	protected Camera m_EventCamera; // 0xC
	[SerializeField] // RVA: 0xCF4 Offset: 0xCF4 VA: 0xCF4
	protected LayerMask m_EventMask; // 0x10
	[SerializeField] // RVA: 0xCF5 Offset: 0xCF5 VA: 0xCF5
	protected int m_MaxRayIntersections; // 0x14
	protected int m_LastMaxRayIntersections; // 0x18
	private RaycastHit[] m_Hits; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCF6 Offset: 0xCF6 VA: 0xCF6
	private static Comparison<RaycastHit> <>f__am$cache0; // 0x0

	// Properties
	public override Camera eventCamera { get; }
	public virtual int depth { get; }
	public int finalEventMask { get; }
	public LayerMask eventMask { get; set; }
	public int maxRayIntersections { get; set; }

	// Methods

	// RVA: 0x760 Offset: 0x760 VA: 0x760
	protected void .ctor() { }

	// RVA: 0xBAD Offset: 0xBAD VA: 0xBAD Slot: 18
	public override Camera get_eventCamera() { }

	// RVA: 0xBAE Offset: 0xBAE VA: 0xBAE Slot: 22
	public virtual int get_depth() { }

	// RVA: 0xBAF Offset: 0xBAF VA: 0xBAF
	public int get_finalEventMask() { }

	// RVA: 0xBB0 Offset: 0xBB0 VA: 0xBB0
	public LayerMask get_eventMask() { }

	// RVA: 0x672 Offset: 0x672 VA: 0x672
	public void set_eventMask(LayerMask value) { }

	// RVA: 0xBB1 Offset: 0xBB1 VA: 0xBB1
	public int get_maxRayIntersections() { }

	// RVA: 0x673 Offset: 0x673 VA: 0x673
	public void set_maxRayIntersections(int value) { }

	// RVA: 0x8B Offset: 0x8B VA: 0x8B
	protected bool ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref int eventDisplayIndex, ref float distanceToClipPlane) { }

	// RVA: 0x3A4 Offset: 0x3A4 VA: 0x3A4 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }

	[CompilerGeneratedAttribute] // RVA: 0xDE5 Offset: 0xDE5 VA: 0xDE5
	// RVA: 0x5E8 Offset: 0x5E8 VA: 0x5E8
	private static int <Raycast>m__0(RaycastHit r1, RaycastHit r2) { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal interface ITweenValue // TypeDefIndex: 2192
{
	// Properties
	public abstract bool ignoreTimeScale { get; }
	public abstract float duration { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void TweenValue(float floatPercentage) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_ignoreTimeScale() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_duration() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool ValidTarget() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct ColorTween : ITweenValue // TypeDefIndex: 2193
{
	// Fields
	private ColorTween.ColorTweenCallback m_Target; // 0x0
	private Color m_StartColor; // 0x4
	private Color m_TargetColor; // 0x14
	private ColorTween.ColorTweenMode m_TweenMode; // 0x24
	private float m_Duration; // 0x28
	private bool m_IgnoreTimeScale; // 0x2C

	// Properties
	public Color startColor { get; set; }
	public Color targetColor { get; set; }
	public ColorTween.ColorTweenMode tweenMode { get; set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods

	// RVA: 0x6BD Offset: 0x6BD VA: 0x6BD
	public Color get_startColor() { }

	// RVA: 0x6BE Offset: 0x6BE VA: 0x6BE
	public void set_startColor(Color value) { }

	// RVA: 0x6BF Offset: 0x6BF VA: 0x6BF
	public Color get_targetColor() { }

	// RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0
	public void set_targetColor(Color value) { }

	// RVA: 0xBFB Offset: 0xBFB VA: 0xBFB
	public ColorTween.ColorTweenMode get_tweenMode() { }

	// RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1
	public void set_tweenMode(ColorTween.ColorTweenMode value) { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B Slot: 6
	public float get_duration() { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	public void set_duration(float value) { }

	// RVA: 0xBFC Offset: 0xBFC VA: 0xBFC Slot: 5
	public bool get_ignoreTimeScale() { }

	// RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2
	public void set_ignoreTimeScale(bool value) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A Slot: 4
	public void TweenValue(float floatPercentage) { }

	// RVA: 0x6C3 Offset: 0x6C3 VA: 0x6C3
	public void AddOnChangedCallback(UnityAction<Color> callback) { }

	// RVA: 0xBFD Offset: 0xBFD VA: 0xBFD
	public bool GetIgnoreTimescale() { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C
	public float GetDuration() { }

	// RVA: 0xBFE Offset: 0xBFE VA: 0xBFE Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public enum ColorTween.ColorTweenMode // TypeDefIndex: 2194
{
	// Fields
	public int value__; // 0x0
	public const ColorTween.ColorTweenMode All = 0;
	public const ColorTween.ColorTweenMode RGB = 1;
	public const ColorTween.ColorTweenMode Alpha = 2;
}

// Namespace: 
public class ColorTween.ColorTweenCallback : UnityEvent<Color> // TypeDefIndex: 2195
{
	// Methods

	// RVA: 0x7B1 Offset: 0x7B1 VA: 0x7B1
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct FloatTween : ITweenValue // TypeDefIndex: 2196
{
	// Fields
	private FloatTween.FloatTweenCallback m_Target; // 0x0
	private float m_StartValue; // 0x4
	private float m_TargetValue; // 0x8
	private float m_Duration; // 0xC
	private bool m_IgnoreTimeScale; // 0x10

	// Properties
	public float startValue { get; set; }
	public float targetValue { get; set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods

	// RVA: 0x3D Offset: 0x3D VA: 0x3D
	public float get_startValue() { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	public void set_startValue(float value) { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E
	public float get_targetValue() { }

	// RVA: 0x2C Offset: 0x2C VA: 0x2C
	public void set_targetValue(float value) { }

	// RVA: 0x3F Offset: 0x3F VA: 0x3F Slot: 6
	public float get_duration() { }

	// RVA: 0x2D Offset: 0x2D VA: 0x2D
	public void set_duration(float value) { }

	// RVA: 0xBFF Offset: 0xBFF VA: 0xBFF Slot: 5
	public bool get_ignoreTimeScale() { }

	// RVA: 0x6C4 Offset: 0x6C4 VA: 0x6C4
	public void set_ignoreTimeScale(bool value) { }

	// RVA: 0x2E Offset: 0x2E VA: 0x2E Slot: 4
	public void TweenValue(float floatPercentage) { }

	// RVA: 0x6C5 Offset: 0x6C5 VA: 0x6C5
	public void AddOnChangedCallback(UnityAction<float> callback) { }

	// RVA: 0xC00 Offset: 0xC00 VA: 0xC00
	public bool GetIgnoreTimescale() { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40
	public float GetDuration() { }

	// RVA: 0xC01 Offset: 0xC01 VA: 0xC01 Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public class FloatTween.FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 2197
{
	// Methods

	// RVA: 0x7B2 Offset: 0x7B2 VA: 0x7B2
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal class TweenRunner<T> // TypeDefIndex: 2198
{
	// Fields
	protected MonoBehaviour m_CoroutineContainer; // 0xFFFFFFFF
	protected IEnumerator m_Tween; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x93F Offset: 0x93F VA: 0x93F
	|-TweenRunner<ColorTween>..ctor
	|
	|-RVA: 0x93E Offset: 0x93E VA: 0x93E
	|-TweenRunner<FloatTween>..ctor
	*/

	[DebuggerHiddenAttribute] // RVA: 0xDE6 Offset: 0xDE6 VA: 0xDE6
	// RVA: -1 Offset: -1
	private static IEnumerator Start(T tweenInfo) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x128F Offset: 0x128F VA: 0x128F
	|-TweenRunner<ColorTween>.Start
	|
	|-RVA: 0x1290 Offset: 0x1290 VA: 0x1290
	|-TweenRunner<FloatTween>.Start
	*/

	// RVA: -1 Offset: -1
	public void Init(MonoBehaviour coroutineContainer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x892 Offset: 0x892 VA: 0x892
	|-TweenRunner<ColorTween>.Init
	|
	|-RVA: 0x88F Offset: 0x88F VA: 0x88F
	|-TweenRunner<FloatTween>.Init
	*/

	// RVA: -1 Offset: -1
	public void StartTween(T info) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x893 Offset: 0x893 VA: 0x893
	|-TweenRunner<ColorTween>.StartTween
	|
	|-RVA: 0x891 Offset: 0x891 VA: 0x891
	|-TweenRunner<FloatTween>.StartTween
	*/

	// RVA: -1 Offset: -1
	public void StopTween() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x940 Offset: 0x940 VA: 0x940
	|-TweenRunner<ColorTween>.StopTween
	|
	|-RVA: 0xBD8 Offset: 0xBD8 VA: 0xBD8
	|-TweenRunner<FloatTween>.StopTween
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB7 Offset: 0xCB7 VA: 0xCB7
private sealed class TweenRunner.<Start>c__Iterator0<T> : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2199
{
	// Fields
	internal T tweenInfo; // 0xFFFFFFFF
	internal float <elapsedTime>__0; // 0xFFFFFFFF
	internal float <percentage>__1; // 0xFFFFFFFF
	internal object $current; // 0xFFFFFFFF
	internal bool $disposing; // 0xFFFFFFFF
	internal int $PC; // 0xFFFFFFFF

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE13 Offset: 0xE13 VA: 0xE13
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBD2 Offset: 0xBD2 VA: 0xBD2
	|-TweenRunner.<Start>c__Iterator0<ColorTween>..ctor
	|
	|-RVA: 0xBD5 Offset: 0xBD5 VA: 0xBD5
	|-TweenRunner.<Start>c__Iterator0<FloatTween>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1289 Offset: 0x1289 VA: 0x1289
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.MoveNext
	|
	|-RVA: 0x128C Offset: 0x128C VA: 0x128C
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0xE14 Offset: 0xE14 VA: 0xE14
	// RVA: -1 Offset: -1 Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x128A Offset: 0x128A VA: 0x128A
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.System.Collections.Generic.IEnumerator<object>.get_Current
	|
	|-RVA: 0x128D Offset: 0x128D VA: 0x128D
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.System.Collections.Generic.IEnumerator<object>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xE15 Offset: 0xE15 VA: 0xE15
	// RVA: -1 Offset: -1 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x128B Offset: 0x128B VA: 0x128B
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.System.Collections.IEnumerator.get_Current
	|
	|-RVA: 0x128E Offset: 0x128E VA: 0x128E
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.System.Collections.IEnumerator.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xE16 Offset: 0xE16 VA: 0xE16
	// RVA: -1 Offset: -1 Slot: 6
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBD3 Offset: 0xBD3 VA: 0xBD3
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.Dispose
	|
	|-RVA: 0xBD6 Offset: 0xBD6 VA: 0xBD6
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.Dispose
	*/

	[DebuggerHiddenAttribute] // RVA: 0xE17 Offset: 0xE17 VA: 0xE17
	// RVA: -1 Offset: -1 Slot: 8
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBD4 Offset: 0xBD4 VA: 0xBD4
	|-TweenRunner.<Start>c__Iterator0<ColorTween>.Reset
	|
	|-RVA: 0xBD7 Offset: 0xBD7 VA: 0xBD7
	|-TweenRunner.<Start>c__Iterator0<FloatTween>.Reset
	*/
}

// Namespace: UnityEngine.UI
[Serializable]
public class AnimationTriggers // TypeDefIndex: 2200
{
	// Fields
	private const string kDefaultNormalAnimName = "Normal";
	private const string kDefaultSelectedAnimName = "Highlighted";
	private const string kDefaultPressedAnimName = "Pressed";
	private const string kDefaultDisabledAnimName = "Disabled";
	[FormerlySerializedAsAttribute] // RVA: 0xCF7 Offset: 0xCF7 VA: 0xCF7
	[SerializeField] // RVA: 0xCF7 Offset: 0xCF7 VA: 0xCF7
	private string m_NormalTrigger; // 0x8
	[FormerlySerializedAsAttribute] // RVA: 0xCF8 Offset: 0xCF8 VA: 0xCF8
	[FormerlySerializedAsAttribute] // RVA: 0xCF8 Offset: 0xCF8 VA: 0xCF8
	[SerializeField] // RVA: 0xCF8 Offset: 0xCF8 VA: 0xCF8
	private string m_HighlightedTrigger; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xCF9 Offset: 0xCF9 VA: 0xCF9
	[SerializeField] // RVA: 0xCF9 Offset: 0xCF9 VA: 0xCF9
	private string m_PressedTrigger; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xCFA Offset: 0xCFA VA: 0xCFA
	[SerializeField] // RVA: 0xCFA Offset: 0xCFA VA: 0xCFA
	private string m_DisabledTrigger; // 0x14

	// Properties
	public string normalTrigger { get; set; }
	public string highlightedTrigger { get; set; }
	public string pressedTrigger { get; set; }
	public string disabledTrigger { get; set; }

	// Methods

	// RVA: 0x781 Offset: 0x781 VA: 0x781
	public void .ctor() { }

	// RVA: 0xBE5 Offset: 0xBE5 VA: 0xBE5
	public string get_normalTrigger() { }

	// RVA: 0x6A1 Offset: 0x6A1 VA: 0x6A1
	public void set_normalTrigger(string value) { }

	// RVA: 0xBE6 Offset: 0xBE6 VA: 0xBE6
	public string get_highlightedTrigger() { }

	// RVA: 0x6A2 Offset: 0x6A2 VA: 0x6A2
	public void set_highlightedTrigger(string value) { }

	// RVA: 0xBE7 Offset: 0xBE7 VA: 0xBE7
	public string get_pressedTrigger() { }

	// RVA: 0x6A3 Offset: 0x6A3 VA: 0x6A3
	public void set_pressedTrigger(string value) { }

	// RVA: 0xBE8 Offset: 0xBE8 VA: 0xBE8
	public string get_disabledTrigger() { }

	// RVA: 0x6A4 Offset: 0x6A4 VA: 0x6A4
	public void set_disabledTrigger(string value) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC94 Offset: 0xC94 VA: 0xC94
public class Button : Selectable, IPointerClickHandler, ISubmitHandler, IEventSystemHandler // TypeDefIndex: 2201
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xCFB Offset: 0xCFB VA: 0xCFB
	[SerializeField] // RVA: 0xCFB Offset: 0xCFB VA: 0xCFB
	private Button.ButtonClickedEvent m_OnClick; // 0x94

	// Properties
	public Button.ButtonClickedEvent onClick { get; set; }

	// Methods

	// RVA: 0x790 Offset: 0x790 VA: 0x790
	protected void .ctor() { }

	// RVA: 0xBEC Offset: 0xBEC VA: 0xBEC
	public Button.ButtonClickedEvent get_onClick() { }

	// RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8
	public void set_onClick(Button.ButtonClickedEvent value) { }

	// RVA: 0x791 Offset: 0x791 VA: 0x791
	private void Press() { }

	// RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9 Slot: 41
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x6AA Offset: 0x6AA VA: 0x6AA Slot: 42
	public virtual void OnSubmit(BaseEventData eventData) { }

	[DebuggerHiddenAttribute] // RVA: 0xDE7 Offset: 0xDE7 VA: 0xDE7
	// RVA: 0xBED Offset: 0xBED VA: 0xBED
	private IEnumerator OnFinishSubmit() { }
}

// Namespace: 
[Serializable]
public class Button.ButtonClickedEvent : UnityEvent // TypeDefIndex: 2202
{
	// Methods

	// RVA: 0x795 Offset: 0x795 VA: 0x795
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB8 Offset: 0xCB8 VA: 0xCB8
private sealed class Button.<OnFinishSubmit>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2203
{
	// Fields
	internal float <fadeTime>__0; // 0x8
	internal float <elapsedTime>__0; // 0xC
	internal Button $this; // 0x10
	internal object $current; // 0x14
	internal bool $disposing; // 0x18
	internal int $PC; // 0x1C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE18 Offset: 0xE18 VA: 0xE18
	// RVA: 0x792 Offset: 0x792 VA: 0x792
	public void .ctor() { }

	// RVA: 0xBEE Offset: 0xBEE VA: 0xBEE Slot: 4
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xE19 Offset: 0xE19 VA: 0xE19
	// RVA: 0xBEF Offset: 0xBEF VA: 0xBEF Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE1A Offset: 0xE1A VA: 0xE1A
	// RVA: 0xBF0 Offset: 0xBF0 VA: 0xBF0 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE1B Offset: 0xE1B VA: 0xE1B
	// RVA: 0x793 Offset: 0x793 VA: 0x793 Slot: 6
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xE1C Offset: 0xE1C VA: 0xE1C
	// RVA: 0x794 Offset: 0x794 VA: 0x794 Slot: 8
	public void Reset() { }
}

// Namespace: UnityEngine.UI
public enum CanvasUpdate // TypeDefIndex: 2204
{
	// Fields
	public int value__; // 0x0
	public const CanvasUpdate Prelayout = 0;
	public const CanvasUpdate Layout = 1;
	public const CanvasUpdate PostLayout = 2;
	public const CanvasUpdate PreRender = 3;
	public const CanvasUpdate LatePreRender = 4;
	public const CanvasUpdate MaxUpdateValue = 5;
}

// Namespace: UnityEngine.UI
public interface ICanvasElement // TypeDefIndex: 2205
{
	// Properties
	public abstract Transform transform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Rebuild(CanvasUpdate executing) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract Transform get_transform() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void LayoutComplete() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void GraphicUpdateComplete() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool IsDestroyed() { }
}

// Namespace: UnityEngine.UI
public class CanvasUpdateRegistry // TypeDefIndex: 2206
{
	// Fields
	private static CanvasUpdateRegistry s_Instance; // 0x0
	private bool m_PerformingLayoutUpdate; // 0x8
	private bool m_PerformingGraphicUpdate; // 0x9
	private readonly IndexedSet<ICanvasElement> m_LayoutRebuildQueue; // 0xC
	private readonly IndexedSet<ICanvasElement> m_GraphicRebuildQueue; // 0x10
	private static readonly Comparison<ICanvasElement> s_SortLayoutFunction; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xCFC Offset: 0xCFC VA: 0xCFC
	private static Comparison<ICanvasElement> <>f__mg$cache0; // 0x8

	// Properties
	public static CanvasUpdateRegistry instance { get; }

	// Methods

	// RVA: 0x79F Offset: 0x79F VA: 0x79F
	protected void .ctor() { }

	// RVA: 0x297 Offset: 0x297 VA: 0x297
	public static CanvasUpdateRegistry get_instance() { }

	// RVA: 0x5EE Offset: 0x5EE VA: 0x5EE
	private bool ObjectValidForUpdate(ICanvasElement element) { }

	// RVA: 0x7A0 Offset: 0x7A0 VA: 0x7A0
	private void CleanInvalidItems() { }

	// RVA: 0x7A1 Offset: 0x7A1 VA: 0x7A1
	private void PerformUpdate() { }

	// RVA: 0xBF4 Offset: 0xBF4 VA: 0xBF4
	private static int ParentCount(Transform child) { }

	// RVA: 0x5EF Offset: 0x5EF VA: 0x5EF
	private static int SortLayoutList(ICanvasElement x, ICanvasElement y) { }

	// RVA: 0x7A2 Offset: 0x7A2 VA: 0x7A2
	public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0xBF5 Offset: 0xBF5 VA: 0xBF5
	public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x5F0 Offset: 0x5F0 VA: 0x5F0
	private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x7A3 Offset: 0x7A3 VA: 0x7A3
	public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0xBF6 Offset: 0xBF6 VA: 0xBF6
	public static bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x5F1 Offset: 0x5F1 VA: 0x5F1
	private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x7A4 Offset: 0x7A4 VA: 0x7A4
	public static void UnRegisterCanvasElementForRebuild(ICanvasElement element) { }

	// RVA: 0x6B0 Offset: 0x6B0 VA: 0x6B0
	private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }

	// RVA: 0x6B1 Offset: 0x6B1 VA: 0x6B1
	private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }

	// RVA: 0x298 Offset: 0x298 VA: 0x298
	public static bool IsRebuildingLayout() { }

	// RVA: 0x299 Offset: 0x299 VA: 0x299
	public static bool IsRebuildingGraphics() { }

	// RVA: 0xF77 Offset: 0xF77 VA: 0xF77
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public struct ColorBlock : IEquatable<ColorBlock> // TypeDefIndex: 2207
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xCFD Offset: 0xCFD VA: 0xCFD
	[SerializeField] // RVA: 0xCFD Offset: 0xCFD VA: 0xCFD
	private Color m_NormalColor; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xCFE Offset: 0xCFE VA: 0xCFE
	[FormerlySerializedAsAttribute] // RVA: 0xCFE Offset: 0xCFE VA: 0xCFE
	[SerializeField] // RVA: 0xCFE Offset: 0xCFE VA: 0xCFE
	private Color m_HighlightedColor; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xCFF Offset: 0xCFF VA: 0xCFF
	[SerializeField] // RVA: 0xCFF Offset: 0xCFF VA: 0xCFF
	private Color m_PressedColor; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0xD00 Offset: 0xD00 VA: 0xD00
	[SerializeField] // RVA: 0xD00 Offset: 0xD00 VA: 0xD00
	private Color m_DisabledColor; // 0x30
	[RangeAttribute] // RVA: 0xD01 Offset: 0xD01 VA: 0xD01
	[SerializeField] // RVA: 0xD01 Offset: 0xD01 VA: 0xD01
	private float m_ColorMultiplier; // 0x40
	[FormerlySerializedAsAttribute] // RVA: 0xD02 Offset: 0xD02 VA: 0xD02
	[SerializeField] // RVA: 0xD02 Offset: 0xD02 VA: 0xD02
	private float m_FadeDuration; // 0x44

	// Properties
	public Color normalColor { get; set; }
	public Color highlightedColor { get; set; }
	public Color pressedColor { get; set; }
	public Color disabledColor { get; set; }
	public float colorMultiplier { get; set; }
	public float fadeDuration { get; set; }
	public static ColorBlock defaultColorBlock { get; }

	// Methods

	// RVA: 0x6B2 Offset: 0x6B2 VA: 0x6B2
	public Color get_normalColor() { }

	// RVA: 0x6B3 Offset: 0x6B3 VA: 0x6B3
	public void set_normalColor(Color value) { }

	// RVA: 0x6B4 Offset: 0x6B4 VA: 0x6B4
	public Color get_highlightedColor() { }

	// RVA: 0x6B5 Offset: 0x6B5 VA: 0x6B5
	public void set_highlightedColor(Color value) { }

	// RVA: 0x6B6 Offset: 0x6B6 VA: 0x6B6
	public Color get_pressedColor() { }

	// RVA: 0x6B7 Offset: 0x6B7 VA: 0x6B7
	public void set_pressedColor(Color value) { }

	// RVA: 0x6B8 Offset: 0x6B8 VA: 0x6B8
	public Color get_disabledColor() { }

	// RVA: 0x6B9 Offset: 0x6B9 VA: 0x6B9
	public void set_disabledColor(Color value) { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39
	public float get_colorMultiplier() { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	public void set_colorMultiplier(float value) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A
	public float get_fadeDuration() { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	public void set_fadeDuration(float value) { }

	// RVA: 0x7A9 Offset: 0x7A9 VA: 0x7A9
	public static ColorBlock get_defaultColorBlock() { }

	// RVA: 0x5F2 Offset: 0x5F2 VA: 0x5F2 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x5F3 Offset: 0x5F3 VA: 0x5F3 Slot: 4
	public bool Equals(ColorBlock other) { }

	// RVA: 0x5F4 Offset: 0x5F4 VA: 0x5F4
	public static bool op_Equality(ColorBlock point1, ColorBlock point2) { }

	// RVA: 0x5F5 Offset: 0x5F5 VA: 0x5F5
	public static bool op_Inequality(ColorBlock point1, ColorBlock point2) { }

	// RVA: 0xBF7 Offset: 0xBF7 VA: 0xBF7 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.UI
public static class DefaultControls // TypeDefIndex: 2208
{
	// Fields
	private const float kWidth = 160;
	private const float kThickHeight = 30;
	private const float kThinHeight = 20;
	private static Vector2 s_ThickElementSize; // 0x0
	private static Vector2 s_ThinElementSize; // 0x8
	private static Vector2 s_ImageElementSize; // 0x10
	private static Color s_DefaultSelectableColor; // 0x18
	private static Color s_PanelColor; // 0x28
	private static Color s_TextColor; // 0x38

	// Methods

	// RVA: 0x5F6 Offset: 0x5F6 VA: 0x5F6
	private static GameObject CreateUIElementRoot(string name, Vector2 size) { }

	// RVA: 0x5F7 Offset: 0x5F7 VA: 0x5F7
	private static GameObject CreateUIObject(string name, GameObject parent) { }

	// RVA: 0x7B3 Offset: 0x7B3 VA: 0x7B3
	private static void SetDefaultTextValues(Text lbl) { }

	// RVA: 0x7B4 Offset: 0x7B4 VA: 0x7B4
	private static void SetDefaultColorTransitionValues(Selectable slider) { }

	// RVA: 0x6C6 Offset: 0x6C6 VA: 0x6C6
	private static void SetParentAndAlign(GameObject child, GameObject parent) { }

	// RVA: 0x6C7 Offset: 0x6C7 VA: 0x6C7
	private static void SetLayerRecursively(GameObject go, int layer) { }

	// RVA: 0xC02 Offset: 0xC02 VA: 0xC02
	public static GameObject CreatePanel(DefaultControls.Resources resources) { }

	// RVA: 0xC03 Offset: 0xC03 VA: 0xC03
	public static GameObject CreateButton(DefaultControls.Resources resources) { }

	// RVA: 0xC04 Offset: 0xC04 VA: 0xC04
	public static GameObject CreateText(DefaultControls.Resources resources) { }

	// RVA: 0xC05 Offset: 0xC05 VA: 0xC05
	public static GameObject CreateImage(DefaultControls.Resources resources) { }

	// RVA: 0xC06 Offset: 0xC06 VA: 0xC06
	public static GameObject CreateRawImage(DefaultControls.Resources resources) { }

	// RVA: 0xC07 Offset: 0xC07 VA: 0xC07
	public static GameObject CreateSlider(DefaultControls.Resources resources) { }

	// RVA: 0xC08 Offset: 0xC08 VA: 0xC08
	public static GameObject CreateScrollbar(DefaultControls.Resources resources) { }

	// RVA: 0xC09 Offset: 0xC09 VA: 0xC09
	public static GameObject CreateToggle(DefaultControls.Resources resources) { }

	// RVA: 0xC0A Offset: 0xC0A VA: 0xC0A
	public static GameObject CreateInputField(DefaultControls.Resources resources) { }

	// RVA: 0xC0B Offset: 0xC0B VA: 0xC0B
	public static GameObject CreateDropdown(DefaultControls.Resources resources) { }

	// RVA: 0xC0C Offset: 0xC0C VA: 0xC0C
	public static GameObject CreateScrollView(DefaultControls.Resources resources) { }

	// RVA: 0xF78 Offset: 0xF78 VA: 0xF78
	private static void .cctor() { }
}

// Namespace: 
public struct DefaultControls.Resources // TypeDefIndex: 2209
{
	// Fields
	public Sprite standard; // 0x0
	public Sprite background; // 0x4
	public Sprite inputField; // 0x8
	public Sprite knob; // 0xC
	public Sprite checkmark; // 0x10
	public Sprite dropdown; // 0x14
	public Sprite mask; // 0x18
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC95 Offset: 0xC95 VA: 0xC95
[RequireComponent] // RVA: 0xC95 Offset: 0xC95 VA: 0xC95
public class Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler // TypeDefIndex: 2210
{
	// Fields
	[SerializeField] // RVA: 0xD03 Offset: 0xD03 VA: 0xD03
	private RectTransform m_Template; // 0x94
	[SerializeField] // RVA: 0xD04 Offset: 0xD04 VA: 0xD04
	private Text m_CaptionText; // 0x98
	[SerializeField] // RVA: 0xD05 Offset: 0xD05 VA: 0xD05
	private Image m_CaptionImage; // 0x9C
	[SpaceAttribute] // RVA: 0xD06 Offset: 0xD06 VA: 0xD06
	[SerializeField] // RVA: 0xD06 Offset: 0xD06 VA: 0xD06
	private Text m_ItemText; // 0xA0
	[SerializeField] // RVA: 0xD07 Offset: 0xD07 VA: 0xD07
	private Image m_ItemImage; // 0xA4
	[SpaceAttribute] // RVA: 0xD08 Offset: 0xD08 VA: 0xD08
	[SerializeField] // RVA: 0xD08 Offset: 0xD08 VA: 0xD08
	private int m_Value; // 0xA8
	[SpaceAttribute] // RVA: 0xD09 Offset: 0xD09 VA: 0xD09
	[SerializeField] // RVA: 0xD09 Offset: 0xD09 VA: 0xD09
	private Dropdown.OptionDataList m_Options; // 0xAC
	[SpaceAttribute] // RVA: 0xD0A Offset: 0xD0A VA: 0xD0A
	[SerializeField] // RVA: 0xD0A Offset: 0xD0A VA: 0xD0A
	private Dropdown.DropdownEvent m_OnValueChanged; // 0xB0
	private GameObject m_Dropdown; // 0xB4
	private GameObject m_Blocker; // 0xB8
	private List<Dropdown.DropdownItem> m_Items; // 0xBC
	private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0xC0
	private bool validTemplate; // 0xC4
	private static Dropdown.OptionData s_NoOptionData; // 0x0

	// Properties
	public RectTransform template { get; set; }
	public Text captionText { get; set; }
	public Image captionImage { get; set; }
	public Text itemText { get; set; }
	public Image itemImage { get; set; }
	public List<Dropdown.OptionData> options { get; set; }
	public Dropdown.DropdownEvent onValueChanged { get; set; }
	public int value { get; set; }

	// Methods

	// RVA: 0x7B5 Offset: 0x7B5 VA: 0x7B5
	protected void .ctor() { }

	// RVA: 0xC0D Offset: 0xC0D VA: 0xC0D
	public RectTransform get_template() { }

	// RVA: 0x6C8 Offset: 0x6C8 VA: 0x6C8
	public void set_template(RectTransform value) { }

	// RVA: 0xC0E Offset: 0xC0E VA: 0xC0E
	public Text get_captionText() { }

	// RVA: 0x6C9 Offset: 0x6C9 VA: 0x6C9
	public void set_captionText(Text value) { }

	// RVA: 0xC0F Offset: 0xC0F VA: 0xC0F
	public Image get_captionImage() { }

	// RVA: 0x6CA Offset: 0x6CA VA: 0x6CA
	public void set_captionImage(Image value) { }

	// RVA: 0xC10 Offset: 0xC10 VA: 0xC10
	public Text get_itemText() { }

	// RVA: 0x6CB Offset: 0x6CB VA: 0x6CB
	public void set_itemText(Text value) { }

	// RVA: 0xC11 Offset: 0xC11 VA: 0xC11
	public Image get_itemImage() { }

	// RVA: 0x6CC Offset: 0x6CC VA: 0x6CC
	public void set_itemImage(Image value) { }

	// RVA: 0xC12 Offset: 0xC12 VA: 0xC12
	public List<Dropdown.OptionData> get_options() { }

	// RVA: 0x6CD Offset: 0x6CD VA: 0x6CD
	public void set_options(List<Dropdown.OptionData> value) { }

	// RVA: 0xC13 Offset: 0xC13 VA: 0xC13
	public Dropdown.DropdownEvent get_onValueChanged() { }

	// RVA: 0x6CE Offset: 0x6CE VA: 0x6CE
	public void set_onValueChanged(Dropdown.DropdownEvent value) { }

	// RVA: 0xC14 Offset: 0xC14 VA: 0xC14
	public int get_value() { }

	// RVA: 0x6CF Offset: 0x6CF VA: 0x6CF
	public void set_value(int value) { }

	// RVA: 0x7B6 Offset: 0x7B6 VA: 0x7B6 Slot: 4
	protected override void Awake() { }

	// RVA: 0x7B7 Offset: 0x7B7 VA: 0x7B7 Slot: 6
	protected override void Start() { }

	// RVA: 0x7B8 Offset: 0x7B8 VA: 0x7B8
	public void RefreshShownValue() { }

	// RVA: 0x6D0 Offset: 0x6D0 VA: 0x6D0
	public void AddOptions(List<Dropdown.OptionData> options) { }

	// RVA: 0x6D1 Offset: 0x6D1 VA: 0x6D1
	public void AddOptions(List<string> options) { }

	// RVA: 0x6D2 Offset: 0x6D2 VA: 0x6D2
	public void AddOptions(List<Sprite> options) { }

	// RVA: 0x7B9 Offset: 0x7B9 VA: 0x7B9
	public void ClearOptions() { }

	// RVA: 0x7BA Offset: 0x7BA VA: 0x7BA
	private void SetupTemplate() { }

	// RVA: -1 Offset: -1
	private static T GetOrAddComponent<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDBC Offset: 0xDBC VA: 0xDBC
	|-Dropdown.GetOrAddComponent<object>
	|-Dropdown.GetOrAddComponent<Canvas>
	|-Dropdown.GetOrAddComponent<CanvasGroup>
	|-Dropdown.GetOrAddComponent<GraphicRaycaster>
	*/

	// RVA: 0x6D3 Offset: 0x6D3 VA: 0x6D3 Slot: 42
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x6D4 Offset: 0x6D4 VA: 0x6D4 Slot: 43
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x6D5 Offset: 0x6D5 VA: 0x6D5 Slot: 44
	public virtual void OnCancel(BaseEventData eventData) { }

	// RVA: 0x7BB Offset: 0x7BB VA: 0x7BB
	public void Show() { }

	// RVA: 0x5F8 Offset: 0x5F8 VA: 0x5F8 Slot: 45
	protected virtual GameObject CreateBlocker(Canvas rootCanvas) { }

	// RVA: 0x6D6 Offset: 0x6D6 VA: 0x6D6 Slot: 46
	protected virtual void DestroyBlocker(GameObject blocker) { }

	// RVA: 0x5F9 Offset: 0x5F9 VA: 0x5F9 Slot: 47
	protected virtual GameObject CreateDropdownList(GameObject template) { }

	// RVA: 0x6D7 Offset: 0x6D7 VA: 0x6D7 Slot: 48
	protected virtual void DestroyDropdownList(GameObject dropdownList) { }

	// RVA: 0x5FA Offset: 0x5FA VA: 0x5FA Slot: 49
	protected virtual Dropdown.DropdownItem CreateItem(Dropdown.DropdownItem itemTemplate) { }

	// RVA: 0x6D8 Offset: 0x6D8 VA: 0x6D8 Slot: 50
	protected virtual void DestroyItem(Dropdown.DropdownItem item) { }

	// RVA: 0x8C Offset: 0x8C VA: 0x8C
	private Dropdown.DropdownItem AddItem(Dropdown.OptionData data, bool selected, Dropdown.DropdownItem itemTemplate, List<Dropdown.DropdownItem> items) { }

	// RVA: 0xA Offset: 0xA VA: 0xA
	private void AlphaFadeList(float duration, float alpha) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private void AlphaFadeList(float duration, float start, float end) { }

	// RVA: 0x2F Offset: 0x2F VA: 0x2F
	private void SetAlpha(float alpha) { }

	// RVA: 0x7BC Offset: 0x7BC VA: 0x7BC
	public void Hide() { }

	[DebuggerHiddenAttribute] // RVA: 0xDE8 Offset: 0xDE8 VA: 0xDE8
	// RVA: 0x3 Offset: 0x3 VA: 0x3
	private IEnumerator DelayedDestroyDropdownList(float delay) { }

	// RVA: 0x6D9 Offset: 0x6D9 VA: 0x6D9
	private void OnSelectItem(Toggle toggle) { }

	// RVA: 0xF79 Offset: 0xF79 VA: 0xF79
	private static void .cctor() { }
}

// Namespace: 
protected internal class Dropdown.DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler, IEventSystemHandler // TypeDefIndex: 2211
{
	// Fields
	[SerializeField] // RVA: 0xD0B Offset: 0xD0B VA: 0xD0B
	private Text m_Text; // 0xC
	[SerializeField] // RVA: 0xD0C Offset: 0xD0C VA: 0xD0C
	private Image m_Image; // 0x10
	[SerializeField] // RVA: 0xD0D Offset: 0xD0D VA: 0xD0D
	private RectTransform m_RectTransform; // 0x14
	[SerializeField] // RVA: 0xD0E Offset: 0xD0E VA: 0xD0E
	private Toggle m_Toggle; // 0x18

	// Properties
	public Text text { get; set; }
	public Image image { get; set; }
	public RectTransform rectTransform { get; set; }
	public Toggle toggle { get; set; }

	// Methods

	// RVA: 0x7C2 Offset: 0x7C2 VA: 0x7C2
	public void .ctor() { }

	// RVA: 0xC18 Offset: 0xC18 VA: 0xC18
	public Text get_text() { }

	// RVA: 0x6DB Offset: 0x6DB VA: 0x6DB
	public void set_text(Text value) { }

	// RVA: 0xC19 Offset: 0xC19 VA: 0xC19
	public Image get_image() { }

	// RVA: 0x6DC Offset: 0x6DC VA: 0x6DC
	public void set_image(Image value) { }

	// RVA: 0xC1A Offset: 0xC1A VA: 0xC1A
	public RectTransform get_rectTransform() { }

	// RVA: 0x6DD Offset: 0x6DD VA: 0x6DD
	public void set_rectTransform(RectTransform value) { }

	// RVA: 0xC1B Offset: 0xC1B VA: 0xC1B
	public Toggle get_toggle() { }

	// RVA: 0x6DE Offset: 0x6DE VA: 0x6DE
	public void set_toggle(Toggle value) { }

	// RVA: 0x6DF Offset: 0x6DF VA: 0x6DF Slot: 6
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x6E0 Offset: 0x6E0 VA: 0x6E0 Slot: 7
	public virtual void OnCancel(BaseEventData eventData) { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionData // TypeDefIndex: 2212
{
	// Fields
	[SerializeField] // RVA: 0xD0F Offset: 0xD0F VA: 0xD0F
	private string m_Text; // 0x8
	[SerializeField] // RVA: 0xD10 Offset: 0xD10 VA: 0xD10
	private Sprite m_Image; // 0xC

	// Properties
	public string text { get; set; }
	public Sprite image { get; set; }

	// Methods

	// RVA: 0x7C3 Offset: 0x7C3 VA: 0x7C3
	public void .ctor() { }

	// RVA: 0x6E1 Offset: 0x6E1 VA: 0x6E1
	public void .ctor(string text) { }

	// RVA: 0x6E2 Offset: 0x6E2 VA: 0x6E2
	public void .ctor(Sprite image) { }

	// RVA: 0x3A9 Offset: 0x3A9 VA: 0x3A9
	public void .ctor(string text, Sprite image) { }

	// RVA: 0xC1C Offset: 0xC1C VA: 0xC1C
	public string get_text() { }

	// RVA: 0x6E3 Offset: 0x6E3 VA: 0x6E3
	public void set_text(string value) { }

	// RVA: 0xC1D Offset: 0xC1D VA: 0xC1D
	public Sprite get_image() { }

	// RVA: 0x6E4 Offset: 0x6E4 VA: 0x6E4
	public void set_image(Sprite value) { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionDataList // TypeDefIndex: 2213
{
	// Fields
	[SerializeField] // RVA: 0xD11 Offset: 0xD11 VA: 0xD11
	private List<Dropdown.OptionData> m_Options; // 0x8

	// Properties
	public List<Dropdown.OptionData> options { get; set; }

	// Methods

	// RVA: 0x7C4 Offset: 0x7C4 VA: 0x7C4
	public void .ctor() { }

	// RVA: 0xC1E Offset: 0xC1E VA: 0xC1E
	public List<Dropdown.OptionData> get_options() { }

	// RVA: 0x6E5 Offset: 0x6E5 VA: 0x6E5
	public void set_options(List<Dropdown.OptionData> value) { }
}

// Namespace: 
[Serializable]
public class Dropdown.DropdownEvent : UnityEvent<int> // TypeDefIndex: 2214
{
	// Methods

	// RVA: 0x7C1 Offset: 0x7C1 VA: 0x7C1
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB9 Offset: 0xCB9 VA: 0xCB9
private sealed class Dropdown.<Show>c__AnonStorey1 // TypeDefIndex: 2215
{
	// Fields
	internal Dropdown.DropdownItem item; // 0x8
	internal Dropdown $this; // 0xC

	// Methods

	// RVA: 0x7C0 Offset: 0x7C0 VA: 0x7C0
	public void .ctor() { }

	// RVA: 0x6DA Offset: 0x6DA VA: 0x6DA
	internal void <>m__0(bool x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCBA Offset: 0xCBA VA: 0xCBA
private sealed class Dropdown.<DelayedDestroyDropdownList>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2216
{
	// Fields
	internal float delay; // 0x8
	internal Dropdown $this; // 0xC
	internal object $current; // 0x10
	internal bool $disposing; // 0x14
	internal int $PC; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE1D Offset: 0xE1D VA: 0xE1D
	// RVA: 0x7BD Offset: 0x7BD VA: 0x7BD
	public void .ctor() { }

	// RVA: 0xC15 Offset: 0xC15 VA: 0xC15 Slot: 4
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xE1E Offset: 0xE1E VA: 0xE1E
	// RVA: 0xC16 Offset: 0xC16 VA: 0xC16 Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE1F Offset: 0xE1F VA: 0xE1F
	// RVA: 0xC17 Offset: 0xC17 VA: 0xC17 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE20 Offset: 0xE20 VA: 0xE20
	// RVA: 0x7BE Offset: 0x7BE VA: 0x7BE Slot: 6
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xE21 Offset: 0xE21 VA: 0xE21
	// RVA: 0x7BF Offset: 0x7BF VA: 0x7BF Slot: 8
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 2217
{
	// Fields
	[SerializeField] // RVA: 0xD12 Offset: 0xD12 VA: 0xD12
	[FormerlySerializedAsAttribute] // RVA: 0xD12 Offset: 0xD12 VA: 0xD12
	private Font m_Font; // 0x8
	[SerializeField] // RVA: 0xD13 Offset: 0xD13 VA: 0xD13
	[FormerlySerializedAsAttribute] // RVA: 0xD13 Offset: 0xD13 VA: 0xD13
	private int m_FontSize; // 0xC
	[SerializeField] // RVA: 0xD14 Offset: 0xD14 VA: 0xD14
	[FormerlySerializedAsAttribute] // RVA: 0xD14 Offset: 0xD14 VA: 0xD14
	private FontStyle m_FontStyle; // 0x10
	[SerializeField] // RVA: 0xD15 Offset: 0xD15 VA: 0xD15
	private bool m_BestFit; // 0x14
	[SerializeField] // RVA: 0xD16 Offset: 0xD16 VA: 0xD16
	private int m_MinSize; // 0x18
	[SerializeField] // RVA: 0xD17 Offset: 0xD17 VA: 0xD17
	private int m_MaxSize; // 0x1C
	[SerializeField] // RVA: 0xD18 Offset: 0xD18 VA: 0xD18
	[FormerlySerializedAsAttribute] // RVA: 0xD18 Offset: 0xD18 VA: 0xD18
	private TextAnchor m_Alignment; // 0x20
	[SerializeField] // RVA: 0xD19 Offset: 0xD19 VA: 0xD19
	private bool m_AlignByGeometry; // 0x24
	[SerializeField] // RVA: 0xD1A Offset: 0xD1A VA: 0xD1A
	[FormerlySerializedAsAttribute] // RVA: 0xD1A Offset: 0xD1A VA: 0xD1A
	private bool m_RichText; // 0x25
	[SerializeField] // RVA: 0xD1B Offset: 0xD1B VA: 0xD1B
	private HorizontalWrapMode m_HorizontalOverflow; // 0x28
	[SerializeField] // RVA: 0xD1C Offset: 0xD1C VA: 0xD1C
	private VerticalWrapMode m_VerticalOverflow; // 0x2C
	[SerializeField] // RVA: 0xD1D Offset: 0xD1D VA: 0xD1D
	private float m_LineSpacing; // 0x30

	// Properties
	public static FontData defaultFontData { get; }
	public Font font { get; set; }
	public int fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public bool bestFit { get; set; }
	public int minSize { get; set; }
	public int maxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public bool richText { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }

	// Methods

	// RVA: 0x7C5 Offset: 0x7C5 VA: 0x7C5
	public void .ctor() { }

	// RVA: 0x29B Offset: 0x29B VA: 0x29B
	public static FontData get_defaultFontData() { }

	// RVA: 0xC1F Offset: 0xC1F VA: 0xC1F
	public Font get_font() { }

	// RVA: 0x6E6 Offset: 0x6E6 VA: 0x6E6
	public void set_font(Font value) { }

	// RVA: 0xC20 Offset: 0xC20 VA: 0xC20
	public int get_fontSize() { }

	// RVA: 0x6E7 Offset: 0x6E7 VA: 0x6E7
	public void set_fontSize(int value) { }

	// RVA: 0xC21 Offset: 0xC21 VA: 0xC21
	public FontStyle get_fontStyle() { }

	// RVA: 0x6E8 Offset: 0x6E8 VA: 0x6E8
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0xC22 Offset: 0xC22 VA: 0xC22
	public bool get_bestFit() { }

	// RVA: 0x6E9 Offset: 0x6E9 VA: 0x6E9
	public void set_bestFit(bool value) { }

	// RVA: 0xC23 Offset: 0xC23 VA: 0xC23
	public int get_minSize() { }

	// RVA: 0x6EA Offset: 0x6EA VA: 0x6EA
	public void set_minSize(int value) { }

	// RVA: 0xC24 Offset: 0xC24 VA: 0xC24
	public int get_maxSize() { }

	// RVA: 0x6EB Offset: 0x6EB VA: 0x6EB
	public void set_maxSize(int value) { }

	// RVA: 0xC25 Offset: 0xC25 VA: 0xC25
	public TextAnchor get_alignment() { }

	// RVA: 0x6EC Offset: 0x6EC VA: 0x6EC
	public void set_alignment(TextAnchor value) { }

	// RVA: 0xC26 Offset: 0xC26 VA: 0xC26
	public bool get_alignByGeometry() { }

	// RVA: 0x6ED Offset: 0x6ED VA: 0x6ED
	public void set_alignByGeometry(bool value) { }

	// RVA: 0xC27 Offset: 0xC27 VA: 0xC27
	public bool get_richText() { }

	// RVA: 0x6EE Offset: 0x6EE VA: 0x6EE
	public void set_richText(bool value) { }

	// RVA: 0xC28 Offset: 0xC28 VA: 0xC28
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x6EF Offset: 0x6EF VA: 0x6EF
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0xC29 Offset: 0xC29 VA: 0xC29
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x6F0 Offset: 0x6F0 VA: 0x6F0
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41
	public float get_lineSpacing() { }

	// RVA: 0x30 Offset: 0x30 VA: 0x30
	public void set_lineSpacing(float value) { }

	// RVA: 0x7C6 Offset: 0x7C6 VA: 0x7C6 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }

	// RVA: 0x7C7 Offset: 0x7C7 VA: 0x7C7 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
}

// Namespace: UnityEngine.UI
public static class FontUpdateTracker // TypeDefIndex: 2218
{
	// Fields
	private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xD1E Offset: 0xD1E VA: 0xD1E
	private static Action<Font> <>f__mg$cache0; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xD1F Offset: 0xD1F VA: 0xD1F
	private static Action<Font> <>f__mg$cache1; // 0x8

	// Methods

	// RVA: 0x7C8 Offset: 0x7C8 VA: 0x7C8
	public static void TrackText(Text t) { }

	// RVA: 0x7C9 Offset: 0x7C9 VA: 0x7C9
	private static void RebuildForFont(Font f) { }

	// RVA: 0x7CA Offset: 0x7CA VA: 0x7CA
	public static void UntrackText(Text t) { }

	// RVA: 0xF7A Offset: 0xF7A VA: 0xF7A
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0xC96 Offset: 0xC96 VA: 0xC96
[RequireComponent] // RVA: 0xC96 Offset: 0xC96 VA: 0xC96
[RequireComponent] // RVA: 0xC96 Offset: 0xC96 VA: 0xC96
[ExecuteAlways] // RVA: 0xC96 Offset: 0xC96 VA: 0xC96
public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 2219
{
	// Fields
	protected static Material s_DefaultUI; // 0x0
	protected static Texture2D s_WhiteTexture; // 0x4
	[FormerlySerializedAsAttribute] // RVA: 0xD20 Offset: 0xD20 VA: 0xD20
	[SerializeField] // RVA: 0xD20 Offset: 0xD20 VA: 0xD20
	protected Material m_Material; // 0xC
	[SerializeField] // RVA: 0xD21 Offset: 0xD21 VA: 0xD21
	private Color m_Color; // 0x10
	[SerializeField] // RVA: 0xD22 Offset: 0xD22 VA: 0xD22
	private bool m_RaycastTarget; // 0x20
	private RectTransform m_RectTransform; // 0x24
	private CanvasRenderer m_CanvasRenderer; // 0x28
	private Canvas m_Canvas; // 0x2C
	private bool m_VertsDirty; // 0x30
	private bool m_MaterialDirty; // 0x31
	protected UnityAction m_OnDirtyLayoutCallback; // 0x34
	protected UnityAction m_OnDirtyVertsCallback; // 0x38
	protected UnityAction m_OnDirtyMaterialCallback; // 0x3C
	protected static Mesh s_Mesh; // 0x8
	private static readonly VertexHelper s_VertexHelper; // 0xC
	private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xD23 Offset: 0xD23 VA: 0xD23
	[DebuggerBrowsableAttribute] // RVA: 0xD23 Offset: 0xD23 VA: 0xD23
	private bool <useLegacyMeshGeneration>k__BackingField; // 0x44

	// Properties
	public static Material defaultGraphicMaterial { get; }
	public virtual Color color { get; set; }
	public virtual bool raycastTarget { get; set; }
	protected bool useLegacyMeshGeneration { get; set; }
	public int depth { get; }
	public RectTransform rectTransform { get; }
	public Canvas canvas { get; }
	public CanvasRenderer canvasRenderer { get; }
	public virtual Material defaultMaterial { get; }
	public virtual Material material { get; set; }
	public virtual Material materialForRendering { get; }
	public virtual Texture mainTexture { get; }
	protected static Mesh workerMesh { get; }

	// Methods

	// RVA: 0x7CB Offset: 0x7CB VA: 0x7CB
	protected void .ctor() { }

	// RVA: 0x29C Offset: 0x29C VA: 0x29C
	public static Material get_defaultGraphicMaterial() { }

	// RVA: 0x6F1 Offset: 0x6F1 VA: 0x6F1 Slot: 22
	public virtual Color get_color() { }

	// RVA: 0x6F2 Offset: 0x6F2 VA: 0x6F2 Slot: 23
	public virtual void set_color(Color value) { }

	// RVA: 0xC2A Offset: 0xC2A VA: 0xC2A Slot: 24
	public virtual bool get_raycastTarget() { }

	// RVA: 0x6F3 Offset: 0x6F3 VA: 0x6F3 Slot: 25
	public virtual void set_raycastTarget(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDE9 Offset: 0xDE9 VA: 0xDE9
	// RVA: 0xC2B Offset: 0xC2B VA: 0xC2B
	protected bool get_useLegacyMeshGeneration() { }

	[CompilerGeneratedAttribute] // RVA: 0xDEA Offset: 0xDEA VA: 0xDEA
	// RVA: 0x6F4 Offset: 0x6F4 VA: 0x6F4
	protected void set_useLegacyMeshGeneration(bool value) { }

	// RVA: 0x7CC Offset: 0x7CC VA: 0x7CC Slot: 26
	public virtual void SetAllDirty() { }

	// RVA: 0x7CD Offset: 0x7CD VA: 0x7CD Slot: 27
	public virtual void SetLayoutDirty() { }

	// RVA: 0x7CE Offset: 0x7CE VA: 0x7CE Slot: 28
	public virtual void SetVerticesDirty() { }

	// RVA: 0x7CF Offset: 0x7CF VA: 0x7CF Slot: 29
	public virtual void SetMaterialDirty() { }

	// RVA: 0x7D0 Offset: 0x7D0 VA: 0x7D0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x7D1 Offset: 0x7D1 VA: 0x7D1 Slot: 11
	protected override void OnBeforeTransformParentChanged() { }

	// RVA: 0x7D2 Offset: 0x7D2 VA: 0x7D2 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0xC2C Offset: 0xC2C VA: 0xC2C
	public int get_depth() { }

	// RVA: 0xC2D Offset: 0xC2D VA: 0xC2D Slot: 30
	public RectTransform get_rectTransform() { }

	// RVA: 0xC2E Offset: 0xC2E VA: 0xC2E
	public Canvas get_canvas() { }

	// RVA: 0x7D3 Offset: 0x7D3 VA: 0x7D3
	private void CacheCanvas() { }

	// RVA: 0xC2F Offset: 0xC2F VA: 0xC2F
	public CanvasRenderer get_canvasRenderer() { }

	// RVA: 0xC30 Offset: 0xC30 VA: 0xC30 Slot: 31
	public virtual Material get_defaultMaterial() { }

	// RVA: 0xC31 Offset: 0xC31 VA: 0xC31 Slot: 32
	public virtual Material get_material() { }

	// RVA: 0x6F5 Offset: 0x6F5 VA: 0x6F5 Slot: 33
	public virtual void set_material(Material value) { }

	// RVA: 0xC32 Offset: 0xC32 VA: 0xC32 Slot: 34
	public virtual Material get_materialForRendering() { }

	// RVA: 0xC33 Offset: 0xC33 VA: 0xC33 Slot: 35
	public virtual Texture get_mainTexture() { }

	// RVA: 0x7D4 Offset: 0x7D4 VA: 0x7D4 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x7D5 Offset: 0x7D5 VA: 0x7D5 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x7D6 Offset: 0x7D6 VA: 0x7D6 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }

	// RVA: 0x7D7 Offset: 0x7D7 VA: 0x7D7 Slot: 36
	public virtual void OnCullingChanged() { }

	// RVA: 0x6F6 Offset: 0x6F6 VA: 0x6F6 Slot: 37
	public virtual void Rebuild(CanvasUpdate update) { }

	// RVA: 0x7D8 Offset: 0x7D8 VA: 0x7D8 Slot: 38
	public virtual void LayoutComplete() { }

	// RVA: 0x7D9 Offset: 0x7D9 VA: 0x7D9 Slot: 39
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x7DA Offset: 0x7DA VA: 0x7DA Slot: 40
	protected virtual void UpdateMaterial() { }

	// RVA: 0x7DB Offset: 0x7DB VA: 0x7DB Slot: 41
	protected virtual void UpdateGeometry() { }

	// RVA: 0x7DC Offset: 0x7DC VA: 0x7DC
	private void DoMeshGeneration() { }

	// RVA: 0x7DD Offset: 0x7DD VA: 0x7DD
	private void DoLegacyMeshGeneration() { }

	// RVA: 0x29D Offset: 0x29D VA: 0x29D
	protected static Mesh get_workerMesh() { }

	[EditorBrowsableAttribute] // RVA: 0xDEB Offset: 0xDEB VA: 0xDEB
	[ObsoleteAttribute] // RVA: 0xDEB Offset: 0xDEB VA: 0xDEB
	// RVA: 0x6F7 Offset: 0x6F7 VA: 0x6F7 Slot: 42
	protected virtual void OnFillVBO(List<UIVertex> vbo) { }

	[ObsoleteAttribute] // RVA: 0xDEC Offset: 0xDEC VA: 0xDEC
	// RVA: 0x6F8 Offset: 0x6F8 VA: 0x6F8 Slot: 43
	protected virtual void OnPopulateMesh(Mesh m) { }

	// RVA: 0x6F9 Offset: 0x6F9 VA: 0x6F9 Slot: 44
	protected virtual void OnPopulateMesh(VertexHelper vh) { }

	// RVA: 0x7DE Offset: 0x7DE VA: 0x7DE Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x7DF Offset: 0x7DF VA: 0x7DF Slot: 45
	public virtual void SetNativeSize() { }

	// RVA: 0xA2E Offset: 0xA2E VA: 0xA2E Slot: 46
	public virtual bool Raycast(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x3AA Offset: 0x3AA VA: 0x3AA
	public Vector2 PixelAdjustPoint(Vector2 point) { }

	// RVA: 0x6FA Offset: 0x6FA VA: 0x6FA
	public Rect GetPixelAdjustedRect() { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 47
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 48
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB) { }

	// RVA: 0x31 Offset: 0x31 VA: 0x31
	private static Color CreateColorFromAlpha(float alpha) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 49
	public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }

	// RVA: 0x6FB Offset: 0x6FB VA: 0x6FB
	public void RegisterDirtyLayoutCallback(UnityAction action) { }

	// RVA: 0x6FC Offset: 0x6FC VA: 0x6FC
	public void UnregisterDirtyLayoutCallback(UnityAction action) { }

	// RVA: 0x6FD Offset: 0x6FD VA: 0x6FD
	public void RegisterDirtyVerticesCallback(UnityAction action) { }

	// RVA: 0x6FE Offset: 0x6FE VA: 0x6FE
	public void UnregisterDirtyVerticesCallback(UnityAction action) { }

	// RVA: 0x6FF Offset: 0x6FF VA: 0x6FF
	public void RegisterDirtyMaterialCallback(UnityAction action) { }

	// RVA: 0x700 Offset: 0x700 VA: 0x700
	public void UnregisterDirtyMaterialCallback(UnityAction action) { }

	// RVA: 0xF7B Offset: 0xF7B VA: 0xF7B
	private static void .cctor() { }

	// RVA: 0xC34 Offset: 0xC34 VA: 0xC34 Slot: 18
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC97 Offset: 0xC97 VA: 0xC97
[RequireComponent] // RVA: 0xC97 Offset: 0xC97 VA: 0xC97
public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 2220
{
	// Fields
	protected const int kNoEventMaskSet = -1;
	[FormerlySerializedAsAttribute] // RVA: 0xD24 Offset: 0xD24 VA: 0xD24
	[SerializeField] // RVA: 0xD24 Offset: 0xD24 VA: 0xD24
	private bool m_IgnoreReversedGraphics; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xD25 Offset: 0xD25 VA: 0xD25
	[SerializeField] // RVA: 0xD25 Offset: 0xD25 VA: 0xD25
	private GraphicRaycaster.BlockingObjects m_BlockingObjects; // 0x10
	[SerializeField] // RVA: 0xD26 Offset: 0xD26 VA: 0xD26
	protected LayerMask m_BlockingMask; // 0x14
	private Canvas m_Canvas; // 0x18
	private List<Graphic> m_RaycastResults; // 0x1C
	private static readonly List<Graphic> s_SortedGraphics; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xD27 Offset: 0xD27 VA: 0xD27
	private static Comparison<Graphic> <>f__am$cache0; // 0x4

	// Properties
	public override int sortOrderPriority { get; }
	public override int renderOrderPriority { get; }
	public bool ignoreReversedGraphics { get; set; }
	public GraphicRaycaster.BlockingObjects blockingObjects { get; set; }
	private Canvas canvas { get; }
	public override Camera eventCamera { get; }

	// Methods

	// RVA: 0x7E0 Offset: 0x7E0 VA: 0x7E0
	protected void .ctor() { }

	// RVA: 0xC35 Offset: 0xC35 VA: 0xC35 Slot: 20
	public override int get_sortOrderPriority() { }

	// RVA: 0xC36 Offset: 0xC36 VA: 0xC36 Slot: 21
	public override int get_renderOrderPriority() { }

	// RVA: 0xC37 Offset: 0xC37 VA: 0xC37
	public bool get_ignoreReversedGraphics() { }

	// RVA: 0x701 Offset: 0x701 VA: 0x701
	public void set_ignoreReversedGraphics(bool value) { }

	// RVA: 0xC38 Offset: 0xC38 VA: 0xC38
	public GraphicRaycaster.BlockingObjects get_blockingObjects() { }

	// RVA: 0x702 Offset: 0x702 VA: 0x702
	public void set_blockingObjects(GraphicRaycaster.BlockingObjects value) { }

	// RVA: 0xC39 Offset: 0xC39 VA: 0xC39
	private Canvas get_canvas() { }

	// RVA: 0x3AB Offset: 0x3AB VA: 0x3AB Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }

	// RVA: 0xC3A Offset: 0xC3A VA: 0xC3A Slot: 18
	public override Camera get_eventCamera() { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85
	private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results) { }

	// RVA: 0xF7C Offset: 0xF7C VA: 0xF7C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xDED Offset: 0xDED VA: 0xDED
	// RVA: 0x5FB Offset: 0x5FB VA: 0x5FB
	private static int <Raycast>m__0(Graphic g1, Graphic g2) { }
}

// Namespace: 
public enum GraphicRaycaster.BlockingObjects // TypeDefIndex: 2221
{
	// Fields
	public int value__; // 0x0
	public const GraphicRaycaster.BlockingObjects None = 0;
	public const GraphicRaycaster.BlockingObjects TwoD = 1;
	public const GraphicRaycaster.BlockingObjects ThreeD = 2;
	public const GraphicRaycaster.BlockingObjects All = 3;
}

// Namespace: UnityEngine.UI
public class GraphicRegistry // TypeDefIndex: 2222
{
	// Fields
	private static GraphicRegistry s_Instance; // 0x0
	private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x8
	private static readonly List<Graphic> s_EmptyList; // 0x4

	// Properties
	public static GraphicRegistry instance { get; }

	// Methods

	// RVA: 0x7E1 Offset: 0x7E1 VA: 0x7E1
	protected void .ctor() { }

	// RVA: 0x29E Offset: 0x29E VA: 0x29E
	public static GraphicRegistry get_instance() { }

	// RVA: 0x703 Offset: 0x703 VA: 0x703
	public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic) { }

	// RVA: 0x704 Offset: 0x704 VA: 0x704
	public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) { }

	// RVA: 0xC3B Offset: 0xC3B VA: 0xC3B
	public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas) { }

	// RVA: 0xF7D Offset: 0xF7D VA: 0xF7D
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[ObsoleteAttribute] // RVA: 0xC98 Offset: 0xC98 VA: 0xC98
internal interface IGraphicEnabledDisabled // TypeDefIndex: 2223
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSiblingGraphicEnabledDisabled() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC99 Offset: 0xC99 VA: 0xC99
public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 2224
{
	// Fields
	protected static Material s_ETC1DefaultUI; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xD28 Offset: 0xD28 VA: 0xD28
	[SerializeField] // RVA: 0xD28 Offset: 0xD28 VA: 0xD28
	private Sprite m_Sprite; // 0x64
	private Sprite m_OverrideSprite; // 0x68
	[SerializeField] // RVA: 0xD29 Offset: 0xD29 VA: 0xD29
	private Image.Type m_Type; // 0x6C
	[SerializeField] // RVA: 0xD2A Offset: 0xD2A VA: 0xD2A
	private bool m_PreserveAspect; // 0x70
	[SerializeField] // RVA: 0xD2B Offset: 0xD2B VA: 0xD2B
	private bool m_FillCenter; // 0x71
	[SerializeField] // RVA: 0xD2C Offset: 0xD2C VA: 0xD2C
	private Image.FillMethod m_FillMethod; // 0x74
	[RangeAttribute] // RVA: 0xD2D Offset: 0xD2D VA: 0xD2D
	[SerializeField] // RVA: 0xD2D Offset: 0xD2D VA: 0xD2D
	private float m_FillAmount; // 0x78
	[SerializeField] // RVA: 0xD2E Offset: 0xD2E VA: 0xD2E
	private bool m_FillClockwise; // 0x7C
	[SerializeField] // RVA: 0xD2F Offset: 0xD2F VA: 0xD2F
	private int m_FillOrigin; // 0x80
	private float m_AlphaHitTestMinimumThreshold; // 0x84
	private bool m_Tracked; // 0x88
	[SerializeField] // RVA: 0xD30 Offset: 0xD30 VA: 0xD30
	private bool m_UseSpriteMesh; // 0x89
	private static readonly Vector2[] s_VertScratch; // 0x4
	private static readonly Vector2[] s_UVScratch; // 0x8
	private static readonly Vector3[] s_Xy; // 0xC
	private static readonly Vector3[] s_Uv; // 0x10
	private static List<Image> m_TrackedTexturelessImages; // 0x14
	private static bool s_Initialized; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xD31 Offset: 0xD31 VA: 0xD31
	private static Action<SpriteAtlas> <>f__mg$cache0; // 0x1C

	// Properties
	public Sprite sprite { get; set; }
	public Sprite overrideSprite { get; set; }
	private Sprite activeSprite { get; }
	public Image.Type type { get; set; }
	public bool preserveAspect { get; set; }
	public bool fillCenter { get; set; }
	public Image.FillMethod fillMethod { get; set; }
	public float fillAmount { get; set; }
	public bool fillClockwise { get; set; }
	public int fillOrigin { get; set; }
	[ObsoleteAttribute] // RVA: 0xE3E Offset: 0xE3E VA: 0xE3E
	public float eventAlphaThreshold { get; set; }
	public float alphaHitTestMinimumThreshold { get; set; }
	public bool useSpriteMesh { get; set; }
	public static Material defaultETC1GraphicMaterial { get; }
	public override Texture mainTexture { get; }
	public bool hasBorder { get; }
	public float pixelsPerUnit { get; }
	public override Material material { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x7ED Offset: 0x7ED VA: 0x7ED
	protected void .ctor() { }

	// RVA: 0xC44 Offset: 0xC44 VA: 0xC44
	public Sprite get_sprite() { }

	// RVA: 0x712 Offset: 0x712 VA: 0x712
	public void set_sprite(Sprite value) { }

	// RVA: 0xC45 Offset: 0xC45 VA: 0xC45
	public Sprite get_overrideSprite() { }

	// RVA: 0x713 Offset: 0x713 VA: 0x713
	public void set_overrideSprite(Sprite value) { }

	// RVA: 0xC46 Offset: 0xC46 VA: 0xC46
	private Sprite get_activeSprite() { }

	// RVA: 0xC47 Offset: 0xC47 VA: 0xC47
	public Image.Type get_type() { }

	// RVA: 0x714 Offset: 0x714 VA: 0x714
	public void set_type(Image.Type value) { }

	// RVA: 0xC48 Offset: 0xC48 VA: 0xC48
	public bool get_preserveAspect() { }

	// RVA: 0x715 Offset: 0x715 VA: 0x715
	public void set_preserveAspect(bool value) { }

	// RVA: 0xC49 Offset: 0xC49 VA: 0xC49
	public bool get_fillCenter() { }

	// RVA: 0x716 Offset: 0x716 VA: 0x716
	public void set_fillCenter(bool value) { }

	// RVA: 0xC4A Offset: 0xC4A VA: 0xC4A
	public Image.FillMethod get_fillMethod() { }

	// RVA: 0x717 Offset: 0x717 VA: 0x717
	public void set_fillMethod(Image.FillMethod value) { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	public float get_fillAmount() { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	public void set_fillAmount(float value) { }

	// RVA: 0xC4B Offset: 0xC4B VA: 0xC4B
	public bool get_fillClockwise() { }

	// RVA: 0x718 Offset: 0x718 VA: 0x718
	public void set_fillClockwise(bool value) { }

	// RVA: 0xC4C Offset: 0xC4C VA: 0xC4C
	public int get_fillOrigin() { }

	// RVA: 0x719 Offset: 0x719 VA: 0x719
	public void set_fillOrigin(int value) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	public float get_eventAlphaThreshold() { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34
	public void set_eventAlphaThreshold(float value) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45
	public float get_alphaHitTestMinimumThreshold() { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	public void set_alphaHitTestMinimumThreshold(float value) { }

	// RVA: 0xC4D Offset: 0xC4D VA: 0xC4D
	public bool get_useSpriteMesh() { }

	// RVA: 0x71A Offset: 0x71A VA: 0x71A
	public void set_useSpriteMesh(bool value) { }

	// RVA: 0x29F Offset: 0x29F VA: 0x29F
	public static Material get_defaultETC1GraphicMaterial() { }

	// RVA: 0xC4E Offset: 0xC4E VA: 0xC4E Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0xC4F Offset: 0xC4F VA: 0xC4F
	public bool get_hasBorder() { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46
	public float get_pixelsPerUnit() { }

	// RVA: 0xC50 Offset: 0xC50 VA: 0xC50 Slot: 32
	public override Material get_material() { }

	// RVA: 0x71B Offset: 0x71B VA: 0x71B Slot: 33
	public override void set_material(Material value) { }

	// RVA: 0x7EE Offset: 0x7EE VA: 0x7EE Slot: 75
	public virtual void OnBeforeSerialize() { }

	// RVA: 0x7EF Offset: 0x7EF VA: 0x7EF Slot: 76
	public virtual void OnAfterDeserialize() { }

	// RVA: 0x3AE Offset: 0x3AE VA: 0x3AE
	private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize) { }

	// RVA: 0x3AF Offset: 0x3AF VA: 0x3AF
	private Vector4 GetDrawingDimensions(bool shouldPreserveAspect) { }

	// RVA: 0x7F0 Offset: 0x7F0 VA: 0x7F0 Slot: 45
	public override void SetNativeSize() { }

	// RVA: 0x71C Offset: 0x71C VA: 0x71C Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x7F1 Offset: 0x7F1 VA: 0x7F1
	private void TrackSprite() { }

	// RVA: 0x7F2 Offset: 0x7F2 VA: 0x7F2 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x7F3 Offset: 0x7F3 VA: 0x7F3 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x7F4 Offset: 0x7F4 VA: 0x7F4 Slot: 40
	protected override void UpdateMaterial() { }

	// RVA: 0x3B0 Offset: 0x3B0 VA: 0x3B0
	private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect) { }

	// RVA: 0x3B1 Offset: 0x3B1 VA: 0x3B1
	private void GenerateSprite(VertexHelper vh, bool lPreserveAspect) { }

	// RVA: 0x71D Offset: 0x71D VA: 0x71D
	private void GenerateSlicedSprite(VertexHelper toFill) { }

	// RVA: 0x71E Offset: 0x71E VA: 0x71E
	private void GenerateTiledSprite(VertexHelper toFill) { }

	// RVA: 0x113 Offset: 0x113 VA: 0x113
	private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs) { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A
	private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax) { }

	// RVA: 0x114 Offset: 0x114 VA: 0x114
	private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect) { }

	// RVA: 0x3B2 Offset: 0x3B2 VA: 0x3B2
	private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner) { }

	// RVA: 0x7F5 Offset: 0x7F5 VA: 0x7F5 Slot: 77
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x7F6 Offset: 0x7F6 VA: 0x7F6 Slot: 78
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47 Slot: 79
	public virtual float get_minWidth() { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48 Slot: 80
	public virtual float get_preferredWidth() { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49 Slot: 81
	public virtual float get_flexibleWidth() { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A Slot: 82
	public virtual float get_minHeight() { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B Slot: 83
	public virtual float get_preferredHeight() { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C Slot: 84
	public virtual float get_flexibleHeight() { }

	// RVA: 0xC51 Offset: 0xC51 VA: 0xC51 Slot: 85
	public virtual int get_layoutPriority() { }

	// RVA: 0xA2F Offset: 0xA2F VA: 0xA2F Slot: 86
	public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) { }

	// RVA: 0x115 Offset: 0x115 VA: 0x115
	private Vector2 MapCoordinate(Vector2 local, Rect rect) { }

	// RVA: 0x7F7 Offset: 0x7F7 VA: 0x7F7
	private static void RebuildImage(SpriteAtlas spriteAtlas) { }

	// RVA: 0x7F8 Offset: 0x7F8 VA: 0x7F8
	private static void TrackImage(Image g) { }

	// RVA: 0x7F9 Offset: 0x7F9 VA: 0x7F9
	private static void UnTrackImage(Image g) { }

	// RVA: 0xF7E Offset: 0xF7E VA: 0xF7E
	private static void .cctor() { }
}

// Namespace: 
public enum Image.Type // TypeDefIndex: 2225
{
	// Fields
	public int value__; // 0x0
	public const Image.Type Simple = 0;
	public const Image.Type Sliced = 1;
	public const Image.Type Tiled = 2;
	public const Image.Type Filled = 3;
}

// Namespace: 
public enum Image.FillMethod // TypeDefIndex: 2226
{
	// Fields
	public int value__; // 0x0
	public const Image.FillMethod Horizontal = 0;
	public const Image.FillMethod Vertical = 1;
	public const Image.FillMethod Radial90 = 2;
	public const Image.FillMethod Radial180 = 3;
	public const Image.FillMethod Radial360 = 4;
}

// Namespace: 
public enum Image.OriginHorizontal // TypeDefIndex: 2227
{
	// Fields
	public int value__; // 0x0
	public const Image.OriginHorizontal Left = 0;
	public const Image.OriginHorizontal Right = 1;
}

// Namespace: 
public enum Image.OriginVertical // TypeDefIndex: 2228
{
	// Fields
	public int value__; // 0x0
	public const Image.OriginVertical Bottom = 0;
	public const Image.OriginVertical Top = 1;
}

// Namespace: 
public enum Image.Origin90 // TypeDefIndex: 2229
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin90 BottomLeft = 0;
	public const Image.Origin90 TopLeft = 1;
	public const Image.Origin90 TopRight = 2;
	public const Image.Origin90 BottomRight = 3;
}

// Namespace: 
public enum Image.Origin180 // TypeDefIndex: 2230
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin180 Bottom = 0;
	public const Image.Origin180 Left = 1;
	public const Image.Origin180 Top = 2;
	public const Image.Origin180 Right = 3;
}

// Namespace: 
public enum Image.Origin360 // TypeDefIndex: 2231
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin360 Bottom = 0;
	public const Image.Origin360 Right = 1;
	public const Image.Origin360 Top = 2;
	public const Image.Origin360 Left = 3;
}

// Namespace: UnityEngine.UI
[EditorBrowsableAttribute] // RVA: 0xC9A Offset: 0xC9A VA: 0xC9A
[ObsoleteAttribute] // RVA: 0xC9A Offset: 0xC9A VA: 0xC9A
public interface IMask // TypeDefIndex: 2232
{
	// Properties
	public abstract RectTransform rectTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Enabled() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract RectTransform get_rectTransform() { }
}

// Namespace: UnityEngine.UI
public interface IMaskable // TypeDefIndex: 2233
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void RecalculateMasking() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC9B Offset: 0xC9B VA: 0xC9B
public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement, IEventSystemHandler // TypeDefIndex: 2234
{
	// Fields
	protected TouchScreenKeyboard m_Keyboard; // 0x94
	private static readonly char[] kSeparators; // 0x0
	[SerializeField] // RVA: 0xD32 Offset: 0xD32 VA: 0xD32
	[FormerlySerializedAsAttribute] // RVA: 0xD32 Offset: 0xD32 VA: 0xD32
	protected Text m_TextComponent; // 0x98
	[SerializeField] // RVA: 0xD33 Offset: 0xD33 VA: 0xD33
	protected Graphic m_Placeholder; // 0x9C
	[SerializeField] // RVA: 0xD34 Offset: 0xD34 VA: 0xD34
	private InputField.ContentType m_ContentType; // 0xA0
	[FormerlySerializedAsAttribute] // RVA: 0xD35 Offset: 0xD35 VA: 0xD35
	[SerializeField] // RVA: 0xD35 Offset: 0xD35 VA: 0xD35
	private InputField.InputType m_InputType; // 0xA4
	[FormerlySerializedAsAttribute] // RVA: 0xD36 Offset: 0xD36 VA: 0xD36
	[SerializeField] // RVA: 0xD36 Offset: 0xD36 VA: 0xD36
	private char m_AsteriskChar; // 0xA8
	[FormerlySerializedAsAttribute] // RVA: 0xD37 Offset: 0xD37 VA: 0xD37
	[SerializeField] // RVA: 0xD37 Offset: 0xD37 VA: 0xD37
	private TouchScreenKeyboardType m_KeyboardType; // 0xAC
	[SerializeField] // RVA: 0xD38 Offset: 0xD38 VA: 0xD38
	private InputField.LineType m_LineType; // 0xB0
	[FormerlySerializedAsAttribute] // RVA: 0xD39 Offset: 0xD39 VA: 0xD39
	[SerializeField] // RVA: 0xD39 Offset: 0xD39 VA: 0xD39
	private bool m_HideMobileInput; // 0xB4
	[FormerlySerializedAsAttribute] // RVA: 0xD3A Offset: 0xD3A VA: 0xD3A
	[SerializeField] // RVA: 0xD3A Offset: 0xD3A VA: 0xD3A
	private InputField.CharacterValidation m_CharacterValidation; // 0xB8
	[FormerlySerializedAsAttribute] // RVA: 0xD3B Offset: 0xD3B VA: 0xD3B
	[SerializeField] // RVA: 0xD3B Offset: 0xD3B VA: 0xD3B
	private int m_CharacterLimit; // 0xBC
	[FormerlySerializedAsAttribute] // RVA: 0xD3C Offset: 0xD3C VA: 0xD3C
	[FormerlySerializedAsAttribute] // RVA: 0xD3C Offset: 0xD3C VA: 0xD3C
	[FormerlySerializedAsAttribute] // RVA: 0xD3C Offset: 0xD3C VA: 0xD3C
	[SerializeField] // RVA: 0xD3C Offset: 0xD3C VA: 0xD3C
	private InputField.SubmitEvent m_OnEndEdit; // 0xC0
	[FormerlySerializedAsAttribute] // RVA: 0xD3D Offset: 0xD3D VA: 0xD3D
	[FormerlySerializedAsAttribute] // RVA: 0xD3D Offset: 0xD3D VA: 0xD3D
	[SerializeField] // RVA: 0xD3D Offset: 0xD3D VA: 0xD3D
	private InputField.OnChangeEvent m_OnValueChanged; // 0xC4
	[FormerlySerializedAsAttribute] // RVA: 0xD3E Offset: 0xD3E VA: 0xD3E
	[SerializeField] // RVA: 0xD3E Offset: 0xD3E VA: 0xD3E
	private InputField.OnValidateInput m_OnValidateInput; // 0xC8
	[FormerlySerializedAsAttribute] // RVA: 0xD3F Offset: 0xD3F VA: 0xD3F
	[SerializeField] // RVA: 0xD3F Offset: 0xD3F VA: 0xD3F
	private Color m_CaretColor; // 0xCC
	[SerializeField] // RVA: 0xD40 Offset: 0xD40 VA: 0xD40
	private bool m_CustomCaretColor; // 0xDC
	[SerializeField] // RVA: 0xD41 Offset: 0xD41 VA: 0xD41
	private Color m_SelectionColor; // 0xE0
	[SerializeField] // RVA: 0xD42 Offset: 0xD42 VA: 0xD42
	[FormerlySerializedAsAttribute] // RVA: 0xD42 Offset: 0xD42 VA: 0xD42
	protected string m_Text; // 0xF0
	[SerializeField] // RVA: 0xD43 Offset: 0xD43 VA: 0xD43
	[RangeAttribute] // RVA: 0xD43 Offset: 0xD43 VA: 0xD43
	private float m_CaretBlinkRate; // 0xF4
	[SerializeField] // RVA: 0xD44 Offset: 0xD44 VA: 0xD44
	[RangeAttribute] // RVA: 0xD44 Offset: 0xD44 VA: 0xD44
	private int m_CaretWidth; // 0xF8
	[SerializeField] // RVA: 0xD45 Offset: 0xD45 VA: 0xD45
	private bool m_ReadOnly; // 0xFC
	protected int m_CaretPosition; // 0x100
	protected int m_CaretSelectPosition; // 0x104
	private RectTransform caretRectTrans; // 0x108
	protected UIVertex[] m_CursorVerts; // 0x10C
	private TextGenerator m_InputTextCache; // 0x110
	private CanvasRenderer m_CachedInputRenderer; // 0x114
	private bool m_PreventFontCallback; // 0x118
	protected Mesh m_Mesh; // 0x11C
	private bool m_AllowInput; // 0x120
	private bool m_ShouldActivateNextUpdate; // 0x121
	private bool m_UpdateDrag; // 0x122
	private bool m_DragPositionOutOfBounds; // 0x123
	private const float kHScrollSpeed = 0.05;
	private const float kVScrollSpeed = 0.1;
	protected bool m_CaretVisible; // 0x124
	private Coroutine m_BlinkCoroutine; // 0x128
	private float m_BlinkStartTime; // 0x12C
	protected int m_DrawStart; // 0x130
	protected int m_DrawEnd; // 0x134
	private Coroutine m_DragCoroutine; // 0x138
	private string m_OriginalText; // 0x13C
	private bool m_WasCanceled; // 0x140
	private bool m_HasDoneFocusTransition; // 0x141
	private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x144
	private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~";
	private Event m_ProcessingEvent; // 0x148
	private const int k_MaxTextLength = 16382;

	// Properties
	private BaseInput input { get; }
	private string compositionString { get; }
	protected Mesh mesh { get; }
	protected TextGenerator cachedInputTextGenerator { get; }
	public bool shouldHideMobileInput { get; set; }
	private bool shouldActivateOnSelect { get; }
	public string text { get; set; }
	public bool isFocused { get; }
	public float caretBlinkRate { get; set; }
	public int caretWidth { get; set; }
	public Text textComponent { get; set; }
	public Graphic placeholder { get; set; }
	public Color caretColor { get; set; }
	public bool customCaretColor { get; set; }
	public Color selectionColor { get; set; }
	public InputField.SubmitEvent onEndEdit { get; set; }
	[ObsoleteAttribute] // RVA: 0xE3F Offset: 0xE3F VA: 0xE3F
	public InputField.OnChangeEvent onValueChange { get; set; }
	public InputField.OnChangeEvent onValueChanged { get; set; }
	public InputField.OnValidateInput onValidateInput { get; set; }
	public int characterLimit { get; set; }
	public InputField.ContentType contentType { get; set; }
	public InputField.LineType lineType { get; set; }
	public InputField.InputType inputType { get; set; }
	public TouchScreenKeyboard touchScreenKeyboard { get; }
	public TouchScreenKeyboardType keyboardType { get; set; }
	public InputField.CharacterValidation characterValidation { get; set; }
	public bool readOnly { get; set; }
	public bool multiLine { get; }
	public char asteriskChar { get; set; }
	public bool wasCanceled { get; }
	protected int caretPositionInternal { get; set; }
	protected int caretSelectPositionInternal { get; set; }
	private bool hasSelection { get; }
	public int caretPosition { get; set; }
	public int selectionAnchorPosition { get; set; }
	public int selectionFocusPosition { get; set; }
	private static string clipboard { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x7FA Offset: 0x7FA VA: 0x7FA
	protected void .ctor() { }

	// RVA: 0xC52 Offset: 0xC52 VA: 0xC52
	private BaseInput get_input() { }

	// RVA: 0xC53 Offset: 0xC53 VA: 0xC53
	private string get_compositionString() { }

	// RVA: 0xC54 Offset: 0xC54 VA: 0xC54
	protected Mesh get_mesh() { }

	// RVA: 0xC55 Offset: 0xC55 VA: 0xC55
	protected TextGenerator get_cachedInputTextGenerator() { }

	// RVA: 0x71F Offset: 0x71F VA: 0x71F
	public void set_shouldHideMobileInput(bool value) { }

	// RVA: 0xC56 Offset: 0xC56 VA: 0xC56
	public bool get_shouldHideMobileInput() { }

	// RVA: 0xC57 Offset: 0xC57 VA: 0xC57
	private bool get_shouldActivateOnSelect() { }

	// RVA: 0xC58 Offset: 0xC58 VA: 0xC58
	public string get_text() { }

	// RVA: 0x720 Offset: 0x720 VA: 0x720
	public void set_text(string value) { }

	// RVA: 0xC59 Offset: 0xC59 VA: 0xC59
	public bool get_isFocused() { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	public float get_caretBlinkRate() { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	public void set_caretBlinkRate(float value) { }

	// RVA: 0xC5A Offset: 0xC5A VA: 0xC5A
	public int get_caretWidth() { }

	// RVA: 0x721 Offset: 0x721 VA: 0x721
	public void set_caretWidth(int value) { }

	// RVA: 0xC5B Offset: 0xC5B VA: 0xC5B
	public Text get_textComponent() { }

	// RVA: 0x722 Offset: 0x722 VA: 0x722
	public void set_textComponent(Text value) { }

	// RVA: 0xC5C Offset: 0xC5C VA: 0xC5C
	public Graphic get_placeholder() { }

	// RVA: 0x723 Offset: 0x723 VA: 0x723
	public void set_placeholder(Graphic value) { }

	// RVA: 0x724 Offset: 0x724 VA: 0x724
	public Color get_caretColor() { }

	// RVA: 0x725 Offset: 0x725 VA: 0x725
	public void set_caretColor(Color value) { }

	// RVA: 0xC5D Offset: 0xC5D VA: 0xC5D
	public bool get_customCaretColor() { }

	// RVA: 0x726 Offset: 0x726 VA: 0x726
	public void set_customCaretColor(bool value) { }

	// RVA: 0x727 Offset: 0x727 VA: 0x727
	public Color get_selectionColor() { }

	// RVA: 0x728 Offset: 0x728 VA: 0x728
	public void set_selectionColor(Color value) { }

	// RVA: 0xC5E Offset: 0xC5E VA: 0xC5E
	public InputField.SubmitEvent get_onEndEdit() { }

	// RVA: 0x729 Offset: 0x729 VA: 0x729
	public void set_onEndEdit(InputField.SubmitEvent value) { }

	// RVA: 0xC5F Offset: 0xC5F VA: 0xC5F
	public InputField.OnChangeEvent get_onValueChange() { }

	// RVA: 0x72A Offset: 0x72A VA: 0x72A
	public void set_onValueChange(InputField.OnChangeEvent value) { }

	// RVA: 0xC60 Offset: 0xC60 VA: 0xC60
	public InputField.OnChangeEvent get_onValueChanged() { }

	// RVA: 0x72B Offset: 0x72B VA: 0x72B
	public void set_onValueChanged(InputField.OnChangeEvent value) { }

	// RVA: 0xC61 Offset: 0xC61 VA: 0xC61
	public InputField.OnValidateInput get_onValidateInput() { }

	// RVA: 0x72C Offset: 0x72C VA: 0x72C
	public void set_onValidateInput(InputField.OnValidateInput value) { }

	// RVA: 0xC62 Offset: 0xC62 VA: 0xC62
	public int get_characterLimit() { }

	// RVA: 0x72D Offset: 0x72D VA: 0x72D
	public void set_characterLimit(int value) { }

	// RVA: 0xC63 Offset: 0xC63 VA: 0xC63
	public InputField.ContentType get_contentType() { }

	// RVA: 0x72E Offset: 0x72E VA: 0x72E
	public void set_contentType(InputField.ContentType value) { }

	// RVA: 0xC64 Offset: 0xC64 VA: 0xC64
	public InputField.LineType get_lineType() { }

	// RVA: 0x72F Offset: 0x72F VA: 0x72F
	public void set_lineType(InputField.LineType value) { }

	// RVA: 0xC65 Offset: 0xC65 VA: 0xC65
	public InputField.InputType get_inputType() { }

	// RVA: 0x730 Offset: 0x730 VA: 0x730
	public void set_inputType(InputField.InputType value) { }

	// RVA: 0xC66 Offset: 0xC66 VA: 0xC66
	public TouchScreenKeyboard get_touchScreenKeyboard() { }

	// RVA: 0xC67 Offset: 0xC67 VA: 0xC67
	public TouchScreenKeyboardType get_keyboardType() { }

	// RVA: 0x731 Offset: 0x731 VA: 0x731
	public void set_keyboardType(TouchScreenKeyboardType value) { }

	// RVA: 0xC68 Offset: 0xC68 VA: 0xC68
	public InputField.CharacterValidation get_characterValidation() { }

	// RVA: 0x732 Offset: 0x732 VA: 0x732
	public void set_characterValidation(InputField.CharacterValidation value) { }

	// RVA: 0xC69 Offset: 0xC69 VA: 0xC69
	public bool get_readOnly() { }

	// RVA: 0x733 Offset: 0x733 VA: 0x733
	public void set_readOnly(bool value) { }

	// RVA: 0xC6A Offset: 0xC6A VA: 0xC6A
	public bool get_multiLine() { }

	// RVA: 0xC6B Offset: 0xC6B VA: 0xC6B
	public char get_asteriskChar() { }

	// RVA: 0x734 Offset: 0x734 VA: 0x734
	public void set_asteriskChar(char value) { }

	// RVA: 0xC6C Offset: 0xC6C VA: 0xC6C
	public bool get_wasCanceled() { }

	// RVA: 0x735 Offset: 0x735 VA: 0x735
	protected void ClampPos(ref int pos) { }

	// RVA: 0xC6D Offset: 0xC6D VA: 0xC6D
	protected int get_caretPositionInternal() { }

	// RVA: 0x736 Offset: 0x736 VA: 0x736
	protected void set_caretPositionInternal(int value) { }

	// RVA: 0xC6E Offset: 0xC6E VA: 0xC6E
	protected int get_caretSelectPositionInternal() { }

	// RVA: 0x737 Offset: 0x737 VA: 0x737
	protected void set_caretSelectPositionInternal(int value) { }

	// RVA: 0xC6F Offset: 0xC6F VA: 0xC6F
	private bool get_hasSelection() { }

	// RVA: 0xC70 Offset: 0xC70 VA: 0xC70
	public int get_caretPosition() { }

	// RVA: 0x738 Offset: 0x738 VA: 0x738
	public void set_caretPosition(int value) { }

	// RVA: 0xC71 Offset: 0xC71 VA: 0xC71
	public int get_selectionAnchorPosition() { }

	// RVA: 0x739 Offset: 0x739 VA: 0x739
	public void set_selectionAnchorPosition(int value) { }

	// RVA: 0xC72 Offset: 0xC72 VA: 0xC72
	public int get_selectionFocusPosition() { }

	// RVA: 0x73A Offset: 0x73A VA: 0x73A
	public void set_selectionFocusPosition(int value) { }

	// RVA: 0x7FB Offset: 0x7FB VA: 0x7FB Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x7FC Offset: 0x7FC VA: 0x7FC Slot: 7
	protected override void OnDisable() { }

	[DebuggerHiddenAttribute] // RVA: 0xDEE Offset: 0xDEE VA: 0xDEE
	// RVA: 0xC73 Offset: 0xC73 VA: 0xC73
	private IEnumerator CaretBlink() { }

	// RVA: 0x7FD Offset: 0x7FD VA: 0x7FD
	private void SetCaretVisible() { }

	// RVA: 0x7FE Offset: 0x7FE VA: 0x7FE
	private void SetCaretActive() { }

	// RVA: 0x7FF Offset: 0x7FF VA: 0x7FF
	private void UpdateCaretMaterial() { }

	// RVA: 0x800 Offset: 0x800 VA: 0x800
	protected void OnFocus() { }

	// RVA: 0x801 Offset: 0x801 VA: 0x801
	protected void SelectAll() { }

	// RVA: 0x73B Offset: 0x73B VA: 0x73B
	public void MoveTextEnd(bool shift) { }

	// RVA: 0x73C Offset: 0x73C VA: 0x73C
	public void MoveTextStart(bool shift) { }

	// RVA: 0x2A0 Offset: 0x2A0 VA: 0x2A0
	private static string get_clipboard() { }

	// RVA: 0x802 Offset: 0x802 VA: 0x802
	private static void set_clipboard(string value) { }

	// RVA: 0xC74 Offset: 0xC74 VA: 0xC74
	private bool InPlaceEditing() { }

	// RVA: 0x803 Offset: 0x803 VA: 0x803
	private void UpdateCaretFromKeyboard() { }

	// RVA: 0x804 Offset: 0x804 VA: 0x804 Slot: 59
	protected virtual void LateUpdate() { }

	[ObsoleteAttribute] // RVA: 0xDEF Offset: 0xDEF VA: 0xDEF
	// RVA: 0x3B3 Offset: 0x3B3 VA: 0x3B3
	public Vector2 ScreenToLocal(Vector2 screen) { }

	// RVA: 0xA30 Offset: 0xA30 VA: 0xA30
	private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator) { }

	// RVA: 0x5FC Offset: 0x5FC VA: 0x5FC
	protected int GetCharacterIndexFromPosition(Vector2 pos) { }

	// RVA: 0x5FD Offset: 0x5FD VA: 0x5FD
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x73D Offset: 0x73D VA: 0x73D Slot: 60
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x73E Offset: 0x73E VA: 0x73E Slot: 61
	public virtual void OnDrag(PointerEventData eventData) { }

	[DebuggerHiddenAttribute] // RVA: 0xDF0 Offset: 0xDF0 VA: 0xDF0
	// RVA: 0x5FE Offset: 0x5FE VA: 0x5FE
	private IEnumerator MouseDragOutsideRect(PointerEventData eventData) { }

	// RVA: 0x73F Offset: 0x73F VA: 0x73F Slot: 62
	public virtual void OnEndDrag(PointerEventData eventData) { }

	// RVA: 0x740 Offset: 0x740 VA: 0x740 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x5FF Offset: 0x5FF VA: 0x5FF
	protected InputField.EditState KeyPressed(Event evt) { }

	// RVA: 0x600 Offset: 0x600 VA: 0x600
	private bool IsValidChar(char c) { }

	// RVA: 0x741 Offset: 0x741 VA: 0x741
	public void ProcessEvent(Event e) { }

	// RVA: 0x742 Offset: 0x742 VA: 0x742 Slot: 63
	public virtual void OnUpdateSelected(BaseEventData eventData) { }

	// RVA: 0xC75 Offset: 0xC75 VA: 0xC75
	private string GetSelectedString() { }

	// RVA: 0xC76 Offset: 0xC76 VA: 0xC76
	private int FindtNextWordBegin() { }

	// RVA: 0x3B4 Offset: 0x3B4 VA: 0x3B4
	private void MoveRight(bool shift, bool ctrl) { }

	// RVA: 0xC77 Offset: 0xC77 VA: 0xC77
	private int FindtPrevWordBegin() { }

	// RVA: 0x3B5 Offset: 0x3B5 VA: 0x3B5
	private void MoveLeft(bool shift, bool ctrl) { }

	// RVA: 0xA31 Offset: 0xA31 VA: 0xA31
	private int DetermineCharacterLine(int charPos, TextGenerator generator) { }

	// RVA: 0xA32 Offset: 0xA32 VA: 0xA32
	private int LineUpCharacterPosition(int originalPos, bool goToFirstChar) { }

	// RVA: 0xA33 Offset: 0xA33 VA: 0xA33
	private int LineDownCharacterPosition(int originalPos, bool goToLastChar) { }

	// RVA: 0x743 Offset: 0x743 VA: 0x743
	private void MoveDown(bool shift) { }

	// RVA: 0x3B6 Offset: 0x3B6 VA: 0x3B6
	private void MoveDown(bool shift, bool goToLastChar) { }

	// RVA: 0x744 Offset: 0x744 VA: 0x744
	private void MoveUp(bool shift) { }

	// RVA: 0x3B7 Offset: 0x3B7 VA: 0x3B7
	private void MoveUp(bool shift, bool goToFirstChar) { }

	// RVA: 0x805 Offset: 0x805 VA: 0x805
	private void Delete() { }

	// RVA: 0x806 Offset: 0x806 VA: 0x806
	private void ForwardSpace() { }

	// RVA: 0x807 Offset: 0x807 VA: 0x807
	private void Backspace() { }

	// RVA: 0x745 Offset: 0x745 VA: 0x745
	private void Insert(char c) { }

	// RVA: 0x808 Offset: 0x808 VA: 0x808
	private void SendOnValueChangedAndUpdateLabel() { }

	// RVA: 0x809 Offset: 0x809 VA: 0x809
	private void SendOnValueChanged() { }

	// RVA: 0x80A Offset: 0x80A VA: 0x80A
	protected void SendOnSubmit() { }

	// RVA: 0x746 Offset: 0x746 VA: 0x746 Slot: 64
	protected virtual void Append(string input) { }

	// RVA: 0x747 Offset: 0x747 VA: 0x747 Slot: 65
	protected virtual void Append(char input) { }

	// RVA: 0x80B Offset: 0x80B VA: 0x80B
	protected void UpdateLabel() { }

	// RVA: 0xC78 Offset: 0xC78 VA: 0xC78
	private bool IsSelectionVisible() { }

	// RVA: 0x601 Offset: 0x601 VA: 0x601
	private static int GetLineStartPosition(TextGenerator gen, int line) { }

	// RVA: 0x602 Offset: 0x602 VA: 0x602
	private static int GetLineEndPosition(TextGenerator gen, int line) { }

	// RVA: 0x748 Offset: 0x748 VA: 0x748
	private void SetDrawRangeToContainCaretPosition(int caretPos) { }

	// RVA: 0x80C Offset: 0x80C VA: 0x80C
	public void ForceLabelUpdate() { }

	// RVA: 0x80D Offset: 0x80D VA: 0x80D
	private void MarkGeometryAsDirty() { }

	// RVA: 0x749 Offset: 0x749 VA: 0x749 Slot: 66
	public virtual void Rebuild(CanvasUpdate update) { }

	// RVA: 0x80E Offset: 0x80E VA: 0x80E Slot: 67
	public virtual void LayoutComplete() { }

	// RVA: 0x80F Offset: 0x80F VA: 0x80F Slot: 68
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x810 Offset: 0x810 VA: 0x810
	private void UpdateGeometry() { }

	// RVA: 0x811 Offset: 0x811 VA: 0x811
	private void AssignPositioningIfNeeded() { }

	// RVA: 0x74A Offset: 0x74A VA: 0x74A
	private void OnFillVBO(Mesh vbo) { }

	// RVA: 0x3B8 Offset: 0x3B8 VA: 0x3B8
	private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset) { }

	// RVA: 0x812 Offset: 0x812 VA: 0x812
	private void CreateCursorVerts() { }

	// RVA: 0x3B9 Offset: 0x3B9 VA: 0x3B9
	private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset) { }

	// RVA: 0x14E Offset: 0x14E VA: 0x14E
	protected char Validate(string text, int pos, char ch) { }

	// RVA: 0x813 Offset: 0x813 VA: 0x813
	public void ActivateInputField() { }

	// RVA: 0x814 Offset: 0x814 VA: 0x814
	private void ActivateInputFieldInternal() { }

	// RVA: 0x74B Offset: 0x74B VA: 0x74B Slot: 36
	public override void OnSelect(BaseEventData eventData) { }

	// RVA: 0x74C Offset: 0x74C VA: 0x74C Slot: 69
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x815 Offset: 0x815 VA: 0x815
	public void DeactivateInputField() { }

	// RVA: 0x74D Offset: 0x74D VA: 0x74D Slot: 37
	public override void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x74E Offset: 0x74E VA: 0x74E Slot: 70
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x816 Offset: 0x816 VA: 0x816
	private void EnforceContentType() { }

	// RVA: 0x817 Offset: 0x817 VA: 0x817
	private void EnforceTextHOverflow() { }

	// RVA: 0x74F Offset: 0x74F VA: 0x74F
	private void SetToCustomIfContentTypeIsNot(InputField.ContentType[] allowedContentTypes) { }

	// RVA: 0x818 Offset: 0x818 VA: 0x818
	private void SetToCustom() { }

	// RVA: 0x3BA Offset: 0x3BA VA: 0x3BA Slot: 26
	protected override void DoStateTransition(Selectable.SelectionState state, bool instant) { }

	// RVA: 0x819 Offset: 0x819 VA: 0x819 Slot: 71
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x81A Offset: 0x81A VA: 0x81A Slot: 72
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x4E Offset: 0x4E VA: 0x4E Slot: 73
	public virtual float get_minWidth() { }

	// RVA: 0x4F Offset: 0x4F VA: 0x4F Slot: 74
	public virtual float get_preferredWidth() { }

	// RVA: 0x50 Offset: 0x50 VA: 0x50 Slot: 75
	public virtual float get_flexibleWidth() { }

	// RVA: 0x51 Offset: 0x51 VA: 0x51 Slot: 76
	public virtual float get_minHeight() { }

	// RVA: 0x52 Offset: 0x52 VA: 0x52 Slot: 77
	public virtual float get_preferredHeight() { }

	// RVA: 0x53 Offset: 0x53 VA: 0x53 Slot: 78
	public virtual float get_flexibleHeight() { }

	// RVA: 0xC79 Offset: 0xC79 VA: 0xC79 Slot: 79
	public virtual int get_layoutPriority() { }

	// RVA: 0xF7F Offset: 0xF7F VA: 0xF7F
	private static void .cctor() { }

	// RVA: 0xC7A Offset: 0xC7A VA: 0xC7A Slot: 46
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum InputField.ContentType // TypeDefIndex: 2235
{
	// Fields
	public int value__; // 0x0
	public const InputField.ContentType Standard = 0;
	public const InputField.ContentType Autocorrected = 1;
	public const InputField.ContentType IntegerNumber = 2;
	public const InputField.ContentType DecimalNumber = 3;
	public const InputField.ContentType Alphanumeric = 4;
	public const InputField.ContentType Name = 5;
	public const InputField.ContentType EmailAddress = 6;
	public const InputField.ContentType Password = 7;
	public const InputField.ContentType Pin = 8;
	public const InputField.ContentType Custom = 9;
}

// Namespace: 
public enum InputField.InputType // TypeDefIndex: 2236
{
	// Fields
	public int value__; // 0x0
	public const InputField.InputType Standard = 0;
	public const InputField.InputType AutoCorrect = 1;
	public const InputField.InputType Password = 2;
}

// Namespace: 
public enum InputField.CharacterValidation // TypeDefIndex: 2237
{
	// Fields
	public int value__; // 0x0
	public const InputField.CharacterValidation None = 0;
	public const InputField.CharacterValidation Integer = 1;
	public const InputField.CharacterValidation Decimal = 2;
	public const InputField.CharacterValidation Alphanumeric = 3;
	public const InputField.CharacterValidation Name = 4;
	public const InputField.CharacterValidation EmailAddress = 5;
}

// Namespace: 
public enum InputField.LineType // TypeDefIndex: 2238
{
	// Fields
	public int value__; // 0x0
	public const InputField.LineType SingleLine = 0;
	public const InputField.LineType MultiLineSubmit = 1;
	public const InputField.LineType MultiLineNewline = 2;
}

// Namespace: 
public sealed class InputField.OnValidateInput : MulticastDelegate // TypeDefIndex: 2239
{
	// Methods

	// RVA: 0x3BB Offset: 0x3BB VA: 0x3BB
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x14F Offset: 0x14F VA: 0x14F Slot: 12
	public virtual char Invoke(string text, int charIndex, char addedChar) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D Slot: 13
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object) { }

	// RVA: 0x603 Offset: 0x603 VA: 0x603 Slot: 14
	public virtual char EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
public class InputField.SubmitEvent : UnityEvent<string> // TypeDefIndex: 2240
{
	// Methods

	// RVA: 0x822 Offset: 0x822 VA: 0x822
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class InputField.OnChangeEvent : UnityEvent<string> // TypeDefIndex: 2241
{
	// Methods

	// RVA: 0x821 Offset: 0x821 VA: 0x821
	public void .ctor() { }
}

// Namespace: 
protected enum InputField.EditState // TypeDefIndex: 2242
{
	// Fields
	public int value__; // 0x0
	public const InputField.EditState Continue = 0;
	public const InputField.EditState Finish = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCBB Offset: 0xCBB VA: 0xCBB
private sealed class InputField.<CaretBlink>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2243
{
	// Fields
	internal float <blinkPeriod>__1; // 0x8
	internal bool <blinkState>__1; // 0xC
	internal InputField $this; // 0x10
	internal object $current; // 0x14
	internal bool $disposing; // 0x18
	internal int $PC; // 0x1C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE22 Offset: 0xE22 VA: 0xE22
	// RVA: 0x81B Offset: 0x81B VA: 0x81B
	public void .ctor() { }

	// RVA: 0xC7B Offset: 0xC7B VA: 0xC7B Slot: 4
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xE23 Offset: 0xE23 VA: 0xE23
	// RVA: 0xC7C Offset: 0xC7C VA: 0xC7C Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE24 Offset: 0xE24 VA: 0xE24
	// RVA: 0xC7D Offset: 0xC7D VA: 0xC7D Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE25 Offset: 0xE25 VA: 0xE25
	// RVA: 0x81C Offset: 0x81C VA: 0x81C Slot: 6
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xE26 Offset: 0xE26 VA: 0xE26
	// RVA: 0x81D Offset: 0x81D VA: 0x81D Slot: 8
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCBC Offset: 0xCBC VA: 0xCBC
private sealed class InputField.<MouseDragOutsideRect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2244
{
	// Fields
	internal Vector2 <position>__1; // 0x8
	internal PointerEventData eventData; // 0x10
	internal Vector2 <localMousePos>__1; // 0x14
	internal Rect <rect>__1; // 0x1C
	internal float <delay>__1; // 0x2C
	internal InputField $this; // 0x30
	internal object $current; // 0x34
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE27 Offset: 0xE27 VA: 0xE27
	// RVA: 0x81E Offset: 0x81E VA: 0x81E
	public void .ctor() { }

	// RVA: 0xC7E Offset: 0xC7E VA: 0xC7E Slot: 4
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xE28 Offset: 0xE28 VA: 0xE28
	// RVA: 0xC7F Offset: 0xC7F VA: 0xC7F Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE29 Offset: 0xE29 VA: 0xE29
	// RVA: 0xC80 Offset: 0xC80 VA: 0xC80 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE2A Offset: 0xE2A VA: 0xE2A
	// RVA: 0x81F Offset: 0x81F VA: 0x81F Slot: 6
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xE2B Offset: 0xE2B VA: 0xE2B
	// RVA: 0x820 Offset: 0x820 VA: 0x820 Slot: 8
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC9C Offset: 0xC9C VA: 0xC9C
[ExecuteAlways] // RVA: 0xC9C Offset: 0xC9C VA: 0xC9C
[RequireComponent] // RVA: 0xC9C Offset: 0xC9C VA: 0xC9C
[DisallowMultipleComponent] // RVA: 0xC9C Offset: 0xC9C VA: 0xC9C
public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 2245
{
	// Fields
	private RectTransform m_RectTransform; // 0xC
	[SerializeField] // RVA: 0xD46 Offset: 0xD46 VA: 0xD46
	private bool m_ShowMaskGraphic; // 0x10
	private Graphic m_Graphic; // 0x14
	private Material m_MaskMaterial; // 0x18
	private Material m_UnmaskMaterial; // 0x1C

	// Properties
	public RectTransform rectTransform { get; }
	public bool showMaskGraphic { get; set; }
	public Graphic graphic { get; }

	// Methods

	// RVA: 0x845 Offset: 0x845 VA: 0x845
	protected void .ctor() { }

	// RVA: 0xC91 Offset: 0xC91 VA: 0xC91
	public RectTransform get_rectTransform() { }

	// RVA: 0xC92 Offset: 0xC92 VA: 0xC92
	public bool get_showMaskGraphic() { }

	// RVA: 0x756 Offset: 0x756 VA: 0x756
	public void set_showMaskGraphic(bool value) { }

	// RVA: 0xC93 Offset: 0xC93 VA: 0xC93
	public Graphic get_graphic() { }

	// RVA: 0xC94 Offset: 0xC94 VA: 0xC94 Slot: 19
	public virtual bool MaskEnabled() { }

	[ObsoleteAttribute] // RVA: 0xDF1 Offset: 0xDF1 VA: 0xDF1
	// RVA: 0x846 Offset: 0x846 VA: 0x846 Slot: 20
	public virtual void OnSiblingGraphicEnabledDisabled() { }

	// RVA: 0x847 Offset: 0x847 VA: 0x847 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x848 Offset: 0x848 VA: 0x848 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0xA34 Offset: 0xA34 VA: 0xA34 Slot: 21
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x607 Offset: 0x607 VA: 0x607 Slot: 22
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }
}

// Namespace: UnityEngine.UI
public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 2246
{
	// Fields
	protected bool m_ShouldRecalculateStencil; // 0x45
	protected Material m_MaskMaterial; // 0x48
	private RectMask2D m_ParentMask; // 0x4C
	private bool m_Maskable; // 0x50
	[EditorBrowsableAttribute] // RVA: 0xD47 Offset: 0xD47 VA: 0xD47
	[ObsoleteAttribute] // RVA: 0xD47 Offset: 0xD47 VA: 0xD47
	protected bool m_IncludeForMasking; // 0x51
	[SerializeField] // RVA: 0xD48 Offset: 0xD48 VA: 0xD48
	private MaskableGraphic.CullStateChangedEvent m_OnCullStateChanged; // 0x54
	[EditorBrowsableAttribute] // RVA: 0xD49 Offset: 0xD49 VA: 0xD49
	[ObsoleteAttribute] // RVA: 0xD49 Offset: 0xD49 VA: 0xD49
	protected bool m_ShouldRecalculate; // 0x58
	protected int m_StencilValue; // 0x5C
	private readonly Vector3[] m_Corners; // 0x60

	// Properties
	public MaskableGraphic.CullStateChangedEvent onCullStateChanged { get; set; }
	public bool maskable { get; set; }
	private Rect rootCanvasRect { get; }

	// Methods

	// RVA: 0x84C Offset: 0x84C VA: 0x84C
	protected void .ctor() { }

	// RVA: 0xC97 Offset: 0xC97 VA: 0xC97
	public MaskableGraphic.CullStateChangedEvent get_onCullStateChanged() { }

	// RVA: 0x758 Offset: 0x758 VA: 0x758
	public void set_onCullStateChanged(MaskableGraphic.CullStateChangedEvent value) { }

	// RVA: 0xC98 Offset: 0xC98 VA: 0xC98
	public bool get_maskable() { }

	// RVA: 0x759 Offset: 0x759 VA: 0x759
	public void set_maskable(bool value) { }

	// RVA: 0x60A Offset: 0x60A VA: 0x60A Slot: 57
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }

	// RVA: 0x3BE Offset: 0x3BE VA: 0x3BE Slot: 58
	public virtual void Cull(Rect clipRect, bool validRect) { }

	// RVA: 0x75A Offset: 0x75A VA: 0x75A
	private void UpdateCull(bool cull) { }

	// RVA: 0x3BF Offset: 0x3BF VA: 0x3BF Slot: 59
	public virtual void SetClipRect(Rect clipRect, bool validRect) { }

	// RVA: 0x84D Offset: 0x84D VA: 0x84D Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x84E Offset: 0x84E VA: 0x84E Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x84F Offset: 0x84F VA: 0x84F Slot: 12
	protected override void OnTransformParentChanged() { }

	[EditorBrowsableAttribute] // RVA: 0xDF2 Offset: 0xDF2 VA: 0xDF2
	[ObsoleteAttribute] // RVA: 0xDF2 Offset: 0xDF2 VA: 0xDF2
	// RVA: 0x850 Offset: 0x850 VA: 0x850 Slot: 60
	public virtual void ParentMaskStateChanged() { }

	// RVA: 0x851 Offset: 0x851 VA: 0x851 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }

	// RVA: 0x75B Offset: 0x75B VA: 0x75B
	private Rect get_rootCanvasRect() { }

	// RVA: 0x852 Offset: 0x852 VA: 0x852
	private void UpdateClipParent() { }

	// RVA: 0x853 Offset: 0x853 VA: 0x853 Slot: 61
	public virtual void RecalculateClipping() { }

	// RVA: 0x854 Offset: 0x854 VA: 0x854 Slot: 62
	public virtual void RecalculateMasking() { }

	// RVA: 0xC99 Offset: 0xC99 VA: 0xC99 Slot: 50
	private GameObject UnityEngine.UI.IClippable.get_gameObject() { }
}

// Namespace: 
[Serializable]
public class MaskableGraphic.CullStateChangedEvent : UnityEvent<bool> // TypeDefIndex: 2247
{
	// Methods

	// RVA: 0x855 Offset: 0x855 VA: 0x855
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
public class MaskUtilities // TypeDefIndex: 2248
{
	// Methods

	// RVA: 0x849 Offset: 0x849 VA: 0x849
	public void .ctor() { }

	// RVA: 0x84A Offset: 0x84A VA: 0x84A
	public static void Notify2DMaskStateChanged(Component mask) { }

	// RVA: 0x84B Offset: 0x84B VA: 0x84B
	public static void NotifyStencilStateChanged(Component mask) { }

	// RVA: 0xC95 Offset: 0xC95 VA: 0xC95
	public static Transform FindRootSortOverrideCanvas(Transform start) { }

	// RVA: 0x608 Offset: 0x608 VA: 0x608
	public static int GetStencilDepth(Transform transform, Transform stopAfter) { }

	// RVA: 0x609 Offset: 0x609 VA: 0x609
	public static bool IsDescendantOrSelf(Transform father, Transform child) { }

	// RVA: 0xC96 Offset: 0xC96 VA: 0xC96
	public static RectMask2D GetRectMaskForClippable(IClippable clippable) { }

	// RVA: 0x757 Offset: 0x757 VA: 0x757
	public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks) { }
}

// Namespace: UnityEngine.UI
internal static class Misc // TypeDefIndex: 2249
{
	// Methods

	// RVA: 0x856 Offset: 0x856 VA: 0x856
	public static void Destroy(Object obj) { }

	// RVA: 0x857 Offset: 0x857 VA: 0x857
	public static void DestroyImmediate(Object obj) { }
}

// Namespace: UnityEngine.UI
internal static class MultipleDisplayUtilities // TypeDefIndex: 2250
{
	// Methods

	// RVA: 0x60B Offset: 0x60B VA: 0x60B
	public static bool GetRelativeMousePositionForDrag(PointerEventData eventData, ref Vector2 position) { }

	// RVA: 0x858 Offset: 0x858 VA: 0x858
	public static Vector2 GetMousePositionRelativeToMainDisplayResolution() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public struct Navigation : IEquatable<Navigation> // TypeDefIndex: 2251
{
	// Fields
	[SerializeField] // RVA: 0xD4A Offset: 0xD4A VA: 0xD4A
	private Navigation.Mode m_Mode; // 0x0
	[SerializeField] // RVA: 0xD4B Offset: 0xD4B VA: 0xD4B
	private Selectable m_SelectOnUp; // 0x4
	[SerializeField] // RVA: 0xD4C Offset: 0xD4C VA: 0xD4C
	private Selectable m_SelectOnDown; // 0x8
	[SerializeField] // RVA: 0xD4D Offset: 0xD4D VA: 0xD4D
	private Selectable m_SelectOnLeft; // 0xC
	[SerializeField] // RVA: 0xD4E Offset: 0xD4E VA: 0xD4E
	private Selectable m_SelectOnRight; // 0x10

	// Properties
	public Navigation.Mode mode { get; set; }
	public Selectable selectOnUp { get; set; }
	public Selectable selectOnDown { get; set; }
	public Selectable selectOnLeft { get; set; }
	public Selectable selectOnRight { get; set; }
	public static Navigation defaultNavigation { get; }

	// Methods

	// RVA: 0xC9A Offset: 0xC9A VA: 0xC9A
	public Navigation.Mode get_mode() { }

	// RVA: 0x75C Offset: 0x75C VA: 0x75C
	public void set_mode(Navigation.Mode value) { }

	// RVA: 0xC9B Offset: 0xC9B VA: 0xC9B
	public Selectable get_selectOnUp() { }

	// RVA: 0x75D Offset: 0x75D VA: 0x75D
	public void set_selectOnUp(Selectable value) { }

	// RVA: 0xC9C Offset: 0xC9C VA: 0xC9C
	public Selectable get_selectOnDown() { }

	// RVA: 0x75E Offset: 0x75E VA: 0x75E
	public void set_selectOnDown(Selectable value) { }

	// RVA: 0xC9D Offset: 0xC9D VA: 0xC9D
	public Selectable get_selectOnLeft() { }

	// RVA: 0x75F Offset: 0x75F VA: 0x75F
	public void set_selectOnLeft(Selectable value) { }

	// RVA: 0xC9E Offset: 0xC9E VA: 0xC9E
	public Selectable get_selectOnRight() { }

	// RVA: 0x760 Offset: 0x760 VA: 0x760
	public void set_selectOnRight(Selectable value) { }

	// RVA: 0x859 Offset: 0x859 VA: 0x859
	public static Navigation get_defaultNavigation() { }

	// RVA: 0x60C Offset: 0x60C VA: 0x60C Slot: 4
	public bool Equals(Navigation other) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC9D Offset: 0xC9D VA: 0xC9D
public enum Navigation.Mode // TypeDefIndex: 2252
{
	// Fields
	public int value__; // 0x0
	public const Navigation.Mode None = 0;
	public const Navigation.Mode Horizontal = 1;
	public const Navigation.Mode Vertical = 2;
	public const Navigation.Mode Automatic = 3;
	public const Navigation.Mode Explicit = 4;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC9E Offset: 0xC9E VA: 0xC9E
public class RawImage : MaskableGraphic // TypeDefIndex: 2253
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xD4F Offset: 0xD4F VA: 0xD4F
	[SerializeField] // RVA: 0xD4F Offset: 0xD4F VA: 0xD4F
	private Texture m_Texture; // 0x64
	[SerializeField] // RVA: 0xD50 Offset: 0xD50 VA: 0xD50
	private Rect m_UVRect; // 0x68

	// Properties
	public override Texture mainTexture { get; }
	public Texture texture { get; set; }
	public Rect uvRect { get; set; }

	// Methods

	// RVA: 0x85C Offset: 0x85C VA: 0x85C
	protected void .ctor() { }

	// RVA: 0xC9F Offset: 0xC9F VA: 0xC9F Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0xCA0 Offset: 0xCA0 VA: 0xCA0
	public Texture get_texture() { }

	// RVA: 0x763 Offset: 0x763 VA: 0x763
	public void set_texture(Texture value) { }

	// RVA: 0x764 Offset: 0x764 VA: 0x764
	public Rect get_uvRect() { }

	// RVA: 0x765 Offset: 0x765 VA: 0x765
	public void set_uvRect(Rect value) { }

	// RVA: 0x85D Offset: 0x85D VA: 0x85D Slot: 45
	public override void SetNativeSize() { }

	// RVA: 0x766 Offset: 0x766 VA: 0x766 Slot: 44
	protected override void OnPopulateMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC9F Offset: 0xC9F VA: 0xC9F
[ExecuteAlways] // RVA: 0xC9F Offset: 0xC9F VA: 0xC9F
[DisallowMultipleComponent] // RVA: 0xC9F Offset: 0xC9F VA: 0xC9F
[RequireComponent] // RVA: 0xC9F Offset: 0xC9F VA: 0xC9F
public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter // TypeDefIndex: 2254
{
	// Fields
	private readonly RectangularVertexClipper m_VertexClipper; // 0xC
	private RectTransform m_RectTransform; // 0x10
	private HashSet<IClippable> m_ClipTargets; // 0x14
	private bool m_ShouldRecalculateClipRects; // 0x18
	private List<RectMask2D> m_Clippers; // 0x1C
	private Rect m_LastClipRectCanvasSpace; // 0x20
	private bool m_ForceClip; // 0x30
	private Canvas m_Canvas; // 0x34
	private Vector3[] m_Corners; // 0x38

	// Properties
	private Canvas Canvas { get; }
	public Rect canvasRect { get; }
	public RectTransform rectTransform { get; }
	private Rect rootCanvasRect { get; }

	// Methods

	// RVA: 0x85E Offset: 0x85E VA: 0x85E
	protected void .ctor() { }

	// RVA: 0xCA1 Offset: 0xCA1 VA: 0xCA1
	private Canvas get_Canvas() { }

	// RVA: 0x767 Offset: 0x767 VA: 0x767
	public Rect get_canvasRect() { }

	// RVA: 0xCA2 Offset: 0xCA2 VA: 0xCA2
	public RectTransform get_rectTransform() { }

	// RVA: 0x85F Offset: 0x85F VA: 0x85F Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x860 Offset: 0x860 VA: 0x860 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0xA35 Offset: 0xA35 VA: 0xA35 Slot: 19
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x768 Offset: 0x768 VA: 0x768
	private Rect get_rootCanvasRect() { }

	// RVA: 0x861 Offset: 0x861 VA: 0x861 Slot: 20
	public virtual void PerformClipping() { }

	// RVA: 0x769 Offset: 0x769 VA: 0x769
	public void AddClippable(IClippable clippable) { }

	// RVA: 0x76A Offset: 0x76A VA: 0x76A
	public void RemoveClippable(IClippable clippable) { }

	// RVA: 0x862 Offset: 0x862 VA: 0x862 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x863 Offset: 0x863 VA: 0x863 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA0 Offset: 0xCA0 VA: 0xCA0
[RequireComponent] // RVA: 0xCA0 Offset: 0xCA0 VA: 0xCA0
public class Scrollbar : Selectable, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 2255
{
	// Fields
	[SerializeField] // RVA: 0xD51 Offset: 0xD51 VA: 0xD51
	private RectTransform m_HandleRect; // 0x94
	[SerializeField] // RVA: 0xD52 Offset: 0xD52 VA: 0xD52
	private Scrollbar.Direction m_Direction; // 0x98
	[RangeAttribute] // RVA: 0xD53 Offset: 0xD53 VA: 0xD53
	[SerializeField] // RVA: 0xD53 Offset: 0xD53 VA: 0xD53
	private float m_Value; // 0x9C
	[RangeAttribute] // RVA: 0xD54 Offset: 0xD54 VA: 0xD54
	[SerializeField] // RVA: 0xD54 Offset: 0xD54 VA: 0xD54
	private float m_Size; // 0xA0
	[RangeAttribute] // RVA: 0xD55 Offset: 0xD55 VA: 0xD55
	[SerializeField] // RVA: 0xD55 Offset: 0xD55 VA: 0xD55
	private int m_NumberOfSteps; // 0xA4
	[SpaceAttribute] // RVA: 0xD56 Offset: 0xD56 VA: 0xD56
	[SerializeField] // RVA: 0xD56 Offset: 0xD56 VA: 0xD56
	private Scrollbar.ScrollEvent m_OnValueChanged; // 0xA8
	private RectTransform m_ContainerRect; // 0xAC
	private Vector2 m_Offset; // 0xB0
	private DrivenRectTransformTracker m_Tracker; // 0xB8
	private Coroutine m_PointerDownRepeat; // 0xBC
	private bool isPointerDownAndNotDragging; // 0xC0

	// Properties
	public RectTransform handleRect { get; set; }
	public Scrollbar.Direction direction { get; set; }
	public float value { get; set; }
	public float size { get; set; }
	public int numberOfSteps { get; set; }
	public Scrollbar.ScrollEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Scrollbar.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods

	// RVA: 0x87B Offset: 0x87B VA: 0x87B
	protected void .ctor() { }

	// RVA: 0xCB5 Offset: 0xCB5 VA: 0xCB5
	public RectTransform get_handleRect() { }

	// RVA: 0x783 Offset: 0x783 VA: 0x783
	public void set_handleRect(RectTransform value) { }

	// RVA: 0xCB6 Offset: 0xCB6 VA: 0xCB6
	public Scrollbar.Direction get_direction() { }

	// RVA: 0x784 Offset: 0x784 VA: 0x784
	public void set_direction(Scrollbar.Direction value) { }

	// RVA: 0x7B Offset: 0x7B VA: 0x7B
	public float get_value() { }

	// RVA: 0x46 Offset: 0x46 VA: 0x46
	public void set_value(float value) { }

	// RVA: 0x7C Offset: 0x7C VA: 0x7C
	public float get_size() { }

	// RVA: 0x47 Offset: 0x47 VA: 0x47
	public void set_size(float value) { }

	// RVA: 0xCB7 Offset: 0xCB7 VA: 0xCB7
	public int get_numberOfSteps() { }

	// RVA: 0x785 Offset: 0x785 VA: 0x785
	public void set_numberOfSteps(int value) { }

	// RVA: 0xCB8 Offset: 0xCB8 VA: 0xCB8
	public Scrollbar.ScrollEvent get_onValueChanged() { }

	// RVA: 0x786 Offset: 0x786 VA: 0x786
	public void set_onValueChanged(Scrollbar.ScrollEvent value) { }

	// RVA: 0x7D Offset: 0x7D VA: 0x7D
	private float get_stepSize() { }

	// RVA: 0x787 Offset: 0x787 VA: 0x787 Slot: 47
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x87C Offset: 0x87C VA: 0x87C Slot: 48
	public virtual void LayoutComplete() { }

	// RVA: 0x87D Offset: 0x87D VA: 0x87D Slot: 49
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x87E Offset: 0x87E VA: 0x87E Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x87F Offset: 0x87F VA: 0x87F Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x880 Offset: 0x880 VA: 0x880
	private void UpdateCachedReferences() { }

	// RVA: 0x48 Offset: 0x48 VA: 0x48
	private void Set(float input) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private void Set(float input, bool sendCallback) { }

	// RVA: 0x881 Offset: 0x881 VA: 0x881 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0xCB9 Offset: 0xCB9 VA: 0xCB9
	private Scrollbar.Axis get_axis() { }

	// RVA: 0xCBA Offset: 0xCBA VA: 0xCBA
	private bool get_reverseValue() { }

	// RVA: 0x882 Offset: 0x882 VA: 0x882
	private void UpdateVisuals() { }

	// RVA: 0x788 Offset: 0x788 VA: 0x788
	private void UpdateDrag(PointerEventData eventData) { }

	// RVA: 0x611 Offset: 0x611 VA: 0x611
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x789 Offset: 0x789 VA: 0x789 Slot: 50
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x78A Offset: 0x78A VA: 0x78A Slot: 51
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x78B Offset: 0x78B VA: 0x78B Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	[DebuggerHiddenAttribute] // RVA: 0xDF3 Offset: 0xDF3 VA: 0xDF3
	// RVA: 0x612 Offset: 0x612 VA: 0x612
	protected IEnumerator ClickRepeat(PointerEventData eventData) { }

	// RVA: 0x78C Offset: 0x78C VA: 0x78C Slot: 33
	public override void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x78D Offset: 0x78D VA: 0x78D Slot: 31
	public override void OnMove(AxisEventData eventData) { }

	// RVA: 0xCBB Offset: 0xCBB VA: 0xCBB Slot: 27
	public override Selectable FindSelectableOnLeft() { }

	// RVA: 0xCBC Offset: 0xCBC VA: 0xCBC Slot: 28
	public override Selectable FindSelectableOnRight() { }

	// RVA: 0xCBD Offset: 0xCBD VA: 0xCBD Slot: 29
	public override Selectable FindSelectableOnUp() { }

	// RVA: 0xCBE Offset: 0xCBE VA: 0xCBE Slot: 30
	public override Selectable FindSelectableOnDown() { }

	// RVA: 0x78E Offset: 0x78E VA: 0x78E Slot: 52
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x3C9 Offset: 0x3C9 VA: 0x3C9
	public void SetDirection(Scrollbar.Direction direction, bool includeRectLayouts) { }

	// RVA: 0xCBF Offset: 0xCBF VA: 0xCBF Slot: 43
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Scrollbar.Direction // TypeDefIndex: 2256
{
	// Fields
	public int value__; // 0x0
	public const Scrollbar.Direction LeftToRight = 0;
	public const Scrollbar.Direction RightToLeft = 1;
	public const Scrollbar.Direction BottomToTop = 2;
	public const Scrollbar.Direction TopToBottom = 3;
}

// Namespace: 
[Serializable]
public class Scrollbar.ScrollEvent : UnityEvent<float> // TypeDefIndex: 2257
{
	// Methods

	// RVA: 0x886 Offset: 0x886 VA: 0x886
	public void .ctor() { }
}

// Namespace: 
private enum Scrollbar.Axis // TypeDefIndex: 2258
{
	// Fields
	public int value__; // 0x0
	public const Scrollbar.Axis Horizontal = 0;
	public const Scrollbar.Axis Vertical = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCBE Offset: 0xCBE VA: 0xCBE
private sealed class Scrollbar.<ClickRepeat>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2259
{
	// Fields
	internal PointerEventData eventData; // 0x8
	internal Scrollbar $this; // 0xC
	internal object $current; // 0x10
	internal bool $disposing; // 0x14
	internal int $PC; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE2C Offset: 0xE2C VA: 0xE2C
	// RVA: 0x883 Offset: 0x883 VA: 0x883
	public void .ctor() { }

	// RVA: 0xCC0 Offset: 0xCC0 VA: 0xCC0 Slot: 4
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xE2D Offset: 0xE2D VA: 0xE2D
	// RVA: 0xCC1 Offset: 0xCC1 VA: 0xCC1 Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE2E Offset: 0xE2E VA: 0xE2E
	// RVA: 0xCC2 Offset: 0xCC2 VA: 0xCC2 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE2F Offset: 0xE2F VA: 0xE2F
	// RVA: 0x884 Offset: 0x884 VA: 0x884 Slot: 6
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xE30 Offset: 0xE30 VA: 0xE30
	// RVA: 0x885 Offset: 0x885 VA: 0x885 Slot: 8
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA1 Offset: 0xCA1 VA: 0xCA1
[SelectionBaseAttribute] // RVA: 0xCA1 Offset: 0xCA1 VA: 0xCA1
[ExecuteAlways] // RVA: 0xCA1 Offset: 0xCA1 VA: 0xCA1
[DisallowMultipleComponent] // RVA: 0xCA1 Offset: 0xCA1 VA: 0xCA1
[RequireComponent] // RVA: 0xCA1 Offset: 0xCA1 VA: 0xCA1
public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup, IEventSystemHandler, ILayoutController // TypeDefIndex: 2260
{
	// Fields
	[SerializeField] // RVA: 0xD57 Offset: 0xD57 VA: 0xD57
	private RectTransform m_Content; // 0xC
	[SerializeField] // RVA: 0xD58 Offset: 0xD58 VA: 0xD58
	private bool m_Horizontal; // 0x10
	[SerializeField] // RVA: 0xD59 Offset: 0xD59 VA: 0xD59
	private bool m_Vertical; // 0x11
	[SerializeField] // RVA: 0xD5A Offset: 0xD5A VA: 0xD5A
	private ScrollRect.MovementType m_MovementType; // 0x14
	[SerializeField] // RVA: 0xD5B Offset: 0xD5B VA: 0xD5B
	private float m_Elasticity; // 0x18
	[SerializeField] // RVA: 0xD5C Offset: 0xD5C VA: 0xD5C
	private bool m_Inertia; // 0x1C
	[SerializeField] // RVA: 0xD5D Offset: 0xD5D VA: 0xD5D
	private float m_DecelerationRate; // 0x20
	[SerializeField] // RVA: 0xD5E Offset: 0xD5E VA: 0xD5E
	private float m_ScrollSensitivity; // 0x24
	[SerializeField] // RVA: 0xD5F Offset: 0xD5F VA: 0xD5F
	private RectTransform m_Viewport; // 0x28
	[SerializeField] // RVA: 0xD60 Offset: 0xD60 VA: 0xD60
	private Scrollbar m_HorizontalScrollbar; // 0x2C
	[SerializeField] // RVA: 0xD61 Offset: 0xD61 VA: 0xD61
	private Scrollbar m_VerticalScrollbar; // 0x30
	[SerializeField] // RVA: 0xD62 Offset: 0xD62 VA: 0xD62
	private ScrollRect.ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x34
	[SerializeField] // RVA: 0xD63 Offset: 0xD63 VA: 0xD63
	private ScrollRect.ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x38
	[SerializeField] // RVA: 0xD64 Offset: 0xD64 VA: 0xD64
	private float m_HorizontalScrollbarSpacing; // 0x3C
	[SerializeField] // RVA: 0xD65 Offset: 0xD65 VA: 0xD65
	private float m_VerticalScrollbarSpacing; // 0x40
	[SerializeField] // RVA: 0xD66 Offset: 0xD66 VA: 0xD66
	private ScrollRect.ScrollRectEvent m_OnValueChanged; // 0x44
	private Vector2 m_PointerStartLocalCursor; // 0x48
	protected Vector2 m_ContentStartPosition; // 0x50
	private RectTransform m_ViewRect; // 0x58
	protected Bounds m_ContentBounds; // 0x5C
	private Bounds m_ViewBounds; // 0x74
	private Vector2 m_Velocity; // 0x8C
	private bool m_Dragging; // 0x94
	private bool m_Scrolling; // 0x95
	private Vector2 m_PrevPosition; // 0x98
	private Bounds m_PrevContentBounds; // 0xA0
	private Bounds m_PrevViewBounds; // 0xB8
	private bool m_HasRebuiltLayout; // 0xD0
	private bool m_HSliderExpand; // 0xD1
	private bool m_VSliderExpand; // 0xD2
	private float m_HSliderHeight; // 0xD4
	private float m_VSliderWidth; // 0xD8
	private RectTransform m_Rect; // 0xDC
	private RectTransform m_HorizontalScrollbarRect; // 0xE0
	private RectTransform m_VerticalScrollbarRect; // 0xE4
	private DrivenRectTransformTracker m_Tracker; // 0xE8
	private readonly Vector3[] m_Corners; // 0xEC

	// Properties
	public RectTransform content { get; set; }
	public bool horizontal { get; set; }
	public bool vertical { get; set; }
	public ScrollRect.MovementType movementType { get; set; }
	public float elasticity { get; set; }
	public bool inertia { get; set; }
	public float decelerationRate { get; set; }
	public float scrollSensitivity { get; set; }
	public RectTransform viewport { get; set; }
	public Scrollbar horizontalScrollbar { get; set; }
	public Scrollbar verticalScrollbar { get; set; }
	public ScrollRect.ScrollbarVisibility horizontalScrollbarVisibility { get; set; }
	public ScrollRect.ScrollbarVisibility verticalScrollbarVisibility { get; set; }
	public float horizontalScrollbarSpacing { get; set; }
	public float verticalScrollbarSpacing { get; set; }
	public ScrollRect.ScrollRectEvent onValueChanged { get; set; }
	protected RectTransform viewRect { get; }
	public Vector2 velocity { get; set; }
	private RectTransform rectTransform { get; }
	public Vector2 normalizedPosition { get; set; }
	public float horizontalNormalizedPosition { get; set; }
	public float verticalNormalizedPosition { get; set; }
	private bool hScrollingNeeded { get; }
	private bool vScrollingNeeded { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x866 Offset: 0x866 VA: 0x866
	protected void .ctor() { }

	// RVA: 0xCA3 Offset: 0xCA3 VA: 0xCA3
	public RectTransform get_content() { }

	// RVA: 0x76B Offset: 0x76B VA: 0x76B
	public void set_content(RectTransform value) { }

	// RVA: 0xCA4 Offset: 0xCA4 VA: 0xCA4
	public bool get_horizontal() { }

	// RVA: 0x76C Offset: 0x76C VA: 0x76C
	public void set_horizontal(bool value) { }

	// RVA: 0xCA5 Offset: 0xCA5 VA: 0xCA5
	public bool get_vertical() { }

	// RVA: 0x76D Offset: 0x76D VA: 0x76D
	public void set_vertical(bool value) { }

	// RVA: 0xCA6 Offset: 0xCA6 VA: 0xCA6
	public ScrollRect.MovementType get_movementType() { }

	// RVA: 0x76E Offset: 0x76E VA: 0x76E
	public void set_movementType(ScrollRect.MovementType value) { }

	// RVA: 0x6E Offset: 0x6E VA: 0x6E
	public float get_elasticity() { }

	// RVA: 0x3D Offset: 0x3D VA: 0x3D
	public void set_elasticity(float value) { }

	// RVA: 0xCA7 Offset: 0xCA7 VA: 0xCA7
	public bool get_inertia() { }

	// RVA: 0x76F Offset: 0x76F VA: 0x76F
	public void set_inertia(bool value) { }

	// RVA: 0x6F Offset: 0x6F VA: 0x6F
	public float get_decelerationRate() { }

	// RVA: 0x3E Offset: 0x3E VA: 0x3E
	public void set_decelerationRate(float value) { }

	// RVA: 0x70 Offset: 0x70 VA: 0x70
	public float get_scrollSensitivity() { }

	// RVA: 0x3F Offset: 0x3F VA: 0x3F
	public void set_scrollSensitivity(float value) { }

	// RVA: 0xCA8 Offset: 0xCA8 VA: 0xCA8
	public RectTransform get_viewport() { }

	// RVA: 0x770 Offset: 0x770 VA: 0x770
	public void set_viewport(RectTransform value) { }

	// RVA: 0xCA9 Offset: 0xCA9 VA: 0xCA9
	public Scrollbar get_horizontalScrollbar() { }

	// RVA: 0x771 Offset: 0x771 VA: 0x771
	public void set_horizontalScrollbar(Scrollbar value) { }

	// RVA: 0xCAA Offset: 0xCAA VA: 0xCAA
	public Scrollbar get_verticalScrollbar() { }

	// RVA: 0x772 Offset: 0x772 VA: 0x772
	public void set_verticalScrollbar(Scrollbar value) { }

	// RVA: 0xCAB Offset: 0xCAB VA: 0xCAB
	public ScrollRect.ScrollbarVisibility get_horizontalScrollbarVisibility() { }

	// RVA: 0x773 Offset: 0x773 VA: 0x773
	public void set_horizontalScrollbarVisibility(ScrollRect.ScrollbarVisibility value) { }

	// RVA: 0xCAC Offset: 0xCAC VA: 0xCAC
	public ScrollRect.ScrollbarVisibility get_verticalScrollbarVisibility() { }

	// RVA: 0x774 Offset: 0x774 VA: 0x774
	public void set_verticalScrollbarVisibility(ScrollRect.ScrollbarVisibility value) { }

	// RVA: 0x71 Offset: 0x71 VA: 0x71
	public float get_horizontalScrollbarSpacing() { }

	// RVA: 0x40 Offset: 0x40 VA: 0x40
	public void set_horizontalScrollbarSpacing(float value) { }

	// RVA: 0x72 Offset: 0x72 VA: 0x72
	public float get_verticalScrollbarSpacing() { }

	// RVA: 0x41 Offset: 0x41 VA: 0x41
	public void set_verticalScrollbarSpacing(float value) { }

	// RVA: 0xCAD Offset: 0xCAD VA: 0xCAD
	public ScrollRect.ScrollRectEvent get_onValueChanged() { }

	// RVA: 0x775 Offset: 0x775 VA: 0x775
	public void set_onValueChanged(ScrollRect.ScrollRectEvent value) { }

	// RVA: 0xCAE Offset: 0xCAE VA: 0xCAE
	protected RectTransform get_viewRect() { }

	// RVA: 0x776 Offset: 0x776 VA: 0x776
	public Vector2 get_velocity() { }

	// RVA: 0x777 Offset: 0x777 VA: 0x777
	public void set_velocity(Vector2 value) { }

	// RVA: 0xCAF Offset: 0xCAF VA: 0xCAF
	private RectTransform get_rectTransform() { }

	// RVA: 0x778 Offset: 0x778 VA: 0x778 Slot: 38
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x867 Offset: 0x867 VA: 0x867 Slot: 39
	public virtual void LayoutComplete() { }

	// RVA: 0x868 Offset: 0x868 VA: 0x868 Slot: 40
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x869 Offset: 0x869 VA: 0x869
	private void UpdateCachedData() { }

	// RVA: 0x86A Offset: 0x86A VA: 0x86A Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x86B Offset: 0x86B VA: 0x86B Slot: 7
	protected override void OnDisable() { }

	// RVA: 0xCB0 Offset: 0xCB0 VA: 0xCB0 Slot: 9
	public override bool IsActive() { }

	// RVA: 0x86C Offset: 0x86C VA: 0x86C
	private void EnsureLayoutHasRebuilt() { }

	// RVA: 0x86D Offset: 0x86D VA: 0x86D Slot: 41
	public virtual void StopMovement() { }

	// RVA: 0x779 Offset: 0x779 VA: 0x779 Slot: 42
	public virtual void OnScroll(PointerEventData data) { }

	// RVA: 0x77A Offset: 0x77A VA: 0x77A Slot: 43
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x77B Offset: 0x77B VA: 0x77B Slot: 44
	public virtual void OnBeginDrag(PointerEventData eventData) { }

	// RVA: 0x77C Offset: 0x77C VA: 0x77C Slot: 45
	public virtual void OnEndDrag(PointerEventData eventData) { }

	// RVA: 0x77D Offset: 0x77D VA: 0x77D Slot: 46
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x77E Offset: 0x77E VA: 0x77E Slot: 47
	protected virtual void SetContentAnchoredPosition(Vector2 position) { }

	// RVA: 0x86E Offset: 0x86E VA: 0x86E Slot: 48
	protected virtual void LateUpdate() { }

	// RVA: 0x86F Offset: 0x86F VA: 0x86F
	protected void UpdatePrevData() { }

	// RVA: 0x77F Offset: 0x77F VA: 0x77F
	private void UpdateScrollbars(Vector2 offset) { }

	// RVA: 0x780 Offset: 0x780 VA: 0x780
	public Vector2 get_normalizedPosition() { }

	// RVA: 0x781 Offset: 0x781 VA: 0x781
	public void set_normalizedPosition(Vector2 value) { }

	// RVA: 0x73 Offset: 0x73 VA: 0x73
	public float get_horizontalNormalizedPosition() { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42
	public void set_horizontalNormalizedPosition(float value) { }

	// RVA: 0x74 Offset: 0x74 VA: 0x74
	public float get_verticalNormalizedPosition() { }

	// RVA: 0x43 Offset: 0x43 VA: 0x43
	public void set_verticalNormalizedPosition(float value) { }

	// RVA: 0x44 Offset: 0x44 VA: 0x44
	private void SetHorizontalNormalizedPosition(float value) { }

	// RVA: 0x45 Offset: 0x45 VA: 0x45
	private void SetVerticalNormalizedPosition(float value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 49
	protected virtual void SetNormalizedPosition(float value, int axis) { }

	// RVA: 0x8 Offset: 0x8 VA: 0x8
	private static float RubberDelta(float overStretching, float viewSize) { }

	// RVA: 0x870 Offset: 0x870 VA: 0x870 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0xCB1 Offset: 0xCB1 VA: 0xCB1
	private bool get_hScrollingNeeded() { }

	// RVA: 0xCB2 Offset: 0xCB2 VA: 0xCB2
	private bool get_vScrollingNeeded() { }

	// RVA: 0x871 Offset: 0x871 VA: 0x871 Slot: 50
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x872 Offset: 0x872 VA: 0x872 Slot: 51
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x75 Offset: 0x75 VA: 0x75 Slot: 52
	public virtual float get_minWidth() { }

	// RVA: 0x76 Offset: 0x76 VA: 0x76 Slot: 53
	public virtual float get_preferredWidth() { }

	// RVA: 0x77 Offset: 0x77 VA: 0x77 Slot: 54
	public virtual float get_flexibleWidth() { }

	// RVA: 0x78 Offset: 0x78 VA: 0x78 Slot: 55
	public virtual float get_minHeight() { }

	// RVA: 0x79 Offset: 0x79 VA: 0x79 Slot: 56
	public virtual float get_preferredHeight() { }

	// RVA: 0x7A Offset: 0x7A VA: 0x7A Slot: 57
	public virtual float get_flexibleHeight() { }

	// RVA: 0xCB3 Offset: 0xCB3 VA: 0xCB3 Slot: 58
	public virtual int get_layoutPriority() { }

	// RVA: 0x873 Offset: 0x873 VA: 0x873 Slot: 59
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0x874 Offset: 0x874 VA: 0x874 Slot: 60
	public virtual void SetLayoutVertical() { }

	// RVA: 0x875 Offset: 0x875 VA: 0x875
	private void UpdateScrollbarVisibility() { }

	// RVA: 0x117 Offset: 0x117 VA: 0x117
	private static void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollRect.ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar) { }

	// RVA: 0x876 Offset: 0x876 VA: 0x876
	private void UpdateScrollbarLayout() { }

	// RVA: 0x877 Offset: 0x877 VA: 0x877
	protected void UpdateBounds() { }

	// RVA: 0x118 Offset: 0x118 VA: 0x118
	internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos) { }

	// RVA: 0x782 Offset: 0x782 VA: 0x782
	private Bounds GetBounds() { }

	// RVA: 0x3C7 Offset: 0x3C7 VA: 0x3C7
	internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix) { }

	// RVA: 0x3C8 Offset: 0x3C8 VA: 0x3C8
	private Vector2 CalculateOffset(Vector2 delta) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, ScrollRect.MovementType movementType, ref Vector2 delta) { }

	// RVA: 0x878 Offset: 0x878 VA: 0x878
	protected void SetDirty() { }

	// RVA: 0x879 Offset: 0x879 VA: 0x879
	protected void SetDirtyCaching() { }

	// RVA: 0xCB4 Offset: 0xCB4 VA: 0xCB4 Slot: 23
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum ScrollRect.MovementType // TypeDefIndex: 2261
{
	// Fields
	public int value__; // 0x0
	public const ScrollRect.MovementType Unrestricted = 0;
	public const ScrollRect.MovementType Elastic = 1;
	public const ScrollRect.MovementType Clamped = 2;
}

// Namespace: 
public enum ScrollRect.ScrollbarVisibility // TypeDefIndex: 2262
{
	// Fields
	public int value__; // 0x0
	public const ScrollRect.ScrollbarVisibility Permanent = 0;
	public const ScrollRect.ScrollbarVisibility AutoHide = 1;
	public const ScrollRect.ScrollbarVisibility AutoHideAndExpandViewport = 2;
}

// Namespace: 
[Serializable]
public class ScrollRect.ScrollRectEvent : UnityEvent<Vector2> // TypeDefIndex: 2263
{
	// Methods

	// RVA: 0x87A Offset: 0x87A VA: 0x87A
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA2 Offset: 0xCA2 VA: 0xCA2
[ExecuteAlways] // RVA: 0xCA2 Offset: 0xCA2 VA: 0xCA2
[SelectionBaseAttribute] // RVA: 0xCA2 Offset: 0xCA2 VA: 0xCA2
[DisallowMultipleComponent] // RVA: 0xCA2 Offset: 0xCA2 VA: 0xCA2
public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IEventSystemHandler // TypeDefIndex: 2264
{
	// Fields
	private static List<Selectable> s_List; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xD67 Offset: 0xD67 VA: 0xD67
	[SerializeField] // RVA: 0xD67 Offset: 0xD67 VA: 0xD67
	private Navigation m_Navigation; // 0xC
	[FormerlySerializedAsAttribute] // RVA: 0xD68 Offset: 0xD68 VA: 0xD68
	[SerializeField] // RVA: 0xD68 Offset: 0xD68 VA: 0xD68
	private Selectable.Transition m_Transition; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0xD69 Offset: 0xD69 VA: 0xD69
	[SerializeField] // RVA: 0xD69 Offset: 0xD69 VA: 0xD69
	private ColorBlock m_Colors; // 0x24
	[FormerlySerializedAsAttribute] // RVA: 0xD6A Offset: 0xD6A VA: 0xD6A
	[SerializeField] // RVA: 0xD6A Offset: 0xD6A VA: 0xD6A
	private SpriteState m_SpriteState; // 0x6C
	[FormerlySerializedAsAttribute] // RVA: 0xD6B Offset: 0xD6B VA: 0xD6B
	[SerializeField] // RVA: 0xD6B Offset: 0xD6B VA: 0xD6B
	private AnimationTriggers m_AnimationTriggers; // 0x78
	[TooltipAttribute] // RVA: 0xD6C Offset: 0xD6C VA: 0xD6C
	[SerializeField] // RVA: 0xD6C Offset: 0xD6C VA: 0xD6C
	private bool m_Interactable; // 0x7C
	[FormerlySerializedAsAttribute] // RVA: 0xD6D Offset: 0xD6D VA: 0xD6D
	[FormerlySerializedAsAttribute] // RVA: 0xD6D Offset: 0xD6D VA: 0xD6D
	[SerializeField] // RVA: 0xD6D Offset: 0xD6D VA: 0xD6D
	private Graphic m_TargetGraphic; // 0x80
	private bool m_GroupsAllowInteraction; // 0x84
	private Selectable.SelectionState m_CurrentSelectionState; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xD6E Offset: 0xD6E VA: 0xD6E
	[DebuggerBrowsableAttribute] // RVA: 0xD6E Offset: 0xD6E VA: 0xD6E
	private bool <isPointerInside>k__BackingField; // 0x8C
	[CompilerGeneratedAttribute] // RVA: 0xD6F Offset: 0xD6F VA: 0xD6F
	[DebuggerBrowsableAttribute] // RVA: 0xD6F Offset: 0xD6F VA: 0xD6F
	private bool <isPointerDown>k__BackingField; // 0x8D
	[CompilerGeneratedAttribute] // RVA: 0xD70 Offset: 0xD70 VA: 0xD70
	[DebuggerBrowsableAttribute] // RVA: 0xD70 Offset: 0xD70 VA: 0xD70
	private bool <hasSelection>k__BackingField; // 0x8E
	private readonly List<CanvasGroup> m_CanvasGroupCache; // 0x90

	// Properties
	public static List<Selectable> allSelectables { get; }
	public Navigation navigation { get; set; }
	public Selectable.Transition transition { get; set; }
	public ColorBlock colors { get; set; }
	public SpriteState spriteState { get; set; }
	public AnimationTriggers animationTriggers { get; set; }
	public Graphic targetGraphic { get; set; }
	public bool interactable { get; set; }
	private bool isPointerInside { get; set; }
	private bool isPointerDown { get; set; }
	private bool hasSelection { get; set; }
	public Image image { get; set; }
	public Animator animator { get; }
	protected Selectable.SelectionState currentSelectionState { get; }

	// Methods

	// RVA: 0x887 Offset: 0x887 VA: 0x887
	protected void .ctor() { }

	// RVA: 0x2A2 Offset: 0x2A2 VA: 0x2A2
	public static List<Selectable> get_allSelectables() { }

	// RVA: 0x78F Offset: 0x78F VA: 0x78F
	public Navigation get_navigation() { }

	// RVA: 0x790 Offset: 0x790 VA: 0x790
	public void set_navigation(Navigation value) { }

	// RVA: 0xCC3 Offset: 0xCC3 VA: 0xCC3
	public Selectable.Transition get_transition() { }

	// RVA: 0x791 Offset: 0x791 VA: 0x791
	public void set_transition(Selectable.Transition value) { }

	// RVA: 0x792 Offset: 0x792 VA: 0x792
	public ColorBlock get_colors() { }

	// RVA: 0x793 Offset: 0x793 VA: 0x793
	public void set_colors(ColorBlock value) { }

	// RVA: 0x794 Offset: 0x794 VA: 0x794
	public SpriteState get_spriteState() { }

	// RVA: 0x795 Offset: 0x795 VA: 0x795
	public void set_spriteState(SpriteState value) { }

	// RVA: 0xCC4 Offset: 0xCC4 VA: 0xCC4
	public AnimationTriggers get_animationTriggers() { }

	// RVA: 0x796 Offset: 0x796 VA: 0x796
	public void set_animationTriggers(AnimationTriggers value) { }

	// RVA: 0xCC5 Offset: 0xCC5 VA: 0xCC5
	public Graphic get_targetGraphic() { }

	// RVA: 0x797 Offset: 0x797 VA: 0x797
	public void set_targetGraphic(Graphic value) { }

	// RVA: 0xCC6 Offset: 0xCC6 VA: 0xCC6
	public bool get_interactable() { }

	// RVA: 0x798 Offset: 0x798 VA: 0x798
	public void set_interactable(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDF4 Offset: 0xDF4 VA: 0xDF4
	// RVA: 0xCC7 Offset: 0xCC7 VA: 0xCC7
	private bool get_isPointerInside() { }

	[CompilerGeneratedAttribute] // RVA: 0xDF5 Offset: 0xDF5 VA: 0xDF5
	// RVA: 0x799 Offset: 0x799 VA: 0x799
	private void set_isPointerInside(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDF6 Offset: 0xDF6 VA: 0xDF6
	// RVA: 0xCC8 Offset: 0xCC8 VA: 0xCC8
	private bool get_isPointerDown() { }

	[CompilerGeneratedAttribute] // RVA: 0xDF7 Offset: 0xDF7 VA: 0xDF7
	// RVA: 0x79A Offset: 0x79A VA: 0x79A
	private void set_isPointerDown(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xDF8 Offset: 0xDF8 VA: 0xDF8
	// RVA: 0xCC9 Offset: 0xCC9 VA: 0xCC9
	private bool get_hasSelection() { }

	[CompilerGeneratedAttribute] // RVA: 0xDF9 Offset: 0xDF9 VA: 0xDF9
	// RVA: 0x79B Offset: 0x79B VA: 0x79B
	private void set_hasSelection(bool value) { }

	// RVA: 0xCCA Offset: 0xCCA VA: 0xCCA
	public Image get_image() { }

	// RVA: 0x79C Offset: 0x79C VA: 0x79C
	public void set_image(Image value) { }

	// RVA: 0xCCB Offset: 0xCCB VA: 0xCCB
	public Animator get_animator() { }

	// RVA: 0x888 Offset: 0x888 VA: 0x888 Slot: 4
	protected override void Awake() { }

	// RVA: 0x889 Offset: 0x889 VA: 0x889 Slot: 14
	protected override void OnCanvasGroupChanged() { }

	// RVA: 0xCCC Offset: 0xCCC VA: 0xCCC Slot: 24
	public virtual bool IsInteractable() { }

	// RVA: 0x88A Offset: 0x88A VA: 0x88A Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x88B Offset: 0x88B VA: 0x88B Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x88C Offset: 0x88C VA: 0x88C Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x88D Offset: 0x88D VA: 0x88D
	private void OnSetProperty() { }

	// RVA: 0x88E Offset: 0x88E VA: 0x88E Slot: 7
	protected override void OnDisable() { }

	// RVA: 0xCCD Offset: 0xCCD VA: 0xCCD
	protected Selectable.SelectionState get_currentSelectionState() { }

	// RVA: 0x88F Offset: 0x88F VA: 0x88F Slot: 25
	protected virtual void InstantClearState() { }

	// RVA: 0x3CA Offset: 0x3CA VA: 0x3CA Slot: 26
	protected virtual void DoStateTransition(Selectable.SelectionState state, bool instant) { }

	// RVA: 0x613 Offset: 0x613 VA: 0x613
	public Selectable FindSelectable(Vector3 dir) { }

	// RVA: 0x3CB Offset: 0x3CB VA: 0x3CB
	private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir) { }

	// RVA: 0x3CC Offset: 0x3CC VA: 0x3CC
	private void Navigate(AxisEventData eventData, Selectable sel) { }

	// RVA: 0xCCE Offset: 0xCCE VA: 0xCCE Slot: 27
	public virtual Selectable FindSelectableOnLeft() { }

	// RVA: 0xCCF Offset: 0xCCF VA: 0xCCF Slot: 28
	public virtual Selectable FindSelectableOnRight() { }

	// RVA: 0xCD0 Offset: 0xCD0 VA: 0xCD0 Slot: 29
	public virtual Selectable FindSelectableOnUp() { }

	// RVA: 0xCD1 Offset: 0xCD1 VA: 0xCD1 Slot: 30
	public virtual Selectable FindSelectableOnDown() { }

	// RVA: 0x79D Offset: 0x79D VA: 0x79D Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }

	// RVA: 0x3CD Offset: 0x3CD VA: 0x3CD
	private void StartColorTween(Color targetColor, bool instant) { }

	// RVA: 0x79E Offset: 0x79E VA: 0x79E
	private void DoSpriteSwap(Sprite newSprite) { }

	// RVA: 0x79F Offset: 0x79F VA: 0x79F
	private void TriggerAnimation(string triggername) { }

	// RVA: 0x614 Offset: 0x614 VA: 0x614
	protected bool IsHighlighted(BaseEventData eventData) { }

	[ObsoleteAttribute] // RVA: 0xDFA Offset: 0xDFA VA: 0xDFA
	// RVA: 0x615 Offset: 0x615 VA: 0x615
	protected bool IsPressed(BaseEventData eventData) { }

	// RVA: 0xCD2 Offset: 0xCD2 VA: 0xCD2
	protected bool IsPressed() { }

	// RVA: 0x7A0 Offset: 0x7A0 VA: 0x7A0
	protected void UpdateSelectionState(BaseEventData eventData) { }

	// RVA: 0x7A1 Offset: 0x7A1 VA: 0x7A1
	private void EvaluateAndTransitionToSelectionState(BaseEventData eventData) { }

	// RVA: 0x7A2 Offset: 0x7A2 VA: 0x7A2
	private void InternalEvaluateAndTransitionToSelectionState(bool instant) { }

	// RVA: 0x7A3 Offset: 0x7A3 VA: 0x7A3 Slot: 32
	public virtual void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x7A4 Offset: 0x7A4 VA: 0x7A4 Slot: 33
	public virtual void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x7A5 Offset: 0x7A5 VA: 0x7A5 Slot: 34
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x7A6 Offset: 0x7A6 VA: 0x7A6 Slot: 35
	public virtual void OnPointerExit(PointerEventData eventData) { }

	// RVA: 0x7A7 Offset: 0x7A7 VA: 0x7A7 Slot: 36
	public virtual void OnSelect(BaseEventData eventData) { }

	// RVA: 0x7A8 Offset: 0x7A8 VA: 0x7A8 Slot: 37
	public virtual void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x890 Offset: 0x890 VA: 0x890 Slot: 38
	public virtual void Select() { }

	// RVA: 0xF82 Offset: 0xF82 VA: 0xF82
	private static void .cctor() { }
}

// Namespace: 
public enum Selectable.Transition // TypeDefIndex: 2265
{
	// Fields
	public int value__; // 0x0
	public const Selectable.Transition None = 0;
	public const Selectable.Transition ColorTint = 1;
	public const Selectable.Transition SpriteSwap = 2;
	public const Selectable.Transition Animation = 3;
}

// Namespace: 
protected enum Selectable.SelectionState // TypeDefIndex: 2266
{
	// Fields
	public int value__; // 0x0
	public const Selectable.SelectionState Normal = 0;
	public const Selectable.SelectionState Highlighted = 1;
	public const Selectable.SelectionState Pressed = 2;
	public const Selectable.SelectionState Disabled = 3;
}

// Namespace: UnityEngine.UI
internal static class SetPropertyUtility // TypeDefIndex: 2267
{
	// Methods

	// RVA: 0x616 Offset: 0x616 VA: 0x616
	public static bool SetColor(ref Color currentValue, Color newValue) { }

	// RVA: -1 Offset: -1
	public static bool SetStruct<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6C1 Offset: 0x6C1 VA: 0x6C1
	|-SetPropertyUtility.SetStruct<bool>
	|
	|-RVA: 0x6C3 Offset: 0x6C3 VA: 0x6C3
	|-SetPropertyUtility.SetStruct<char>
	|
	|-RVA: 0x6C2 Offset: 0x6C2 VA: 0x6C2
	|-SetPropertyUtility.SetStruct<int>
	|
	|-RVA: 0x6C0 Offset: 0x6C0 VA: 0x6C0
	|-SetPropertyUtility.SetStruct<Int32Enum>
	|-SetPropertyUtility.SetStruct<TouchScreenKeyboardType>
	|-SetPropertyUtility.SetStruct<AspectRatioFitter.AspectMode>
	|-SetPropertyUtility.SetStruct<ContentSizeFitter.FitMode>
	|-SetPropertyUtility.SetStruct<Image.FillMethod>
	|-SetPropertyUtility.SetStruct<Image.Type>
	|-SetPropertyUtility.SetStruct<InputField.CharacterValidation>
	|-SetPropertyUtility.SetStruct<InputField.ContentType>
	|-SetPropertyUtility.SetStruct<InputField.InputType>
	|-SetPropertyUtility.SetStruct<InputField.LineType>
	|-SetPropertyUtility.SetStruct<Scrollbar.Direction>
	|-SetPropertyUtility.SetStruct<Selectable.Transition>
	|-SetPropertyUtility.SetStruct<Slider.Direction>
	|
	|-RVA: 0x4 Offset: 0x4 VA: 0x4
	|-SetPropertyUtility.SetStruct<float>
	|
	|-RVA: 0x6C5 Offset: 0x6C5 VA: 0x6C5
	|-SetPropertyUtility.SetStruct<ColorBlock>
	|
	|-RVA: 0x6C4 Offset: 0x6C4 VA: 0x6C4
	|-SetPropertyUtility.SetStruct<Navigation>
	|
	|-RVA: 0x6C6 Offset: 0x6C6 VA: 0x6C6
	|-SetPropertyUtility.SetStruct<SpriteState>
	*/

	// RVA: -1 Offset: -1
	public static bool SetClass<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A8 Offset: 0x6A8 VA: 0x6A8
	|-SetPropertyUtility.SetClass<object>
	|-SetPropertyUtility.SetClass<RectTransform>
	|-SetPropertyUtility.SetClass<Sprite>
	|-SetPropertyUtility.SetClass<AnimationTriggers>
	|-SetPropertyUtility.SetClass<Graphic>
	|-SetPropertyUtility.SetClass<InputField.OnChangeEvent>
	|-SetPropertyUtility.SetClass<InputField.OnValidateInput>
	|-SetPropertyUtility.SetClass<InputField.SubmitEvent>
	|-SetPropertyUtility.SetClass<Text>
	*/
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA3 Offset: 0xCA3 VA: 0xCA3
[RequireComponent] // RVA: 0xCA3 Offset: 0xCA3 VA: 0xCA3
public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 2268
{
	// Fields
	[SerializeField] // RVA: 0xD71 Offset: 0xD71 VA: 0xD71
	private RectTransform m_FillRect; // 0x94
	[SerializeField] // RVA: 0xD72 Offset: 0xD72 VA: 0xD72
	private RectTransform m_HandleRect; // 0x98
	[SpaceAttribute] // RVA: 0xD73 Offset: 0xD73 VA: 0xD73
	[SerializeField] // RVA: 0xD73 Offset: 0xD73 VA: 0xD73
	private Slider.Direction m_Direction; // 0x9C
	[SerializeField] // RVA: 0xD74 Offset: 0xD74 VA: 0xD74
	private float m_MinValue; // 0xA0
	[SerializeField] // RVA: 0xD75 Offset: 0xD75 VA: 0xD75
	private float m_MaxValue; // 0xA4
	[SerializeField] // RVA: 0xD76 Offset: 0xD76 VA: 0xD76
	private bool m_WholeNumbers; // 0xA8
	[SerializeField] // RVA: 0xD77 Offset: 0xD77 VA: 0xD77
	protected float m_Value; // 0xAC
	[SpaceAttribute] // RVA: 0xD78 Offset: 0xD78 VA: 0xD78
	[SerializeField] // RVA: 0xD78 Offset: 0xD78 VA: 0xD78
	private Slider.SliderEvent m_OnValueChanged; // 0xB0
	private Image m_FillImage; // 0xB4
	private Transform m_FillTransform; // 0xB8
	private RectTransform m_FillContainerRect; // 0xBC
	private Transform m_HandleTransform; // 0xC0
	private RectTransform m_HandleContainerRect; // 0xC4
	private Vector2 m_Offset; // 0xC8
	private DrivenRectTransformTracker m_Tracker; // 0xD0

	// Properties
	public RectTransform fillRect { get; set; }
	public RectTransform handleRect { get; set; }
	public Slider.Direction direction { get; set; }
	public float minValue { get; set; }
	public float maxValue { get; set; }
	public bool wholeNumbers { get; set; }
	public virtual float value { get; set; }
	public float normalizedValue { get; set; }
	public Slider.SliderEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Slider.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods

	// RVA: 0x892 Offset: 0x892 VA: 0x892
	protected void .ctor() { }

	// RVA: 0xCD4 Offset: 0xCD4 VA: 0xCD4
	public RectTransform get_fillRect() { }

	// RVA: 0x7AF Offset: 0x7AF VA: 0x7AF
	public void set_fillRect(RectTransform value) { }

	// RVA: 0xCD5 Offset: 0xCD5 VA: 0xCD5
	public RectTransform get_handleRect() { }

	// RVA: 0x7B0 Offset: 0x7B0 VA: 0x7B0
	public void set_handleRect(RectTransform value) { }

	// RVA: 0xCD6 Offset: 0xCD6 VA: 0xCD6
	public Slider.Direction get_direction() { }

	// RVA: 0x7B1 Offset: 0x7B1 VA: 0x7B1
	public void set_direction(Slider.Direction value) { }

	// RVA: 0x7E Offset: 0x7E VA: 0x7E
	public float get_minValue() { }

	// RVA: 0x49 Offset: 0x49 VA: 0x49
	public void set_minValue(float value) { }

	// RVA: 0x7F Offset: 0x7F VA: 0x7F
	public float get_maxValue() { }

	// RVA: 0x4A Offset: 0x4A VA: 0x4A
	public void set_maxValue(float value) { }

	// RVA: 0xCD7 Offset: 0xCD7 VA: 0xCD7
	public bool get_wholeNumbers() { }

	// RVA: 0x7B2 Offset: 0x7B2 VA: 0x7B2
	public void set_wholeNumbers(bool value) { }

	// RVA: 0x80 Offset: 0x80 VA: 0x80 Slot: 46
	public virtual float get_value() { }

	// RVA: 0x4B Offset: 0x4B VA: 0x4B Slot: 47
	public virtual void set_value(float value) { }

	// RVA: 0x81 Offset: 0x81 VA: 0x81
	public float get_normalizedValue() { }

	// RVA: 0x4C Offset: 0x4C VA: 0x4C
	public void set_normalizedValue(float value) { }

	// RVA: 0xCD8 Offset: 0xCD8 VA: 0xCD8
	public Slider.SliderEvent get_onValueChanged() { }

	// RVA: 0x7B3 Offset: 0x7B3 VA: 0x7B3
	public void set_onValueChanged(Slider.SliderEvent value) { }

	// RVA: 0x82 Offset: 0x82 VA: 0x82
	private float get_stepSize() { }

	// RVA: 0x7B4 Offset: 0x7B4 VA: 0x7B4 Slot: 48
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x893 Offset: 0x893 VA: 0x893 Slot: 49
	public virtual void LayoutComplete() { }

	// RVA: 0x894 Offset: 0x894 VA: 0x894 Slot: 50
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x895 Offset: 0x895 VA: 0x895 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x896 Offset: 0x896 VA: 0x896 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x897 Offset: 0x897 VA: 0x897 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x898 Offset: 0x898 VA: 0x898
	private void UpdateCachedReferences() { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	private float ClampValue(float input) { }

	// RVA: 0x4D Offset: 0x4D VA: 0x4D
	private void Set(float input) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 51
	protected virtual void Set(float input, bool sendCallback) { }

	// RVA: 0x899 Offset: 0x899 VA: 0x899 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0xCD9 Offset: 0xCD9 VA: 0xCD9
	private Slider.Axis get_axis() { }

	// RVA: 0xCDA Offset: 0xCDA VA: 0xCDA
	private bool get_reverseValue() { }

	// RVA: 0x89A Offset: 0x89A VA: 0x89A
	private void UpdateVisuals() { }

	// RVA: 0x3CE Offset: 0x3CE VA: 0x3CE
	private void UpdateDrag(PointerEventData eventData, Camera cam) { }

	// RVA: 0x617 Offset: 0x617 VA: 0x617
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x7B5 Offset: 0x7B5 VA: 0x7B5 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x7B6 Offset: 0x7B6 VA: 0x7B6 Slot: 52
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x7B7 Offset: 0x7B7 VA: 0x7B7 Slot: 31
	public override void OnMove(AxisEventData eventData) { }

	// RVA: 0xCDB Offset: 0xCDB VA: 0xCDB Slot: 27
	public override Selectable FindSelectableOnLeft() { }

	// RVA: 0xCDC Offset: 0xCDC VA: 0xCDC Slot: 28
	public override Selectable FindSelectableOnRight() { }

	// RVA: 0xCDD Offset: 0xCDD VA: 0xCDD Slot: 29
	public override Selectable FindSelectableOnUp() { }

	// RVA: 0xCDE Offset: 0xCDE VA: 0xCDE Slot: 30
	public override Selectable FindSelectableOnDown() { }

	// RVA: 0x7B8 Offset: 0x7B8 VA: 0x7B8 Slot: 53
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x3CF Offset: 0x3CF VA: 0x3CF
	public void SetDirection(Slider.Direction direction, bool includeRectLayouts) { }

	// RVA: 0xCDF Offset: 0xCDF VA: 0xCDF Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Slider.Direction // TypeDefIndex: 2269
{
	// Fields
	public int value__; // 0x0
	public const Slider.Direction LeftToRight = 0;
	public const Slider.Direction RightToLeft = 1;
	public const Slider.Direction BottomToTop = 2;
	public const Slider.Direction TopToBottom = 3;
}

// Namespace: 
[Serializable]
public class Slider.SliderEvent : UnityEvent<float> // TypeDefIndex: 2270
{
	// Methods

	// RVA: 0x89B Offset: 0x89B VA: 0x89B
	public void .ctor() { }
}

// Namespace: 
private enum Slider.Axis // TypeDefIndex: 2271
{
	// Fields
	public int value__; // 0x0
	public const Slider.Axis Horizontal = 0;
	public const Slider.Axis Vertical = 1;
}

// Namespace: UnityEngine.UI
[Serializable]
public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 2272
{
	// Fields
	[SerializeField] // RVA: 0xD79 Offset: 0xD79 VA: 0xD79
	private Sprite m_HighlightedSprite; // 0x0
	[SerializeField] // RVA: 0xD7A Offset: 0xD7A VA: 0xD7A
	private Sprite m_PressedSprite; // 0x4
	[SerializeField] // RVA: 0xD7B Offset: 0xD7B VA: 0xD7B
	private Sprite m_DisabledSprite; // 0x8

	// Properties
	public Sprite highlightedSprite { get; set; }
	public Sprite pressedSprite { get; set; }
	public Sprite disabledSprite { get; set; }

	// Methods

	// RVA: 0xCE0 Offset: 0xCE0 VA: 0xCE0
	public Sprite get_highlightedSprite() { }

	// RVA: 0x7B9 Offset: 0x7B9 VA: 0x7B9
	public void set_highlightedSprite(Sprite value) { }

	// RVA: 0xCE1 Offset: 0xCE1 VA: 0xCE1
	public Sprite get_pressedSprite() { }

	// RVA: 0x7BA Offset: 0x7BA VA: 0x7BA
	public void set_pressedSprite(Sprite value) { }

	// RVA: 0xCE2 Offset: 0xCE2 VA: 0xCE2
	public Sprite get_disabledSprite() { }

	// RVA: 0x7BB Offset: 0x7BB VA: 0x7BB
	public void set_disabledSprite(Sprite value) { }

	// RVA: 0x618 Offset: 0x618 VA: 0x618 Slot: 4
	public bool Equals(SpriteState other) { }
}

// Namespace: UnityEngine.UI
public static class StencilMaterial // TypeDefIndex: 2273
{
	// Fields
	private static List<StencilMaterial.MatEntry> m_List; // 0xFFFFFFFF

	// Methods

	[EditorBrowsableAttribute] // RVA: 0xDFB Offset: 0xDFB VA: 0xDFB
	[ObsoleteAttribute] // RVA: 0xDFB Offset: 0xDFB VA: 0xDFB
	// RVA: 0x619 Offset: 0x619 VA: 0x619
	public static Material Add(Material baseMat, int stencilID) { }

	// RVA: 0x8D Offset: 0x8D VA: 0x8D
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) { }

	// RVA: 0x89C Offset: 0x89C VA: 0x89C
	public static void Remove(Material customMat) { }

	// RVA: 0xF83 Offset: 0xF83 VA: 0xF83
	public static void ClearAll() { }

	// RVA: 0xF84 Offset: 0xF84 VA: 0xF84
	private static void .cctor() { }
}

// Namespace: 
private class StencilMaterial.MatEntry // TypeDefIndex: 2274
{
	// Fields
	public Material baseMat; // 0x8
	public Material customMat; // 0xC
	public int count; // 0x10
	public int stencilId; // 0x14
	public StencilOp operation; // 0x18
	public CompareFunction compareFunction; // 0x1C
	public int readMask; // 0x20
	public int writeMask; // 0x24
	public bool useAlphaClip; // 0x28
	public ColorWriteMask colorMask; // 0x2C

	// Methods

	// RVA: 0x89D Offset: 0x89D VA: 0x89D
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA4 Offset: 0xCA4 VA: 0xCA4
public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 2275
{
	// Fields
	[SerializeField] // RVA: 0xD7C Offset: 0xD7C VA: 0xD7C
	private FontData m_FontData; // 0x64
	[TextAreaAttribute] // RVA: 0xD7D Offset: 0xD7D VA: 0xD7D
	[SerializeField] // RVA: 0xD7D Offset: 0xD7D VA: 0xD7D
	protected string m_Text; // 0x68
	private TextGenerator m_TextCache; // 0x6C
	private TextGenerator m_TextCacheForLayout; // 0x70
	protected static Material s_DefaultText; // 0x0
	protected bool m_DisableFontTextureRebuiltCallback; // 0x74
	private readonly UIVertex[] m_TempVerts; // 0x78

	// Properties
	public TextGenerator cachedTextGenerator { get; }
	public TextGenerator cachedTextGeneratorForLayout { get; }
	public override Texture mainTexture { get; }
	public Font font { get; set; }
	public virtual string text { get; set; }
	public bool supportRichText { get; set; }
	public bool resizeTextForBestFit { get; set; }
	public int resizeTextMinSize { get; set; }
	public int resizeTextMaxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public int fontSize { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }
	public FontStyle fontStyle { get; set; }
	public float pixelsPerUnit { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x89E Offset: 0x89E VA: 0x89E
	protected void .ctor() { }

	// RVA: 0xCE3 Offset: 0xCE3 VA: 0xCE3
	public TextGenerator get_cachedTextGenerator() { }

	// RVA: 0xCE4 Offset: 0xCE4 VA: 0xCE4
	public TextGenerator get_cachedTextGeneratorForLayout() { }

	// RVA: 0xCE5 Offset: 0xCE5 VA: 0xCE5 Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x89F Offset: 0x89F VA: 0x89F
	public void FontTextureChanged() { }

	// RVA: 0xCE6 Offset: 0xCE6 VA: 0xCE6
	public Font get_font() { }

	// RVA: 0x7BC Offset: 0x7BC VA: 0x7BC
	public void set_font(Font value) { }

	// RVA: 0xCE7 Offset: 0xCE7 VA: 0xCE7 Slot: 72
	public virtual string get_text() { }

	// RVA: 0x7BD Offset: 0x7BD VA: 0x7BD Slot: 73
	public virtual void set_text(string value) { }

	// RVA: 0xCE8 Offset: 0xCE8 VA: 0xCE8
	public bool get_supportRichText() { }

	// RVA: 0x7BE Offset: 0x7BE VA: 0x7BE
	public void set_supportRichText(bool value) { }

	// RVA: 0xCE9 Offset: 0xCE9 VA: 0xCE9
	public bool get_resizeTextForBestFit() { }

	// RVA: 0x7BF Offset: 0x7BF VA: 0x7BF
	public void set_resizeTextForBestFit(bool value) { }

	// RVA: 0xCEA Offset: 0xCEA VA: 0xCEA
	public int get_resizeTextMinSize() { }

	// RVA: 0x7C0 Offset: 0x7C0 VA: 0x7C0
	public void set_resizeTextMinSize(int value) { }

	// RVA: 0xCEB Offset: 0xCEB VA: 0xCEB
	public int get_resizeTextMaxSize() { }

	// RVA: 0x7C1 Offset: 0x7C1 VA: 0x7C1
	public void set_resizeTextMaxSize(int value) { }

	// RVA: 0xCEC Offset: 0xCEC VA: 0xCEC
	public TextAnchor get_alignment() { }

	// RVA: 0x7C2 Offset: 0x7C2 VA: 0x7C2
	public void set_alignment(TextAnchor value) { }

	// RVA: 0xCED Offset: 0xCED VA: 0xCED
	public bool get_alignByGeometry() { }

	// RVA: 0x7C3 Offset: 0x7C3 VA: 0x7C3
	public void set_alignByGeometry(bool value) { }

	// RVA: 0xCEE Offset: 0xCEE VA: 0xCEE
	public int get_fontSize() { }

	// RVA: 0x7C4 Offset: 0x7C4 VA: 0x7C4
	public void set_fontSize(int value) { }

	// RVA: 0xCEF Offset: 0xCEF VA: 0xCEF
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x7C5 Offset: 0x7C5 VA: 0x7C5
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0xCF0 Offset: 0xCF0 VA: 0xCF0
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x7C6 Offset: 0x7C6 VA: 0x7C6
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x83 Offset: 0x83 VA: 0x83
	public float get_lineSpacing() { }

	// RVA: 0x4E Offset: 0x4E VA: 0x4E
	public void set_lineSpacing(float value) { }

	// RVA: 0xCF1 Offset: 0xCF1 VA: 0xCF1
	public FontStyle get_fontStyle() { }

	// RVA: 0x7C7 Offset: 0x7C7 VA: 0x7C7
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x84 Offset: 0x84 VA: 0x84
	public float get_pixelsPerUnit() { }

	// RVA: 0x8A0 Offset: 0x8A0 VA: 0x8A0 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x8A1 Offset: 0x8A1 VA: 0x8A1 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x8A2 Offset: 0x8A2 VA: 0x8A2 Slot: 41
	protected override void UpdateGeometry() { }

	// RVA: 0x8A3 Offset: 0x8A3 VA: 0x8A3
	internal void AssignDefaultFont() { }

	// RVA: 0x3D0 Offset: 0x3D0 VA: 0x3D0
	public TextGenerationSettings GetGenerationSettings(Vector2 extents) { }

	// RVA: 0x7C8 Offset: 0x7C8 VA: 0x7C8
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor) { }

	// RVA: 0x7C9 Offset: 0x7C9 VA: 0x7C9 Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x8A4 Offset: 0x8A4 VA: 0x8A4 Slot: 74
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x8A5 Offset: 0x8A5 VA: 0x8A5 Slot: 75
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x85 Offset: 0x85 VA: 0x85 Slot: 76
	public virtual float get_minWidth() { }

	// RVA: 0x86 Offset: 0x86 VA: 0x86 Slot: 77
	public virtual float get_preferredWidth() { }

	// RVA: 0x87 Offset: 0x87 VA: 0x87 Slot: 78
	public virtual float get_flexibleWidth() { }

	// RVA: 0x88 Offset: 0x88 VA: 0x88 Slot: 79
	public virtual float get_minHeight() { }

	// RVA: 0x89 Offset: 0x89 VA: 0x89 Slot: 80
	public virtual float get_preferredHeight() { }

	// RVA: 0x8A Offset: 0x8A VA: 0x8A Slot: 81
	public virtual float get_flexibleHeight() { }

	// RVA: 0xCF2 Offset: 0xCF2 VA: 0xCF2 Slot: 82
	public virtual int get_layoutPriority() { }

	// RVA: 0xF85 Offset: 0xF85 VA: 0xF85
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA5 Offset: 0xCA5 VA: 0xCA5
[RequireComponent] // RVA: 0xCA5 Offset: 0xCA5 VA: 0xCA5
public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 2276
{
	// Fields
	public Toggle.ToggleTransition toggleTransition; // 0x94
	public Graphic graphic; // 0x98
	[SerializeField] // RVA: 0xD7E Offset: 0xD7E VA: 0xD7E
	private ToggleGroup m_Group; // 0x9C
	public Toggle.ToggleEvent onValueChanged; // 0xA0
	[TooltipAttribute] // RVA: 0xD7F Offset: 0xD7F VA: 0xD7F
	[SerializeField] // RVA: 0xD7F Offset: 0xD7F VA: 0xD7F
	private bool m_IsOn; // 0xA4

	// Properties
	public ToggleGroup group { get; set; }
	public bool isOn { get; set; }

	// Methods

	// RVA: 0x8A6 Offset: 0x8A6 VA: 0x8A6
	protected void .ctor() { }

	// RVA: 0xCF3 Offset: 0xCF3 VA: 0xCF3
	public ToggleGroup get_group() { }

	// RVA: 0x7CA Offset: 0x7CA VA: 0x7CA
	public void set_group(ToggleGroup value) { }

	// RVA: 0x7CB Offset: 0x7CB VA: 0x7CB Slot: 46
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x8A7 Offset: 0x8A7 VA: 0x8A7 Slot: 47
	public virtual void LayoutComplete() { }

	// RVA: 0x8A8 Offset: 0x8A8 VA: 0x8A8 Slot: 48
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x8A9 Offset: 0x8A9 VA: 0x8A9 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x8AA Offset: 0x8AA VA: 0x8AA Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x8AB Offset: 0x8AB VA: 0x8AB Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x3D1 Offset: 0x3D1 VA: 0x3D1
	private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue) { }

	// RVA: 0xCF4 Offset: 0xCF4 VA: 0xCF4
	public bool get_isOn() { }

	// RVA: 0x7CC Offset: 0x7CC VA: 0x7CC
	public void set_isOn(bool value) { }

	// RVA: 0x7CD Offset: 0x7CD VA: 0x7CD
	private void Set(bool value) { }

	// RVA: 0x3D2 Offset: 0x3D2 VA: 0x3D2
	private void Set(bool value, bool sendCallback) { }

	// RVA: 0x7CE Offset: 0x7CE VA: 0x7CE
	private void PlayEffect(bool instant) { }

	// RVA: 0x8AC Offset: 0x8AC VA: 0x8AC Slot: 6
	protected override void Start() { }

	// RVA: 0x8AD Offset: 0x8AD VA: 0x8AD
	private void InternalToggle() { }

	// RVA: 0x7CF Offset: 0x7CF VA: 0x7CF Slot: 49
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x7D0 Offset: 0x7D0 VA: 0x7D0 Slot: 50
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0xCF5 Offset: 0xCF5 VA: 0xCF5 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Toggle.ToggleTransition // TypeDefIndex: 2277
{
	// Fields
	public int value__; // 0x0
	public const Toggle.ToggleTransition None = 0;
	public const Toggle.ToggleTransition Fade = 1;
}

// Namespace: 
[Serializable]
public class Toggle.ToggleEvent : UnityEvent<bool> // TypeDefIndex: 2278
{
	// Methods

	// RVA: 0x8AE Offset: 0x8AE VA: 0x8AE
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA6 Offset: 0xCA6 VA: 0xCA6
[DisallowMultipleComponent] // RVA: 0xCA6 Offset: 0xCA6 VA: 0xCA6
public class ToggleGroup : UIBehaviour // TypeDefIndex: 2279
{
	// Fields
	[SerializeField] // RVA: 0xD80 Offset: 0xD80 VA: 0xD80
	private bool m_AllowSwitchOff; // 0xC
	private List<Toggle> m_Toggles; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xD81 Offset: 0xD81 VA: 0xD81
	private static Predicate<Toggle> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xD82 Offset: 0xD82 VA: 0xD82
	private static Func<Toggle, bool> <>f__am$cache1; // 0x4

	// Properties
	public bool allowSwitchOff { get; set; }

	// Methods

	// RVA: 0x8AF Offset: 0x8AF VA: 0x8AF
	protected void .ctor() { }

	// RVA: 0xCF6 Offset: 0xCF6 VA: 0xCF6
	public bool get_allowSwitchOff() { }

	// RVA: 0x7D1 Offset: 0x7D1 VA: 0x7D1
	public void set_allowSwitchOff(bool value) { }

	// RVA: 0x7D2 Offset: 0x7D2 VA: 0x7D2
	private void ValidateToggleIsInGroup(Toggle toggle) { }

	// RVA: 0x7D3 Offset: 0x7D3 VA: 0x7D3
	public void NotifyToggleOn(Toggle toggle) { }

	// RVA: 0x7D4 Offset: 0x7D4 VA: 0x7D4
	public void UnregisterToggle(Toggle toggle) { }

	// RVA: 0x7D5 Offset: 0x7D5 VA: 0x7D5
	public void RegisterToggle(Toggle toggle) { }

	// RVA: 0xCF7 Offset: 0xCF7 VA: 0xCF7
	public bool AnyTogglesOn() { }

	// RVA: 0xCF8 Offset: 0xCF8 VA: 0xCF8
	public IEnumerable<Toggle> ActiveToggles() { }

	// RVA: 0x8B0 Offset: 0x8B0 VA: 0x8B0
	public void SetAllTogglesOff() { }

	[CompilerGeneratedAttribute] // RVA: 0xDFC Offset: 0xDFC VA: 0xDFC
	// RVA: 0xCF9 Offset: 0xCF9 VA: 0xCF9
	private static bool <AnyTogglesOn>m__0(Toggle x) { }

	[CompilerGeneratedAttribute] // RVA: 0xDFD Offset: 0xDFD VA: 0xDFD
	// RVA: 0xCFA Offset: 0xCFA VA: 0xCFA
	private static bool <ActiveToggles>m__1(Toggle x) { }
}

// Namespace: UnityEngine.UI
public class ClipperRegistry // TypeDefIndex: 2280
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet<IClipper> m_Clippers; // 0x8

	// Properties
	public static ClipperRegistry instance { get; }

	// Methods

	// RVA: 0x7A5 Offset: 0x7A5 VA: 0x7A5
	protected void .ctor() { }

	// RVA: 0x29A Offset: 0x29A VA: 0x29A
	public static ClipperRegistry get_instance() { }

	// RVA: 0x7A6 Offset: 0x7A6 VA: 0x7A6
	public void Cull() { }

	// RVA: 0x7A7 Offset: 0x7A7 VA: 0x7A7
	public static void Register(IClipper c) { }

	// RVA: 0x7A8 Offset: 0x7A8 VA: 0x7A8
	public static void Unregister(IClipper c) { }
}

// Namespace: UnityEngine.UI
public static class Clipping // TypeDefIndex: 2281
{
	// Methods

	// RVA: 0x3A7 Offset: 0x3A7 VA: 0x3A7
	public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) { }

	// RVA: 0x3A8 Offset: 0x3A8 VA: 0x3A8
	private static Rect RectIntersect(Rect a, Rect b) { }
}

// Namespace: UnityEngine.UI
public interface IClipper // TypeDefIndex: 2282
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void PerformClipping() { }
}

// Namespace: UnityEngine.UI
public interface IClippable // TypeDefIndex: 2283
{
	// Properties
	public abstract GameObject gameObject { get; }
	public abstract RectTransform rectTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract GameObject get_gameObject() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void RecalculateClipping() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract RectTransform get_rectTransform() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Cull(Rect clipRect, bool validRect) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetClipRect(Rect value, bool validRect) { }
}

// Namespace: UnityEngine.UI
internal class RectangularVertexClipper // TypeDefIndex: 2284
{
	// Fields
	private readonly Vector3[] m_WorldCorners; // 0x8
	private readonly Vector3[] m_CanvasCorners; // 0xC

	// Methods

	// RVA: 0x864 Offset: 0x864 VA: 0x864
	public void .ctor() { }

	// RVA: 0x116 Offset: 0x116 VA: 0x116
	public Rect GetCanvasRect(RectTransform t, Canvas c) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA7 Offset: 0xCA7 VA: 0xCA7
[ExecuteAlways] // RVA: 0xCA7 Offset: 0xCA7 VA: 0xCA7
[RequireComponent] // RVA: 0xCA7 Offset: 0xCA7 VA: 0xCA7
[DisallowMultipleComponent] // RVA: 0xCA7 Offset: 0xCA7 VA: 0xCA7
public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 2285
{
	// Fields
	[SerializeField] // RVA: 0xD83 Offset: 0xD83 VA: 0xD83
	private AspectRatioFitter.AspectMode m_AspectMode; // 0xC
	[SerializeField] // RVA: 0xD84 Offset: 0xD84 VA: 0xD84
	private float m_AspectRatio; // 0x10
	private RectTransform m_Rect; // 0x14
	private bool m_DelayedSetDirty; // 0x18
	private DrivenRectTransformTracker m_Tracker; // 0x19

	// Properties
	public AspectRatioFitter.AspectMode aspectMode { get; set; }
	public float aspectRatio { get; set; }
	private RectTransform rectTransform { get; }

	// Methods

	// RVA: 0x782 Offset: 0x782 VA: 0x782
	protected void .ctor() { }

	// RVA: 0xBE9 Offset: 0xBE9 VA: 0xBE9
	public AspectRatioFitter.AspectMode get_aspectMode() { }

	// RVA: 0x6A5 Offset: 0x6A5 VA: 0x6A5
	public void set_aspectMode(AspectRatioFitter.AspectMode value) { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	public float get_aspectRatio() { }

	// RVA: 0x1E Offset: 0x1E VA: 0x1E
	public void set_aspectRatio(float value) { }

	// RVA: 0xBEA Offset: 0xBEA VA: 0xBEA
	private RectTransform get_rectTransform() { }

	// RVA: 0x783 Offset: 0x783 VA: 0x783 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x784 Offset: 0x784 VA: 0x784 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x785 Offset: 0x785 VA: 0x785 Slot: 19
	protected virtual void Update() { }

	// RVA: 0x786 Offset: 0x786 VA: 0x786 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x787 Offset: 0x787 VA: 0x787
	private void UpdateRect() { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	private float GetSizeDeltaToProduceSize(float size, int axis) { }

	// RVA: 0x6A6 Offset: 0x6A6 VA: 0x6A6
	private Vector2 GetParentSize() { }

	// RVA: 0x788 Offset: 0x788 VA: 0x788 Slot: 20
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0x789 Offset: 0x789 VA: 0x789 Slot: 21
	public virtual void SetLayoutVertical() { }

	// RVA: 0x78A Offset: 0x78A VA: 0x78A
	protected void SetDirty() { }
}

// Namespace: 
public enum AspectRatioFitter.AspectMode // TypeDefIndex: 2286
{
	// Fields
	public int value__; // 0x0
	public const AspectRatioFitter.AspectMode None = 0;
	public const AspectRatioFitter.AspectMode WidthControlsHeight = 1;
	public const AspectRatioFitter.AspectMode HeightControlsWidth = 2;
	public const AspectRatioFitter.AspectMode FitInParent = 3;
	public const AspectRatioFitter.AspectMode EnvelopeParent = 4;
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0xCA8 Offset: 0xCA8 VA: 0xCA8
[ExecuteAlways] // RVA: 0xCA8 Offset: 0xCA8 VA: 0xCA8
[AddComponentMenu] // RVA: 0xCA8 Offset: 0xCA8 VA: 0xCA8
public class CanvasScaler : UIBehaviour // TypeDefIndex: 2287
{
	// Fields
	[TooltipAttribute] // RVA: 0xD85 Offset: 0xD85 VA: 0xD85
	[SerializeField] // RVA: 0xD85 Offset: 0xD85 VA: 0xD85
	private CanvasScaler.ScaleMode m_UiScaleMode; // 0xC
	[TooltipAttribute] // RVA: 0xD86 Offset: 0xD86 VA: 0xD86
	[SerializeField] // RVA: 0xD86 Offset: 0xD86 VA: 0xD86
	protected float m_ReferencePixelsPerUnit; // 0x10
	[TooltipAttribute] // RVA: 0xD87 Offset: 0xD87 VA: 0xD87
	[SerializeField] // RVA: 0xD87 Offset: 0xD87 VA: 0xD87
	protected float m_ScaleFactor; // 0x14
	[TooltipAttribute] // RVA: 0xD88 Offset: 0xD88 VA: 0xD88
	[SerializeField] // RVA: 0xD88 Offset: 0xD88 VA: 0xD88
	protected Vector2 m_ReferenceResolution; // 0x18
	[TooltipAttribute] // RVA: 0xD89 Offset: 0xD89 VA: 0xD89
	[SerializeField] // RVA: 0xD89 Offset: 0xD89 VA: 0xD89
	protected CanvasScaler.ScreenMatchMode m_ScreenMatchMode; // 0x20
	[TooltipAttribute] // RVA: 0xD8A Offset: 0xD8A VA: 0xD8A
	[RangeAttribute] // RVA: 0xD8A Offset: 0xD8A VA: 0xD8A
	[SerializeField] // RVA: 0xD8A Offset: 0xD8A VA: 0xD8A
	protected float m_MatchWidthOrHeight; // 0x24
	private const float kLogBase = 2;
	[TooltipAttribute] // RVA: 0xD8B Offset: 0xD8B VA: 0xD8B
	[SerializeField] // RVA: 0xD8B Offset: 0xD8B VA: 0xD8B
	protected CanvasScaler.Unit m_PhysicalUnit; // 0x28
	[TooltipAttribute] // RVA: 0xD8C Offset: 0xD8C VA: 0xD8C
	[SerializeField] // RVA: 0xD8C Offset: 0xD8C VA: 0xD8C
	protected float m_FallbackScreenDPI; // 0x2C
	[TooltipAttribute] // RVA: 0xD8D Offset: 0xD8D VA: 0xD8D
	[SerializeField] // RVA: 0xD8D Offset: 0xD8D VA: 0xD8D
	protected float m_DefaultSpriteDPI; // 0x30
	[TooltipAttribute] // RVA: 0xD8E Offset: 0xD8E VA: 0xD8E
	[SerializeField] // RVA: 0xD8E Offset: 0xD8E VA: 0xD8E
	protected float m_DynamicPixelsPerUnit; // 0x34
	private Canvas m_Canvas; // 0x38
	private float m_PrevScaleFactor; // 0x3C
	private float m_PrevReferencePixelsPerUnit; // 0x40

	// Properties
	public CanvasScaler.ScaleMode uiScaleMode { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public float scaleFactor { get; set; }
	public Vector2 referenceResolution { get; set; }
	public CanvasScaler.ScreenMatchMode screenMatchMode { get; set; }
	public float matchWidthOrHeight { get; set; }
	public CanvasScaler.Unit physicalUnit { get; set; }
	public float fallbackScreenDPI { get; set; }
	public float defaultSpriteDPI { get; set; }
	public float dynamicPixelsPerUnit { get; set; }

	// Methods

	// RVA: 0x796 Offset: 0x796 VA: 0x796
	protected void .ctor() { }

	// RVA: 0xBF1 Offset: 0xBF1 VA: 0xBF1
	public CanvasScaler.ScaleMode get_uiScaleMode() { }

	// RVA: 0x6AB Offset: 0x6AB VA: 0x6AB
	public void set_uiScaleMode(CanvasScaler.ScaleMode value) { }

	// RVA: 0x33 Offset: 0x33 VA: 0x33
	public float get_referencePixelsPerUnit() { }

	// RVA: 0x1F Offset: 0x1F VA: 0x1F
	public void set_referencePixelsPerUnit(float value) { }

	// RVA: 0x34 Offset: 0x34 VA: 0x34
	public float get_scaleFactor() { }

	// RVA: 0x20 Offset: 0x20 VA: 0x20
	public void set_scaleFactor(float value) { }

	// RVA: 0x6AC Offset: 0x6AC VA: 0x6AC
	public Vector2 get_referenceResolution() { }

	// RVA: 0x6AD Offset: 0x6AD VA: 0x6AD
	public void set_referenceResolution(Vector2 value) { }

	// RVA: 0xBF2 Offset: 0xBF2 VA: 0xBF2
	public CanvasScaler.ScreenMatchMode get_screenMatchMode() { }

	// RVA: 0x6AE Offset: 0x6AE VA: 0x6AE
	public void set_screenMatchMode(CanvasScaler.ScreenMatchMode value) { }

	// RVA: 0x35 Offset: 0x35 VA: 0x35
	public float get_matchWidthOrHeight() { }

	// RVA: 0x21 Offset: 0x21 VA: 0x21
	public void set_matchWidthOrHeight(float value) { }

	// RVA: 0xBF3 Offset: 0xBF3 VA: 0xBF3
	public CanvasScaler.Unit get_physicalUnit() { }

	// RVA: 0x6AF Offset: 0x6AF VA: 0x6AF
	public void set_physicalUnit(CanvasScaler.Unit value) { }

	// RVA: 0x36 Offset: 0x36 VA: 0x36
	public float get_fallbackScreenDPI() { }

	// RVA: 0x22 Offset: 0x22 VA: 0x22
	public void set_fallbackScreenDPI(float value) { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37
	public float get_defaultSpriteDPI() { }

	// RVA: 0x23 Offset: 0x23 VA: 0x23
	public void set_defaultSpriteDPI(float value) { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38
	public float get_dynamicPixelsPerUnit() { }

	// RVA: 0x24 Offset: 0x24 VA: 0x24
	public void set_dynamicPixelsPerUnit(float value) { }

	// RVA: 0x797 Offset: 0x797 VA: 0x797 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x798 Offset: 0x798 VA: 0x798 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x799 Offset: 0x799 VA: 0x799 Slot: 17
	protected virtual void Update() { }

	// RVA: 0x79A Offset: 0x79A VA: 0x79A Slot: 18
	protected virtual void Handle() { }

	// RVA: 0x79B Offset: 0x79B VA: 0x79B Slot: 19
	protected virtual void HandleWorldCanvas() { }

	// RVA: 0x79C Offset: 0x79C VA: 0x79C Slot: 20
	protected virtual void HandleConstantPixelSize() { }

	// RVA: 0x79D Offset: 0x79D VA: 0x79D Slot: 21
	protected virtual void HandleScaleWithScreenSize() { }

	// RVA: 0x79E Offset: 0x79E VA: 0x79E Slot: 22
	protected virtual void HandleConstantPhysicalSize() { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	protected void SetScaleFactor(float scaleFactor) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit) { }
}

// Namespace: 
public enum CanvasScaler.ScaleMode // TypeDefIndex: 2288
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.ScaleMode ConstantPixelSize = 0;
	public const CanvasScaler.ScaleMode ScaleWithScreenSize = 1;
	public const CanvasScaler.ScaleMode ConstantPhysicalSize = 2;
}

// Namespace: 
public enum CanvasScaler.ScreenMatchMode // TypeDefIndex: 2289
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.ScreenMatchMode MatchWidthOrHeight = 0;
	public const CanvasScaler.ScreenMatchMode Expand = 1;
	public const CanvasScaler.ScreenMatchMode Shrink = 2;
}

// Namespace: 
public enum CanvasScaler.Unit // TypeDefIndex: 2290
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.Unit Centimeters = 0;
	public const CanvasScaler.Unit Millimeters = 1;
	public const CanvasScaler.Unit Inches = 2;
	public const CanvasScaler.Unit Points = 3;
	public const CanvasScaler.Unit Picas = 4;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCA9 Offset: 0xCA9 VA: 0xCA9
[ExecuteAlways] // RVA: 0xCA9 Offset: 0xCA9 VA: 0xCA9
[RequireComponent] // RVA: 0xCA9 Offset: 0xCA9 VA: 0xCA9
public class ContentSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 2291
{
	// Fields
	[SerializeField] // RVA: 0xD8F Offset: 0xD8F VA: 0xD8F
	protected ContentSizeFitter.FitMode m_HorizontalFit; // 0xC
	[SerializeField] // RVA: 0xD90 Offset: 0xD90 VA: 0xD90
	protected ContentSizeFitter.FitMode m_VerticalFit; // 0x10
	private RectTransform m_Rect; // 0x14
	private DrivenRectTransformTracker m_Tracker; // 0x18

	// Properties
	public ContentSizeFitter.FitMode horizontalFit { get; set; }
	public ContentSizeFitter.FitMode verticalFit { get; set; }
	private RectTransform rectTransform { get; }

	// Methods

	// RVA: 0x7AA Offset: 0x7AA VA: 0x7AA
	protected void .ctor() { }

	// RVA: 0xBF8 Offset: 0xBF8 VA: 0xBF8
	public ContentSizeFitter.FitMode get_horizontalFit() { }

	// RVA: 0x6BA Offset: 0x6BA VA: 0x6BA
	public void set_horizontalFit(ContentSizeFitter.FitMode value) { }

	// RVA: 0xBF9 Offset: 0xBF9 VA: 0xBF9
	public ContentSizeFitter.FitMode get_verticalFit() { }

	// RVA: 0x6BB Offset: 0x6BB VA: 0x6BB
	public void set_verticalFit(ContentSizeFitter.FitMode value) { }

	// RVA: 0xBFA Offset: 0xBFA VA: 0xBFA
	private RectTransform get_rectTransform() { }

	// RVA: 0x7AB Offset: 0x7AB VA: 0x7AB Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x7AC Offset: 0x7AC VA: 0x7AC Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x7AD Offset: 0x7AD VA: 0x7AD Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x6BC Offset: 0x6BC VA: 0x6BC
	private void HandleSelfFittingAlongAxis(int axis) { }

	// RVA: 0x7AE Offset: 0x7AE VA: 0x7AE Slot: 19
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0x7AF Offset: 0x7AF VA: 0x7AF Slot: 20
	public virtual void SetLayoutVertical() { }

	// RVA: 0x7B0 Offset: 0x7B0 VA: 0x7B0
	protected void SetDirty() { }
}

// Namespace: 
public enum ContentSizeFitter.FitMode // TypeDefIndex: 2292
{
	// Fields
	public int value__; // 0x0
	public const ContentSizeFitter.FitMode Unconstrained = 0;
	public const ContentSizeFitter.FitMode MinSize = 1;
	public const ContentSizeFitter.FitMode PreferredSize = 2;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCAA Offset: 0xCAA VA: 0xCAA
public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 2293
{
	// Fields
	[SerializeField] // RVA: 0xD91 Offset: 0xD91 VA: 0xD91
	protected GridLayoutGroup.Corner m_StartCorner; // 0x38
	[SerializeField] // RVA: 0xD92 Offset: 0xD92 VA: 0xD92
	protected GridLayoutGroup.Axis m_StartAxis; // 0x3C
	[SerializeField] // RVA: 0xD93 Offset: 0xD93 VA: 0xD93
	protected Vector2 m_CellSize; // 0x40
	[SerializeField] // RVA: 0xD94 Offset: 0xD94 VA: 0xD94
	protected Vector2 m_Spacing; // 0x48
	[SerializeField] // RVA: 0xD95 Offset: 0xD95 VA: 0xD95
	protected GridLayoutGroup.Constraint m_Constraint; // 0x50
	[SerializeField] // RVA: 0xD96 Offset: 0xD96 VA: 0xD96
	protected int m_ConstraintCount; // 0x54

	// Properties
	public GridLayoutGroup.Corner startCorner { get; set; }
	public GridLayoutGroup.Axis startAxis { get; set; }
	public Vector2 cellSize { get; set; }
	public Vector2 spacing { get; set; }
	public GridLayoutGroup.Constraint constraint { get; set; }
	public int constraintCount { get; set; }

	// Methods

	// RVA: 0x7E2 Offset: 0x7E2 VA: 0x7E2
	protected void .ctor() { }

	// RVA: 0xC3C Offset: 0xC3C VA: 0xC3C
	public GridLayoutGroup.Corner get_startCorner() { }

	// RVA: 0x705 Offset: 0x705 VA: 0x705
	public void set_startCorner(GridLayoutGroup.Corner value) { }

	// RVA: 0xC3D Offset: 0xC3D VA: 0xC3D
	public GridLayoutGroup.Axis get_startAxis() { }

	// RVA: 0x706 Offset: 0x706 VA: 0x706
	public void set_startAxis(GridLayoutGroup.Axis value) { }

	// RVA: 0x707 Offset: 0x707 VA: 0x707
	public Vector2 get_cellSize() { }

	// RVA: 0x708 Offset: 0x708 VA: 0x708
	public void set_cellSize(Vector2 value) { }

	// RVA: 0x709 Offset: 0x709 VA: 0x709
	public Vector2 get_spacing() { }

	// RVA: 0x70A Offset: 0x70A VA: 0x70A
	public void set_spacing(Vector2 value) { }

	// RVA: 0xC3E Offset: 0xC3E VA: 0xC3E
	public GridLayoutGroup.Constraint get_constraint() { }

	// RVA: 0x70B Offset: 0x70B VA: 0x70B
	public void set_constraint(GridLayoutGroup.Constraint value) { }

	// RVA: 0xC3F Offset: 0xC3F VA: 0xC3F
	public int get_constraintCount() { }

	// RVA: 0x70C Offset: 0x70C VA: 0x70C
	public void set_constraintCount(int value) { }

	// RVA: 0x7E3 Offset: 0x7E3 VA: 0x7E3 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }

	// RVA: 0x7E4 Offset: 0x7E4 VA: 0x7E4 Slot: 29
	public override void CalculateLayoutInputVertical() { }

	// RVA: 0x7E5 Offset: 0x7E5 VA: 0x7E5 Slot: 37
	public override void SetLayoutHorizontal() { }

	// RVA: 0x7E6 Offset: 0x7E6 VA: 0x7E6 Slot: 38
	public override void SetLayoutVertical() { }

	// RVA: 0x70D Offset: 0x70D VA: 0x70D
	private void SetCellsAlongAxis(int axis) { }
}

// Namespace: 
public enum GridLayoutGroup.Corner // TypeDefIndex: 2294
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Corner UpperLeft = 0;
	public const GridLayoutGroup.Corner UpperRight = 1;
	public const GridLayoutGroup.Corner LowerLeft = 2;
	public const GridLayoutGroup.Corner LowerRight = 3;
}

// Namespace: 
public enum GridLayoutGroup.Axis // TypeDefIndex: 2295
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Axis Horizontal = 0;
	public const GridLayoutGroup.Axis Vertical = 1;
}

// Namespace: 
public enum GridLayoutGroup.Constraint // TypeDefIndex: 2296
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Constraint Flexible = 0;
	public const GridLayoutGroup.Constraint FixedColumnCount = 1;
	public const GridLayoutGroup.Constraint FixedRowCount = 2;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCAB Offset: 0xCAB VA: 0xCAB
public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2297
{
	// Methods

	// RVA: 0x7E7 Offset: 0x7E7 VA: 0x7E7
	protected void .ctor() { }

	// RVA: 0x7E8 Offset: 0x7E8 VA: 0x7E8 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }

	// RVA: 0x7E9 Offset: 0x7E9 VA: 0x7E9 Slot: 29
	public override void CalculateLayoutInputVertical() { }

	// RVA: 0x7EA Offset: 0x7EA VA: 0x7EA Slot: 37
	public override void SetLayoutHorizontal() { }

	// RVA: 0x7EB Offset: 0x7EB VA: 0x7EB Slot: 38
	public override void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 2298
{
	// Fields
	[SerializeField] // RVA: 0xD97 Offset: 0xD97 VA: 0xD97
	protected float m_Spacing; // 0x38
	[SerializeField] // RVA: 0xD98 Offset: 0xD98 VA: 0xD98
	protected bool m_ChildForceExpandWidth; // 0x3C
	[SerializeField] // RVA: 0xD99 Offset: 0xD99 VA: 0xD99
	protected bool m_ChildForceExpandHeight; // 0x3D
	[SerializeField] // RVA: 0xD9A Offset: 0xD9A VA: 0xD9A
	protected bool m_ChildControlWidth; // 0x3E
	[SerializeField] // RVA: 0xD9B Offset: 0xD9B VA: 0xD9B
	protected bool m_ChildControlHeight; // 0x3F

	// Properties
	public float spacing { get; set; }
	public bool childForceExpandWidth { get; set; }
	public bool childForceExpandHeight { get; set; }
	public bool childControlWidth { get; set; }
	public bool childControlHeight { get; set; }

	// Methods

	// RVA: 0x7EC Offset: 0x7EC VA: 0x7EC
	protected void .ctor() { }

	// RVA: 0x42 Offset: 0x42 VA: 0x42
	public float get_spacing() { }

	// RVA: 0x32 Offset: 0x32 VA: 0x32
	public void set_spacing(float value) { }

	// RVA: 0xC40 Offset: 0xC40 VA: 0xC40
	public bool get_childForceExpandWidth() { }

	// RVA: 0x70E Offset: 0x70E VA: 0x70E
	public void set_childForceExpandWidth(bool value) { }

	// RVA: 0xC41 Offset: 0xC41 VA: 0xC41
	public bool get_childForceExpandHeight() { }

	// RVA: 0x70F Offset: 0x70F VA: 0x70F
	public void set_childForceExpandHeight(bool value) { }

	// RVA: 0xC42 Offset: 0xC42 VA: 0xC42
	public bool get_childControlWidth() { }

	// RVA: 0x710 Offset: 0x710 VA: 0x710
	public void set_childControlWidth(bool value) { }

	// RVA: 0xC43 Offset: 0xC43 VA: 0xC43
	public bool get_childControlHeight() { }

	// RVA: 0x711 Offset: 0x711 VA: 0x711
	public void set_childControlHeight(bool value) { }

	// RVA: 0x3AC Offset: 0x3AC VA: 0x3AC
	protected void CalcAlongAxis(int axis, bool isVertical) { }

	// RVA: 0x3AD Offset: 0x3AD VA: 0x3AD
	protected void SetChildrenAlongAxis(int axis, bool isVertical) { }

	// RVA: 0x17 Offset: 0x17 VA: 0x17
	private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, out float min, out float preferred, out float flexible) { }
}

// Namespace: UnityEngine.UI
public interface ILayoutElement // TypeDefIndex: 2299
{
	// Properties
	public abstract float minWidth { get; }
	public abstract float preferredWidth { get; }
	public abstract float flexibleWidth { get; }
	public abstract float minHeight { get; }
	public abstract float preferredHeight { get; }
	public abstract float flexibleHeight { get; }
	public abstract int layoutPriority { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CalculateLayoutInputHorizontal() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void CalculateLayoutInputVertical() { }

	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_minWidth() { }

	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_preferredWidth() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract float get_flexibleWidth() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_minHeight() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract float get_preferredHeight() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_flexibleHeight() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_layoutPriority() { }
}

// Namespace: UnityEngine.UI
public interface ILayoutController // TypeDefIndex: 2300
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void SetLayoutHorizontal() { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
public interface ILayoutGroup : ILayoutController // TypeDefIndex: 2301
{}

// Namespace: UnityEngine.UI
public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 2302
{}

// Namespace: UnityEngine.UI
public interface ILayoutIgnorer // TypeDefIndex: 2303
{
	// Properties
	public abstract bool ignoreLayout { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_ignoreLayout() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCAC Offset: 0xCAC VA: 0xCAC
[RequireComponent] // RVA: 0xCAC Offset: 0xCAC VA: 0xCAC
[ExecuteAlways] // RVA: 0xCAC Offset: 0xCAC VA: 0xCAC
public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 2304
{
	// Fields
	[SerializeField] // RVA: 0xD9C Offset: 0xD9C VA: 0xD9C
	private bool m_IgnoreLayout; // 0xC
	[SerializeField] // RVA: 0xD9D Offset: 0xD9D VA: 0xD9D
	private float m_MinWidth; // 0x10
	[SerializeField] // RVA: 0xD9E Offset: 0xD9E VA: 0xD9E
	private float m_MinHeight; // 0x14
	[SerializeField] // RVA: 0xD9F Offset: 0xD9F VA: 0xD9F
	private float m_PreferredWidth; // 0x18
	[SerializeField] // RVA: 0xDA0 Offset: 0xDA0 VA: 0xDA0
	private float m_PreferredHeight; // 0x1C
	[SerializeField] // RVA: 0xDA1 Offset: 0xDA1 VA: 0xDA1
	private float m_FlexibleWidth; // 0x20
	[SerializeField] // RVA: 0xDA2 Offset: 0xDA2 VA: 0xDA2
	private float m_FlexibleHeight; // 0x24
	[SerializeField] // RVA: 0xDA3 Offset: 0xDA3 VA: 0xDA3
	private int m_LayoutPriority; // 0x28

	// Properties
	public virtual bool ignoreLayout { get; set; }
	public virtual float minWidth { get; set; }
	public virtual float minHeight { get; set; }
	public virtual float preferredWidth { get; set; }
	public virtual float preferredHeight { get; set; }
	public virtual float flexibleWidth { get; set; }
	public virtual float flexibleHeight { get; set; }
	public virtual int layoutPriority { get; set; }

	// Methods

	// RVA: 0x823 Offset: 0x823 VA: 0x823
	protected void .ctor() { }

	// RVA: 0xC81 Offset: 0xC81 VA: 0xC81 Slot: 27
	public virtual bool get_ignoreLayout() { }

	// RVA: 0x750 Offset: 0x750 VA: 0x750 Slot: 28
	public virtual void set_ignoreLayout(bool value) { }

	// RVA: 0x824 Offset: 0x824 VA: 0x824 Slot: 29
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x825 Offset: 0x825 VA: 0x825 Slot: 30
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x54 Offset: 0x54 VA: 0x54 Slot: 31
	public virtual float get_minWidth() { }

	// RVA: 0x37 Offset: 0x37 VA: 0x37 Slot: 32
	public virtual void set_minWidth(float value) { }

	// RVA: 0x55 Offset: 0x55 VA: 0x55 Slot: 33
	public virtual float get_minHeight() { }

	// RVA: 0x38 Offset: 0x38 VA: 0x38 Slot: 34
	public virtual void set_minHeight(float value) { }

	// RVA: 0x56 Offset: 0x56 VA: 0x56 Slot: 35
	public virtual float get_preferredWidth() { }

	// RVA: 0x39 Offset: 0x39 VA: 0x39 Slot: 36
	public virtual void set_preferredWidth(float value) { }

	// RVA: 0x57 Offset: 0x57 VA: 0x57 Slot: 37
	public virtual float get_preferredHeight() { }

	// RVA: 0x3A Offset: 0x3A VA: 0x3A Slot: 38
	public virtual void set_preferredHeight(float value) { }

	// RVA: 0x58 Offset: 0x58 VA: 0x58 Slot: 39
	public virtual float get_flexibleWidth() { }

	// RVA: 0x3B Offset: 0x3B VA: 0x3B Slot: 40
	public virtual void set_flexibleWidth(float value) { }

	// RVA: 0x59 Offset: 0x59 VA: 0x59 Slot: 41
	public virtual float get_flexibleHeight() { }

	// RVA: 0x3C Offset: 0x3C VA: 0x3C Slot: 42
	public virtual void set_flexibleHeight(float value) { }

	// RVA: 0xC82 Offset: 0xC82 VA: 0xC82 Slot: 43
	public virtual int get_layoutPriority() { }

	// RVA: 0x751 Offset: 0x751 VA: 0x751 Slot: 44
	public virtual void set_layoutPriority(int value) { }

	// RVA: 0x826 Offset: 0x826 VA: 0x826 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x827 Offset: 0x827 VA: 0x827 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x828 Offset: 0x828 VA: 0x828 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x829 Offset: 0x829 VA: 0x829 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x82A Offset: 0x82A VA: 0x82A Slot: 11
	protected override void OnBeforeTransformParentChanged() { }

	// RVA: 0x82B Offset: 0x82B VA: 0x82B
	protected void SetDirty() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0xCAD Offset: 0xCAD VA: 0xCAD
[ExecuteAlways] // RVA: 0xCAD Offset: 0xCAD VA: 0xCAD
[RequireComponent] // RVA: 0xCAD Offset: 0xCAD VA: 0xCAD
public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup, ILayoutController // TypeDefIndex: 2305
{
	// Fields
	[SerializeField] // RVA: 0xDA4 Offset: 0xDA4 VA: 0xDA4
	protected RectOffset m_Padding; // 0xC
	[SerializeField] // RVA: 0xDA5 Offset: 0xDA5 VA: 0xDA5
	protected TextAnchor m_ChildAlignment; // 0x10
	private RectTransform m_Rect; // 0x14
	protected DrivenRectTransformTracker m_Tracker; // 0x18
	private Vector2 m_TotalMinSize; // 0x1C
	private Vector2 m_TotalPreferredSize; // 0x24
	private Vector2 m_TotalFlexibleSize; // 0x2C
	private List<RectTransform> m_RectChildren; // 0x34

	// Properties
	public RectOffset padding { get; set; }
	public TextAnchor childAlignment { get; set; }
	protected RectTransform rectTransform { get; }
	protected List<RectTransform> rectChildren { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }
	private bool isRootLayoutGroup { get; }

	// Methods

	// RVA: 0x82C Offset: 0x82C VA: 0x82C
	protected void .ctor() { }

	// RVA: 0xC83 Offset: 0xC83 VA: 0xC83
	public RectOffset get_padding() { }

	// RVA: 0x752 Offset: 0x752 VA: 0x752
	public void set_padding(RectOffset value) { }

	// RVA: 0xC84 Offset: 0xC84 VA: 0xC84
	public TextAnchor get_childAlignment() { }

	// RVA: 0x753 Offset: 0x753 VA: 0x753
	public void set_childAlignment(TextAnchor value) { }

	// RVA: 0xC85 Offset: 0xC85 VA: 0xC85
	protected RectTransform get_rectTransform() { }

	// RVA: 0xC86 Offset: 0xC86 VA: 0xC86
	protected List<RectTransform> get_rectChildren() { }

	// RVA: 0x82D Offset: 0x82D VA: 0x82D Slot: 28
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: -1 Offset: -1 Slot: 29
	public abstract void CalculateLayoutInputVertical() { }

	// RVA: 0x5A Offset: 0x5A VA: 0x5A Slot: 30
	public virtual float get_minWidth() { }

	// RVA: 0x5B Offset: 0x5B VA: 0x5B Slot: 31
	public virtual float get_preferredWidth() { }

	// RVA: 0x5C Offset: 0x5C VA: 0x5C Slot: 32
	public virtual float get_flexibleWidth() { }

	// RVA: 0x5D Offset: 0x5D VA: 0x5D Slot: 33
	public virtual float get_minHeight() { }

	// RVA: 0x5E Offset: 0x5E VA: 0x5E Slot: 34
	public virtual float get_preferredHeight() { }

	// RVA: 0x5F Offset: 0x5F VA: 0x5F Slot: 35
	public virtual float get_flexibleHeight() { }

	// RVA: 0xC87 Offset: 0xC87 VA: 0xC87 Slot: 36
	public virtual int get_layoutPriority() { }

	// RVA: -1 Offset: -1 Slot: 37
	public abstract void SetLayoutHorizontal() { }

	// RVA: -1 Offset: -1 Slot: 38
	public abstract void SetLayoutVertical() { }

	// RVA: 0x82E Offset: 0x82E VA: 0x82E Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x82F Offset: 0x82F VA: 0x82F Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x830 Offset: 0x830 VA: 0x830 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x25 Offset: 0x25 VA: 0x25
	protected float GetTotalMinSize(int axis) { }

	// RVA: 0x26 Offset: 0x26 VA: 0x26
	protected float GetTotalPreferredSize(int axis) { }

	// RVA: 0x27 Offset: 0x27 VA: 0x27
	protected float GetTotalFlexibleSize(int axis) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding) { }

	// RVA: 0x28 Offset: 0x28 VA: 0x28
	protected float GetAlignmentOnAxis(int axis) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size) { }

	// RVA: 0xC88 Offset: 0xC88 VA: 0xC88
	private bool get_isRootLayoutGroup() { }

	// RVA: 0x831 Offset: 0x831 VA: 0x831 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x832 Offset: 0x832 VA: 0x832 Slot: 39
	protected virtual void OnTransformChildrenChanged() { }

	// RVA: -1 Offset: -1
	protected void SetProperty<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x480 Offset: 0x480 VA: 0x480
	|-LayoutGroup.SetProperty<bool>
	|
	|-RVA: 0x47F Offset: 0x47F VA: 0x47F
	|-LayoutGroup.SetProperty<int>
	|
	|-RVA: 0x47D Offset: 0x47D VA: 0x47D
	|-LayoutGroup.SetProperty<Int32Enum>
	|-LayoutGroup.SetProperty<TextAnchor>
	|-LayoutGroup.SetProperty<GridLayoutGroup.Axis>
	|-LayoutGroup.SetProperty<GridLayoutGroup.Constraint>
	|-LayoutGroup.SetProperty<GridLayoutGroup.Corner>
	|
	|-RVA: 0x44F Offset: 0x44F VA: 0x44F
	|-LayoutGroup.SetProperty<object>
	|-LayoutGroup.SetProperty<RectOffset>
	|
	|-RVA: 0x13 Offset: 0x13 VA: 0x13
	|-LayoutGroup.SetProperty<float>
	|
	|-RVA: 0x47E Offset: 0x47E VA: 0x47E
	|-LayoutGroup.SetProperty<Vector2>
	*/

	// RVA: 0x833 Offset: 0x833 VA: 0x833
	protected void SetDirty() { }

	[DebuggerHiddenAttribute] // RVA: 0xDFE Offset: 0xDFE VA: 0xDFE
	// RVA: 0x604 Offset: 0x604 VA: 0x604
	private IEnumerator DelayedSetDirty(RectTransform rectTransform) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCBF Offset: 0xCBF VA: 0xCBF
private sealed class LayoutGroup.<DelayedSetDirty>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 2306
{
	// Fields
	internal RectTransform rectTransform; // 0x8
	internal object $current; // 0xC
	internal bool $disposing; // 0x10
	internal int $PC; // 0x14

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xE31 Offset: 0xE31 VA: 0xE31
	// RVA: 0x834 Offset: 0x834 VA: 0x834
	public void .ctor() { }

	// RVA: 0xC89 Offset: 0xC89 VA: 0xC89 Slot: 4
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xE32 Offset: 0xE32 VA: 0xE32
	// RVA: 0xC8A Offset: 0xC8A VA: 0xC8A Slot: 7
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE33 Offset: 0xE33 VA: 0xE33
	// RVA: 0xC8B Offset: 0xC8B VA: 0xC8B Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xE34 Offset: 0xE34 VA: 0xE34
	// RVA: 0x835 Offset: 0x835 VA: 0x835 Slot: 6
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xE35 Offset: 0xE35 VA: 0xE35
	// RVA: 0x836 Offset: 0x836 VA: 0x836 Slot: 8
	public void Reset() { }
}

// Namespace: UnityEngine.UI
public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 2307
{
	// Fields
	private RectTransform m_ToRebuild; // 0x8
	private int m_CachedHashFromTransform; // 0xC
	private static ObjectPool<LayoutRebuilder> s_Rebuilders; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xDA6 Offset: 0xDA6 VA: 0xDA6
	private static RectTransform.ReapplyDrivenProperties <>f__mg$cache0; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xDA7 Offset: 0xDA7 VA: 0xDA7
	private static Predicate<Component> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xDA8 Offset: 0xDA8 VA: 0xDA8
	private static UnityAction<Component> <>f__am$cache1; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xDA9 Offset: 0xDA9 VA: 0xDA9
	private static UnityAction<Component> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xDAA Offset: 0xDAA VA: 0xDAA
	private static UnityAction<Component> <>f__am$cache3; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xDAB Offset: 0xDAB VA: 0xDAB
	private static UnityAction<Component> <>f__am$cache4; // 0x18

	// Properties
	public Transform transform { get; }

	// Methods

	// RVA: 0xF80 Offset: 0xF80 VA: 0xF80
	private static void .cctor() { }

	// RVA: 0x837 Offset: 0x837 VA: 0x837
	public void .ctor() { }

	// RVA: 0x754 Offset: 0x754 VA: 0x754
	private void Initialize(RectTransform controller) { }

	// RVA: 0x838 Offset: 0x838 VA: 0x838
	private void Clear() { }

	// RVA: 0x839 Offset: 0x839 VA: 0x839
	private static void ReapplyDrivenProperties(RectTransform driven) { }

	// RVA: 0xC8C Offset: 0xC8C VA: 0xC8C Slot: 5
	public Transform get_transform() { }

	// RVA: 0xC8D Offset: 0xC8D VA: 0xC8D Slot: 8
	public bool IsDestroyed() { }

	// RVA: 0x83A Offset: 0x83A VA: 0x83A
	private static void StripDisabledBehavioursFromList(List<Component> components) { }

	// RVA: 0x83B Offset: 0x83B VA: 0x83B
	public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot) { }

	// RVA: 0x755 Offset: 0x755 VA: 0x755 Slot: 4
	public void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x3BC Offset: 0x3BC VA: 0x3BC
	private void PerformLayoutControl(RectTransform rect, UnityAction<Component> action) { }

	// RVA: 0x3BD Offset: 0x3BD VA: 0x3BD
	private void PerformLayoutCalculation(RectTransform rect, UnityAction<Component> action) { }

	// RVA: 0x83C Offset: 0x83C VA: 0x83C
	public static void MarkLayoutForRebuild(RectTransform rect) { }

	// RVA: 0x605 Offset: 0x605 VA: 0x605
	private static bool ValidController(RectTransform layoutRoot, List<Component> comps) { }

	// RVA: 0x83D Offset: 0x83D VA: 0x83D
	private static void MarkLayoutRootForRebuild(RectTransform controller) { }

	// RVA: 0x83E Offset: 0x83E VA: 0x83E Slot: 6
	public void LayoutComplete() { }

	// RVA: 0x83F Offset: 0x83F VA: 0x83F Slot: 7
	public void GraphicUpdateComplete() { }

	// RVA: 0xC8E Offset: 0xC8E VA: 0xC8E Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x606 Offset: 0x606 VA: 0x606 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xC8F Offset: 0xC8F VA: 0xC8F Slot: 3
	public override string ToString() { }

	[CompilerGeneratedAttribute] // RVA: 0xDFF Offset: 0xDFF VA: 0xDFF
	// RVA: 0x840 Offset: 0x840 VA: 0x840
	private static void <s_Rebuilders>m__0(LayoutRebuilder x) { }

	[CompilerGeneratedAttribute] // RVA: 0xE00 Offset: 0xE00 VA: 0xE00
	// RVA: 0xC90 Offset: 0xC90 VA: 0xC90
	private static bool <StripDisabledBehavioursFromList>m__1(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE01 Offset: 0xE01 VA: 0xE01
	// RVA: 0x841 Offset: 0x841 VA: 0x841
	private static void <Rebuild>m__2(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE02 Offset: 0xE02 VA: 0xE02
	// RVA: 0x842 Offset: 0x842 VA: 0x842
	private static void <Rebuild>m__3(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE03 Offset: 0xE03 VA: 0xE03
	// RVA: 0x843 Offset: 0x843 VA: 0x843
	private static void <Rebuild>m__4(Component e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE04 Offset: 0xE04 VA: 0xE04
	// RVA: 0x844 Offset: 0x844 VA: 0x844
	private static void <Rebuild>m__5(Component e) { }
}

// Namespace: UnityEngine.UI
public static class LayoutUtility // TypeDefIndex: 2308
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xDAC Offset: 0xDAC VA: 0xDAC
	private static Func<ILayoutElement, float> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xDAD Offset: 0xDAD VA: 0xDAD
	private static Func<ILayoutElement, float> <>f__am$cache1; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xDAE Offset: 0xDAE VA: 0xDAE
	private static Func<ILayoutElement, float> <>f__am$cache2; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xDAF Offset: 0xDAF VA: 0xDAF
	private static Func<ILayoutElement, float> <>f__am$cache3; // 0xC
	[CompilerGeneratedAttribute] // RVA: 0xDB0 Offset: 0xDB0 VA: 0xDB0
	private static Func<ILayoutElement, float> <>f__am$cache4; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xDB1 Offset: 0xDB1 VA: 0xDB1
	private static Func<ILayoutElement, float> <>f__am$cache5; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xDB2 Offset: 0xDB2 VA: 0xDB2
	private static Func<ILayoutElement, float> <>f__am$cache6; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xDB3 Offset: 0xDB3 VA: 0xDB3
	private static Func<ILayoutElement, float> <>f__am$cache7; // 0x1C

	// Methods

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	public static float GetMinSize(RectTransform rect, int axis) { }

	// RVA: 0x2A Offset: 0x2A VA: 0x2A
	public static float GetPreferredSize(RectTransform rect, int axis) { }

	// RVA: 0x2B Offset: 0x2B VA: 0x2B
	public static float GetFlexibleSize(RectTransform rect, int axis) { }

	// RVA: 0x60 Offset: 0x60 VA: 0x60
	public static float GetMinWidth(RectTransform rect) { }

	// RVA: 0x61 Offset: 0x61 VA: 0x61
	public static float GetPreferredWidth(RectTransform rect) { }

	// RVA: 0x62 Offset: 0x62 VA: 0x62
	public static float GetFlexibleWidth(RectTransform rect) { }

	// RVA: 0x63 Offset: 0x63 VA: 0x63
	public static float GetMinHeight(RectTransform rect) { }

	// RVA: 0x64 Offset: 0x64 VA: 0x64
	public static float GetPreferredHeight(RectTransform rect) { }

	// RVA: 0x65 Offset: 0x65 VA: 0x65
	public static float GetFlexibleHeight(RectTransform rect) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source) { }

	[CompilerGeneratedAttribute] // RVA: 0xE05 Offset: 0xE05 VA: 0xE05
	// RVA: 0x66 Offset: 0x66 VA: 0x66
	private static float <GetMinWidth>m__0(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE06 Offset: 0xE06 VA: 0xE06
	// RVA: 0x67 Offset: 0x67 VA: 0x67
	private static float <GetPreferredWidth>m__1(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE07 Offset: 0xE07 VA: 0xE07
	// RVA: 0x68 Offset: 0x68 VA: 0x68
	private static float <GetPreferredWidth>m__2(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE08 Offset: 0xE08 VA: 0xE08
	// RVA: 0x69 Offset: 0x69 VA: 0x69
	private static float <GetFlexibleWidth>m__3(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE09 Offset: 0xE09 VA: 0xE09
	// RVA: 0x6A Offset: 0x6A VA: 0x6A
	private static float <GetMinHeight>m__4(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE0A Offset: 0xE0A VA: 0xE0A
	// RVA: 0x6B Offset: 0x6B VA: 0x6B
	private static float <GetPreferredHeight>m__5(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE0B Offset: 0xE0B VA: 0xE0B
	// RVA: 0x6C Offset: 0x6C VA: 0x6C
	private static float <GetPreferredHeight>m__6(ILayoutElement e) { }

	[CompilerGeneratedAttribute] // RVA: 0xE0C Offset: 0xE0C VA: 0xE0C
	// RVA: 0x6D Offset: 0x6D VA: 0x6D
	private static float <GetFlexibleHeight>m__7(ILayoutElement e) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCAE Offset: 0xCAE VA: 0xCAE
public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2309
{
	// Methods

	// RVA: 0x8B5 Offset: 0x8B5 VA: 0x8B5
	protected void .ctor() { }

	// RVA: 0x8B6 Offset: 0x8B6 VA: 0x8B6 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }

	// RVA: 0x8B7 Offset: 0x8B7 VA: 0x8B7 Slot: 29
	public override void CalculateLayoutInputVertical() { }

	// RVA: 0x8B8 Offset: 0x8B8 VA: 0x8B8 Slot: 37
	public override void SetLayoutHorizontal() { }

	// RVA: 0x8B9 Offset: 0x8B9 VA: 0x8B9 Slot: 38
	public override void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
public interface IMaterialModifier // TypeDefIndex: 2310
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Material GetModifiedMaterial(Material baseMaterial) { }
}

// Namespace: UnityEngine.UI.Collections
[DefaultMemberAttribute] // RVA: 0xCAF Offset: 0xCAF VA: 0xCAF
internal class IndexedSet<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 2311
{
	// Fields
	private readonly List<T> m_List; // 0xFFFFFFFF
	private Dictionary<T, int> m_Dictionary; // 0xFFFFFFFF

	// Properties
	public int Count { get; }
	public bool IsReadOnly { get; }
	public T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x90A Offset: 0x90A VA: 0x90A
	|-IndexedSet<object>..ctor
	|-IndexedSet<Graphic>..ctor
	|-IndexedSet<ICanvasElement>..ctor
	|-IndexedSet<IClipper>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public void Add(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x852 Offset: 0x852 VA: 0x852
	|-IndexedSet<object>.Add
	|-IndexedSet<Graphic>.Add
	*/

	// RVA: -1 Offset: -1
	public bool AddUnique(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6AA Offset: 0x6AA VA: 0x6AA
	|-IndexedSet<object>.AddUnique
	|-IndexedSet<Graphic>.AddUnique
	|-IndexedSet<ICanvasElement>.AddUnique
	|-IndexedSet<IClipper>.AddUnique
	*/

	// RVA: -1 Offset: -1 Slot: 15
	public bool Remove(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6AB Offset: 0x6AB VA: 0x6AB
	|-IndexedSet<object>.Remove
	|-IndexedSet<Graphic>.Remove
	|-IndexedSet<ICanvasElement>.Remove
	|-IndexedSet<IClipper>.Remove
	*/

	// RVA: -1 Offset: -1 Slot: 16
	public IEnumerator<T> GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDBF Offset: 0xDBF VA: 0xDBF
	|-IndexedSet<object>.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC0 Offset: 0xDC0 VA: 0xDC0
	|-IndexedSet<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x90B Offset: 0x90B VA: 0x90B
	|-IndexedSet<object>.Clear
	|-IndexedSet<ICanvasElement>.Clear
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public bool Contains(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6AC Offset: 0x6AC VA: 0x6AC
	|-IndexedSet<object>.Contains
	|-IndexedSet<ICanvasElement>.Contains
	*/

	// RVA: -1 Offset: -1 Slot: 14
	public void CopyTo(T[] array, int arrayIndex) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x451 Offset: 0x451 VA: 0x451
	|-IndexedSet<object>.CopyTo
	*/

	// RVA: -1 Offset: -1 Slot: 9
	public int get_Count() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDBD Offset: 0xDBD VA: 0xDBD
	|-IndexedSet<object>.get_Count
	|-IndexedSet<Graphic>.get_Count
	|-IndexedSet<ICanvasElement>.get_Count
	|-IndexedSet<IClipper>.get_Count
	*/

	// RVA: -1 Offset: -1 Slot: 10
	public bool get_IsReadOnly() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDBE Offset: 0xDBE VA: 0xDBE
	|-IndexedSet<object>.get_IsReadOnly
	*/

	// RVA: -1 Offset: -1 Slot: 6
	public int IndexOf(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6AD Offset: 0x6AD VA: 0x6AD
	|-IndexedSet<object>.IndexOf
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public void Insert(int index, T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x452 Offset: 0x452 VA: 0x452
	|-IndexedSet<object>.Insert
	*/

	// RVA: -1 Offset: -1 Slot: 8
	public void RemoveAt(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x853 Offset: 0x853 VA: 0x853
	|-IndexedSet<object>.RemoveAt
	|-IndexedSet<ICanvasElement>.RemoveAt
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public T get_Item(int index) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x6A9 Offset: 0x6A9 VA: 0x6A9
	|-IndexedSet<object>.get_Item
	|-IndexedSet<ICanvasElement>.get_Item
	|-IndexedSet<IClipper>.get_Item
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public void set_Item(int index, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x450 Offset: 0x450 VA: 0x450
	|-IndexedSet<object>.set_Item
	*/

	// RVA: -1 Offset: -1
	public void RemoveAll(Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x854 Offset: 0x854 VA: 0x854
	|-IndexedSet<object>.RemoveAll
	*/

	// RVA: -1 Offset: -1
	public void Sort(Comparison<T> sortLayoutFunction) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x855 Offset: 0x855 VA: 0x855
	|-IndexedSet<object>.Sort
	|-IndexedSet<ICanvasElement>.Sort
	*/
}

// Namespace: UnityEngine.UI
internal static class ListPool<T> // TypeDefIndex: 2312
{
	// Fields
	private static readonly ObjectPool<List<T>> s_ListPool; // 0xFFFFFFFF
	[CompilerGeneratedAttribute] // RVA: 0xDB4 Offset: 0xDB4 VA: 0xDB4
	private static UnityAction<List<T>> <>f__mg$cache0; // 0xFFFFFFFF

	// Methods

	// RVA: -1 Offset: -1
	private static void Clear(List<T> l) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xBD9 Offset: 0xBD9 VA: 0xBD9
	|-ListPool<int>.Clear
	|
	|-RVA: 0x90C Offset: 0x90C VA: 0x90C
	|-ListPool<object>.Clear
	|
	|-RVA: 0xBDA Offset: 0xBDA VA: 0xBDA
	|-ListPool<Color32>.Clear
	|
	|-RVA: 0xBDB Offset: 0xBDB VA: 0xBDB
	|-ListPool<UIVertex>.Clear
	|
	|-RVA: 0xBDC Offset: 0xBDC VA: 0xBDC
	|-ListPool<Vector2>.Clear
	|
	|-RVA: 0xBDD Offset: 0xBDD VA: 0xBDD
	|-ListPool<Vector3>.Clear
	|
	|-RVA: 0xBDE Offset: 0xBDE VA: 0xBDE
	|-ListPool<Vector4>.Clear
	*/

	// RVA: -1 Offset: -1
	public static List<T> Get() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2BB Offset: 0x2BB VA: 0x2BB
	|-ListPool<int>.Get
	|
	|-RVA: 0x2B1 Offset: 0x2B1 VA: 0x2B1
	|-ListPool<object>.Get
	|-ListPool<Canvas>.Get
	|-ListPool<Component>.Get
	|-ListPool<Mask>.Get
	|-ListPool<RectMask2D>.Get
	|
	|-RVA: 0x2B8 Offset: 0x2B8 VA: 0x2B8
	|-ListPool<Color32>.Get
	|
	|-RVA: 0x2B6 Offset: 0x2B6 VA: 0x2B6
	|-ListPool<UIVertex>.Get
	|
	|-RVA: 0x2B9 Offset: 0x2B9 VA: 0x2B9
	|-ListPool<Vector2>.Get
	|
	|-RVA: 0x2B7 Offset: 0x2B7 VA: 0x2B7
	|-ListPool<Vector3>.Get
	|
	|-RVA: 0x2BA Offset: 0x2BA VA: 0x2BA
	|-ListPool<Vector4>.Get
	*/

	// RVA: -1 Offset: -1
	public static void Release(List<T> toRelease) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x948 Offset: 0x948 VA: 0x948
	|-ListPool<int>.Release
	|
	|-RVA: 0x90D Offset: 0x90D VA: 0x90D
	|-ListPool<object>.Release
	|-ListPool<Canvas>.Release
	|-ListPool<Component>.Release
	|-ListPool<Mask>.Release
	|-ListPool<RectMask2D>.Release
	|
	|-RVA: 0x945 Offset: 0x945 VA: 0x945
	|-ListPool<Color32>.Release
	|
	|-RVA: 0x942 Offset: 0x942 VA: 0x942
	|-ListPool<UIVertex>.Release
	|
	|-RVA: 0x946 Offset: 0x946 VA: 0x946
	|-ListPool<Vector2>.Release
	|
	|-RVA: 0x944 Offset: 0x944 VA: 0x944
	|-ListPool<Vector3>.Release
	|
	|-RVA: 0x947 Offset: 0x947 VA: 0x947
	|-ListPool<Vector4>.Release
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x10B0 Offset: 0x10B0 VA: 0x10B0
	|-ListPool<int>..cctor
	|
	|-RVA: 0xF92 Offset: 0xF92 VA: 0xF92
	|-ListPool<object>..cctor
	|
	|-RVA: 0x10B1 Offset: 0x10B1 VA: 0x10B1
	|-ListPool<Color32>..cctor
	|
	|-RVA: 0x10B2 Offset: 0x10B2 VA: 0x10B2
	|-ListPool<UIVertex>..cctor
	|
	|-RVA: 0x10B3 Offset: 0x10B3 VA: 0x10B3
	|-ListPool<Vector2>..cctor
	|
	|-RVA: 0x10B4 Offset: 0x10B4 VA: 0x10B4
	|-ListPool<Vector3>..cctor
	|
	|-RVA: 0x10B5 Offset: 0x10B5 VA: 0x10B5
	|-ListPool<Vector4>..cctor
	*/
}

// Namespace: UnityEngine.UI
internal class ObjectPool<T> // TypeDefIndex: 2313
{
	// Fields
	private readonly Stack<T> m_Stack; // 0xFFFFFFFF
	private readonly UnityAction<T> m_ActionOnGet; // 0xFFFFFFFF
	private readonly UnityAction<T> m_ActionOnRelease; // 0xFFFFFFFF
	[CompilerGeneratedAttribute] // RVA: 0xDB5 Offset: 0xDB5 VA: 0xDB5
	[DebuggerBrowsableAttribute] // RVA: 0xDB5 Offset: 0xDB5 VA: 0xDB5
	private int <countAll>k__BackingField; // 0xFFFFFFFF

	// Properties
	public int countAll { get; set; }
	public int countActive { get; }
	public int countInactive { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x453 Offset: 0x453 VA: 0x453
	|-ObjectPool<List<IEventSystemHandler>>..ctor
	|-ObjectPool<object>..ctor
	|-ObjectPool<LayoutRebuilder>..ctor
	*/

	[CompilerGeneratedAttribute] // RVA: 0xE0D Offset: 0xE0D VA: 0xE0D
	// RVA: -1 Offset: -1
	public int get_countAll() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC1 Offset: 0xDC1 VA: 0xDC1
	|-ObjectPool<object>.get_countAll
	*/

	[CompilerGeneratedAttribute] // RVA: 0xE0E Offset: 0xE0E VA: 0xE0E
	// RVA: -1 Offset: -1
	private void set_countAll(int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x856 Offset: 0x856 VA: 0x856
	|-ObjectPool<object>.set_countAll
	*/

	// RVA: -1 Offset: -1
	public int get_countActive() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC2 Offset: 0xDC2 VA: 0xDC2
	|-ObjectPool<object>.get_countActive
	*/

	// RVA: -1 Offset: -1
	public int get_countInactive() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC3 Offset: 0xDC3 VA: 0xDC3
	|-ObjectPool<object>.get_countInactive
	*/

	// RVA: -1 Offset: -1
	public T Get() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC4 Offset: 0xDC4 VA: 0xDC4
	|-ObjectPool<List<IEventSystemHandler>>.Get
	|-ObjectPool<object>.Get
	|-ObjectPool<LayoutRebuilder>.Get
	*/

	// RVA: -1 Offset: -1
	public void Release(T element) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x857 Offset: 0x857 VA: 0x857
	|-ObjectPool<List<IEventSystemHandler>>.Release
	|-ObjectPool<object>.Release
	|-ObjectPool<LayoutRebuilder>.Release
	*/
}

// Namespace: UnityEngine.UI
internal class ReflectionMethodsCache // TypeDefIndex: 2314
{
	// Fields
	public ReflectionMethodsCache.Raycast3DCallback raycast3D; // 0x8
	public ReflectionMethodsCache.RaycastAllCallback raycast3DAll; // 0xC
	public ReflectionMethodsCache.Raycast2DCallback raycast2D; // 0x10
	public ReflectionMethodsCache.GetRayIntersectionAllCallback getRayIntersectionAll; // 0x14
	public ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x18
	public ReflectionMethodsCache.GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x1C
	private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x0

	// Properties
	public static ReflectionMethodsCache Singleton { get; }

	// Methods

	// RVA: 0x865 Offset: 0x865 VA: 0x865
	public void .ctor() { }

	// RVA: 0x2A1 Offset: 0x2A1 VA: 0x2A1
	public static ReflectionMethodsCache get_Singleton() { }

	// RVA: 0xF81 Offset: 0xF81 VA: 0xF81
	private static void .cctor() { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.Raycast3DCallback : MulticastDelegate // TypeDefIndex: 2315
{
	// Methods

	// RVA: 0x3C5 Offset: 0x3C5 VA: 0x3C5
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 12
	public virtual bool Invoke(Ray r, out RaycastHit hit, float f, int i) { }

	// RVA: 0x4 Offset: 0x4 VA: 0x4 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, out RaycastHit hit, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0xA36 Offset: 0xA36 VA: 0xA36 Slot: 14
	public virtual bool EndInvoke(out RaycastHit hit, IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.Raycast2DCallback : MulticastDelegate // TypeDefIndex: 2316
{
	// Methods

	// RVA: 0x3C3 Offset: 0x3C3 VA: 0x3C3
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 12
	public virtual RaycastHit2D Invoke(Vector2 p1, Vector2 p2, float f, int i) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 13
	public virtual IAsyncResult BeginInvoke(Vector2 p1, Vector2 p2, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x3C4 Offset: 0x3C4 VA: 0x3C4 Slot: 14
	public virtual RaycastHit2D EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.RaycastAllCallback : MulticastDelegate // TypeDefIndex: 2317
{
	// Methods

	// RVA: 0x3C6 Offset: 0x3C6 VA: 0x3C6
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x7 Offset: 0x7 VA: 0x7 Slot: 12
	public virtual RaycastHit[] Invoke(Ray r, float f, int i) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x610 Offset: 0x610 VA: 0x610 Slot: 14
	public virtual RaycastHit[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRayIntersectionAllCallback : MulticastDelegate // TypeDefIndex: 2318
{
	// Methods

	// RVA: 0x3C0 Offset: 0x3C0 VA: 0x3C0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x6 Offset: 0x6 VA: 0x6 Slot: 12
	public virtual RaycastHit2D[] Invoke(Ray r, float f, int i) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x60D Offset: 0x60D VA: 0x60D Slot: 14
	public virtual RaycastHit2D[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback : MulticastDelegate // TypeDefIndex: 2319
{
	// Methods

	// RVA: 0x3C1 Offset: 0x3C1 VA: 0x3C1
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 12
	public virtual int Invoke(Ray r, RaycastHit2D[] results, float f, int i) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit2D[] results, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x60E Offset: 0x60E VA: 0x60E Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRaycastNonAllocCallback : MulticastDelegate // TypeDefIndex: 2320
{
	// Methods

	// RVA: 0x3C2 Offset: 0x3C2 VA: 0x3C2
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x3 Offset: 0x3 VA: 0x3 Slot: 12
	public virtual int Invoke(Ray r, RaycastHit[] results, float f, int i) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit[] results, float f, int i, AsyncCallback callback, object object) { }

	// RVA: 0x60F Offset: 0x60F VA: 0x60F Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.UI
public class VertexHelper : IDisposable // TypeDefIndex: 2321
{
	// Fields
	private List<Vector3> m_Positions; // 0x8
	private List<Color32> m_Colors; // 0xC
	private List<Vector2> m_Uv0S; // 0x10
	private List<Vector2> m_Uv1S; // 0x14
	private List<Vector2> m_Uv2S; // 0x18
	private List<Vector2> m_Uv3S; // 0x1C
	private List<Vector3> m_Normals; // 0x20
	private List<Vector4> m_Tangents; // 0x24
	private List<int> m_Indices; // 0x28
	private static readonly Vector4 s_DefaultTangent; // 0x0
	private static readonly Vector3 s_DefaultNormal; // 0x10
	private bool m_ListsInitalized; // 0x2C

	// Properties
	public int currentVertCount { get; }
	public int currentIndexCount { get; }

	// Methods

	// RVA: 0x8B1 Offset: 0x8B1 VA: 0x8B1
	public void .ctor() { }

	// RVA: 0x7D6 Offset: 0x7D6 VA: 0x7D6
	public void .ctor(Mesh m) { }

	// RVA: 0x8B2 Offset: 0x8B2 VA: 0x8B2
	private void InitializeListIfRequired() { }

	// RVA: 0x8B3 Offset: 0x8B3 VA: 0x8B3 Slot: 4
	public void Dispose() { }

	// RVA: 0x8B4 Offset: 0x8B4 VA: 0x8B4
	public void Clear() { }

	// RVA: 0xCFB Offset: 0xCFB VA: 0xCFB
	public int get_currentVertCount() { }

	// RVA: 0xCFC Offset: 0xCFC VA: 0xCFC
	public int get_currentIndexCount() { }

	// RVA: 0x3D3 Offset: 0x3D3 VA: 0x3D3
	public void PopulateUIVertex(ref UIVertex vertex, int i) { }

	// RVA: 0x3D4 Offset: 0x3D4 VA: 0x3D4
	public void SetUIVertex(UIVertex vertex, int i) { }

	// RVA: 0x7D7 Offset: 0x7D7 VA: 0x7D7
	public void FillMesh(Mesh mesh) { }

	// RVA: 0x14 Offset: 0x14 VA: 0x14
	internal void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }

	// RVA: 0x29 Offset: 0x29 VA: 0x29
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent) { }

	// RVA: 0x119 Offset: 0x119 VA: 0x119
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0) { }

	// RVA: 0x7D8 Offset: 0x7D8 VA: 0x7D8
	public void AddVert(UIVertex v) { }

	// RVA: 0x11A Offset: 0x11A VA: 0x11A
	public void AddTriangle(int idx0, int idx1, int idx2) { }

	// RVA: 0x7D9 Offset: 0x7D9 VA: 0x7D9
	public void AddUIVertexQuad(UIVertex[] verts) { }

	// RVA: 0x3D5 Offset: 0x3D5 VA: 0x3D5
	public void AddUIVertexStream(List<UIVertex> verts, List<int> indices) { }

	// RVA: 0x7DA Offset: 0x7DA VA: 0x7DA
	public void AddUIVertexTriangleStream(List<UIVertex> verts) { }

	// RVA: 0x7DB Offset: 0x7DB VA: 0x7DB
	public void GetUIVertexStream(List<UIVertex> stream) { }

	// RVA: 0xF86 Offset: 0xF86 VA: 0xF86
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.UI
[ExtensionAttribute] // RVA: 0xCB0 Offset: 0xCB0 VA: 0xCB0
public static class VertexHelperExtension // TypeDefIndex: 2322
{
	// Methods

	[ExtensionAttribute] // RVA: 0xE0F Offset: 0xE0F VA: 0xE0F
	// RVA: 0x13 Offset: 0x13 VA: 0x13
	public static void AddVert(VertexHelper obj, Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }
}

// Namespace: UnityEngine.UI
[ObsoleteAttribute] // RVA: 0xCB1 Offset: 0xCB1 VA: 0xCB1
public abstract class BaseVertexEffect // TypeDefIndex: 2323
{
	// Methods

	// RVA: 0x78F Offset: 0x78F VA: 0x78F
	protected void .ctor() { }

	[EditorBrowsableAttribute] // RVA: 0xE10 Offset: 0xE10 VA: 0xE10
	[ObsoleteAttribute] // RVA: 0xE10 Offset: 0xE10 VA: 0xE10
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void ModifyVertices(List<UIVertex> vertices) { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0xCB2 Offset: 0xCB2 VA: 0xCB2
public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 2324
{
	// Fields
	private Graphic m_Graphic; // 0xC

	// Properties
	protected Graphic graphic { get; }

	// Methods

	// RVA: 0x78B Offset: 0x78B VA: 0x78B
	protected void .ctor() { }

	// RVA: 0xBEB Offset: 0xBEB VA: 0xBEB
	protected Graphic get_graphic() { }

	// RVA: 0x78C Offset: 0x78C VA: 0x78C Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x78D Offset: 0x78D VA: 0x78D Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x78E Offset: 0x78E VA: 0x78E Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x6A7 Offset: 0x6A7 VA: 0x6A7 Slot: 19
	public virtual void ModifyMesh(Mesh mesh) { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[EditorBrowsableAttribute] // RVA: 0xCB3 Offset: 0xCB3 VA: 0xCB3
[ObsoleteAttribute] // RVA: 0xCB3 Offset: 0xCB3 VA: 0xCB3
public interface IVertexModifier // TypeDefIndex: 2325
{
	// Methods

	[EditorBrowsableAttribute] // RVA: 0xE11 Offset: 0xE11 VA: 0xE11
	[ObsoleteAttribute] // RVA: 0xE11 Offset: 0xE11 VA: 0xE11
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ModifyVertices(List<UIVertex> verts) { }
}

// Namespace: UnityEngine.UI
public interface IMeshModifier // TypeDefIndex: 2326
{
	// Methods

	[ObsoleteAttribute] // RVA: 0xE12 Offset: 0xE12 VA: 0xE12
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ModifyMesh(Mesh mesh) { }

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ModifyMesh(VertexHelper verts) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCB4 Offset: 0xCB4 VA: 0xCB4
public class Outline : Shadow // TypeDefIndex: 2327
{
	// Methods

	// RVA: 0x85A Offset: 0x85A VA: 0x85A
	protected void .ctor() { }

	// RVA: 0x761 Offset: 0x761 VA: 0x761 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCB5 Offset: 0xCB5 VA: 0xCB5
public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 2328
{
	// Methods

	// RVA: 0x85B Offset: 0x85B VA: 0x85B
	protected void .ctor() { }

	// RVA: 0x762 Offset: 0x762 VA: 0x762 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xCB6 Offset: 0xCB6 VA: 0xCB6
public class Shadow : BaseMeshEffect // TypeDefIndex: 2329
{
	// Fields
	[SerializeField] // RVA: 0xDB6 Offset: 0xDB6 VA: 0xDB6
	private Color m_EffectColor; // 0x10
	[SerializeField] // RVA: 0xDB7 Offset: 0xDB7 VA: 0xDB7
	private Vector2 m_EffectDistance; // 0x20
	[SerializeField] // RVA: 0xDB8 Offset: 0xDB8 VA: 0xDB8
	private bool m_UseGraphicAlpha; // 0x28
	private const float kMaxEffectDistance = 600;

	// Properties
	public Color effectColor { get; set; }
	public Vector2 effectDistance { get; set; }
	public bool useGraphicAlpha { get; set; }

	// Methods

	// RVA: 0x891 Offset: 0x891 VA: 0x891
	protected void .ctor() { }

	// RVA: 0x7A9 Offset: 0x7A9 VA: 0x7A9
	public Color get_effectColor() { }

	// RVA: 0x7AA Offset: 0x7AA VA: 0x7AA
	public void set_effectColor(Color value) { }

	// RVA: 0x7AB Offset: 0x7AB VA: 0x7AB
	public Vector2 get_effectDistance() { }

	// RVA: 0x7AC Offset: 0x7AC VA: 0x7AC
	public void set_effectDistance(Vector2 value) { }

	// RVA: 0xCD3 Offset: 0xCD3 VA: 0xCD3
	public bool get_useGraphicAlpha() { }

	// RVA: 0x7AD Offset: 0x7AD VA: 0x7AD
	public void set_useGraphicAlpha(bool value) { }

	// RVA: 0x1 Offset: 0x1 VA: 0x1
	protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) { }

	// RVA: 0x2 Offset: 0x2 VA: 0x2
	protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) { }

	// RVA: 0x7AE Offset: 0x7AE VA: 0x7AE Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCBD Offset: 0xCBD VA: 0xCBD
internal static class <PrivateImplementationDetails> // TypeDefIndex: 2330
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.$ArrayType=12 $field-7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46 /*Metadata offset 0x13169F*/; // 0xFFFFFFFF
}

// Namespace: 
private struct <PrivateImplementationDetails>.$ArrayType=12 // TypeDefIndex: 2331
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2332
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2333
{}

// Namespace: 
public class CheckButtonHandler : MonoBehaviour // TypeDefIndex: 2334
{
	// Methods

	// RVA: 0x8BA Offset: 0x8BA VA: 0x8BA
	private void Start() { }

	// RVA: 0x8BB Offset: 0x8BB VA: 0x8BB
	private void Update() { }

	// RVA: 0xCFD Offset: 0xCFD VA: 0xCFD
	public static byte[] FromHex(string hex) { }

	// RVA: 0x61A Offset: 0x61A VA: 0x61A
	private bool checkFlag(string flagInput) { }

	// RVA: 0x8BC Offset: 0x8BC VA: 0x8BC
	public void OnClick() { }

	// RVA: 0x8BD Offset: 0x8BD VA: 0x8BD
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xE42 Offset: 0xE42 VA: 0xE42
[Serializable]
private sealed class CheckButtonHandler.<>c // TypeDefIndex: 2335
{
	// Fields
	public static readonly CheckButtonHandler.<>c <>9; // 0x0
	public static Converter<byte, sbyte> <>9__3_0; // 0x4

	// Methods

	// RVA: 0xF87 Offset: 0xF87 VA: 0xF87
	private static void .cctor() { }

	// RVA: 0x8BE Offset: 0x8BE VA: 0x8BE
	public void .ctor() { }

	// RVA: 0x61B Offset: 0x61B VA: 0x61B
	internal sbyte <checkFlag>b__3_0(byte b) { }
}
