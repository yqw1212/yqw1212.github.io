from z3 import *

condition = []

# c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16=BitVecs('c1 c2 c3 c4 c5 c6 c7 8c c9 c10 c11 c12 c13 c14 c15 c16', 8)

s=Solver()
# s.add(c2 * (-2) + c3 * (-2) + c4 * 4 + c5 * (-2) + c6 * 2 + c7 + c8 * (-4) + c9 * 5 + c10 * 3 + c11 * (-3) + c16 * (-2) - c1 == 0x140)
# s.add(c2 + c4 + c5 + c6 + c7 * (-3) + c10 * (-2) + c11 + c12 - c16 - c9 - c8 - c3 - c1 == -0x15a)
# s.add(c1 * (-2) + c2 * 4 + c3 * 4 + c4 * (-2) + c5 * (-2) + c6 * 2 + c7 * 3 + c8 * 4 - c16 - c9 == 0x277)
# s.add(c1 * 5 + c3 * (-2) + c4 * 5 + c5 * 4 + c6 + c7 * (-2) + c8 + c9 * 4 + c11 * 4 + c12 + c13 * (-2) + c14 * 3 + c15 * 2 + c16 -c10 - c2 == 0x56a)
# s.add(c2 * 7 + c3 * (-5) + c4 * (-5) + c5 * (-4) + c6 * 9 + c7 + c9 * 2 + c11 * 3 + c12 * 2 + c16 - c10 - c8 - c1 == 0x159)
# s.add(c3 + c4 + c5 + c6 + c7 + c12 + c13 - c16 - c15 - c14 - c11 - c10 - c9 - c8 - c2 - c1 == -0x78)
# s.add(c2 * (-3) + c3 * (-6) + c4 * (-5) + c5 + c6 * 2 + c7 * 3 + c8 * 2 + c9 + c10 + c11 * 2 + c16 - c1 == 0x3d)
# s.add(c1 * 2 + c2 * 2 + c3 * (-4) + c4 * 2 + c5 * 2 + c6 * 6 + c7 * 2 + c8 * (-2) + c9 * (-5) + c10 + c11 * 2 + c12 - c16 == 0xe4)
# s.add(c1 + c4 + c6 * 3 + c7 * 5 + c8 * (-3) + c9 + c10 * (-3) + c11 * 2 + c12 * 3 + c13 * 4 - c16 - c14 - c5 - c3 - c2 == 0x245)
# s.add(c1 * (-3) + c3 + c4 * (-3) + c6 * (-3) + c9 + c10 + c12 * (-3) + c16 - c13 - c11 - c8 - c7 - c5 - c2 == -0x36a)
# s.add(c3 + c4 + c6 + c7 * 3 + c8 * (-3) + c9 + c11 + c12 * 3 + c13 * 3 - c16 - c14 -c10 - c5 - c2 - c1 == 0x1c3)
# s.add(c1 * 2 + c2 * 2 + c3 * 2 + c4 * (-2) + c5 * (-2) + c6 * 2 + c7 * 2 - c16 == 0x137)
# s.add(c1 * (-2) + c2 * 2 + c3 * 6 + c4 * 6 + c5 + c6 * (-5) + c7 * 6 + c8 * (-3) + c9 * 2 + c10 * 3 + c11 * 2 - c16 - c12 == 0x470)
# s.add(c1 * 2 + c2 * 2 + c3 * (-2) + c4 * (-4) + c5 * 4 + c6 * 2 + c7 * (-2) + c8 * (-4) + c9 + c16 == -0x2c)
# s.add(c1 + c3 * 3 + c4 * 3 + c5 * 3 + c6 * (-5) + c7 + c8 + c9 * (-2) + c10 * (-3) + c11 * (-4) + c12 + c16 - c2 == -0x2b)
# s.add(c1 * (-2) + c2 * (-2) + c3 * (-5) + c4 + c5 * 2 + c7 * 2 + c8 + c9 * 2 + c16 - c11 - c10 - c6 == -0x83)

c = [BitVec("v{}".format(i), 7) for i in range(16)]
s.add(c[0xf] * (-2) + c[0xe] * (-2) + c[0xd] * 4 + c[0xa] * (-2) + c[9] * 2 + c[8] + c[7] * (-4) + c[6] * 5 + c[4] * 3 + c[2] * (-3) + c[1] * (-2) - c[0] == 0x140)
s.add(c[0xe] + c[0xc] + c[0xb] + c[0xa] + c[9] * (-3) + c[5] * (-2) + c[4] + c[2] - c[0] - c[6] - c[8] - c[0xd] - c[0xf] == -0x15a)
s.add(c[0xb] * (-2) + c[0xa] * 4 + c[9] * 4 + c[8] * (-2) + c[6] * (-2) + c[5] * 2 + c[4] * 3 + c[3] * 4 - c[0] - c[2] == 0x277)
s.add(c[0xf] * 5 + c[0xd] * (-2) + c[0xc] * 5 + c[0xb] * 4 + c[0xa] + c[9] * (-2) + c[8] + c[7] * 4 + c[5] * 4 + c[4] + c[3] * (-2) + c[2] * 3 + c[1] * 2 + c[0] -c[6] - c[0xe] == 0x56a)
s.add(c[0xe] * 7 + c[0xd] * (-5) + c[0xc] * (-5) + c[0xb] * (-4) + c[0xa] * 9 + c[8] + c[5] * 2 + c[2] * 3 + c[1] * 2 + c[0] - c[4] - c[6] - c[0xf] == 0x159)
s.add(c[0xd] + c[0xc] + c[0xb] + c[0xa] + c[9] + c[4] + c[3] - c[0] - c[1] - c[2] - c[5] - c[6] - c[7] - c[8] - c[0xe] - c[0xf] == -0x78)
s.add(c[0xc] * (-3) + c[0xb] * (-6) + c[0xa] * (-5) + c[8] + c[7] * 2 + c[6] * 3 + c[5] * 2 + c[4] + c[2] + c[1] * 2 + c[0] - c[0xe] == 0x3d)
s.add(c[0xf] * 2 + c[0xe] * 2 + c[0xd] * (-4) + c[0xc] * 2 + c[0xb] * 2 + c[0xa] * 6 + c[9] * 2 + c[8] * (-2) + c[6] * (-5) + c[4] + c[3] * 2 + c[2] - c[0] == 0xe4)
s.add(c[0xf] + c[0xc] + c[0xa] * 3 + c[9] * 5 + c[8] * (-3) + c[7] + c[6] * (-3) + c[5] * 2 + c[4] * 3 + c[3] * 4 - c[0] - c[2] - c[0xb] - c[0xd] - c[0xe] == 0x245)
s.add(c[0xf] * (-3) + c[0xd] + c[0xc] * (-3) + c[0xa] * (-3) + c[7] + c[6] + c[4] * (-3) + c[0] - c[2] - c[5] - c[8] - c[9] - c[0xb] - c[0xe] == -0x36a)
s.add(c[0xd] + c[0xc] + c[0xa] + c[9] * 3 + c[8] * (-3) + c[7] + c[5] + c[4] * 3 + c[3] * 3 - c[0] - c[2] -c[6] - c[0xb] - c[0xe] - c[0xf] == 0x1c3)
s.add(c[0xc] * 2 + c[0xa] * 2 + c[9] * 2 + c[8] * (-2) + c[6] * (-2) + c[4] * 2 + c[3] * 2 - c[0] == 0x137)
s.add(c[0xe] * (-2) + c[0xd] * 2 + c[0xc] * 6 + c[0xb] * 6 + c[0xa] + c[8] * (-5) + c[7] * 6 + c[6] * (-3) + c[5] * 2 + c[4] * 3 + c[3] * 2 - c[0] - c[2] == 0x470)
s.add(c[0xf] * 2 + c[0xb] * 2 + c[0xa] * (-2) + c[9] * (-4) + c[8] * 4 + c[6] * 2 + c[4] * (-2) + c[3] * (-4) + c[2] + c[0] == -0x2c)
s.add(c[0xf] + c[0xd] * 3 + c[0xc] * 3 + c[0xb] * 3 + c[0xa] * (-5) + c[8] + c[6] + c[5] * (-2) + c[4] * (-3) + c[3] * (-4) + c[2] + c[0] - c[0xe] == -0x2b)
s.add(c[0xf] * (-2) + c[0xd] * (-2) + c[0xc] * (-5) + c[0xa] + c[9] * 2 + c[7] * 2 + c[6] + c[5] * 2 + c[0] - c[2] - c[4] - c[8] == -0x83)

while s.check() == sat:
    flag = "".join([chr(s.model().eval(j).as_long()) for j in c])
    print(flag)
    break
    # print(s.model())