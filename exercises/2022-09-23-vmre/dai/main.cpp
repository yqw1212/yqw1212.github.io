#include <stdio.h>
#include <math.h>

int main(){
    char v12[0x1000] = {0};
    int stack[0x2000] = {0};
    int opcode[2189] = {0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x33, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x33, 0x08, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F, 0x20, 0x20,
                        0x5F, 0x5F, 0x5F, 0x20, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x5F, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x5F,
                        0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x33, 0x28,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F,
                        0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F,
                        0x5F, 0x20, 0x20, 0x20, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20,
                        0x20, 0x20, 0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20,
                        0x33, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x0A, 0x00, 0x00, 0x33, 0x50,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x20, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x56, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C,
                        0x20, 0x7C, 0x20, 0x20, 0x20, 0x2F, 0x20, 0x33, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x2F, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x2F, 0x20, 0x33, 0x08, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x7C, 0x2F, 0x20,
                        0x20, 0x20, 0x7C, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C,
                        0x20, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x33,
                        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F,
                        0x20, 0x20, 0x20, 0x20, 0x2F, 0x20, 0x20, 0x33, 0x28, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x20, 0x20,
                        0x20, 0x7C, 0x5F, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x5F, 0x7C, 0x20, 0x7C,
                        0x20, 0x5F, 0x5F, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x5F, 0x5F, 0x7C, 0x20, 0x2F, 0x20, 0x20,
                        0x5F, 0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x5F, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x20, 0x20, 0x33,
                        0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x5F, 0x7C, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x20, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x54, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x20,
                        0x7C, 0x20, 0x20, 0x2F, 0x20, 0x2F, 0x33, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x2F, 0x20, 0x2F, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20, 0x20, 0x2F, 0x7C,
                        0x20, 0x7C, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20,
                        0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x33, 0x20,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x5F,
                        0x7C, 0x20, 0x7C, 0x20, 0x20, 0x7C, 0x33, 0x28, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C,
                        0x20, 0x7C, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20,
                        0x20, 0x7C, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x7C, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x7C,
                        0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x48,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C,
                        0x20, 0x7C, 0x0A, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x55, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x20, 0x7C,
                        0x20, 0x2F, 0x20, 0x2F, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x2F,
                        0x20, 0x2F, 0x20, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x7C, 0x5F, 0x5F, 0x2F, 0x20, 0x7C, 0x20,
                        0x7C, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x33,
                        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x5F, 0x5F, 0x5F, 0x2F, 0x20, 0x7C, 0x20, 0x33, 0x20, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x5F, 0x20,
                        0x20, 0x2F, 0x20, 0x20, 0x7C, 0x33, 0x28, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C, 0x20,
                        0x7C, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20,
                        0x7C, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x5F, 0x5F, 0x7C, 0x20, 0x20, 0x7C, 0x33,
                        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x48, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20,
                        0x7C, 0x0A, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x13, 0x55, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x20, 0x7C, 0x2F,
                        0x20, 0x2F, 0x20, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x2F, 0x20, 0x2F,
                        0x20, 0x20, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C,
                        0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x33, 0x18,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x33, 0x20, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20, 0x20,
                        0x20, 0x7C, 0x20, 0x7C, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x20,
                        0x20, 0x7C, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C,
                        0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x33, 0x40,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F,
                        0x5F, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x33, 0x48, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x0A, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x13, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x5F, 0x5F, 0x5F, 0x2F,
                        0x20, 0x20, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x20, 0x20, 0x2F, 0x5F, 0x2F, 0x20, 0x20,
                        0x20, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x7C, 0x33,
                        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x33, 0x18, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x7C, 0x5F, 0x33, 0x20, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20, 0x5F, 0x20,
                        0x5F, 0x5F, 0x5F, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x5F, 0x5F, 0x2F, 0x20, 0x20, 0x20, 0x7C,
                        0x5F, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x7C, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x5F, 0x5F, 0x33,
                        0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F,
                        0x5F, 0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x5F, 0x33, 0x40, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x7C, 0x20,
                        0x20, 0x20, 0x7C, 0x5F, 0x7C, 0x33, 0x48, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x13, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x8F, 0x01, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x10,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x18, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x8F, 0x01, 0x11, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33,
                        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x77,
                        0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x20, 0x33, 0x10, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x18, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x20, 0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,
                        0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F,
                        0x01, 0x11, 0x23, 0x20, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73,
                        0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6D, 0x65, 0x33, 0x08,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x73,
                        0x61, 0x67, 0x65, 0x20, 0x66, 0x72, 0x33, 0x10, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x6F, 0x6D, 0x20, 0x76,
                        0x6D, 0x20, 0x6D, 0x61, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x63, 0x68, 0x69, 0x6E, 0x65, 0x20,
                        0x20, 0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52,
                        0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
                        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01,
                        0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x08, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x10, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
                        0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11,
                        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x29,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11,
                        0x23, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x20, 0x79, 0x33, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x6F, 0x75,
                        0x72, 0x20, 0x66, 0x6C, 0x61, 0x67, 0x33, 0x08, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x3A, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x13, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x8F, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x10, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x8F, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x6A, 0xED, 0xBE, 0xAD, 0xFB, 0xEE,
                        0xDB, 0xBA, 0xAA, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x6A, 0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12,
                        0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
                        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x12,
                        0x66, 0x66, 0x66, 0x33, 0x22, 0x11, 0x11, 0x33, 0x10, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x18, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0xDE, 0xED, 0xEF, 0xCD,
                        0xAB, 0xEF, 0xAD, 0xAD, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x12, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x8F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    int v11_0[8] = {0};
    int v11_1[8] = {0};
    int v11_2[8] = {0};
    int v11_3[8] = {0};
    int v11_5 = 0;
    long long v11[6] = {0};
    v11[3] = 0x1E00;
    while ( 1 )
    {
        int v3 = opcode[v11_5];
        v11_5 ++;
        printf("case %x and index=%d\n", v3, v11_5);
        switch ( v3 )
        {
            case 0x10u:
                for(int i=0; i<8; i++){
                    v11_0[i] = v11_3[i];
                }
                v11[0] = v11[3];
                printf("v11 = v11[3];\n");
                break;
            case 0x11u:
                v11[0] = 0;
                for(int i=0; i<8; i++){
//                    printf("%x,", opcode[v11_5+i]);
                    v11[0] += opcode[v11_5+i] * pow(16, 2*i);
                }
                printf("v11[0] = %lld;\n", v11[0]);
                v11_5 += 8;
                break;
            case 0x12u:
                v11[1] = 0;
                for(int i=0; i<8; i++){
                    v11_1[i] = opcode[v11_5+i];
                    v11[1] += opcode[v11_5+i] * pow(16, 2*i);
                }
                printf("v11[1] = *(_QWORD *)v11[5];\n");
                v11_5 += 8;
                break;
            case 0x13u:
                v11[2] = 0;
                for(int i=0; i<8; i++){
                    v11_2[i] = opcode[v11_5+i];
                    v11[2] += opcode[v11_5+i] * pow(16, 2*i);
                }
                printf("v11[2] = %lld;\n", v11[2]);
                v11_5 += 8;
                break;
            case 0x20u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
//                if ( v14 > 0xFFF )
//              sub_999("buffer overflow detected");
                v11[0] = index; // 地址
                printf("v11[0] = &v12[%d];\n", index);
                v11_5 += 8;
                break;
            }
            case 0x21u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v15 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v11[0] = v12[index];
                printf("v11[0] = v12[%d];\n", index);
                v11_5 += 8;
                break;
            }
            case 0x22u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v16 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v11[1] = v12[index];
                printf("v11[1] = *(_QWORD *)&v12[v16];\n");
                v11_5 += 8;
                break;
            }
            case 0x23u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v17 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v11[2] = v12[index];
                printf("v11[2] = *(_QWORD *)&v12[v17];\n");
                v11_5 += 8;
                break;
            }
            case 0x33u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v18 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v12[index] = v11[0];
                printf("v12[%d] = %lld;\n", index, v11[0]);
                v11_5 += 8;
                break;
            }
            case 0x34u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v19 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v12[index] = v11[1];
                printf("v12[index] = v11[1];\n");
                v11_5 += 8;
                break;
            }
            case 0x35u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v20 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v12[index] = v11[2];
                printf("v12[index] = v11[2];\n");
                v11_5 += 8;
                break;
            }
            case 0x44u:
                //        if ( v11[3] - (_QWORD)v13 <= 8uLL )
                //          sub_999("stack underflow detected");
                v11[3] -= 8;
                stack[v11[3]] = v11[0];
                printf("v11[3] -= 8;\n");
                printf("stack[v11[3]] = %d;\n", v11[0]);
                break;
            case 0x45u:
                //        if ( v11[3] - (_QWORD)v13 <= 8uLL )
                //          sub_999("stack underflow detected");
                v11[3] -= 8LL;
                v11[3] = v11[1];
                printf("v11[3] -= 8;\n");
                printf("v11[3] = v11[1];\n");
                break;
            case 0x46u:
                //        if ( v11[3] - (_QWORD)v13 <= 8uLL )
                //          sub_999("stack underflow detected");
                v11[3] -= 8LL;
                v11[3] = v11[2];
                printf("v11[3] -= 8;\n");
                printf("v11[3] = v11[2];\n");
                break;
            case 0x51u: {// 待定
                //        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
                //          sub_999("stack overflow detected");
                long long v4 = v11[3];
                v11[3] = v4 + 1;
                v11[0] = opcode[v4];
                printf("v4 = (_QWORD *)v11[3];\n");
                printf("v11[3] = v4 + 1;\n");
                printf("*v11 = *v4;\n");
                break;
            }
            case 0x52u: {
                //        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
                //          sub_999("stack overflow detected");
                long long v5 = v11[3];
                v11[3] = v5 + 1;
                v11[1] = stack[v5];
                printf("v5 = v11[3];\n");
                printf("v11[3] = v5 + 1;\n");
                printf("v11[1] = %d;\n", v11[1]);
                break;
            }
            case 0x53u: {
                //        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
                //          sub_999("stack overflow detected");
                long long v6 = v11[3];
                v11[3] = v6 + 1;
                v11[2] = opcode[v6];
                printf("v6 = (_QWORD *)v11[3];\n");
                printf("v11[3] = v6 + 1;\n");
                printf("v11[2] = *v6;\n");
                break;
            }
            case 0x61u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[0] += tmp;
                printf("v21 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 += v21;\n");
                break;
            }
            case 0x62u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] += tmp;

                printf("v22 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] += v22;\n");
                break;
            }
            case 0x63u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] += tmp;

                printf("v23 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] += v23;\n");
                break;
            }
            case 0x64u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[0] -= tmp;

                printf("v26 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 -= v26;\n");
                break;
            }
            case 0x65u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] -= tmp;

                printf("v27 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] -= v27;\n");
                break;
            }
            case 0x66u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] -= tmp;

                printf("v28 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] -= v28;\n");
                break;
            }
            case 0x67u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[0] *= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 *= v29;\n");
                break;
            }
            case 0x68u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] *= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] *= v29;\n");
                break;
            }
            case 0x69u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] *= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] *= v29;\n");
                break;
            }
            case 0x6Au: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] * pow(16, 2*i);
                }
                v11_5 += 8;
                v11[0] ^= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 ^= %lld;\n", tmp);
                break;
            }
            case 0x6Bu: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] ^= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] ^= v29;\n");
                break;
            }
            case 0x6Cu: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] ^= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] ^= v29;\n");
                break;
            }
            case 0x6Du:
                v11[0] = 0;
                printf("v11[0] = 0;\n");
                break;
            case 0x6Eu:
                v11[1] = 0;
                printf("v11[1] = 0;\n");
                break;
            case 0x6Fu:
                v11[2] = 0;
                printf("v11[2] = 0;\n");
                break;
            case 0x7Eu: {
                int v36 = opcode[v11_5] + opcode[v11_5] * 16 * 16;
                v11_5 += 2;
                v11_5 += v36;
                printf("v36 = *(__int16 *)v11[5];\n");
                printf("v11[5] += 2LL;\n");
                printf("v11[5] += v36;\n");
                break;
            }
            case 0x7Fu:
                v11_5 = v11[0];
                printf("v11[5] = *v11;\n");
                break;
            case 0x80u: {
                int v7 = v11_5;
                v11[3] += 8LL;
                v11[3] = v7;
                v11_5 = v11[0];

                printf("v7 = v11[5];\n");
                printf("v11[3] += 8LL;\n");
                printf("*(_QWORD *)v11[3] = v7;\n");
                printf("v11[5] = *v11;\n");
                break;
            }
            case 0x81u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[3] += tmp & 0xFFFFFFFFFFFFFFF8LL;
                printf("v24 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[3] += v24 & 0xFFFFFFFFFFFFFFF8LL;\n");
                break;
            }
            case 0x82u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[3] += tmp & 0xFFFFFFFFFFFFFFF8LL;
                printf("tmp = %d;\n", tmp);
                printf("v11[5] += 8LL;\n");
                printf("v11[3] += tmp & 0xFFFFFFFFFFFFFFF8LL;\n");
                break;
            }
            case 0x88u: {
                int v37 = opcode[v11_5] + opcode[v11_5] * 16 * 16;
                v11_5 += 2;

                int v8 = v11_5;
                v11[3] += 8;
                v11[3] = v8;
                v11_5 += v37;
                printf("v37 = *(__int16 *)v11[5];\n");
                printf("v11[5] += 2LL;\n");
                printf("v8 = v11[5];\n");
                printf("v11[3] += 8LL;\n");
                printf("*(_QWORD *)v11[3] = v8;\n");
                printf("v11[5] += v37;\n");
                break;
            }
            case 0x8Fu:
                v11_5++;
                printf("v35 = %d;\n", opcode[v11_5-1]);
                break;
            case 0x90u: {
                long long v9 = v11[3];
                v11[3] = v9 - 1;
                v11[5] = v9;
                printf("v9 = (_QWORD *)v11[3];\n");
                printf("v11[3] = v9 + 0xFFFFFFFF;\n");
                printf("v11[5] = *v9;\n");
                break;
            }
            case 0xFFu:
                return 0;
            default:
                printf(":%d\n", v3);
                return 1;
        }
    }

    return 0;
}
