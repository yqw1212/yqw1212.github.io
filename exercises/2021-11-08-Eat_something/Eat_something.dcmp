export memory memory(initial: 256, max: 256);

global g_a:int = 5243984;
global g_b:int = 0;
global g_c:int = 0;

export table indirect_function_table:funcref(min: 1, max: 1);

data d_inzYouarerightYouarewrong(offset: 1024) = 
  "\86\8b\aa\85\ac\89\f0\af\d8i\d6\dd\b2\bfn\e5\ae\99\cc\d5\bc\8b\f2}z\e3"
  "You are right!\00You are wrong!\00";

export function wasm_call_ctors() {
  emscripten_stack_init()
}

export function checkright(a:int):int {
  var b:int = g_a;
  var c:int = 96;
  var d:int_ptr = b - c;
  d[22] = a;
  var e:int = 48;
  var f:int = d + e;
  var g:long_ptr = f;
  var h:int = 24;
  var i:short_ptr = g + h;
  var j:int = 0;
  var k:int = j[524]:ushort;
  i[0] = k;
  var l:int = 16;
  var m:long_ptr = g + l;
  var rb:long = j[130]:long;
  m[0] = rb;
  var n:int = 8;
  var o:long_ptr = g + n;
  var sb:long = j[129]:long;
  o[0] = sb;
  var tb:long = j[128]:long;
  g[0] = tb;
  var p:int = 33;
  var q:int = d + p;
  var r:long_ptr@1 = q;
  var s:int = 7;
  var t:long_ptr@1 = r + s;
  var u:long_ptr@1 = 0;
  var ub:long = u[1057];
  t[0] = ub;
  var vb:long = u[1050];
  r[0] = vb;
  var v:int = 18;
  var w:int = d + v;
  var x:long_ptr@1 = w;
  var y:int = 7;
  var z:long_ptr@1 = x + y;
  var aa:long_ptr@1 = 0;
  var wb:long = aa[1072];
  z[0] = wb;
  var xb:long = aa[1065];
  x[0] = xb;
  var ba:int = 0;
  d[3] = ba;
  loop L_c {
    var ca:int = d[3];
    var da:int = 26;
    var ea:int = ca;
    var fa:int = da;
    var ga:int = ea < fa;
    var ha:int = 1;
    var ia:int = ga & ha;
    if (eqz(ia)) goto B_b;
    var ja:int = d[3];
    var ka:int = 48;
    var la:int = d + ka;
    var ma:int = la;
    var na:ubyte_ptr = ma + ja;
    var oa:int = na[0];
    var pa:int = 255;
    var qa:int = oa & pa;
    var ra:int = d[22];
    var sa:int = d[3];
    var ta:ubyte_ptr = ra + sa;
    var ua:int = ta[0];
    var va:int = 24;
    var wa:int = ua << va;
    var xa:int = wa >> va;
    var ya:int = 1;
    var za:int = xa << ya;
    var ab:int = d[3];
    var bb:int = za ^ ab;
    var cb:int = qa;
    var db:int = bb;
    var eb:int = cb == db;
    var fb:int = 1;
    var gb:int = eb & fb;
    if (eqz(gb)) goto B_e;
    goto B_d;
    label B_e:
    var hb:int = 18;
    var ib:int = d + hb;
    var jb:int = ib;
    d[23] = jb;
    goto B_a;
    label B_d:
    var kb:int = d[3];
    var lb:int = 1;
    var mb:int = kb + lb;
    d[3] = mb;
    continue L_c;
  }
  unreachable;
  label B_b:
  var nb:int = 33;
  var ob:int = d + nb;
  var pb:int = ob;
  d[23] = pb;
  label B_a:
  var qb:int = d[23];
  return qb;
}

export function stackSave():int {
  return g_a
}

export function stackRestore(a:int) {
  g_a = a
}

export function stackAlloc(a:int):int {
  var b:int = g_a - a & -16;
  g_a = b;
  return b;
}

export function emscripten_stack_init() {
  g_c = 5243984;
  g_b = 1100 + 15 & -16;
}

export function emscripten_stack_get_free():int {
  return g_a - g_b
}

export function emscripten_stack_get_end():int {
  return g_b
}

function f_i(a:int):int {
  return 1
}

function f_j(a:int) {
}

function f_k(a:int) {
}

function f_l(a:int) {
}

function f_m():int {
  f_k(1080);
  return 1088;
}

function f_n() {
  f_l(1080)
}

export function fflush(a:int_ptr):int {
  var c:int;
  var b:int;
  if (eqz(a)) goto B_b;
  if (a[19] > -1) goto B_c;
  return f_p(a);
  label B_c:
  b = f_i(a);
  c = f_p(a);
  if (eqz(b)) goto B_a;
  f_j(a);
  return c;
  label B_b:
  c = 0;
  if (eqz(0[273]:int)) goto B_d;
  c = fflush(0[273]:int);
  label B_d:
  a = f_m()[0]:int;
  if (eqz(a)) goto B_e;
  loop L_f {
    b = 0;
    if (a[19] < 0) goto B_g;
    b = f_i(a);
    label B_g:
    if (a[5] <= a[7]) goto B_h;
    c = f_p(a) | c;
    label B_h:
    if (eqz(b)) goto B_i;
    f_j(a);
    label B_i:
    a = a[14];
    if (a) continue L_f;
  }
  label B_e:
  f_n();
  label B_a:
  return c;
}

function f_p(a:int):int {
  var c:int;
  if (a[5]:int <= a[7]:int) goto B_a;
  call_indirect(a, 0, 0, a[9]:int);
  if (a[5]:int) goto B_a;
  return -1;
  label B_a:
  var b:int = a[1]:int;
  if (b >= (c = a[2]:int)) goto B_b;
  call_indirect(a, i64_extend_i32_s(b - c), 1, a[10]:int);
  label B_b:
  a[7]:int = 0;
  a[2]:long = 0L;
  a[1]:long@4 = 0L;
  return 0;
}

export function errno_location():int {
  return 1096
}

