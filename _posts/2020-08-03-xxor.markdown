---
layout: post
title:  xxor(GWCTF 2019)
date:   2020-08-03 00:01:01 +0300
image:  2020-08-03-crescent.jpg
tags:   [ctf,reverse,GWCTF]
---

ida64打开文件进入main函数反编译，查看代码

```assembly
__int64 __fastcall main(__int64 a1, char **a2, char **a3)
{
    signed int i; // [rsp+8h] [rbp-68h]
    signed int j; // [rsp+Ch] [rbp-64h]
    __int64 v6; // [rsp+10h] [rbp-60h]
    __int64 v7; // [rsp+18h] [rbp-58h]
    __int64 v8; // [rsp+20h] [rbp-50h]
    __int64 v9; // [rsp+28h] [rbp-48h]
    __int64 v10; // [rsp+30h] [rbp-40h]
    __int64 v11; // [rsp+40h] [rbp-30h]
    __int64 v12; // [rsp+48h] [rbp-28h]
    __int64 v13; // [rsp+50h] [rbp-20h]
    __int64 v14; // [rsp+58h] [rbp-18h]
    __int64 v15; // [rsp+60h] [rbp-10h]
    unsigned __int64 v16; // [rsp+68h] [rbp-8h]

    v16 = __readfsqword(0x28u);
    puts("Let us play a game?");
    puts("you have six chances to input");
    puts("Come on!");
    v6 = 0LL;
    v7 = 0LL;
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    for ( i = 0; i <= 5; ++i )
    {
      printf("%s", "input: ", (unsigned int)i);
      __isoc99_scanf("%d", (char *)&v6 + 4 * i);
    }
    v11 = 0LL;
    v12 = 0LL;
    v13 = 0LL;
    v14 = 0LL;
    v15 = 0LL;
    for ( j = 0; j <= 4; j += 2 )
    {
        dword_601078 = *((_DWORD *)&v6 + j);
        dword_60107C = *((_DWORD *)&v6 + j + 1);
        sub_400686((unsigned int *)&dword_601078, &unk_601060);
        *((_DWORD *)&v11 + j) = dword_601078;
        *((_DWORD *)&v11 + j + 1) = dword_60107C;
    }
    if ( (unsigned int)sub_400770(&v11) != 1 )
    {
        puts("NO NO NO~ ");
        exit(0);
    }
    puts("Congratulation!\n");
    puts("You seccess half\n");
    puts("Do not forget to change input to hex and combine~\n");
    puts("ByeBye");
    return 0LL;
}
```

首先输入六个数，然后每两个数进入sub_400686()函数进行变换，将变换后的值存入v11开头的数据段中。再通过sub_200770函数比较。

查看sub_200770()函数

```assembly
signed __int64 __fastcall sub_400770(_DWORD *a1)
{
    signed __int64 result; // rax

    if ( a1[2] - a1[3] != 2225223423LL || a1[3] + a1[4] != 4201428739LL || a1[2] - a1[4] != 1121399208LL )
    {
      puts("Wrong!");
      result = 0LL;
    }
    else if ( *a1 != -548868226 || a1[5] != -2064448480 || a1[1] != 550153460 )
    {
      puts("Wrong!");
      result = 0LL;
    }
    else
    {
      puts("good!");
      result = 1LL;
    }
    return result;
}
```

简单的数学方程，得到变换后的值

```assembly
a[6] = {-548868226,550153460,3774025685,1548802262,2652626477,-2064448480};
```

最后就是数字原来的值

查看sub_400686()函数

```assembly
__int64 __fastcall sub_400686(unsigned int *a1, _DWORD *a2)
{
    __int64 result; // rax
    unsigned int v3; // [rsp+1Ch] [rbp-24h]
    unsigned int v4; // [rsp+20h] [rbp-20h]
    int v5; // [rsp+24h] [rbp-1Ch]
    unsigned int i; // [rsp+28h] [rbp-18h]

    v3 = *a1;
    v4 = a1[1];
    v5 = 0;
    for ( i = 0; i <= 0x3F; ++i )
    {
        v5 += 1166789954;
        v3 += (v4 + v5 + 11) ^ ((v4 << 6) + *a2) ^ ((v4 >> 9) + a2[1]) ^ 0x20;
        v4 += (v3 + v5 + 20) ^ ((v3 << 6) + a2[2]) ^ ((v3 >> 9) + a2[3]) ^ 0x10;
    }
    *a1 = v3;
    result = v4;
    a1[1] = v4;a
    return result;
}
```

可以看出这是一个TEA加密算法的变形。

编写C语言TEA解密脚本

```assembly
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int a[6] = {-548868226,550153460,3774025685,1548802262,2652626477,-2064448480};
    for(int i=0;i<5;i+=2)
    {
        int v3 = a[i],v4 = a[i+1];
        int v5 = 1166789954*64;
        for (int j = 0; j <= 0x3F; ++j )
        {
            v4 -= (v3 + v5 + 20) ^ ((v3 << 6) + 3) ^ ((v3 >> 9) + 4) ^ 0x10;
            v3 -= (v4 + v5 + 11) ^ ((v4 << 6) + 2) ^ ((v4 >> 9) + 2) ^ 0x20;
            v5 -= 1166789954;
        }
        a[i] = v3;
        a[i+1] = v4;
    }
    for(int i=0;i<6;i++)
    {
        printf("%x",a[i]);
    }

    return 0;
}

```

输出结果

```assembly
d65d3586a425313b5e118710eed8e45a4fd2e8aef834bd87
```

拿去16进制转字符串得到

```assembly
5Ở褚OҨ퇀
```

我~~TM~~当场自闭，明明编写的解密算法没有问题。

后来发现，sub_400686()函数中的数据类型全是unsigned int，而我的解密脚本中为int，将int改为unsigned int。

```assembly
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int a[6] = {-548868226,550153460,3774025685,1548802262,2652626477,-2064448480};
    for(int i=0;i<5;i+=2)
    {
        unsigned int v3 = a[i],v4 = a[i+1];
        int v5 = 1166789954*64;
        for (int j = 0; j <= 0x3F; ++j )
        {
            v4 -= (v3 + v5 + 20) ^ ((v3 << 6) + 3) ^ ((v3 >> 9) + 4) ^ 0x10;
            v3 -= (v4 + v5 + 11) ^ ((v4 << 6) + 2) ^ ((v4 >> 9) + 2) ^ 0x20;
            v5 -= 1166789954;
        }
        a[i] = v3;
        a[i+1] = v4;
    }
    for(int i=0;i<6;i++)
    {
        printf("%x",a[i]);
    }

    return 0;
}

```

运行结果

```assembly
666c61677b72655f69735f6772656174217d
```

转字符串得到flag

```assembly
flag{re_is_great!}
```

后来查阅资料找到原因

```assembly
在C语言中，对于移位操作执行的是逻辑左移和算术右移，不过对于无符号类型，所有的移位操作都是逻辑的。有符号类型的算术右移会继承最左边的符号位，无符号不会继承符号位，用0填充，这就导致有符号和无符号的位运算结果不一样。
```

