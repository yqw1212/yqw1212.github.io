---
layout: post
title:  stack
date:   2021-03-24 00:01:01 +0300
image:  2021-03-24-tulips.jpg
tags:   [algorithm,leetcode,stack]
---

1021.删除最外层的括号

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

示例 2：

```assembly
输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
```

示例 3：

```assembly
输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
```

code

```assembly
char * removeOuterParentheses(char * S){
    char stack[10002] = {0};
    int point = 0;
    char result[10002] = "";
    int result_point = 0;
    
    int left = 0;
    for(int i = 0; S[i]!='\0'; i++){
        if(point == 0 && S[i] == '('){ //栈为空
            stack[point] = S[i];
            point++;
            left = i; //记录开头下标
            continue;
        }
        if(S[i]==')' && stack[point-1]=='('){
            if(point==1){ //从left+1位置到i-1位置全部复制到result
                for(int j=left+1;j<=i-1;j++){
                    result[result_point++] = S[j];
                }
            }
            point--;
        }else{
            stack[point] = S[i];
            point++;
        }
    }
    int i=0;
    for(;result[i]!='\0';i++){
        S[i] = result[i];
    }
    S[i] = '\0';
    return S;
}
```

682.棒球比赛

你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。

比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：

整数 x - 表示本回合新获得分数 x
"+" - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。
"D" - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。
"C" - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。
请你返回记录中所有得分的总和。

**示例 1：**

```assembly
输入：ops = ["5","2","C","D","+"]
输出：30
解释：
"5" - 记录加 5 ，记录现在是 [5]
"2" - 记录加 2 ，记录现在是 [5, 2]
"C" - 使前一次得分的记录无效并将其移除，记录现在是 [5].
"D" - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].
"+" - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].
所有得分的总和 5 + 10 + 15 = 30
```

code

```assembly
int calPoints(char ** ops, int opsSize){
    int pointer = 0;
    int stack[1000] = {0};
    int sum = 0;
    for(int i=0;i<opsSize;i++){
        if(ops[i][0]=='C'){
            pointer--;
            stack[pointer] = 0;
        }else if(ops[i][0]=='D'){
            stack[pointer] = 2*stack[pointer-1];
            pointer++;
        }else if(ops[i][0]=='+'){
            stack[pointer] = stack[pointer-1] + stack[pointer-2];
            pointer++;
        }else{
            stack[pointer++] = atoi(ops[i]);
        }
    }
    for(int i=0;i<pointer;i++){
        sum += stack[i];
    }
    return sum;
}
```

