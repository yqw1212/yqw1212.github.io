---
layout: post
title:  py交易
date:   2021-06-10 00:01:01 +0300
image:  2021-06-10-woman.jpg
tags:   [ctf,reverse,蓝帽杯,pyc]
---

直接给了pyc文件，直接反编译失败，说明pyc文件存在混淆。

### pyc文件结构

首先pyc文件是python源码进行编译之后得到的字节码文件。Pyc 文件是 PythonCodeObject 对象的持久化保存方式。有时候会见到 Pyo 文件，这个是经过 Python 解释器优化后生成的字节码，这个优化只是缩小了文件的体积，在代码运行速度上和 Pyc 差不多。

虽然Python是解释型语言，但并非直接解释源码，而是先编译到字节码然后解释执行字节码。Python2和Python3字节码有区别不通用，同时目前以及可遇见范围内的事实标准都是CPython实现。

pyc文件由3部分组成：

- 最开始4个字节是标识此pyc的版本的`Magic Number`, 具体对应关系在`Python/import.c`内定义，或在Python解释器目录下`./lib/python3.7/importlib/_bootstrap-external.py`中有明确的版本号记录。这里的版本号是解释器字节码更新的版本号。

  ```assembly
  # Magic word to reject .pyc files generated by other Python versions.
  # It should change for each incompatible change to the bytecode.
  #
  # The value of CR and LF is incorporated so if you ever read or write
  # a .pyc file in text mode the magic number will be wrong; also, the
  # Apple MPW compiler swaps their values, botching string constants.
  #
  # There were a variety of old schemes for setting the magic number.
  # The current working scheme is to increment the previous value by
  # 10.
  #
  # Starting with the adoption of PEP 3147 in Python 3.2, every bump in magic
  # number also includes a new "magic tag", i.e. a human readable string used
  # to represent the magic number in __pycache__ directories.  When you change
  # the magic number, you must also set a new unique magic tag.  Generally this
  # can be named after the Python major version of the magic number bump, but
  # it can really be anything, as long as it's different than anything else
  # that's come before.  The tags are included in the following table, starting
  # with Python 3.2a0.
  #
  # Known values:
  #  Python 1.5:   20121
  #  Python 1.5.1: 20121
  #     Python 1.5.2: 20121
  #     Python 1.6:   50428
  #     Python 2.0:   50823
  #     Python 2.0.1: 50823
  #     Python 2.1:   60202
  #     Python 2.1.1: 60202
  #     Python 2.1.2: 60202
  #     Python 2.2:   60717
  #     Python 2.3a0: 62011
  #     Python 2.3a0: 62021
  #     Python 2.3a0: 62011 (!)
  #     Python 2.4a0: 62041
  #     Python 2.4a3: 62051
  #     Python 2.4b1: 62061
  #     Python 2.5a0: 62071
  #     Python 2.5a0: 62081 (ast-branch)
  #     Python 2.5a0: 62091 (with)
  #     Python 2.5a0: 62092 (changed WITH_CLEANUP opcode)
  #     Python 2.5b3: 62101 (fix wrong code: for x, in ...)
  #     Python 2.5b3: 62111 (fix wrong code: x += yield)
  #     Python 2.5c1: 62121 (fix wrong lnotab with for loops and
  #                          storing constants that should have been removed)
  #     Python 2.5c2: 62131 (fix wrong code: for x, in ... in listcomp/genexp)
  #     Python 2.6a0: 62151 (peephole optimizations and STORE_MAP opcode)
  #     Python 2.6a1: 62161 (WITH_CLEANUP optimization)
  #     Python 2.7a0: 62171 (optimize list comprehensions/change LIST_APPEND)
  #     Python 2.7a0: 62181 (optimize conditional branches:
  #                          introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE)
  #     Python 2.7a0  62191 (introduce SETUP_WITH)
  #     Python 2.7a0  62201 (introduce BUILD_SET)
  #     Python 2.7a0  62211 (introduce MAP_ADD and SET_ADD)
  #     Python 3000:   3000
  #                    3010 (removed UNARY_CONVERT)
  #                    3020 (added BUILD_SET)
  #                    3030 (added keyword-only parameters)
  #                    3040 (added signature annotations)
  #                    3050 (print becomes a function)
  #                    3060 (PEP 3115 metaclass syntax)
  #                    3061 (string literals become unicode)
  #                    3071 (PEP 3109 raise changes)
  #                    3081 (PEP 3137 make __file__ and __name__ unicode)
  #                    3091 (kill str8 interning)
  #                    3101 (merge from 2.6a0, see 62151)
  #                    3103 (__file__ points to source file)
  #     Python 3.0a4: 3111 (WITH_CLEANUP optimization).
  #     Python 3.0b1: 3131 (lexical exception stacking, including POP_EXCEPT
                            #3021)
  #     Python 3.1a1: 3141 (optimize list, set and dict comprehensions:
  #                         change LIST_APPEND and SET_ADD, add MAP_ADD #2183)
  #     Python 3.1a1: 3151 (optimize conditional branches:
  #                         introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE
                            #4715)
  #     Python 3.2a1: 3160 (add SETUP_WITH #6101)
  #                   tag: cpython-32
  #     Python 3.2a2: 3170 (add DUP_TOP_TWO, remove DUP_TOPX and ROT_FOUR #9225)
  #                   tag: cpython-32
  #     Python 3.2a3  3180 (add DELETE_DEREF #4617)
  #     Python 3.3a1  3190 (__class__ super closure changed)
  #     Python 3.3a1  3200 (PEP 3155 __qualname__ added #13448)
  #     Python 3.3a1  3210 (added size modulo 2**32 to the pyc header #13645)
  #     Python 3.3a2  3220 (changed PEP 380 implementation #14230)
  #     Python 3.3a4  3230 (revert changes to implicit __class__ closure #14857)
  #     Python 3.4a1  3250 (evaluate positional default arguments before
  #                        keyword-only defaults #16967)
  #     Python 3.4a1  3260 (add LOAD_CLASSDEREF; allow locals of class to override
  #                        free vars #17853)
  #     Python 3.4a1  3270 (various tweaks to the __class__ closure #12370)
  #     Python 3.4a1  3280 (remove implicit class argument)
  #     Python 3.4a4  3290 (changes to __qualname__ computation #19301)
  #     Python 3.4a4  3300 (more changes to __qualname__ computation #19301)
  #     Python 3.4rc2 3310 (alter __qualname__ computation #20625)
  #     Python 3.5a1  3320 (PEP 465: Matrix multiplication operator #21176)
  #     Python 3.5b1  3330 (PEP 448: Additional Unpacking Generalizations #2292)
  #     Python 3.5b2  3340 (fix dictionary display evaluation order #11205)
  #     Python 3.5b3  3350 (add GET_YIELD_FROM_ITER opcode #24400)
  #     Python 3.5.2  3351 (fix BUILD_MAP_UNPACK_WITH_CALL opcode #27286)
  #     Python 3.6a0  3360 (add FORMAT_VALUE opcode #25483)
  #     Python 3.6a1  3361 (lineno delta of code.co_lnotab becomes signed #26107)
  #     Python 3.6a2  3370 (16 bit wordcode #26647)
  #     Python 3.6a2  3371 (add BUILD_CONST_KEY_MAP opcode #27140)
  #     Python 3.6a2  3372 (MAKE_FUNCTION simplification, remove MAKE_CLOSURE
  #                         #27095)
  #     Python 3.6b1  3373 (add BUILD_STRING opcode #27078)
  #     Python 3.6b1  3375 (add SETUP_ANNOTATIONS and STORE_ANNOTATION opcodes
  #                         #27985)
  #     Python 3.6b1  3376 (simplify CALL_FUNCTIONs & BUILD_MAP_UNPACK_WITH_CALL
                            #27213)
  #     Python 3.6b1  3377 (set __class__ cell from type.__new__ #23722)
  #     Python 3.6b2  3378 (add BUILD_TUPLE_UNPACK_WITH_CALL #28257)
  #     Python 3.6rc1 3379 (more thorough __class__ validation #23722)
  #     Python 3.7a1  3390 (add LOAD_METHOD and CALL_METHOD opcodes #26110)
  #     Python 3.7a2  3391 (update GET_AITER #31709)
  #     Python 3.7a4  3392 (PEP 552: Deterministic pycs #31650)
  #     Python 3.7b1  3393 (remove STORE_ANNOTATION opcode #32550)
  #     Python 3.7b5  3394 (restored docstring as the first stmt in the body;
  #                         this might affected the first line number #32911)
  #
  # MAGIC must change whenever the bytecode emitted by the compiler may no
  # longer be understood by older implementations of the eval loop (usually
  # due to the addition of new opcodes).
  #
  # Whenever MAGIC_NUMBER is changed, the ranges in the magic_values array
  # in PC/launcher.c must also be updated.
  ```

- 接下来四个字节还是pyc产生的时间(TIMESTAMP, 1970.01.01到产生pyc时候的秒数)
- 接下来是序列化了的`PyCodeObject`,作为整体的字节码对象存在，命名空间为，是pyc文件加载的时候最先执行的字节吗空间。其余的函数在该对象上组织并初始化。

### PyCodeObject

可以利用marshal库来反序列化pyc文件里的`PyCodeObject`看一下有的字段。

```assembly
Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import marshal
>>> f = open('py交易.pyc','rb')
>>> f.read(8)
b'\x03\xf3\r\nLiT\\'
>>> code = marshal.load(f)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: bad marshal data (unknown type code)
```

换用python2

```assembly
Python 2.7.17 (v2.7.17:c2f86d86e6, Oct 19 2019, 21:01:17) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import marshal
>>> f = open('py交易.pyc','rb')
>>> f.read(8)
'\x03\xf3\r\nLiT\\'
>>> code = marshal.load(f)
>>> for x in list(filter(lambda x: x[:2] != '__', dir(code))):
...     x
...
'co_argcount'      # code需要的位置参数个数,不包括变长参数(*args 和 **kwargs)
'co_cellvars'      # code 所用到的 cellvar 的变量名,tuple 类型, 元素是 PyStringObject('s/t/R')
'co_code'          # PyStringObject('s'), code对应的字节码
'co_consts'        # 所有常量组成的 tuple
'co_filename'      # PyStringObject('s'), 此 code 对应的 py 文件名
'co_firstlineno'   # 此 code 对应的 py 文件里的第一行的行号
'co_flags'         # 一些标识位,也在 code.h 里定义,注释很清楚,比如 CO_NOFREE(64) 表示此 PyCodeObject 内无 freevars 和 cellvars 等
'co_freevars'      # code 所用到的 freevar 的变量名,tuple 类型, 元素是 PyStringObject('s/t/R')
'co_lnotab'        # PyStringObject('s'),指令与行号的对应表
'co_name'          # 此 code 的名称
'co_names'         # code 所用的到符号表, tuple 类型,元素是字符串
'co_nlocals'       # code内所有的局部变量的个数,包括所有参数
'co_stacksize'     # code段运行时所需要的最大栈深度
'co_varnames'      # code 所用到的局部变量名, tuple 类型, 元素是 PyStringObject('s/t/R')
>>>
```

其中最关键的例如:

- `co_name` 这个`PyCodeObject`的名称，如``，`str2hex`等
- `co_names` 这个`PyCodeObject`用到的符号(函数，变量）表，如`('sys', 'str2hex', 'hex2str', 'p_s', 'p_f', 'count', 'stdout', 'write', 'stdin', 'read', 'flag')`
- `co_varnames` 这个`PyCodeObject`用到的局部变量名表，如`('DIVIDER',)`
- `co_code` 这个`PyCodeObject`所对应的实际字节码内容
- `co_consts` 这个`PyCodeObject`之上所有的常量列表，这个很重要，存储了所用得到的所有函数的`PyCodeObject`，形成了嵌套关系。

查看`PyCodeObject`之上所有的常量列表

```assembly
>>> code.co_consts
(-1, None, <code object str2hex at 00000000031AC130, file "enc.py", line 3>, <code object hex2str at 0000000003340D30, file "enc.py", line 9>, <code object p_s at 0000000003340DB0, file "enc.py", line 14>, <code object p_f at 0000000003340E30, file "enc.py", line 17>, <code object count at 0000000003340EB0, file "enc.py", line 20>, 102, 108, 97, 103, 58, 38, 4130330538L, 1627830889, 3168701571L, 4084147187L, 3521152606L, 651787064, 1860581437, 2730391645L, 2694209818L, 3715947653L, 3816944324L, 394367122, None)
```

所以结构是`PyCodeObject.co_consts`里面包含了所用到的函数的`PyCodeObject`，逐层嵌套构造得到整个字节码对象。

### co_code

用marshal得到的`co_code`里面的字节码以`str`存储，一般来说可以用`dis`库进行反汇编：

`dis`在反汇编的时候会对引用到的参数会进行解析，虽然方便，但也带来了问题。具体的字节码功能可以在[官方文档](https://docs.python.org/2/library/dis.html)找到。

但在这道题的情况下就不适用了:

```assembly
>>> import dis
>>> dis.dis(code.co_code)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python2.7/dis.py", line 45, in dis
    disassemble_string(x)
  File "/usr/lib/python2.7/dis.py", line 112, in disassemble_string
    labels = findlabels(code)
  File "/usr/lib/python2.7/dis.py", line 166, in findlabels
    oparg = ord(code[i]) + ord(code[i+1])*256
IndexError: string index out of range
```

阅读错误提示和源码可以发现是在解析指令参数的过程中有问题。首先所有的指令可以分为两类，不需要参数和需要参数的，Python字节码在设计的时候故意把没有参数的指令分配在了对应编号的低位，高位都是有参数的，以`Include/opcode.h`中的`HAVE_ARGUMENT`分界。他们的在二进制级别上的组织是这样的：

- `[指令]` 不需要参数的指令只占用一个字节
- `[指令] [参数低字节] [参数高字节]` 需要参数的指令占用三个字节，一个字节指令，两个字节参数

那么按照这个格式来看一下让`dis`崩溃的字节码:

```assembly
>>> list(map(ord,code.co_code[:9]))
[113, 158, 2, 136, 104, 110, 126, 58, 140]
>>> dis.opname[113]
'JUMP_ABSOLUTE'
>>> 2*256+158
670
>>> dis.opname[136]
'LOAD_DEREF'
>>> 110*256+104
28264
```

dis.opname:
Sequence of operation names, indexable using the bytecode.

从上面可以看到，第一条指令是`JUMP_ABSOLTE 670`，这个offset的指令是真实存在的，所以指令合法。但是第二条指令应该是`LOAD_DEREF 28264`，这个index的对象并不存在，在`dis`尝试解析的时候就会崩溃。

实际上因为之前的跳转指令所以第二条的非法指令并不会被真实执行到，所以pyc文件作者是故意加入不影响执行的非法指令触发分析软件崩溃，阻碍对该pyc文件的分析。

### 常见指令

详细内容见官方文档

##### 一般指令与一元操作指令

| 指令                | 作用                                                         |
| :------------------ | :----------------------------------------------------------- |
| NOP                 | 无作用，用于占位                                             |
| POP_TOP             | 弹出栈顶元素                                                 |
| LOAD_CONST          | 将读取的值推入栈                                             |
| LOAD_GLOBAL         | 将全局变量对象压入栈顶                                       |
| STORE_FAST          | 将栈顶指令存入对应局部变量                                   |
| COMPARE_OP          | 比较操作符                                                   |
| CALL_FUNCTION       | 调用函数                                                     |
| BUILD_SLICE         | 调用切片，跟的参数为切片的值的个数，一般从上到下为 [Val1:Val2:Val3] |
| JUMP_ABSOLUTE       | 向下跳转几句操作符，变量为跳转偏移量                         |
| UNARY_POSITIVE      | 实现 Val1 = +Val1                                            |
| UNARY_NEGATIVE      | 实现 Val1 = -Val1                                            |
| UNARY_NOT           | 实现 Val1 = not Val1                                         |
| UNARY_INVERT        | 实现 Val1 = ~Val                                             |
| FOR_ITER            | for 循环                                                     |
| GET_ITER            | 获取迭代器（一般后面跟循环）                                 |
| GET_YIELD_FROM_ITER | 获取 yield 生成器                                            |

##### 二元操作指令

| 指令                   | 作用                                 |
| :--------------------- | :----------------------------------- |
| BINARY_POWER           | 乘方，栈顶数为指数                   |
| BINARY_MULTIPLY        | 乘法                                 |
| BINARY_MATRIX_MULTIPLY | 矩阵乘法，3.5 引入的新功能           |
| BINARY_FLOOR_DIVIDE    | 除法，结果向下取整                   |
| BINARY_TRUE_DIVIDE     | 除法                                 |
| BINARY_MODULO          | 取余                                 |
| BINARY_ADD             | 加法                                 |
| BINARY_SUBTRACT        | 减法                                 |
| BINARY_SUBSCR          | 数组取下标，栈顶为下标               |
| BINARY_LSHIFT          | 左移操作符（乘2）                    |
| BINARY_RSHIFT          | 右移操作符（除2向下取整）            |
| BINARY_AND             | 按位与                               |
| BINARY_XOR             | 异或                                 |
| BINARY_OR              | 按位或                               |
| STORE_SUBSCR           | 列表下标存储，例如 Val1[Val2] = Val3 |
| DELETE_SUBSCR          | 按下标删除元素，例如 del Val1[Val2]  |

##### 自身操作指令，类似 b += 1 ，就是上方有 BINARY 的指令的 BINARY 改成 INPLACE

##### 其他指令见官方文档

### 绕过恶意指令的阻碍

#### 修改dis模块

既然是通过利用引用解析过程完成分析崩溃，那就直接停用引用解析好了。 于是手动修改`dis`模块忽略错误，尽可能解析pyc文件。

手动修改dis.py文件

```assembly
--- Lib/diss.py	2019-08-25 00:49:18.456577561 +0800
+++ Lib/dis.py	2019-08-15 20:55:23.731848440 +0800
@@ -85,32 +85,26 @@
         print opname[op].ljust(20),
         i = i+1
         if op >= HAVE_ARGUMENT:
-            try:
-                oparg = ord(code[i]) + ord(code[i+1])*256 + extended_arg
-            except:
-                pass
+            oparg = ord(code[i]) + ord(code[i+1])*256 + extended_arg
             extended_arg = 0
             i = i+2
             if op == EXTENDED_ARG:
                 extended_arg = oparg*65536L
             print repr(oparg).rjust(5),
-            try:
-                if op in hasconst:
-                    print '(' + repr(co.co_consts[oparg]) + ')',
-                elif op in hasname:
-                    print '(' + co.co_names[oparg] + ')',
-                elif op in hasjrel:
-                    print '(to ' + repr(i + oparg) + ')',
-                elif op in haslocal:
-                    print '(' + co.co_varnames[oparg] + ')',
-                elif op in hascompare:
-                    print '(' + cmp_op[oparg] + ')',
-                elif op in hasfree:
-                    if free is None:
-                        free = co.co_cellvars + co.co_freevars
-                    print '(' + free[oparg] + ')',
-            except:
-                pass
+            if op in hasconst:
+                print '(' + repr(co.co_consts[oparg]) + ')',
+            elif op in hasname:
+                print '(' + co.co_names[oparg] + ')',
+            elif op in hasjrel:
+                print '(to ' + repr(i + oparg) + ')',
+            elif op in haslocal:
+                print '(' + co.co_varnames[oparg] + ')',
+            elif op in hascompare:
+                print '(' + cmp_op[oparg] + ')',
+            elif op in hasfree:
+                if free is None:
+                    free = co.co_cellvars + co.co_freevars
+                print '(' + free[oparg] + ')',
         print
 
 def disassemble_string(code, lasti=-1, varnames=None, names=None,
@@ -128,32 +122,29 @@
         print repr(i).rjust(4),
         print opname[op].ljust(15),
         i = i+1
-        try:
-            if op >= HAVE_ARGUMENT:
-                oparg = ord(code[i]) + ord(code[i+1])*256
-                i = i+2
-                print repr(oparg).rjust(5),
-                if op in hasconst:
-                    if constants:
-                        print '(' + repr(constants[oparg]) + ')',
-                    else:
-                        print '(%d)'%oparg,
-                elif op in hasname:
-                    if names is not None:
-                        print '(' + names[oparg] + ')',
-                    else:
-                        print '(%d)'%oparg,
-                elif op in hasjrel:
-                    print '(to ' + repr(i + oparg) + ')',
-                elif op in haslocal:
-                    if varnames:
-                        print '(' + varnames[oparg] + ')',
-                    else:
-                        print '(%d)' % oparg,
-                elif op in hascompare:
-                    print '(' + cmp_op[oparg] + ')',
-        except:
-            pass
+        if op >= HAVE_ARGUMENT:
+            oparg = ord(code[i]) + ord(code[i+1])*256
+            i = i+2
+            print repr(oparg).rjust(5),
+            if op in hasconst:
+                if constants:
+                    print '(' + repr(constants[oparg]) + ')',
+                else:
+                    print '(%d)'%oparg,
+            elif op in hasname:
+                if names is not None:
+                    print '(' + names[oparg] + ')',
+                else:
+                    print '(%d)'%oparg,
+            elif op in hasjrel:
+                print '(to ' + repr(i + oparg) + ')',
+            elif op in haslocal:
+                if varnames:
+                    print '(' + varnames[oparg] + ')',
+                else:
+                    print '(%d)' % oparg,
+            elif op in hascompare:
+                print '(' + cmp_op[oparg] + ')',
         print
 
 disco = disassemble                     # XXX For backwards compatibility
@@ -172,10 +163,7 @@
         op = ord(c)
         i = i+1
         if op >= HAVE_ARGUMENT:
-            try:
-                oparg = ord(code[i]) + ord(code[i+1])*256
-            except:
-                pass
+            oparg = ord(code[i]) + ord(code[i+1])*256
             i = i+2
             label = -1
             if op in hasjrel:
```

再次使用反汇编code.co_code

```assembly
>>> dis.dis(code.co_code)
          0 JUMP_ABSOLUTE     670
          3 LOAD_DEREF      28264
          6 DELETE_FAST     35898 (35898)
          9 JUMP_ABSOLUTE   23887
    >>   12 LOAD_FAST           0 (0)
         15 COMPARE_OP          2 (==)
         18 POP_JUMP_IF_TRUE    39
         21 LOAD_CONST         19 (19)
         24 LOAD_FAST           0 (0)
         27 COMPARE_OP          2 (==)
         30 POP_JUMP_IF_TRUE    42
         33 LOAD_CONST         23 (23)
         36 JUMP_FORWARD      425 (to 464)
    >>   39 JUMP_FORWARD      472 (to 514)
    >>   42 JUMP_FORWARD      382 (to 427)
         45 LIST_APPEND     24859
         48 CALL_FUNCTION_VAR 30554
    >>   51 COMPARE_OP          2 (==)
         54 POP_JUMP_IF_TRUE    64
         57 LOAD_CONST         25 (25)
         60 RETURN_VALUE
    >>   61 JUMP_ABSOLUTE      61
    >>   64 JUMP_FORWARD       16 (to 83)
         67 SETUP_FINALLY   22811 (to 22881)
         70 BUILD_SET       27462
         73 ROT_TWO
         74 EXEC_STMT
         75 SETUP_WITH        387 (to 465)
         78 STOP_CODE
         79 JUMP_ABSOLUTE     107
    >>   82 RETURN_VALUE
    >>   83 STORE_NAME          0 (0)
         86 LOAD_CONST          2 (2)
         89 MAKE_FUNCTION       0
         92 STORE_NAME          1 (1)
         95 LOAD_CONST          3 (3)
         98 JUMP_ABSOLUTE     110
    >>  101 STORE_NAME          3 (3)
        104 JUMP_FORWARD      145 (to 252)
    >>  107 JUMP_FORWARD      563 (to 673)
    >>  110 JUMP_FORWARD      274 (to 387)
        113 DELETE_SLICE+0
        114 DELETE_SLICE+2
        115 SET_ADD           259
        118 PRINT_EXPR
        119 BINARY_LSHIFT
        120 JUMP_FORWARD    38001 (to 38124)
        123 STOP_CODE
    >>  124 LOAD_CONST         16 (16)
        127 STORE_FAST          0 (0)
        130 JUMP_ABSOLUTE     151
    >>  133 LOAD_CONST         17 (17)
        136 STORE_FAST          0 (0)
        139 JUMP_ABSOLUTE     154
    >>  142 LOAD_CONST         18 (18)
        145 JUMP_FORWARD       16 (to 164)
        148 JUMP_FORWARD      360 (to 511)
    >>  151 JUMP_FORWARD      357 (to 511)
    >>  154 JUMP_FORWARD      354 (to 511)
        157 YIELD_VALUE
        158 BUILD_MAP       37162
        161 WITH_CLEANUP
        162 INPLACE_POWER
        163 BUILD_SET         125
        166 STOP_CODE
        167 JUMP_ABSOLUTE     197
    >>  170 LOAD_CONST         19 (19)
        173 STORE_FAST          0 (0)
        176 JUMP_ABSOLUTE     200
    >>  179 LOAD_CONST         20 (20)
        182 STORE_FAST          0 (0)
        185 JUMP_ABSOLUTE     203
    >>  188 LOAD_CONST         21 (21)
        191 STORE_FAST          0 (0)
        194 JUMP_FORWARD      187 (to 384)
    >>  197 JUMP_FORWARD      311 (to 511)
    >>  200 JUMP_FORWARD      308 (to 511)
    >>  203 JUMP_FORWARD      305 (to 511)
        206 STORE_SUBSCR
        207 STORE_SLICE+3
        208 LOAD_LOCALS
        209 BUILD_TUPLE     29559
        212 <238>           25600
        215 UNARY_INVERT
        216 STOP_CODE
        217 LOAD_FAST           0 (0)
        220 COMPARE_OP          2 (==)
        223 POP_JUMP_IF_TRUE   241
        226 LOAD_CONST         22 (22)
        229 LOAD_FAST           0 (0)
        232 COMPARE_OP          2 (==)
        235 JUMP_FORWARD      361 (to 599)
        238 JUMP_FORWARD       23 (to 264)
    >>  241 JUMP_FORWARD      195 (to 439)
        244 YIELD_VALUE
        245 LOAD_DEREF       8013
        248 SLICE+3
        249 STORE_SLICE+0
        250 CALL_FUNCTION_KW 25695
        253 ROT_FOUR
        254 STOP_CODE
        255 MAKE_FUNCTION       0
        258 STORE_NAME          4 (4)
        261 JUMP_ABSOLUTE     283
    >>  264 POP_TOP
        265 LOAD_NAME           0 (0)
        268 LOAD_ATTR           8 (8)
        271 LOAD_ATTR           9 (9)
        274 LOAD_CONST         12 (12)
        277 JUMP_ABSOLUTE     286
        280 JUMP_FORWARD      144 (to 427)
    >>  283 JUMP_FORWARD      405 (to 691)
    >>  286 JUMP_ABSOLUTE     133
        289 STORE_GLOBAL    16193 (16193)
        292 INPLACE_MULTIPLY
        293 BUILD_SET        3142
        296 CALL_FUNCTION_VAR_KW 18289
        299 POP_TOP
    >>  300 MAKE_FUNCTION       0
        303 STORE_NAME          2 (2)
        306 LOAD_CONST          4 (4)
        309 MAKE_FUNCTION       0
        312 JUMP_ABSOLUTE     330
    >>  315 LOAD_CONST         13 (13)
        318 LOAD_FAST           0 (0)
        321 COMPARE_OP          2 (==)
        324 JUMP_ABSOLUTE     211
        327 JUMP_ABSOLUTE     124
    >>  330 JUMP_ABSOLUTE     142
        333 CALL_FUNCTION_VAR  6468
        336 LOAD_GLOBAL     12875 (12875)
        339 JUMP_IF_TRUE_OR_POP   356
        342 STOP_CODE
        343 JUMP_ABSOLUTE     370
    >>  346 CALL_FUNCTION       1
        349 STORE_NAME         10 (10)
        352 LOAD_NAME           5 (5)
        355 LOAD_NAME           1 (1)
        358 JUMP_ABSOLUTE     373
    >>  361 BUILD_LIST          5
        364 CALL_FUNCTION       1
        367 JUMP_ABSOLUTE      76
    >>  370 JUMP_FORWARD       23 (to 396)
    >>  373 JUMP_FORWARD       29 (to 405)
        376 DELETE_FAST     29577 (29577)
        379 DELETE_FAST      3859 (3859)
        382 JUMP_ABSOLUTE   29030
        385 <158>           25601
        388 BINARY_MODULO
        389 STOP_CODE
        390 STORE_FAST          0 (0)
        393 JUMP_ABSOLUTE     417
    >>  396 LOAD_CONST         23 (23)
        399 STORE_FAST          0 (0)
        402 JUMP_ABSOLUTE     420
    >>  405 LOAD_CONST         24 (24)
        408 STORE_FAST          0 (0)
        411 JUMP_FORWARD       94 (to 508)
        414 JUMP_FORWARD       94 (to 511)
    >>  417 JUMP_FORWARD       91 (to 511)
    >>  420 JUMP_FORWARD       88 (to 511)
        423 INPLACE_POWER
        424 LOAD_CONST      28792 (28792)
    >>  427 LOAD_CONST          9 (9)
        430 LOAD_CONST         10 (10)
        433 LOAD_CONST         11 (11)
        436 JUMP_ABSOLUTE     454
    >>  439 LOAD_CONST          6 (6)
        442 MAKE_FUNCTION       0
        445 STORE_NAME          5 (5)
        448 LOAD_NAME           0 (0)
        451 JUMP_ABSOLUTE     297
    >>  454 JUMP_ABSOLUTE     179
        457 PRINT_ITEM
        458 POP_BLOCK
        459 BINARY_TRUE_DIVIDE
        460 STORE_SLICE+1
        461 IMPORT_FROM     28034 (28034)
    >>  464 LOAD_FAST           0 (0)
        467 COMPARE_OP          2 (==)
        470 POP_JUMP_IF_TRUE   494
        473 LOAD_CONST         24 (24)
        476 LOAD_FAST           0 (0)
        479 COMPARE_OP          2 (==)
        482 POP_JUMP_IF_TRUE   497
        485 LOAD_CONST         14 (14)
        488 LOAD_FAST           0 (0)
        491 JUMP_ABSOLUTE      51
    >>  494 JUMP_ABSOLUTE      82
    >>  497 JUMP_FORWARD      148 (to 648)
        500 STORE_SLICE+3
        501 BUILD_TUPLE     23901
        504 STORE_SLICE+0
        505 ROT_TWO
        506 DELETE_NAME     29048 (29048)
        509 BINARY_ADD
        510 ROT_TWO
    >>  511 JUMP_FORWARD       24 (to 538)
    >>  514 LOAD_ATTR           6 (6)
        517 LOAD_ATTR           7 (7)
        520 LOAD_NAME           2 (2)
        523 LOAD_CONST          7 (7)
        526 LOAD_CONST          8 (8)
        529 JUMP_ABSOLUTE     541
        532 JUMP_FORWARD      101 (to 636)
        535 JUMP_ABSOLUTE     511
    >>  538 JUMP_ABSOLUTE     315
    >>  541 JUMP_ABSOLUTE     170
        544 JUMP_IF_FALSE_OR_POP   866
        547 UNARY_POSITIVE
        548 LOAD_DEREF       6164
        551 CALL_FUNCTION_VAR 18803
        554 ROT_TWO
        555 LOAD_CONST         17 (17)
        558 LOAD_FAST           0 (0)
        561 COMPARE_OP          2 (==)
        564 POP_JUMP_IF_TRUE   588
        567 LOAD_CONST         20 (20)
        570 LOAD_FAST           0 (0)
        573 COMPARE_OP          2 (==)
        576 POP_JUMP_IF_TRUE   591
        579 LOAD_CONST         16 (16)
        582 JUMP_ABSOLUTE      12
        585 JUMP_ABSOLUTE     101
    >>  588 JUMP_ABSOLUTE     346
    >>  591 JUMP_ABSOLUTE     361
        594 LOAD_GLOBAL      7977 (7977)
        597 CALL_FUNCTION   29541
        600 POP_JUMP_IF_FALSE 25602
        603 BINARY_DIVIDE
        604 STOP_CODE
        605 LOAD_FAST           0 (0)
        608 COMPARE_OP          2 (==)
        611 POP_JUMP_IF_TRUE   629
        614 LOAD_CONST         18 (18)
        617 LOAD_FAST           0 (0)
        620 COMPARE_OP          2 (==)
        623 JUMP_ABSOLUTE     552
        626 JUMP_ABSOLUTE     300
    >>  629 JUMP_FORWARD        4 (to 636)
        632 UNARY_INVERT
        633 ROT_THREE
        634 UNARY_NOT
        635 JUMP_IF_TRUE_OR_POP   100
        638 STOP_CODE
        639 LOAD_CONST          1 (1)
        642 IMPORT_NAME         0 (0)
        645 JUMP_ABSOLUTE     661
    >>  648 LOAD_NAME          10 (10)
        651 CALL_FUNCTION       1
        654 CALL_FUNCTION       1
        657 POP_TOP
        658 JUMP_ABSOLUTE     340
    >>  661 JUMP_FORWARD       18 (to 682)
        664 STORE_MAP
        665 POP_JUMP_IF_TRUE  5704
        668 RETURN_VALUE
        669 LIST_APPEND      7022
        672 STOP_CODE
    >>  673 LOAD_CONST         13 (13)
        676 STORE_FAST          0 (0)
        679 JUMP_ABSOLUTE     703
    >>  682 LOAD_CONST         14 (14)
        685 STORE_FAST          0 (0)
        688 JUMP_ABSOLUTE     706
    >>  691 LOAD_CONST         15 (15)
        694 STORE_FAST          0 (0)
        697 JUMP_ABSOLUTE     121
        700 JUMP_ABSOLUTE     188
    >>  703 JUMP_ABSOLUTE     511
    >>  706 JUMP_ABSOLUTE     511
        709 RETURN_VALUE
        710 STORE_SLICE+2
        711 BINARY_TRUE_DIVIDE
        712 LOAD_CLOSURE
>>>
```

能够正常的反编译看字节码了。

#### 活跃代码分析

虽然通过patch了`dis`的代码绕过了恶意指令，比如pycdc等工具依旧不能正常打开这个恶意pyc文件。故欲将恶意指令全部nop掉方便分析。

思路是这样的：从`co_code`开始模拟逻辑执行，需要分支就把两个分支全部执行到。在过程中记录访问到过的offset，最后把除了收集到的offset全部nop掉。

```assembly
import marshal, sys, opcode, types, dis

NOP = 9

HAVE_ARGUMENT = 90

JUMP_FORWARD = 110
JUMP_IF_FALSE_OR_POP = 111
JUMP_IF_TRUE_OR_POP = 112
JUMP_ABSOLUTE = 113
POP_JUMP_IF_FALSE = 114
POP_JUMP_IF_TRUE = 115

CONTINUE_LOOP = 119
FOR_ITER = 93

RETURN_VALUE = 83

used_set = set()

def deconf_inner(code, now):
    global used_set

    while code[now] != RETURN_VALUE:
        if now in used_set:
            break
        used_set.add(now)
        if code[now] >= HAVE_ARGUMENT:
            used_set.add(now+1)
            used_set.add(now+2)
        op = code[now]

        #print(str(now) + " " + opcode.opname[op])

        if op == JUMP_FORWARD:
            arg = code[now+2] << 8 | code[now+1]
            now += arg + 3
            continue

        elif op == JUMP_ABSOLUTE:
            arg = code[now+2] << 8 | code[now+1]
            now = arg
            continue

        elif op == JUMP_IF_TRUE_OR_POP:
            arg = code[now+2] << 8 | code[now+1] 
            deconf_inner(code, arg)

        elif op == JUMP_IF_FALSE_OR_POP:
            arg = code[now+2] << 8 | code[now+1] 
            deconf_inner(code, arg)

        elif op == POP_JUMP_IF_TRUE:
            arg = code[now+2] << 8 | code[now+1] 
            deconf_inner(code, arg)

        elif op == POP_JUMP_IF_FALSE: 
            arg = code[now+2] << 8 | code[now+1] 
            deconf_inner(code, arg)

        elif op == CONTINUE_LOOP:
            arg = code[now+2] << 8 | code[now+1] 
            deconf_inner(code, arg)

        elif op == FOR_ITER: 
            arg = code[now+2] << 8 | code[now+1] 
            deconf_inner(code, now + arg + 3)

        if op < HAVE_ARGUMENT:
            now += 1
        else:
            now += 3

    used_set.add(now)
    if code[now] >= HAVE_ARGUMENT:
        used_set.add(now+1)
        used_set.add(now+2)

def deconf(code):
    global used_set

    used_set = set() #Remember to clean up used_set for every target function

    cod = list(map(ord, code))
    deconf_inner(cod, 0)

    for i in range(len(cod)):
        if i not in used_set:
            cod[i] = NOP

    return "".join(list(map(chr, cod)))

with open(sys.argv[1], 'rb') as f:
    header = f.read(8)
    code = marshal.load(f)

'''
print(code.co_consts[3].co_name)
print(dis.dis(deconf(code.co_consts[3].co_code)))
'''

consts = list()

for i in range(len(code.co_consts)):
    if hasattr(code.co_consts[i], 'co_code'):
        consts.append(types.CodeType(code.co_consts[i].co_argcount,
            # c.co_kwonlyargcount,  Add this in Python3
            code.co_consts[i].co_nlocals,
            code.co_consts[i].co_stacksize,
            code.co_consts[i].co_flags,
            deconf(code.co_consts[i].co_code),
            code.co_consts[i].co_consts,
            code.co_consts[i].co_names,
            code.co_consts[i].co_varnames,
            code.co_consts[i].co_filename,
            code.co_consts[i].co_name,
            code.co_consts[i].co_firstlineno,
            code.co_consts[i].co_lnotab,   # In general, You should adjust this
            code.co_consts[i].co_freevars,
            code.co_consts[i].co_cellvars))
    else:
        consts.append(code.co_consts[i])

mode = types.CodeType(code.co_argcount,
    # c.co_kwonlyargcount,  Add this in Python3
    code.co_nlocals,
    code.co_stacksize,
    code.co_flags,
    deconf(code.co_code),
    tuple(consts),
    code.co_names,
    code.co_varnames,
    code.co_filename,
    code.co_name,
    code.co_firstlineno,
    code.co_lnotab,   # In general, You should adjust this
    code.co_freevars,
    code.co_cellvars)

f = open(sys.argv[1]+".mod", 'wb') 
f.write(header)
marshal.dump(mode, f)
```

使用该脚本将py交易文件中的恶意指令nop掉

```assembly
python2 active_code.py py交易.pyc
```

使用dis反汇编结果文件验证是否nop成功

```assembly
>>> import marshal
>>> f = open('py交易.pyc.mod', 'rb')
>>> f.read(8)
'\x03\xf3\r\nLiT\\'
>>> code = marshal.load(f)
>>> import dis
>>> dis.dis(code.co_code)
          0 JUMP_ABSOLUTE     670
          3 NOP
          4 NOP
          5 NOP
          6 NOP
          7 NOP
          8 NOP
          9 NOP
         10 NOP
         11 NOP
    >>   12 LOAD_FAST           0 (0)
         15 COMPARE_OP          2 (==)
         18 POP_JUMP_IF_TRUE    39
         21 LOAD_CONST         19 (19)
         24 LOAD_FAST           0 (0)
         27 COMPARE_OP          2 (==)
         30 POP_JUMP_IF_TRUE    42
         33 LOAD_CONST         23 (23)
         36 JUMP_FORWARD      425 (to 464)
    >>   39 JUMP_FORWARD      472 (to 514)
    >>   42 JUMP_FORWARD      382 (to 427)
         45 NOP
         46 NOP
         47 NOP
         48 NOP
         49 NOP
         50 NOP
    >>   51 COMPARE_OP          2 (==)
         54 POP_JUMP_IF_TRUE    64
         57 LOAD_CONST         25 (25)
         60 RETURN_VALUE
         61 NOP
         62 NOP
         63 NOP
    >>   64 JUMP_FORWARD       16 (to 83)
         67 NOP
         68 NOP
         69 NOP
         70 NOP
         71 NOP
         72 NOP
         73 NOP
         74 NOP
         75 NOP
    >>   76 CALL_FUNCTION       1
         79 JUMP_ABSOLUTE     107
    >>   82 RETURN_VALUE
    >>   83 STORE_NAME          0 (0)
         86 LOAD_CONST          2 (2)
         89 MAKE_FUNCTION       0
         92 STORE_NAME          1 (1)
         95 LOAD_CONST          3 (3)
         98 JUMP_ABSOLUTE     110
    >>  101 STORE_NAME          3 (3)
        104 JUMP_FORWARD      145 (to 252)
    >>  107 JUMP_FORWARD      563 (to 673)
    >>  110 JUMP_FORWARD      274 (to 387)
        113 NOP
        114 NOP
        115 NOP
        116 NOP
        117 NOP
        118 NOP
        119 NOP
        120 NOP
    >>  121 JUMP_ABSOLUTE     148
    >>  124 LOAD_CONST         16 (16)
        127 STORE_FAST          0 (0)
        130 JUMP_ABSOLUTE     151
    >>  133 LOAD_CONST         17 (17)
        136 STORE_FAST          0 (0)
        139 JUMP_ABSOLUTE     154
    >>  142 LOAD_CONST         18 (18)
        145 JUMP_FORWARD       16 (to 164)
    >>  148 JUMP_FORWARD      360 (to 511)
    >>  151 JUMP_FORWARD      357 (to 511)
    >>  154 JUMP_FORWARD      354 (to 511)
        157 NOP
        158 NOP
        159 NOP
        160 NOP
        161 NOP
        162 NOP
        163 NOP
    >>  164 STORE_FAST          0 (0)
        167 JUMP_ABSOLUTE     197
    >>  170 LOAD_CONST         19 (19)
        173 STORE_FAST          0 (0)
        176 JUMP_ABSOLUTE     200
    >>  179 LOAD_CONST         20 (20)
        182 STORE_FAST          0 (0)
        185 JUMP_ABSOLUTE     203
    >>  188 LOAD_CONST         21 (21)
        191 STORE_FAST          0 (0)
        194 JUMP_FORWARD      187 (to 384)
    >>  197 JUMP_FORWARD      311 (to 511)
    >>  200 JUMP_FORWARD      308 (to 511)
    >>  203 JUMP_FORWARD      305 (to 511)
        206 NOP
        207 NOP
        208 NOP
        209 NOP
        210 NOP
    >>  211 POP_JUMP_IF_TRUE   238
        214 LOAD_CONST         15 (15)
        217 LOAD_FAST           0 (0)
        220 COMPARE_OP          2 (==)
        223 POP_JUMP_IF_TRUE   241
        226 LOAD_CONST         22 (22)
        229 LOAD_FAST           0 (0)
        232 COMPARE_OP          2 (==)
        235 JUMP_FORWARD      361 (to 599)
    >>  238 JUMP_FORWARD       23 (to 264)
    >>  241 JUMP_FORWARD      195 (to 439)
        244 NOP
        245 NOP
        246 NOP
        247 NOP
        248 NOP
        249 NOP
        250 NOP
        251 NOP
    >>  252 LOAD_CONST          5 (5)
        255 MAKE_FUNCTION       0
        258 STORE_NAME          4 (4)
        261 JUMP_ABSOLUTE     283
    >>  264 POP_TOP
        265 LOAD_NAME           0 (0)
        268 LOAD_ATTR           8 (8)
        271 LOAD_ATTR           9 (9)
        274 LOAD_CONST         12 (12)
        277 JUMP_ABSOLUTE     286
        280 NOP
        281 NOP
        282 NOP
    >>  283 JUMP_FORWARD      405 (to 691)
    >>  286 JUMP_ABSOLUTE     133
        289 NOP
        290 NOP
        291 NOP
        292 NOP
        293 NOP
        294 NOP
        295 NOP
        296 NOP
    >>  297 JUMP_ABSOLUTE     327
    >>  300 MAKE_FUNCTION       0
        303 STORE_NAME          2 (2)
        306 LOAD_CONST          4 (4)
        309 MAKE_FUNCTION       0
        312 JUMP_ABSOLUTE     330
    >>  315 LOAD_CONST         13 (13)
        318 LOAD_FAST           0 (0)
        321 COMPARE_OP          2 (==)
        324 JUMP_ABSOLUTE     211
    >>  327 JUMP_ABSOLUTE     124
    >>  330 JUMP_ABSOLUTE     142
        333 NOP
        334 NOP
        335 NOP
        336 NOP
        337 NOP
        338 NOP
        339 NOP
    >>  340 LOAD_CONST          1 (1)
        343 JUMP_ABSOLUTE     370
    >>  346 CALL_FUNCTION       1
        349 STORE_NAME         10 (10)
        352 LOAD_NAME           5 (5)
        355 LOAD_NAME           1 (1)
        358 JUMP_ABSOLUTE     373
    >>  361 BUILD_LIST          5
        364 CALL_FUNCTION       1
        367 JUMP_ABSOLUTE      76
    >>  370 JUMP_FORWARD       23 (to 396)
    >>  373 JUMP_FORWARD       29 (to 405)
        376 NOP
        377 NOP
        378 NOP
        379 NOP
        380 NOP
        381 NOP
        382 NOP
        383 NOP
    >>  384 JUMP_ABSOLUTE     414
    >>  387 LOAD_CONST         22 (22)
        390 STORE_FAST          0 (0)
        393 JUMP_ABSOLUTE     417
    >>  396 LOAD_CONST         23 (23)
        399 STORE_FAST          0 (0)
        402 JUMP_ABSOLUTE     420
    >>  405 LOAD_CONST         24 (24)
        408 STORE_FAST          0 (0)
        411 JUMP_FORWARD       94 (to 508)
    >>  414 JUMP_FORWARD       94 (to 511)
    >>  417 JUMP_FORWARD       91 (to 511)
    >>  420 JUMP_FORWARD       88 (to 511)
        423 NOP
        424 NOP
        425 NOP
        426 NOP
    >>  427 LOAD_CONST          9 (9)
        430 LOAD_CONST         10 (10)
        433 LOAD_CONST         11 (11)
        436 JUMP_ABSOLUTE     454
    >>  439 LOAD_CONST          6 (6)
        442 MAKE_FUNCTION       0
        445 STORE_NAME          5 (5)
        448 LOAD_NAME           0 (0)
        451 JUMP_ABSOLUTE     297
    >>  454 JUMP_ABSOLUTE     179
        457 NOP
        458 NOP
        459 NOP
        460 NOP
        461 NOP
        462 NOP
        463 NOP
    >>  464 LOAD_FAST           0 (0)
        467 COMPARE_OP          2 (==)
        470 POP_JUMP_IF_TRUE   494
        473 LOAD_CONST         24 (24)
        476 LOAD_FAST           0 (0)
        479 COMPARE_OP          2 (==)
        482 POP_JUMP_IF_TRUE   497
        485 LOAD_CONST         14 (14)
        488 LOAD_FAST           0 (0)
        491 JUMP_ABSOLUTE      51
    >>  494 JUMP_ABSOLUTE      82
    >>  497 JUMP_FORWARD      148 (to 648)
        500 NOP
        501 NOP
        502 NOP
        503 NOP
        504 NOP
        505 NOP
        506 NOP
        507 NOP
    >>  508 JUMP_ABSOLUTE     535
    >>  511 JUMP_FORWARD       24 (to 538)
    >>  514 LOAD_ATTR           6 (6)
        517 LOAD_ATTR           7 (7)
        520 LOAD_NAME           2 (2)
        523 LOAD_CONST          7 (7)
        526 LOAD_CONST          8 (8)
        529 JUMP_ABSOLUTE     541
        532 NOP
        533 NOP
        534 NOP
    >>  535 JUMP_ABSOLUTE     511
    >>  538 JUMP_ABSOLUTE     315
    >>  541 JUMP_ABSOLUTE     170
        544 NOP
        545 NOP
        546 NOP
        547 NOP
        548 NOP
        549 NOP
        550 NOP
        551 NOP
    >>  552 POP_JUMP_IF_TRUE   585
        555 LOAD_CONST         17 (17)
        558 LOAD_FAST           0 (0)
        561 COMPARE_OP          2 (==)
        564 POP_JUMP_IF_TRUE   588
        567 LOAD_CONST         20 (20)
        570 LOAD_FAST           0 (0)
        573 COMPARE_OP          2 (==)
        576 POP_JUMP_IF_TRUE   591
        579 LOAD_CONST         16 (16)
        582 JUMP_ABSOLUTE      12
    >>  585 JUMP_ABSOLUTE     101
    >>  588 JUMP_ABSOLUTE     346
    >>  591 JUMP_ABSOLUTE     361
        594 NOP
        595 NOP
        596 NOP
        597 NOP
        598 NOP
    >>  599 POP_JUMP_IF_TRUE   626
        602 LOAD_CONST         21 (21)
        605 LOAD_FAST           0 (0)
        608 COMPARE_OP          2 (==)
        611 POP_JUMP_IF_TRUE   629
        614 LOAD_CONST         18 (18)
        617 LOAD_FAST           0 (0)
        620 COMPARE_OP          2 (==)
        623 JUMP_ABSOLUTE     552
    >>  626 JUMP_ABSOLUTE     300
    >>  629 JUMP_FORWARD        4 (to 636)
        632 NOP
        633 NOP
        634 NOP
        635 NOP
    >>  636 LOAD_CONST          0 (0)
        639 LOAD_CONST          1 (1)
        642 IMPORT_NAME         0 (0)
        645 JUMP_ABSOLUTE     661
    >>  648 LOAD_NAME          10 (10)
        651 CALL_FUNCTION       1
        654 CALL_FUNCTION       1
        657 POP_TOP
        658 JUMP_ABSOLUTE     340
    >>  661 JUMP_FORWARD       18 (to 682)
        664 NOP
        665 NOP
        666 NOP
        667 NOP
        668 NOP
        669 NOP
    >>  670 JUMP_FORWARD       27 (to 700)
    >>  673 LOAD_CONST         13 (13)
        676 STORE_FAST          0 (0)
        679 JUMP_ABSOLUTE     703
    >>  682 LOAD_CONST         14 (14)
        685 STORE_FAST          0 (0)
        688 JUMP_ABSOLUTE     706
    >>  691 LOAD_CONST         15 (15)
        694 STORE_FAST          0 (0)
        697 JUMP_ABSOLUTE     121
    >>  700 JUMP_ABSOLUTE     188
    >>  703 JUMP_ABSOLUTE     511
    >>  706 JUMP_ABSOLUTE     511
        709 NOP
        710 NOP
        711 NOP
        712 NOP
>>>
```

调试中建议用自己修改过的`CPython`实现，追踪pyc的执行offset，目前pyc文件的调试工具还基本没有，在动态调试上比较被动。

### 修改CPython启用debug

[Python官方参考链接](https://svn.python.org/projects/python/trunk/Misc/SpecialBuilds.txt)

[Fedora官方参考链接](https://fedoraproject.org/wiki/Features/DebugPythonStacks)

[Ubuntu官方参考链接](https://wiki.ubuntu.com/PyDbgBuilds)

同时参考`Archlinux`的AUR脚本，梳理过程如下：

- Clone得到源码
- Checkout到所需的版本分支
- `./configure --with-pydebug` 配置启用debug选项并编译
- 在执行上下文设置`__lltrace__ = True`启动字节码级别的执行log

首先是`--with-pydebug`启动调试选项激活对应编译分支，之后用`__lltrace__`开启对应的log分支，同时关闭`FAST_DISPATCH`优化来避免漏掉指令。

### 图表示法

目前可以见到最多的解混淆或者去花指令的手段类似于对于指令的匹配替换，甚至于可以说活跃代码分析也是带执行流分析的简单替换过程。但如果想构建一个对于某种混淆方式的通用解法，只是工作于指令级别始终不够方便。那么需要一种新的方式去处理这些指令。

在这里选用一种**基于有向图**的表示法，也即在执行流跳转的位置进行分割，使指令之间成块，相互之间用箭头相关联。

### [Bytecode graph](https://github.com/fireeye/flare-bytecode_graph)

实现了基本的Python字节码到图表示的转换过程，但是相比起来功能较为单薄。

首先安装Bytecode graph

```assembly
python2 setup.py install
```

现在想把NOP指令用这个库全部去除，首先尝试调用API画出所有函数的图：

```assembly
import bytecode_graph 
from dis import opmap
import sys
import marshal

pyc_file = open(sys.argv[1], "rb").read()
pyc = marshal.loads(pyc_file[8:])
bcg = bytecode_graph.BytecodeGraph(pyc)
graph = bytecode_graph.Render(bcg, pyc).dot()
graph.write_png('example_graph.png')
```

运行后会报错，因为pydot依赖graphviz

* 安装graphviz：windows系统下需要下载安装包手动安装，官网下载地址为：[下载地址](https://graphviz.gitlab.io/_pages/Download/Download_windows.html)。

* 安装好之后需要配置环境变量：将graphviz安装目录下的bin文件路径夹添加到系统Path环境变量中。

* 验证graphviz是否安装成功： 进入windows命令行界面，输入dot -version，然后按回车，如果显示graphviz的相关版本信息，则安装配置成功。

配置好依赖后，执行成功。

![]({{site.baseurl}}/img/2021-06-10-example_graph.jpg)

首先观察执行流可以很明显的看出是进行过控制流扁平化处理的，然后尝试阅读文档去除多余的NOP分支。

去除NOP的代码：

```assembly
def remove_nop_inner(co):
    bcg = bytecode_graph.BytecodeGraph(co)
    nodes = [x for x in bcg.nodes()]
    for n in nodes:
        if n.opcode == NOP:
            bcg.delete_node(n)
    return bcg.get_code()

def remove_nop(co):
    #co = remove_nop_inner(co)

    inner = list()
    for i in range(len(co.co_consts)):
        if hasattr(co.co_consts[i], 'co_code'):
            inner.append(remove_nop_inner(co.co_consts[i]))
        else:
            inner.append(co.co_consts[i])

    co.co_consts = tuple(inner)

    return co
```

到这一步gg

```assembly
Traceback (most recent call last):
  File "remove_nop.py", line 31, in <module>
    pyc = remove_nop(pyc)
  File "remove_nop.py", line 21, in remove_nop
    inner.append(remove_nop_inner(co.co_consts[i]))
  File "remove_nop.py", line 8, in remove_nop_inner
    bcg = bytecode_graph.BytecodeGraph(co)
  File "build\bdist.win-amd64\egg\bytecode_graph\bytecode_graph.py", line 87, in __init__
  File "build\bdist.win-amd64\egg\bytecode_graph\bytecode_graph.py", line 152, in apply_lineno
IndexError: pop from empty list
```

不会解决了。。。。。。

Python通过`co_lnotab`将字节码和源码行数对齐，服务于源码调试。`co_lnotab`中的数据两字节为一组，分别是字节码的增量偏移和源码的增量偏移。

```assembly
>>> import marshal
>>> f = open('../../mo.pyc')
>>> f.read(8)
'\x03\xf3\r\nLiT\\'
>>> c = marshal.load(f)
>>> list(map(ord,c.co_lnotab))
[12, 2, 9, 6, 9, 5, 9, 3, 9, 3, 9, 18, 37, 2, 18, 2]
```

也即都从0开始计算，首先字节码增加了12条指令，源码就到了第2行，这样不断递增得到的对应关系。

```assembly
>>> dis.dis(c.co_code)
          0 JUMP_ABSOLUTE     670
          3 NOP
          4 NOP
          5 NOP
          6 NOP
          7 NOP
          8 NOP
          9 NOP
         10 NOP
         11 NOP
    >>   12 LOAD_FAST           0 (0)  # 源码第2行
         15 COMPARE_OP          2 (==)
         18 POP_JUMP_IF_TRUE    39
```

然而这样的对应关系在修改了指令成为NOP之后便没有意义，因为从带参数的指令变成不带参数的指令定然会导致字节码偏移计算出错。更何况这个样本的pyc文件有的函数的`co_lnotab`是残缺的，便会导致尝试解析它的过程失败。然而不巧这个库和`uncompyle6`都是会解析的。

但即使是这样，这款库作为图的生成器，自带的指令解析和引用解析都不错，仍旧写出图生成脚本予以采用。

```assembly
import bytecode_graph as bytecode_graph
from dis import opmap
import sys
import marshal

pyc_file = open(sys.argv[1], "rb").read()
pyc = marshal.loads(pyc_file[8:])

for x in pyc.co_consts:
    if hasattr(x, 'co_code'):
        bcg = bytecode_graph.BytecodeGraph(x)
        graph = bytecode_graph.Render(bcg, x).dot()
        try:
            graph.write_png(x.co_name + '.png')
        except Exception, e:
            print(e)
            print(x.co_name)

bcg = bytecode_graph.BytecodeGraph(pyc)
graph = bytecode_graph.Render(bcg, pyc).dot()
graph.write_png('module.png')
```

又gg

```assembly
Traceback (most recent call last):
  File "module.py", line 11, in <module>
    bcg = bytecode_graph.BytecodeGraph(x)
  File "build\bdist.win-amd64\egg\bytecode_graph\bytecode_graph.py", line 87, in __init__
  File "build\bdist.win-amd64\egg\bytecode_graph\bytecode_graph.py", line 152, in apply_lineno
IndexError: pop from empty list
```

虽然报错但是生成了一张图片

![]({{site.baseurl}}/img/2021-06-10-str2hex.jpg)

### [Bytecode simplifier](https://github.com/extremecoders-re/bytecode_simplifier)

年代久远，好多坑用不了。

### disasm_anti

```assembly
# python2 disasm_anti.py py.pyc
import dis, marshal, struct, sys, time, types
from opcode import *


def ana_branch(code, i, hits):
    if i > len(code):
        return
    if i in hits:
        return
    else:
        hits.append(i)
    c = code[i]
    op = ord(c)
    if op == 111 or op == 112 or op == 114 or op == 115 or op == 120 or op == 93:
        oparg = ord(code[i+1]) + ord(code[i+2])*256
        if op == 120 or op == 93:
            oparg += i
            oparg += 3
        ana_branch(code, oparg, hits)
        ana_branch(code, i+3, hits)
    elif op == 110:
        oparg = ord(code[i+1]) + ord(code[i+2])*256
        ana_branch(code, i + oparg + 3, hits)
    elif op == 113:
        oparg = ord(code[i+1]) + ord(code[i+2])*256
        ana_branch(code, oparg, hits)
    else:
        if op>=HAVE_ARGUMENT:
            ana_branch(code, i+3, hits)
        else:
            ana_branch(code, i+1, hits)


def findlinestarts(code):
    """Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    """
    byte_increments = [ord(c) for c in code.co_lnotab[0::2]]
    line_increments = [ord(c) for c in code.co_lnotab[1::2]]

    lastlineno = None
    lineno = code.co_firstlineno
    addr = 0
    for byte_incr, line_incr in zip(byte_increments, line_increments):
        if byte_incr:
            if lineno != lastlineno:
                yield (addr, lineno)
                lastlineno = lineno
            addr += byte_incr
        lineno += line_incr
    if lineno != lastlineno:
        yield (addr, lineno)


def findhits(code):
    hits = []
    n = len(code)
    i = 0
    ana_branch(code, i, hits)
    hits.sort()
    return hits


def anti_findlabels(code):
    """Detect all offsets in a byte code which are jump targets.
    Return the list of offsets.
    """
    hits = findhits(code)
    labels = []
    n = len(code)
    i = 0
    while i < n:
        if i not in hits:
            i+=1
            continue
        c = code[i]
        op = ord(c)
        i = i+1
        if op >= HAVE_ARGUMENT:
            oparg = ord(code[i]) + ord(code[i+1])*256
            i = i+2
            label = -1
            if op in hasjrel:
                label = i+oparg
            elif op in hasjabs:
                label = oparg
            if label >= 0:
                if label not in labels:
                    labels.append(label)
    return labels


def dis_anti_obf(co, lasti = -1):
    """Disassemble a code object, anti obf"""
    anti_code = ""
    code = co.co_code
    hits = findhits(code)
    labels = anti_findlabels(code)
    linestarts = dict(findlinestarts(co))
    n = len(code)
    i = 0
    i = 0
    extended_arg = 0
    free = None
    while i < n:
        if i not in hits:
            i+=1
            anti_code+="\x09"
            continue
        c = code[i]
        op = ord(c)
        if i in linestarts:
            if i > 0:
                print
            print "%3d" % linestarts[i],
        else:
            print '   ',
        
        if i == lasti: print '-->',
        else: print '   ',
        if i in labels: print '>>',
        else: print '  ',
        print repr(i).rjust(4),
        print opname[op].ljust(20),
        anti_code += code[i]
        i = i+1
        if op >= HAVE_ARGUMENT:
            oparg = ord(code[i]) + ord(code[i+1])*256 + extended_arg
            extended_arg = 0
            anti_code+=code[i]
            anti_code+=code[i+1]
            i = i+2
            if op == EXTENDED_ARG:
                extended_arg = oparg*65536L
            print repr(oparg).rjust(5),
            if op in hasconst:
                print '(' + repr(co.co_consts[oparg]) + ')',
            elif op in hasname:
                print '(' + co.co_names[oparg] + ')',
            elif op in hasjrel:
                print '(to ' + repr(i + oparg) + ')',
            elif op in haslocal:
                print '(' + co.co_varnames[oparg] + ')',
            elif op in hascompare:
                print '(' + cmp_op[oparg] + ')',
            elif op in hasfree:
                if free is None:
                    free = co.co_cellvars + co.co_freevars
                print '(' + free[oparg] + ')',
        print
    print "patch code:"
    print(anti_code.encode("hex"))


def show_file(fname):
    f = open(fname, "rb")
    magic = f.read(4)
    moddate = f.read(4)
    modtime = time.asctime(time.localtime(struct.unpack('L', moddate)[0]))
    print "magic %s" % (magic.encode('hex'))
    print "moddate %s (%s)" % (moddate.encode('hex'), modtime)
    code = marshal.load(f)
    show_code(code)
     
def show_code(code, indent=''):
    print "%scode" % indent
    indent += '   '
    print "%sargcount %d" % (indent, code.co_argcount)
    print "%snlocals %d" % (indent, code.co_nlocals)
    print "%sstacksize %d" % (indent, code.co_stacksize)
    print "%sflags %04x" % (indent, code.co_flags)
    show_hex("code", code.co_code, indent=indent)
    dis_anti_obf(code)
    print "%sconsts" % indent
    for const in code.co_consts:
        if type(const) == types.CodeType:
            show_code(const, indent+'   ')
        else:
            print "   %s%r" % (indent, const)
    print "%snames %r" % (indent, code.co_names)
    print "%svarnames %r" % (indent, code.co_varnames)
    print "%sfreevars %r" % (indent, code.co_freevars)
    print "%scellvars %r" % (indent, code.co_cellvars)
    print "%sfilename %r" % (indent, code.co_filename)
    print "%sname %r" % (indent, code.co_name)
    print "%sfirstlineno %d" % (indent, code.co_firstlineno)
    show_hex("lnotab", code.co_lnotab, indent=indent)
     
def show_hex(label, h, indent):
    h = h.encode('hex')
    if len(h) < 60:
        print "%s%s %s" % (indent, label, h)
    else:
        print "%s%s" % (indent, label)
        for i in range(0, len(h), 60):
            print "%s   %s" % (indent, h[i:i+60])

show_file(sys.argv[1])
```

输出：

```assembly
magic 03f30d0a
moddate 4c69545c (Fri Feb  1 23:44:12 2019)
code
   argcount 0
   nlocals 1
   stacksize 11
   flags 0040
   code
      719e020909090909090909097c00006b02007327006413007c00006b0200
      732a006417006ea9016ed8016e7e010909090909096b0200734000641900
      530909096e1000090909090909090909830100716b00535a000064020084
      00005a0100640300716e005a03006e91006e33026e120109090909090909
      097194006410007d00007197006411007d0000719a006412006e10006e68
      016e65016e6201090909090909097d000071c5006413007d000071c80064
      14007d000071cb006415007d00006ebb006e37016e34016e310109090909
      0973ee00640f007c00006b020073f1006416007c00006b02006e69016e17
      006ec30009090909090909096405008400005a0400711b01016500006a08
      006a0900640c00711e010909096e95017185000909090909090909714701
      8400005a0200640400840000714a01640d007c00006b020071d300717c00
      718e00090909090909096401007172018301005a0a006505006501007175
      01670500830100714c006e17006e1d000909090909090909719e01641600
      7d000071a1016417007d000071a4016418007d00006e5e006e5e006e5b00
      6e580009090909640900640a00640b0071c6016406008400005a05006500
      0071290171b300090909090909097c00006b020073ee016418007c00006b
      020073f101640e007c00007133007152006e940009090909090909097117
      026e18006a06006a0700650200640700640800711d0209090971ff01713b
      0171aa0009090909090909097349026411007c00006b0200734c02641400
      7c00006b0200734f02641000710c00716500715a01716901090909090973
      72026415007c00006b02007375026412007c00006b0200712802712c016e
      0400090909096400006401006c0000719502650a00830100830100017154
      016e12000909090909096e1b00640d007d000071bf02640e007d000071c2
      02640f007d000071790071bc0071ff0171ff0109090909
  1           0 JUMP_ABSOLUTE          670

  3     >>   12 LOAD_FAST                0 (DIVIDER)
             15 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_TRUE        39

  9          21 LOAD_CONST              19 (1860581437)
             24 LOAD_FAST                0 (DIVIDER)
             27 COMPARE_OP               2 (==)

 14          30 POP_JUMP_IF_TRUE        42
             33 LOAD_CONST              23 (3816944324L)
             36 JUMP_FORWARD           425 (to 464)

 17     >>   39 JUMP_FORWARD           472 (to 514)
        >>   42 JUMP_FORWARD           382 (to 427)
        >>   51 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_TRUE        64

 38          57 LOAD_CONST              25 (None)
             60 RETURN_VALUE
             61 NOP
             62 NOP
             63 NOP
        >>   64 JUMP_FORWARD            16 (to 83)
        >>   76 CALL_FUNCTION            1
             79 JUMP_ABSOLUTE          107
        >>   82 RETURN_VALUE
        >>   83 STORE_NAME               0 (sys)
             86 LOAD_CONST               2 (<code object str2hex at 0000000003003AB0, file "enc.py", line 3>)
             89 MAKE_FUNCTION            0
             92 STORE_NAME               1 (str2hex)
             95 LOAD_CONST               3 (<code object hex2str at 0000000003003D30, file "enc.py", line 9>)
             98 JUMP_ABSOLUTE          110
        >>  101 STORE_NAME               3 (p_s)
            104 JUMP_FORWARD           145 (to 252)
        >>  107 JUMP_FORWARD           563 (to 673)
        >>  110 JUMP_FORWARD           274 (to 387)
        >>  121 JUMP_ABSOLUTE          148
        >>  124 LOAD_CONST              16 (4084147187L)
            127 STORE_FAST               0 (DIVIDER)
            130 JUMP_ABSOLUTE          151
        >>  133 LOAD_CONST              17 (3521152606L)
            136 STORE_FAST               0 (DIVIDER)
            139 JUMP_ABSOLUTE          154
        >>  142 LOAD_CONST              18 (651787064)
            145 JUMP_FORWARD            16 (to 164)
        >>  148 JUMP_FORWARD           360 (to 511)
        >>  151 JUMP_FORWARD           357 (to 511)
        >>  154 JUMP_FORWARD           354 (to 511)
        >>  164 STORE_FAST               0 (DIVIDER)
            167 JUMP_ABSOLUTE          197
        >>  170 LOAD_CONST              19 (1860581437)
            173 STORE_FAST               0 (DIVIDER)
            176 JUMP_ABSOLUTE          200
        >>  179 LOAD_CONST              20 (2730391645L)
            182 STORE_FAST               0 (DIVIDER)
            185 JUMP_ABSOLUTE          203
        >>  188 LOAD_CONST              21 (2694209818L)
            191 STORE_FAST               0 (DIVIDER)
            194 JUMP_FORWARD           187 (to 384)
        >>  197 JUMP_FORWARD           311 (to 511)
        >>  200 JUMP_FORWARD           308 (to 511)
        >>  203 JUMP_FORWARD           305 (to 511)
        >>  211 POP_JUMP_IF_TRUE       238
            214 LOAD_CONST              15 (3168701571L)
            217 LOAD_FAST                0 (DIVIDER)
            220 COMPARE_OP               2 (==)
            223 POP_JUMP_IF_TRUE       241
            226 LOAD_CONST              22 (3715947653L)
            229 LOAD_FAST                0 (DIVIDER)
            232 COMPARE_OP               2 (==)
            235 JUMP_FORWARD           361 (to 599)
        >>  238 JUMP_FORWARD            23 (to 264)
        >>  241 JUMP_FORWARD           195 (to 439)
        >>  252 LOAD_CONST               5 (<code object p_f at 0000000003003E30, file "enc.py", line 17>)
            255 MAKE_FUNCTION            0
            258 STORE_NAME               4 (p_f)
            261 JUMP_ABSOLUTE          283
        >>  264 POP_TOP
            265 LOAD_NAME                0 (sys)
            268 LOAD_ATTR                8 (stdin)
            271 LOAD_ATTR                9 (read)
            274 LOAD_CONST              12 (38)
            277 JUMP_ABSOLUTE          286
        >>  283 JUMP_FORWARD           405 (to 691)
        >>  286 JUMP_ABSOLUTE          133
        >>  297 JUMP_ABSOLUTE          327
        >>  300 MAKE_FUNCTION            0
            303 STORE_NAME               2 (hex2str)
            306 LOAD_CONST               4 (<code object p_s at 0000000003003DB0, file "enc.py", line 14>)
            309 MAKE_FUNCTION            0
            312 JUMP_ABSOLUTE          330
        >>  315 LOAD_CONST              13 (4130330538L)
            318 LOAD_FAST                0 (DIVIDER)
            321 COMPARE_OP               2 (==)
            324 JUMP_ABSOLUTE          211
        >>  327 JUMP_ABSOLUTE          124
        >>  330 JUMP_ABSOLUTE          142
        >>  340 LOAD_CONST               1 (None)
            343 JUMP_ABSOLUTE          370
        >>  346 CALL_FUNCTION            1
            349 STORE_NAME              10 (flag)
            352 LOAD_NAME                5 (count)
            355 LOAD_NAME                1 (str2hex)
            358 JUMP_ABSOLUTE          373
        >>  361 BUILD_LIST               5
            364 CALL_FUNCTION            1
            367 JUMP_ABSOLUTE           76
        >>  370 JUMP_FORWARD            23 (to 396)
        >>  373 JUMP_FORWARD            29 (to 405)
        >>  384 JUMP_ABSOLUTE          414
        >>  387 LOAD_CONST              22 (3715947653L)
            390 STORE_FAST               0 (DIVIDER)
            393 JUMP_ABSOLUTE          417
        >>  396 LOAD_CONST              23 (3816944324L)
            399 STORE_FAST               0 (DIVIDER)
            402 JUMP_ABSOLUTE          420
        >>  405 LOAD_CONST              24 (394367122)
            408 STORE_FAST               0 (DIVIDER)
            411 JUMP_FORWARD            94 (to 508)
        >>  414 JUMP_FORWARD            94 (to 511)
        >>  417 JUMP_FORWARD            91 (to 511)
        >>  420 JUMP_FORWARD            88 (to 511)
        >>  427 LOAD_CONST               9 (97)
            430 LOAD_CONST              10 (103)
            433 LOAD_CONST              11 (58)
            436 JUMP_ABSOLUTE          454
        >>  439 LOAD_CONST               6 (<code object count at 0000000003081030, file "enc.py", line 20>)
            442 MAKE_FUNCTION            0
            445 STORE_NAME               5 (count)
            448 LOAD_NAME                0 (sys)
            451 JUMP_ABSOLUTE          297
        >>  454 JUMP_ABSOLUTE          179
        >>  464 LOAD_FAST                0 (DIVIDER)
            467 COMPARE_OP               2 (==)
            470 POP_JUMP_IF_TRUE       494
            473 LOAD_CONST              24 (394367122)
            476 LOAD_FAST                0 (DIVIDER)
            479 COMPARE_OP               2 (==)
            482 POP_JUMP_IF_TRUE       497
            485 LOAD_CONST              14 (1627830889)
            488 LOAD_FAST                0 (DIVIDER)
            491 JUMP_ABSOLUTE           51
        >>  494 JUMP_ABSOLUTE           82
        >>  497 JUMP_FORWARD           148 (to 648)
        >>  508 JUMP_ABSOLUTE          535
        >>  511 JUMP_FORWARD            24 (to 538)
        >>  514 LOAD_ATTR                6 (stdout)
            517 LOAD_ATTR                7 (write)
            520 LOAD_NAME                2 (hex2str)
            523 LOAD_CONST               7 (102)
            526 LOAD_CONST               8 (108)
            529 JUMP_ABSOLUTE          541
        >>  535 JUMP_ABSOLUTE          511
        >>  538 JUMP_ABSOLUTE          315
        >>  541 JUMP_ABSOLUTE          170
        >>  552 POP_JUMP_IF_TRUE       585
            555 LOAD_CONST              17 (3521152606L)
            558 LOAD_FAST                0 (DIVIDER)
            561 COMPARE_OP               2 (==)
            564 POP_JUMP_IF_TRUE       588
            567 LOAD_CONST              20 (2730391645L)
            570 LOAD_FAST                0 (DIVIDER)
            573 COMPARE_OP               2 (==)
            576 POP_JUMP_IF_TRUE       591
            579 LOAD_CONST              16 (4084147187L)
            582 JUMP_ABSOLUTE           12
        >>  585 JUMP_ABSOLUTE          101
        >>  588 JUMP_ABSOLUTE          346
        >>  591 JUMP_ABSOLUTE          361
        >>  599 POP_JUMP_IF_TRUE       626
            602 LOAD_CONST              21 (2694209818L)
            605 LOAD_FAST                0 (DIVIDER)
            608 COMPARE_OP               2 (==)
            611 POP_JUMP_IF_TRUE       629
            614 LOAD_CONST              18 (651787064)
            617 LOAD_FAST                0 (DIVIDER)
            620 COMPARE_OP               2 (==)
            623 JUMP_ABSOLUTE          552
        >>  626 JUMP_ABSOLUTE          300
        >>  629 JUMP_FORWARD             4 (to 636)
        >>  636 LOAD_CONST               0 (-1)
            639 LOAD_CONST               1 (None)
            642 IMPORT_NAME              0 (sys)
            645 JUMP_ABSOLUTE          661
        >>  648 LOAD_NAME               10 (flag)
            651 CALL_FUNCTION            1
            654 CALL_FUNCTION            1
            657 POP_TOP
            658 JUMP_ABSOLUTE          340
        >>  661 JUMP_FORWARD            18 (to 682)
        >>  670 JUMP_FORWARD            27 (to 700)
        >>  673 LOAD_CONST              13 (4130330538L)
            676 STORE_FAST               0 (DIVIDER)
            679 JUMP_ABSOLUTE          703
        >>  682 LOAD_CONST              14 (1627830889)
            685 STORE_FAST               0 (DIVIDER)
            688 JUMP_ABSOLUTE          706
        >>  691 LOAD_CONST              15 (3168701571L)
            694 STORE_FAST               0 (DIVIDER)
            697 JUMP_ABSOLUTE          121
        >>  700 JUMP_ABSOLUTE          188
        >>  703 JUMP_ABSOLUTE          511
        >>  706 JUMP_ABSOLUTE          511
patch code:
719e020909090909090909097c00006b02007327006413007c00006b0200732a006417006ea9016ed8016e7e010909090909096b0200734000641900530909096e1000090909090909090909830100716b00535a00006402008400005a0100640300716e005a03006e91006e33026e120109090909090909097194006410007d00007197006411007d0000719a006412006e10006e68016e65016e6201090909090909097d000071c5006413007d000071c8006414007d000071cb006415007d00006ebb006e37016e34016e3101090909090973ee00640f007c00006b020073f1006416007c00006b02006e69016e17006ec30009090909090909096405008400005a0400711b01016500006a08006a0900640c00711e010909096e950171850009090909090909097147018400005a0200640400840000714a01640d007c00006b020071d300717c00718e00090909090909096401007172018301005a0a00650500650100717501670500830100714c006e17006e1d000909090909090909719e016416007d000071a1016417007d000071a4016418007d00006e5e006e5e006e5b006e580009090909640900640a00640b0071c6016406008400005a050065000071290171b300090909090909097c00006b020073ee016418007c00006b020073f101640e007c00007133007152006e940009090909090909097117026e18006a06006a0700650200640700640800711d0209090971ff01713b0171aa0009090909090909097349026411007c00006b0200734c026414007c00006b0200734f02641000710c00716500715a0171690109090909097372026415007c00006b02007375026412007c00006b0200712802712c016e0400090909096400006401006c0000719502650a00830100830100017154016e12000909090909096e1b00640d007d000071bf02640e007d000071c202640f007d000071790071bc0071ff0171ff0109090909
   consts
      -1
      None
      code
         argcount 1
         nlocals 4
         stacksize 8
         flags 0043
         code
            71900009090909097d03007129006407007d0300712c006408007d030071
            2f006e0f006700006ed0007120007120007120006e1b0009090909096a00
            007159007c0100537401007c0200830100715c006404007c03006e31016e
            40006e4600090909090909097181006404007d03007184006405007d0300
            7187006406007108007120007120007120000909090909096e1b00640100
            7d030071b1006402007d030071b4006403007d0300716600717b00712000
            7120000909090909096b020073ca00640900530909096e06000909090909
            095771ea008301000171ed000909097d02007c0100713a00717200711700
            0909090909090909097d0100781900711b010909097c0000447121015d15
            00712701712a01090909090909716900090909711700711201719300710e
            000909090909096401007c03006b02007354016405007c03006b02007357
            016403007c03006e0e0071e10071400009090909090909096b0200737d01
            6406007c03006b02007380016407007c030071bd0071d700712300090909
            090909096b020073ab016408007c03006b020073ae016402007c03006b02
            0073b101713301710501710c017144000909090909
  4           0 JUMP_ABSOLUTE          144
        >>    8 STORE_FAST               3 (DIVIDER)
             11 JUMP_ABSOLUTE           41
        >>   14 LOAD_CONST               7 (3369192437L)
             17 STORE_FAST               3 (DIVIDER)
             20 JUMP_ABSOLUTE           44
        >>   23 LOAD_CONST               8 (1696009061)
             26 STORE_FAST               3 (DIVIDER)
             29 JUMP_ABSOLUTE           47
        >>   32 JUMP_FORWARD            15 (to 50)
        >>   35 BUILD_LIST               0
             38 JUMP_FORWARD           208 (to 249)
        >>   41 JUMP_ABSOLUTE           32
        >>   44 JUMP_ABSOLUTE           32
        >>   47 JUMP_ABSOLUTE           32
        >>   50 JUMP_FORWARD            27 (to 80)
        >>   58 LOAD_ATTR                0 (append)
             61 JUMP_ABSOLUTE           89
        >>   64 LOAD_FAST                1 (ret)
             67 RETURN_VALUE
        >>   68 LOAD_GLOBAL              1 (ord)
             71 LOAD_FAST                2 (char)
             74 CALL_FUNCTION            1
             77 JUMP_ABSOLUTE           92
        >>   80 LOAD_CONST               4 (1130474679)
             83 LOAD_FAST                3 (DIVIDER)
             86 JUMP_FORWARD           305 (to 394)
        >>   89 JUMP_FORWARD            64 (to 156)
        >>   92 JUMP_FORWARD            70 (to 165)
        >>  102 JUMP_ABSOLUTE          129
        >>  105 LOAD_CONST               4 (1130474679)
            108 STORE_FAST               3 (DIVIDER)
            111 JUMP_ABSOLUTE          132
        >>  114 LOAD_CONST               5 (1927470101)
            117 STORE_FAST               3 (DIVIDER)
            120 JUMP_ABSOLUTE          135
        >>  123 LOAD_CONST               6 (43201876)
            126 JUMP_ABSOLUTE            8
        >>  129 JUMP_ABSOLUTE           32
        >>  132 JUMP_ABSOLUTE           32
        >>  135 JUMP_ABSOLUTE           32
        >>  144 JUMP_FORWARD            27 (to 174)
        >>  147 LOAD_CONST               1 (3329702705L)
            150 STORE_FAST               3 (DIVIDER)
            153 JUMP_ABSOLUTE          177
        >>  156 LOAD_CONST               2 (876313011)
            159 STORE_FAST               3 (DIVIDER)
            162 JUMP_ABSOLUTE          180
        >>  165 LOAD_CONST               3 (3602648706L)
            168 STORE_FAST               3 (DIVIDER)
            171 JUMP_ABSOLUTE          102
        >>  174 JUMP_ABSOLUTE          123
        >>  177 JUMP_ABSOLUTE           32
        >>  180 JUMP_ABSOLUTE           32
        >>  189 COMPARE_OP               2 (==)
            192 POP_JUMP_IF_TRUE       202
            195 LOAD_CONST               9 (None)
            198 RETURN_VALUE
            199 NOP
            200 NOP
            201 NOP
        >>  202 JUMP_FORWARD             6 (to 211)
        >>  211 POP_BLOCK
            212 JUMP_ABSOLUTE          234
        >>  215 CALL_FUNCTION            1
            218 POP_TOP
            219 JUMP_ABSOLUTE          237
        >>  225 STORE_FAST               2 (char)
            228 LOAD_FAST                1 (ret)
            231 JUMP_ABSOLUTE           58
        >>  234 JUMP_ABSOLUTE          114
        >>  237 JUMP_ABSOLUTE           23
        >>  249 STORE_FAST               1 (ret)
            252 SETUP_LOOP              25 (to 280)
            255 JUMP_ABSOLUTE          283
        >>  261 LOAD_FAST                0 (string)
            264 GET_ITER
            265 JUMP_ABSOLUTE          289
        >>  268 FOR_ITER                21 (to 292)
            271 JUMP_ABSOLUTE          295
        >>  274 JUMP_ABSOLUTE          298
        >>  280 NOP
            281 NOP
            282 NOP
        >>  283 JUMP_ABSOLUTE          105
        >>  289 JUMP_ABSOLUTE           23
        >>  292 JUMP_ABSOLUTE          274
        >>  295 JUMP_ABSOLUTE          147
        >>  298 JUMP_ABSOLUTE           14
        >>  307 LOAD_CONST               1 (3329702705L)
            310 LOAD_FAST                3 (DIVIDER)
            313 COMPARE_OP               2 (==)
            316 POP_JUMP_IF_TRUE       340
            319 LOAD_CONST               5 (1927470101)
            322 LOAD_FAST                3 (DIVIDER)
            325 COMPARE_OP               2 (==)
            328 POP_JUMP_IF_TRUE       343
            331 LOAD_CONST               3 (3602648706L)
            334 LOAD_FAST                3 (DIVIDER)
            337 JUMP_FORWARD            14 (to 354)
        >>  340 JUMP_ABSOLUTE          225
        >>  343 JUMP_ABSOLUTE           64
        >>  354 COMPARE_OP               2 (==)
            357 POP_JUMP_IF_TRUE       381
            360 LOAD_CONST               6 (43201876)
            363 LOAD_FAST                3 (DIVIDER)
            366 COMPARE_OP               2 (==)
            369 POP_JUMP_IF_TRUE       384
            372 LOAD_CONST               7 (3369192437L)
            375 LOAD_FAST                3 (DIVIDER)
            378 JUMP_ABSOLUTE          189
        >>  381 JUMP_ABSOLUTE          215
        >>  384 JUMP_ABSOLUTE           35
        >>  394 COMPARE_OP               2 (==)
            397 POP_JUMP_IF_TRUE       427
            400 LOAD_CONST               8 (1696009061)
            403 LOAD_FAST                3 (DIVIDER)
            406 COMPARE_OP               2 (==)
            409 POP_JUMP_IF_TRUE       430
            412 LOAD_CONST               2 (876313011)
            415 LOAD_FAST                3 (DIVIDER)
            418 COMPARE_OP               2 (==)
            421 POP_JUMP_IF_TRUE       433
            424 JUMP_ABSOLUTE          307
        >>  427 JUMP_ABSOLUTE          261
        >>  430 JUMP_ABSOLUTE          268
        >>  433 JUMP_ABSOLUTE           68
patch code:
71900009090909097d03007129006407007d0300712c006408007d0300712f006e0f006700006ed0007120007120007120006e1b0009090909096a00007159007c0100537401007c0200830100715c006404007c03006e31016e40006e4600090909090909097181006404007d03007184006405007d03007187006406007108007120007120007120000909090909096e1b006401007d030071b1006402007d030071b4006403007d0300716600717b007120007120000909090909096b020073ca00640900530909096e06000909090909095771ea008301000171ed000909097d02007c0100713a007172007117000909090909090909097d0100781900711b010909097c0000447121015d1500712701712a01090909090909716900090909711700711201719300710e000909090909096401007c03006b02007354016405007c03006b02007357016403007c03006e0e0071e10071400009090909090909096b0200737d016406007c03006b02007380016407007c030071bd0071d700712300090909090909096b020073ab016408007c03006b020073ae016402007c03006b020073b101713301710501710c017144000909090909
         consts
            None
            3329702705L
            876313011
            3602648706L
            1130474679
            1927470101
            43201876
            3369192437L
            1696009061
            None
         names ('append', 'ord')
         varnames ('string', 'ret', 'char', 'DIVIDER')
         freevars ()
         cellvars ()
         filename 'enc.py'
         name 'str2hex'
         firstlineno 3
         lnotab 000106010d011701
      code
         argcount 1
         nlocals 3
         stacksize 9
         flags 0043
         code
            71ad000909090909090909097c02006b0200731c00640800530909096e5f
            000909090909090909096a00006700007c00007146006406007c02006b02
            007349006404006e0d006ea8006ec200090909090909097c02006b020073
            6e006403007c02006b02007371006402006ec4006e1f006e130009090909
            0909447196005d1800719c00719f005e020071a200090909640100712800
            6e46007184006e11006e46006e3a0009090909090909096e18006402007d
            020071cb006403007d020071ce006404006e110071c2006e3d006e3a0009
            090909090909097d020071fa006405007d020071fd006406007d02007100
            016407007d02006e0e006e0e006e0b006e080009090909097124016e1900
            830100537d01007401007c0100830100712a01090909710b0171340071b9
            0009090909097c02006b0200734d016407007c02006b0200735001640500
            710c00711201717a0009090909090909
 10           0 JUMP_ABSOLUTE          173
        >>   12 LOAD_FAST                2 (DIVIDER)
             15 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_TRUE        28
             21 LOAD_CONST               8 (None)
             24 RETURN_VALUE
             25 NOP
             26 NOP
             27 NOP
        >>   28 JUMP_FORWARD            95 (to 126)
        >>   40 LOAD_ATTR                0 (join)
             43 BUILD_LIST               0
             46 LOAD_FAST                0 (data)
             49 JUMP_ABSOLUTE           70
        >>   52 LOAD_CONST               6 (591856208)
             55 LOAD_FAST                2 (DIVIDER)
             58 COMPARE_OP               2 (==)
             61 POP_JUMP_IF_TRUE        73
             64 LOAD_CONST               4 (2267503279L)
             67 JUMP_FORWARD            13 (to 83)
        >>   70 JUMP_FORWARD           168 (to 241)
        >>   73 JUMP_FORWARD           194 (to 270)
        >>   83 LOAD_FAST                2 (DIVIDER)
             86 COMPARE_OP               2 (==)
             89 POP_JUMP_IF_TRUE       110
             92 LOAD_CONST               3 (522386015)
             95 LOAD_FAST                2 (DIVIDER)
             98 COMPARE_OP               2 (==)
            101 POP_JUMP_IF_TRUE       113
            104 LOAD_CONST               2 (2195903898L)
            107 JUMP_FORWARD           196 (to 306)
        >>  110 JUMP_FORWARD            31 (to 144)
        >>  113 JUMP_FORWARD            19 (to 135)
        >>  122 GET_ITER
            123 JUMP_ABSOLUTE          150
        >>  126 FOR_ITER                24 (to 153)
            129 JUMP_ABSOLUTE          156
        >>  132 JUMP_ABSOLUTE          159
        >>  135 LIST_APPEND              2
            138 JUMP_ABSOLUTE          162
        >>  144 LOAD_CONST               1 ('')
            147 JUMP_ABSOLUTE           40
        >>  150 JUMP_FORWARD            70 (to 223)
        >>  153 JUMP_ABSOLUTE          132
        >>  156 JUMP_FORWARD            17 (to 176)
        >>  159 JUMP_FORWARD            70 (to 232)
        >>  162 JUMP_FORWARD            58 (to 223)
        >>  173 JUMP_FORWARD            24 (to 200)
        >>  176 LOAD_CONST               2 (2195903898L)
            179 STORE_FAST               2 (DIVIDER)
            182 JUMP_ABSOLUTE          203
        >>  185 LOAD_CONST               3 (522386015)
            188 STORE_FAST               2 (DIVIDER)
            191 JUMP_ABSOLUTE          206
        >>  194 LOAD_CONST               4 (2267503279L)
            197 JUMP_FORWARD            17 (to 217)
        >>  200 JUMP_ABSOLUTE          194
        >>  203 JUMP_FORWARD            61 (to 267)
        >>  206 JUMP_FORWARD            58 (to 267)
        >>  217 STORE_FAST               2 (DIVIDER)
            220 JUMP_ABSOLUTE          250
        >>  223 LOAD_CONST               5 (1893071141)
            226 STORE_FAST               2 (DIVIDER)
            229 JUMP_ABSOLUTE          253
        >>  232 LOAD_CONST               6 (591856208)
            235 STORE_FAST               2 (DIVIDER)
            238 JUMP_ABSOLUTE          256
        >>  241 LOAD_CONST               7 (1844009326)
            244 STORE_FAST               2 (DIVIDER)
            247 JUMP_FORWARD            14 (to 264)
        >>  250 JUMP_FORWARD            14 (to 267)
        >>  253 JUMP_FORWARD            11 (to 267)
        >>  256 JUMP_FORWARD             8 (to 267)
        >>  264 JUMP_ABSOLUTE          292
        >>  267 JUMP_FORWARD            25 (to 295)
        >>  270 CALL_FUNCTION            1
            273 RETURN_VALUE
        >>  274 STORE_FAST               1 (d)
            277 LOAD_GLOBAL              1 (chr)
            280 LOAD_FAST                1 (d)
            283 CALL_FUNCTION            1
            286 JUMP_ABSOLUTE          298
        >>  292 JUMP_ABSOLUTE          267
        >>  295 JUMP_ABSOLUTE           52
        >>  298 JUMP_ABSOLUTE          185
        >>  306 LOAD_FAST                2 (DIVIDER)
            309 COMPARE_OP               2 (==)
            312 POP_JUMP_IF_TRUE       333
            315 LOAD_CONST               7 (1844009326)
            318 LOAD_FAST                2 (DIVIDER)
            321 COMPARE_OP               2 (==)
            324 POP_JUMP_IF_TRUE       336
            327 LOAD_CONST               5 (1893071141)
            330 JUMP_ABSOLUTE           12
        >>  333 JUMP_ABSOLUTE          274
        >>  336 JUMP_ABSOLUTE          122
patch code:
71ad000909090909090909097c02006b0200731c00640800530909096e5f000909090909090909096a00006700007c00007146006406007c02006b02007349006404006e0d006ea8006ec200090909090909097c02006b0200736e006403007c02006b02007371006402006ec4006e1f006e1300090909090909447196005d1800719c00719f005e020071a2000909096401007128006e46007184006e11006e46006e3a0009090909090909096e18006402007d020071cb006403007d020071ce006404006e110071c2006e3d006e3a0009090909090909097d020071fa006405007d020071fd006406007d02007100016407007d02006e0e006e0e006e0b006e080009090909097124016e1900830100537d01007401007c0100830100712a01090909710b0171340071b90009090909097c02006b0200734d016407007c02006b0200735001640500710c00711201717a0009090909090909
         consts
            None
            ''
            2195903898L
            522386015
            2267503279L
            1893071141
            591856208
            1844009326
            None
         names ('join', 'chr')
         varnames ('data', 'd', 'DIVIDER')
         freevars ()
         cellvars ()
         filename 'enc.py'
         name 'hex2str'
         firstlineno 9
         lnotab 0001
      code
         argcount 0
         nlocals 1
         stacksize 14
         flags 0043
         code
            71f9000909090909090909097322006409007c00006b0200732500640b00
            530909096e42006eb100090909097147006409007d0000714a00640a007d
            0000714d006e0c000909097141007141007141006e570009090909536401
            006401006405006708007176007400006a01006a02007403006e2e006e83
            0009090909097399006407007c00006b0200739c006408007c00006b0200
            710c006e3000715800090909090964010071c200640a007c00006b020073
            c5006406007c00006b0200717e00712f0071570009090909830100830100
            0164000071eb0064020064030064030064040071ee000909097138006e14
            0009090909090909096e1b006406007d0000711a016407007d0000711d01
            6408007d0000712c00710e017141007141000909090909
 15           0 JUMP_ABSOLUTE          249
        >>   12 POP_JUMP_IF_TRUE        34
             15 LOAD_CONST               9 (3126208033L)
             18 LOAD_FAST                0 (DIVIDER)
             21 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_TRUE        37
             27 LOAD_CONST              11 (None)
             30 RETURN_VALUE
             31 NOP
             32 NOP
             33 NOP
        >>   34 JUMP_FORWARD            66 (to 103)
        >>   37 JUMP_FORWARD           177 (to 217)
        >>   44 JUMP_ABSOLUTE           71
        >>   47 LOAD_CONST               9 (3126208033L)
             50 STORE_FAST               0 (DIVIDER)
             53 JUMP_ABSOLUTE           74
        >>   56 LOAD_CONST              10 (1058109993)
             59 STORE_FAST               0 (DIVIDER)
             62 JUMP_ABSOLUTE           77
        >>   65 JUMP_FORWARD            12 (to 80)
        >>   71 JUMP_ABSOLUTE           65
        >>   74 JUMP_ABSOLUTE           65
        >>   77 JUMP_ABSOLUTE           65
        >>   80 JUMP_FORWARD            87 (to 170)
        >>   87 RETURN_VALUE
        >>   88 LOAD_CONST               1 (115)
             91 LOAD_CONST               1 (115)
             94 LOAD_CONST               5 (33)
             97 BUILD_LIST               8
            100 JUMP_ABSOLUTE          118
        >>  103 LOAD_GLOBAL              0 (sys)
            106 LOAD_ATTR                1 (stdout)
            109 LOAD_ATTR                2 (write)
            112 LOAD_GLOBAL              3 (hex2str)
            115 JUMP_FORWARD            46 (to 164)
        >>  118 JUMP_FORWARD           131 (to 252)
        >>  126 POP_JUMP_IF_TRUE       153
            129 LOAD_CONST               7 (3209296114L)
            132 LOAD_FAST                0 (DIVIDER)
            135 COMPARE_OP               2 (==)
            138 POP_JUMP_IF_TRUE       156
            141 LOAD_CONST               8 (2336958930L)
            144 LOAD_FAST                0 (DIVIDER)
            147 COMPARE_OP               2 (==)
            150 JUMP_ABSOLUTE           12
        >>  153 JUMP_FORWARD            48 (to 204)
        >>  156 JUMP_ABSOLUTE           88
        >>  164 LOAD_CONST               1 (115)
            167 JUMP_ABSOLUTE          194
        >>  170 LOAD_CONST              10 (1058109993)
            173 LOAD_FAST                0 (DIVIDER)
            176 COMPARE_OP               2 (==)
            179 POP_JUMP_IF_TRUE       197
            182 LOAD_CONST               6 (3760418592L)
            185 LOAD_FAST                0 (DIVIDER)
            188 COMPARE_OP               2 (==)
            191 JUMP_ABSOLUTE          126
        >>  194 JUMP_ABSOLUTE           47
        >>  197 JUMP_ABSOLUTE           87
        >>  204 CALL_FUNCTION            1
            207 CALL_FUNCTION            1
            210 POP_TOP
            211 LOAD_CONST               0 (None)
            214 JUMP_ABSOLUTE          235
        >>  217 LOAD_CONST               2 (117)
            220 LOAD_CONST               3 (99)
            223 LOAD_CONST               3 (99)
            226 LOAD_CONST               4 (101)
            229 JUMP_ABSOLUTE          238
        >>  235 JUMP_ABSOLUTE           56
        >>  238 JUMP_FORWARD            20 (to 261)
        >>  249 JUMP_FORWARD            27 (to 279)
        >>  252 LOAD_CONST               6 (3760418592L)
            255 STORE_FAST               0 (DIVIDER)
            258 JUMP_ABSOLUTE          282
        >>  261 LOAD_CONST               7 (3209296114L)
            264 STORE_FAST               0 (DIVIDER)
            267 JUMP_ABSOLUTE          285
        >>  270 LOAD_CONST               8 (2336958930L)
            273 STORE_FAST               0 (DIVIDER)
            276 JUMP_ABSOLUTE           44
        >>  279 JUMP_ABSOLUTE          270
        >>  282 JUMP_ABSOLUTE           65
        >>  285 JUMP_ABSOLUTE           65
patch code:
71f9000909090909090909097322006409007c00006b0200732500640b00530909096e42006eb100090909097147006409007d0000714a00640a007d0000714d006e0c000909097141007141007141006e570009090909536401006401006405006708007176007400006a01006a02007403006e2e006e830009090909097399006407007c00006b0200739c006408007c00006b0200710c006e3000715800090909090964010071c200640a007c00006b020073c5006406007c00006b0200717e00712f00715700090909098301008301000164000071eb0064020064030064030064040071ee000909097138006e140009090909090909096e1b006406007d0000711a016407007d0000711d016408007d0000712c00710e017141007141000909090909
         consts
            None
            115
            117
            99
            101
            33
            3760418592L
            3209296114L
            2336958930L
            3126208033L
            1058109993
            None
         names ('sys', 'stdout', 'write', 'hex2str')
         varnames ('DIVIDER',)
         freevars ()
         cellvars ()
         filename 'enc.py'
         name 'p_s'
         firstlineno 14
         lnotab 0001
      code
         argcount 0
         nlocals 1
         stacksize 11
         flags 0043
         code
            71080009090909096e1b006406007d00007129006407007d0000712c0064
            08007d00006e0e007114006e14006e110009090909097150006409007d00
            007153006e1300830100830100016400006e7c007140007140006e530009
            0909090909097c00006b02007381006407007c00006b0200738400640800
            7c00006b02006e0a007143006e480009090909739500640a00530909096e
            13000909090909090964040064050067050071be00536406007c00006b02
            0073c1006409007160007137006e1d00090909090909090971ea00740000
            6a01006a020074030064010071ed00640200640300719f00711d00710b00
            090909090909
 18           0 JUMP_ABSOLUTE            8
        >>    8 JUMP_FORWARD            27 (to 38)
        >>   11 LOAD_CONST               6 (2126555747)
             14 STORE_FAST               0 (DIVIDER)
             17 JUMP_ABSOLUTE           41
        >>   20 LOAD_CONST               7 (4259262148L)
             23 STORE_FAST               0 (DIVIDER)
             26 JUMP_ABSOLUTE           44
        >>   29 LOAD_CONST               8 (1224782404)
             32 STORE_FAST               0 (DIVIDER)
             35 JUMP_FORWARD            14 (to 52)
        >>   38 JUMP_ABSOLUTE           20
        >>   41 JUMP_FORWARD            20 (to 64)
        >>   44 JUMP_FORWARD            17 (to 64)
        >>   52 JUMP_ABSOLUTE           80
        >>   55 LOAD_CONST               9 (3314295949L)
             58 STORE_FAST               0 (DIVIDER)
             61 JUMP_ABSOLUTE           83
        >>   64 JUMP_FORWARD            19 (to 86)
        >>   67 CALL_FUNCTION            1
             70 CALL_FUNCTION            1
             73 POP_TOP
             74 LOAD_CONST               0 (None)
             77 JUMP_FORWARD           124 (to 204)
        >>   80 JUMP_ABSOLUTE           64
        >>   83 JUMP_ABSOLUTE           64
        >>   86 JUMP_FORWARD            83 (to 172)
        >>   96 LOAD_FAST                0 (DIVIDER)
             99 COMPARE_OP               2 (==)
            102 POP_JUMP_IF_TRUE       129
            105 LOAD_CONST               7 (4259262148L)
            108 LOAD_FAST                0 (DIVIDER)
            111 COMPARE_OP               2 (==)
            114 POP_JUMP_IF_TRUE       132
            117 LOAD_CONST               8 (1224782404)
            120 LOAD_FAST                0 (DIVIDER)
            123 COMPARE_OP               2 (==)
            126 JUMP_FORWARD            10 (to 139)
        >>  129 JUMP_ABSOLUTE           67
        >>  132 JUMP_FORWARD            72 (to 207)
        >>  139 POP_JUMP_IF_TRUE       149
            142 LOAD_CONST              10 (None)
            145 RETURN_VALUE
            146 NOP
            147 NOP
            148 NOP
        >>  149 JUMP_FORWARD            19 (to 171)
        >>  159 LOAD_CONST               4 (108)
            162 LOAD_CONST               5 (33)
            165 BUILD_LIST               5
            168 JUMP_ABSOLUTE          190
        >>  171 RETURN_VALUE
        >>  172 LOAD_CONST               6 (2126555747)
            175 LOAD_FAST                0 (DIVIDER)
            178 COMPARE_OP               2 (==)
            181 POP_JUMP_IF_TRUE       193
            184 LOAD_CONST               9 (3314295949L)
            187 JUMP_ABSOLUTE           96
        >>  190 JUMP_ABSOLUTE           55
        >>  193 JUMP_FORWARD            29 (to 225)
        >>  204 JUMP_ABSOLUTE          234
        >>  207 LOAD_GLOBAL              0 (sys)
            210 LOAD_ATTR                1 (stdout)
            213 LOAD_ATTR                2 (write)
            216 LOAD_GLOBAL              3 (hex2str)
            219 LOAD_CONST               1 (102)
            222 JUMP_ABSOLUTE          237
        >>  225 LOAD_CONST               2 (97)
            228 LOAD_CONST               3 (105)
            231 JUMP_ABSOLUTE          159
        >>  234 JUMP_ABSOLUTE           29
        >>  237 JUMP_ABSOLUTE           11
patch code:
71080009090909096e1b006406007d00007129006407007d0000712c006408007d00006e0e007114006e14006e110009090909097150006409007d00007153006e1300830100830100016400006e7c007140007140006e5300090909090909097c00006b02007381006407007c00006b02007384006408007c00006b02006e0a007143006e480009090909739500640a00530909096e13000909090909090964040064050067050071be00536406007c00006b020073c1006409007160007137006e1d00090909090909090971ea007400006a01006a020074030064010071ed00640200640300719f00711d00710b00090909090909
         consts
            None
            102
            97
            105
            108
            33
            2126555747
            4259262148L
            1224782404
            3314295949L
            None
         names ('sys', 'stdout', 'write', 'hex2str')
         varnames ('DIVIDER',)
         freevars ()
         cellvars ()
         filename 'enc.py'
         name 'p_f'
         firstlineno 17
         lnotab 0001
      code
         argcount 1
         nlocals 8
         stacksize 42
         flags 0043
         code
            717b09090909097d070071280064cb007d0700712b0064cc007d0700712e
            0064cd007d07006e84086e37046e34046e31040909090909642c00715100
            646700646800646900646a00646b007154000909096e17006e2702090909
            0909090909717a0064ad007d0700717d0064ae007d070071800064af006e
            5a076ee5036ee2036edf03090909090964060064070064080064090071a1
            007c0500197c00006e4b0b6ec20a09090909646c00646d00646e00646f00
            64700071c300644b00644c006e62046eca08090909090909090964bf007d
            070071ec0064c0007d070071ef0064c1007d070071f2000909096e73036e
            70036e6d03090909090964be007c07006b0200731501649e007c07006b02
            007318016eec006e16046e4204090909097c07006b020073400164b1007c
            07006b020073430164a4007c07006b02006eec026eb00a6e250909090909
            09090909647f00648000648100648200648300716f016484006485006486
            007172010909096e68066ee20a090909090909719c0164bc007d0700719f
            0164bd007d070071a20164be007d070071a5010909096ec3026ec0026ebd
            026eba020909090909090909097c07006b020073cf0164ca007c07006b02
            0073d20164d0007c07006e16096eb5066ea80809090909090964240071f6
            01644d00644e00644f0064500064510071f9010909096eea0571ce000909
            09090964ba007c07006b0200731c0264ce007c07006b0200731f026e3204
            713c006e9702090909090964c2007d070071450264c3007d070071480264
            c4007d0700714b020909096e1a026e17026e14020909090909090964af00
            7c07006b0200737002649b007c07006b02007373026ec9086ecb036eb400
            090909090909090964c5007d070071990264c6007d0700719c0264c7007d
            07006e7f096ec6016ec301090909090964b8007c07006b020073bf0264cb
            007c07006b020073c2026ebc026eec006e5900090909090964aa007d0700
            71e50264ab007d070071e80264ac007d0700715f006e7a016e7701090909
            090909730c0364c3007c07006b0200730f0364c5007c07006b02006eee01
            6e18066e5301090909090909090909713603643e00643f00644000713903
            191783010001713c030909096e3f086e8408711f00090909090909090964
            cd007c07006b020073620364a0007c07006b02007365036e6e006ee0066e
            0404090909090909090971910364a7007d070071940364a8007d07007197
            0364a9007d0700719a030909096ece006ecb006ec8006ec5000909090909
            648c00648d00648e0071c0037d0400780f0071c6030909097c01006e4404
            71ca020909096e90000909090909090964c6007c07006b020073eb0364a5
            007c07006b020073ee0371fa006ee5066e3e020909090909740300830000
            01710f047400006473008301007112040909097162006ebd070909090909
            0909090964d200530909090909090909090973470464a7007c07006b0200
            734a0464aa007c07006b020071f1026e54067197000909090909097d0700
            71710464d1007d07007174046e12006456006457006458006e0802716204
            7162046e3c02090909097c07006b0200739f04649d007c07006b020073a2
            0464b6007c07006b02006e2d026ebc026e69030909090909640d00640e00
            640f0064100071c40419147c020071c70409090971d30271730309090909
            0909090964020064030064040064050071f304645d00645e00645f006460
            00646100711b036ebc020909090973180564a8007c07006b0200731b0564
            c2007c07006b0200731e056efc0571a8006eed0471e10109090909672600
            7d02007141056e1300090909714a05640000536448006e7a057127027134
            05090909716200090909090909177c03007c0500716f05645900645a0064
            5b00645c007172050909096e150471d70009090909090964c1007c07006b
            020073990564b3007c07006b0200739c0564c700717e046e91016edd0009
            0909097c07006b020073c105649f007c07006b020073c40564d1007c0700
            6e0f006e75016ef2030909090909090909096b020073ee0564ac007c0700
            6b020073f10564a3007c07006b02006e0c007100046e0c03090909090909
            73180664b5007c07006b0200731b0664ad007c07006b0200731e06715502
            6e1e046e890071370509090909090909097d060071420664160064170064
            1800641900714506147153056e50056ecc0009090909090964bf007c0700
            6b0200736c0664b4007c07006b0200736f0664cc0071b1016ea3026e1901
            09090909090909719706643600643700643800643900643a00719a066462
            006463006e16036e2f056e6e000909090964550071c206641a00641b0064
            1c00641d0071c50664bc007c07006b02006e190371300271160009090909
            73ed0664b0007c07006b020073f00664a1007c07006b020073f30664c000
            6ee9016e6c02716001714e01090909090909090909711a0764b3007d0700
            711d0764b4007d070071200764b5006e8900716204716204716204090909
            09090909714807647700647800647900714b07640a00640b00640c00714e
            070909096e5e0071dc026e7001090909090909096415007172077c050019
            147c00007c050071750764010071d2046e29046e37010909090964320064
            3300643400643500719707643b00643c00643d006e9b0271020709090909
            09090909097d070071c40764b6007d070071c70764b7007d070071ca0764
            b8007d07006e9f03716204716204716204090909090909097d070071f507
            64b0007d070071f80764b1007d070071fb0764b2007d070071ff06716204
            7162047162040909090909097c0500197c00007120086441006442006443
            006444007123080909097190026e3a04090909096b0200734b08649a007c
            07006b0200734e0864ab007c07006b020073510871470371ba0371f6036e
            c3010909090964a6007c07006b020073730864a9007c07006b0200737608
            711e0471ba006eed0009090909097c04006a0100719f08641e00641f0064
            200064210071a208648a00648b0071a2036e82036e880309090909090909
            71c70864ce007d070071ca0864cf007d070071cd0864d000715304716204
            7162047162040909090909097c07006b020073f40864bb007c07006b0200
            73f70864c9007c0700712a0871e104718e06090909090909647a00647b00
            647c00647d00647e00711e0964520064530064540071a1066e2d03090909
            090909648f00649000649100649200649300714809642800642900642a00
            642b00713600717c0309090909090909097d0300670000716c0974020083
            000001716f09643100717c0771bb077190010909090909090909096e1e00
            649a007d0700719f09649b007d070071a209649c007d070071a509090909
            6ea602716204716204716204090909090964640064650064660071cc0944
            71cf096497006498006499006726007129066ea001711f00090909090909
            09090973fc0964ae007c07006b020073ff0964b2007c07006b020073020a
            64b90071a305713b056ec20071bd09090909090909649400649500649600
            71260a64110064120064130064140071580771ec07090909090909090909
            71510a5771540a64450064460064470071570a5d1200715d0a71600a0909
            09710d0071b808717e01714b0a7187027187010909090909090909642500
            6426006726007d010064270071860a64220064230071db01713902090909
            09090909090964870064880064890071b00a7c04007c06006b020072b30a
            712a070909096e6801717e090909090909644900644a0071d90a642d0064
            2e00642f0064300071dc0a7d0500717e086ecb007185030909090909096b
            020073060b64a2007c07006b020073090b64b7007c07006b0200730c0b71
            580871aa0471920a718800090909090964bd007c07006b0200732f0b649c
            007c07006b020073320b71a40271350a6eca000909090964c4007c07006b
            020073570b64c8007c07006b0200735a0b64cf00711f0171390971960809
            090909090971810b64b9007d070071840b64ba007d070071870b64bb007d
            0700717b0171620471620471620409090909097d070071b00b64a4007d07
            0071b30b64a5007d070071b60b64a6007d07007170037162047162047162
            0409090909090909649d007d070071de0b649e007d070071e10b649f007d
            070071e40b09090971620471620471620409090909097c050019710b0c64
            7400647500647600710e0c64710064720067260071530971740071e00009
            09090909090971330c64c8007d070071360c64c9007d070071390c64ca00
            71070071620471620471620409090909090909090964a0007d070071660c
            64a1007d070071690c64a2007d0700716c0c64a300718f0b716204716204
            716204090909090909090909
 22           0 JUMP_ABSOLUTE         2427
        >>    7 STORE_FAST               7 (DIVIDER)
             10 JUMP_ABSOLUTE           40
        >>   13 LOAD_CONST             203 (2617360123L)
             16 STORE_FAST               7 (DIVIDER)
             19 JUMP_ABSOLUTE           43
        >>   22 LOAD_CONST             204 (1889634705)
             25 STORE_FAST               7 (DIVIDER)
             28 JUMP_ABSOLUTE           46
        >>   31 LOAD_CONST             205 (3888638452L)
             34 STORE_FAST               7 (DIVIDER)
             37 JUMP_FORWARD          2180 (to 2220)
        >>   40 JUMP_FORWARD          1079 (to 1122)
        >>   43 JUMP_FORWARD          1076 (to 1122)
        >>   46 JUMP_FORWARD          1073 (to 1122)
        >>   54 LOAD_CONST              44 (41412)
             57 JUMP_ABSOLUTE           81
        >>   60 LOAD_CONST             103 (-748337118)
             63 LOAD_CONST             104 (696390966)
             66 LOAD_CONST             105 (427210246)
             69 LOAD_CONST             106 (-266607884)
             72 LOAD_CONST             107 (-555200820)
             75 JUMP_ABSOLUTE           84
        >>   81 JUMP_FORWARD            23 (to 107)
        >>   84 JUMP_FORWARD           551 (to 638)
        >>   95 JUMP_ABSOLUTE          122
        >>   98 LOAD_CONST             173 (1317946295)
            101 STORE_FAST               7 (DIVIDER)
            104 JUMP_ABSOLUTE          125
        >>  107 LOAD_CONST             174 (3622895996L)
            110 STORE_FAST               7 (DIVIDER)
            113 JUMP_ABSOLUTE          128
        >>  116 LOAD_CONST             175 (1393258618)
            119 JUMP_FORWARD          1882 (to 2004)
        >>  122 JUMP_FORWARD           997 (to 1122)
        >>  125 JUMP_FORWARD           994 (to 1122)
        >>  128 JUMP_FORWARD           991 (to 1122)
        >>  136 LOAD_CONST               6 (48809)
            139 LOAD_CONST               7 (29988)
            142 LOAD_CONST               8 (6421)
            145 LOAD_CONST               9 (20021)
            148 JUMP_ABSOLUTE          161
        >>  151 LOAD_FAST                5 (i)
            154 BINARY_SUBSCR
            155 LOAD_FAST                0 (data)
            158 JUMP_FORWARD          2891 (to 3052)
        >>  161 JUMP_FORWARD          2754 (to 2918)
        >>  168 LOAD_CONST             108 (-594235119)
            171 LOAD_CONST             109 (-233255094)
            174 LOAD_CONST             110 (229291711)
            177 LOAD_CONST             111 (711922719)
            180 LOAD_CONST             112 (14476464)
            183 JUMP_ABSOLUTE          195
        >>  186 LOAD_CONST              75 (76742)
            189 LOAD_CONST              76 (14022)
            192 JUMP_FORWARD          1122 (to 1317)
        >>  195 JUMP_FORWARD          2250 (to 2448)
        >>  206 LOAD_CONST             191 (971694574)
            209 STORE_FAST               7 (DIVIDER)
            212 JUMP_ABSOLUTE          236
        >>  215 LOAD_CONST             192 (1002508958)
            218 STORE_FAST               7 (DIVIDER)
            221 JUMP_ABSOLUTE          239
        >>  224 LOAD_CONST             193 (3919931372L)
            227 STORE_FAST               7 (DIVIDER)
            230 JUMP_ABSOLUTE          242
        >>  236 JUMP_FORWARD           883 (to 1122)
        >>  239 JUMP_FORWARD           880 (to 1122)
        >>  242 JUMP_FORWARD           877 (to 1122)
        >>  250 LOAD_CONST             190 (3793853702L)
            253 LOAD_FAST                7 (DIVIDER)
            256 COMPARE_OP               2 (==)
            259 POP_JUMP_IF_TRUE       277
            262 LOAD_CONST             158 (1647233480)
            265 LOAD_FAST                7 (DIVIDER)
            268 COMPARE_OP               2 (==)
            271 POP_JUMP_IF_TRUE       280
            274 JUMP_FORWARD           236 (to 513)
        >>  277 JUMP_FORWARD          1046 (to 1326)
        >>  280 JUMP_FORWARD          1090 (to 1373)
        >>  287 LOAD_FAST                7 (DIVIDER)
            290 COMPARE_OP               2 (==)
            293 POP_JUMP_IF_TRUE       320
            296 LOAD_CONST             177 (2553032551L)
            299 LOAD_FAST                7 (DIVIDER)
            302 COMPARE_OP               2 (==)
            305 POP_JUMP_IF_TRUE       323
            308 LOAD_CONST             164 (2524697422L)
            311 LOAD_FAST                7 (DIVIDER)
            314 COMPARE_OP               2 (==)
            317 JUMP_FORWARD           748 (to 1068)
        >>  320 JUMP_FORWARD          2736 (to 3059)
        >>  323 JUMP_FORWARD          2341 (to 2667)
        >>  334 LOAD_CONST             127 (321254055)
            337 LOAD_CONST             128 (641759727)
            340 LOAD_CONST             129 (344601346)
            343 LOAD_CONST             130 (-40281788)
            346 LOAD_CONST             131 (-217030057)
            349 JUMP_ABSOLUTE          367
        >>  352 LOAD_CONST             132 (476060216)
            355 LOAD_CONST             133 (767746297)
            358 LOAD_CONST             134 (503093626)
            361 JUMP_ABSOLUTE          370
        >>  367 JUMP_FORWARD          1640 (to 2010)
        >>  370 JUMP_FORWARD          2786 (to 3159)
        >>  379 JUMP_ABSOLUTE          412
        >>  382 LOAD_CONST             188 (3527259578L)

 29         385 STORE_FAST               7 (DIVIDER)
            388 JUMP_ABSOLUTE          415
        >>  391 LOAD_CONST             189 (2624506001L)
            394 STORE_FAST               7 (DIVIDER)
            397 JUMP_ABSOLUTE          418
        >>  400 LOAD_CONST             190 (3793853702L)
            403 STORE_FAST               7 (DIVIDER)
            406 JUMP_ABSOLUTE          421
        >>  412 JUMP_FORWARD           707 (to 1122)
        >>  415 JUMP_FORWARD           704 (to 1122)
        >>  418 JUMP_FORWARD           701 (to 1122)
        >>  421 JUMP_FORWARD           698 (to 1122)
        >>  433 LOAD_FAST                7 (DIVIDER)
            436 COMPARE_OP               2 (==)
            439 POP_JUMP_IF_TRUE       463
            442 LOAD_CONST             202 (1156782974)
            445 LOAD_FAST                7 (DIVIDER)
            448 COMPARE_OP               2 (==)
            451 POP_JUMP_IF_TRUE       466
            454 LOAD_CONST             208 (124773723)
            457 LOAD_FAST                7 (DIVIDER)
            460 JUMP_FORWARD          2326 (to 2789)
        >>  463 JUMP_FORWARD          1717 (to 2183)
        >>  466 JUMP_FORWARD          2216 (to 2685)
        >>  475 LOAD_CONST              36 (9934)
            478 JUMP_ABSOLUTE          502
        >>  481 LOAD_CONST              77 (832832835)
            484 LOAD_CONST              78 (-924053193)
            487 LOAD_CONST              79 (-307134635)
            490 LOAD_CONST              80 (-527578092)
            493 LOAD_CONST              81 (998625960)
            496 JUMP_ABSOLUTE          505
        >>  502 JUMP_FORWARD          1514 (to 2019)
        >>  505 JUMP_ABSOLUTE          206
        >>  513 LOAD_CONST             186 (2504276117L)
            516 LOAD_FAST                7 (DIVIDER)
            519 COMPARE_OP               2 (==)
            522 POP_JUMP_IF_TRUE       540
            525 LOAD_CONST             206 (829701355)
            528 LOAD_FAST                7 (DIVIDER)
            531 COMPARE_OP               2 (==)
            534 POP_JUMP_IF_TRUE       543
            537 JUMP_FORWARD          1074 (to 1614)
        >>  540 JUMP_ABSOLUTE           60
        >>  543 JUMP_FORWARD           663 (to 1209)
        >>  551 LOAD_CONST             194 (1956782531)
            554 STORE_FAST               7 (DIVIDER)
            557 JUMP_ABSOLUTE          581
        >>  560 LOAD_CONST             195 (2118042320)
            563 STORE_FAST               7 (DIVIDER)

 33         566 JUMP_ABSOLUTE          584
        >>  569 LOAD_CONST             196 (3774890599L)
            572 STORE_FAST               7 (DIVIDER)
            575 JUMP_ABSOLUTE          587
        >>  581 JUMP_FORWARD           538 (to 1122)
        >>  584 JUMP_FORWARD           535 (to 1122)
        >>  587 JUMP_FORWARD           532 (to 1122)
        >>  597 LOAD_CONST             175 (1393258618)
            600 LOAD_FAST                7 (DIVIDER)
            603 COMPARE_OP               2 (==)
            606 POP_JUMP_IF_TRUE       624
            609 LOAD_CONST             155 (285725810)
            612 LOAD_FAST                7 (DIVIDER)
            615 COMPARE_OP               2 (==)
            618 POP_JUMP_IF_TRUE       627
            621 JUMP_FORWARD          2249 (to 2873)
        >>  624 JUMP_FORWARD           971 (to 1598)
        >>  627 JUMP_FORWARD           180 (to 810)
        >>  638 LOAD_CONST             197 (3804243641L)
            641 STORE_FAST               7 (DIVIDER)
            644 JUMP_ABSOLUTE          665
        >>  647 LOAD_CONST             198 (3095970229L)
            650 STORE_FAST               7 (DIVIDER)
            653 JUMP_ABSOLUTE          668
        >>  656 LOAD_CONST             199 (323719881)
            659 STORE_FAST               7 (DIVIDER)
            662 JUMP_FORWARD          2431 (to 3096)
        >>  665 JUMP_FORWARD           454 (to 1122)
        >>  668 JUMP_FORWARD           451 (to 1122)
        >>  676 LOAD_CONST             184 (494892034)
            679 LOAD_FAST                7 (DIVIDER)
            682 COMPARE_OP               2 (==)
            685 POP_JUMP_IF_TRUE       703
            688 LOAD_CONST             203 (2617360123L)
            691 LOAD_FAST                7 (DIVIDER)
            694 COMPARE_OP               2 (==)
            697 POP_JUMP_IF_TRUE       706
            700 JUMP_FORWARD           700 (to 1403)
        >>  703 JUMP_FORWARD           236 (to 942)
        >>  706 JUMP_FORWARD            89 (to 798)
        >>  714 LOAD_CONST             170 (3704389375L)
            717 STORE_FAST               7 (DIVIDER)
            720 JUMP_ABSOLUTE          741
        >>  723 LOAD_CONST             171 (4286464245L)
            726 STORE_FAST               7 (DIVIDER)
            729 JUMP_ABSOLUTE          744
        >>  732 LOAD_CONST             172 (2021752943)
            735 STORE_FAST               7 (DIVIDER)
            738 JUMP_ABSOLUTE           95
        >>  741 JUMP_FORWARD           378 (to 1122)
        >>  744 JUMP_FORWARD           375 (to 1122)
        >>  753 POP_JUMP_IF_TRUE       780
            756 LOAD_CONST             195 (2118042320)
            759 LOAD_FAST                7 (DIVIDER)
            762 COMPARE_OP               2 (==)
            765 POP_JUMP_IF_TRUE       783
            768 LOAD_CONST             197 (3804243641L)
            771 LOAD_FAST                7 (DIVIDER)
            774 COMPARE_OP               2 (==)
            777 JUMP_FORWARD           494 (to 1274)
        >>  780 JUMP_FORWARD          1560 (to 2343)
        >>  783 JUMP_FORWARD           339 (to 1125)
        >>  795 JUMP_ABSOLUTE          822
        >>  798 LOAD_CONST              62 (16935)
            801 LOAD_CONST              63 (66677)
            804 LOAD_CONST              64 (51321)
            807 JUMP_ABSOLUTE          825
        >>  810 BINARY_SUBSCR
            811 BINARY_ADD
            812 CALL_FUNCTION            1
            815 POP_TOP
            816 JUMP_ABSOLUTE          828
        >>  822 JUMP_FORWARD          2111 (to 2936)
        >>  825 JUMP_FORWARD          2180 (to 3008)
        >>  828 JUMP_ABSOLUTE           31
        >>  839 LOAD_CONST             205 (3888638452L)
            842 LOAD_FAST                7 (DIVIDER)
            845 COMPARE_OP               2 (==)
            848 POP_JUMP_IF_TRUE       866
            851 LOAD_CONST             160 (3540564641L)
            854 LOAD_FAST                7 (DIVIDER)
            857 COMPARE_OP               2 (==)
            860 POP_JUMP_IF_TRUE       869
            863 JUMP_FORWARD           110 (to 976)
        >>  866 JUMP_FORWARD          1760 (to 2629)
        >>  869 JUMP_FORWARD          1028 (to 1900)
        >>  880 JUMP_ABSOLUTE          913
        >>  883 LOAD_CONST             167 (3212239732L)
            886 STORE_FAST               7 (DIVIDER)
            889 JUMP_ABSOLUTE          916
        >>  892 LOAD_CONST             168 (2341687652L)
            895 STORE_FAST               7 (DIVIDER)
            898 JUMP_ABSOLUTE          919
        >>  901 LOAD_CONST             169 (3290924521L)
            904 STORE_FAST               7 (DIVIDER)
            907 JUMP_ABSOLUTE          922
        >>  913 JUMP_FORWARD           206 (to 1122)
        >>  916 JUMP_FORWARD           203 (to 1122)
        >>  919 JUMP_FORWARD           200 (to 1122)
        >>  922 JUMP_FORWARD           197 (to 1122)
        >>  930 LOAD_CONST             140 (48876640)
            933 LOAD_CONST             141 (-467362638)
            936 LOAD_CONST             142 (-260077296)
            939 JUMP_ABSOLUTE          960
        >>  942 STORE_FAST               4 (d)
            945 SETUP_LOOP              15 (to 963)
            948 JUMP_ABSOLUTE          966
        >>  954 LOAD_FAST                1 (a)
            957 JUMP_FORWARD          1092 (to 2052)
        >>  960 JUMP_ABSOLUTE          714
        >>  963 NOP
            964 NOP
            965 NOP
        >>  966 JUMP_FORWARD           144 (to 1113)
        >>  976 LOAD_CONST             198 (3095970229L)
            979 LOAD_FAST                7 (DIVIDER)
            982 COMPARE_OP               2 (==)
            985 POP_JUMP_IF_TRUE      1003
            988 LOAD_CONST             165 (4248338727L)
            991 LOAD_FAST                7 (DIVIDER)
            994 COMPARE_OP               2 (==)
            997 POP_JUMP_IF_TRUE      1006
           1000 JUMP_ABSOLUTE          250
        >> 1003 JUMP_FORWARD          1765 (to 2771)
        >> 1006 JUMP_FORWARD           574 (to 1583)
        >> 1014 LOAD_GLOBAL              3 (p_f)
           1017 CALL_FUNCTION            0
           1020 POP_TOP
           1021 JUMP_ABSOLUTE         1039
        >> 1024 LOAD_GLOBAL              0 (range)
           1027 LOAD_CONST             115 (38)
           1030 CALL_FUNCTION            1
           1033 JUMP_ABSOLUTE         1042
        >> 1039 JUMP_ABSOLUTE           98
        >> 1042 JUMP_FORWARD          1981 (to 3026)
        >> 1054 LOAD_CONST             210 (None)
           1057 RETURN_VALUE
           1058 NOP
           1059 NOP
           1060 NOP
           1061 NOP
           1062 NOP
           1063 NOP
           1064 NOP
           1065 NOP
           1066 NOP
           1067 NOP
        >> 1068 POP_JUMP_IF_TRUE      1095
           1071 LOAD_CONST             167 (3212239732L)
           1074 LOAD_FAST                7 (DIVIDER)
           1077 COMPARE_OP               2 (==)
           1080 POP_JUMP_IF_TRUE      1098
           1083 LOAD_CONST             170 (3704389375L)
           1086 LOAD_FAST                7 (DIVIDER)
           1089 COMPARE_OP               2 (==)
           1092 JUMP_ABSOLUTE          753
        >> 1095 JUMP_FORWARD          1620 (to 2718)
        >> 1098 JUMP_ABSOLUTE          151
        >> 1107 STORE_FAST               7 (DIVIDER)
           1110 JUMP_ABSOLUTE         1137
        >> 1113 LOAD_CONST             209 (3520207424L)
           1116 STORE_FAST               7 (DIVIDER)
           1119 JUMP_ABSOLUTE         1140
        >> 1122 JUMP_FORWARD            18 (to 1143)
        >> 1125 LOAD_CONST              86 (-361574731)
           1128 LOAD_CONST              87 (-678171563)
           1131 LOAD_CONST              88 (107566155)
           1134 JUMP_FORWARD           520 (to 1657)
        >> 1137 JUMP_ABSOLUTE         1122
        >> 1140 JUMP_ABSOLUTE         1122
        >> 1143 JUMP_FORWARD           572 (to 1718)
        >> 1150 LOAD_FAST                7 (DIVIDER)
           1153 COMPARE_OP               2 (==)
           1156 POP_JUMP_IF_TRUE      1183
           1159 LOAD_CONST             157 (2548479002L)
           1162 LOAD_FAST                7 (DIVIDER)
           1165 COMPARE_OP               2 (==)
           1168 POP_JUMP_IF_TRUE      1186
           1171 LOAD_CONST             182 (3287039386L)
           1174 LOAD_FAST                7 (DIVIDER)
           1177 COMPARE_OP               2 (==)
           1180 JUMP_FORWARD           557 (to 1740)
        >> 1183 JUMP_FORWARD           700 (to 1886)
        >> 1186 JUMP_FORWARD           873 (to 2062)
        >> 1194 LOAD_CONST              13 (11713)
           1197 LOAD_CONST              14 (34938)
           1200 LOAD_CONST              15 (12865)
           1203 LOAD_CONST              16 (6085)
           1206 JUMP_ABSOLUTE         1220
        >> 1209 BINARY_SUBSCR
           1210 BINARY_MULTIPLY
           1211 LOAD_FAST                2 (b)
           1214 JUMP_ABSOLUTE         1223
        >> 1220 JUMP_ABSOLUTE          723
        >> 1223 JUMP_ABSOLUTE          883
        >> 1234 LOAD_CONST               2 (4747)
           1237 LOAD_CONST               3 (17752)
           1240 LOAD_CONST               4 (33060)
           1243 LOAD_CONST               5 (31051)
           1246 JUMP_ABSOLUTE         1267
        >> 1249 LOAD_CONST              93 (373369420)
           1252 LOAD_CONST              94 (659110852)
           1255 LOAD_CONST              95 (165298084)
           1258 LOAD_CONST              96 (-389004184)
           1261 LOAD_CONST              97 (893094421)
           1264 JUMP_ABSOLUTE          795
        >> 1267 JUMP_FORWARD           700 (to 1970)
        >> 1274 POP_JUMP_IF_TRUE      1304
           1277 LOAD_CONST             168 (2341687652L)
           1280 LOAD_FAST                7 (DIVIDER)
           1283 COMPARE_OP               2 (==)
           1286 POP_JUMP_IF_TRUE      1307
           1289 LOAD_CONST             194 (1956782531)
           1292 LOAD_FAST                7 (DIVIDER)
           1295 COMPARE_OP               2 (==)
           1298 POP_JUMP_IF_TRUE      1310
           1301 JUMP_FORWARD          1532 (to 2836)
        >> 1304 JUMP_ABSOLUTE          168
        >> 1307 JUMP_FORWARD          1261 (to 2571)
        >> 1310 JUMP_ABSOLUTE          481
        >> 1317 BUILD_LIST              38
           1320 STORE_FAST               2 (b)
           1323 JUMP_ABSOLUTE         1345
        >> 1326 JUMP_FORWARD            19 (to 1348)
        >> 1332 JUMP_ABSOLUTE         1354
        >> 1335 LOAD_CONST               0 (None)
           1338 RETURN_VALUE
        >> 1339 LOAD_CONST              72 (12046)
           1342 JUMP_FORWARD          1402 (to 2747)
        >> 1345 JUMP_ABSOLUTE          551
        >> 1348 JUMP_ABSOLUTE         1332
        >> 1354 JUMP_ABSOLUTE           98
        >> 1363 BINARY_ADD
           1364 LOAD_FAST                3 (c)
           1367 LOAD_FAST                5 (i)
           1370 JUMP_ABSOLUTE         1391
        >> 1373 LOAD_CONST              89 (608670527)
           1376 LOAD_CONST              90 (254218946)
           1379 LOAD_CONST              91 (-81206308)
           1382 LOAD_CONST              92 (-284228457)
           1385 JUMP_ABSOLUTE         1394
        >> 1391 JUMP_FORWARD          1045 (to 2439)
        >> 1394 JUMP_ABSOLUTE          215
        >> 1403 LOAD_CONST             193 (3919931372L)
           1406 LOAD_FAST                7 (DIVIDER)
           1409 COMPARE_OP               2 (==)
           1412 POP_JUMP_IF_TRUE      1433
           1415 LOAD_CONST             179 (1493888620)
           1418 LOAD_FAST                7 (DIVIDER)
           1421 COMPARE_OP               2 (==)
           1424 POP_JUMP_IF_TRUE      1436
           1427 LOAD_CONST             199 (323719881)
           1430 JUMP_ABSOLUTE         1150
        >> 1433 JUMP_FORWARD           401 (to 1837)
        >> 1436 JUMP_FORWARD           221 (to 1660)
        >> 1443 LOAD_FAST                7 (DIVIDER)
           1446 COMPARE_OP               2 (==)
           1449 POP_JUMP_IF_TRUE      1473
           1452 LOAD_CONST             159 (2770185354L)
           1455 LOAD_FAST                7 (DIVIDER)
           1458 COMPARE_OP               2 (==)
           1461 POP_JUMP_IF_TRUE      1476
           1464 LOAD_CONST             209 (3520207424L)
           1467 LOAD_FAST                7 (DIVIDER)
           1470 JUMP_FORWARD            15 (to 1488)
        >> 1473 JUMP_FORWARD           373 (to 1849)
        >> 1476 JUMP_FORWARD          1010 (to 2489)
        >> 1488 COMPARE_OP               2 (==)
           1491 POP_JUMP_IF_TRUE      1518
           1494 LOAD_CONST             172 (2021752943)
           1497 LOAD_FAST                7 (DIVIDER)
           1500 COMPARE_OP               2 (==)
           1503 POP_JUMP_IF_TRUE      1521
           1506 LOAD_CONST             163 (982086896)
           1509 LOAD_FAST                7 (DIVIDER)
           1512 COMPARE_OP               2 (==)
           1515 JUMP_FORWARD            12 (to 1530)
        >> 1518 JUMP_ABSOLUTE         1024
        >> 1521 JUMP_FORWARD           780 (to 2304)
        >> 1530 POP_JUMP_IF_TRUE      1560
           1533 LOAD_CONST             181 (972353852)
           1536 LOAD_FAST                7 (DIVIDER)
           1539 COMPARE_OP               2 (==)
           1542 POP_JUMP_IF_TRUE      1563
           1545 LOAD_CONST             173 (1317946295)
           1548 LOAD_FAST                7 (DIVIDER)
           1551 COMPARE_OP               2 (==)
           1554 POP_JUMP_IF_TRUE      1566
           1557 JUMP_ABSOLUTE          597
        >> 1560 JUMP_FORWARD          1054 (to 2617)
        >> 1563 JUMP_FORWARD           137 (to 1703)
        >> 1566 JUMP_ABSOLUTE         1335
        >> 1577 STORE_FAST               6 (e)
           1580 JUMP_ABSOLUTE         1602
        >> 1583 LOAD_CONST              22 (48142)
           1586 LOAD_CONST              23 (27066)
           1589 LOAD_CONST              24 (28626)
           1592 LOAD_CONST              25 (37431)
           1595 JUMP_ABSOLUTE         1605
        >> 1598 BINARY_MULTIPLY
           1599 JUMP_ABSOLUTE         1363
        >> 1602 JUMP_FORWARD          1360 (to 2965)
        >> 1605 JUMP_FORWARD           204 (to 1812)
        >> 1614 LOAD_CONST             191 (971694574)
           1617 LOAD_FAST                7 (DIVIDER)
           1620 COMPARE_OP               2 (==)
           1623 POP_JUMP_IF_TRUE      1644
           1626 LOAD_CONST             180 (3108974362L)
           1629 LOAD_FAST                7 (DIVIDER)
           1632 COMPARE_OP               2 (==)
           1635 POP_JUMP_IF_TRUE      1647
           1638 LOAD_CONST             204 (1889634705)
           1641 JUMP_ABSOLUTE          433
        >> 1644 JUMP_FORWARD           675 (to 2322)
        >> 1647 JUMP_FORWARD           281 (to 1931)
        >> 1657 JUMP_ABSOLUTE         1687
        >> 1660 LOAD_CONST              54 (63484)
           1663 LOAD_CONST              55 (30491)
           1666 LOAD_CONST              56 (34005)
           1669 LOAD_CONST              57 (51393)
           1672 LOAD_CONST              58 (38029)
           1675 JUMP_ABSOLUTE         1690
        >> 1678 LOAD_CONST              98 (-868933443)
           1681 LOAD_CONST              99 (44838205)
           1684 JUMP_FORWARD           790 (to 2477)
        >> 1687 JUMP_FORWARD          1327 (to 3017)
        >> 1690 JUMP_FORWARD           110 (to 1803)
        >> 1697 LOAD_CONST              85 (-475718185)
           1700 JUMP_ABSOLUTE         1730
        >> 1703 LOAD_CONST              26 (39142)
           1706 LOAD_CONST              27 (46795)
           1709 LOAD_CONST              28 (21771)
           1712 LOAD_CONST              29 (44280)
           1715 JUMP_ABSOLUTE         1733
        >> 1718 LOAD_CONST             188 (3527259578L)
           1721 LOAD_FAST                7 (DIVIDER)
           1724 COMPARE_OP               2 (==)
           1727 JUMP_FORWARD           793 (to 2523)
        >> 1730 JUMP_ABSOLUTE          560
        >> 1733 JUMP_ABSOLUTE           22
        >> 1740 POP_JUMP_IF_TRUE      1773
           1743 LOAD_CONST             176 (696454276)
           1746 LOAD_FAST                7 (DIVIDER)
           1749 COMPARE_OP               2 (==)
           1752 POP_JUMP_IF_TRUE      1776
           1755 LOAD_CONST             161 (2816035871L)
           1758 LOAD_FAST                7 (DIVIDER)
           1761 COMPARE_OP               2 (==)
           1764 POP_JUMP_IF_TRUE      1779
           1767 LOAD_CONST             192 (1002508958)
           1770 JUMP_FORWARD           489 (to 2262)
        >> 1773 JUMP_FORWARD           620 (to 2396)
        >> 1776 JUMP_ABSOLUTE          352
        >> 1779 JUMP_ABSOLUTE          334
        >> 1791 JUMP_ABSOLUTE         1818
        >> 1794 LOAD_CONST             179 (1493888620)
           1797 STORE_FAST               7 (DIVIDER)
           1800 JUMP_ABSOLUTE         1821
        >> 1803 LOAD_CONST             180 (3108974362L)
           1806 STORE_FAST               7 (DIVIDER)
           1809 JUMP_ABSOLUTE         1824
        >> 1812 LOAD_CONST             181 (972353852)
           1815 JUMP_FORWARD           137 (to 1955)
        >> 1818 JUMP_ABSOLUTE         1122
        >> 1821 JUMP_ABSOLUTE         1122
        >> 1824 JUMP_ABSOLUTE         1122
        >> 1834 JUMP_ABSOLUTE         1864
        >> 1837 LOAD_CONST             119 (-172451190)
           1840 LOAD_CONST             120 (1471255182)
           1843 LOAD_CONST             121 (-242282199)
           1846 JUMP_ABSOLUTE         1867
        >> 1849 LOAD_CONST              10 (38888)
           1852 LOAD_CONST              11 (24844)
           1855 LOAD_CONST              12 (20706)
           1858 JUMP_ABSOLUTE         1870
        >> 1864 JUMP_FORWARD            94 (to 1961)
        >> 1867 JUMP_ABSOLUTE          732
        >> 1870 JUMP_FORWARD           368 (to 2241)
        >> 1880 LOAD_CONST              21 (8701)
           1883 JUMP_ABSOLUTE         1906
        >> 1886 LOAD_FAST                5 (i)
           1889 BINARY_SUBSCR
           1890 BINARY_MULTIPLY
           1891 LOAD_FAST                0 (data)
           1894 LOAD_FAST                5 (i)
           1897 JUMP_ABSOLUTE         1909
        >> 1900 LOAD_CONST               1 (13433)
           1903 JUMP_ABSOLUTE         1234
        >> 1906 JUMP_FORWARD          1065 (to 2974)
        >> 1909 JUMP_FORWARD           311 (to 2223)
        >> 1916 LOAD_CONST              50 (66279)
           1919 LOAD_CONST              51 (76134)
           1922 LOAD_CONST              52 (60748)
           1925 LOAD_CONST              53 (10355)
           1928 JUMP_ABSOLUTE         1943
        >> 1931 LOAD_CONST              59 (7241)
           1934 LOAD_CONST              60 (4998)
           1937 LOAD_CONST              61 (18562)
           1940 JUMP_FORWARD           667 (to 2610)
        >> 1943 JUMP_ABSOLUTE         1794
        >> 1955 STORE_FAST               7 (DIVIDER)
           1958 JUMP_ABSOLUTE         1988
        >> 1961 LOAD_CONST             182 (3287039386L)
           1964 STORE_FAST               7 (DIVIDER)
           1967 JUMP_ABSOLUTE         1991
        >> 1970 LOAD_CONST             183 (2759880987L)
           1973 STORE_FAST               7 (DIVIDER)
           1976 JUMP_ABSOLUTE         1994
        >> 1979 LOAD_CONST             184 (494892034)
           1982 STORE_FAST               7 (DIVIDER)
           1985 JUMP_FORWARD           927 (to 2915)
        >> 1988 JUMP_ABSOLUTE         1122
        >> 1991 JUMP_ABSOLUTE         1122
        >> 1994 JUMP_ABSOLUTE         1122
        >> 2004 STORE_FAST               7 (DIVIDER)
           2007 JUMP_ABSOLUTE         2037
        >> 2010 LOAD_CONST             176 (696454276)
           2013 STORE_FAST               7 (DIVIDER)
           2016 JUMP_ABSOLUTE         2040
        >> 2019 LOAD_CONST             177 (2553032551L)
           2022 STORE_FAST               7 (DIVIDER)
           2025 JUMP_ABSOLUTE         2043
        >> 2028 LOAD_CONST             178 (1483355210)
           2031 STORE_FAST               7 (DIVIDER)
           2034 JUMP_ABSOLUTE         1791
        >> 2037 JUMP_ABSOLUTE         1122
        >> 2040 JUMP_ABSOLUTE         1122
        >> 2043 JUMP_ABSOLUTE         1122
        >> 2052 LOAD_FAST                5 (i)
           2055 BINARY_SUBSCR
           2056 LOAD_FAST                0 (data)
           2059 JUMP_ABSOLUTE         2080
        >> 2062 LOAD_CONST              65 (13771)
           2065 LOAD_CONST              66 (49108)
           2068 LOAD_CONST              67 (52166)
           2071 LOAD_CONST              68 (8851)
           2074 JUMP_ABSOLUTE         2083
        >> 2080 JUMP_ABSOLUTE          656
        >> 2083 JUMP_FORWARD          1082 (to 3168)
        >> 2090 COMPARE_OP               2 (==)
           2093 POP_JUMP_IF_TRUE      2123
           2096 LOAD_CONST             154 (2301852651L)
           2099 LOAD_FAST                7 (DIVIDER)
           2102 COMPARE_OP               2 (==)
           2105 POP_JUMP_IF_TRUE      2126
           2108 LOAD_CONST             171 (4286464245L)
           2111 LOAD_FAST                7 (DIVIDER)
           2114 COMPARE_OP               2 (==)
           2117 POP_JUMP_IF_TRUE      2129
           2120 JUMP_ABSOLUTE          839
        >> 2123 JUMP_ABSOLUTE          954
        >> 2126 JUMP_ABSOLUTE         1014
        >> 2129 JUMP_FORWARD           451 (to 2583)
        >> 2136 LOAD_CONST             166 (85215907)
           2139 LOAD_FAST                7 (DIVIDER)
           2142 COMPARE_OP               2 (==)
           2145 POP_JUMP_IF_TRUE      2163
           2148 LOAD_CONST             169 (3290924521L)
           2151 LOAD_FAST                7 (DIVIDER)
           2154 COMPARE_OP               2 (==)
           2157 POP_JUMP_IF_TRUE      2166
           2160 JUMP_ABSOLUTE         1054
        >> 2163 JUMP_ABSOLUTE          186
        >> 2166 JUMP_FORWARD           237 (to 2406)
        >> 2174 LOAD_FAST                4 (d)
           2177 LOAD_ATTR                1 (append)
           2180 JUMP_ABSOLUTE         2207
        >> 2183 LOAD_CONST              30 (40628)
           2186 LOAD_CONST              31 (35013)
           2189 LOAD_CONST              32 (18583)
           2192 LOAD_CONST              33 (5418)
           2195 JUMP_ABSOLUTE         2210
        >> 2198 LOAD_CONST             138 (322813233)
           2201 LOAD_CONST             139 (178032672)
           2204 JUMP_ABSOLUTE          930
        >> 2207 JUMP_FORWARD           898 (to 3108)
        >> 2210 JUMP_FORWARD           904 (to 3117)
        >> 2220 JUMP_ABSOLUTE         2247
        >> 2223 LOAD_CONST             206 (829701355)
           2226 STORE_FAST               7 (DIVIDER)
           2229 JUMP_ABSOLUTE         2250
        >> 2232 LOAD_CONST             207 (2327741117L)
           2235 STORE_FAST               7 (DIVIDER)
           2238 JUMP_ABSOLUTE         2253
        >> 2241 LOAD_CONST             208 (124773723)
           2244 JUMP_ABSOLUTE         1107
        >> 2247 JUMP_ABSOLUTE         1122
        >> 2250 JUMP_ABSOLUTE         1122
        >> 2253 JUMP_ABSOLUTE         1122
        >> 2262 LOAD_FAST                7 (DIVIDER)
           2265 COMPARE_OP               2 (==)
           2268 POP_JUMP_IF_TRUE      2292
           2271 LOAD_CONST             187 (86491762)
           2274 LOAD_FAST                7 (DIVIDER)
           2277 COMPARE_OP               2 (==)
           2280 POP_JUMP_IF_TRUE      2295
           2283 LOAD_CONST             201 (155584763)
           2286 LOAD_FAST                7 (DIVIDER)
           2289 JUMP_ABSOLUTE         2090
        >> 2292 JUMP_ABSOLUTE         1249
        >> 2295 JUMP_ABSOLUTE         1678
        >> 2304 LOAD_CONST             122 (321870424)
           2307 LOAD_CONST             123 (-897049789)
           2310 LOAD_CONST             124 (-428663209)
           2313 LOAD_CONST             125 (-256350703)
           2316 LOAD_CONST             126 (-613466537)
           2319 JUMP_ABSOLUTE         2334
        >> 2322 LOAD_CONST              82 (-715102211)
           2325 LOAD_CONST              83 (3572182)
           2328 LOAD_CONST              84 (-963194083)
           2331 JUMP_ABSOLUTE         1697
        >> 2334 JUMP_FORWARD           813 (to 3150)
        >> 2343 LOAD_CONST             143 (923436845)
           2346 LOAD_CONST             144 (536082660)
           2349 LOAD_CONST             145 (-138702820)
           2352 LOAD_CONST             146 (-210365307)
           2355 LOAD_CONST             147 (-397666023)
           2358 JUMP_ABSOLUTE         2376
        >> 2361 LOAD_CONST              40 (7074)
           2364 LOAD_CONST              41 (79833)
           2367 LOAD_CONST              42 (42654)
           2370 LOAD_CONST              43 (23241)
           2373 JUMP_ABSOLUTE           54
        >> 2376 JUMP_ABSOLUTE          892
        >> 2387 STORE_FAST               3 (c)
           2390 BUILD_LIST               0
           2393 JUMP_ABSOLUTE         2412
        >> 2396 LOAD_GLOBAL              2 (p_s)
           2399 CALL_FUNCTION            0
           2402 POP_TOP
           2403 JUMP_ABSOLUTE         2415
        >> 2406 LOAD_CONST              49 (1682)
           2409 JUMP_ABSOLUTE         1916
        >> 2412 JUMP_ABSOLUTE         1979
        >> 2415 JUMP_ABSOLUTE          400
        >> 2427 JUMP_FORWARD            30 (to 2460)
        >> 2430 LOAD_CONST             154 (2301852651L)
           2433 STORE_FAST               7 (DIVIDER)
           2436 JUMP_ABSOLUTE         2463
        >> 2439 LOAD_CONST             155 (285725810)
           2442 STORE_FAST               7 (DIVIDER)
           2445 JUMP_ABSOLUTE         2466
        >> 2448 LOAD_CONST             156 (884634542)
           2451 STORE_FAST               7 (DIVIDER)
           2454 JUMP_ABSOLUTE         2469
        >> 2460 JUMP_FORWARD           678 (to 3141)
        >> 2463 JUMP_ABSOLUTE         1122
        >> 2466 JUMP_ABSOLUTE         1122
        >> 2469 JUMP_ABSOLUTE         1122
        >> 2477 LOAD_CONST             100 (-98551062)
           2480 LOAD_CONST             101 (-59800920)
           2483 LOAD_CONST             102 (-575871298)
           2486 JUMP_ABSOLUTE         2508
        >> 2489 GET_ITER
           2490 JUMP_ABSOLUTE         2511
        >> 2493 LOAD_CONST             151 (41479433)
           2496 LOAD_CONST             152 (-632022956)
           2499 LOAD_CONST             153 (1204798830)
           2502 BUILD_LIST              38
           2505 JUMP_ABSOLUTE         1577
        >> 2508 JUMP_FORWARD           416 (to 2927)
        >> 2511 JUMP_ABSOLUTE           31
        >> 2523 POP_JUMP_IF_TRUE      2556
           2526 LOAD_CONST             174 (3622895996L)
           2529 LOAD_FAST                7 (DIVIDER)
           2532 COMPARE_OP               2 (==)
           2535 POP_JUMP_IF_TRUE      2559
           2538 LOAD_CONST             178 (1483355210)
           2541 LOAD_FAST                7 (DIVIDER)
           2544 COMPARE_OP               2 (==)
           2547 POP_JUMP_IF_TRUE      2562
           2550 LOAD_CONST             185 (1958480987)
           2553 JUMP_ABSOLUTE         1443
        >> 2556 JUMP_ABSOLUTE         1339
        >> 2559 JUMP_FORWARD           194 (to 2756)
        >> 2562 JUMP_ABSOLUTE         2493
        >> 2571 LOAD_CONST             148 (-215329942)
           2574 LOAD_CONST             149 (274852104)
           2577 LOAD_CONST             150 (818217684)
           2580 JUMP_ABSOLUTE         2598
        >> 2583 LOAD_CONST              17 (37391)
           2586 LOAD_CONST              18 (32840)
           2589 LOAD_CONST              19 (31964)
           2592 LOAD_CONST              20 (27194)
           2595 JUMP_ABSOLUTE         1880
        >> 2598 JUMP_ABSOLUTE         2028
        >> 2610 JUMP_ABSOLUTE         2641
        >> 2613 POP_BLOCK
           2614 JUMP_ABSOLUTE         2644
        >> 2617 LOAD_CONST              69 (16900)
           2620 LOAD_CONST              70 (31682)
           2623 LOAD_CONST              71 (16684)
           2626 JUMP_ABSOLUTE         2647
        >> 2629 FOR_ITER                18 (to 2650)
           2632 JUMP_ABSOLUTE         2653
        >> 2635 JUMP_ABSOLUTE         2656
        >> 2641 JUMP_ABSOLUTE           13
        >> 2644 JUMP_ABSOLUTE         2232
        >> 2647 JUMP_ABSOLUTE          382
        >> 2650 JUMP_ABSOLUTE         2635
        >> 2653 JUMP_ABSOLUTE          647
        >> 2656 JUMP_ABSOLUTE          391
        >> 2667 LOAD_CONST              37 (46892)
           2670 LOAD_CONST              38 (19868)
           2673 BUILD_LIST              38
           2676 STORE_FAST               1 (a)
           2679 LOAD_CONST              39 (13711)
           2682 JUMP_ABSOLUTE         2694
        >> 2685 LOAD_CONST              34 (4347)
           2688 LOAD_CONST              35 (43929)
           2691 JUMP_ABSOLUTE          475
        >> 2694 JUMP_ABSOLUTE          569
        >> 2706 LOAD_CONST             135 (-102198850)
           2709 LOAD_CONST             136 (984358207)
           2712 LOAD_CONST             137 (-415480559)
           2715 JUMP_ABSOLUTE         2736
        >> 2718 LOAD_FAST                4 (d)
           2721 LOAD_FAST                6 (e)
           2724 COMPARE_OP               2 (==)
           2727 POP_JUMP_IF_FALSE     2739
           2730 JUMP_ABSOLUTE         1834
        >> 2736 JUMP_FORWARD           360 (to 3099)
        >> 2739 JUMP_ABSOLUTE         2430
        >> 2747 LOAD_CONST              73 (16764)
           2750 LOAD_CONST              74 (64315)
           2753 JUMP_ABSOLUTE         2777
        >> 2756 LOAD_CONST              45 (61795)
           2759 LOAD_CONST              46 (6373)
           2762 LOAD_CONST              47 (19304)
           2765 LOAD_CONST              48 (1363)
           2768 JUMP_ABSOLUTE         2780
        >> 2771 STORE_FAST               5 (i)
           2774 JUMP_ABSOLUTE         2174
        >> 2777 JUMP_FORWARD           203 (to 2983)
        >> 2780 JUMP_ABSOLUTE          901
        >> 2789 COMPARE_OP               2 (==)
           2792 POP_JUMP_IF_TRUE      2822
           2795 LOAD_CONST             162 (50360135)
           2798 LOAD_FAST                7 (DIVIDER)
           2801 COMPARE_OP               2 (==)
           2804 POP_JUMP_IF_TRUE      2825
           2807 LOAD_CONST             183 (2759880987L)
           2810 LOAD_FAST                7 (DIVIDER)
           2813 COMPARE_OP               2 (==)
           2816 POP_JUMP_IF_TRUE      2828
           2819 JUMP_ABSOLUTE         2136
        >> 2822 JUMP_ABSOLUTE         1194
        >> 2825 JUMP_ABSOLUTE         2706
        >> 2828 JUMP_ABSOLUTE          136
        >> 2836 LOAD_CONST             189 (2624506001L)
           2839 LOAD_FAST                7 (DIVIDER)
           2842 COMPARE_OP               2 (==)
           2845 POP_JUMP_IF_TRUE      2863
           2848 LOAD_CONST             156 (884634542)
           2851 LOAD_FAST                7 (DIVIDER)
           2854 COMPARE_OP               2 (==)
           2857 POP_JUMP_IF_TRUE      2866
           2860 JUMP_ABSOLUTE          676
        >> 2863 JUMP_ABSOLUTE         2613
        >> 2866 JUMP_FORWARD           202 (to 3071)
        >> 2873 LOAD_CONST             196 (3774890599L)
           2876 LOAD_FAST                7 (DIVIDER)
           2879 COMPARE_OP               2 (==)
           2882 POP_JUMP_IF_TRUE      2903
           2885 LOAD_CONST             200 (4079545150L)
           2888 LOAD_FAST                7 (DIVIDER)
           2891 COMPARE_OP               2 (==)
           2894 POP_JUMP_IF_TRUE      2906
           2897 LOAD_CONST             207 (2327741117L)
           2900 JUMP_ABSOLUTE          287
        >> 2903 JUMP_ABSOLUTE         2361
        >> 2906 JUMP_ABSOLUTE         2198
        >> 2915 JUMP_ABSOLUTE         2945
        >> 2918 LOAD_CONST             185 (1958480987)
           2921 STORE_FAST               7 (DIVIDER)
           2924 JUMP_ABSOLUTE         2948
        >> 2927 LOAD_CONST             186 (2504276117L)
           2930 STORE_FAST               7 (DIVIDER)
           2933 JUMP_ABSOLUTE         2951
        >> 2936 LOAD_CONST             187 (86491762)
           2939 STORE_FAST               7 (DIVIDER)
           2942 JUMP_ABSOLUTE          379
        >> 2945 JUMP_ABSOLUTE         1122
        >> 2948 JUMP_ABSOLUTE         1122
        >> 2951 JUMP_ABSOLUTE         1122
        >> 2959 STORE_FAST               7 (DIVIDER)
           2962 JUMP_ABSOLUTE         2992
        >> 2965 LOAD_CONST             164 (2524697422L)
           2968 STORE_FAST               7 (DIVIDER)
           2971 JUMP_ABSOLUTE         2995
        >> 2974 LOAD_CONST             165 (4248338727L)
           2977 STORE_FAST               7 (DIVIDER)
           2980 JUMP_ABSOLUTE         2998
        >> 2983 LOAD_CONST             166 (85215907)
           2986 STORE_FAST               7 (DIVIDER)
           2989 JUMP_ABSOLUTE          880
        >> 2992 JUMP_ABSOLUTE         1122
        >> 2995 JUMP_ABSOLUTE         1122
        >> 2998 JUMP_ABSOLUTE         1122
        >> 3008 LOAD_CONST             157 (2548479002L)
           3011 STORE_FAST               7 (DIVIDER)
           3014 JUMP_ABSOLUTE         3038
        >> 3017 LOAD_CONST             158 (1647233480)
           3020 STORE_FAST               7 (DIVIDER)
           3023 JUMP_ABSOLUTE         3041
        >> 3026 LOAD_CONST             159 (2770185354L)
           3029 STORE_FAST               7 (DIVIDER)
           3032 JUMP_ABSOLUTE         3044
        >> 3038 JUMP_ABSOLUTE         1122
        >> 3041 JUMP_ABSOLUTE         1122
        >> 3044 JUMP_ABSOLUTE         1122
        >> 3052 LOAD_FAST                5 (i)
           3055 BINARY_SUBSCR
           3056 JUMP_ABSOLUTE         3083
        >> 3059 LOAD_CONST             116 (973988289)
           3062 LOAD_CONST             117 (-867920193)
           3065 LOAD_CONST             118 (-132362266)
           3068 JUMP_ABSOLUTE         3086
        >> 3071 LOAD_CONST             113 (-783373820)
           3074 LOAD_CONST             114 (892608580)
           3077 BUILD_LIST              38
           3080 JUMP_ABSOLUTE         2387
        >> 3083 JUMP_ABSOLUTE          116
        >> 3086 JUMP_ABSOLUTE          224
        >> 3096 JUMP_ABSOLUTE         3123
        >> 3099 LOAD_CONST             200 (4079545150L)
           3102 STORE_FAST               7 (DIVIDER)
           3105 JUMP_ABSOLUTE         3126
        >> 3108 LOAD_CONST             201 (155584763)
           3111 STORE_FAST               7 (DIVIDER)
           3114 JUMP_ABSOLUTE         3129
        >> 3117 LOAD_CONST             202 (1156782974)
           3120 JUMP_ABSOLUTE            7
        >> 3123 JUMP_ABSOLUTE         1122
        >> 3126 JUMP_ABSOLUTE         1122
        >> 3129 JUMP_ABSOLUTE         1122
        >> 3141 LOAD_CONST             160 (3540564641L)
           3144 STORE_FAST               7 (DIVIDER)
           3147 JUMP_ABSOLUTE         3174
        >> 3150 LOAD_CONST             161 (2816035871L)
           3153 STORE_FAST               7 (DIVIDER)
           3156 JUMP_ABSOLUTE         3177
        >> 3159 LOAD_CONST             162 (50360135)
           3162 STORE_FAST               7 (DIVIDER)
           3165 JUMP_ABSOLUTE         3180
        >> 3168 LOAD_CONST             163 (982086896)
           3171 JUMP_ABSOLUTE         2959
        >> 3174 JUMP_ABSOLUTE         1122
        >> 3177 JUMP_ABSOLUTE         1122
        >> 3180 JUMP_ABSOLUTE         1122
patch code:
717b09090909097d070071280064cb007d0700712b0064cc007d0700712e0064cd007d07006e84086e37046e34046e31040909090909642c00715100646700646800646900646a00646b007154000909096e17006e27020909090909090909717a0064ad007d0700717d0064ae007d070071800064af006e5a076ee5036ee2036edf03090909090964060064070064080064090071a1007c0500197c00006e4b0b6ec20a09090909646c00646d00646e00646f0064700071c300644b00644c006e62046eca08090909090909090964bf007d070071ec0064c0007d070071ef0064c1007d070071f2000909096e73036e70036e6d03090909090964be007c07006b0200731501649e007c07006b02007318016eec006e16046e4204090909097c07006b020073400164b1007c07006b020073430164a4007c07006b02006eec026eb00a6e25090909090909090909647f00648000648100648200648300716f016484006485006486007172010909096e68066ee20a090909090909719c0164bc007d0700719f0164bd007d070071a20164be007d070071a5010909096ec3026ec0026ebd026eba020909090909090909097c07006b020073cf0164ca007c07006b020073d20164d0007c07006e16096eb5066ea80809090909090964240071f601644d00644e00644f0064500064510071f9010909096eea0571ce00090909090964ba007c07006b0200731c0264ce007c07006b0200731f026e3204713c006e9702090909090964c2007d070071450264c3007d070071480264c4007d0700714b020909096e1a026e17026e14020909090909090964af007c07006b0200737002649b007c07006b02007373026ec9086ecb036eb400090909090909090964c5007d070071990264c6007d0700719c0264c7007d07006e7f096ec6016ec301090909090964b8007c07006b020073bf0264cb007c07006b020073c2026ebc026eec006e5900090909090964aa007d070071e50264ab007d070071e80264ac007d0700715f006e7a016e7701090909090909730c0364c3007c07006b0200730f0364c5007c07006b02006eee016e18066e5301090909090909090909713603643e00643f00644000713903191783010001713c030909096e3f086e8408711f00090909090909090964cd007c07006b020073620364a0007c07006b02007365036e6e006ee0066e0404090909090909090971910364a7007d070071940364a8007d070071970364a9007d0700719a030909096ece006ecb006ec8006ec5000909090909648c00648d00648e0071c0037d0400780f0071c6030909097c01006e440471ca020909096e90000909090909090964c6007c07006b020073eb0364a5007c07006b020073ee0371fa006ee5066e3e02090909090974030083000001710f047400006473008301007112040909097162006ebd0709090909090909090964d200530909090909090909090973470464a7007c07006b0200734a0464aa007c07006b020071f1026e54067197000909090909097d070071710464d1007d07007174046e12006456006457006458006e08027162047162046e3c02090909097c07006b0200739f04649d007c07006b020073a20464b6007c07006b02006e2d026ebc026e69030909090909640d00640e00640f0064100071c40419147c020071c70409090971d302717303090909090909090964020064030064040064050071f304645d00645e00645f00646000646100711b036ebc020909090973180564a8007c07006b0200731b0564c2007c07006b0200731e056efc0571a8006eed0471e101090909096726007d02007141056e1300090909714a05640000536448006e7a05712702713405090909716200090909090909177c03007c0500716f05645900645a00645b00645c007172050909096e150471d70009090909090964c1007c07006b020073990564b3007c07006b0200739c0564c700717e046e91016edd00090909097c07006b020073c105649f007c07006b020073c40564d1007c07006e0f006e75016ef2030909090909090909096b020073ee0564ac007c07006b020073f10564a3007c07006b02006e0c007100046e0c0309090909090973180664b5007c07006b0200731b0664ad007c07006b0200731e067155026e1e046e890071370509090909090909097d0600714206641600641700641800641900714506147153056e50056ecc0009090909090964bf007c07006b0200736c0664b4007c07006b0200736f0664cc0071b1016ea3026e190109090909090909719706643600643700643800643900643a00719a066462006463006e16036e2f056e6e000909090964550071c206641a00641b00641c00641d0071c50664bc007c07006b02006e19037130027116000909090973ed0664b0007c07006b020073f00664a1007c07006b020073f30664c0006ee9016e6c02716001714e01090909090909090909711a0764b3007d0700711d0764b4007d070071200764b5006e890071620471620471620409090909090909714807647700647800647900714b07640a00640b00640c00714e070909096e5e0071dc026e7001090909090909096415007172077c050019147c00007c050071750764010071d2046e29046e370109090909643200643300643400643500719707643b00643c00643d006e9b027102070909090909090909097d070071c40764b6007d070071c70764b7007d070071ca0764b8007d07006e9f03716204716204716204090909090909097d070071f50764b0007d070071f80764b1007d070071fb0764b2007d070071ff067162047162047162040909090909097c0500197c00007120086441006442006443006444007123080909097190026e3a04090909096b0200734b08649a007c07006b0200734e0864ab007c07006b020073510871470371ba0371f6036ec3010909090964a6007c07006b020073730864a9007c07006b0200737608711e0471ba006eed0009090909097c04006a0100719f08641e00641f0064200064210071a208648a00648b0071a2036e82036e88030909090909090971c70864ce007d070071ca0864cf007d070071cd0864d0007153047162047162047162040909090909097c07006b020073f40864bb007c07006b020073f70864c9007c0700712a0871e104718e06090909090909647a00647b00647c00647d00647e00711e0964520064530064540071a1066e2d03090909090909648f00649000649100649200649300714809642800642900642a00642b00713600717c0309090909090909097d0300670000716c0974020083000001716f09643100717c0771bb077190010909090909090909096e1e00649a007d0700719f09649b007d070071a209649c007d070071a5090909096ea602716204716204716204090909090964640064650064660071cc094471cf096497006498006499006726007129066ea001711f0009090909090909090973fc0964ae007c07006b020073ff0964b2007c07006b020073020a64b90071a305713b056ec20071bd0909090909090964940064950064960071260a64110064120064130064140071580771ec0709090909090909090971510a5771540a64450064460064470071570a5d1200715d0a71600a090909710d0071b808717e01714b0a71870271870109090909090909096425006426006726007d010064270071860a64220064230071db0171390209090909090909090964870064880064890071b00a7c04007c06006b020072b30a712a070909096e6801717e090909090909644900644a0071d90a642d00642e00642f0064300071dc0a7d0500717e086ecb007185030909090909096b020073060b64a2007c07006b020073090b64b7007c07006b0200730c0b71580871aa0471920a718800090909090964bd007c07006b0200732f0b649c007c07006b020073320b71a40271350a6eca000909090964c4007c07006b020073570b64c8007c07006b0200735a0b64cf00711f0171390971960809090909090971810b64b9007d070071840b64ba007d070071870b64bb007d0700717b0171620471620471620409090909097d070071b00b64a4007d070071b30b64a5007d070071b60b64a6007d070071700371620471620471620409090909090909649d007d070071de0b649e007d070071e10b649f007d070071e40b09090971620471620471620409090909097c050019710b0c647400647500647600710e0c64710064720067260071530971740071e0000909090909090971330c64c8007d070071360c64c9007d070071390c64ca0071070071620471620471620409090909090909090964a0007d070071660c64a1007d070071690c64a2007d0700716c0c64a300718f0b716204716204716204090909090909090909
         consts
            None
            13433
            4747
            17752
            33060
            31051
            48809
            29988
            6421
            20021
            38888
            24844
            20706
            11713
            34938
            12865
            6085
            37391
            32840
            31964
            27194
            8701
            48142
            27066
            28626
            37431
            39142
            46795
            21771
            44280
            40628
            35013
            18583
            5418
            4347
            43929
            9934
            46892
            19868
            13711
            7074
            79833
            42654
            23241
            41412
            61795
            6373
            19304
            1363
            1682
            66279
            76134
            60748
            10355
            63484
            30491
            34005
            51393
            38029
            7241
            4998
            18562
            16935
            66677
            51321
            13771
            49108
            52166
            8851
            16900
            31682
            16684
            12046
            16764
            64315
            76742
            14022
            832832835
            -924053193
            -307134635
            -527578092
            998625960
            -715102211
            3572182
            -963194083
            -475718185
            -361574731
            -678171563
            107566155
            608670527
            254218946
            -81206308
            -284228457
            373369420
            659110852
            165298084
            -389004184
            893094421
            -868933443
            44838205
            -98551062
            -59800920
            -575871298
            -748337118
            696390966
            427210246
            -266607884
            -555200820
            -594235119
            -233255094
            229291711
            711922719
            14476464
            -783373820
            892608580
            38
            973988289
            -867920193
            -132362266
            -172451190
            1471255182
            -242282199
            321870424
            -897049789
            -428663209
            -256350703
            -613466537
            321254055
            641759727
            344601346
            -40281788
            -217030057
            476060216
            767746297
            503093626
            -102198850
            984358207
            -415480559
            322813233
            178032672
            48876640
            -467362638
            -260077296
            923436845
            536082660
            -138702820
            -210365307
            -397666023
            -215329942
            274852104
            818217684
            41479433
            -632022956
            1204798830
            2301852651L
            285725810
            884634542
            2548479002L
            1647233480
            2770185354L
            3540564641L
            2816035871L
            50360135
            982086896
            2524697422L
            4248338727L
            85215907
            3212239732L
            2341687652L
            3290924521L
            3704389375L
            4286464245L
            2021752943
            1317946295
            3622895996L
            1393258618
            696454276
            2553032551L
            1483355210
            1493888620
            3108974362L
            972353852
            3287039386L
            2759880987L
            494892034
            1958480987
            2504276117L
            86491762
            3527259578L
            2624506001L
            3793853702L
            971694574
            1002508958
            3919931372L
            1956782531
            2118042320
            3774890599L
            3804243641L
            3095970229L
            323719881
            4079545150L
            155584763
            1156782974
            2617360123L
            1889634705
            3888638452L
            829701355
            2327741117L
            124773723
            3520207424L
            None
         names ('range', 'append', 'p_s', 'p_f')
         varnames ('data', 'a', 'b', 'c', 'd', 'i', 'e', 'DIVIDER')
         freevars ()
         cellvars ()
         filename 'enc.py'
         name 'count'
         firstlineno 20
         lnotab 0002780178017802060213013d0278020c010a02
      102
      108
      97
      103
      58
      38
      4130330538L
      1627830889
      3168701571L
      4084147187L
      3521152606L
      651787064
      1860581437
      2730391645L
      2694209818L
      3715947653L
      3816944324L
      394367122
      None
   names ('sys', 'str2hex', 'hex2str', 'p_s', 'p_f', 'count', 'stdout', 'write', 'stdin', 'read', 'flag')
   varnames ('DIVIDER',)
   freevars ()
   cellvars ()
   filename 'enc.py'
   name '<module>'
   firstlineno 1
   lnotab 0c020906090509030903091225021202
```

之后在网上找到exp

```assembly
from math import sqrt


def solve(a,b,c):
    delta = b*b-4*a*c
    assert delta >= 0
    x1 = (-b + sqrt(delta))/(2*a)
    x2 = (-b - sqrt(delta))/(2*a)
    x1 = int(round(x1))
    x2 = int(round(x2))
    if x1>=0x20 and x1 < 0x7f:
        return x1
    else:
        return x2


a = [13433, 4747, 17752, 33060, 31051, 48809, 29988, 6421, 20021, 38888, 24844, 20706, 11713, 34938, 12865, 6085, 37391, 32840, 31964, 27194, 8701, 48142, 27066, 28626, 37431, 39142, 46795, 21771, 44280, 40628, 35013, 18583, 5418, 4347, 43929, 9934, 46892, 19868]
b = [13711, 7074, 79833, 42654, 23241, 41412, 61795, 6373, 19304, 1363, 1682, 66279, 76134, 60748, 10355, 63484, 30491, 34005, 51393, 38029, 7241, 4998, 18562, 16935, 66677, 51321, 13771, 49108, 52166, 8851, 16900, 31682, 16684, 12046, 16764, 64315, 76742, 14022]
c = [832832835, -924053193, -307134635, -527578092, 998625960, -715102211, 3572182, -963194083, -475718185, -361574731, -678171563, 107566155, 608670527, 254218946, -81206308, -284228457, 373369420, 659110852, 165298084, -389004184, 893094421, -868933443, 44838205, -98551062, -59800920, -575871298, -748337118, 696390966, 427210246, -266607884, -555200820, -594235119, -233255094, 229291711, 711922719, 14476464, -783373820, 892608580]
d = [973988289, -867920193, -132362266, -172451190, 1471255182, -242282199, 321870424, -897049789, -428663209, -256350703, -613466537, 321254055, 641759727, 344601346, -40281788, -217030057, 476060216, 767746297, 503093626, -102198850, 984358207, -415480559, 322813233, 178032672, 48876640, -467362638, -260077296, 923436845, 536082660, -138702820, -210365307, -397666023, -215329942, 274852104, 818217684, 41479433, -632022956, 1204798830]

flag = ""
for i in range(38):
    flag += chr(solve(a[i],b[i],c[i]-d[i]))
print(flag)
```

参考：

https://blog.fxti.xyz/2019/08/30/Python-Bytecode-CFF-2/