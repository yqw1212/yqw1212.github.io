---
layout: post
title:  vmre
date:   2022-09-23 00:08:01 +0300
image:  2022-09-23-cat.jpg
tags:   [ctf,reverse,vm]
---

ida打开文件

```assembly
__int64 __fastcall main(__int64 a1, char **a2, char **a3)
{
  unsigned __int8 *v3; // rax
  _QWORD *v4; // rax
  _QWORD *v5; // rax
  _QWORD *v6; // rax
  __int64 v7; // rdx
  __int64 v8; // rdx
  _QWORD *v9; // rax
  __int64 result; // rax
  _QWORD *v11; // [rsp+8h] [rbp-28h]
  char *v12; // [rsp+10h] [rbp-20h]
  char *v13; // [rsp+18h] [rbp-18h]
  unsigned __int64 v14; // [rsp+20h] [rbp-10h]
  unsigned __int64 v15; // [rsp+20h] [rbp-10h]
  unsigned __int64 v16; // [rsp+20h] [rbp-10h]
  unsigned __int64 v17; // [rsp+20h] [rbp-10h]
  unsigned __int64 v18; // [rsp+20h] [rbp-10h]
  unsigned __int64 v19; // [rsp+20h] [rbp-10h]
  unsigned __int64 v20; // [rsp+20h] [rbp-10h]
  __int64 v21; // [rsp+20h] [rbp-10h]
  __int64 v22; // [rsp+20h] [rbp-10h]
  __int64 v23; // [rsp+20h] [rbp-10h]
  __int64 v24; // [rsp+20h] [rbp-10h]
  __int64 v25; // [rsp+20h] [rbp-10h]
  __int64 v26; // [rsp+20h] [rbp-10h]
  __int64 v27; // [rsp+20h] [rbp-10h]
  __int64 v28; // [rsp+20h] [rbp-10h]
  __int64 v29; // [rsp+20h] [rbp-10h]
  __int64 v30; // [rsp+20h] [rbp-10h]
  __int64 v31; // [rsp+20h] [rbp-10h]
  __int64 v32; // [rsp+20h] [rbp-10h]
  __int64 v33; // [rsp+20h] [rbp-10h]
  __int64 v34; // [rsp+20h] [rbp-10h]
  __int64 v35; // [rsp+20h] [rbp-10h]
  __int64 v36; // [rsp+20h] [rbp-10h]
  __int64 v37; // [rsp+20h] [rbp-10h]

  sub_563ECEA009C7();
  v11 = calloc(0x30uLL, 1uLL);
  v12 = (char *)calloc(0x1000uLL, 1uLL);
  v13 = (char *)calloc(0x2000uLL, 1uLL);
  v11[3] = v13 + 0x1E00;
  v11[5] = &unk_563ECEC02020;
  if ( !v12 || !v13 )
    sub_563ECEA00999("out of memory");
  while ( 1 )
  {
    v3 = (unsigned __int8 *)v11[5];
    v11[5] = v3 + 1;
    switch ( *v3 )
    {
      case 0x10u:
        *v11 = v11[3];
        break;
      case 0x11u:
        *v11 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        break;
      case 0x12u:
        v11[1] = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        break;
      case 0x13u:
        v11[2] = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        break;
      case 0x20u:
        v14 = *(_QWORD *)v11[5];
        if ( v14 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        *v11 = &v12[v14];
        v11[5] += 8LL;
        break;
      case 0x21u:
        v15 = *(_QWORD *)v11[5];
        if ( v15 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        *v11 = *(_QWORD *)&v12[v15];
        v11[5] += 8LL;
        break;
      case 0x22u:
        v16 = *(_QWORD *)v11[5];
        if ( v16 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        v11[1] = *(_QWORD *)&v12[v16];
        v11[5] += 8LL;
        break;
      case 0x23u:
        v17 = *(_QWORD *)v11[5];
        if ( v17 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        v11[2] = *(_QWORD *)&v12[v17];
        v11[5] += 8LL;
        break;
      case 0x33u:
        v18 = *(_QWORD *)v11[5];
        if ( v18 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        *(_QWORD *)&v12[v18] = *v11;
        v11[5] += 8LL;
        break;
      case 0x34u:
        v19 = *(_QWORD *)v11[5];
        if ( v19 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        *(_QWORD *)&v12[v19] = v11[1];
        v11[5] += 8LL;
        break;
      case 0x35u:
        v20 = *(_QWORD *)v11[5];
        if ( v20 > 0xFFF )
          sub_563ECEA00999("buffer overflow detected");
        *(_QWORD *)&v12[v20] = v11[2];
        v11[5] += 8LL;
        break;
      case 0x44u:
        if ( v11[3] - (_QWORD)v13 <= 8uLL )
          sub_563ECEA00999("stack underflow detected");
        v11[3] -= 8LL;
        *(_QWORD *)v11[3] = *v11;
        break;
      case 0x45u:
        if ( v11[3] - (_QWORD)v13 <= 8uLL )
          sub_563ECEA00999("stack underflow detected");
        v11[3] -= 8LL;
        *(_QWORD *)v11[3] = v11[1];
        break;
      case 0x46u:
        if ( v11[3] - (_QWORD)v13 <= 8uLL )
          sub_563ECEA00999("stack underflow detected");
        v11[3] -= 8LL;
        *(_QWORD *)v11[3] = v11[2];
        break;
      case 0x51u:
        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
          sub_563ECEA00999("stack overflow detected");
        v4 = (_QWORD *)v11[3];
        v11[3] = v4 + 1;
        *v11 = *v4;
        break;
      case 0x52u:
        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
          sub_563ECEA00999("stack overflow detected");
        v5 = (_QWORD *)v11[3];
        v11[3] = v5 + 1;
        v11[1] = *v5;
        break;
      case 0x53u:
        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
          sub_563ECEA00999("stack overflow detected");
        v6 = (_QWORD *)v11[3];
        v11[3] = v6 + 1;
        v11[2] = *v6;
        break;
      case 0x61u:
        v21 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        *v11 += v21;
        break;
      case 0x62u:
        v22 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[1] += v22;
        break;
      case 0x63u:
        v23 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[2] += v23;
        break;
      case 0x64u:
        v26 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        *v11 -= v26;
        break;
      case 0x65u:
        v27 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[1] -= v27;
        break;
      case 0x66u:
        v28 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[2] -= v28;
        break;
      case 0x67u:
        v29 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        *v11 *= v29;
        break;
      case 0x68u:
        v30 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[1] *= v30;
        break;
      case 0x69u:
        v31 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[2] *= v31;
        break;
      case 0x6Au:
        v32 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        *v11 ^= v32;
        break;
      case 0x6Bu:
        v33 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[1] ^= v33;
        break;
      case 0x6Cu:
        v34 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[2] ^= v34;
        break;
      case 0x6Du:
        *v11 = 0LL;
        break;
      case 0x6Eu:
        v11[1] = 0LL;
        break;
      case 0x6Fu:
        v11[2] = 0LL;
        break;
      case 0x7Eu:
        v36 = *(__int16 *)v11[5];
        v11[5] += 2LL;
        v11[5] += v36;
        break;
      case 0x7Fu:
        v11[5] = *v11;
        break;
      case 0x80u:
        v7 = v11[5];
        v11[3] += 8LL;
        *(_QWORD *)v11[3] = v7;
        v11[5] = *v11;
        break;
      case 0x81u:
        v24 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[3] += v24 & 0xFFFFFFFFFFFFFFF8LL;
        break;
      case 0x82u:
        v25 = *(_QWORD *)v11[5];
        v11[5] += 8LL;
        v11[3] -= v25 & 0xFFFFFFFFFFFFFFF8LL;
        break;
      case 0x88u:
        v37 = *(__int16 *)v11[5];
        v11[5] += 2LL;
        v8 = v11[5];
        v11[3] += 8LL;
        *(_QWORD *)v11[3] = v8;
        v11[5] += v37;
        break;
      case 0x8Fu:
        v35 = *(unsigned __int8 *)v11[5]++;
        ((void (__fastcall *)(_QWORD, _QWORD, _QWORD))*(&off_563ECEC02940 + v35))(*v11, v11[1], v11[2]);
        break;
      case 0x90u:
        v9 = (_QWORD *)v11[3];
        v11[3] = v9 + 0xFFFFFFFF;
        v11[5] = *v9;
        break;
      case 0xFFu:
        return 0LL;
      default:
        printf(":%d\n", *v3);
        sub_563ECEA00999("Illegal Instrumention");
        return result;
    }
  }
}
```

unk_563ECEC02020处是字节码

按照以往分方法写脚本输出虚拟机的逻辑

```assembly
#include <stdio.h>
#include <math.h>

int main(){
    char v12[0x1000] = {0};
    int stack[0x2000] = {0};
    int opcode[2189] = {0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x33, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x33, 0x08, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F, 0x20, 0x20,
                        0x5F, 0x5F, 0x5F, 0x20, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x5F, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x5F,
                        0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x33, 0x28,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F,
                        0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F,
                        0x5F, 0x20, 0x20, 0x20, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20,
                        0x20, 0x20, 0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20,
                        0x33, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x0A, 0x00, 0x00, 0x33, 0x50,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x20, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x56, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C,
                        0x20, 0x7C, 0x20, 0x20, 0x20, 0x2F, 0x20, 0x33, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x2F, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x2F, 0x20, 0x33, 0x08, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x7C, 0x2F, 0x20,
                        0x20, 0x20, 0x7C, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C,
                        0x20, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x33,
                        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F,
                        0x20, 0x20, 0x20, 0x20, 0x2F, 0x20, 0x20, 0x33, 0x28, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x20, 0x20,
                        0x20, 0x7C, 0x5F, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x5F, 0x7C, 0x20, 0x7C,
                        0x20, 0x5F, 0x5F, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x5F, 0x5F, 0x7C, 0x20, 0x2F, 0x20, 0x20,
                        0x5F, 0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x5F, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x20, 0x20, 0x33,
                        0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x5F, 0x7C, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x20, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x54, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x20,
                        0x7C, 0x20, 0x20, 0x2F, 0x20, 0x2F, 0x33, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x2F, 0x20, 0x2F, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20, 0x20, 0x2F, 0x7C,
                        0x20, 0x7C, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20,
                        0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x33, 0x20,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x5F,
                        0x7C, 0x20, 0x7C, 0x20, 0x20, 0x7C, 0x33, 0x28, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C,
                        0x20, 0x7C, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20,
                        0x20, 0x7C, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x7C, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x7C,
                        0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x48,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C,
                        0x20, 0x7C, 0x0A, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x55, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x20, 0x7C,
                        0x20, 0x2F, 0x20, 0x2F, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x2F,
                        0x20, 0x2F, 0x20, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x7C, 0x5F, 0x5F, 0x2F, 0x20, 0x7C, 0x20,
                        0x7C, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x33,
                        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x5F, 0x5F, 0x5F, 0x2F, 0x20, 0x7C, 0x20, 0x33, 0x20, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x5F, 0x20,
                        0x20, 0x2F, 0x20, 0x20, 0x7C, 0x33, 0x28, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C, 0x20,
                        0x7C, 0x20, 0x20, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20,
                        0x7C, 0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x5F, 0x5F, 0x7C, 0x20, 0x20, 0x7C, 0x33,
                        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x48, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x20,
                        0x7C, 0x0A, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x13, 0x55, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x20, 0x7C, 0x2F,
                        0x20, 0x2F, 0x20, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x2F, 0x20, 0x2F,
                        0x20, 0x20, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C,
                        0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x33, 0x18,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x33, 0x20, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20, 0x20,
                        0x20, 0x7C, 0x20, 0x7C, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x5F, 0x7C, 0x20, 0x7C, 0x20, 0x20,
                        0x20, 0x7C, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C,
                        0x33, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x33, 0x40,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x5F,
                        0x5F, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x33, 0x48, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x7C, 0x0A, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x13, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x8F, 0x01, 0x11, 0x7C, 0x5F, 0x5F, 0x5F, 0x2F,
                        0x20, 0x20, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x20, 0x20, 0x2F, 0x5F, 0x2F, 0x20, 0x20,
                        0x20, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x7C, 0x33,
                        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x33, 0x18, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x7C, 0x5F, 0x33, 0x20, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x7C, 0x20, 0x20, 0x5F, 0x20,
                        0x5F, 0x5F, 0x5F, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x5F, 0x5F, 0x2F, 0x20, 0x20, 0x20, 0x7C,
                        0x5F, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x7C, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x5F, 0x5F, 0x33,
                        0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F,
                        0x5F, 0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x5F, 0x33, 0x40, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5F, 0x7C, 0x20,
                        0x20, 0x20, 0x7C, 0x5F, 0x7C, 0x33, 0x48, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x33, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x13, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x8F, 0x01, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x10,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x18, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x8F, 0x01, 0x11, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33,
                        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x77,
                        0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x20, 0x33, 0x10, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x18, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x20, 0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,
                        0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F,
                        0x01, 0x11, 0x23, 0x20, 0x20, 0x20, 0x74, 0x68, 0x69, 0x73,
                        0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
                        0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6D, 0x65, 0x33, 0x08,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x73,
                        0x61, 0x67, 0x65, 0x20, 0x66, 0x72, 0x33, 0x10, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x6F, 0x6D, 0x20, 0x76,
                        0x6D, 0x20, 0x6D, 0x61, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x11, 0x63, 0x68, 0x69, 0x6E, 0x65, 0x20,
                        0x20, 0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x33, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52,
                        0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
                        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01,
                        0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x08, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x23, 0x23, 0x33, 0x10, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x23, 0x23, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x11, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
                        0x23, 0x33, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x11, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
                        0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x52, 0x11,
                        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x29,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x11,
                        0x23, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x20, 0x79, 0x33, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x6F, 0x75,
                        0x72, 0x20, 0x66, 0x6C, 0x61, 0x67, 0x33, 0x08, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x3A, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x44, 0x52, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x13, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x8F, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x44, 0x52, 0x11, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x10, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x8F, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x6A, 0xED, 0xBE, 0xAD, 0xFB, 0xEE,
                        0xDB, 0xBA, 0xAA, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x21, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x6A, 0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12,
                        0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21,
                        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x12,
                        0x66, 0x66, 0x66, 0x33, 0x22, 0x11, 0x11, 0x33, 0x10, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x18, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0xDE, 0xED, 0xEF, 0xCD,
                        0xAB, 0xEF, 0xAD, 0xAD, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x12, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x8F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    int v11_0[8] = {0};
    int v11_1[8] = {0};
    int v11_2[8] = {0};
    int v11_3[8] = {0};
    int v11_5 = 0;
    long long v11[6] = {0};
    v11[3] = 0x1E00;
    while ( 1 )
    {
        int v3 = opcode[v11_5];
        v11_5 ++;
        printf("case %x and index=%d\n", v3, v11_5);
        switch ( v3 )
        {
            case 0x10u:
                for(int i=0; i<8; i++){
                    v11_0[i] = v11_3[i];
                }
                v11[0] = v11[3];
                printf("v11 = v11[3];\n");
                break;
            case 0x11u:
                v11[0] = 0;
                for(int i=0; i<8; i++){
//                    printf("%x,", opcode[v11_5+i]);
                    v11[0] += opcode[v11_5+i] * pow(16, 2*i);
                }
                printf("v11[0] = %lld;\n", v11[0]);
                v11_5 += 8;
                break;
            case 0x12u:
                v11[1] = 0;
                for(int i=0; i<8; i++){
                    v11_1[i] = opcode[v11_5+i];
                    v11[1] += opcode[v11_5+i] * pow(16, 2*i);
                }
                printf("v11[1] = *(_QWORD *)v11[5];\n");
                v11_5 += 8;
                break;
            case 0x13u:
                v11[2] = 0;
                for(int i=0; i<8; i++){
                    v11_2[i] = opcode[v11_5+i];
                    v11[2] += opcode[v11_5+i] * pow(16, 2*i);
                }
                printf("v11[2] = %lld;\n", v11[2]);
                v11_5 += 8;
                break;
            case 0x20u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
//                if ( v14 > 0xFFF )
//              sub_999("buffer overflow detected");
                v11[0] = index; // 地址
                printf("v11[0] = &v12[%d];\n", index);
                v11_5 += 8;
                break;
            }
            case 0x21u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v15 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v11[0] = v12[index];
                printf("v11[0] = v12[%d];\n", index);
                v11_5 += 8;
                break;
            }
            case 0x22u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v16 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v11[1] = v12[index];
                printf("v11[1] = *(_QWORD *)&v12[v16];\n");
                v11_5 += 8;
                break;
            }
            case 0x23u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v17 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v11[2] = v12[index];
                printf("v11[2] = *(_QWORD *)&v12[v17];\n");
                v11_5 += 8;
                break;
            }
            case 0x33u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v18 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v12[index] = v11[0];
                printf("v12[%d] = %lld;\n", index, v11[0]);
                v11_5 += 8;
                break;
            }
            case 0x34u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v19 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v12[index] = v11[1];
                printf("v12[index] = v11[1];\n");
                v11_5 += 8;
                break;
            }
            case 0x35u: {
                int index = opcode[v11_5] + opcode[v11_5 + 1] * 16 * 16;
                //        if ( v20 > 0xFFF )
                //          sub_999("buffer overflow detected");
                v12[index] = v11[2];
                printf("v12[index] = v11[2];\n");
                v11_5 += 8;
                break;
            }
            case 0x44u:
                //        if ( v11[3] - (_QWORD)v13 <= 8uLL )
                //          sub_999("stack underflow detected");
                v11[3] -= 8;
                stack[v11[3]] = v11[0];
                printf("v11[3] -= 8;\n");
                printf("stack[v11[3]] = %d;\n", v11[0]);
                break;
            case 0x45u:
                //        if ( v11[3] - (_QWORD)v13 <= 8uLL )
                //          sub_999("stack underflow detected");
                v11[3] -= 8LL;
                v11[3] = v11[1];
                printf("v11[3] -= 8;\n");
                printf("v11[3] = v11[1];\n");
                break;
            case 0x46u:
                //        if ( v11[3] - (_QWORD)v13 <= 8uLL )
                //          sub_999("stack underflow detected");
                v11[3] -= 8LL;
                v11[3] = v11[2];
                printf("v11[3] -= 8;\n");
                printf("v11[3] = v11[2];\n");
                break;
            case 0x51u: {// 待定
                //        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
                //          sub_999("stack overflow detected");
                long long v4 = v11[3];
                v11[3] = v4 + 1;
                v11[0] = opcode[v4];
                printf("v4 = (_QWORD *)v11[3];\n");
                printf("v11[3] = v4 + 1;\n");
                printf("*v11 = *v4;\n");
                break;
            }
            case 0x52u: {
                //        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
                //          sub_999("stack overflow detected");
                long long v5 = v11[3];
                v11[3] = v5 + 1;
                v11[1] = stack[v5];
                printf("v5 = v11[3];\n");
                printf("v11[3] = v5 + 1;\n");
                printf("v11[1] = %d;\n", v11[1]);
                break;
            }
            case 0x53u: {
                //        if ( v11[3] - (_QWORD)v13 > 0x1DFFuLL )
                //          sub_999("stack overflow detected");
                long long v6 = v11[3];
                v11[3] = v6 + 1;
                v11[2] = opcode[v6];
                printf("v6 = (_QWORD *)v11[3];\n");
                printf("v11[3] = v6 + 1;\n");
                printf("v11[2] = *v6;\n");
                break;
            }
            case 0x61u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[0] += tmp;
                printf("v21 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 += v21;\n");
                break;
            }
            case 0x62u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] += tmp;

                printf("v22 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] += v22;\n");
                break;
            }
            case 0x63u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] += tmp;

                printf("v23 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] += v23;\n");
                break;
            }
            case 0x64u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[0] -= tmp;

                printf("v26 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 -= v26;\n");
                break;
            }
            case 0x65u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] -= tmp;

                printf("v27 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] -= v27;\n");
                break;
            }
            case 0x66u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] -= tmp;

                printf("v28 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] -= v28;\n");
                break;
            }
            case 0x67u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[0] *= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 *= v29;\n");
                break;
            }
            case 0x68u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] *= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] *= v29;\n");
                break;
            }
            case 0x69u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] *= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] *= v29;\n");
                break;
            }
            case 0x6Au: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] * pow(16, 2*i);
                }
                v11_5 += 8;
                v11[0] ^= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("*v11 ^= %lld;\n", tmp);
                break;
            }
            case 0x6Bu: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[1] ^= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[1] ^= v29;\n");
                break;
            }
            case 0x6Cu: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[2] ^= tmp;

                printf("v29 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[2] ^= v29;\n");
                break;
            }
            case 0x6Du:
                v11[0] = 0;
                printf("v11[0] = 0;\n");
                break;
            case 0x6Eu:
                v11[1] = 0;
                printf("v11[1] = 0;\n");
                break;
            case 0x6Fu:
                v11[2] = 0;
                printf("v11[2] = 0;\n");
                break;
            case 0x7Eu: {
                int v36 = opcode[v11_5] + opcode[v11_5] * 16 * 16;
                v11_5 += 2;
                v11_5 += v36;
                printf("v36 = *(__int16 *)v11[5];\n");
                printf("v11[5] += 2LL;\n");
                printf("v11[5] += v36;\n");
                break;
            }
            case 0x7Fu:
                v11_5 = v11[0];
                printf("v11[5] = *v11;\n");
                break;
            case 0x80u: {
                int v7 = v11_5;
                v11[3] += 8LL;
                v11[3] = v7;
                v11_5 = v11[0];

                printf("v7 = v11[5];\n");
                printf("v11[3] += 8LL;\n");
                printf("*(_QWORD *)v11[3] = v7;\n");
                printf("v11[5] = *v11;\n");
                break;
            }
            case 0x81u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[3] += tmp & 0xFFFFFFFFFFFFFFF8LL;
                printf("v24 = *(_QWORD *)v11[5];\n");
                printf("v11[5] += 8LL;\n");
                printf("v11[3] += v24 & 0xFFFFFFFFFFFFFFF8LL;\n");
                break;
            }
            case 0x82u: {
                long long tmp = 0;
                for (int i = 0; i < 8; i++) {
                    tmp += opcode[v11_5 + i] << (16 * 2 * i);
                }
                v11_5 += 8;
                v11[3] += tmp & 0xFFFFFFFFFFFFFFF8LL;
                printf("tmp = %d;\n", tmp);
                printf("v11[5] += 8LL;\n");
                printf("v11[3] += tmp & 0xFFFFFFFFFFFFFFF8LL;\n");
                break;
            }
            case 0x88u: {
                int v37 = opcode[v11_5] + opcode[v11_5] * 16 * 16;
                v11_5 += 2;

                int v8 = v11_5;
                v11[3] += 8;
                v11[3] = v8;
                v11_5 += v37;
                printf("v37 = *(__int16 *)v11[5];\n");
                printf("v11[5] += 2LL;\n");
                printf("v8 = v11[5];\n");
                printf("v11[3] += 8LL;\n");
                printf("*(_QWORD *)v11[3] = v8;\n");
                printf("v11[5] += v37;\n");
                break;
            }
            case 0x8Fu:
                v11_5++;
                printf("v35 = %d;\n", opcode[v11_5-1]);
                break;
            case 0x90u: {
                long long v9 = v11[3];
                v11[3] = v9 - 1;
                v11[5] = v9;
                printf("v9 = (_QWORD *)v11[3];\n");
                printf("v11[3] = v9 + 0xFFFFFFFF;\n");
                printf("v11[5] = *v9;\n");
                break;
            }
            case 0xFFu:
                return 0;
            default:
                printf(":%d\n", v3);
                return 1;
        }
    }

    return 0;
}
```

但是这个虚拟机的操作指令太复杂了，调试了很久发现前面的大部分操作是输出题目的界面，没有实际作用，真正的加密就是异或

所以扣出字节码0x6a之后的8字节的数字，

分别为0xAABADBEEFBADBEED，0x1234567812345678，0x1111223366666612，0xADADEFABCDEFEDDE

```assembly
result = [0xF5C992B1889CD699, 0x6B56373A4D4D2F35, 0x7D705747140F304D, 0x9EC3DEC3AE8EA081]

x = [0xAABADBEEFBADBEED, 0x1234567812345678, 0x1111223366666612, 0xADADEFABCDEFEDDE]

flag = ""

for i in range(4):
    flag += str(hex(result[i]^x[i]))[2:]
print(flag)
```

`5f73495f73316874796261425f79794d6c6175747269565f336e316863614d5f`

然后16进制转字符串，又因为小段序，再把得到的结果`_sI_s1htybaB_yyMlautriV_3n1hcaM_`

按照每8位 置换一下顺序 得到

flag{th1s_Is_Myy_Baby_Virtual_Mach1n3}