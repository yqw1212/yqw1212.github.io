---
layout: post
title:  Taxonomy of Attacks on Open-Source Software Supply Chains
date:   2024-01-06 00:08:01 +0300
image:  2024-01-06-girl.jpg
tags:   [note,paper]
---

# 开源软件供应链攻击的分类

Piergiorgio Ladisa, Henrik Plate, Matias Martinez, and Olivier Barais

## 摘要

对开源软件的广泛依赖使其成为恶意行为者的目标，正如反复出现的攻击所证明的那样。当今开源供应链的复杂性导致了一个重要的攻击面，为攻击者提供了许多机会，可以将恶意代码注入到开源工件中，然后由受害者下载并执行。

这项工作提出了对开源供应链攻击的一般分类，独立于特定的编程语言或生态系统，并涵盖了从代码贡献到包分发的所有供应链阶段。以攻击树的形式，它涵盖了107个独特的向量，与94个现实世界的事件有关，并映射到33个缓解措施。

由17名领域专家和134名软件开发人员进行的用户调查积极验证了分类法的正确性、全面性和可理解性，以及它对各种用例的适用性。调查参与者还评估了确定的保障措施的效用和成本，以及它们是否被使用。

## 1.介绍

软件供应链攻击的目的是向软件组件中注入恶意代码，危害下游用户。最近的事件，如太阳风公司的猎户座平台感染[1]，下载量约为8700万美元。包括政府机构和关键基础设施提供商在内的18,000个客户展示了此类攻击的影响范围和潜在影响。因此，正如ENISA[2]或美国关于改善国家网络安全的行政命令[3]所报告的那样，软件供应链攻击是当今威胁格局中的主要威胁之一。

这项工作的重点是针对开源软件(OSS)供应链的攻击的具体实例，这些攻击利用了在软件开发生命周期中广泛使用开源作为传播恶意软件的手段。考虑到软件行业对开源的依赖——横跨技术栈和整个开发生命周期，从库和框架到开发、测试和构建工具，Ken Thompson对信任(代码及其作者)的反思[4]比以往任何时候都更有意义。事实上，攻击者滥用了不同开源利益相关者之间存在的信任关系[5]，[6]。Sonatype在其2021年报告[7]中报告说，过去几年对OSS的攻击的出现和显著增加表明攻击者认为它们是传播恶意软件的可行手段。

最近，行业和政府机构加大了努力，以提高软件供应链的安全性，无论是在总体上还是在开源方面。例如，MITRE提出了一个端到端框架来保持供应链的完整性[8]，OpenSSF开发了SLSA框架，该框架将开源项目的几个安全最佳实践分组[9]。学术界贡献了越来越多的科学出版物，其中许多出版物得到了开发人员社区的广泛关注，例如[10]或[11]。

**然而，我们观察到，现有的开源供应链安全工作缺乏对攻击者如何将恶意代码注入OSS项目的全面、可理解和一般描述，这与特定的编程语言、生态系统、技术和利益相关者无关。**

我们认为，对此类攻击进行分类对学术界和工业界都有价值。作为共同参考和澄清术语，它可以支持若干活动，例如开发人员培训、风险评估或制定新的保障措施。因此，我们着手回答以下研究问题:

* RQ1对开源软件供应链的攻击分类
  * RQ1.1-OSS供应链上的一般攻击向量的综合列表是什么?
  * RQ1.2-如何以可理解和有用的方式表示这些攻击向量
* RQ2针对OSS供应链攻击的防护措施
  * RQ2.1-存在哪些一般防护措施，它们针对哪些攻击向量?
  * RQ2.2-这些防护措施的效用和成本是什么?
  * RQ2.3-开发人员使用哪些安全措施?

为了回答这些问题，我们首先研究了科学文献和灰色文献，编制了一个广泛的攻击向量列表，包括已经被利用的攻击向量，也包括未被利用的漏洞和合理的概念证明。然后，我们以攻击树的形式概述了分类法。根据已识别的攻击，我们列出了相关的防护措施。最后，我们进行了两次用户调查，目的是验证攻击分类，并收集有关防护措施的效用、成本、意识和使用的定性反馈。

在这方面，我们工作的主要贡献如下:

* 与OSS供应链相关的107个唯一攻击向量的分类法，采用攻击树的形式，并由17位领域专家根据不同用例的完整性、可理解性和适用性进行验证。
* 针对拟议分类法的一套33项保障措施，并由相同的17位领域专家对效用和成本进行定性评估。
* 对**134名开发人员**对选定的高级攻击媒介和相应的保护水平的认识进行定性评估。

使用攻击树的交互式可视化，可以在线探索带有描述、真实攻击示例、引用和相关防护措施的分类法。

本文的其余部分组织如下。第二节介绍了OSS供应链的基本概念和要素、假设的攻击者模型和攻击树的概念。第三部分描述了所采用的方法，包括三个步骤:系统文献综述(SLR)、分类法和保障措施建模以及调查设计。第四节详细介绍了拟议的分类法，并介绍了专家和开发人员验证的结果。第V部分介绍了与上述攻击向量相关的安全措施，并介绍了专家对其效用和成本的反馈，以及开发人员对意识和使用的反馈。第六节讨论了编程语言之间的差异，并强调了我们的研究工作的好处。第七节提供了调查参与者的人口统计信息。第八节提到了相关作品，第九节讨论了对我们工作有效性的威胁。最后，十节是本文的结论和展望。

## 2.背景

本节在较高的层次上描述了涉及到OSS工件的开发、构建和分发的系统和涉众(参见图1)。它们构成了OSS供应链的元素，并对其攻击面做出了贡献。它们通常在分布式设置中交互[12]，即使具体情况因OSS项目而异。

本节最后描述了整篇论文所考虑的攻击者模型，并总结了攻击树的概念。

### A.系统

所考虑的系统包括版本控制系统(VCS)、构建系统和包存储库。它们不一定对应于提供各自功能的具体物理或虚拟系统，但应该被视为角色，单个主机或第三方服务可以执行多个角色。

**版本控制系统**托管OSS项目的源代码，**不仅包括程序代码，还包括元数据、构建配置和其他资源**。他们跟踪和管理整个开发过程中发生的代码库的所有更改。像Git这样的普通vcs不需要用户进行身份验证，但补充工具和第三方服务提供了额外的功能(例如，问题跟踪器)或安全控制(例如，身份验证、细粒度权限或审查工作流)。

**构建系统**将项目的代码库作为输入，并产生一个二进制工件，例如，一个可执行的或压缩的归档文件，它可以分发给下游用户以方便使用。构建通常涉及所谓的依赖项或包管理器[13]，[14]，例如Python的pip，它确定并下载构建成功所需的所有依赖项，例如，测试框架或集成到手头项目中的OSS库。持续集成(CI)/持续交付(CD)管道，运行在像Jenkins这样的构建自动化工具上，自动化项目工件的测试、构建和部署。

**分发平台**将预构建OSS工件分发给下游用户，例如，在包管理器的执行上或通过手动下载。我们的定义不仅涵盖了众所周知的公共包存储库，如PyPI或Maven Central，还包括内部和外部镜像、内容分发网络(CDN)或代理

**OSS维护人员和管理员的工作站。**上述系统的OSS项目维护者和管理员有权访问敏感资源，例如代码库、构建系统的web界面或包存储库的数据库。因此，他们的工作站处于攻击场景的范围内。

### B.利益相关者

所考虑的涉众包括OSS项目维护者、贡献者和消费者——以及所涉及的各种系统或服务的管理员。同样，它们应该被理解为角色[15]，一个给定的个体可以承担多个角色。例如，OSS项目的维护者通常会使用其他项目的工件。

**贡献者**向OSS项目贡献代码，对项目资源的访问受限(只读)。他们通常通过合并请求向VCS提交贡献，这些请求在集成之前由项目维护者审查。

**OSS项目维护者**有权访问项目资源，例如，审查和集成贡献者的合并请求，配置构建系统并触发构建作业，或者在包存储库上部署现成的工件。项目合作者(包括贡献者和维护者)的真实姓名并不一定为人所知。帐户，包括匿名帐户，通过持续的质量贡献获得信任，由于这一点，他们可能被提升为维护者(称为精英管理)。

**系统和服务管理员**负责配置、维护和操作上述任何系统或服务，例如，第三方Git托管提供商的员工，为他们的项目操作自己的构建系统的OSS基金会的成员，或者运行像npm这样的包存储库的公司的员工。

**下游用户**使用OSS项目工件，例如，来自项目vcs的源代码(例如，通过克隆)，或者来自发行平台的预构建包。在下游开发项目的环境中，下载通常是由像pip或npm这样的包管理器自动完成的，它们识别并获取项目的几十个或几百个[16]、[17]直接和可传递的依赖项

### C.开源软件供应链的风险

OSS被组织和个人在技术栈和整个软件开发生命周期中广泛使用。包管理器在很大程度上自动化了它的下载和安装，例如，在解决传递依赖关系或更新版本时。

上述系统本质上是分布式的，涉众部分是未知的或匿名的。它们存在于所使用的每个单独的开源组件中，这增加了具有技术和社会方面的攻击面。此外，即使是大量使用的开源项目也只获得很少的资金和贡献[18]，这使得维护者很难安全地运行项目，并增加了他们对社会工程攻击的敏感性，例如，在审查贡献时。

下游使用者无法控制给定项目的安全实践，并且对其可见性有限。依赖关系的绝对数量[16]使得严格的审查对于给定的消费者来说不切实际，迫使他们相信社区能够及时发现漏洞和攻击。

**攻击者的主要目标是数据泄露、丢弃、拒绝服务或经济利益[19]。因此，直接和间接的用户群越大，开源项目对攻击者的吸引力就越大。在其他对抗性环境中，攻击者需要找到单个弱点，而防御者需要覆盖整个攻击面，在这种情况下跨越整个供应链。**

### D.攻击树

攻击树[20]，[21]是攻击者目标和技术的直观和系统表示，并支持组织进行风险评估，特别是在了解暴露和确定对策方面。

攻击树的根节点表示攻击者的顶级目标，该目标由其子目标迭代地细化为子目标。根据细化的程度，叶子或多或少对应于具体的和可操作的任务。

由于分类法要求将实例精确地分配给一个类，因此我们只考虑析取细化，其中子节点表示达到父目标的备选方案。

### E.攻击者模型

分类法的开发基于以下假设和攻击者模型。

**攻击者的最高目标是将恶意代码放置在开源工件中，这样它就可以在下游项目的上下文中执行，例如，在开发或运行期间。此类恶意软件可以泄露数据，代表或打开后门，以及下载和执行第二阶段有效载荷(例如，cryptominers[19])。目标资产既可以属于下游软件项目的开发人员，也可以属于他们的最终用户，这取决于攻击者的具体意图。但是，分类法的重点不在于恶意代码做什么，而在于攻击者如何将其放置在上游项目中。**

内部攻击超出了范围，也就是说，攻击者既不是被攻击开源项目的维护者，也不是参与项目工件开发、构建或分发的第三方服务提供商的成员或雇员。因此，攻击者没有任何特权访问项目资源，如构建作业或基础设施，如服务器或数据库底层代码存储库。

最初，他们只能访问公开可用的信息和公开可访问的资源，他们可以按照开源情报(OSINT)[22]方法收集和分析这些信息和资源。当然，由于开源项目的性质，许多项目细节是可以自由访问的，例如，项目依赖关系，构建信息，或者提交和合并请求历史。攻击者可以与图1中描述的任何涉众和资源进行交互，例如，使用合并请求或问题跟踪器与维护者进行通信，或者创建虚假的帐户和项目。

## 3.方法

回答上述研究问题的方法包括三个阶段(参见图2)。

首先，我们回顾了科学文献和灰色文献，以收集OSS供应链上攻击向量的广泛列表。

其次，从文献中描述的向量和第二节中介绍的OSS供应链元素开始，我们从特定的编程语言或生态系统中抽象出来，执行威胁建模，并创建一个采用攻击树形式的分类法。此外，我们还识别和分类减轻这些载体的防护措施。

第三，为了验证所建议的分类法和保障列表，我们设计并运行了两个用户调查:与OSS供应链安全领域的专家一起，以及与软件开发人员一起，他们是OSS的主要消费者。

### A.系统文献综述

SLR(Systematic Literature Review)实现了两个目标。首先，通过对OSS供应链安全现状的探索，我们识别并明确了上述研究问题。其次，它支持识别和收集相关的攻击向量和适当的防护措施。SLR本身遵循一个三步方法，包括计划、执行和报告\[23\]\[24\]，如图2所示，并在后面进行描述。

搜索策略:此步骤定义搜索条件、对已标识资源使用的查询以及包含标准。出于我们的目的，我们使用以下查询来搜索文档中的任何地方的术语:

```assembly
("open source" OR "open-source" OR "OSS" OR "free"OR "free/libre" OR "FLOSS) AND "software" AND ("supply chain" OR "supply-chain") AND ("security" OR "insecurity" OR "attack" OR "threat" OR "vulnerability")
```

用于收集初步研究的四个数字图书馆是:Google Scholar(980个结果)、arXiv(6个)、IEEExplore(25个)和ACM digital Library(160个)。从总共1171个搜索结果中剔除重复后，还剩下1025篇论文。

我们只收录了在期刊和会议上发表的同行评议文章、技术报告以及2022年3月之前发表的英文博士/硕士论文。此外，我们只包括与OSS开发、VCS、构建系统和包存储库领域的安全方面、威胁和恶意软件以及恶意软件检测和软件供应链安全相关的研究。这些纳入标准的应用使前一阶段获得的1025篇结果减少到99篇。

然后，我们将滚雪球技术应用于所有这些作品，以查找在初始搜索期间遗漏的资源，从而应用相同的纳入标准。这导致了另外84项新研究的增加。

数据提取:选择过程产生了总共183项科学工作，其中大部分来自最近几年(参见图3)，这些工作经过仔细审查，以提取有关常见威胁、攻击媒介和相关防护措施的信息。入选作品的完整列表可在网上查阅。

### B.灰色文献

**除了科学文献之外，特别是为了尽可能多地涵盖现实世界的攻击和漏洞，我们还查看了博客文章、白皮书或事件报告等灰色文献。为此，我们定期审查几个新闻聚合器和博客(参见附录B)。**此外，我们使用与第III-A节相同的搜索查询在Google上进行搜索。使用第III-A节的选择标准对所有结果进行筛选，并应用滚雪球技术进一步扩展源集。

### C.攻击场景分析与建模

我们对图1所示的OSS供应链进行分析，对SLR期间识别的攻击向量进行分类。然后利用攻击树的语义对攻击进行建模。这两个步骤的目标是回答RQ1.2，即提出OSS供应链攻击的分类。

在OSS开发的背景下，攻击场景的分析从识别涉众(即参与者)、系统以及它们的关系(即通道)开始。我们已经在第2节中描述了这些元素，并在图1中进行了描述。这种分析有助于识别潜在的类别，以构建已识别的攻击向量。

在建模阶段，我们采用了以攻击为中心的方法，其目的是表征环境的敌意和利用系统漏洞的攻击复杂性[25]。特别是，我们以树测试的形式执行了封闭的卡片排序，旨在将OSS供应链攻击的分类构建为攻击树。封闭卡片分类是一种来自用户体验(UX)设计的信息架构技术，参与者被要求构建一组给定的信息[26]。树测试是卡片排序问题的一种特殊情况，其中信息在树中结构化.

对于攻击树建模，我们使用Ohm等[19]提出的攻击树作为起点，其根节点为恶意代码注入(注入依赖树)。由于严格的结构，更深入的改进和SLR，我们确定了许多额外的攻击向量(107而不是19)。

构建攻击树的主要标准是:对现有生态系统的干扰程度(第一级节点)，软件供应链的阶段(即，来源、构建、分发)，以及每个阶段涉及的系统和涉众。

为反映第4-b节所述的专家反馈意见，已更改了最初的命名和安排。初始攻击树的改进版本如图4所示。

### D.保护措施的识别和分类

为了确定一般保障措施，同样在这种情况下，我们回顾了第III-B节中描述的科学文献和灰色文献。然后，根据控制类型、涉众参与和减轻的攻击向量对每个保护措施进行分类。

**控制类型**分类遵循众所周知的**指令控制、预防控制、侦查控制、纠正控制和恢复控制[27]**。然而，由于我们关注的是恶意代码(无论其实际意图如何)如何被注入到开源中，相应的防护措施解释了为什么恢复控制超出了范围。

**涉众参与**反映了哪些角色、维护者、系统管理员或使用者能够或必须积极地有效地实现给定的控制。

最后，每个保护措施都被分配给攻击树的那些节点，它可以减轻(部分或全部)攻击。为了反映更宽或更窄的范围，它们被分配到具有最小深度的树节点

### E.调查方法

我们针对两种不同的受众进行了两项在线调查。首先，我们与软件供应链安全领域的专家进行了交流，以验证所建议的攻击向量分类法(RQ1)，并收集有关防护措施的效用和成本的反馈(RQ2.2)。其次，我们要求开发人员对他们使用的攻击向量和感知的保护级别进行评级。另外，他们还可以从开源消费者的角度评估分类法以及安全措施的使用和意识(RQ2.3)。

问卷设计与开发:我们进行了横断面调查[28]，包括以下四个部分

人口统计:这部分收集有关调查参与者的背景信息，特别是他们的技能集，以检查我们是否满足了安全专家和开发人员的目标，以及使用的编程语言，或者他们是否积极参与OSS项目。结果将在第七节讨论。

分类法:在专家调查中，这一部分是为了验证和评估建议的分类法。在完整显示我们提出的分类法之前，我们使用了树测试[29]来捕捉用户查找树节点的容易程度。这有助于验证节点的父子关系。之后，参与者被要求探索完整分类法的交互式可视化，然后在李克特量表(Likert scale)上从1(低)到5(高)对其结构、节点名称、覆盖范围和有用性(支持不同的用例)进行评分。

在开发人员调查中，这一部分首先介绍了分类法的第一级节点，包括攻击向量名称和描述。参与者被问及他们是否意识到这种攻击，以及他们或他们的组织是否使用了任何缓解措施。参与者可以选择继续这个部分来探索分类法并评价它的可理解性和有用性.

保障措施:在专家调查中，参与者评估了所选保障措施的效用和成本。为此，它们按照涉众在其实现中所扮演的角色进行分组和呈现。

这整个部分在开发者调查中是可选的。当选择加入时，受访者只根据他们在开源项目中的角色(如果有的话)来评价相关的保护措施。当显示时，调查参与者提供了他们是否使用给定的保护措施及其感知成本(李克特量表)的反馈。

试点调查和预测试:与两位用户研究和UX专家的访谈为我们提供了关于调查的适用性和可理解性的反馈。他们的主要建议是缩短文本和改善内容呈现，特别是树测试内容。在执行他们的反馈后，我们对来自学术界的37名研究人员(即博士生，研究人员和教授)进行了专家调查的预测试，并对14名硕士生进行了开发人员调查。从这次预测试中收到的反馈建议进一步缩短文本，改进一些问题，调整按钮的外观。

抽样:两份问卷的参与者选择均采用滚雪球抽样[30]方法。它包括邀请一组最初的参与者，他们被要求在他们适当的知识网络中进一步分享邀请。由于这种抽样技术，不可能计算响应率。

最初的领域专家名单由SLR期间分析的作品的作者以及我们网络中的工业界和学术界专家组成。我们包括在OSS供应链安全环境中执行相关工作的专家(例如，科学出版物，软件基金会或行业的计划/项目)。类似地，软件开发人员的初始列表是从我们的实践者知识网络开始创建的。

用于联系参与者的渠道包括电子邮件、领英(Linkedin)和演示期间的直接招聘。

专家调查活动于2021年7月22日开始，针对开发商的调查活动于2021年10月19日开始。两份问卷于2021年11月24日结束分析，共有17名和134名受访者。

调查程序和数据保护:我们没有使用现有的调查工具或服务，而是开发了一个定制的解决方案。使用SurveyJS4设计调查的结构和内容，导出为JSON文件。这个文件是使用GitHub Pages托管的，还有SurveyJS的运行时库和其他资源。参与者的答案被发送到一个定制的Google AppScript，后者将答案存储在一个Google电子表格中。在每个调查页面之后发送答案，并使用开始时生成的随机数进行分组。

应用数据最小化原则，我们没有收集IP地址、姓名或其他PII。我们也没有访问第三方服务器日志。此外，调查前端和后端的解耦使得第一个第三方服务提供商只知道调查的结构和内容，而第二个第三方服务提供商只看到(编码的)答案，而不了解它们的语义。

## 4.攻击分类及其验证

本节介绍了通过审查科学和灰色文献收集的107种独特攻击向量构建的分类法。接下来，它总结了领域专家对其进行验证的结果，以及软件开发人员对我们的分类法的问题意识、可理解性和有用性的反应。

### A.对OSS供应链的攻击分类

攻击者的高级目标是通过向OSS项目注入恶意代码5来进行供应链攻击，这样下游消费者就可以下载该代码，并在安装或运行时执行。他们可以针对任何类型的项目(例如，库或文字处理器)，直接或间接的下游消费者，尽可能多的，或者非常具体的消费者。**后者可以通过调节恶意代码的执行来实现，例如，在生命周期阶段(安装、测试等)、应用程序状态、操作系统或集成到下游组件的属性[19]。**

图4描述了在这个高级目标下面展开的整个分类法，并在后面进行了总结，其中树的第一级子节点反映了对现有包的不同程度的干扰。

从头开始开发和宣传独特的恶意软件包涵盖了一个新的OSS项目的创建，意图从一开始或以后的时间点使用它来传播恶意代码。除了创建项目外，攻击者还需要宣传该项目以吸引受害者。现实世界的例子影响了PyPI, npm, Docker Hub或NuGet[19]，[59]-[65]。

使用合法包创建名称混淆的攻击包括创建与合法包相似的项目或工件名称，建议值得信赖的作者，或者使用常见的命名模式。一旦找到合适的名称，恶意工件就会被部署，例如，在源代码或包存储库中，希望被下游用户使用。由于部署不会干扰激发该名称的项目资源(例如，合法的代码存储库，维护者帐户)，因此攻击相对便宜。

该攻击向量的子节点与对合法项目名称应用不同修改的子技术相关:Combosquatting[74]添加了前置或后修复，例如，表明项目成熟度(dev或rc)或平台兼容性(i386)。改变词序[74]重新排列词序(test-vision-client vs. client-vision-test)。操纵单词分隔符(Manipulating Word Separators)[74]更改或添加单词分隔符，如连字符(setup-tools vs. setuptools)。Typosquatting[5],[15],[19],[71],[74],[75]利用了排版错误(dajngo vs. django)。内置包(Built-In Package)[74]复制了来自其他上下文的知名名称，例如，编程语言的内置包或模块(Python的子进程)。Brandjacking[164]给人的印象是一个包来自一个值得信赖的作者(twilio-npm)。相似攻击[165]以一种不同于之前类别(请求vs.请求)的方式创建了一个误导性的名称。

**破坏合法包**涵盖了所有旨在破坏现有合法项目的攻击，这需要损害图1中所示的众多资源中的一个或多个。因此，这个子树比之前的子树要大得多，特别是因为与用户和系统妥协相关的子树在不同的供应链阶段多次发生。本节的其余部分专门讨论这个第一级节点的子技术。

**注入到合法包的源中:它涉及到将恶意代码注入到项目的代码库中。对于攻击者来说，这样做的好处是可以影响所有下游用户，无论他们是使用源代码还是预构建的二进制工件(作为代码库的一部分，恶意代码将在项目构建和二进制工件分发期间包含在内)。**

这个向量有几个子技术。作为贡献者，攻击者可以使用伪善的合并请求将不成熟的漏洞变成可利用的漏洞[11]，或者利用IDE渲染弱点隐藏恶意代码，例如通过使用Unicode同音异义字和控制字符[10]，或者隐藏和抑制代码差异[166]。作为维护者做出贡献需要获得修改合法项目代码库所需的特权，这可以通过不同的方式实现。对合法的项目维护者使用社会工程(SE)技术[167]，[168]，通过接管合法帐户(例如，重用受损的凭据[169])，或通过破坏维护者系统(例如，利用漏洞[113])。后者也可以通过恶意(OSS)组件来实现，例如IDE插件，它通过对根节点的递归引用来反映。

合法项目的代码库也可以通过篡改其VCS来改变，从而绕过项目已建立的贡献工作流。例如，通过破坏系统用户帐户[115]，[116]，或通过利用配置/软件漏洞[118]，[170]，[171]，攻击者可以以不安全的方式访问代码库。

**在合法包的构建过程中注入:由特定语言的包管理器(如Maven或Gradle for Java)极大地促进了这一点，从包存储库下载预构建的组件变得很常见，而不是从OSS项目的VCS下载源代码。因此，恶意代码的注入可能发生在这些组件发布之前的构建阶段[6]，[119]，[120]。尽管与注入源代码相比，传播范围有限，但攻击者的优势在于，在预构建的包中检测恶意代码通常更加困难，特别是对于编译的编程语言。**一种子技术是运行恶意构建作业来篡改多个项目的构建作业之间共享的系统资源\[123\](例如，感染NetBeans项目中的Java档案[125])。攻击者也可以以维护者的身份篡改构建任务，例如，通过接管合法的维护者帐户，成为维护者，或者破坏他们的系统(参见XCodeGhost恶意软件[127])。类似地，攻击者可以包括构建系统，特别是在线可访问的系统，例如，通过破坏管理员帐户[126]或利用漏洞[129]，[172]。

分发合法包的恶意版本:预构建组件通常托管在知名的包存储库(如PyPI或npm)上，但也托管在范围较窄的不太流行的存储库上。此外，组件可以远程或本地镜像，通过cdn(例如，在JavaScript库的情况下)可用，或者缓存在代理中。此攻击向量及其子技术涵盖了攻击者篡改与预构建包的托管、分发和下载相关的机制和系统的所有情况。

悬空引用(重)使用孤立项目的资源标识符[144]-[146]，例如名称或url。掩码合法包[147]目标包名称或URL解析机制和下载连接。他们的目标是通过破坏合法项目外部的资源来下载恶意软件包。这包括中间人(MITM)攻击、DNS缓存中毒或直接在客户端篡改合法url[173]。特别是，包管理器遵循(可配置的)解析策略来决定从哪里下载哪个包版本，以及在联系多个存储库时的优先顺序。攻击者可以滥用这种解析机制及其配置[152]，[174]。攻击者还可以通过操纵包元数据[154]来阻止非易受攻击版本的更新，例如，通过指示对合法包的新版本的不满意依赖。最后，系统和用户在包分发中的参与导致了与之前类似的攻击向量。攻击者可以扮演合法维护者的角色，从而以维护者的身份进行分发，例如，通过接管包维护者帐户(例如eslint[156])，这是仅次于typposquatting[19]的第二大常见攻击向量。它们还可以危害维护系统，或直接注入托管系统，例如，通过破坏管理员帐户[175]或利用漏洞[160]-[162]，[176]。

> 对RQ1.1的回应:通过对183篇科学论文和灰色文献的回顾，我们确定并概括了开源软件供应链上的107种独特攻击向量，并得到了94种真实攻击或漏洞的支持。

### B.领域专家的验证和评估

分类法的初始版本由17位领域专家进行了验证和评估。对他们的反馈进行了改进，形成了图4所示的分类法。

验证:本节报告专家对攻击向量的全面性以及分类法的正确性、可理解性和有用性的反馈。

在完整地看到分类法之前，树测试需要专家将攻击向量分配给初始分类法的第一级节点。在所有专家的311份作业中，234份(75%)与初始分类法的结构匹配，77份(25%)不匹配，这表明对结构的总体一致。

接下来，向专家们展示了整个分类法的初始版本，并要求他们使用从1(低)到5(高)的李克特量表评估不同的品质。

14名(82%)专家同意整体结构，评级为4或5，略高于树测试的结果。这可能是由于一些节点名称在显示上下文太少时不够自解释。

专家们进一步被要求对分类法的第一级节点在命名、树位置和子树结构方面的正确性进行评级。除了从头开始开发和发布不同的恶意软件包外，所有一级节点在命名、分类和子树结构方面总体上都很一致。后者只收到了关于它的子树的中立反馈，与它的分类有轻微的一致，与它最初的命名有明显的分歧。

12位(71%)专家同意**攻击树的完备性**。

有用性和用例:在问卷的这一部分中，专家对提出的分类法的有用性和可能的用例进行了评级。

15人(88%)认为该分类法在理解OSS供应链攻击面方面的有用性为4或5分。更少的专家认为了解攻击者的战术和技术(12人(71%))或攻击者的成本/收益考虑(5人(29%))是有用的。

关于建议分类法的可能用途的专家选项，前3个用例是威胁建模、意识和培训以及风险评估。另一个可能的用例，虽然没有包括在调查中，是范围渗透测试。

### C.由开发人员进行验证和评估

该分类法的初始版本还经过了134名软件开发人员的验证和评估，内容涉及对主要攻击向量(第一级分类法节点)的意识、是否(由他们自己或他们的组织)减轻了这些攻击，以及(可选的)分类法的可理解性和实用性。

对攻击向量的认识:对主要攻击向量的认识从从头开始开发和发布不同的恶意程序包的120(90%)到在构建合法程序包期间注入的86(64%)不等。

对于除一种媒介外的所有媒介，大多数受访者回答不知道他们是否受到保护。仅对于从头开始开发和宣传独特的恶意软件包，大多数人认为受到保护(52%)。对于构建过程中注入和分发恶意版本，19名(14%)受访者确定不存在保护措施。

分类法可理解性和效用评估:在134名参与者中，53人(40%)决定对分类法的可理解性和效用进行可选评估，以了解供应链的攻击面。考虑到评分为4或5,41人(77%)认为分类法可以理解，46人(87%)认为它是创造意识的有用手段。

> 对RQ1.2的回应:针对OSS供应链的攻击的拟议分类采用了一种攻击树的形式，涵盖了事先确定的所有107个向量。17位领域专家和134位软件开发人员对其进行了验证，显示了结构和命名、全面性、可理解性以及用例(如威胁建模、意识、培训或风险评估)的适用性的总体一致。

## 5.保障措施及其评估

第5-A小节首先简要概述了针对OSS供应链攻击的防护措施，这些攻击是通过文献综述确定的，并概括为对特定的prg.语言或生态系统不可知。子节5-B和5-C报告了由领域专家和软件开发人员进行的两次调查的结果，以验证和评估关于不同质量的保障措施，例如，效用或成本。

### A.保护措施清单

**总的来说，我们确定了33个保护措施，部分或完全减轻了前面提到的攻击向量。**这些保障措施的实施和使用都可能产生不可忽略的成本，这也取决于手头prg语言和生态系统的具体情况。。因此，安全措施的选择、组合和实施需要仔细规划和设计，以平衡所需的安全级别和成本。

完整的防护措施清单见附录A的表二，包括控制类型之后的分类。所有的安全措施都被映射到它们所缓解的向量，一些映射到顶层目标，因为(部分地)处理了所有的向量(例如，建立一个审查过程)，其他映射到更具体的子目标。一些安全措施可以由一个或多个利益相关者实现，而另一些则需要多个利益相关者的参与才能有效(例如，签名创建和验证)。

公共保障包括4个对策，这些对策要求所有涉众变得活跃起来，例如，项目维护者、开源消费者和管理员(服务提供者)。例如，详细的软件物料清单(SBOM)必须由项目维护者制作和维护[8]，理想情况下使用自动化的软件组合分析(SCA)工具。接下来，SBOM必须由包存储库安全地托管和分发，并由下游用户根据其安全性、质量和许可要求仔细检查。

**项目维护者和管理员**的保障措施包括八个保障措施。例如，安全身份验证建议服务提供商提供多因素身份验证(MFA)或强制执行强密码策略，而项目维护者应遵循身份验证最佳实践，例如，在可用的情况下使用MFA，避免密码重用，或保护敏感令牌。

**项目维护者**的保障措施包括七个对策。通常，OSS项目使用托管的、可公开访问的VCSs。然后维护者应该，例如，进行仔细的合并请求审查，或者为敏感的项目分支启用分支保护规则，以避免恶意代码贡献。由于项目构建仍然可能发生在维护人员的工作站上，因此建议他们使用专用的构建服务，特别是短暂环境[9]。此外，它们可以隔离构建步骤[123]，这样它们就不能篡改其他构建步骤的输出。

**管理者和消费者**的保障包括五个对策。例如，包存储库管理员和使用者都可以选择直接从源代码构建包[177]，而不是接受预构建的工件。如果由包存储库实现，这将降低项目构建被破坏的风险。如果由消费者实现，这将消除与第三方构建服务和包存储库的妥协相关的所有风险，因为它们被排除在外。

**消费者**保障措施包括下游用户可能采用的九项对策。OSS软件包的使用者可以通过隔离代码和/或沙箱来减少恶意代码执行的影响。另一个例子是建立审查组件的内部存储库镜像[178]。

> 对RQ2.1的响应:我们确定了33种不同涉众使用的一般防护措施，主要是检测或预防措施，并将它们映射到它们部分或完全缓解的攻击树的节点。

### B.专家验证与评估

本节介绍了17位专家关于保障措施在降低风险方面的效用及其实施和继续使用的相关成本的反馈意见。

总之，几乎所有的保障措施都获得了中等到高的效用评级，而成本评级则从低(即，最小平均值为2.0)到非常高(即，最大平均值为4.8)。

表1提供了收集到的针对33种保障措施的所有反馈，其中讨论了具有最高和最低效用成本比(U/C)的保障措施以及其他一些有趣的案例。

**U/C比率高。**保护生产分支、删除未使用的依赖项和版本固定都显示出最高的U/C比率，因此，被认为是有用且廉价的控制。决议规则的使用也显示了良好的U/C比率，尽管一位专家强调“很少有项目”使用它们，并且实现将需要修改所有包管理器。平均而言，预防性抢注仅获得了中性评级(效用3.1分，成本2.9分)，但也引起了一些担忧:两位专家强调，由于类似名称的合法原因(例如，帮助消费者识别包装关系)，“试图防止名称抢注，但很难完全执行”可能是件好事。

**低U/C比率。**据报道，Google[177]使用的Build Dependencies from Sources获得了非常低的效用评级(平均值和中位数为3.0)，总体上是最低的U/C比率。考虑到它的使用将修剪在构建期间注入和分发恶意版本的向量的子树，我们期望有更高的效用评级。一位专家声称，“从源代码构建只有在有人扫描和审查代码时才有帮助”。可能是指不稳定的构建[179]，另一位专家强调“从源代码重新构建软件有时会引入问题”。

Merge Request Reviews获得了最高的平均效用评级(4.6)，这可能是因为如果恶意代码被注入到源代码中，那么无论用户如何使用它，它都一定会到达用户那里。

可复制构建（Reproducible Builds）从10个参与者(58.8%)那里获得了非常高的效用评级(5)，但也从12个参与者(70.6%)那里获得了高成本评级(4或5)。一位专家评论说，“像太阳风现在使用的可复制构建，是防止篡改单一构建系统的好方法”，另一位专家声称，这“将成为单一、最大的障碍”。

Scoped Packages作为防止滥用依赖解决机制的有效保障[178]，[180]，在效用和成本方面大多获得了中性评级(3)。

> 对RQ2.2的回应:我们通过调查17位专家，对33项保障措施的效用和成本进行了定性评估。保护生产分支、删除未使用的依赖项和版本固定这三个保障措施显示出最佳的U/C比率，而从源构建依赖项显示出最差的U/C比率。

### C.开发人员验证和评估

在调查的这个可选部分中，开发人员被要求评估根据涉众在日常工作中所扮演的角色(在人口统计部分中收集)所选择的保障措施子集的使用和成本。在134名受访者中，共有30人评估了“共同保障”，5人评估了“项目维护者保障”，4人评估了“维护者和管理员保障”，24人评估了“管理员和消费者保障”，22人评估了“消费者保障”。完整结果见表1

移除未使用的依赖项是开发人员经常使用的，这与Soto-Valerio等人[181]的观察结果形成对比，他们发现许多Java项目都有臃肿的(未使用的)依赖项。在受访者中广泛使用的其他对策是版本固定和开源漏洞扫描仪，后者不仅可以解决攻击问题，还可以使用具有已知漏洞的依赖项。

关于攻击向量“创建名称混淆”，70%的开发人员声称意识到这个问题，我们可以观察到，相应的保护措施Typo guard/Typo detection和Preventive squatting the release package只有少数受访者使用。

值得一提的是，开发人员的成本评级通常与领域专家的评级一致。令人惊讶的例外是，对于内部/公共存储库中托管的开源组件，应用程序安全测试和建立审查过程中，开发人员给出的中位数是3，而专家给出的中位数是5。

> 对RQ2.3的回应:134名软件开发人员提供了关于安全措施使用的反馈。最常用的三个是移除未使用的依赖项、版本固定和将开源漏洞扫描程序集成到CI/CD管道中。

## 6.讨论

虽然第四节中提出的分类在很大程度上与生态系统无关，但本节讨论了生态系统之间的差异，并在我们工作的基础上强调了未来可能的研究。

1)生态系统之间的差异:如第II-E节所述，攻击者的高级目标是将恶意代码注入开源工件，以便在下游执行。实现这一目标的一些技术确实独立于特定的生态系统/语言，例如，接管合法帐户或成为维护者。

然而，其他攻击向量是特定的:滥用依赖项解决机制攻击依赖于各自包管理器从内部和外部存储库解析和下载声明的依赖项所使用的方法和策略。例如，Maven、npm、pip、NuGet或Composer会受到依赖混淆攻击的影响，而Go和Cargo则不会受到影响[180]。以下几种攻击依赖于用户界面和编译器/解释器对(Unicode)字符的解释和可视化[10]。此外，名称混淆攻击需要考虑生态系统的特殊性，特别是内置包。

当涉及到恶意代码的执行或触发时，存在更多的差异，这超出了分类法主要关注的代码注入。对于Python和Node.js，这通常是通过安装钩子来实现的，它会触发下载包中提供的代码的执行(例如，在Python的setup.py或JavaScript的package.json)。大多数编译语言(如Java、C/ c++或Ruby)都没有类似的特性。在这种情况下，执行可以在运行时实现，例如，通过在特定函数或初始化器中嵌入有效负载，或者通过中毒测试例程[19]。

在代码混淆和恶意软件检测方面也存在差异。在解释型语言的情况下，下载的软件包包含恶意软件的源代码，这使得它比编译型语言更容易被分析人员访问。在这些包中存在编码或加密的代码被证明是一个很好的泄露指标[58]，因为开源包的合法用例很少。最小化是其中之一，然而，它主要与前端JavaScript库有关。**事实上，许多现有的攻击并没有使用混淆或加密技术[19]。尽管如此，开源包和版本的数量使得手工检查非常困难，即使源代码是可访问的。**

当涉及到编译代码时，众所周知的技术，如打包、死代码插入或子程序重新排序[189]使逆向工程和分析更加复杂。**同样值得注意的是，解释型语言的生态系统附带编译代码。例如，许多用于ML/AI用例的Python库包含并包装了特定于平台的C/C++二进制文件。**

考虑到安全措施，其中一些是特定于选定的包管理器的，即Scoped包(Node.js)和Prevent script execution (Python和Node.js)。所有其他的都是相关的，无论生态系统如何，但是，控制实现和技术选择是不同的，例如，在应用程序安全测试的情况下。Duan等人[15]提出了一个包存储库安全特性的比较框架(以PyPI、npm和RubyGems为例)。

2)分类法对未来研究的好处:我们的工作通过对现有工作的抽象、背景化和分类，使关于OSS供应链安全的知识系统化。提出的分类法可以提供一个中心参考点和通用术语，从而有利于未来的研究。

攻击媒介和防护措施的综合列表可以支持评估开源项目的安全级别，例如，跨项目和生态系统以及随着时间的推移进行比较实证研究。

生态系统中解释性语言的源代码的可用性表明恶意软件分析更加直接。尽管如此，最近的出版物仍然关注这些生态系统，特别是JavaScript和Python[15]，[16]，[57]，[58]，[74])，部分原因是它们很受欢迎，但也因为现有的恶意软件分析技术不容易应用。

例如，当攻击涉及故意插入漏洞时，需要对修改的上下文进行分析，以将其与意外引入的漏洞区分开来[80]。

此外，代码生成和识别VCS提交对应于给定预构建包的困难使得恶意软件对源代码的分析变得困难。像[132]、[133]这样的作品描述了在VCS和预构建组件中识别源代码差异的挑战。

可复制构建[121]，[136]，[186]解决了这个问题，然而，它不被普遍应用，被认为是昂贵的(参见表1)，更复杂的项目需要大量的实现工作。

## 7.用户调查统计数据

本节提供了两次在线调查的受访者的人口统计信息。总之，专家调查的受访者满足了成为该领域专家并积极参与OSS项目的要求。开发人员调查的受访者经常使用OSS，并且对供应链安全知之甚少。

领域专家:17名受访者参与了为软件供应链安全领域专家设计的在线调查。根据对自己技能的自我评估，12名受访者认为自己在供应链安全领域知识渊博，但也在软件安全(14)和开发(12)领域知识渊博。考虑到受访者对11种流行语言的熟悉程度[190]，他们涵盖了其中的9种语言，其中Python、Java和JavaScript覆盖得最好，而没有人有.net和objective-C背景。17位受访者中有14位是OSS项目的积极参与者，并被问及他们各自的角色(多项选择):所有14位都是贡献者，7位是项目维护者，3位行使其他角色。9名专家在私营部门工作，5名在公共部门(如政府、学术界)工作，3名在非营利部门工作。它们涵盖了信息产业(8个)、计算机产业(2个)、电信(2个)、娱乐产业(1个)、大众传媒(1个)、国防(1个)和其他(2个)。

开发人员:134名受访者参与了为软件开发人员设计的在线调查，他们被假定在OSS供应链中扮演下游消费者的角色。这一假设得到了证实，因为有121人(90%)在他们的日常工作中回应使用开源组件。此外，37人(28%)积极参与OSS项目:31人作为贡献者，22人作为维护者(多项选择)。74人也是代码存储库的维护者，21人管理包存储库。他们技能的自我评估表明他们在软件开发(113)方面知识渊博，而在供应链安全(22)和软件安全(44)方面知识较少。它们涵盖了所有11种编程语言(多项选择)，其中Java, JavaScript和Python是最受欢迎的。大多数受访者(120人)在私营部门工作。从行业来看，计算机和信息产业(55和54)超过其他行业。

## 8.相关工作

在下文中，我们将区分与OSS供应链的特定方面相关的现有工作，例如，技术、系统或涉众交互，以及覆盖整个供应链的更一般的工作。两者都促成了最初的一组攻击向量和防护措施。

**具体工作。**Giovanini等人[167]利用团队动态中的模式来预测OSS开发团队对社会工程攻击的易感性。Gonzalez等人[80]描述了旨在通过提交向vcs注入恶意代码的攻击。他们提出了一种基于规则的异常检测器，该检测器使用提交日志和存储库元数据来检测潜在的恶意提交。在相同的方向上，Goyal等人[191]分析了协作OSS开发，并强调了可能导致维护者接受恶意合并请求的压倒性信息的问题。**Wheeler[192]描述了被颠覆的编译器将代码注入软件的问题，并提出了DDC (diversity Double-Compiling)来检测这种攻击。**在此背景下，Lamb等人[186]提出了一种方法，通过对构建过程进行逐位检查来确定二进制文件与相关源代码之间的对应关系，而Ly等人[132]分析了项目VCS中的Python代码与其分布式工件之间的差异。Gruhn等[123]分析了CI系统的安全性，并将web用户界面(UI)和构建过程确定为恶意数据的主要来源。他们提出了一种安全的构建服务器架构，该架构基于通过虚拟化隔离构建过程。多个工作解决了不同生态系统的包管理器面临的常见威胁。Cappos等人[14]，[154]确定了与在包及其元数据级别缺乏适当的签名管理相关的可能的攻击向量，其中一些我们在下面考虑分发合法包的恶意版本。Zimmerman等人[16]分析了npm生态系统中的安全威胁和相关风险，并定义了几个描述包和维护者下游范围的指标，从而可以识别关键元素。相反，它们还度量隐式信任的上游包和维护者的数量。Bagmar等人[74]对PyPI生态系统进行了类似的工作，他们的几个载体被归入下面。包中。Duan等人[15]提出了一个框架，用于定性地评估解释性语言(即Python、JavaScript和Ruby)的包管理器的功能和安全方面。它们提供了这些包管理器生态系统中涉众(及其关系)的概述，但没有特别涵盖VCS和构建系统。Kaplan等人[66]也提出了包存储库中威胁的最新技术，并采取了描述—实验—对策的方法。

**一般工作。**Ohm等人[19]手动检测恶意的npm、PyPi和Ruby包。他们提出了一种攻击树——基于Pfretzschner等人[46]的图——描述如何将恶意代码注入依赖树。第四节中提出的攻击树遵循更严格的结构(与现有软件包、供应链阶段、利益相关者和所涉及的系统的干扰程度)，我们的SLR导致增加了89个攻击向量。我们的结果已经通过两次用户调查得到了验证。Du等人[184]描述了大范围的高级软件供应链风险，包括外部风险(例如，自然灾害、政治因素)和内部风险(例如，参与者、软件组件)。ENISA[193]提出了供应链攻击的分类法，从供应商和客户的角度描述了攻击者和目标资产使用的技术。然而，他们只提到很少的高级技术。TorresArias等人[83]提出了一个基于委托和角色概念的框架，通过对每个步骤和参与者的端到端验证，以加密方式确保软件供应链的完整性。Samuel等人[155]提出了更新框架(TUF)来克服关于密钥安全分发、撤销和替换的主要限制。

## 9.对有效性的威胁

分类法是使用攻击树的语义建模的，它的几个节点反映了OSS供应链的特征阶段，项目贡献者和维护者的代码流向下游消费者。尽管该分类法的全面性、可理解性和实用性得到了调查参与者的积极评价，但它反映了当前的技术状况。随着供应链技术的发展，所提出的攻击树也将随之发展。

我们系统地回顾了文献，并持续监控安全新闻聚合器，以创建一个全面的攻击向量列表，并收集领域专家的反馈以评估其完整性。尽管如此，开源软件供应链的复杂性使得新的攻击媒介和技术很有可能被发现。分类法的质量将与反映这种新攻击所需的变化程度相对应。

如果我们只考虑我们直接认识的专家，从调查参与者那里收集到的反馈可能是有偏见的。相反，由于雪球抽样，我们也接触到了我们网络之外的人。考虑到相关科学著作的作者，来自学术界和工业界的专家，他们都在软件供应链安全的特定领域工作，使我们能够接触到预期的受众(参见第7节):专家调查的17名受访者在供应链安全方面知识渊博，并积极参与OSS项目，开发人员调查的134名参与者具有软件开发方面的知识并经常使用OSS，两组都涵盖了不同的prg语言范围，包括那些经常受到攻击的语言。

## 10.总结

经过领域专家的验证，提出的针对OSS供应链的攻击分类是全面的、可理解的，并且服务于不同的用例。它可以作为一个中心参考点和设定一个共同的术语，有利于未来的研究。

安全措施的列表及其到攻击树节点的映射有助于确定给定涉众对供应链攻击的暴露程度。他们在效用和成本方面的评估可以用于优化有限的安全预算的支出。未来的实证研究可能会调查确定的对策的流行程度，例如它们在给定开源项目中的使用情况。在我们这边，我们的目标是开发检测编译Java开源组件中的恶意代码的技术。展望未来，为了提高对OSS供应链威胁的认识，我们将在网上发布该分类法的交互式可视化。对文献和现实世界事件的引用将通过使用开源方法保持最新，以帮助分类法本身保持相关性。最后，我们还希望将该分类法应用于其他用例，特别是风险评估。