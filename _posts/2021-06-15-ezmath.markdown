---
layout: post
title:  ezmath
date:   2021-06-15 00:01:01 +0300
image:  2021-06-15-sheet.jpg
tags:   [ctf,reverse,qwb2021]
---

ida打开查看main

```assembly
__int64 __usercall main@<rax>(char **a1@<rsi>, char **a2@<rdx>, __int64 a3@<rbp>, double a4@<xmm0>)
{
  const char *v4; // rdi
  __int64 v5; // rdx
  __int64 result; // rax
  double v7; // ST18_8
  unsigned __int64 v8; // rcx
  unsigned __int64 v9; // rt1
  signed int i; // [rsp-4Ch] [rbp-4Ch]
  __int64 v11; // [rsp-38h] [rbp-38h]
  __int64 v12; // [rsp-30h] [rbp-30h]
  __int64 v13; // [rsp-28h] [rbp-28h]
  __int64 v14; // [rsp-20h] [rbp-20h]
  __int64 v15; // [rsp-18h] [rbp-18h]
  unsigned __int64 v16; // [rsp-10h] [rbp-10h]
  __int64 v17; // [rsp-8h] [rbp-8h]

  __asm { endbr64 }
  v17 = a3;
  v16 = __readfsqword(0x28u);
  v11 = 0LL;
  v12 = 0LL;
  v13 = 0LL;
  v14 = 0LL;
  v15 = 0LL;
  sub_10D0("%39s", &v11, a2);
  if ( len(&v11) == 38 )
  {
    for ( i = 0; i <= 37; i += 2 )
    {
      sub_13F3(*(unsigned __int16 *)((char *)&v11 + i));
      v7 = a4;
      a4 = dbl_4020[i / 2];
      if ( a4 != v7 )
      {
        v4 = "wrong";
        sub_1090("wrong");
        result = 0LL;
        goto LABEL_9;
      }
    }
    v4 = "correct";
    sub_1090("correct");
    result = 0LL;
  }
  else
  {
    v4 = "wrong";
    sub_1090("wrong");
    result = 0LL;
  }
LABEL_9:
  v9 = __readfsqword(0x28u);
  v8 = v9 ^ v16;
  if ( v9 != v16 )
    result = sub_10B0(v4, &v11, v5, v8);
  return result;
}
```

首先输入字符串，长度为38

注意到for循环中i+=2，对字符串使用sub_13F3()进行加密，传入的参数是字符串的每两个字符。

最后将加密的结果与dbl_4020比较

```assembly
.data:0000000000004020 ; double dbl_4020[19]
.data:0000000000004020 dbl_4020        dq 0.00009794904266317233, 0.00010270456917442, 0.00009194256152777895
.data:0000000000004020                                         ; DATA XREF: main+CC↑o
.data:0000000000004020                 dq 0.0001090322021913372, 0.0001112636336217534, 0.0001007442677411854
.data:0000000000004020                 dq 0.0001112636336217534, 0.0001047063607908828, 0.0001112818534005219
.data:0000000000004020                 dq 0.0001046861985862495, 0.0001112818534005219, 0.000108992856167966
.data:0000000000004020                 dq 0.0001112636336217534, 0.0001090234561758122, 0.0001113183108652088
.data:0000000000004020                 dq 0.0001006882924839248, 0.0001112590796092291, 0.0001089841164633298
.data:0000000000004020                 dq 0.00008468431512187874
```

sub_13F3()

```assembly
__int64 __fastcall sub_13F3(int a1)
{
  __int64 result; // rax
  __int128 v2; // xmm0
  __int64 v3; // [rsp-8h] [rbp-8h]

  __asm { endbr64 }
  *((_DWORD *)&v3 - 5) = a1;
  *(&v3 - 1) = unk_2010;
  for ( *((_DWORD *)&v3 - 3) = 0x2021; ; ++*((_DWORD *)&v3 - 3) )
  {
    result = *((unsigned int *)&v3 - 3);
    if ( (signed int)result >= *((_DWORD *)&v3 - 5) )
      break;
    *((double *)&v3 - 1) = 2.718281828459045 - (double)*((signed int *)&v3 - 3) * *((double *)&v3 - 1);
  }
  v2 = (unsigned __int64)*(&v3 - 1);
  return result;
}
```

输入“qwb{abcdefghijklmnopqrstuvwxyz1234567}”，动态调试了一下，传入的参数是0x7771

*(&v3 - 1)的值貌似无法查看，但是知道被赋给了unk_2010处的值，

*(&v3 - 3)是循环的索引，从0x2021开始，每轮值加1

每一轮*(&v3 - 1) = e - *(&v3 - 1) * *(&v3 - 3)

当*(&v3 - 3)即的值大于我们传入的参数时退出循环。

所以这道题的逻辑就是通过已经给出的最后加密的结果，推出循环加密的轮次，即可得出传入的参数即flag。

首先的思路就是想办法搞出*(&v3 - 1)的初始值，然后通过爆破依次求出19个数的加密轮次。

```assembly
.rodata:0000000000002010 unk_2010        db 0CAh                 ; DATA XREF: sub_13F3+B↑o
.rodata:0000000000002010                                         ; .data.rel.ro:0000000000003DA0↓o
.rodata:0000000000002011                 db 0C3h
.rodata:0000000000002012                 db  42h ; B
.rodata:0000000000002013                 db 0ADh
.rodata:0000000000002014                 db  69h ; i
.rodata:0000000000002015                 db 0DEh
.rodata:0000000000002016                 db 0C9h
.rodata:0000000000002017                 db  3Fh ; ?
```

将hex转为double

```assembly
printf("%.20lf", 0x3fc9de69ad42c3ca);
```

0.202100000000000000000000000000

但是这个数显然存在问题，我们预期的是一个极小的数，这个数与0x2021相乘最起码应当小于e。

后来看了网上的分析，说init里面有一些奇怪的操作修改了0.2021这数字的值，所以正着来这种方法不行，只能逆着来。

经过分析，*(&v3 - 3)的值构成的数列应该是单调递减，所以最后一定趋向于0，设置一个极小的数0.000000000000001，将其逆推，爆破需要对其进行多少次反操作才能将其还原为解密后的数字。

*(&v3 - 1)—>dbl_4020循环了x次，

dbl_4020—>0.000000000000001循环了y次，

我们随机定义一个数表示x+y，对*(&v3 - 1)做逆运算，则执行y次后\*(&v3 - 1)的值与dbl_4020一定相等，我们希望求得的x就等于我们自己定义的数(x+y)减去循环的次数。

```assembly
#include<stdio.h>
int main() {
    double result[19] = {0.00009794904266317233, 0.00010270456917442, 0.00009194256152777895,
                         0.0001090322021913372, 0.0001112636336217534, 0.0001007442677411854,
                         0.0001112636336217534, 0.0001047063607908828, 0.0001112818534005219,
                         0.0001046861985862495, 0.0001112818534005219, 0.000108992856167966,
                         0.0001112636336217534, 0.0001090234561758122, 0.0001113183108652088,
                         0.0001006882924839248, 0.0001112590796092291, 0.0001089841164633298,
                         0.00008468431512187874};

    int crap[18]={0};

    for(int k=0;k<=18;k++){
        int out = 1;
        for(long j=30000; j>=10000 && out; j--) {
            double x = 0.000000000000001;
            double y = result[k];
            for (int tmp = j;tmp>=1 ; tmp--) {
                x = (2.718281828459045 - x)/(tmp+0x2021);
                if(x>0.001){
                    break;
                }
                if(x>y+0.00000000001){
                    break;
                }
                if (y-x < 0.00000000001&&y-x>=-0.00000000001) {
                    printf("Success!tmp:%d\n",tmp);
                    crap[k]=tmp;

                    out = 0;
                    break;
                }
            }
        }
    }
    for(int i=0;i<18;i++){
        printf("%d,",crap[i]);
    }
    return 0;
}
```

得到19526, 18241, 21339, 16705, 16205, 18756, 16205, 17735, 16201, 17740, 16201, 16714, 16205, 16707, 16193, 18771, 16206, 16716, 23873

```assembly
x=[19526, 18241, 21339, 16705, 16205, 18756, 16205, 17735, 16201, 17740, 16201, 16714, 16205, 16707, 16193, 18771, 16206, 16716, 23873]

flag = ""
for i in range(19):
    print(hex(x[i]))
    flag += "0x" + hex(x[i])[4:6]+ ",0x" +hex(x[i])[2:4] + ","

print(flag)

'''
>>> flag = [0x46,0x4c,0x41,0x47,0x5b,0x53,0x41,0x41,0x4d,0x3f,0x44,0x49,0x4d,0x3f,0x47,0x45,0x49,0x3f,0x4c,0x45,0x49,0x3f,0x4a,0x41,0x4d,0x3f,0x43,0x41,0x41,0x3f,0x53,0x49,0x4e,0x3f,0x4c,0x41,0x41,0x5d]
>>> xinge = ""
>>> for i in flag:
...     xinge+=chr(i)
...
>>> xinge
'FLAG[SAAM?DIM?GEI?LEI?JAM?CAA?SIN?LAA]'
>>> gg = ""
>>> for i in flag:
...     gg += chr(i+0x20)
...
>>> gg
'flag{saam_dim_gei_lei_jam_caa_sin_laa}'
>>>
'''
```

