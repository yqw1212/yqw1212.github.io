---
layout: post
title:  网鼎杯2022青龙组部分
date:   2022-08-27 00:08:01 +0300
image:  2022-08-27-cat.jpg
tags:   [ctf,reverse,网鼎杯]
---

### fakeshell

upx加壳，但是不能直接-d，对比其它文件，发现该文件被修改，使用十六进制编辑器将FUX0和FUX1改成UPX0和UPX1，然后upx -d脱壳

然后就是ida分析

主函数

```assembly
void __noreturn sub_140011C70()
{
  char *v0; // rdi
  __int64 i; // rcx
  char v2[48]; // [rsp+0h] [rbp-20h] BYREF
  char v3[228]; // [rsp+30h] [rbp+10h] BYREF
  int v4; // [rsp+114h] [rbp+F4h]

  v0 = v2;
  for ( i = 0x7Ei64; i; --i )
  {
    *(_DWORD *)v0 = 0xCCCCCCCC;
    v0 += 4;
  }
  sub_14001108C((__int64)&unk_140022008);
  puts("<<Input your flag: \n");
  sub_140011316("%200s", v3);
  if ( !(unsigned int)sub_140011235((__int64)v3) )
  {
    puts("Wrong.\n\n");
    exit(0);
  }
  v4 = j___intrinsic_setjmp((__int64)stru_14001D330, (__int64)v2);
  if ( !v4 )
    sub_1400111E5((__int64)v3, 0x14i64);
  if ( v4 == 1 )
  {
    puts("Wrong.\n\n");
    exit(0);
  }
  puts("Right!\n\n");
  exit(0);
}
```

第一个加密

```assembly
void __fastcall __noreturn sub_140011840(const char *a1)
{
  __int64 *v1; // rdi
  __int64 i; // rcx
  __int64 v3; // [rsp+0h] [rbp-20h] BYREF
  int Value; // [rsp+24h] [rbp+4h]

  v1 = &v3;
  for ( i = 0x42i64; i; --i )
  {
    *(_DWORD *)v1 = 0xCCCCCCCC;
    v1 = (__int64 *)((char *)v1 + 4);
  }
  sub_14001108C((__int64)&unk_140022008);
  Value = j_strlen(a1);
  if ( Value != 0x14 )
    j_longjmp(Buf, Value);
  for ( Value = 0; Value < 0x24; ++Value )
    a1[Value] ^= 0x66u;
  j_longjmp(Buf, 0x14);
}
```

第二个加密

```assembly
void __fastcall __noreturn sub_1400119B0(__int64 a1, int a2)
{
  __int64 *v2; // rdi
  __int64 i; // rcx
  __int64 v4; // [rsp+0h] [rbp-20h] BYREF
  unsigned __int64 index; // [rsp+28h] [rbp+8h]

  v2 = &v4;
  for ( i = 0x42i64; i; --i )
  {
    *(_DWORD *)v2 = 0xCCCCCCCC;
    v2 = (__int64 *)((char *)v2 + 4);
  }
  sub_14001108C((__int64)&unk_140022008);
  for ( index = 0i64; index < a2; ++index )
    sub_140011276((unsigned int)index, (*(char *)(index + a1) + 0xA) ^ 0x50u);
  j_longjmp(stru_14001D330, 2);
}
```

check

```assembly
__int64 __fastcall sub_140011920(int index, int a2)
{
  __int64 *v2; // rdi
  __int64 i; // rcx
  __int64 result; // rax
  __int64 v5; // [rsp+0h] [rbp-20h] BYREF

  v2 = &v5;
  for ( i = 0x3Ai64; i; --i )
  {
    *(_DWORD *)v2 = 0xCCCCCCCC;
    v2 = (__int64 *)((char *)v2 + 4);
  }
  sub_14001108C((__int64)&unk_140022008);
  result = index;
  if ( dword_14001D000[index] != a2 )
    j_longjmp(stru_14001D330, 1);
  return result;
}
```

exp

```assembly
data = [0x4B, 0x48, 0x79, 0x13, 0x45, 0x30, 0x5C, 0x49,
        0x5A, 0x79, 0x13, 0x70, 0x6D, 0x78, 0x13, 0x6F,
        0x48, 0x5D, 0x64, 0x64, 0x18]

flag = ""
for i in data:
    flag += chr(((i^0x50)-10)^0x66)
    print(((i^0x50)-10)^0x66)
print(flag)
```

flag{why_m0dify_pUx_SheLL}

### Handmake

给了go文件的源码

主函数

```assembly
func main() {
    var nFAzj, CuSkl string
    jjxXf := []byte{
        37, 73, 151, 135, 65, 58, 241, 90, 33, 86, 71, 41, 102, 241, 213, 234, 67, 144, 139, 20, 112, 150, 41, 7, 158, 251, 167, 249, 24, 129, 72, 64, 83, 142, 166, 236, 67, 18, 211, 100, 91, 38, 83, 147, 40, 78, 239, 113, 232, 83, 227, 47, 192, 227, 70, 167, 201, 249, 156, 101, 216, 159, 116, 210, 152, 234, 38, 145, 198, 58, 24, 183, 72, 143, 136, 234, 246}
    KdlaH := []byte{
        191, 140, 114, 245, 142, 55, 190, 30, 161, 18, 200, 7, 21, 59, 17, 44, 34, 181, 109, 116, 146, 145, 189, 68, 142, 113, 0, 33, 46, 184, 21, 33, 66, 99, 124, 167, 201, 88, 133, 20, 211, 67, 133, 250, 62, 28, 138, 229, 105, 102, 125, 124, 208, 180, 50, 146, 67, 39, 55, 240, 239, 203, 230, 142, 20, 90, 205, 27, 128, 136, 151, 140, 222, 92, 152, 1, 222, 138, 254, 246, 223, 224, 236, 33, 60, 170, 189, 77, 124, 72, 135, 46, 235, 17, 32, 28, 245}
    fmt.Print(MPyt9GWTRfAFNvb1(jjxXf))
    fmt.Scanf("%20s", &nFAzj)
    fmt.Print(kZ2BFvOxepd5ALDR(KdlaH))
    fmt.Scanf("%20s", &CuSkl)
    vNvUO := GwSqNHQ7dPXpIG64(nFAzj)
    YJCya := ""
    mvOxK := YI3z8ZxOKhfLmTPC(CuSkl)
    if mvOxK != nil {
        YJCya = mvOxK()
    }

    if YJCya != "" && vNvUO != "" {
        fmt.Printf("flag{ %s%s}\n", vNvUO, YJCya)
    }
}
```

Input the first function, which has 6 parameters and the third named gLIhR:

Input the second function, which has 3 callers and invokes the function named cHZv5op8rOmlAkb6:

要求输入两个函数，手动搜索一下

exp

```assembly
package main
import (
   "encoding/hex"
   "fmt"
)
func GwSqNHQ7dPXpIG64(cJPTR string) string {
   YrXQd := hex.EncodeToString([]byte(cJPTR))
   return fmt.Sprintf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", YrXQd[22], YrXQd[19], YrXQd[20], YrXQd[21], YrXQd[28], YrXQd[10], YrXQd[20], YrXQd[7], YrXQd[29], YrXQd[14], YrXQd[0], YrXQd[18], YrXQd[3], YrXQd[24], YrXQd[27], YrXQd[31])
}
func cHZv5op8rOmlAkb6(HIGXt []byte, VGvny string, ZOkKV string, eU0uD string) string {
   QTk4l := make([]byte, 20)
   Ek08m := [16]byte{
      167, 238, 45, 89, 160, 95, 34, 175, 158, 169, 20, 217, 68, 137, 231, 54}
   for i := 0; i < 16; i++ {
      QTk4l[i] += Ek08m[i] ^ HIGXt[i]
   }
   return string(QTk4l)
}
func JqZXm8BtAWL5cMEO() string {
   woaMV := []byte{
      159, 141, 72, 106, 196, 62, 16, 205, 170, 159, 36, 232, 125, 239, 208, 3}
   var ytUOA, b60Ph, meqHN string
   return cHZv5op8rOmlAkb6(woaMV, ytUOA, b60Ph, meqHN)
}
func main() {
   fmt.Printf("flag{ %s%s}", GwSqNHQ7dPXpIG64("ZlXDJkH3OZN4Mayd"), JqZXm8BtAWL5cMEO())
}
```

flag{3a4e76449355c4148ce3da2b46019f75}