---
layout: post
title:  hardchal
date:   2021-05-31 00:01:01 +0300
image:  2021-05-31-canals.jpg
tags:   [ctf,reverse,chunqiubei2021,verilog]
---

I designed a very HARD challenge for you, please enjoy~
How-to-run:

* Install Icarus Verilog

* vvp ./chal

查找[文档](https://iverilog.fandom.com/wiki/Getting_Started)

For example, the counter model in counter.v:

```assembly
module counter(out, clk, reset);

  parameter WIDTH = 8;

  output [WIDTH-1 : 0] out;
  input 	       clk, reset;

  reg [WIDTH-1 : 0]   out;
  wire 	       clk, reset;

  always @(posedge clk or posedge reset)
    if (reset)
      out <= 0;
    else
      out <= out + 1;

endmodule // counter
```

得知Verilog程序通过输入为变量赋值使用input语句。

在chal文件中直接查找input，得到变量

```assembly
.port_info 0 /OUTPUT 1 "done";
.port_info 1 /OUTPUT 32 "enc_v0";
.port_info 2 /OUTPUT 32 "enc_v1";
.port_info 3 /INPUT 32 "delta";
.port_info 4 /INPUT 32 "k0";
.port_info 5 /INPUT 32 "k1";
.port_info 6 /INPUT 32 "k2";
.port_info 7 /INPUT 32 "k3";
.port_info 8 /INPUT 32 "_v0";
.port_info 9 /INPUT 32 "_v1";
.port_info 10 /INPUT 1 "clk";
.port_info 11 /INPUT 1 "reset";
```

通过变量名字可以大胆猜测程序使用了tea加密算法。

v为要加密的数据是两个32位无符号整数*

k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位*

所以只要把加密后的v[0]，v[1]和k的四个值提取出来。

查找"k0"，找到

```assembly
v00000201bbaa8600_0 .net "_v0", 31 0, v00000201bba69040_0;  1 drivers
v00000201bba69180_0 .net "_v1", 31 0, v00000201bba68f00_0;  1 drivers
v00000201bba6a1c0_0 .net "clk", 0 0, v00000201bba697c0_0;  1 drivers
v00000201bba68280_0 .net "delta", 31 0, v00000201bba6a080_0;  1 drivers
v00000201bba68640_0 .net "done", 0 0, L_00000201bbc6b2d0;  alias, 1 drivers
v00000201bba68dc0_0 .net "enc_v0", 31 0, L_00000201bb80a1d0;  alias, 1 drivers
v00000201bba68d20_0 .net "enc_v1", 31 0, L_00000201bb80b510;  alias, 1 drivers
v00000201bba699a0_0 .net "k0", 31 0, v00000201bba69ea0_0;  1 drivers
v00000201bba6a440_0 .net "k1", 31 0, v00000201bba6a620_0;  1 drivers
v00000201bba69fe0_0 .net "k2", 31 0, v00000201bba686e0_0;  1 drivers
v00000201bba69220_0 .net "k3", 31 0, v00000201bba69a40_0;  1 drivers
v00000201bba68500_0 .net "m1", 31 0, L_00000201bbb47620;  1 drivers
v00000201bba68e60_0 .net "m2", 31 0, L_00000201bbbc8f00;  1 drivers
v00000201bba68320_0 .net "q_xor", 31 0, L_00000201bb809d70;  1 drivers
v00000201bba685a0_0 .var "q_xor_reg", 31 0;
v00000201bba68140_0 .net "reset", 0 0, v00000201bba69360_0;  1 drivers
v00000201bba6a120_0 .var "step", 10 0;
v00000201bba69cc0_0 .net "sum", 31 0, L_00000201bbc64390;  1 drivers
v00000201bba6a580_0 .net "v0", 31 0, L_00000201bbc66910;  1 drivers
v00000201bba681e0_0 .net "v1", 31 0, L_00000201bbc6b230;  1 drivers
v00000201bba69680_0 .net "x2", 31 0, L_00000201bbc5f390;  1 drivers
```

~~_v0和\_v1是输入，那么v0和v1变量储存的应该是加密后的值~~放了个P

每个变量名后面的以v开有的也是程序的地址，应该和变量的下一步操作有关系。查找其值，找到

```assembly
T_5 ;
%pushi/vec4 0, 0, 1;
%store/vec4 v00000201bba697c0_0, 0, 1;
%pushi/vec4 0, 0, 32;
%store/vec4 v00000201bba69b80_0, 0, 32;
%pushi/vec4 1, 0, 1;
%store/vec4 v00000201bba69360_0, 0, 1;
%pushi/vec4 1, 0, 32;
%store/vec4 v00000201bba68aa0_0, 0, 32;
%pushi/vec4 2654435769, 0, 32;
%store/vec4 v00000201bba6a080_0, 0, 32;
%pushi/vec4 3735928559, 0, 32;
%store/vec4 v00000201bba69ea0_0, 0, 32;
%pushi/vec4 3405691582, 0, 32;
%store/vec4 v00000201bba6a620_0, 0, 32;
%pushi/vec4 269488144, 0, 32;
%store/vec4 v00000201bba686e0_0, 0, 32;
%pushi/vec4 16843009, 0, 32;
%store/vec4 v00000201bba69a40_0, 0, 32;
```

pushi一个值，然后使用第二行后面跟的地址代表的变量store。

由此得到k的值

3735928559,3405691582,269488144,16843009

剩下加密后的值需要提取，倒着分析，先找最后结果的输出。

```assembly
T_5.2 ;
    %load/vec4 v00000201bba69d60_0;
    %cmpi/s 48, 0, 32;
    %jmp/0xz T_5.3, 5;
    %load/vec4 v00000201bba69d60_0;
    %cmpi/s 42, 0, 32;
    %jmp/0xz  T_5.4, 5;
    %vpi_func 2 1781 "$fgetc" 32, v00000201bba68b40_0 {0 0 0};
    %store/vec4 v00000201bba69400_0, 0, 32;
    %load/vec4 v00000201bba69400_0;
    %cmpi/e 4294967295, 0, 32;
    %jmp/0xz  T_5.6, 4;
    %vpi_call 2 1783 "$write", "Invalid flag\012" {0 0 0};
    %vpi_call 2 1784 "$finish" {0 0 0};
```

~~可以看到write之前有一个cmpi指令，比较了是否为4294967295，所以这个应该是加密结果的其中一个数字~~又放P

之前搜索的关键字是程序执行失败的"Invalid flag"，后来想到可以搜索执行成功的语句。

```assembly
T_3.16 ;
    %load/vec4 v00000201bba6a8a0_0;
    %cmpi/e 5, 0, 32;
    %jmp/0xz  T_3.20, 4;
    %load/vec4 v00000201bba68460_0;
    %cmpi/ne 3775107838, 0, 32;
    %flag_mov 8, 4;
    %load/vec4 v00000201bba6a4e0_0;
    %cmpi/ne 3138262082, 0, 32;
    %flag_or 4, 8;
    %jmp/0xz  T_3.22, 4;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v00000201bba68aa0_0, 0, 32;
T_3.22 ;
    %load/vec4 v00000201bba68aa0_0;
    %cmpi/ne 0, 0, 32;
    %jmp/0xz  T_3.24, 4;
    %vpi_call 2 1661 "$write", "Congratulations~\012" {0 0 0};
    %jmp T_3.25;
```

有两个cmpi指令后跟了比较大的数。前一个为v[0]，后一个为v[1]。

3775107838,3138262082

直接解密

```assembly
#include <stdio.h>
#include <stdint.h>

void decrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i<32; i++) {                         /* basic cycle start */
        v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
        v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
        sum -= delta;
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}

int main() {

    uint32_t v[2]={3775107838,3138262082}, k[4]={3735928559,3405691582,269488144,16843009};

    decrypt(v, k);
    printf("%u,%u",v[0],v[1]);

    return 0;
}
```

结果：863830016,0

后来发现其实不止T_3.16有两个加密结果的比较。

```assembly
3
3208527578,423585179
3.0
699878777,1677098023
3.4
1664154466,3464319808
3.8
3532878313,2922316096
3.12
2276156225,33987677
3.16
3775107838,3138262082
```

修改解密脚本

```assembly
#include <stdio.h>
#include <stdint.h>


void encrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i < 32; i++) {                       /* basic cycle start */
        sum += delta;
        v0 += ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
        v1 += ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}


void decrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i<32; i++) {                         /* basic cycle start */
        v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
        v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
        sum -= delta;
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}


int main() {

    uint32_t k[4]={3735928559,3405691582,269488144,16843009};

    uint32_t v[6][2] = {
                        {3208527578, 423585179},
                        {699878777, 1677098023},
                        {1664154466, 3464319808},
                        {3532878313, 2922316096},
                        {2276156225, 33987677},
                        {3775107838, 3138262082}
                        };

    for(int i=0; i<6; i++) {
        decrypt(v[i], k);
        printf("%x%x", v[i][0], v[i][1]);
    }

    return 0;
}
```

666c61677b64383863613536612d623933342d313165622d383532392d3032343261633133303030337d00000

十六进制转字符串得到

flag{d88ca56a-b934-11eb-8529-0242ac130003}