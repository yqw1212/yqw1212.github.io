---
layout: post
title:  Principle of computer composition
date:   2020-10-13 18:05:55 +0300
image:  11.jpg
tags:   [study,note]
---

### 概论

电子模拟计算机从总体上来说可以分为两大类：电子模拟计算机和电子数字计算机。

储存概念是由冯·诺依曼等人首先提出来的：

* 计算机（指硬件）应由运算器、存储器、控制器、输入设备和输出设备五大基本部件组成。
* 计算机内部采用二进制来表示指令和数据。
* 将编好的程序和原始数据事先存入存储器中，然后再启动计算机工作，这就是存储程序的基本含义。

冯·诺依曼计算机的主要弱点：

* 存储器访问会成为瓶颈

通常将运算器和控制器合称为中央处理器（Central Process Unit，CPU）。中央处理器和主存储器（内存储器）一起组成主机部分。除去主机以外的硬件装置（如输入设备、输出设备和辅助存储器等）称为外围设备或外部设备。

Cache（高速缓冲存储器）的存取速度比主存更快，但容量更小，用来存放当前最急需处理的程序和数据，以便快速地向CPU提供指令和数据。

运算器又称为算术逻辑运算部件（Arithmetic and Logical Unit，ALU）。运算器的核心是加法器，运算器中还有若干个通用寄存器或累加寄存器，用来暂存 操作数并存放运算结果。寄存器的存取速度比储存器的存取速度快得多。

总线（Bus）是一组能为多个部件服务的公共信息传送线路，它能分时地发送与接收各部件的信息。计算机中采用总线结构，可以大大地减少信息传送线的数量，又可以提高计算机扩充主存及外部设备的灵活性。

根据程序（指令序列）和数据的存放形式，存储器设计思想又可以分为冯·诺伊曼结构和哈佛结构。

哈佛结构的指令和数据是完全分开的，存储器分为两部分，一个是程序存储器，用来存放指令，另一个是数据存储器，用来存放数据。哈佛结构至少有两条总线：程序存储器（PM）的数据总线和地址总线，数据存储器（DM）的数据总线和地址总线。这种分离的程序总线和数据总线，可允许同时获取指令字（来自程序存储器）和操作数（来自数据存储器）而互不干扰。

现代计算机系统是一个硬件和软件组成的综合体，可以把它当作按功能划分的多级层次结构

* 第零级是硬联逻辑级，这是计算机的内核，由门、触发器等逻辑电路组成。
* 第一级是微程序机器级，这级的机器语言是微指令集，用微指令编写的微程序一般是直接由硬件执行的。
* 第二级是传统机器级，这级的机器语言是该级的指令集，用机器指令编写的程序可以由微程序进行解释。
* 第三级是操作系统机器级
* 第四级是汇编语言机器级
* 第五级是高级语言机器级
* 第六级是应用语言机器级，这一级是为了使计算机满足某种用途而专门设计的，因此这一级语言就是各种面向问题的应用语言。

一个主储存器所能存储的全部信息量称为主存容量。

#### 运算速度

吞吐量是指系统在单位时间内处理请求的数量。响应时间是指系统对请求作出响应的时间，响应时间包括CPU时间（运行一个程序所花费的时间）与等待时间（用于磁盘访问、存储器访问、I/O操作、操作系统开销等时间）的总和。

CPU的主频又称为时钟频率，表示在CPU内数字脉冲信号振荡的速度。主频的倒数就是CPU时钟周期，这是CPU中最小的时间元素。每个动作至少需要一个时钟周期。

CPI（Cycles per Instruction）是指每条指令执行所用的时钟周期数。CPI参数经常用IPC（Instruction per Cycle）表示，即每个时钟周期执行的指令数。
$$
IPC=\frac{1}{CPI}
$$

$$
CPU执行时间=\frac{CPU时钟周期数}{时钟频率}=\frac{指令数×CPI}{时钟频率}
$$

MIPS（Million Instructions per Second）表示每秒执行多少百万条指令。对于一个给定的程序，MIPS定义为：
$$
MIPS=\frac{指令条数}{执行时间×10^6}=\frac{主频}{CPI}=主频×IPC
$$
这里所说的指令一般是指加、减运算这类短指令。

MFLOPS（Million Floating-point Operations per Secong）表示每秒执行多少百万次浮点运算。
$$
MFLOPS=\frac{浮点操作次数}{执行时间×10^6}
$$

## 第二章

### 进位计数制之间的转换

#### 二进制转换成十进制的方法

(1101.01)<sub>2</sub>=1×23+1×2<sup>2</sup>+0×2<sup>1</sup>+1×2<sup>0</sup>+ 0×2<sup>-1</sup>+1×2<sup>-2</sup> =8+4+1+0.25=13.25

#### 十进制转换成二进制的方法

整数部分的转换

* 除2取余法（基数除法）

* 减权定位法

小数部分的转换

* 乘2取整法（基数乘法）

#### 表示范围

**n表示字长的有效位（带符号位）**

|      | 小数                                            | 整数                                     | 表示数的个数    |
| ---- | ----------------------------------------------- | ---------------------------------------- | --------------- |
| 原码 | 1- 2<sup>-(n-1)</sup> ~ -(1-2<sup>-(n-1)</sup>) | 2<sup>n-1</sup>-1~ - (2<sup>n-1</sup>-1) | 2<sup>n</sup>-1 |
| 补码 | 1- 2<sup>-(n-1)</sup> ~ -1                      | 2<sup>n-1</sup>-1~ -2<sup>n-1</sup>      | 2<sup>n</sup>   |

[X]<sub>移</sub> = 2<sup>n-1</sup> + X       2<sup>n-1</sup>-1 ≥ X ≥ -2<sup>n-1</sup> 

### 定点乘法运算

浮点数补码一位乘法原理

* x任意，y正

  [x]<sub>补 </sub>=2+x=(2<sup>n+1</sup>+x)mod2

  [y]<sub>补 </sub>=y

  [x]<sub>补 </sub>[y]<sub>补 </sub>=2<sup>n+1</sup>y+xy=(2+xy)mod2

  [x]<sub>补 </sub>[y]<sub>补 </sub>=[xy]<sup>补</sup>

* x任意，y负

  [x]<sub>补 </sub>=x<sub>0</sub>x<sub>1</sub>x<sub>2</sub>……x<sub>n</sub>

  [y]<sub>补</sub>=1.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>

  y=[y]<sub>补</sub>-2=0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>-1

  xy=x(0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>)-x

  [xy]<sub>补</sub>=[x(0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>)]<sub>补</sub>+[-x]<sub>补</sub>

  ∵0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>>0

  ∴[x(0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>)]<sub>补</sub>=[x]<sub>补</sub>(0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>)

  [xy]<sub> 补</sub>=[x]<sub>补</sub>(0.y<sub>0</sub>y<sub>1</sub>y<sub>2</sub>……y<sub>n</sub>)+[-x]<sub>补</sub>

![]({{site.baseurl}}/img/2020-10-13-zheng.jpg)

![]({{site.baseurl}}/img/2020-10-13-fu.jpg)

老师写的证明不是很规范……但是差不多就是这个道理

