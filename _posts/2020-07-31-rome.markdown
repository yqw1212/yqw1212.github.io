---
layout: post
title:  rome(ACTF新生赛2020)
date:   2020-07-31 00:00:01 +0300
image:  2020-07-31-thunderstorm.jpg
tags:   [ctf,reverse,ACTF新生赛]
---

解压，ida打开

打开字符串窗口，找到

```assembly
Please input:
```

点击找到所在的_func()函数，反编译。

```assembly
int func()
{
  	int result; // eax
    int v1; // [esp+14h] [ebp-44h]
    int v2; // [esp+18h] [ebp-40h]
    int v3; // [esp+1Ch] [ebp-3Ch]
    int v4; // [esp+20h] [ebp-38h]
    unsigned __int8 v5; // [esp+24h] [ebp-34h]
    unsigned __int8 v6; // [esp+25h] [ebp-33h]
    unsigned __int8 v7; // [esp+26h] [ebp-32h]
    unsigned __int8 v8; // [esp+27h] [ebp-31h]
    unsigned __int8 v9; // [esp+28h] [ebp-30h]
    int v10; // [esp+29h] [ebp-2Fh]
    int v11; // [esp+2Dh] [ebp-2Bh]
    int v12; // [esp+31h] [ebp-27h]
    int v13; // [esp+35h] [ebp-23h]
    unsigned __int8 v14; // [esp+39h] [ebp-1Fh]
    char v15; // [esp+3Bh] [ebp-1Dh]
    char v16; // [esp+3Ch] [ebp-1Ch]
    char v17; // [esp+3Dh] [ebp-1Bh]
    char v18; // [esp+3Eh] [ebp-1Ah]
    char v19; // [esp+3Fh] [ebp-19h]
    char v20; // [esp+40h] [ebp-18h]
    char v21; // [esp+41h] [ebp-17h]
    char v22; // [esp+42h] [ebp-16h]
    char v23; // [esp+43h] [ebp-15h]
    char v24; // [esp+44h] [ebp-14h]
    char v25; // [esp+45h] [ebp-13h]
    char v26; // [esp+46h] [ebp-12h]
    char v27; // [esp+47h] [ebp-11h]
    char v28; // [esp+48h] [ebp-10h]
    char v29; // [esp+49h] [ebp-Fh]
    char v30; // [esp+4Ah] [ebp-Eh]
    char v31; // [esp+4Bh] [ebp-Dh]
    int i; // [esp+4Ch] [ebp-Ch]

    v15 = 81;
    v16 = 115;
    v17 = 119;
    v18 = 51;
    v19 = 115;
    v20 = 106;
    v21 = 95;
    v22 = 108;
    v23 = 122;
    v24 = 52;
    v25 = 95;
    v26 = 85;
    v27 = 106;
    v28 = 119;
    v29 = 64;
    v30 = 108;
    v31 = 0;
    printf("Please input:");
    scanf("%s", &v5);
    result = v5;
  	if ( v5 == 'A' )
  	{
    	result = v6;
    	if ( v6 == 'C' )
    	{
      		result = v7;
      		if ( v7 == 'T' )
      		{
        		result = v8;
        		if ( v8 == 'F' )
        		{
          			result = v9;
          			if ( v9 == '{' )
          			{
            			result = v14;
            			if ( v14 == '}' )
            			{
                            v1 = v10;
                            v2 = v11;
                            v3 = v12;
                            v4 = v13;
                            for ( i = 0; i <= 15; ++i )
                            {
                                if ( *((_BYTE *)&v1 + i) > 64 && *((_BYTE *)&v1 + i) <= 90 )
                               		*((_BYTE *)&v1 + i) = (*((char *)&v1 + i) - 51) % 26 + 65;
                                if ( *((_BYTE *)&v1 + i) > 96 && *((_BYTE *)&v1 + i) <= 122 )
                                	*((_BYTE *)&v1 + i) = (*((char *)&v1 + i) - 79) % 26 + 97;
                            }
                            for ( i = 0; i <= 15; ++i )
                            {
                                result = (unsigned __int8)*(&v15 + i);
                                if ( *((_BYTE *)&v1 + i) != (_BYTE)result )
                                	return result;
                            }
                            result = printf("You are correct!");
                        }
          			}
        		}
      		}
    	}
  	}
  	return result;
}
```

可以看出，将输入的字符串（flag）的花括号间的内容经过第一次循环中的变化后，与已经给出的v15~v30变量比较必须相同。

而在第一次循环中，根据判断语句的条件，只改变了输入的字符串中的字母，即如果输入的字符非字母则不改变。

由此编写C语言脚本

```assembly
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int a[16] = {81,115,119,51,115,106,95,108,122,52,95,85,106,119,64,108};
    for(int i=0;i<16;i++)
    {
        int flag = 0;
        for(int j=65;j<=122;j++)
        {
            int k=j;
            if(k>64 && k<=90)
            {
                k = (k-51)%26+65;
            }
            if(k>96 && k<=122)
            {
                k = (k-79)%26+97;
            }

            if(k == a[i]){
                printf("%c",j);
                flag = 1;
                break;
            }
        }
        if(flag == 0)
        {
            printf("%c",a[i]);
        }
    }
    return 0;
}

```

得到flag中的花括号间的字符串

