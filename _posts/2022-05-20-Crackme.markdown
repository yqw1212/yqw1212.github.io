---
layout: post
title:  Crackme[2022DASCTF Apr X FATE 防疫挑战赛]
date:   2022-05-20 00:08:01 +0300
image:  2022-05-20-road.jpg
tags:   [ctf,reverse,DASCTF,antidbg,MFC]
---

康复训练

![]({{site.baseurl}}/img/2022-05-20-gui.jpg)

通过查找字符串“Wrong!!!”定位到主要函数

```assembly
int __thiscall sub_4031E0(int this)
{
  const void *v1; // eax
  const void *v2; // eax
  int result; // eax
  unsigned int Size; // [esp+18h] [ebp-230h]
  size_t pdwDataLen; // [esp+20h] [ebp-228h] BYREF
  void *Buf1; // [esp+24h] [ebp-224h] BYREF
  const void *v8; // [esp+28h] [ebp-220h] BYREF
  BYTE *v9; // [esp+2Ch] [ebp-21Ch] BYREF
  size_t dwDataLen; // [esp+30h] [ebp-218h] BYREF
  size_t v11; // [esp+34h] [ebp-214h] BYREF
  DWORD v12; // [esp+38h] [ebp-210h] BYREF
  BYTE v13[260]; // [esp+3Ch] [ebp-20Ch] BYREF
  BYTE pbData[260]; // [esp+140h] [ebp-108h] BYREF

  CWnd::UpdateData((CWnd *)this, 1);
  memset(pbData, 0, sizeof(pbData));
  memset(v13, 0, sizeof(v13));
  Size = std::istreambuf_iterator_char_std::char_traits_char__::operator___void_(this + 0xD8);
  pdwDataLen = std::istreambuf_iterator_char_std::char_traits_char__::operator___void_(this + 0xD4);
  dwDataLen = 0;
  v11 = 0;
  v12 = 0;
  v1 = (const void *)sub_402590(Size);
  memmove(pbData, v1, Size);
  v2 = (const void *)sub_402590(pdwDataLen);
  memmove(v13, v2, pdwDataLen);
  if ( Size != 8 && pdwDataLen != 0x20 )
    return wrong((CWnd *)this);
  sub_403510(pbData, Size >> 1, 0x8003u, (int)&Buf1, (int)&dwDataLen);
  sub_403510(&pbData[4], Size >> 1, 0x8004u, (int)&v8, (int)&v11);
  sub_403510(pbData, Size, 0x8003u, (int)&v9, (int)&v12);
  memcmp(Buf1, (const void *)(this + 0xDC), dwDataLen);
  if ( memcmp(v8, (const void *)(this + 0x1E0), v11) )
    return wrong((CWnd *)this);
  sub_4036E0(v9, v12, v13, &pdwDataLen, 0x104u);
  if ( !memcmp(v13, (const void *)(this + 0x2E4), pdwDataLen) )
    result = success((CWnd *)this);
  else
    result = wrong((CWnd *)this);
  return result;
}
```

memmove用于拷贝字节，如果目标区域和源区域有重叠的话，memmove能够保证源串在被覆盖之前将重叠区域的字节拷贝到目标区域中，但复制后源内容会被更改。但是当目标区域与源区域没有重叠则和memcpy函数功能相同。

查看sub_403510函数

```assembly
bool __stdcall sub_403510(BYTE *pbData, DWORD dwDataLen, ALG_ID Algid, int a4, int a5)
{
  BYTE *v6; // [esp+10h] [ebp-20h]
  BOOL v7; // [esp+18h] [ebp-18h]
  BYTE v8[4]; // [esp+1Ch] [ebp-14h] BYREF
  DWORD pdwDataLen; // [esp+20h] [ebp-10h] BYREF
  HCRYPTPROV phProv; // [esp+24h] [ebp-Ch] BYREF
  HCRYPTHASH phHash; // [esp+28h] [ebp-8h] BYREF

  phProv = 0;
  phHash = 0;
  v6 = 0;
  *(_DWORD *)v8 = 0;
  pdwDataLen = 0;
  v7 = CryptAcquireContextA(&phProv, 0, 0, 0x18u, 0xF0000000);
  if ( v7 )
  {
    v7 = CryptCreateHash(phProv, Algid, 0, 0, &phHash);
    if ( v7 )
    {
      v7 = CryptHashData(phHash, pbData, dwDataLen, 0);
      if ( v7 )
      {
        pdwDataLen = 4;
        v7 = CryptGetHashParam(phHash, 4u, v8, &pdwDataLen, 0);
        if ( v7 )
        {
          v6 = (BYTE *)sub_404540(*(_DWORD *)v8);
          if ( v6 )
          {
            memset(v6, 0, *(size_t *)v8);
            v7 = CryptGetHashParam(phHash, 2u, v6, (DWORD *)v8, 0);
            if ( v7 )
            {
              *(_DWORD *)a4 = v6;
              *(_DWORD *)a5 = *(_DWORD *)v8;
            }
          }
          else
          {
            v7 = 0;
          }
        }
      }
    }
  }
  if ( !v7 && v6 )
    sub_40453B(v6);
  if ( phHash )
    CryptDestroyHash(phHash);
  if ( phProv )
    CryptReleaseContext(phProv, 0);
  return v7;
}
```

CryptCreateHash的第三个参数

| Identifier | Value      | Description                                                  |
| ---------- | ---------- | ------------------------------------------------------------ |
| CALG_MD5   | 0x00008003 | MD5 hashing algorithm. This algorithm is supported by the [Microsoft Base Cryptographic Provider](https://docs.microsoft.com/en-us/windows/win32/seccrypto/microsoft-base-cryptographic-provider). |
| CALG_SHA   | 0x00008004 | SHA hashing algorithm. This algorithm is supported by the [Microsoft Base Cryptographic Provider](https://docs.microsoft.com/en-us/windows/win32/seccrypto/microsoft-base-cryptographic-provider). |

查看sub_4036E0函数

```assembly
bool __stdcall sub_4036E0(BYTE *pbData, DWORD dwDataLen, BYTE *a3, DWORD *pdwDataLen, DWORD dwBufLen)
{
  BOOL v6; // [esp+4h] [ebp-18h]
  HCRYPTKEY phKey; // [esp+Ch] [ebp-10h] BYREF
  HCRYPTPROV phProv; // [esp+10h] [ebp-Ch] BYREF
  HCRYPTHASH phHash; // [esp+14h] [ebp-8h] BYREF

  phProv = 0;
  phHash = 0;
  phKey = 0;
  v6 = CryptAcquireContextA(&phProv, 0, 0, 0x18u, 0xF0000000);
  if ( v6 )
  {
    v6 = CryptCreateHash(phProv, 0x8003u, 0, 0, &phHash);
    if ( v6 )
    {
      v6 = CryptHashData(phHash, pbData, dwDataLen, 0);
      if ( v6 )
      {
        v6 = CryptDeriveKey(phProv, 0x660Eu, phHash, 1u, &phKey);
        if ( v6 )
          v6 = CryptEncrypt(phKey, 0, 1, 0, a3, pdwDataLen, dwBufLen);
      }
    }
  }
  if ( phKey )
    CryptDestroyKey(phKey);
  if ( phHash )
    CryptDestroyHash(phHash);
  if ( phProv )
    CryptReleaseContext(phProv, 0);
  return v6;
}
```

CryptCreateHash

This function generates cryptographic session keys derived from base data.  This function guarantees that all keys generated from the same base data are  identical, provided the same cryptographic service provider (CSP) and algorithms  are used. The base data can be a password or any other user data.

This function is the same as the [CryptGenKey](wce50lrfcryptgenkey.htm) function, except that the  generated session keys are derived from base data instead of being random. The  **CryptDeriveKey** function can only generate session keys and cannot be used  to generate public/private key pairs.

A handle to the session key is returned in the *phKey* parameter. This  handle can then be used with any CryptoAPI functions that require key handles.

```assembly
BOOL CRYPTFUNC CryptDeriveKey(
    HCRYPTPROV hProv,
    ALG_ID Algid, 
    HCRYPTHASH hBaseData,
    DWORD dwFlags,
    HCRYPTKEY* phKey
);
```

第三个参数

| Identifier   | Value      | Description                                                  |
| :----------- | :--------- | :----------------------------------------------------------- |
| CALG_AES_128 | 0x0000660e | 128 bit AES. This algorithm is supported by the [Microsoft AES Cryptographic Provider](https://docs.microsoft.com/en-us/windows/win32/seccrypto/microsoft-aes-cryptographic-provider). |

key的长度为8，flag的长度为0x20

使用sub_403510函数给key的前半部分进行MD5，对后半部分进行SHA，

然后对整个key进行MD5，这个值用来生成AES加密的密钥，最后对flag进行AES加密。

每一个加密的结果都要和内存中的值进行比较，所以可以动态调式提取加密的结果。

但是在动态调试时可以发现程序中应该存在反调试。

在strings界面可以发现`ZwSetInformationThread`反调试的特征

查看交叉引用定位到函数

```assembly
int __thiscall sub_C32E60(LPARAM *this)
{
  const CHAR *v1; // eax
  HMODULE v2; // eax
  HANDLE v3; // eax
  FARPROC ZwSetInformationThread; // [esp+8h] [ebp-24h]
  int i; // [esp+14h] [ebp-18h]
  int j; // [esp+14h] [ebp-18h]
  char v9[4]; // [esp+18h] [ebp-14h] BYREF
  int v10; // [esp+28h] [ebp-4h]

  CDialog::OnInitDialog((CDialog *)this);
  if ( sub_C33AC0(0) )
  {
    sub_C31CB0(4u);
    sub_C32100(v9);
    v10 = 0;
    sub_C33D40(0x65);
    if ( !(unsigned __int8)sub_C33A90(v9) )
    {
      sub_C33A60(0x800u, 0, 0);
      v1 = (const CHAR *)std::_Ptr_base<_EXCEPTION_RECORD const>::get(v9);
      sub_C33A60(0, 0x10u, v1);
    }
    v10 = 0xFFFFFFFF;
    sub_C329F0(v9);
  }
  sub_C33A30(this[0x34], 1u);
  sub_C33A30(this[0x34], 0);
  v2 = GetModuleHandleA("ntdll.dll");
  ZwSetInformationThread = GetProcAddress(v2, "ZwSetInformationThread");
  v3 = GetCurrentThread();
  ((void (__stdcall *)(HANDLE, int, _DWORD, _DWORD))ZwSetInformationThread)(v3, 0x11, 0, 0);
  for ( i = 0; i < 0x10; ++i )
    *((_BYTE *)this + i + 0xDC) ^= i;
  for ( j = 0; j < 0x14; ++j )
    *((_BYTE *)this + j + 0x1E0) ^= j;
  return 1;
}
```

如何绕过

注意到该处 ZwSetInformationThread 函数的第 2 个参数为 ThreadHideFromDebugger，其值为 0x11。调试执行到该函数时，若发现第 2 个参数值为 0x11，跳过或者将 0x11 修改为其他值即可

也可以使用OD odsharp插件直接绕过

这里参考了https://bbs.pediy.com/thread-272642.htm

![]({{site.baseurl}}/img/2022-05-20-ol.jpg)

断点要断在push第二个参数的时候，寄存器的值就是栈中的地址

![]({{site.baseurl}}/img/2022-05-20-mem.jpg)

0x9F, 0x77, 0xC2, 0xA4, 0xAC, 0x5C, 0x0A, 0x67, 0x13, 0x21, 0xBB, 0xE1, 0xE9, 0x97, 0x2A, 0xF6

9F77C2A4AC5C0A671321BBE1E9972AF6

0xD5, 0x9F, 0x8E, 0x94, 0xB0, 0xE1, 0xDE, 0x6E, 0x32, 0x95, 0x18, 0xA0, 0xC4, 0x44, 0xAA, 0x94, 0xDE, 0x7C, 0x8D, 0x44

D59F8E94B0E1DE6E329518A0C444AA94DE7C8D44

找个在线网站解密，分别为（https://crackstation.net/）

得到key为NocTuRne

MD5为：5C53A4A41D52437A9FAdE9C26CA59090

提取flag加密后的结果

```assembly
0x5B, 0x9C, 0xEE, 0xB2, 0x3B, 0xB7, 0xD7, 0x34, 0xF3, 0x1B, 
0x75, 0x14, 0xC6, 0xB2, 0x1F, 0xE8, 0xDE, 0x33, 0x44, 0x74, 
0x75, 0x1B, 0x47, 0x6A, 0xD4, 0x37, 0x51, 0x88, 0xFC, 0x67, 
0xE6, 0x60, 0xDA, 0x0D, 0x58, 0x07, 0x81, 0x43, 0x53, 0xEA, 
0x7B, 0x52, 0x85, 0x6C, 0x86, 0x65, 0xAF, 0xB4
```

最后写脚本解密AES

```assembly
// aes.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <Windows.h>
#include <stdio.h>
#include <wincrypt.h>

int main(){
    BYTE pbData[] = { 0x5c,0x53,0xa4,0xa4,0x1d,0x52,0x43,0x7a,0x9f,0xa1,0xe9,0xc2,0x6c,0xa5,0x90,0x90,0x0 };  //key_buf
    BYTE flag_encrypt[] = { 0x5B, 0x9C, 0xEE, 0xB2, 0x3B, 0xB7, 0xD7, 0x34, 0xF3, 0x1B, 0x75, 0x14, 0xC6, 0xB2, 0x1F, 0xE8, 0xDE, 0x33, 0x44, 0x74, 0x75, 0x1B, 0x47, 0x6A, 0xD4, 0x37, 0x51, 0x88, 0xFC, 0x67, 0xE6, 0x60, 0xDA, 0x0D, 0x58, 0x07, 0x81, 0x43, 0x53, 0xEA, 0x7B, 0x52, 0x85, 0x6C, 0x86, 0x65, 0xAF, 0xB4,0x0 };
    DWORD dwDataLen = 0x10;
    DWORD ddwDataLen;
    DWORD* pdwDataLen = &ddwDataLen;
    *pdwDataLen = 0x20;


    BOOL v6; // [esp+4h] [ebp-18h]
    HCRYPTKEY phKey; // [esp+Ch] [ebp-10h] BYREF
    HCRYPTPROV phProv; // [esp+10h] [ebp-Ch] BYREF
    HCRYPTHASH phHash; // [esp+14h] [ebp-8h] BYREF

    phProv = 0;
    phHash = 0;
    phKey = 0;
    v6 = CryptAcquireContextA(&phProv, 0, 0, 0x18u, 0xF0000000);
    if (v6)
    {
        v6 = CryptCreateHash(phProv, 0x8003u, 0, 0, &phHash);
        if (v6)
        {
            v6 = CryptHashData(phHash, pbData, dwDataLen, 0);
            if (v6)
            {
                v6 = CryptDeriveKey(phProv, 0x660Eu, phHash, 1u, &phKey);// key的md5值再生成aes密钥
                if (v6)
                    v6 = CryptDecrypt(phKey, 0, 1, 0, flag_encrypt, pdwDataLen);
                printf("%s", flag_encrypt);
            }
        }
    }
    if (phKey)
        CryptDestroyKey(phKey);
    if (phHash)
        CryptDestroyHash(phHash);
    if (phProv)
        CryptReleaseContext(phProv, 0);
    return v6;
}
```

编译时选择Release模型，运行得到flag

DASCTF{H@sh_a^d_Aes_6y_W1nCrypt}