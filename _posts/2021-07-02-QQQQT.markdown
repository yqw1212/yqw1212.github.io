---
layout: post
title:  QQQQT
date:   2021-07-02 00:01:01 +0300
image:  2021-07-02-hydrangeas.jpg
tags:   [ctf,reverse,gkctf2021,QT]
---

ida打开，找不到主函数，搜索字符串可以找到check字符串

```assembly
.rdata:00404A7C aCheck          db 'check',0            ; DATA XREF: sub_4015B0+44E↑o
.rdata:00404A82                 align 4
.rdata:00404A84 aHere           db 'here',0             ; DATA XREF: sub_4015B0+480↑o
.rdata:00404A89                 align 4
.rdata:00404A8C a56fkop8khwcf3v db '56fkoP8KhwCf3v7CEz',0
.rdata:00404A8C                                         ; DATA XREF: sub_4012F0+1FA↑o
.rdata:00404A9F                 align 10h
.rdata:00404AA0 xmmword_404AA0  xmmword 47464544434241393837363534333231h
.rdata:00404AA0                                         ; DATA XREF: sub_4012F0+97↑r
.rdata:00404AB0 xmmword_404AB0  xmmword 595857565554535251504E4D4C4B4A48h
.rdata:00404AB0                                         ; DATA XREF: sub_4012F0+AF↑r
.rdata:00404AC0 xmmword_404AC0  xmmword 706F6E6D6B6A6968676665646362615Ah
.rdata:00404AC0                                         ; DATA XREF: sub_4012F0+BC↑r
.rdata:00404AD0 qword_404AD0    dq 7877767574737271h    ; DATA XREF: sub_4012F0+CF↑r
.rdata:00404AD8 word_404AD8     dw 7A79h                ; DATA XREF: sub_4012F0+DA↑r
.rdata:00404ADA byte_404ADA     db 0                    ; DATA XREF: sub_4012F0+E4↑r
.rdata:00404ADB                 align 4
.rdata:00404ADC aFlag           db 'flag',0             ; DATA XREF: sub_4012F0+23D↑o
.rdata:00404AE1                 align 8
```

看到有两个字符串都很可疑：'56fkoP8KhwCf3v7CEz'和'flag'，查看交叉引用找到加密函数

```assembly
int __thiscall sub_4012F0(_DWORD *this)
{
  int v1; // ST0C_4
  int v2; // edi
  _BYTE *v3; // esi
  const char *v4; // edx
  _BYTE *v5; // esi
  int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // ecx
  int v10; // edx
  int v11; // edi
  int v12; // esi
  _BYTE *v13; // ecx
  unsigned int v14; // ecx
  _DWORD *v16; // [esp+Ch] [ebp-94h]
  char v17; // [esp+10h] [ebp-90h]
  char v18; // [esp+14h] [ebp-8Ch]
  _BYTE *v19; // [esp+18h] [ebp-88h]
  const char *v20; // [esp+1Ch] [ebp-84h]
  int v21; // [esp+20h] [ebp-80h]
  int v22; // [esp+24h] [ebp-7Ch]
  _BYTE *v23; // [esp+28h] [ebp-78h]
  __int128 v24; // [esp+2Ch] [ebp-74h]
  __int128 v25; // [esp+3Ch] [ebp-64h]
  __int128 v26; // [esp+4Ch] [ebp-54h]
  __int64 v27; // [esp+5Ch] [ebp-44h]
  __int16 v28; // [esp+64h] [ebp-3Ch]
  char v29; // [esp+66h] [ebp-3Ah]
  __int128 v30; // [esp+68h] [ebp-38h]
  __int128 v31; // [esp+78h] [ebp-28h]
  __int64 v32; // [esp+88h] [ebp-18h]
  int v33; // [esp+9Ch] [ebp-4h]

  v16 = this;
  MEMORY[0x5FF6](*(_DWORD *)(this[6] + 4), &v17);
  v33 = 0;
  MEMORY[0x7C7C](&v17, &v18);
  LOBYTE(v33) = 1;
  v20 = (const char *)MEMORY[0x7C48](&v18);
  v30 = 0i64;
  v31 = 0i64;
  v32 = 0i64;
  v24 = xmmword_404AA0;
  v25 = xmmword_404AB0;
  v22 = 138 * strlen(v20) / 0x64;
  v26 = xmmword_404AC0;
  v28 = 31353;
  v27 = qword_404AD0;
  v29 = 0;
  v1 = v22 + 1;
  v2 = 0;
  v23 = (_BYTE *)MEMORY[0x8114](v22 + 1);
  v3 = v23;
  sub_402C08(v23, 0, v1);
  v4 = v20;
  v21 = (int)(v20 + 1);
  if ( &v20[strlen(v20) + 1] != v20 + 1 )
  {
    v5 = &v3[v22];
    v19 = v5;
    while ( 1 )
    {
      v6 = ((char)*v5 << 8) + v4[v2];
      v21 = v6;
      v7 = v6 / 58;
      *v5 = v21 - 58 * v7;
      if ( v7 )
      {
        do
        {
          v8 = (char)*(v5-- - 1);
          v9 = (v8 << 8) + v7;
          v21 = v9 / 58;
          *v5 = v9 % 58;
          v7 = v21;
        }
        while ( v21 );
        v5 = v19;
      }
      if ( ++v2 >= strlen(v20) )
        break;
      v4 = v20;
    }
    v3 = v23;
  }
  v10 = 0;
  if ( !*v3 )
  {
    do
      ++v10;
    while ( !v3[v10] );
  }
  v11 = v22;
  if ( v10 <= v22 )
  {
    v12 = v3 - (_BYTE *)&v30;
    do
    {
      v13 = (char *)&v30 + v10++;
      *v13 = *((_BYTE *)&v24 + (char)v13[v12]);
    }
    while ( v10 <= v11 );
  }
  if ( !MEMORY[0x7C1A](&v30, "56fkoP8KhwCf3v7CEz") )
  {
    if ( v20 )
      v14 = strlen(v20);
    else
      v14 = -1;
    v23 = (_BYTE *)MEMORY[0x7CCC](v20, v14);
    LOBYTE(v33) = 2;
    v22 = MEMORY[0x7CCC]("flag", 4);
    LOBYTE(v33) = 3;
    MEMORY[0x6124](v16, &v22, &v23, 1024, 0);
    MEMORY[0x7C66](&v22);
    MEMORY[0x7C66](&v23);
  }
  MEMORY[0x7C30](&v18);
  return MEMORY[0x7C66]();
}
```

根据代码中的除58和模58可以猜测是base58操作。

后来知道QT程序使用Enigma Virtual Box打包，可以使用EnigmaVBUnpacker将其解包。

解包后再用ida打开

```assembly
int __thiscall sub_4012F0(_DWORD *this)
{
  size_t v1; // ST0C_4
  int v2; // edi
  _BYTE *v3; // esi
  const char *v4; // edx
  _BYTE *v5; // esi
  int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // ecx
  int v10; // edx
  int v11; // edi
  int v12; // esi
  _BYTE *v13; // ecx
  unsigned int v14; // ecx
  _DWORD *v16; // [esp+Ch] [ebp-94h]
  char v17; // [esp+10h] [ebp-90h]
  char v18; // [esp+14h] [ebp-8Ch]
  _BYTE *v19; // [esp+18h] [ebp-88h]
  const char *v20; // [esp+1Ch] [ebp-84h]
  int v21; // [esp+20h] [ebp-80h]
  int v22; // [esp+24h] [ebp-7Ch]
  _BYTE *v23; // [esp+28h] [ebp-78h]
  __int128 v24; // [esp+2Ch] [ebp-74h]
  __int128 v25; // [esp+3Ch] [ebp-64h]
  __int128 v26; // [esp+4Ch] [ebp-54h]
  __int64 v27; // [esp+5Ch] [ebp-44h]
  __int16 v28; // [esp+64h] [ebp-3Ch]
  char v29; // [esp+66h] [ebp-3Ah]
  __int128 v30; // [esp+68h] [ebp-38h]
  __int128 v31; // [esp+78h] [ebp-28h]
  __int64 v32; // [esp+88h] [ebp-18h]
  int v33; // [esp+9Ch] [ebp-4h]

  v16 = this;
  QLineEdit::text(*(_DWORD *)(this[6] + 4), &v17);
  v33 = 0;
  QString::toLatin1(&v17, &v18);
  LOBYTE(v33) = 1;
  v20 = QByteArray::data((QByteArray *)&v18);
  v30 = 0i64;
  v31 = 0i64;
  v32 = 0i64;
  v24 = xmmword_404AA0;
  v25 = xmmword_404AB0;
  v22 = 138 * strlen(v20) / 0x64;
  v26 = xmmword_404AC0;
  v28 = 31353;
  v27 = qword_404AD0;
  v29 = 0;
  v1 = v22 + 1;
  v2 = 0;
  v23 = malloc(v22 + 1);
  v3 = v23;
  memset(v23, 0, v1);
  v4 = v20;
  v21 = (int)(v20 + 1);
  if ( &v20[strlen(v20) + 1] != v20 + 1 )
  {
    v5 = &v3[v22];
    v19 = v5;
    while ( 1 )
    {
      v6 = ((char)*v5 << 8) + v4[v2];
      v21 = v6;
      v7 = v6 / 58;
      *v5 = v21 - 58 * v7;
      if ( v7 )
      {
        do
        {
          v8 = (char)*(v5-- - 1);
          v9 = (v8 << 8) + v7;
          v21 = v9 / 58;
          *v5 = v9 % 58;
          v7 = v21;
        }
        while ( v21 );
        v5 = v19;
      }
      if ( ++v2 >= strlen(v20) )
        break;
      v4 = v20;
    }
    v3 = v23;
  }
  v10 = 0;
  if ( !*v3 )
  {
    do
      ++v10;
    while ( !v3[v10] );
  }
  v11 = v22;
  if ( v10 <= v22 )
  {
    v12 = v3 - (_BYTE *)&v30;
    do
    {
      v13 = (char *)&v30 + v10++;
      *v13 = *((_BYTE *)&v24 + (char)v13[v12]);
    }
    while ( v10 <= v11 );
  }
  if ( !qstrcmp((const char *)&v30, "56fkoP8KhwCf3v7CEz") )
  {
    if ( v20 )
      v14 = strlen(v20);
    else
      v14 = -1;
    v23 = (_BYTE *)QString::fromAscii_helper(v20, v14);
    LOBYTE(v33) = 2;
    v22 = QString::fromAscii_helper("flag", 4);
    LOBYTE(v33) = 3;
    QMessageBox::warning(v16, &v22, &v23, 1024, 0);
    QString::~QString((QString *)&v22);
    QString::~QString((QString *)&v23);
  }
  QByteArray::~QByteArray((QByteArray *)&v18);
  return QString::~QString((QString *)&v17);
}
```

可以看到解包之后的代码可读性更高一些，QT的函数表也得到了恢复。