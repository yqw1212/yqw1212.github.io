---
layout: post
title:  linked list
date:   2021-03-15 00:01:01 +0300
image:  2021-03-15-woman.jpg
tags:   [algorithm,leetcode,linked list]
---

237.删除链表哦中的节点

请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 **要被删除的节点** 。

示例 1：

```assembly
输入：head = [4,5,1,9], node = 5
输出：[4,1,9]
解释：给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.
```

code

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
void deleteNode(struct ListNode* node) {
    
    while(node->next->next != NULL){
        node->val = node->next->val;
        node = node->next;
    }
    node->val = node->next->val;
    node->next = NULL;
}
```

206.反转链表

反转一个单链表。

**示例:**

```assembly
输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL
```

最麻烦的方法：

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseList(struct ListNode* head){
    struct ListNode *tmp = head;
    struct ListNode *new_head = NULL;


    while(head != NULL && head->next != NULL){

        while(head->next->next!=NULL){
            head = head->next;
        }
        
        if(new_head==NULL)
            new_head = head->next;
        else{
            struct ListNode *tmp_new_head = new_head;

            while(tmp_new_head->next != NULL){
                tmp_new_head = tmp_new_head->next;
            }
            tmp_new_head->next = head->next;
        }
        
        head->next=NULL;

        head = tmp;

    }
    
    if(new_head==NULL){
            new_head = tmp;
            return new_head;
    }else{
        struct ListNode *tmp_new_head = new_head;
        while(tmp_new_head->next != NULL){
            tmp_new_head = tmp_new_head->next;
        }
        tmp_new_head->next = tmp;
        return new_head;
    }

}
```

 876.链表的中间结点

给定一个头结点为 `head` 的非空单链表，返回链表的中间结点。

如果有两个中间结点，则返回第二个中间结点。

示例 1：

```assembly
输入：[1,2,3,4,5]
输出：此列表中的结点 3 (序列化形式：[3,4,5])
返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。
注意，我们返回了一个 ListNode 类型的对象 ans，这样：
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.
```

code

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* middleNode(struct ListNode* head){
    int length = 1;
    struct ListNode* tmp;
    tmp = head;

    while(tmp->next != NULL){
        tmp = tmp->next;
        length++;
    }

    length = length/2;

    tmp = head;
    for(int i=0;i<length;i++){
        tmp = tmp->next;
    }

    return tmp;

}
```

21.合并两个有序链表

将两个升序链表合并为一个新的 **升序** 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

**示例 1：**

```assembly
输入：l1 = [1,2,4], l2 = [1,3,4]
输出：[1,1,2,3,4,4]
```

**示例 2：**

```assembly
输入：l1 = [], l2 = []
输出：[]
```

**示例 3：**

```assembly
输入：l1 = [], l2 = [0]
输出：[0]
```

没有优化的算法

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    struct ListNode* point = NULL;
    struct ListNode* head = NULL;

    while(l1 != NULL && l2 != NULL){
        if(l1->val <= l2->val){
            if(point == NULL){
                point = l1;
            }
            else{
                if(head == NULL){
                    head = point;
                }
                head->next = l1;
                head = head->next;
            }
            l1 = l1->next;
        }
        else{
            if(point == NULL){
                point = l2;
            }
            else{
                if(head == NULL){
                    head = point;
                }
                head->next = l2;
                head = head->next;
            }
            l2 = l2->next;
        }
    }
    if(l1 == NULL){
        if(l2 != NULL){
            if(point == NULL){
                point = l2;
            }else{   // point != NULL
                if(head == NULL){
                    head = point;
                }
                head->next = l2;
            }
        }
    }
    else{    // l1 != NULL
        if(point == NULL){
            point = l1;
        }else{    // point != NULL
            if(head == NULL){
                head = point;
            }
            head->next = l1;
        }
    }
    return point;

}
```

141.环形链表

给定一个链表，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。

如果链表中存在环，则返回 true 。 否则，返回 false 。

**示例 1：**

```assembly
输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
```

**示例 3：**

```assembly
输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
```

**提示：**

- 链表中节点的数目范围是 `[0, 104]`
- `-105 <= Node.val <= 105`
- `pos` 为 `-1` 或者链表中的一个 **有效索引** 。

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    struct ListNode* l[10002] = {0};

    int i = 0;
    if(head != NULL && head->next == NULL){
        return false;
    }
    while(head != NULL){
        for(int j = 0;j<i;j++){
            if(l[j] == head){
                return true;
            }
        }
        l[i] = head;
        head = head->next;
        i++;
    }
    return false;

}
```

203.移除链表元素

给你一个链表的头节点 `head` 和一个整数 `val` ，请你删除链表中所有满足 `Node.val == val` 的节点，并返回 **新的头节点** 。

**示例 1：**

```assembly
输入：head = [1,2,6,3,4,5,6], val = 6
输出：[1,2,3,4,5]
```

**示例 3：**

```assembly
输入：head = [7,7,7,7], val = 7
输出：[]
```

**提示：**

- 列表中的节点在范围 `[0, 104]` 内
- `1 <= Node.val <= 50`
- `0 <= k <= 50`

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* removeElements(struct ListNode* head, int val){
    struct ListNode* pointer;

    if(head == NULL)
        return head;
    if(head != NULL && head->next == NULL){
        if(head->val == val){
            return head->next;
        }else{
            return head;
        }
    }
    if(head != NULL && head->next != NULL){
        while(head != NULL){
            if(head->val == val){
                head = head->next;
            }else{
                break;
            }
        }
        pointer = head;

        if(head != NULL){
            while(head->next != NULL){
                if(head->next->val == val){
                    if(head->next->next != NULL){
                        head->next = head->next->next;
                    }else{
                        head->next = NULL;
                    }
                }else{
                    head = head->next;
                }
            }
        }
    }

    return pointer;
}
```

1669.合并两个链表

给你两个链表 list1 和 list2 ，它们包含的元素分别为 n 个和 m 个。

请你将 list1 中第 a 个节点到第 b 个节点删除，并将list2 接在被删除节点的位置。

**示例 1：**

```assembly
输入：list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
输出：[0,1,2,1000000,1000001,1000002,5]
解释：我们删除 list1 中第三和第四个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。
```

code

```assembly
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* mergeInBetween(struct ListNode* list1, int a, int b, struct ListNode* list2){
    struct ListNode* pointer = list1;

    for(int i=0;i<b;i++){
        list1 = list1->next;
    }
    struct ListNode* tmp = list1->next;
    list1 = pointer;

    for(int i=0;i<a-1;i++){
        list1 = list1->next;
    }
    list1->next = list2;
    //
    while(list1->next != NULL){
        list1 = list1->next;
    }
    list1->next = tmp;

    return pointer;

}
```

