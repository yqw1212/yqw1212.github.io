---
layout: post
title:  第二届鹏城杯联邦靶场协同攻防演练赛
date:   2022-07-04 00:08:01 +0300
image:  2022-07-04-cat.jpg
tags:   [ctf,reverse,go,vm]
---

## baby_re

```assembly
package com.example.createso;

import android.os.Bundle;
import android.view.View;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.example.createso.databinding.ActivityMainBinding;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import kotlin.Metadata;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;

@Metadata(d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\u0018\u0000 \f2\u00020\u0001:\u0001\fB\u0005¢\u0006\u0002\u0010\u0002J\u0011\u0010\u0005\u001A\u00020\u00062\u0006\u0010\u0007\u001A\u00020\u0006H\u0086 J\u0012\u0010\b\u001A\u00020\t2\b\u0010\n\u001A\u0004\u0018\u00010\u000BH\u0015R\u000E\u0010\u0003\u001A\u00020\u0004X\u0082.¢\u0006\u0002\n\u0000¨\u0006\r"}, d2={"Lcom/example/createso/MainActivity;", "Landroidx/appcompat/app/AppCompatActivity;", "()V", "binding", "Lcom/example/createso/databinding/ActivityMainBinding;", "baby_xor", "", "x", "onCreate", "", "savedInstanceState", "Landroid/os/Bundle;", "Companion", "app_debug"}, k=1, mv={1, 6, 0}, xi=0x30) public final class MainActivity extends AppCompatActivity {
    @Metadata(d1={"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002¨\u0006\u0003"}, d2={"Lcom/example/createso/MainActivity$Companion;", "", "()V", "app_debug"}, k=1, mv={1, 6, 0}, xi=0x30) public final class Companion {
        public Companion(DefaultConstructorMarker arg1) {
            this();
        }

        private Companion() {
            super();
        }
    }

    public static final Companion Companion;
    public Map _$_findViewCache;
    private ActivityMainBinding binding;

    public static void $r8$lambda$dncIOGhLA9zyL7XDrffGu6-OgvE(MainActivity arg0, int[] arg1, View arg2) {
        MainActivity.onCreate$lambda-0(arg0, arg1, arg2);
    }

    static {
        MainActivity.Companion = new Companion(null);
        System.loadLibrary("createso");
    }

    public MainActivity() {
        this._$_findViewCache = new LinkedHashMap();
        super();
    }

    public void _$_clearFindViewByIdCache() {
        this._$_findViewCache.clear();
    }

    public View _$_findCachedViewById(int arg4) {
        Map v0 = this._$_findViewCache;
        Object v1 = v0.get(Integer.valueOf(arg4));
        if(v1 == null) {
            View v1_1 = this.findViewById(arg4);
            if(v1_1 != null) {
                v0.put(Integer.valueOf(arg4), v1_1);
            }
            else {
                v1_1 = null;
            }
        }

        return ((View)v1);
    }

    public final native int[] baby_xor(int[] arg1) {
    }

    protected void onCreate(Bundle arg4) {
        super.onCreate(arg4);
        ActivityMainBinding v0 = ActivityMainBinding.inflate(this.getLayoutInflater());
        Intrinsics.checkNotNullExpressionValue(v0, "inflate(layoutInflater)");
        this.binding = v0;
        if(v0 == null) {
            Intrinsics.throwUninitializedPropertyAccessException("binding");
            v0 = null;
        }

        this.setContentView(v0.getRoot());
        this._$_findCachedViewById(R$id.btn).setOnClickListener(new MainActivity$$ExternalSyntheticLambda0(this, new int[]{0x77, 9, 40, 44, 106, 83, 0x7E, 0x7B, 33, 87, 0x71, 0x7B, 0x70, 93, 0x7D, 0x7F, 41, 82, 44, 0x7F, 39, 3, 0x7E, 0x7D, 0x77, 87, 0x2F, 0x7D, 33, 6, 44, 0x7F, 0x70, 0, 0x7E, 0x7B, 0x73, 24}));
    }

    private static final void onCreate$lambda-0(MainActivity arg5, int[] arg6, View arg7) {
        Intrinsics.checkNotNullParameter(arg5, "this$0");
        Intrinsics.checkNotNullParameter(arg6, "$c");
        int[] v1 = arg5._$_findCachedViewById(R$id.input).getText().toString().chars().toArray();
        Intrinsics.checkNotNullExpressionValue(v1, "flag.toArray()");
        if(Arrays.equals(arg5.baby_xor(v1), arg6)) {
            Toast.makeText(arg5, "Success", 1).show();
        }
        else {
            Toast.makeText(arg5, "Failed", 0).show();
        }
    }
}
```

so层

```assembly
__int64 __fastcall Java_com_example_createso_MainActivity_baby_1xor(__int64 a1, __int64 a2, __int64 a3)
{
  int i; // [rsp+14h] [rbp-2Ch]
  __int64 v5; // [rsp+18h] [rbp-28h]
  unsigned int v6; // [rsp+24h] [rbp-1Ch]

  v6 = _JNIEnv::GetArrayLength(a1, a3);
  v5 = _JNIEnv::GetIntArrayElements(a1, a3, 0LL);
  for ( i = 0; i < (int)v6; ++i )
    *(_DWORD *)(v5 + 4LL * i) ^= key[i % 4];
  _JNIEnv::SetIntArrayRegion(a1, a3, 0LL, v6, v5);
  return a3;
}
```

还有一个对key修改的操作

```assembly
_DWORD *hide_key(void)
{
  _DWORD *result; // rax

  result = key;
  key[0] ^= 0x47u;
  key[1] ^= 0x32u;
  key[2] ^= 0x11u;
  key[3] ^= 0x12u;
  return result;
}
```

![]({{site.baseurl}}/img/2022-07-04-babyre.jpg)

## gocode

越来越觉得做vm逆向得心应手

写了个C语言脚本得到指令序列

```assembly
#include <stdio.h>

int main(){

  int v43[374] = {0xa, 0xb, 0xbb, 0x0, 0x0, 0xbb, 0x1, 0x1, 0xbb, 0x2, 0x2, 0xbb, 0x3, 0x3, 0xc, 0x1, 0x2, 0x2, 0x2, 0x1b, 0xaa, 0x1, 0x2, 0xbb, 0x1, 0x1, 0xbb, 0x2, 0x2, 0xc, 0x0, 0x1, 0xe, 0x0, 0x2, 0xd, 0x0, 0x3, 0x2, 0x2, 0x1, 0xaa, 0x0, 0x2, 0xbb, 0x2, 0x2, 0x2, 0x0, 0x63, 0x1, 0x2, 0x0, 0xbb, 0x0, 0x0, 0xe, 0x0, 0x2, 0xd, 0x0, 0x1, 0xc, 0x0, 0x3, 0x2, 0x1, 0xf6, 0xaa, 0x0, 0x1, 0xbb, 0x1, 0x1, 0xbb, 0x0, 0x0, 0xbb, 0x2, 0x2, 0xc, 0x1, 0x0, 0xc, 0x1, 0x2, 0xc, 0x1, 0x3, 0x2, 0x0, 0x1e, 0xaa, 0x1, 0x0, 0xbb, 0x1, 0x1, 0xbb, 0x0, 0x0, 0xe, 0x0, 0x3, 0xd, 0x0, 0x1, 0xc, 0x0, 0x2, 0x2, 0x3, 0x31, 0xaa, 0x0, 0x3, 0xbb, 0x0, 0x4, 0xbb, 0x1, 0x5, 0xbb, 0x2, 0x6, 0x2, 0x3, 0x63, 0xc, 0x0, 0x3, 0x2, 0x3, 0x68, 0x1, 0x0, 0x3, 0x2, 0x3, 0x52, 0xaa, 0x0, 0x3, 0x2, 0x3, 0x33, 0xd, 0x1, 0x3, 0x2, 0x3, 0x63, 0xe, 0x1, 0x3, 0x2, 0x0, 0x41, 0xaa, 0x0, 0x1, 0x2, 0x3, 0x63, 0x1, 0x2, 0x3, 0x2, 0x3, 0x6b, 0xc, 0x2, 0x3, 0x2, 0x1, 0xe, 0xaa, 0x2, 0x1, 0x2, 0x1, 0x9e, 0xbb, 0x0, 0x7, 0xaa, 0x0, 0x1, 0xbb, 0x0, 0x8, 0xbb, 0x1, 0x9, 0xbb, 0x2, 0xa, 0xbb, 0x3, 0xb, 0xe, 0x0, 0x3, 0x2, 0x3, 0xce, 0xaa, 0x0, 0x3,
0xbb, 0x0, 0x8, 0xbb, 0x3, 0xb, 0xc, 0x0, 0x1, 0xe, 0x0, 0x2, 0xd, 0x0, 0x3, 0x2, 0x2, 0x2d, 0xaa, 0x0, 0x2, 0xbb, 0x2, 0xa, 0x2, 0x0, 0x63, 0x1, 0x2, 0x0, 0xbb, 0x0, 0x8, 0xe, 0x0,
0x2, 0xd, 0x0, 0x1, 0xc, 0x0, 0x3, 0x2, 0x1, 0x15, 0xaa, 0x0, 0x1, 0xbb, 0x1, 0x9, 0xbb, 0x0, 0x8, 0xbb, 0x2, 0xa, 0xc, 0x1, 0x0, 0xc, 0x1, 0x2, 0xc, 0x1, 0x3, 0x2, 0x0, 0xae, 0xaa,
0x1, 0x0, 0xbb, 0x1, 0x9, 0xbb, 0x0, 0x8, 0xe, 0x0, 0x3, 0xd, 0x0, 0x1, 0xc, 0x0, 0x2, 0x2, 0x3, 0x9, 0xaa, 0x0, 0x3, 0xbb, 0x0, 0xc, 0xbb, 0x1, 0xd, 0xbb, 0x2, 0xe, 0x2, 0x3, 0x63,
0xc, 0x0, 0x3, 0x2, 0x3, 0x68, 0x1, 0x0, 0x3, 0x2, 0x3, 0xfa, 0xaa, 0x0, 0x3, 0x2, 0x3, 0x1e, 0xd, 0x1, 0x3, 0x2, 0x3, 0x63, 0xe, 0x1, 0x3, 0x2, 0x0, 0x8c, 0xaa, 0x0, 0x1, 0x2, 0x3,
0x63, 0x1, 0x2, 0x3, 0x2, 0x3, 0x6b, 0xc, 0x2, 0x3, 0x2, 0x1, 0x83, 0xaa, 0x2, 0x1, 0x2, 0x1, 0x47, 0xbb, 0x0, 0xf, 0xaa, 0x0, 0x1};

    int v42[4] = {0,0,0,0};

    int v3[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  int point = 0;

  while ( 1 ){
      int v5 = v43[point];

      switch ( v5 )
      {
          case 1:{
              int v6 = v43[point + 1];
              int v7 = v43[point + 2];
              int v0 = v42[v7] ^ v42[v6];
              v42[v6] = v0;
              printf("v0 = v42[%d] ^ v42[%d]\n", v7, v6);
              printf("v42[%d] = v0\n", v6);
              point += 3;
              break;
          }
          case 2:{
              int v0 = v43[point + 2];
              int v8 = v43[point + 1];
              v42[v8] = v0;
              printf("v42[%d] = %d\n", v8, v0);
              point += 3;
              break;
          }
          case 10:{
              printf("input\n");
              point += 1;
              break;
          }
          case 11:{
              // 检查格式
              printf("check\n");
              ++point;
              break;
          }
          case 12:{
              int v15 = v43[point + 1];
              int v16 = v43[point + 2];
              int v0 = v42[v16] + v42[v15];
              v42[v15] = v0;
              printf("v0 = v42[%d] +v42[%d]\n", v16, v15);
              printf("v42[%d] = v0\n", v15);
              point += 3;
              break;
          }
          case 13:{
              int v18 = v43[point + 1];
              int v19 = v43[point + 2];
              int v0 = v42[v18] - v42[v19];
              v42[v18] = v0;
              printf("v0 = v42[%d] - v42[%d]\n", v18, v19);
              printf("v42[%d] = v0\n", v18);
              point += 3;
              break;
          }
          case 0xF:{  // 给v42赋值
              int v22 = v43[point + 1];
              int v23 = v43[point + 2];
              int v24 = v42[v23];
              v42[v22] /= v24;
              printf("v24 = v42[%d]\n", v23);
              printf("v42[%d] /= v24", v22);
              point += 3;
              break;
          }
          case 0xAA:{  // 比较
              int v25 = v43[point + 1];
              int v26 = v42[v25];
              int v27 = v43[point + 2];
              int v0 = v42[v27];
              //if ( v0 != v26 ){
              //  printf("erro");
              //  exit();
              //}
              printf("v26 = v42[%d]\n", v25);
              printf("v0 = v42[%d]\n", v27);
              printf("v26 == v0\n");
              point += 3;
              break;
          }
          case 0xBB:{  // 给v42数组赋值
              int v28 = v43[point + 2];
              int v29 = v3[v28];
              int v0 = v43[point + 1];
              v42[v0] = v29;
              printf("v29 = v3[%d]\n", v28);
              printf("v42[%d] = v29\n", v0);
              point += 3;
              break;
          }
          default:{
              int v20 = v43[point + 1];
              int v21 = v43[point + 2];
              int v0 = v42[v21] * v42[v20];
              v42[v20] = v0;
              printf("v0 = v42[%d] * v42[%d]\n", v21, v20);
              printf("v42[%d] = v0\n", v20);
              point += 3;
              break;
          }
      }

      if ( point >= 374 ){
          printf("right");
          break;
      }
  }


    return 0;
}
```

python z3解

```assembly
from z3 import *

# input
# check

v42 = [0, 0, 0, 0]

v3 = [BitVec("v{}".format(i), 8) for i in range(16)]

s=Solver()

v29 = v3[0]
v42[0] = v29
v29 = v3[1]
v42[1] = v29
v29 = v3[2]
v42[2] = v29
v29 = v3[3]
v42[3] = v29
v0 = v42[2] +v42[1]
v42[1] = v0
v42[2] = 27
v26 = v42[1]
v0 = v42[2]

s.add(v26 == v0)

v29 = v3[1]
v42[1] = v29
v29 = v3[2]
v42[2] = v29
v0 = v42[1] +v42[0]
v42[0] = v0
v0 = v42[2] * v42[0]
v42[0] = v0
v0 = v42[0] - v42[3]
v42[0] = v0
v42[2] = 1
v26 = v42[0]
v0 = v42[2]

s.add(v26 == v0)

v29 = v3[2]
v42[2] = v29
v42[0] = 99
v0 = v42[0] ^ v42[2]
v42[2] = v0
v29 = v3[0]
v42[0] = v29
v0 = v42[2] * v42[0]
v42[0] = v0
v0 = v42[0] - v42[1]
v42[0] = v0
v0 = v42[3] +v42[0]
v42[0] = v0
v42[1] = 246
v26 = v42[0]
v0 = v42[1]

s.add(v26 == v0)

v29 = v3[1]
v42[1] = v29
v29 = v3[0]
v42[0] = v29
v29 = v3[2]
v42[2] = v29
v0 = v42[0] +v42[1]
v42[1] = v0
v0 = v42[2] +v42[1]
v42[1] = v0
v0 = v42[3] +v42[1]
v42[1] = v0
v42[0] = 30
v26 = v42[1]
v0 = v42[0]

s.add(v26 == v0)

v29 = v3[1]
v42[1] = v29
v29 = v3[0]
v42[0] = v29
v0 = v42[3] * v42[0]
v42[0] = v0
v0 = v42[0] - v42[1]
v42[0] = v0
v0 = v42[2] +v42[0]
v42[0] = v0
v42[3] = 49
v26 = v42[0]
v0 = v42[3]

s.add(v26 == v0)

v29 = v3[4]
v42[0] = v29
v29 = v3[5]
v42[1] = v29
v29 = v3[6]
v42[2] = v29
v42[3] = 99
v0 = v42[3] +v42[0]
v42[0] = v0
v42[3] = 104
v0 = v42[3] ^ v42[0]
v42[0] = v0
v42[3] = 82
v26 = v42[0]
v0 = v42[3]

s.add(v26 == v0)

v42[3] = 51
v0 = v42[1] - v42[3]
v42[1] = v0
v42[3] = 99
v0 = v42[3] * v42[1]
v42[1] = v0
v42[0] = 65
v26 = v42[0]
v0 = v42[1]

s.add(v26 == v0)

v42[3] = 99
v0 = v42[3] ^ v42[2]
v42[2] = v0
v42[3] = 107
v0 = v42[3] +v42[2]
v42[2] = v0
v42[1] = 14
v26 = v42[2]
v0 = v42[1]

s.add(v26 == v0)

v42[1] = 158
v29 = v3[7]
v42[0] = v29
v26 = v42[0]
v0 = v42[1]
# v3[7]=158
s.add(v26 == v0)

v29 = v3[8]
v42[0] = v29
v29 = v3[9]
v42[1] = v29
v29 = v3[10]
v42[2] = v29
v29 = v3[11]
v42[3] = v29
v0 = v42[3] * v42[0]
v42[0] = v0
v42[3] = 206
v26 = v42[0]
v0 = v42[3]

s.add(v26 == v0)

v29 = v3[8]
v42[0] = v29
v29 = v3[11]
v42[3] = v29
v0 = v42[1] +v42[0]
v42[0] = v0
v0 = v42[2] * v42[0]
v42[0] = v0
v0 = v42[0] - v42[3]
v42[0] = v0
v42[2] = 45
v26 = v42[0]
v0 = v42[2]

s.add(v26 == v0)

v29 = v3[10]
v42[2] = v29
v42[0] = 99
v0 = v42[0] ^ v42[2]
v42[2] = v0
v29 = v3[8]
v42[0] = v29
v0 = v42[2] * v42[0]
v42[0] = v0
v0 = v42[0] - v42[1]
v42[0] = v0
v0 = v42[3] +v42[0]
v42[0] = v0
v42[1] = 21
v26 = v42[0]
v0 = v42[1]

s.add(v26 == v0)

v29 = v3[9]
v42[1] = v29
v29 = v3[8]
v42[0] = v29
v29 = v3[10]
v42[2] = v29
v0 = v42[0] +v42[1]
v42[1] = v0
v0 = v42[2] +v42[1]
v42[1] = v0
v0 = v42[3] +v42[1]
v42[1] = v0
v42[0] = 174
v26 = v42[1]
v0 = v42[0]

s.add(v26 == v0)

v29 = v3[9]
v42[1] = v29
v29 = v3[8]
v42[0] = v29
v0 = v42[3] * v42[0]
v42[0] = v0
v0 = v42[0] - v42[1]
v42[0] = v0
v0 = v42[2] +v42[0]
v42[0] = v0
v42[3] = 9
v26 = v42[0]
v0 = v42[3]

s.add(v26 == v0)

v29 = v3[12]
v42[0] = v29
v29 = v3[13]
v42[1] = v29
v29 = v3[14]
v42[2] = v29
v42[3] = 99
v0 = v42[3] +v42[0]
v42[0] = v0
v42[3] = 104
v0 = v42[3] ^ v42[0]
v42[0] = v0
v42[3] = 250
v26 = v42[0]
v0 = v42[3]

s.add(v26 == v0)

v42[3] = 30
v0 = v42[1] - v42[3]
v42[1] = v0
v42[3] = 99
v0 = v42[3] * v42[1]
v42[1] = v0
v42[0] = 140
v26 = v42[0]
v0 = v42[1]

s.add(v26 == v0)

v42[3] = 99
v0 = v42[3] ^ v42[2]
v42[2] = v0
v42[3] = 107
v0 = v42[3] +v42[2]
v42[2] = v0
v42[1] = 131
v26 = v42[2]
v0 = v42[1]

s.add(v26 == v0)

s.add(v3[15] == 71)

# v42[1] = 71
# v29 = v3[15]
# v42[0] = v29
# v26 = v42[0]
# v0 = v42[1]

# v26 == v0

flag = ""
if s.check() == sat:
    print(s.model())
    for i in v3:
        flag += str(hex(int(str(s.model().eval(i)))))[2:]
        print(hex(int(str(s.model().eval(i)))))
print(flag)
# PCL{bdcc4f46d73ec09ee628633d2f227b47}
```

