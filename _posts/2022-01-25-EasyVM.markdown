---
layout: post
title:  EasyVM[2022HWS硬件安全冬令营 X DASCTF Jan]
date:   2022-01-25 00:08:01 +0300
image:  2022-01-25-road.jpg
tags:   [ctf,reverse,vm]
---

第一步加密类似于base64

```assembly
_BYTE *__cdecl sub_4011E0(const char *a1)
{
  signed int v2; // ecx
  int v3; // ebp
  _BYTE *v4; // edi
  int v5; // ebp
  int v6; // esi
  const char *v7; // ecx
  unsigned int v8; // eax
  int v10; // [esp+14h] [ebp+4h]

  v2 = strlen(a1);                              // 0x2A
  v10 = v2 % 3;                                 // 0
  if ( v2 % 3 )
    v3 = 4 * (v2 / 3) + 4;
  else
    v3 = 4 * (v2 / 3);                          // 56
  v4 = malloc(v3 + 1);                          // 57
  v5 = v3 - 2;                                  // 54
  v6 = 0;
  v4[v5 + 2] = 0;
  if ( v5 > 0 )
  {
    v7 = a1 + 1;                                // a[1]
    do
    {
      v6 += 4;                                  // 4
      v8 = *((unsigned __int8 *)v7 + 0xFFFFFFFF);// a[0]
      v7 += 3;                                  // &a[4]
      v4[v6 - 4] = byte_40B098[v8 >> 2] ^ 0xA;
      v4[v6 - 3] = byte_40B098[(*((unsigned __int8 *)v7 + 0xFFFFFFFD) >> 4) | (0x10 * (v7[0xFFFFFFFC] & 3))] ^ 0xB;
      v4[v6 - 2] = byte_40B098[(*((unsigned __int8 *)v7 + 0xFFFFFFFE) >> 6) | (4 * (v7[0xFFFFFFFD] & 0xF))] ^ 0xC;
      v4[v6 - 1] = byte_40B098[v7[0xFFFFFFFE] & 0x3F] ^ 0xD;
    }
    while ( v6 < v5 );
  }
  if ( v10 == 1 )
  {
    v4[v6 - 2] = 0x3D;
    v4[v6 - 1] = 0x3D;
  }
  else if ( v10 == 2 )
  {
    v4[v6 - 1] = 0x3D;
    return v4;
  }
  return v4;
}
```

类似于注册绑定函数

```assembly
.rdata:0040A0D0 off_40A0D0      dd offset sub_401000    ; DATA XREF: sub_4012F0+18↑o
.rdata:0040A0D4                 dd offset sub_4013B0
.rdata:0040A0D8                 dd offset sub_4013C0
.rdata:0040A0DC                 dd offset sub_4013D0
.rdata:0040A0E0                 dd offset sub_4013E0
.rdata:0040A0E4                 dd offset sub_4013F0
.rdata:0040A0E8                 dd offset sub_401400
.rdata:0040A0EC                 dd offset sub_401410
.rdata:0040A0F0                 dd offset sub_401420
.rdata:0040A0F4                 dd offset sub_401430
.rdata:0040A0F8                 dd offset sub_401440
.rdata:0040A0FC                 dd offset sub_401450
.rdata:0040A100                 dd offset sub_401460
.rdata:0040A104                 dd offset sub_401470
.rdata:0040A108                 dd offset sub_401490
.rdata:0040A10C                 dd offset sub_4014B0
.rdata:0040A110                 dd offset sub_4014D0
.rdata:0040A114                 dd offset sub_4014F0
.rdata:0040A118                 dd offset sub_401540
.rdata:0040A11C                 dd offset sub_401590
.rdata:0040A120                 dd offset sub_4015D0
.rdata:0040A124                 dd offset sub_4015F0
```

sub_401000

```assembly
int __thiscall sub_401000(_DWORD *this, int a2, int a3, int a4, int a5)
{
  this[1] = a2;
  this[6] = a3;
  this[7] = a4;
  this[8] = a5;
  while ( 2 )
  {
    switch ( *(_BYTE *)this[1] )
    {
      case 0xC0:
        (*(void (__thiscall **)(_DWORD *))(*this + 4))(this);// sub_4013B0
        continue;
      case 0xC1:
        (*(void (__thiscall **)(_DWORD *))(*this + 8))(this);// sub_4013C0
        continue;
      case 0xC2:
        (*(void (__thiscall **)(_DWORD *))(*this + 0xC))(this);// sub_4013D0
        continue;
      case 0xC3:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x10))(this);// sub_4013E0
        continue;
      case 0xC4:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x14))(this);// sub_4013F0
        continue;
      case 0xC5:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x18))(this);// sub_401400
        continue;
      case 0xC6:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x1C))(this);// sub_401410
        continue;
      case 0xC7:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x20))(this);// sub_401420
        continue;
      case 0xC8:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x24))(this);// sub_401430
        continue;
      case 0xC9:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x28))(this);// sub_401440
        continue;
      case 0xCA:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x2C))(this);// sub_401450
        continue;
      case 0xCB:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x30))(this);// sub_401460
        continue;
      case 0xCC:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x34))(this);// sub_401470
        continue;
      case 0xCD:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x38))(this);// sub_401490
        continue;
      case 0xCE:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x3C))(this);// sub_4014B0
        continue;
      case 0xCF:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x40))(this);// sub_4014D0
        continue;
      case 0xD0:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x44))(this);// sub_4014F0
        continue;
      case 0xD1:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x48))(this);// sub_401540
        continue;
      case 0xD2:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x4C))(this);// sub_401590
        continue;
      case 0xD3:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x50))(this);// sub_4015D0
        continue;
      case 0xD4:
        (*(void (__thiscall **)(_DWORD *))(*this + 0x54))(this);// sub_4015F0
        continue;
      case 0xFE:
        return 0;
      case 0xFF:
        return 1;
      default:
        sub_4016F9(aCmdError);
        return 0;
    }
  }
}
```

sub_4013B0

```assembly
int __thiscall sub_4013B0(_DWORD *this)
{
  int result; // eax

  ++this[2];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_4013C0

```
int __thiscall sub_4013C0(_DWORD *this)
{
  int result; // eax

  ++this[3];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_4013D0

```assembly
int __thiscall sub_4013D0(_DWORD *this)
{
  int result; // eax

  ++this[4];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_4013E0

```assembly
int __thiscall sub_4013E0(_DWORD *this)
{
  int result; // eax

  this[2] = this[3];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_4013F0

```assembly
int __thiscall sub_4013F0(_DWORD *this)
{
  int result; // eax

  this[2] = this[4];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_401400

```assembly
int __thiscall sub_401400(_DWORD *this)
{
  int result; // eax

  this[3] = this[2];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_401410

```assembly
int __thiscall sub_401410(_DWORD *this)
{
  int result; // eax

  this[3] = this[4];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_401420

```assembly
int __thiscall sub_401420(_DWORD *this)
{
  int result; // eax

  this[4] = this[2];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_401430

```assembly
int __thiscall sub_401430(_DWORD *this)
{
  int result; // eax

  this[4] = this[3];
  
  result = this[1] + 1;
  this[1] = result;
  return result;
}
```

sub_401440

```assembly
int __thiscall sub_401440(_DWORD *this)
{
  int v1; // eax
  int v2; // edx
  int result; // eax

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 1);
  result = v1 + 5;
  this[2] = v2;
  this[1] = result;
  return result;
}
```

sub_401450

```assembly
int __thiscall sub_401450(_DWORD *this)
{
  int v1; // eax
  int v2; // edx
  int result; // eax

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 1);
  result = v1 + 5;
  this[3] = v2;
  this[1] = result;
  return result;
}
```

sub_401460

```assembly
int __thiscall sub_401460(_DWORD *this)
{
  int v1; // eax
  int v2; // edx
  int result; // eax

  v1 = this[1];
  v2 = *(_DWORD *)(v1 + 1);
  result = v1 + 5;
  this[4] = v2;
  this[1] = result;
  return result;
}
```

sub_401470

```assembly
int __thiscall sub_401470(_DWORD *this)
{
  int result; // eax

  result = this[1] + 1;
  this[2] = *(unsigned __int8 *)(this[8] + this[4]);
  this[1] = result;
  return result;
}
```

sub_401490

```assembly
int __thiscall sub_401490(_DWORD *this)
{
  int result; // eax

  result = this[1] + 1;
  this[3] = *(unsigned __int8 *)(this[8] + this[4]);
  this[1] = result;
  return result;
}
```

sub_4014B0

```assembly
int __thiscall sub_4014B0(_DWORD *this)
{
  int result; // eax

  result = this[1] + 1;
  this[2] ^= this[3];
  this[1] = result;
  return result;
}
```

sub_4014D0

```assembly
int __thiscall sub_4014D0(_DWORD *this)
{
  int result; // eax

  result = this[1] + 1;
  this[3] ^= this[2];
  this[1] = result;
  return result;
}
```

sub_4014F0

```assembly
int __thiscall sub_4014F0(_DWORD *this)
{
  unsigned int v1; // edx
  unsigned int v2; // eax
  int v3; // eax
  int result; // eax
  int v5; // eax

  v1 = this[2];
  v2 = *(unsigned __int8 *)(this[6] + this[4]);
  if ( v1 == v2 )
  {
    v3 = this[1];
    this[5] = 1;
    result = v3 + 1;
    this[1] = result;
  }
  else
  {
    if ( v1 >= v2 )
    {
      v5 = this[1];
      this[5] = 2;
    }
    else
    {
      v5 = this[1];
      this[5] = 0;
    }
    result = v5 + 1;
    this[1] = result;
  }
  return result;
}
```

sub_401540

```assembly
int __thiscall sub_401540(_DWORD *this)
{
  unsigned int v1; // edx
  unsigned int v2; // eax
  int v3; // eax
  int result; // eax
  int v5; // eax

  v1 = this[3];
  v2 = *(unsigned __int8 *)(this[6] + this[4]);
  if ( v1 == v2 )
  {
    v3 = this[1];
    this[5] = 1;
    result = v3 + 1;
    this[1] = result;
  }
  else
  {
    if ( v1 >= v2 )
    {
      v5 = this[1];
      this[5] = 2;
    }
    else
    {
      v5 = this[1];
      this[5] = 0;
    }
    result = v5 + 1;
    this[1] = result;
  }
  return result;
}
```

sub_401590

```assembly
int __thiscall sub_401590(_DWORD *this)
{
  int v1; // eax
  unsigned int v2; // edx
  unsigned int v3; // esi
  int result; // eax

  v1 = this[1];
  v2 = this[4];
  v3 = *(_DWORD *)(v1 + 1);
  if ( v2 == v3 )
  {
    result = v1 + 5;
    this[5] = 1;
    this[1] = result;
  }
  else
  {
    result = v1 + 5;
    if ( v2 >= v3 )
      this[5] = 2;
    else
      this[5] = 0;
    this[1] = result;
  }
  return result;
}
```

sub_4015D0

```assembly
int __thiscall sub_4015D0(_DWORD *this)
{
  int v1; // eax
  int v2; // edx
  int result; // eax

  v1 = this[1];
  if ( this[5] == 1 )
  {
    v2 = v1 + *(char *)(v1 + 1);
    this[1] = v2;
    v1 = v2;
  }
  result = v1 + 2;
  this[1] = result;
  return result;
}
```

sub_4015F0

```assembly
int __thiscall sub_4015F0(_DWORD *this)
{
  int v1; // eax
  int v2; // edx
  int result; // eax

  v1 = this[1];
  if ( !this[5] )
  {
    v2 = v1 + *(char *)(v1 + 1);
    this[1] = v2;
    v1 = v2;
  }
  result = v1 + 2;
  this[1] = result;
  return result;
}
```

写脚本执行虚拟指令

```assembly
#include <stdio.h>
#include <stdlib.h>

int main(){

    int op[31] = {0xCA, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x00, 0x00, 0x00,
                  0xCC, 0xCF, 0xC9, 0xEE, 0x00, 0x00, 0x00, 0xCF, 0xD1, 0xD3,
                  0x01, 0xFE, 0xC2, 0xD2, 0x39, 0x00, 0x00, 0x00, 0xD4, 0xEC,
                  0xFF};
    int op_point=0;

    int data[57] = {0xBE, 0x36, 0xAC, 0x27, 0x99, 0x4F, 0xDE, 0x44, 0xEE, 0x5F,
                    0xDA, 0x0B, 0xB5, 0x17, 0xB8, 0x68, 0xC2, 0x4E, 0x9C, 0x4A,
                    0xE1, 0x43, 0xF0, 0x22, 0x8A, 0x3B, 0x88, 0x5B, 0xE5, 0x54,
                    0xFF, 0x68, 0xD5, 0x67, 0xD4, 0x06, 0xAD, 0x0B, 0xD8, 0x50,
                    0xF9, 0x58, 0xE0, 0x6F, 0xC5, 0x4A, 0xFD, 0x2F, 0x84, 0x36,
                    0x85, 0x52, 0xFB, 0x73, 0xD7, 0x0D, 0xE3};

    int _this[9] = {0};


    int a5[57] = {80, 102, 116, 0};

    _this[1] = op[op_point];

    while ( 2 ){
        printf("%x\n", _this[1]);
        switch ( _this[1] ){
            case 0xC0:
                // sub_4013B0

                ++_this[2];

                _this[1] = op[++op_point];
                continue;
            case 0xC1:
                // sub_4013C0
                ++_this[3];

                _this[1] = op[++op_point];
                continue;
            case 0xC2:
                // sub_4013D0
                printf("++_this[4];\n");

                ++_this[4];

                _this[1] = op[++op_point];
                continue;
            case 0xC3:
                // sub_4013E0
                _this[2] = _this[3];

                _this[1] = op[++op_point];
                continue;
            case 0xC4:
                // sub_4013F0
                _this[2] = _this[4];

                _this[1] = op[++op_point];
                continue;
            case 0xC5:
                // sub_401400
                _this[3] = _this[2];

                _this[1] = op[++op_point];
                continue;
            case 0xC6:
                // sub_401410
                _this[3] = _this[4];

                _this[1] = op[++op_point];
                continue;
            case 0xC7:
                // sub_401420
                _this[4] = _this[2];

                _this[1] = op[++op_point];
                continue;
            case 0xC8:
                // sub_401430
                _this[4] = _this[3];

                _this[1] = op[++op_point];
                continue;
            case 0xC9:
                // sub_401440
                printf("_this[2] = %d\n", op[op_point+1]);

                _this[2] = op[op_point+1];

                _this[1] = op[op_point+5];
                op_point += 5;
                continue;
            case 0xCA:
                // sub_401450
                printf("_this[3] = %d\n", op[op_point+1]);

                _this[3] = op[op_point+1];

                _this[1] = op[op_point+5];
                op_point += 5;
                continue;
            case 0xCB:
                // sub_401460
                printf("_this[4] = %d\n", op[op_point+1]);

                _this[4] = op[op_point+1];

                _this[1] = op[op_point+5];
                op_point += 5;
                continue;
            case 0xCC:
                // sub_401470
                printf("_this[2] = a5[%d]\n", _this[4]);

                _this[2] = a5[_this[4]];

                _this[1] = op[++op_point];
                continue;
            case 0xCD:
                // sub_401490
                _this[3] = a5[_this[4]];

                _this[1] = op[++op_point];
                continue;
            case 0xCE:
                // sub_4014B0
                _this[2] ^= _this[3];

                _this[1] = op[++op_point];
                continue;
            case 0xCF:
                // sub_4014D0
                printf("_this[3] ^= _this[2]\n");

                _this[3] ^= _this[2];

                _this[1] = op[++op_point];
                continue;
            case 0xD0:
                // sub_4014F0
                // 和data比较
                if ( _this[2] == data[_this[4]] ){
                    _this[5] = 1;
                }else{
                    if ( _this[2] >= data[_this[4]] ){
                        _this[5] = 2;
                    }else{
                        _this[5] = 0;
                    }
                }
                _this[1] = op[++op_point];
                continue;
            case 0xD1:
                // sub_401540
                // 和data比较
//                printf("%d,", _this[3]);
                if ( _this[3] == data[_this[4]] ){
                    _this[5] = 1;
                    printf("_this[5] = 1;\n");
                }else{
                    if ( _this[3] >= data[_this[4]] ){
                        _this[5] = 2;
                        printf("_this[5] = 2\n");
                    }else{
                        _this[5] = 0;
                        printf("_this[5] = 0");
                    }
                }
                _this[1] = op[++op_point];
                continue;
            case 0xD2:
                // sub_401590

                // 0x39(57)
                if ( _this[4] == op[op_point+1] ){
                    _this[5] = 1;
                }else{
                    if ( _this[4] >= op[op_point+1] )
                        _this[5] = 2;
                    else
                        _this[5] = 0;
                }
                _this[1] = op[op_point+5];
                op_point+=5;
                continue;
            case 0xD3:
                // sub_4015D0
                if ( _this[5] == 1 ){
                    _this[1] = op[op_point + op[op_point + 1]+2];
                    op_point += (op[op_point + 1]+2);
                }else{
                    _this[1] = op[op_point+2];
                    op_point += 2;
                }
                continue;
            case 0xD4:
                // sub_4015F0
                if ( !_this[5] ){
                    printf("%d\n", (op_point + op[op_point + 1]+2)&0xff);

                    _this[1] = op[(op_point + op[op_point + 1]+2) & 0xff] ;
//                    op_point += (op[op_point+1]+2);
                    op_point = (op_point + op[op_point+1]+2) & 0xff;
                }else{
                    _this[1] = op[op_point+2];
                    op_point += 2;
                }
                continue;
            case 0xFE:
                return 0;
            case 0xFF:
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}
```

观察输出结果

```assembly
ca
_this[3] = 0
cb
_this[4] = 0
cc
_this[2] = a5[0]
cf
_this[3] ^= _this[2]
c9
_this[2] = 238
cf
_this[3] ^= _this[2]
d1
_this[5] = 1;
d3
c2
++_this[4];
d2
d4
10
cc
_this[2] = a5[1]
cf
_this[3] ^= _this[2]
c9
_this[2] = 238
cf
_this[3] ^= _this[2]
d1
_this[5] = 1;
d3
c2
++_this[4];
d2
d4
10
cc
_this[2] = a5[2]
cf
_this[3] ^= _this[2]
c9
_this[2] = 238
cf
_this[3] ^= _this[2]
d1
_this[5] = 1;
d3
c2
++_this[4];
d2
d4
10
cc
_this[2] = a5[3]
cf
_this[3] ^= _this[2]
c9
_this[2] = 238
cf
_this[3] ^= _this[2]
d1
_this[5] = 2
d3
fe

Process finished with exit code 0
```

找规律，写python脚本解密

```assembly
from z3 import *

table = "ABCDFEGH1JKLRSTMNP0VWQUXY2a8cdefijklmnopghwxyqrstuvzOIZ34567b9+/"

result = [0xBE, 0x36, 0xAC, 0x27, 0x99, 0x4F, 0xDE, 0x44, 0xEE, 0x5F, 
          0xDA, 0x0B, 0xB5, 0x17, 0xB8, 0x68, 0xC2, 0x4E, 0x9C, 0x4A, 
          0xE1, 0x43, 0xF0, 0x22, 0x8A, 0x3B, 0x88, 0x5B, 0xE5, 0x54, 
          0xFF, 0x68, 0xD5, 0x67, 0xD4, 0x06, 0xAD, 0x0B, 0xD8, 0x50, 
          0xF9, 0x58, 0xE0, 0x6F, 0xC5, 0x4A, 0xFD, 0x2F, 0x84, 0x36, 
          0x85, 0x52, 0xFB, 0x73, 0xD7, 0x0D, 0xE3]

# de = []
# tmp = 0
# for i in range(len(result)):
#     de.append(result[i]^238^tmp)
#     tmp = result[i]
# print(de)
# print(len(de))

de = [80, 102, 116, 101, 80, 56, 127, 116, 68, 95,
      107, 63, 80, 76, 65, 62, 68, 98, 60, 56,
      69, 76, 93, 60, 70, 95, 93, 61, 80, 95,
      69, 121, 83, 92, 93, 60, 69, 72, 61, 102,
      71, 79, 86, 97, 68, 97, 89, 60, 69, 92,
      93, 57, 71, 102, 74, 52]
print("".join(chr(i) for i in de))

for i in range(0, 56, 4):
    de[i] ^= 0xA
    de[i+1] ^= 0xB
    de[i+2] ^= 0xC
    de[i+3] ^= 0xD

print(de)
print("".join(chr(i) for i in de))
# ZmxhZ3syNTg2ZGM3Ni05OGQ1LTQ0ZTItYWQ1OC1kMDZlNjU1OWQ4MmF9
# flag{2586dc76-98d5-44e2-ad58-d06e6559d82a}


# flag_str = ""

# flag = [BitVec("v{}".format(i), 4) for i in range(0x2A)]

# j=0
# s=Solver()
# for i in range(0, 56, 4):

#     # s.add(result[i] == table[flag[j] >> 2] ^ 0xA)
#     # s.add(result[i+1] == table[(flag[j+1] >> 4) | (0x10 * (flag[j] & 3))] ^ 0xB)
#     # s.add(result[i+2] == table[(flag[j+2] >> 6) | (4 * (flag[j+1] & 0xF))] ^ 0xC)
#     # s.add(result[i+3] == table[flag[j+2] & 0x3F] ^ 0xD)

#     # s.add(result[i] ^ 0xA == table[flag[j] >> 2])
#     # s.add(result[i+1] ^ 0xB == table[(flag[j+1] >> 4) | (0x10 * (flag[j] & 3))])
#     # s.add(result[i+2] ^ 0xC == table[(flag[j+2] >> 6) | (4 * (flag[j+1] & 0xF))])
#     # s.add(result[i+3] ^ 0xD == table[flag[j+2] & 0x3F])
    
#     s.add(table.index(result[i] ^ 0xA) == flag[j] >> 2)
#     s.add(table.index(result[i+1] ^ 0xB) == (flag[j+1] >> 4) | (0x10 * (flag[j] & 3)))
#     s.add(table.index(result[i+2] ^ 0xC) == (flag[j+2] >> 6) | (4 * (flag[j+1] & 0xF)))
#     s.add(table.index(result[i+3] ^ 0xD) == flag[j+2] & 0x3F)

#     j += 3
    

# assert s.check() == sat
# model = s.model()
# print(model)
# flag_str += "".join([chr(model.eval(j).as_long()) for j in flag])

# print(flag_str)
```

ZmxhZ3syNTg2ZGM3Ni05OGQ1LTQ0ZTItYWQ1OC1kMDZlNjU1OWQ4MmF9

flag{2586dc76-98d5-44e2-ad58-d06e6559d82a}