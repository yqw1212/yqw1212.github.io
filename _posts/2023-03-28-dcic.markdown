---
layout: post
title:  DCIC2023
date:   2023-03-28 00:08:01 +0300
image:  2023-03-28-tea.jpg
tags:   [ctf,reverse,tea]
---

## game

main

```assembly
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax
  int v4; // eax
  int v5; // ecx
  int v6; // esi
  int v7; // edi
  int v8; // eax
  int (__cdecl *v9)(); // edi
  int v10; // eax
  int v11; // edx
  int *v12; // eax
  int v13; // ecx
  int v14; // eax
  int i; // esi
  int v16; // eax
  int v17; // eax
  int v18; // esi
  int v19; // edi
  int v20; // eax
  int v21; // eax
  int v23; // [esp+0h] [ebp-F8h]
  int v24; // [esp+0h] [ebp-F8h]
  int v25; // [esp+4h] [ebp-F4h]
  int v26; // [esp+4h] [ebp-F4h]
  _DWORD v27[25]; // [esp+10h] [ebp-E8h] BYREF
  int v28[25]; // [esp+74h] [ebp-84h] BYREF
  __int128 v29; // [esp+D8h] [ebp-20h] BYREF
  int v30; // [esp+F4h] [ebp-4h]

  sub_F337E0(0x280, 0x1E0, 0);
  v3 = GetTickCount();
  srand(v3);
  dword_F3E880 = 3;
  dword_F3E888 = 0x280;
  dword_F3E88C = 0xA;
  dword_F3E884 = 3;
  UFactory::operator_delete_void___EInternal____0(0xFFFFFF);
  v4 = 0;
  if ( dword_F3E880 > 0 )
  {
    v5 = 0x28;
    do
    {
      dword_F3E890[2 * v4] = v5;
      v5 -= 0xA;
      dword_F3E894[2 * v4++] = 0x14;
    }
    while ( v4 < dword_F3E880 );
  }
  dword_F3F830 = rand() % 0x280;
  dword_F3F834 = rand() % 0x1E0;
  v6 = (unsigned __int8)rand() << 8;
  v7 = (v6 | (unsigned __int8)rand()) << 8;
  v8 = v7 | (unsigned __int8)rand();
  v9 = rand;
  dword_F3F840 = v8;
  v10 = rand();
  byte_F3F83C = 1;
  dword_F3F838 = v10 % 0xA + 5;
  v29 = xmmword_F3AB30;
  SteamAPI_ISteamClient_GetISteamScreenshots(&byte_F3AA70, &v29, 0x25);
  getch();
  while ( 1 )
  {
    v11 = dword_F3E880 - 1;
    if ( dword_F3E880 - 1 > 0 )
    {
      v12 = &dword_F3E890[2 * v11];
      do
      {
        v13 = v12[0xFFFFFFFE];
        v12 += 0xFFFFFFFE;
        v12[2] = v13;
        --v11;
        v12[3] = v12[1];
      }
      while ( v11 > 0 );
    }
    switch ( dword_F3E884 )
    {
      case 0:
        dword_F3E894[0] -= dword_F3E88C;
        if ( dword_F3E894[0] < 0 )
          dword_F3E894[0] = 0x1E0;
        break;
      case 1:
        v14 = dword_F3E88C + dword_F3E894[0];
        if ( dword_F3E88C + dword_F3E894[0] > 0x1E0 )
          v14 = 0;
        dword_F3E894[0] = v14;
        break;
      case 2:
        dword_F3E890[0] -= dword_F3E88C;
        if ( dword_F3E890[0] < 0 )
          dword_F3E890[0] = 0x280;
        break;
      case 3:                                   // right
        dword_F3E890[0] += dword_F3E88C;
        if ( dword_F3E890[0] > 0x280 )
          dword_F3E890[0] = 0;
        break;
      default:
        break;
    }
    sub_F336E0();
    UFactory::operator_delete_void___EInternal___(0);
    sub_F337A0();
    for ( i = 0; i < dword_F3E880; ++i )
      SteamAPI_ISteamClient_GetISteamScreenshots_0(dword_F3E890[2 * i], dword_F3E894[2 * i], 5);
    if ( byte_F3F83C )
      SteamAPI_ISteamClient_GetISteamScreenshots_0(dword_F3F830, dword_F3F834, dword_F3F838);
    sub_F336F0();                               // draw
    if ( kbhit() )
    {
      v16 = getch();
      if ( v16 <= 's' )
      {
        if ( v16 != 's' )
        {
          switch ( v16 )
          {
            case 'A':
            case 'a':
              goto LABEL_32;
            case 'D':
            case 'd':
              goto LABEL_37;
            case 'S':
              break;
            case 'W':
              goto LABEL_30;
            default:
              goto LABEL_40;
          }
        }
LABEL_36:
        dword_F3E884 = dword_F3E884 != 0;
        goto LABEL_40;
      }
      if ( v16 > '75' )
      {
        if ( v16 != '77' )
        {
          if ( v16 != '80' )
            goto LABEL_40;
          goto LABEL_36;
        }
LABEL_37:
        v17 = dword_F3E884;
        if ( dword_F3E884 != 2 )
          v17 = 3;
        dword_F3E884 = v17;
      }
      else if ( v16 == '75' )
      {
LABEL_32:
        if ( dword_F3E884 != 3 )
          dword_F3E884 = 2;
      }
      else if ( v16 == 'w' || v16 == '72' )
      {
LABEL_30:
        if ( dword_F3E884 != 1 )
          dword_F3E884 = 0;
      }
    }
LABEL_40:
    if ( !byte_F3F83C )
      goto LABEL_46;
    if ( dword_F3E890[0] >= dword_F3F830 - dword_F3F838
      && dword_F3E890[0] <= dword_F3F838 + dword_F3F830
      && dword_F3E894[0] >= dword_F3F834 - dword_F3F838
      && dword_F3E894[0] <= dword_F3F838 + dword_F3F834 )
    {
      ++dword_F3E880;
      byte_F3F83C = 0;
LABEL_46:
      dword_F3F830 = v9() % 0x280;
      dword_F3F834 = v9() % 0x1E0;
      v18 = (unsigned __int8)v9() << 8;
      v19 = (v18 | (unsigned __int8)v9()) << 8;
      v20 = v19 | (unsigned __int8)rand();
      v9 = rand;
      dword_F3F840 = v20;
      v21 = rand();
      byte_F3F83C = 1;
      dword_F3F838 = v21 % 0xA + 5;
    }
    Sleep(0x64u);
    if ( dword_F3E880 == dword_F3E888 )
    {
      sub_F31120();
      memset(v28, 0, sizeof(v28));
      sub_F338B0(v28, 0, 0);
      v30 = 0;
      memset(v27, 0, sizeof(v27));
      sub_F338B0(v27, 0, 0);
      LOBYTE(v30) = 1;
      sub_F337E0(0x384, 0x3C, 0);
      sub_F33810((int)v28, "flag.png", 0, 0, 0);
      sub_F33840(0, 0, (int)v28, 0xCC0020);
      system("pause");
      sub_F337B0();
      Sleep(0x540BE3FFu);
      sub_F33C50(v23, v25);
      v30 = 0xFFFFFFFF;
      sub_F33C50(v24, v26);
    }
  }
}
```

发现必须使满足条件`dword_F3E880 == dword_F3E888`才能进行深入动调，所以patch变量的值使其相等，从而满足条件，运行得到了一个flag.png。

在函数中看到对flag文件的操作为逐字节异或

```assembly
int sub_F31120()
{
  int v0; // ecx
  int v1; // eax
  unsigned int v2; // ecx
  _BYTE *v3; // esi
  unsigned int v4; // edi
  int v5; // ecx
  int v6; // eax
  int v7; // ecx
  int v8; // edx
  _BYTE *v9; // eax
  int v10; // ecx
  int v11; // edx
  int v13; // [esp-4h] [ebp-1A8h]
  int v14; // [esp+10h] [ebp-194h]
  int v15; // [esp+1Ch] [ebp-188h]
  int v16[46]; // [esp+20h] [ebp-184h] BYREF
  int v17[44]; // [esp+D8h] [ebp-CCh] BYREF
  void *Block[2]; // [esp+188h] [ebp-1Ch]
  int v19; // [esp+190h] [ebp-14h]
  int v20; // [esp+1A0h] [ebp-4h]

  memset(v16, 0, sizeof(v16));
  v16[0] = (int)&unk_F3AB20;
  std::ios::ios(&v16[0x1C]);
  v20 = 0;
  v15 = 1;
  std::istream::istream(v16, &v16[4], 0, 0);
  v20 = 1;
  *(int *)((char *)v16 + *(_DWORD *)(v16[0] + 4)) = (int)&std::ifstream::`vftable';
  *(int *)((char *)&v15 + *(_DWORD *)(v16[0] + 4)) = *(_DWORD *)(v16[0] + 4) - 0x70;
  std::streambuf::streambuf(&v16[4]);
  LOBYTE(v20) = 2;
  v16[4] = (int)&std::filebuf::`vftable';
  LOBYTE(v16[0x16]) = 0;
  BYTE1(v16[0x13]) = 0;
  std::streambuf::_Init(&v16[4]);
  v16[0x14] = dword_F3F848;
  v16[0x17] = 0;
  v16[0x15] = dword_F3F84C;
  v16[0x12] = 0;
  LOBYTE(v20) = 3;
  if ( !sub_F32AF0((int)&v16[4], "./sinke", 0x21, v0) )
    std::ios::setstate((char *)v16 + *(_DWORD *)(v16[0] + 4), 2, 0);
  v20 = 4;
  LOBYTE(v15) = 0;
  BYTE1(v14) = 0;
  v1 = *(int *)((char *)&v16[0xE] + *(_DWORD *)(v16[0] + 4));
  LOBYTE(v14) = v1 == 0;
  Block[0] = 0;
  Block[1] = 0;
  v19 = 0;
  sub_F331E0(v1, v14, 0, 1, v15);
  LOBYTE(v20) = 5;
  if ( !sub_F32A80(&v16[4]) )
    std::ios::setstate((char *)v16 + *(_DWORD *)(v16[0] + 4), 2, 0);
  v2 = 0;
  v3 = Block[0];
  v4 = Block[1] - Block[0];
  if ( Block[1] != Block[0] )
  {
    do
      v3[v2++] ^= dword_F3E880;
    while ( v2 < v4 );
  }
  memset(v17, 0, sizeof(v17));
  v17[0] = (int)&unk_F3AB18;
  std::ios::ios(&v17[0x1A]);
  LOBYTE(v20) = 6;
  v15 = 3;
  std::ostream::ostream(v17, &v17[1], 0, 0);
  v20 = 7;
  *(int *)((char *)v17 + *(_DWORD *)(v17[0] + 4)) = (int)&std::ofstream::`vftable';
  *(int *)((char *)&v16[0x2D] + *(_DWORD *)(v17[0] + 4)) = *(_DWORD *)(v17[0] + 4) - 0x68;
  std::streambuf::streambuf(&v17[1]);
  LOBYTE(v20) = 8;
  v17[1] = (int)&std::filebuf::`vftable';
  LOBYTE(v17[0x13]) = 0;
  BYTE1(v17[0x10]) = 0;
  std::streambuf::_Init(&v17[1]);
  v17[0x11] = dword_F3F848;
  v17[0x14] = 0;
  v17[0x12] = dword_F3F84C;
  v17[0xF] = 0;
  LOBYTE(v20) = 9;
  if ( !sub_F32AF0((int)&v17[1], "flag.png", 0x22, v5) )
    std::ios::setstate((char *)v17 + *(_DWORD *)(v17[0] + 4), 2, 0);
  LOBYTE(v20) = 0xA;
  std::ostream::write(v17, v3, v4, 0);
  if ( !sub_F32A80(&v17[1]) )
    std::ios::setstate((char *)v17 + *(_DWORD *)(v17[0] + 4), 2, 0);
  v6 = sub_F32C90(std::endl<char,std::char_traits<char>>);
  std::ostream::operator<<(v6, v13);
  *(int *)((char *)v17 + *(_DWORD *)(v17[0] + 4)) = (int)&std::ofstream::`vftable';
  *(int *)((char *)&v16[0x2D] + *(_DWORD *)(v17[0] + 4)) = *(_DWORD *)(v17[0] + 4) - 0x68;
  LOBYTE(v20) = 0xB;
  v17[1] = (int)&std::filebuf::`vftable';
  if ( v17[0x14] && *(int **)v17[4] == &v17[0x10] )
  {
    v7 = v17[0x15];
    v8 = v17[0x16] - v17[0x15];
    *(_DWORD *)v17[4] = v17[0x15];
    *(_DWORD *)v17[8] = v7;
    *(_DWORD *)v17[0xC] = v8;
  }
  if ( LOBYTE(v17[0x13]) )
    sub_F32A80(&v17[1]);
  std::streambuf::~streambuf<char,std::char_traits<char>>(&v17[1]);
  std::ostream::~ostream<char,std::char_traits<char>>(&v17[2]);
  std::ios::~ios<char,std::char_traits<char>>(&v17[0x1A]);
  LOBYTE(v20) = 4;
  if ( v3 )
  {
    v9 = v3;
    if ( (unsigned int)(v19 - (_DWORD)v3) >= 0x1000 )
    {
      v3 = (_BYTE *)*((_DWORD *)v3 + 0xFFFFFFFF);
      if ( (unsigned int)(v9 - v3 - 4) > 0x1F )
        invalid_parameter_noinfo_noreturn();
    }
    atoi(v3);
  }
  *(int *)((char *)v16 + *(_DWORD *)(v16[0] + 4)) = (int)&std::ifstream::`vftable';
  *(int *)((char *)&v15 + *(_DWORD *)(v16[0] + 4)) = *(_DWORD *)(v16[0] + 4) - 0x70;
  v20 = 0xC;
  v16[4] = (int)&std::filebuf::`vftable';
  if ( v16[0x17] && *(int **)v16[7] == &v16[0x13] )
  {
    v10 = v16[0x18];
    v11 = v16[0x19] - v16[0x18];
    *(_DWORD *)v16[7] = v16[0x18];
    *(_DWORD *)v16[0xB] = v10;
    *(_DWORD *)v16[0xF] = v11;
  }
  if ( LOBYTE(v16[0x16]) )
    sub_F32A80(&v16[4]);
  std::streambuf::~streambuf<char,std::char_traits<char>>(&v16[4]);
  std::istream::~istream<char,std::char_traits<char>>(&v16[6]);
  std::ios::~ios<char,std::char_traits<char>>(&v16[0x1C]);
  return 0;
}
```

猜测只有异或操作，且每个字节异或的数值都相同。

![]({{site.baseurl}}/img/2023-03-28-flag.jpg)

## ez_kernel

xxtea

在p的值那里走了弯路

```assembly
#include <stdio.h>
#include <stdint.h>
#define MX (((z >> 5) ^ (y << 2)) + ((y >> 3) ^ (z << 4))) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z))
#define DELTA 0x67616C66


//XXTEA 解密，把加密的步骤反过来即可得到解密的方法
static uint32_t * xxtea_uint_decrypt(uint32_t * data, size_t len, uint32_t * key) {
    uint32_t n = (uint32_t)len-1;
    uint32_t z, y = data[0], p, q = 6 + 52 / (n + 1), sum = q * DELTA, e;

    if (n < 1) return data;

    while (sum != 0) {
        e = sum >> 2 & 3;

        for (p = n; p > 0; p--) {
            z = data[p - 1];
            y = data[p] -= MX;
        }

        z = data[n];
        y = data[0] -= MX;
        sum -= DELTA;
    }

    return data;
}

int main(int argc, char const *argv[])
{
    unsigned int v[9] = {0xC883B3AA, 0x7FB3950,
                         0x75BC5959, 0x7AB57E27,
                         0xC0249800, 0xADA35753,
                         0xBF1D493F, 0x6E14AF04,
                         0x468312C4}, key[4] = {0x04DB, 0x0000E, 0x0017, 0x02A6};
    xxtea_uint_decrypt(v,9,key);
    for(int i=0; i<9; i++){
        printf("%x ",v[i]);
    }

    printf("\n%s", v);
    return 0;
}
// 541c290d-e89f-4539-8d24-2ccbd1ead8ae
// c144d09298e-54f-8-93-42dbcc2ae1dea8d
```

